#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Свойство("ИдентификаторНастройки", ИдентификаторНастройки);
	
	ИмяПланаОбмена = "СинхронизацияДанныхЧерезУниверсальныйФормат";
	
	ОбменДаннымиСервер.ФормаНастройкиУзлаПриСозданииНаСервере(ЭтаФорма, ИмяПланаОбмена);
	Если Параметры.Свойство("ИдентификаторНастройки") И Параметры.ИдентификаторНастройки = "ОбменУТБП" Тогда
		ЭтаФорма.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПравилаОтправкиСправочников) Тогда
		ПравилаОтправкиСправочников = "АвтоматическаяСинхронизация";
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ПравилаОтправкиЦен) Тогда
		ПравилаОтправкиЦен = "АвтоматическаяСинхронизация";
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ПравилаОтправкиДокументов) Тогда
		ПравилаОтправкиДокументов = "АвтоматическаяСинхронизация";
	КонецЕсли;
	Если Не ЗначениеЗаполнено(РежимВыгрузкиПриНеобходимости) тогда
		РежимВыгрузкиПриНеобходимости = 
			Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПриНеобходимости;
	КонецЕсли;
	
	Если ИспользоватьОтборПоОрганизациям Тогда
		ПравилоОтбораСправочников = "Отбор";
	Иначе
		ПравилоОтбораСправочников = "БезОтбора";
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"УстановитьДатуЗапретаИзменений",
		"Доступность",
		ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ДатыЗапретаИзменения));
	
	УстановитьВидимостьНаСервере();
	ОбновитьНаименованиеКомандФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ОбменДаннымиКлиент.ФормаНастройкиПередЗакрытием(Отказ, ЭтотОбъект, ЗавершениеРаботы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	ОбновитьДанныеОбъекта(ВыбранноеЗначение);
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ИдентификаторНастройки = "ОбменКасса" Тогда
		
		Для каждого СтрокаСклад Из Склады Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаСклад.Склад) Тогда
				НомерСтроки = Склады.Индекс(СтрокаСклад)+1;
				
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, НСтр("ru = 'Розничный магазин'"),
					НомерСтроки, "Склады");
				
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Склады", НомерСтроки, "Склад");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, , Отказ);
			КонецЕсли;
		КонецЦикла;
		
		Если Не Отказ Тогда
			// Проверим, что все склады имеют одинаковый тип цен
			Запрос = Новый Запрос();
			Запрос.Параметры.Вставить("Склады", Склады.Выгрузить(, "Склад"));
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Склады.ТипЦенРозничнойТорговли
			|ИЗ
			|	Справочник.Склады КАК Склады
			|ГДЕ
			|	Склады.Ссылка В(&Склады)";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Количество() > 1 Тогда
				ТекстСообщения = НСтр("ru = 'У всех выбранных розничных магазинов должен быть указан одинаковый тип цен'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Склады", , Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Склады"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ФлагИспользоватьОтборПоОрганизациямПриИзменении(Элемент)
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательОтправлятьНСИАвтоматическиПриИзменении(Элемент)
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательОтправлятьНСИПоНеобходимостиПриИзменении(Элемент)
	
	Если ПравилаОтправкиСправочников = "СинхронизироватьПоНеобходимости" 
		И ПравилаОтправкиДокументов = "НеСинхронизировать" Тогда
		
		ПравилаОтправкиДокументов = "АвтоматическаяСинхронизация";
		
	КонецЕсли;
	
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательОтправлятьНСИНикогдаПриИзменении(Элемент)
	ПравилаОтправкиДокументов = "НеСинхронизировать";
	ПравилаОтправкиЦен        = "НеСинхронизировать";
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательДокументыОтправлятьАвтоматическиПриИзменении(Элемент)
	ПравилаОтправкиЦен = ПравилаОтправкиДокументов;
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательДокументыОтправлятьВручнуюПриИзменении(Элемент)
	ПравилаОтправкиЦен = ПравилаОтправкиДокументов;
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательДокументыНеОтправлятьПриИзменении(Элемент)
	ПравилаОтправкиЦен = ПравилаОтправкиДокументов;
	УстановитьВидимостьНаСервере();
КонецПроцедуры

#Область СтраницаНастройкиПравилОтправкиДляИнформационнойБазыБухгалтерияПредприятия

&НаКлиенте
Процедура СкладыПослеУдаления(Элемент)
	
	Если Склады.Количество() = 0 Тогда
		ТипЦенДляИзмененияЦен = ПредопределенноеЗначение("Справочник.ТипыЦенНоменклатуры.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкладыСкладНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("Отбор", Новый Структура("ТипСклада", ПредопределенноеЗначение("Перечисление.ТипыСкладов.РозничныйМагазин")));
	ПараметрыФормы.Вставить("КлючПользовательскихНастроек", "ВыборРозничногоСклада");
	ПараметрыФормы.Вставить("ОтборТипЦенРозничнойТорговли", ТипЦенДляИзмененияЦен);
	ТекущиеДанные = Элементы.Склады.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено
		И ЗначениеЗаполнено(ТекущиеДанные.Склад) Тогда
		ПараметрыФормы.Вставить("ТекущаяСтрока", ТекущиеДанные.Склад);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.Склады.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СкладыСкладПриИзменении(Элемент)
	
	Строка = Склады.НайтиПоИдентификатору(Элементы.Склады.ТекущаяСтрока);
	Если Склады.Индекс(Строка) = 0 Тогда
		УстановитьВыбранныйТипЦенРозничнойТорговли();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОК(Команда)
	
	// Очистка неиспользуемых реквизитов и заполнение служебных
	
	РежимВыгрузкиПриНеобходимости = 
		ПредопределенноеЗначение("Перечисление.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПриНеобходимости");
	
	Если ПравилаОтправкиСправочников = "НеСинхронизировать" Тогда
		
		ИспользоватьОтборПоОрганизациям = Ложь;
		
		РежимВыгрузкиСправочников = 
			ПредопределенноеЗначение("Перечисление.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию");
		
	ИначеЕсли ПравилаОтправкиСправочников = "СинхронизироватьПоНеобходимости" Тогда
		
		РежимВыгрузкиСправочников = 
			ПредопределенноеЗначение("Перечисление.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПриНеобходимости");
		
	Иначе
		
		РежимВыгрузкиСправочников = 
			ПредопределенноеЗначение("Перечисление.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию");
		
	КонецЕсли;
	
	Если Не ИспользоватьОтборПоОрганизациям И Организации.Количество() <> 0 Тогда
		Организации.Очистить();
	ИначеЕсли Организации.Количество() = 0 И ИспользоватьОтборПоОрганизациям Тогда
		ИспользоватьОтборПоОрганизациям = Ложь;
	КонецЕсли;
	
	Если Не ИспользоватьОтборПоСкладам И Склады.Количество() > 0 Тогда
		Склады.Очистить();
	ИначеЕсли Склады.Количество() = 0 И ИспользоватьОтборПоСкладам Тогда
		ИспользоватьОтборПоСкладам = Ложь;
	КонецЕсли;
	
	// Сохранение настроек
	ОбменДаннымиКлиент.ФормаНастройкиУзлаКомандаЗакрытьФорму(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокВыбранныхОрганизаций(Команда)
	
	КоллекцияФильтров = Неопределено;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ИмяЭлементаФормыДляЗаполнения",          "Организации");
	ПараметрыФормы.Вставить("ИмяРеквизитаЭлементаФормыДляЗаполнения", "Организация");
	ПараметрыФормы.Вставить("ИмяТаблицыВыбора",                       "Справочник.Организации");
	ПараметрыФормы.Вставить("ЗаголовокФормыВыбора",                   НСтр("ru = 'Выберите организации для отбора:'"));
	ПараметрыФормы.Вставить("МассивВыбранныхЗначений",                СформироватьМассивВыбранныхЗначений(ПараметрыФормы));
	ПараметрыФормы.Вставить("ПараметрыВнешнегоСоединения",            Неопределено);
	ПараметрыФормы.Вставить("КоллекцияФильтров",                      КоллекцияФильтров);

	ОткрытьФорму("ОбщаяФорма.ФормаВыбораДополнительныхУсловий",
		ПараметрыФормы,
		ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Прочее

&НаСервере
Процедура УстановитьВидимостьНаСервере()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаВыгрузкаКассаРозничныеСклады",
		"Видимость",
		ИдентификаторНастройки = "ОбменКасса");
	
	Если ИдентификаторНастройки = "ОбменКасса" Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаОсновные",
			"Видимость",
			Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаНастройкаДополнительныхОтборов",
			"Видимость",
			Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаПрочее",
			"Видимость",
			Ложь);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ДатаНачалаВыгрузкиДокументов",
			"Доступность",
			ПравилаОтправкиДокументов = "АвтоматическаяСинхронизация");
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ПереключательДокументыНеОтправлять",
			"Доступность",
			Не ПравилаОтправкиСправочников = "СинхронизироватьПоНеобходимости");
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы.ГруппаДокументы.ПодчиненныеЭлементы,
			"ГруппаДокументы",
			"Доступность",
			Не ПравилаОтправкиСправочников = "НеСинхронизировать");
			
		#Область ГруппаНастройкаДополнительныхОтборов
		ВидимостьГруппы = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций")
			И ПравилаОтправкиСправочников <> "НеСинхронизировать";
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаНастройкаДополнительныхОтборов",
			"Видимость",
			ВидимостьГруппы);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ОткрытьСписокВыбранныхОрганизаций",
			"Доступность",
			ИспользоватьОтборПоОрганизациям);
		#КонецОбласти

		#Область ГруппаПрочее
		ВидимостьГруппы = ПравилаОтправкиДокументов <> "НеСинхронизировать"
			Или ПравилаОтправкиСправочников <> "НеСинхронизировать";
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаПрочее",
			"Видимость",
			ВидимостьГруппы);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ВыгружатьАналитикуПоСкладам",
			"Видимость",
			ПравилаОтправкиДокументов <> "НеСинхронизировать");
		#КонецОбласти
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеОбъекта(СтруктураПараметров)
	
	ЭтаФорма[СтруктураПараметров.ИмяТаблицыДляЗаполнения].Очистить();
	
	СписокВыбранныхЗначений = ПолучитьИзВременногоХранилища(СтруктураПараметров.АдресТаблицыВоВременномХранилище);
	
	Если СписокВыбранныхЗначений.Количество() > 0 Тогда
		СписокВыбранныхЗначений.Колонки.Представление.Имя = СтруктураПараметров.ИмяКолонкиДляЗаполнения;
		ЭтаФорма[СтруктураПараметров.ИмяТаблицыДляЗаполнения].Загрузить(СписокВыбранныхЗначений);
	КонецЕсли;
	
	ОбновитьНаименованиеКомандФормы();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаименованиеКомандФормы()
	
	Если ИдентификаторНастройки <> "ОбменКасса" Тогда
		
		//Обновим заголовок выбранных организаций
		Если Организации.Количество() > 0 Тогда
			
			ВыбранныеОрганизации = Организации.Выгрузить().ВыгрузитьКолонку("Организация");
			НовыйЗаголовокОрганизаций = СтрСоединить(ВыбранныеОрганизации, ",");
			
		Иначе
			
			НовыйЗаголовокОрганизаций = НСтр("ru = 'Выбрать организации'");
			
		КонецЕсли;
		
		Элементы.ОткрытьСписокВыбранныхОрганизаций.Заголовок = НовыйЗаголовокОрганизаций;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьМассивВыбранныхЗначений(ПараметрыФормы)
	
	ТабличнаяЧасть           = ЭтаФорма[ПараметрыФормы.ИмяЭлементаФормыДляЗаполнения];
	ТаблицаВыбранныхЗначений = ТабличнаяЧасть.Выгрузить(,ПараметрыФормы.ИмяРеквизитаЭлементаФормыДляЗаполнения);
	МассивВыбранныхЗначений  = ТаблицаВыбранныхЗначений.ВыгрузитьКолонку(ПараметрыФормы.ИмяРеквизитаЭлементаФормыДляЗаполнения);
	
	Возврат МассивВыбранныхЗначений;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТипЦенСклада(Склад)
	
	Если ЗначениеЗаполнено(Склад) Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "ТипЦенРозничнойТорговли");
	Иначе
		Возврат Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УстановитьВыбранныйТипЦенРозничнойТорговли()
	
	Если Склады.Количество() > 0 Тогда
		ТипЦенДляИзмененияЦен = ТипЦенСклада(Склады[0].Склад);
	Иначе
		ТипЦенДляИзмененияЦен = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ТипСклада", Перечисления.ТипыСкладов.РозничныйМагазин));
	
	Если ЗначениеЗаполнено(ТипЦенДляИзмененияЦен) Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ТипЦенРозничнойТорговли", ТипЦенДляИзмененияЦен));
	КонецЕсли;
	
	Элементы.СкладыСклад.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецФункции

#КонецОбласти

#КонецОбласти