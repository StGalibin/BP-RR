
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Свойство("ИдентификаторНастройки", ИдентификаторНастройки);
	
	Если Параметры.Свойство("ПараметрыПодключения")
		И ИдентификаторНастройки <> "ОбменКасса" Тогда
		ПараметрыСоединения = Параметры.ПараметрыПодключения;
		ФункциональныеОпцииБазыКорреспондента = ЗаполнитьФункциональныеОпцииБазыКорреспондента(Параметры, Отказ);
		Если ФункциональныеОпцииБазыКорреспондента <> Неопределено Тогда
			СформироватьСписокВыбораПравилФормированияДоговора();
		КонецЕсли;
	КонецЕсли;
	
	ИменаРеквизитов                   = СтруктураСоответсвтияНастройкиОтборовРеквизитамФормы();
	ИменаРеквизитовБазыКорреспондента = СтруктураСоответсвтияНастройкиОтборовКорреспондентаРеквизитамФормы();
	
	ОбменДаннымиСервер.ФормаНастройкиУзловПриСозданииНаСервере(ЭтотОбъект, Отказ);
	
	Если ИдентификаторНастройки = "ОбменКасса" Тогда
		
		СтруктураОтбора = Новый Структура("Использовать", Истина);
		Склады.Загрузить(Склады.Выгрузить(СтруктураОтбора));
		Для Каждого Строка Из Склады Цикл
			Строка.Представление = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(Строка.УникальныйИдентификаторСсылки));
		КонецЦикла;
		
		// Если заполнен список складов, но при этом не заполнен тип цен,
		// то это первый запуск обмена в сервисе и заполнить список складов по умолчанию нельзя.
		// В этом случае механизм обмена заполняет список всеми возможными значениями.
		// Поэтому список складов нужно очистить, так как там точно есть лишние склады.
		
		Если Склады.Количество() > 0
			И Не ЗначениеЗаполнено(ТипЦенДляИзмененияЦен) Тогда
			Склады.Очистить();
		КонецЕсли;
		
	Иначе
		СтруктураОтбора = Новый Структура("Использовать", Истина);
		ОрганизацииБП.Загрузить(ОрганизацииБП.Выгрузить(СтруктураОтбора));
		Для Каждого Строка Из ОрганизацииБП Цикл
			Строка.Представление = Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор(Строка.УникальныйИдентификаторСсылки));
		КонецЦикла;
		
		Если ИспользоватьОтборПоОрганизациямБП Тогда
			ПравилаОтбораОрганизаций = "Отбор";
		Иначе
			ПравилаОтбораОрганизаций = "БезОтбора";
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РежимВыгрузкиПриНеобходимости) тогда
		РежимВыгрузкиПриНеобходимости = 
			Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПриНеобходимости;
	КонецЕсли;
	
	УстановитьВидимостьНаСервере();
	ОбновитьНаименованиеКомандФормы();
	ПолучитьОписаниеКонтекста();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ОбменДаннымиКлиент.ФормаНастройкиПередЗакрытием(Отказ, ЭтотОбъект, ЗавершениеРаботы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ОбновитьДанныеОбъекта(ВыбранноеЗначение);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ПравилаОтправкиДокументовУП = "НеСинхронизировать" Тогда
		
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ПравилаСозданияДоговоровКонтрагентов"));
		
	КонецЕсли;
	
	Если ИдентификаторНастройки = "ОбменКасса" Тогда
		
		Для каждого СтрокаСклад Из Склады Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаСклад.Представление) Тогда
				НомерСтроки = Склады.Индекс(СтрокаСклад)+1;
				
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, НСтр("ru = 'Розничный магазин'"),
					НомерСтроки, "Склады");
				
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Склады", НомерСтроки, "Представление");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, , Отказ);
			КонецЕсли;
		КонецЦикла;
		
		Если Не Отказ Тогда
			// Проверим, что все склады имеют одинаковый тип цен
			Запрос = Новый Запрос();
			Запрос.Параметры.Вставить("Склады", Склады.Выгрузить(, "Представление"));
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Склады.ТипЦенРозничнойТорговли
			|ИЗ
			|	Справочник.Склады КАК Склады
			|ГДЕ
			|	Склады.Ссылка В(&Склады)";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Количество() > 1 Тогда
				ТекстСообщения = НСтр("ru = 'У всех выбранных розничных магазинов должен быть указан одинаковый тип цен'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Склады", , Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Склады"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если Не ЗаписатьИЗакрытьНаСервере() Тогда
		Возврат;
	КонецЕсли;
	
	ОбменДаннымиКлиент.ФормаНастройкиУзловКомандаЗакрытьФорму(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокВыбранныхОрганизаций(Команда)
	
	ПараметрыФормы = Новый Структура();
	Если ТекущийЭлемент.Имя = "ОткрытьСписокВыбранныхОрганизацийУП" Тогда
		
		ПараметрыФормы.Вставить("ИмяЭлементаФормыДляЗаполнения",          "ОрганизацииУП");
		ПараметрыФормы.Вставить("ИмяРеквизитаЭлементаФормыДляЗаполнения", "УникальныйИдентификаторСсылки");
		ПараметрыФормы.Вставить("ПараметрыВнешнегоСоединения",            ПараметрыСоединения);
		КоллекцияФильтров = Неопределено;
		ПараметрыФормы.Вставить("КоллекцияФильтров",                      КоллекцияФильтров);
		
	ИначеЕсли ТекущийЭлемент.Имя = "ОткрытьСписокВыбранныхОрганизацийБП" Тогда
		
		ПараметрыФормы.Вставить("ИмяЭлементаФормыДляЗаполнения",          "ОрганизацииБП");
		ПараметрыФормы.Вставить("ИмяРеквизитаЭлементаФормыДляЗаполнения", "Представление");

		ПараметрыФормы.Вставить("ПараметрыВнешнегоСоединения",            Неопределено);
		
		ПараметрыФормы.Вставить("КоллекцияФильтров",                      Неопределено);
		
	Иначе
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ИмяТаблицыВыбора",                       "Справочник.Организации");
	ПараметрыФормы.Вставить("ЗаголовокФормыВыбора",                   НСтр("ru = 'Выберите организации для отбора:'"));
	ПараметрыФормы.Вставить("МассивВыбранныхЗначений",                СформироватьМассивВыбранныхЗначений(ПараметрыФормы));
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораДополнительныхУсловий",
		ПараметрыФормы,
		ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокОтправляемыхВидовЦенНоменклатуры(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ИмяЭлементаФормыДляЗаполнения",          "ВидыЦенНоменклатуры");
	ПараметрыФормы.Вставить("ИмяРеквизитаЭлементаФормыДляЗаполнения", "Представление");
	ПараметрыФормы.Вставить("ИмяТаблицыВыбора",                       "Справочник.ВидыЦен");
	ПараметрыФормы.Вставить("ЗаголовокФормыВыбора",                   НСтр("ru = 'Выберите виды цен для отправки:'"));
	ПараметрыФормы.Вставить("МассивВыбранныхЗначений",                СформироватьМассивВыбранныхЗначений(ПараметрыФормы));
	ПараметрыФормы.Вставить("ПараметрыВнешнегоСоединения",            Неопределено);
	ПараметрыФормы.Вставить("КоллекцияФильтров",                      Неопределено);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораДополнительныхУсловий",
		ПараметрыФормы,
		ЭтаФорма);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область СтраницаНастройкиПравилОтправкиДляИнформационнойБазыУправлениеТорговлей

&НаКлиенте
Процедура ПереключательОтбораСправочниковСОтборомПриИзменении(Элемент)
	УстрановитьУсловияОрганиченияСинхронизации();
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательОтбораСправочниковБезОтбораСУпрПриИзменении(Элемент)
	УстрановитьУсловияОрганиченияСинхронизации();
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательОтбораСправочниковБезОтбораБезУпрПриИзменении(Элемент)
	УстрановитьУсловияОрганиченияСинхронизации();
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательОтправлятьНСИАвтоматическиУППриИзменении(Элемент)
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательОтправлятьНСИПоНеобходимостиУППриИзменении(Элемент)
	
	Если ПравилаОтправкиСправочниковУП = "СинхронизироватьПоНеобходимости" 
		И ПравилаОтправкиДокументовУП = "НеСинхронизировать" Тогда
		
		ПравилаОтправкиДокументовУП = "АвтоматическаяСинхронизация";
		
	КонецЕсли;

	УстановитьВидимостьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательОтправлятьНСИНикогдаУППриИзменении(Элемент)
	ПравилаОтправкиДокументовУП = "НеСинхронизировать";
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательДокументыОтправлятьАвтоматическиУППриИзменении(Элемент)
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательДокументыОтправлятьВручнуюУППриИзменении(Элемент)
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательДокументыНеОтправлятьУППриИзменении(Элемент)
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ФлагИспользоватьОтборПоОрганизациямУППриИзменении(Элемент)
	УстановитьВидимостьНаСервере();
КонецПроцедуры

#КонецОбласти

#Область СтраницаНастройкиПравилОтправкиДляИнформационнойБазыБухгалтерияПредприятия

&НаКлиенте
Процедура ПереключательОтправлятьНСИАвтоматическиБППриИзменении(Элемент)
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательОтправлятьНСИПоНеобходимостиБППриИзменении(Элемент)
	
	Если ПравилаОтправкиСправочниковБП = "СинхронизироватьПоНеобходимости" 
		И ПравилаОтправкиДокументовБП = "НеСинхронизировать" Тогда
		
		ПравилаОтправкиДокументовБП = "АвтоматическаяСинхронизация";
		
	КонецЕсли;

	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательОтправлятьНСИНикогдаБППриИзменении(Элемент)
	ПравилаОтправкиЦенБП        = "НеСинхронизировать";
	ПравилаОтправкиДокументовБП = "НеСинхронизировать";
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательДокументыОтправлятьАвтоматическиБППриИзменении(Элемент)
	ПравилаОтправкиЦенБП = ПравилаОтправкиДокументовБП;
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательДокументыОтправлятьВручнуюБППриИзменении(Элемент)
	ПравилаОтправкиЦенБП = ПравилаОтправкиДокументовБП;
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательДокументыНеОтправлятьБППриИзменении(Элемент)
	ПравилаОтправкиЦенБП = ПравилаОтправкиДокументовБП;
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ФлагИспользоватьОтборПоОрганизациямБППриИзменении(Элемент)
	УстановитьВидимостьНаСервере();
КонецПроцедуры

#КонецОбласти

#Область СтраницаНастройкиПравилОтправкиДляИнформационнойБазыБухгалтерияПредприятия

&НаКлиенте
Процедура СкладыПослеУдаления(Элемент)
	
	Если Склады.Количество() = 0 Тогда
		ТипЦенДляИзмененияЦен = ПредопределенноеЗначение("Справочник.ТипыЦенНоменклатуры.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкладыСкладНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("Отбор", Новый Структура("ТипСклада", ПредопределенноеЗначение("Перечисление.ТипыСкладов.РозничныйМагазин")));
	ПараметрыФормы.Вставить("КлючПользовательскихНастроек", "ВыборРозничногоСклада");
	ПараметрыФормы.Вставить("ОтборТипЦенРозничнойТорговли", ТипЦенДляИзмененияЦен);
	ТекущиеДанные = Элементы.Склады.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено
		И ЗначениеЗаполнено(ТекущиеДанные.Представление) Тогда
		ПараметрыФормы.Вставить("ТекущаяСтрока", ТекущиеДанные.Представление);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.Склады.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СкладыСкладПриИзменении(Элемент)
	УстановитьДополнительныеЗначенияСклада(Элементы.Склады.ТекущаяСтрока);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Прочее

&НаСервере
Процедура ПолучитьОписаниеКонтекста()
	
	Если ИдентификаторНастройки = "ОбменКасса" Тогда
		
		ОписаниеКонтекста = НСтр("ru = 'Правила отправки данных из этой информационной базы:'") + Символы.ПС;
		
		Если Склады.Количество() = 0 Тогда
			ОписаниеКонтекста = ОписаниеКонтекста + Символы.Таб + НСтр("ru = 'Не заданы розничные магазины, с которыми будет выполняться синхронизация'");
		Иначе
			ОписаниеСкладов = "";
			НомерСклада = 0;
			Для Каждого Склад Из Склады Цикл
				НомерСклада = НомерСклада + 1;
				Если НомерСклада > 2
					И Склады.Количество() > 3 Тогда
					ОписаниеСкладов = ОписаниеСкладов + " " + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'и еще %1 шт.'"), Строка(Склады.Количество() - НомерСклада + 1));
					Прервать;
				Иначе
					ОписаниеСкладов = ОписаниеСкладов + ?(ЗначениеЗаполнено(ОписаниеСкладов), ", ", "") +
						Строка(Склад.Представление);
				КонецЕсли;
			КонецЦикла;
			
			ОписаниеКонтекста = ОписаниеКонтекста + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Символы.Таб + НСтр("ru = 'Отправляются товары по розничным магазинам %1'"), ОписаниеСкладов) + Символы.ПС;
		КонецЕсли;
		ОписаниеКонтекста = ОписаниеКонтекста + Символы.ПС + Символы.ПС;
		
		ОписаниеКонтекста = ОписаниеКонтекста + НСтр("ru = 'Правила отправки данных из информационной базы-корреспондента:'") + Символы.ПС;
		
		ОписаниеКонтекста = ОписаниеКонтекста + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Символы.Таб + НСтр("ru = 'Отправляются отчеты о розничных продажах, начиная с ""%1""'"),
			Формат(ДатаНачалаВыгрузкиДокументовКасса, "ДФ=dd.MM.yyyy"));
		
	Иначе
		
		ОписаниеКонтекста = (""
			+ СформироватьОписаниеПравилОтправкиБП()
			+ Символы.ПС + Символы.ПС
			+ СформироватьОписаниеПравилОтправкиУП()
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаименованиеКомандФормы()
	
	Если ИдентификаторНастройки <> "ОбменКасса" Тогда
		
		//Обновим заголовок выбранных организаций конфигурации "Управление торговлей"
		Если ОрганизацииУП.Количество() > 0 И ПравилаОтбораОрганизаций = "Отбор" Тогда
			
			ВыбранныеОрганизации = ОрганизацииУП.Выгрузить().ВыгрузитьКолонку("Представление");
			НовыйЗаголовокОрганизаций = СтрСоединить(ВыбранныеОрганизации, ", ");
			
		Иначе
			
			НовыйЗаголовокОрганизаций = НСтр("ru = 'Выбрать организации'");
			
		КонецЕсли;
		
		Элементы.ОткрытьСписокВыбранныхОрганизацийУП.Заголовок = НовыйЗаголовокОрганизаций;
		
		//Обновим заголовок выбранных организаций конфигурации "Бухгалтерия предприятия"
		Если ОрганизацииБП.Количество() > 0 Тогда
			
			ВыбранныеОрганизации = ОрганизацииБП.Выгрузить().ВыгрузитьКолонку("Представление");
			НовыйЗаголовокОрганизаций = СтрСоединить(ВыбранныеОрганизации, ", ");
			
		Иначе
			
			НовыйЗаголовокОрганизаций = НСтр("ru = 'Выбрать организации'");
			
		КонецЕсли;
		
		Элементы.ОткрытьСписокВыбранныхОрганизацийБП.Заголовок = НовыйЗаголовокОрганизаций;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьОписаниеПравилОтправкиУП()
	
	ТекстОписанияУП = НСтр("ru = 'Правила отправки данных из информационной базы-корреспондента:'") + Символы.ПС;
	
	Если ПравилаОтправкиСправочниковУП = "АвтоматическаяСинхронизация" Тогда
		
		ТекстОписанияУП = ТекстОписанияУП + 
			НСтр("ru = 'Вся нормативно-справочная информация регистрируется к отправке автоматически;'");
			
	ИначеЕсли ПравилаОтправкиСправочниковУП = "СинхронизироватьПоНеобходимости" Тогда
		
		ТекстОписанияУП = ТекстОписанияУП + 
			НСтр("ru = 'К отправке регистрируется только используемая в документах нормативно-справочная информация;'");
			
	ИначеЕсли ПравилаОтправкиСправочниковУП = "НеСинхронизировать" Тогда
		
		ТекстОписанияУП = ТекстОписанияУП + 
		НСтр("ru = 'Данные из этой информационной базы отправляться не будут.'");
		
	КонецЕсли;
	
	Если ПравилаОтправкиДокументовУП = "АвтоматическаяСинхронизация" Тогда
		
		Если ЗначениеЗаполнено(ДатаНачалаВыгрузкиДокументовУП) Тогда
			
			ТекстОписанияУП = ТекстОписанияУП 
				+ Символы.ПС 
				+ НСтр("ru = 'Документы автоматически регистрируются к отправке начиная с %ДатаНачала%;'");
				
			ТекстОписанияУП = СтрЗаменить( ТекстОписанияУП,
										   "%ДатаНачала%", Формат(ДатаНачалаВыгрузкиДокументовУП, "ДЛФ=D"));
		Иначе
			
			ТекстОписанияУП = ТекстОписанияУП 
				+ Символы.ПС 
				+ НСтр("ru = 'Все документы автоматически регистрируются к отправке;'");
				
		КонецЕсли;
		
	ИначеЕсли ПравилаОтправкиДокументовУП = "ИнтерактивнаяСинхронизация" Тогда
		
		ТекстОписанияУП = ТекстОписанияУП 
			+ Символы.ПС 
			+ НСтр("ru = 'Пользователь самостоятельно отбирает и регистрирует необходимые ему документы к отправке;'");
		
	ИначеЕсли ПравилаОтправкиДокументовУП = "НеСинхронизировать"
		И ПравилаОтправкиСправочниковУП <> "НеСинхронизировать" Тогда
		
		ТекстОписанияУП = ТекстОписанияУП 
			+ Символы.ПС 
			+ НСтр("ru = 'Документы из этой информационной базы отправляться не будут;'");
		
	КонецЕсли;
	
	Если ИспользоватьОтборПоОрганизациямУП
		И ПравилаОтправкиСправочниковУП <> "НеСинхронизировать" Тогда
		
		КоллекцияЗначений = ОрганизацииУП.Выгрузить().ВыгрузитьКолонку("Представление");
		ПредставлениеКоллекции = СокращенноеПредставлениеКоллекцииЗначений(КоллекцияЗначений);
		ТекстОписанияУП = ТекстОписанияУП 
			+ Символы.ПС 
			+ НСтр("ru = 'Все данные будут
				| отправляться с отбором по организациям: %ПредставлениеКоллекции%;'");
		ТекстОписанияУП = СтрЗаменить(ТекстОписанияУП, "%ПредставлениеКоллекции%", ПредставлениеКоллекции);
		
	Иначе
		
		Если ПравилаОтправкиСправочниковУП <> "НеСинхронизировать" Тогда
			
			Если ПравилаОтбораОрганизаций = "УпрОрганизация" Тогда
				ТекстОписанияУП = ТекстОписанияУП 
					+ Символы.ПС 
					+ НСтр("ru = 'Данные будут отправляться по всем организациям, включая управленческую;'");
			Иначе
				ТекстОписанияУП = ТекстОписанияУП 
					+ Символы.ПС 
					+ НСтр("ru = 'Данные будут отправляться по всем организациям, кроме ""Управленческой организации"";'");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекстОписанияУП;
	
КонецФункции

&НаСервере
Функция СформироватьОписаниеПравилОтправкиБП()
	
	ТекстОписанияБП = НСтр("ru = 'Правила отправки данных из этой информационной базы:'") + Символы.ПС;
	
	Если ПравилаОтправкиСправочниковБП = "АвтоматическаяСинхронизация" Тогда
		
		ТекстОписанияБП = ТекстОписанияБП + 
			НСтр("ru = 'Вся нормативно-справочная информация регистрируется к отправке автоматически;'");
			
	ИначеЕсли ПравилаОтправкиСправочниковБП = "СинхронизироватьПоНеобходимости" Тогда
		
		ТекстОписанияБП = ТекстОписанияБП + 
			НСтр("ru = 'К отправке регистрируется только используемая в документах нормативно-справочная информация;'");
			
	ИначеЕсли ПравилаОтправкиСправочниковБП = "НеСинхронизировать" Тогда
		
		ТекстОписанияБП = ТекстОписанияБП + 
		НСтр("ru = 'Данные из информационной базы ""Бухгалтерия предприятия"" отправляться не будут.'");
		
	КонецЕсли;
	
	Если ПравилаОтправкиДокументовБП = "АвтоматическаяСинхронизация" Тогда
		
		Если ЗначениеЗаполнено(ДатаНачалаВыгрузкиДокументовБП) Тогда
			
			ТекстОписанияБП = ТекстОписанияБП 
				+ Символы.ПС 
				+ НСтр("ru = 'Документы автоматически регистрируются к отправке начиная с %ДатаНачала%;'");
				
			ТекстОписанияБП = СтрЗаменить( ТекстОписанияБП,
										   "%ДатаНачала%", Формат(ДатаНачалаВыгрузкиДокументовБП, "ДЛФ=D"));
										   
		Иначе
			
			ТекстОписанияБП = ТекстОписанияБП 
				+ Символы.ПС 
				+ НСтр("ru = 'Все документы автоматически регистрируются к отправке;'");
				
		КонецЕсли;
		
	ИначеЕсли ПравилаОтправкиДокументовБП = "ИнтерактивнаяСинхронизация" Тогда
		
		ТекстОписанияБП = ТекстОписанияБП 
			+ Символы.ПС 
			+ НСтр("ru = 'Пользователь самостоятельно отбирает и регистрирует необходимые ему документы к отправке;'");
		
	ИначеЕсли ПравилаОтправкиДокументовБП = "НеСинхронизировать"
		И ПравилаОтправкиСправочниковБП <> "НеСинхронизировать" Тогда
		
		ТекстОписанияБП = ТекстОписанияБП 
			+ Символы.ПС 
			+ НСтр("ru = 'Документы из информационной базы ""Бухгалтерия предприятия"" отправляться не будут;'");
		
	КонецЕсли;
	
	Если ПравилаОтправкиСправочниковБП <> "НеСинхронизировать" Тогда
		
		Если ИспользоватьОтборПоОрганизациямБП Тогда
			
			КоллекцияЗначений = ОрганизацииБП.Выгрузить().ВыгрузитьКолонку("Представление");
			ПредставлениеКоллекции = СокращенноеПредставлениеКоллекцииЗначений(КоллекцияЗначений);
			ТекстОписанияБП = ТекстОписанияБП 
				+ Символы.ПС 
				+ НСтр("ru = 'Все данные будут
					| отправляться с отбором по организациям: %ПредставлениеКоллекции%.'");
			ТекстОписанияБП = СтрЗаменить(ТекстОписанияБП, "%ПредставлениеКоллекции%", ПредставлениеКоллекции);
		
		Иначе
		
			ТекстОписанияБП = ТекстОписанияБП 
				+ Символы.ПС 
				+ НСтр("ru = 'Данные будут отправляться по всем организациям.'");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекстОписанияБП;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьНаСервере()
	
	Элементы.ПравилаОтправкиБП.Видимость = ИдентификаторНастройки <> "ОбменКасса";
	Элементы.ПравилаОтправкиУП.Видимость = ИдентификаторНастройки <> "ОбменКасса";
	Элементы.ГруппаОбменСКассой.Видимость = ИдентификаторНастройки = "ОбменКасса";
	
	КоличествоВидимыхСтраниц = 0;
	Для Каждого Страница Из Элементы.СтраницыПравилОтправкиИнформационныхБаз.ПодчиненныеЭлементы Цикл
		Если Страница.Видимость Тогда
			КоличествоВидимыхСтраниц = КоличествоВидимыхСтраниц + 1;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.СтраницыПравилОтправкиИнформационныхБаз.ОтображениеСтраниц = 
		?(КоличествоВидимыхСтраниц > 1, ОтображениеСтраницФормы.ЗакладкиСверху, ОтображениеСтраницФормы.Нет);
	
	Если ИдентификаторНастройки <> "ОбменКасса" Тогда
		
		//Правила отправки информационной базы "Управление предприятием"
		
		Элементы.ДатаНачалаВыгрузкиДокументовУП.Доступность = ПравилаОтправкиДокументовУП = "АвтоматическаяСинхронизация";
		Элементы.ПереключательДокументыНеОтправлятьУП.Доступность = Не ПравилаОтправкиСправочниковУП = "СинхронизироватьПоНеобходимости";
		
		Элементы.ГруппаДокументыУП.Доступность = Не ПравилаОтправкиСправочниковУП = "НеСинхронизировать";
		
		//Видимость отбора по организациям
		
		ВидимостьГруппыУП = (ПравилаОтправкиДокументовУП <> "НеСинхронизировать"
			Или ПравилаОтправкиСправочниковУП <> "НеСинхронизировать");
		
		Элементы.ГруппаНастройкаДополнительныхОтборовУП.Видимость = ВидимостьГруппыУП;
		
		Если ВидимостьГруппыУП Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
					Элементы,
					"ОткрытьСписокВыбранныхОрганизацийУП",
					"Видимость",
					ИспользоватьОтборПоОрганизациямУП ИЛИ ПравилаОтбораОрганизаций = "Отбор");
			
			//Видимость управленческой организации и вариантаотбора
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"ГруппаВыборУправленческойОрганизации",
				"Видимость",
				Истина);
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"ФлагИспользоватьОтборПоОрганизациямУП",
				"Видимость",
				Ложь);
			//
			ИспользоватьУправленческуюОрганизацию = Ложь;
			Если ФункциональныеОпцииБазыКорреспондента <> Неопределено
				И ФункциональныеОпцииБазыКорреспондента.Свойство("ИспользоватьУправленческуюОрганизацию", ИспользоватьУправленческуюОрганизацию)
				И ИспользоватьУправленческуюОрганизацию = Ложь Тогда
				
				//Элементы.ПереключательОтбораСправочниковБезОтбораБезУпр.СписокВыбора[0].Представление = "По всем организациям";
				Элементы.ПереключательОтбораСправочниковБезОтбораСУпр.Доступность = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		ВидимостьГруппыБП = (ПравилаОтправкиДокументовУП <> "НеСинхронизировать"
			Или ПравилаОтправкиСправочниковУП <> "НеСинхронизировать");
		
		Элементы.ГруппаПрочееУП.Видимость = ВидимостьГруппыБП;
		
		#Область ГруппаПравилаСозданияДоговоровКонтрагентов
		Элементы.ГруппаПравилаСозданияДоговоровКонтрагентов.Видимость = (ПравилаОтправкиДокументовУП <> "НеСинхронизировать");
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ПолеПравилаСозданияДоговоровКонтрагентов",
			"Доступность",
			Элементы.ПолеПравилаСозданияДоговоровКонтрагентов.СписокВыбора.Количество() > 1);
		#КонецОбласти
		Элементы.ВыгружатьАналитикуПоСкладамУП.Видимость = ПравилаОтправкиДокументовУП <> "НеСинхронизировать";
		
		//Правила отправки информационной базы "Бухгалтерия предприятия"
		
		Элементы.ДатаНачалаВыгрузкиДокументовБП.Доступность = ПравилаОтправкиДокументовБП = "АвтоматическаяСинхронизация";
			
		Элементы.ГруппаДокументыБП.Доступность = Не ПравилаОтправкиСправочниковБП = "НеСинхронизировать";
		
		//Видимость отбора по организациям
		Элементы.ГруппаПрочееБП.Видимость = ПравилаОтправкиСправочниковБП <> "НеСинхронизировать";
		
		Элементы.ОткрытьСписокВыбранныхОрганизацийБП.Видимость = ИспользоватьОтборПоОрганизациямБП;
		Элементы.ПереключательДокументыНеОтправлятьБП.Доступность = Не ПравилаОтправкиСправочниковБП = "СинхронизироватьПоНеобходимости";
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьМассивВыбранныхЗначений(ПараметрыФормы)
	
	ТабличнаяЧасть           = ЭтаФорма[ПараметрыФормы.ИмяЭлементаФормыДляЗаполнения];
	
	ТаблицаВыбранныхЗначений = ТабличнаяЧасть.Выгрузить(,ПараметрыФормы.ИмяРеквизитаЭлементаФормыДляЗаполнения);
	МассивВыбранныхЗначений  = ТаблицаВыбранныхЗначений.ВыгрузитьКолонку(ПараметрыФормы.ИмяРеквизитаЭлементаФормыДляЗаполнения);
	
	Возврат МассивВыбранныхЗначений;
	
КонецФункции

&НаСервере
Процедура ОбновитьДанныеОбъекта(СтруктураПараметров)
	
	ЭтаФорма[СтруктураПараметров.ИмяТаблицыДляЗаполнения].Очистить();
	
	СписокВыбранныхЗначений = ПолучитьИзВременногоХранилища(СтруктураПараметров.АдресТаблицыВоВременномХранилище);
	
	Если СписокВыбранныхЗначений.Количество() > 0 Тогда
		СписокВыбранныхЗначений.Колонки.Идентификатор.Имя = "УникальныйИдентификаторСсылки";
		СписокВыбранныхЗначений.Колонки.Добавить("Использовать");
		СписокВыбранныхЗначений.ЗаполнитьЗначения( Истина, "Использовать");
		ЭтаФорма[СтруктураПараметров.ИмяТаблицыДляЗаполнения].Загрузить(СписокВыбранныхЗначений);
	КонецЕсли;
	
	ОбновитьНаименованиеКомандФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура УстрановитьУсловияОрганиченияСинхронизации()
	
	Если ПравилаОтбораОрганизаций = "Отбор" Тогда
		
		ИспользоватьОтборПоОрганизациямУП = Истина;
		ВыгружатьУправленческуюОрганизацию = Ложь;
		
	ИначеЕсли ПравилаОтбораОрганизаций = "УпрОрганизация" Тогда
		
		ИспользоватьОтборПоОрганизациямУП = Ложь;
		ВыгружатьУправленческуюОрганизацию = Истина;
		
	ИначеЕсли ПравилаОтбораОрганизаций = "БезОтбора" Тогда
		
		ИспользоватьОтборПоОрганизациямУП = Ложь;
		ВыгружатьУправленческуюОрганизацию = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает сокращенное строковое представление коллекции значений
// 
// Параметры:
//  Коллекция 						- массив или список значений.
//  МаксимальноеКоличествоЭлементов - число, максимальное количество элементов включаемое в представление.
//
// Возвращаемое значение:
//  Строка.
//
&НаСервере
Функция СокращенноеПредставлениеКоллекцииЗначений(Коллекция, МаксимальноеКоличествоЭлементов = 2)
	
	СтрокаПредставления = "";
	
	КоличествоЗначений			 = Коллекция.Количество();
	КоличествоВыводимыхЭлементов = Мин(КоличествоЗначений, МаксимальноеКоличествоЭлементов);
	
	Если КоличествоВыводимыхЭлементов = 0 Тогда
		
		Возврат "";
		
	Иначе
		
		Для НомерЗначения = 1 По КоличествоВыводимыхЭлементов Цикл
			
			СтрокаПредставления = СтрокаПредставления + Коллекция.Получить(НомерЗначения - 1) + ", ";	
			
		КонецЦикла;
		
		СтрокаПредставления = Лев(СтрокаПредставления, СтрДлина(СтрокаПредставления) - 2);
		Если КоличествоЗначений > КоличествоВыводимыхЭлементов Тогда
			СтрокаПредставления = СтрокаПредставления + ", ... ";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокаПредставления;
	
КонецФункции

&НаСервере
Функция СтруктураСоответсвтияНастройкиОтборовКорреспондентаРеквизитамФормы()
	
	СтруктураНастроек = Новый Структура;
	
	Если ИдентификаторНастройки = "ОбменКасса" Тогда
		
		СтруктураНастроек.Вставить("ДатаНачалаВыгрузкиДокументов", "ДатаНачалаВыгрузкиДокументовКасса");
		СтруктураНастроек.Вставить("ПравилаОтправкиСправочников",  "ПравилаОтправкиСправочниковКасса");
		СтруктураНастроек.Вставить("РежимВыгрузкиСправочников",    "РежимВыгрузкиСправочниковКасса");
		
	Иначе
		СтруктураНастроек.Вставить("ИспользоватьОтборПоОрганизациям",      "ИспользоватьОтборПоОрганизациямУП");
		СтруктураНастроек.Вставить("ВыгружатьУправленческуюОрганизацию",   "ВыгружатьУправленческуюОрганизацию");
		СтруктураНастроек.Вставить("ДатаНачалаВыгрузкиДокументов",         "ДатаНачалаВыгрузкиДокументовУП");
		СтруктураНастроек.Вставить("ПравилаОтправкиДокументов",            "ПравилаОтправкиДокументовУП");
		СтруктураНастроек.Вставить("ПравилаОтправкиСправочников",          "ПравилаОтправкиСправочниковУП");
		СтруктураНастроек.Вставить("РежимВыгрузкиСправочников",            "РежимВыгрузкиСправочниковУП");
		СтруктураНастроек.Вставить("РежимВыгрузкиДокументов",              "РежимВыгрузкиДокументовУП");
		СтруктураНастроек.Вставить("УправленческаяОрганизация",            "УправленческаяОрганизация");
		СтруктураНастроек.Вставить("Организации",                          "ОрганизацииУП");
		СтруктураНастроек.Вставить("ВыгружатьАналитикуПоСкладам",          "ВыгружатьАналитикуПоСкладамУП");
		СтруктураНастроек.Вставить("ПравилаСозданияДоговоровКонтрагентов", "ПравилаСозданияДоговоровКонтрагентов");
	КонецЕсли;
	
	Возврат СтруктураНастроек;
	
КонецФункции

&НаСервере
Функция СтруктураСоответсвтияНастройкиОтборовРеквизитамФормы()
	
	СтруктураНастроек = Новый Структура;
	
	СтруктураНастроек.Вставить("ИспользоватьОтборПоОрганизациям", "ИспользоватьОтборПоОрганизациямБП");
	СтруктураНастроек.Вставить("ИспользоватьОтборПоСкладам",      "ИспользоватьОтборПоСкладамБП");
	СтруктураНастроек.Вставить("ДатаНачалаВыгрузкиДокументов",    "ДатаНачалаВыгрузкиДокументовБП");
	СтруктураНастроек.Вставить("ПравилаОтправкиДокументов",       "ПравилаОтправкиДокументовБП");
	СтруктураНастроек.Вставить("ПравилаОтправкиЦен",              "ПравилаОтправкиЦенБП");
	СтруктураНастроек.Вставить("ПравилаОтправкиСправочников",     "ПравилаОтправкиСправочниковБП");
	СтруктураНастроек.Вставить("РежимВыгрузкиСправочников",       "РежимВыгрузкиСправочниковБП");
	СтруктураНастроек.Вставить("РежимВыгрузкиДокументов",         "РежимВыгрузкиДокументовБП");
	СтруктураНастроек.Вставить("РежимВыгрузкиПриНеобходимости",   "РежимВыгрузкиПриНеобходимости");
	СтруктураНастроек.Вставить("Организации",                     "ОрганизацииБП");
	СтруктураНастроек.Вставить("ВыгружатьАналитикуПоСкладам",     "ВыгружатьАналитикуПоСкладамБП");
	СтруктураНастроек.Вставить("Склады",                          "Склады");
	
	Возврат СтруктураНастроек;
	
КонецФункции

&НаСервере
Функция ЗаписатьИЗакрытьНаСервере()
	
	Если Не ИспользоватьОтборПоОрганизациямУП И ОрганизацииУП.Количество() <> 0 Тогда
		ОрганизацииУП.Очистить();
	ИначеЕсли ОрганизацииУП.Количество() = 0 И ИспользоватьОтборПоОрганизациямУП Тогда
		ИспользоватьОтборПоОрганизациямУП = Ложь;
	КонецЕсли;
	
	Если Не ИспользоватьОтборПоОрганизациямБП И ОрганизацииБП.Количество() <> 0 Тогда
		ОрганизацииБП.Очистить();
	ИначеЕсли ОрганизацииБП.Количество() = 0 И ИспользоватьОтборПоОрганизациямБП Тогда
		ИспользоватьОтборПоОрганизациямБП = Ложь;
	КонецЕсли;
	
	Если Не ИспользоватьОтборПоСкладамБП И Склады.Количество() > 0 Тогда
		Склады.Очистить();
	КонецЕсли;
	
	Если ПравилаОтправкиДокументовУП <> "АвтоматическаяСинхронизация" Тогда
		ДатаНачалаВыгрузкиДокументовУП = Дата(1,1,1,0,0,0);
	КонецЕсли;
	
	Если ПравилаОтправкиДокументовБП <> "АвтоматическаяСинхронизация" Тогда
		ДатаНачалаВыгрузкиДокументовБП = Дата(1,1,1,0,0,0);
	КонецЕсли;
	
	ПолучитьОписаниеКонтекста();
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗаполнитьФункциональныеОпцииБазыКорреспондента(Параметры, Отказ)
	
	СтруктураФункциональныхОпций = Неопределено;
	
	Если ТипЗнч(Параметры.ПараметрыПодключения) = Тип("Структура") Тогда
		СтрокаСообщенияОбОшибке = "";
		
		Если Параметры.ПараметрыПодключения.Свойство("ВерсияКорреспондента_2_1_1_7") И Параметры.ПараметрыПодключения.ВерсияКорреспондента_2_1_1_7 Тогда
			
			WSПрокси = ОбменДаннымиСервер.ПолучитьWSПрокси_2_1_1_7(Параметры.ПараметрыПодключения, СтрокаСообщенияОбОшибке);
			
		ИначеЕсли Параметры.ПараметрыПодключения.Свойство("ВерсияКорреспондента_2_0_1_6") И Параметры.ПараметрыПодключения.ВерсияКорреспондента_2_0_1_6 Тогда
			
			WSПрокси = ОбменДаннымиСервер.ПолучитьWSПрокси_2_0_1_6(Параметры.ПараметрыПодключения, СтрокаСообщенияОбОшибке);
			
		Иначе
			
			WSПрокси = ОбменДаннымиСервер.ПолучитьWSПрокси(Параметры.ПараметрыПодключения, СтрокаСообщенияОбОшибке);
			
		КонецЕсли;
		
		Если WSПрокси = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщенияОбОшибке,,,, Отказ);
			Возврат Неопределено;
		КонецЕсли;
		
		СтруктураФункциональныхОпций = Новый Структура();
		СтруктураФункциональныхОпций.Вставить("ИспользоватьЗаказыКлиентов",                          WSПрокси.GetFunctionalOption("ИспользоватьЗаказыКлиентов"));
		СтруктураФункциональныхОпций.Вставить("ИспользоватьЗаказыПоставщикам",                       WSПрокси.GetFunctionalOption("ИспользоватьЗаказыПоставщикам"));
		СтруктураФункциональныхОпций.Вставить("ИспользоватьПоступлениеПоНесколькимЗаказам",          WSПрокси.GetFunctionalOption("ИспользоватьПоступлениеПоНесколькимЗаказам"));
		СтруктураФункциональныхОпций.Вставить("ИспользоватьРеализациюПоНесколькимЗаказам",           WSПрокси.GetFunctionalOption("ИспользоватьРеализациюПоНесколькимЗаказам"));
		СтруктураФункциональныхОпций.Вставить("ИспользоватьАктыВыполненныхРаботПоНесколькимЗаказам", WSПрокси.GetFunctionalOption("ИспользоватьАктыВыполненныхРаботПоНесколькимЗаказам"));
		СтруктураФункциональныхОпций.Вставить("ИспользоватьСделкиСКлиентами",                        WSПрокси.GetFunctionalOption("ИспользоватьСделкиСКлиентами"));
		СтруктураФункциональныхОпций.Вставить("ИспользоватьСоглашенияСКлиентами",                    WSПрокси.GetFunctionalOption("ИспользоватьСоглашенияСКлиентами"));
		СтруктураФункциональныхОпций.Вставить("ИспользоватьУправленческуюОрганизацию",               WSПрокси.GetFunctionalOption("ИспользоватьУправленческуюОрганизацию"));
	КонецЕсли;
	
	Возврат СтруктураФункциональныхОпций;
	
КонецФункции

&НаСервере
Процедура СформироватьСписокВыбораПравилФормированияДоговора()
	
	// Сформируем список выбора для реквизита "ПравилаСозданияДоговоровКонтрагентов"
	СписокПравил = Новый СписокЗначений;
	СписокПравил.Добавить("БезРазделения", "Договоры контрагентов формируются без привязки к соглашениям или заказам");
	Если (ФункциональныеОпцииБазыКорреспондента.ИспользоватьЗаказыКлиентов
		Или ФункциональныеОпцииБазыКорреспондента.ИспользоватьЗаказыПоставщикам)
		И Не (ФункциональныеОпцииБазыКорреспондента.ИспользоватьПоступлениеПоНесколькимЗаказам
			И ФункциональныеОпцииБазыКорреспондента.ИспользоватьРеализациюПоНесколькимЗаказам
			И ФункциональныеОпцииБазыКорреспондента.ИспользоватьАктыВыполненныхРаботПоНесколькимЗаказам) Тогда
		
		СписокПравил.Добавить("ПоЗаказам", "Разным заказам соответствуют разные договоры контрагентов");
	КонецЕсли;
	
	Если ФункциональныеОпцииБазыКорреспондента.ИспользоватьСоглашенияСКлиентами Тогда
		СписокПравил.Добавить("ПоСоглашениям", "Разным соглашениям соответствуют разные договоры контрагентов");
	КонецЕсли;
	
	Если ФункциональныеОпцииБазыКорреспондента.ИспользоватьСделкиСКлиентами Тогда
		СписокПравил.Добавить("ПоСделкам",     "Разным сделкам соответствуют разные договоры контрагентов");
	КонецЕсли;
	
	Элементы.ПолеПравилаСозданияДоговоровКонтрагентов.СписокВыбора.Очистить();
	Для Каждого ЭлементПравил Из СписокПравил Цикл
		Элементы.ПолеПравилаСозданияДоговоровКонтрагентов.СписокВыбора.Добавить(ЭлементПравил.Значение, ЭлементПравил.Представление);
	КонецЦикла;
	
	Если СписокПравил.Количество() = 1 Тогда
		ПравилаСозданияДоговоровКонтрагентов = СписокПравил[0].Значение;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПравилаСозданияДоговоровКонтрагентов)
		И СписокПравил.НайтиПоЗначению(ПравилаСозданияДоговоровКонтрагентов) = Неопределено Тогда
		
		ПравилаСозданияДоговоровКонтрагентов = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УстановитьВыбранныйТипЦенРозничнойТорговли()
	
	Если Склады.Количество() > 0 Тогда
		ТипЦенДляИзмененияЦен = ТипЦенСклада(Склады[0].Представление);
	Иначе
		ТипЦенДляИзмененияЦен = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ТипСклада", Перечисления.ТипыСкладов.РозничныйМагазин));
	
	Если ЗначениеЗаполнено(ТипЦенДляИзмененияЦен) Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ТипЦенРозничнойТорговли", ТипЦенДляИзмененияЦен));
	КонецЕсли;
	
	Элементы.СкладыСклад.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецФункции

&НаСервере
Функция УстановитьДополнительныеЗначенияСклада(ИдентификаторСтроки)
	
	Строка = Склады.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если ЗначениеЗаполнено(Строка.Представление) Тогда
		Строка.Использовать = Истина;
		Строка.УникальныйИдентификаторСсылки = Строка(Строка.Представление.УникальныйИдентификатор());
	КонецЕсли;
	
	Если Склады.Индекс(Строка) = 0 Тогда
		УстановитьВыбранныйТипЦенРозничнойТорговли();
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТипЦенСклада(Склад)
	
	Если ЗначениеЗаполнено(Склад) Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "ТипЦенРозничнойТорговли");
	Иначе
		Возврат Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти



