#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Возвращает Истина, если указанный месяц по указанной организации 
// содержится в регистре исключенных месяцев.
//
// Параметры:
//	- Организация - СправочникСсылка.Организация или массив со ссылками на справочник Организации
//	- ПериодРегистрации - дата
//
// Возвращаемое значение:
//	Булево
//
Функция МесяцИсключенИзПерепроведения(Организация, ПериодРегистрации) Экспорт

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации", НачалоМесяца(ПериодРегистрации));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсключенныеИзПерепроведенияМесяцы.Организация
	|ИЗ
	|	РегистрСведений.ИсключенныеИзПерепроведенияМесяцы КАК ИсключенныеИзПерепроведенияМесяцы
	|ГДЕ
	|	ИсключенныеИзПерепроведенияМесяцы.Организация В (&Организация)
	|	И ИсключенныеИзПерепроведенияМесяцы.ПериодРегистрации = &ПериодРегистрации
	|";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();

КонецФункции

// Возвращает дату первого месяц, начиная с которого необходимо выполнять перепроведение.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - организация, для которой проверяются исключенные месяцы.
//	ДоДаты - Дата - Дата, до которого необходимо анализировать (включительно)
//
Функция ПервыйНеисключенныйМесяц(Организация, ДоДаты) Экспорт

	// Если месяц был пропущен, то находим ближайщий следующий за ним,
	// который не является исключенным.
	Результат = '0001-01-01';

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДоДаты", ДоДаты);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(ИсключенныеИзПерепроведенияМесяцы.ПериодРегистрации) КАК ПериодРегистрации
	|ИЗ
	|	РегистрСведений.ИсключенныеИзПерепроведенияМесяцы КАК ИсключенныеИзПерепроведенияМесяцы
	|ГДЕ
	|	ИсключенныеИзПерепроведенияМесяцы.Организация = &Организация
	|	И ИсключенныеИзПерепроведенияМесяцы.ПериодРегистрации <= &ДоДаты";

	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если Выборка.ПериодРегистрации <> NULL Тогда
			// Начинаем с месяца, следующего за исключенным из перепроводимых.
			Результат = КонецМесяца(Выборка.ПериодРегистрации) + 1;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Добавляет в регистр запись об исключении месяцев из перепроведения.
// 
// Параметры:
//	Организация - СправочникСсылка.Организации - организация, по которой добавляются записи.
//	ПериодРегистрации - Дата - первое числе месяца, для которого добавить записи в регистр,
//		
Процедура ДобавитьЗапись(Организация, ПериодРегистрации) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	МоментНарушения = РаботаСПоследовательностями.МоментНарушенияПоследовательности(
		Организация, , КонецМесяца(ПериодРегистрации));

	МенеджерЗаписиРегистра = РегистрыСведений.ИсключенныеИзПерепроведенияМесяцы.СоздатьМенеджерЗаписи();
	
	// Измерения
	МенеджерЗаписиРегистра.Организация 			= Организация;
	МенеджерЗаписиРегистра.ПериодРегистрации 	= НачалоМесяца(ПериодРегистрации);
	
	// Ресурсы - сохраним состояние последовательности, которое было на момент исключения из перепроведения.
	Если МоментНарушения <> Неопределено Тогда
		МенеджерЗаписиРегистра.ДатаПоследовательности 		= МоментНарушения.Дата;
		МенеджерЗаписиРегистра.ДокументПоследовательности 	= МоментНарушения.Ссылка;
	КонецЕсли;
	
	МенеджерЗаписиРегистра.Ответственный = Пользователи.ТекущийПользователь();
	МенеджерЗаписиРегистра.ДатаЗаписи	 = ТекущаяДатаСеанса();
	
	МенеджерЗаписиРегистра.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

Процедура УдалитьЗапись(Организация, ПериодРегистрации) Экспорт
			
	МенеджерЗаписиРегистра = РегистрыСведений.ИсключенныеИзПерепроведенияМесяцы.СоздатьМенеджерЗаписи();
	МенеджерЗаписиРегистра.Организация 			= Организация;
	МенеджерЗаписиРегистра.ПериодРегистрации    = НачалоМесяца(ПериодРегистрации);
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписиРегистра.Удалить();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ


#КонецЕсли
