
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Перем КлючЗаписи;
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Не ПоддерживаетсяУчетПоЭлементамЗатрат() Тогда
		Элементы.ГруппаРасходы.Видимость = Ложь;
	КонецЕсли;
	
	Если Параметры.КонтекстныйВызов Тогда
		Элементы.Организация.ТолькоПросмотр      = Истина;
		Элементы.Организация.КнопкаВыбора        = Ложь;
	КонецЕсли;
	
	ЗначенияЗаполнения = Неопределено;
	Параметры.Свойство("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	АктивныйЭлемент = Неопределено;
	Параметры.Свойство("АктивныйЭлемент", АктивныйЭлемент);
	
	Если ТипЗнч(АктивныйЭлемент) = Тип("Строка") Тогда
		Если АктивныйЭлемент = "ВариантБухгалтерскойОтчетности" Тогда
			ТекущийЭлемент = Элементы.ВариантБухгалтерскойОтчетности;
		КонецЕсли;
	КонецЕсли;
	
	ЭтоНоваяЗапись = Ложь;
	Копирование    = Ложь;
	
	ЭтоФормаЗаписи = Параметры.Свойство("Ключ", КлючЗаписи);
	Если Параметры.Свойство("РежимНастройки") Тогда
		ЭтоФормаЗаписи = Ложь;
	Иначе
		ЭтоФормаЗаписи = Истина;
	КонецЕсли;
	
	Если КлючЗаписи = Неопределено И ЭтоФормаЗаписи Тогда
		ЭтоНоваяЗапись = Истина;
		Если Параметры.Свойство("ЗначениеКопирования")
			И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			Копирование = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЭтоФормаЗаписи Тогда
		
		ДоступныеОрганизации = ОбщегоНазначенияБПВызовСервераПовтИсп.ОрганизацииДанныеКоторыхДоступныПользователю();
		УстановитьПараметрыВыбораОрганизации(ЭтотОбъект, ДоступныеОрганизации);
		
	КонецЕсли;
	
	Если ЭтоФормаЗаписи
		И НЕ ЭтоНоваяЗапись Тогда
		Организация = КлючЗаписи.Организация;
		ТекущаяДата = КлючЗаписи.Период;
	Иначе
		
		Если ЗначениеЗаполнено(Параметры.Организация) Тогда
			Организация = Параметры.Организация;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Организация) И ЭтоНоваяЗапись И ЗначенияЗаполнения <> Неопределено Тогда
			ЗначенияЗаполнения.Свойство("Организация", Организация);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Организация) И (ЭтоНоваяЗапись ИЛИ НЕ ЭтоФормаЗаписи) Тогда
			Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
		КонецЕсли;
		
		ТекущаяДата = НачалоДня(ТекущаяДатаСеанса());
		Если  ЗначенияЗаполнения <> Неопределено И ЗначенияЗаполнения.Свойство("Период") Тогда
			ТекущаяДата = ЗначенияЗаполнения.Период;
		КонецЕсли;
			
		Если Копирование Тогда
			ЗаполнитьЗначенияСвойств(ЭтаФорма.УчетнаяПолитика, Параметры.ЗначениеКопирования, "Организация, Период");
			Организация = ЭтаФорма.УчетнаяПолитика.Организация;
			ТекущаяДата = ЭтаФорма.УчетнаяПолитика.Период;
		ИначеЕсли ЭтоНоваяЗапись Тогда
			ЭтаФорма.УчетнаяПолитика.Период = ТекущаяДата;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ГоловнаяОрганизация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ГоловнаяОрганизация");
		ЭтоЮрЛицо = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация);
	КонецЕсли;
	
	ПравоРедактированияНастроек = 
		ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НалогиОтчеты)
		И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ВариантыПримененияТребованийЗаконодательства)
		И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.УчетнаяПолитика);
		
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Если НЕ ЭтоФормаЗаписи Тогда
			УстановитьДоступностьВидимостьНастроек(Ложь);
		Иначе
			ПодготовитьФормуНаСервере(Истина);
		КонецЕсли;
	Иначе
		Если НЕ ЭтоФормаЗаписи Тогда
			Если ДоступныеОрганизации.Найти(Организация) = Неопределено Тогда
				ОрганизацияНедоступна = Истина;
				УстановитьДоступностьВидимостьНастроек(Ложь);
				Возврат;
			Иначе
				ПодготовитьФормуНастройки();
			КонецЕсли;
		КонецЕсли;
		Если Копирование Тогда
			СкопироватьУчетнуюПолитику(Параметры.ЗначениеКопирования);
			ПрочитатьНастройкиНалоговогоУчета();
		ИначеЕсли ЭтоНоваяЗапись Тогда
			ПодготовитьФормуНаСервере(Истина);
			ПрочитатьНастройкиНалоговогоУчета();
		Иначе
			ПрочитатьУчетнуюПолитику();
		КонецЕсли;
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	Элементы.ГруппаСсылка.Видимость = НЕ ЭтоФормаЗаписи;
	
	Если НЕ ЭтоФормаЗаписи Тогда
		// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
		ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
		ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
			ЭтаФорма,
			"БП.РегистрСведений.УчетнаяПолитика",
			"ФормаЗаписи",
			НСтр("ru='Новости: Учетная политика'"),
			ИдентификаторыСобытийПриОткрытии
		);
		// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ПустаяСтрока(РезультатБлокировки) Тогда
		ПоказатьПредупреждение( , РезультатБлокировки);
		РезультатБлокировки = "";
	КонецЕсли;
	
	Если НЕ ЭтоФормаЗаписи Тогда
		// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
		ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
		// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность И ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ЭтоФормаЗаписи И ЭтоНоваяЗапись Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		
		Отказ = Истина;
		ВопросСохранитьИзменения("ВопросПередЗакрытиемЗавершение");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОтредактированаИстория" Тогда
		Если Параметр.ВедущийОбъект = Организация Тогда
			Если Параметр.ИмяРегистра = "НастройкиСистемыНалогообложения" Тогда
				ОбновитьНастройкиНалоговогоУчета();
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "Запись_Организации" Тогда
		Если НЕ Параметры.КонтекстныйВызов Тогда
			// При записи новой организации необходимо добавить ее в список доступных организаций.
			ОбработкаОповещенияЗаписьОрганизации(Параметр, Источник);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЭтоФормаЗаписи Тогда
		// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
		ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
		// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ ЗначениеЗаполнено(УчетнаяПолитика.ОсновнойСчетУчетаЗатрат) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Основной счет учета затрат'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "УчетнаяПолитика.ОсновнойСчетУчетаЗатрат", , Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПрименяетсяСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("НачалоПериода", ЭтаФорма.УчетнаяПолитика.Период);
	ПараметрыВыбора.Вставить("КонецПериода",  ЭтаФорма.УчетнаяПолитика.Период);
	ПараметрыВыбора.Вставить("ВидПериода",    ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПериодСЗавершениеВыбора", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериодаМесяц", ПараметрыВыбора, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаИзмененияНастроекНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("НачалоПериода", ТекущаяДата);
	ПараметрыВыбора.Вставить("КонецПериода",  ТекущаяДата);
	ПараметрыВыбора.Вставить("ВидПериода",    ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДатаИзмененияЗавершениеВыбора", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериодаМесяц", ПараметрыВыбора, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаИзмененияНастроекПриИзменении(Элемент)
	
	ДатаИзменения = ТекущаяДата;
	ОбновитьНастройкиНалоговогоУчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименяетсяСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	НачалоПериода = НачалоМесяца(ЭтаФорма.УчетнаяПолитика.Период);
	КонецПериода  = КонецМесяца(ЭтаФорма.УчетнаяПолитика.Период);
	
	ВыборПериодаКлиент.ПериодОбработкаВыбора(
		Элемент,
		ВыбранноеЗначение,
		СтандартнаяОбработка,
		ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц"),
		ПрименяетсяС,
		НачалоПериода,
		КонецПериода);
	
	Модифицированность = Истина;
	
	ЭтаФорма.УчетнаяПолитика.Период = НачалоПериода;
	ТекущаяДата                     = ЭтаФорма.УчетнаяПолитика.Период;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаИзмененияНастроекОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	НачалоПериода = НачалоМесяца(ТекущаяДата);
	КонецПериода  = КонецМесяца(ТекущаяДата);
	
	ВыборПериодаКлиент.ПериодОбработкаВыбора(
		Элемент,
		ВыбранноеЗначение,
		СтандартнаяОбработка,
		ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц"),
		ДатаИзмененияНастроек,
		НачалоПериода,
		КонецПериода);
	
	Модифицированность = Истина;
	
	ТекущаяДата   = НачалоПериода;
	ДатаИзменения = ТекущаяДата;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименяетсяСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	НачалоПериода = НачалоМесяца(ЭтаФорма.УчетнаяПолитика.Период);
	КонецПериода  = КонецМесяца(ЭтаФорма.УчетнаяПолитика.Период);
	
	ВыборПериодаКлиент.ПериодАвтоПодбор(
		Элемент,
		Текст,
		ДанныеВыбора,
		Ожидание,
		СтандартнаяОбработка,
		ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц"),
		ПрименяетсяС,
		НачалоПериода,
		КонецПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаИзмененияНастроекАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	НачалоПериода = НачалоМесяца(ТекущаяДата);
	КонецПериода  = КонецМесяца(ТекущаяДата);
	
	ВыборПериодаКлиент.ПериодАвтоПодбор(
		Элемент,
		Текст,
		ДанныеВыбора,
		Ожидание,
		СтандартнаяОбработка,
		ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц"),
		ДатаИзмененияНастроек,
		НачалоПериода,
		КонецПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименяетсяСОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаИзмененияНастроекОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЭтоФормаЗаписи Тогда
		УчетнаяПолитика.Организация = Организация;
		Модифицированность  = Истина;
		ОрганизацияПриИзмененииНаСервере();
	Иначе
		Если Модифицированность Тогда
			ВопросСохранитьИзменения("ВопросПередСменойОрганизации");
		Иначе
			Элементы.СтраницыНастроек.ТекущаяСтраница = Элементы.СтраницаНеНайдено;
			ПрочитатьНастройкиОрганизации();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь; // Незачем очищать
	
КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаСебестоимостиПроизводстваПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
	ОтобразитьПериоды();
	
КонецПроцедуры

&НаКлиенте
Процедура ОказаниеУслугПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
	ОтобразитьПериоды();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитыватьСебестоимостьПолуфабрикатовПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
	ОтобразитьПериоды();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитыватьСебестоимостьУслугСобственнымПодразделениямПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
	ОтобразитьПериоды();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыпускПродукцииПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
	ОтобразитьПериоды();
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойСчетУчетаЗатратПриИзменении(Элемент)
	
	Элементы.ОсновнойСчетУчетаЗатрат.РасширеннаяПодсказка.Заголовок = ОсновнойСчетУчетаЗатратПриИзмененииНаСервере(УчетнаяПолитика.ОсновнойСчетУчетаЗатрат);
	
	ОтобразитьПериоды();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименяетсяСПриИзменении(Элемент)
	
	ДатаОкончанияДействия = НайтиДатуОкончанияДействия(ЭтаФорма.УчетнаяПолитика.Период, ЭтаФорма.УчетнаяПолитика.Организация);
	ТекущаяДата = ЭтаФорма.УчетнаяПолитика.Период;
	ОбновитьНастройкиНалоговогоУчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокСписанияРасходовНаСебестоимостьУслугОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОценкиМПЗПриИзменении(Элемент)
	
	ОтобразитьПериоды();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОценкиМПЗ1ПриИзменении(Элемент)
	
	ОтобразитьПериоды();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОценкиТоваровВРозницеПриИзменении(Элемент)
	
	ОтобразитьПериоды();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОценкиТоваровВРознице1ПриИзменении(Элемент)
	
	ОтобразитьПериоды();
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокСписанияРасходовНаСебестоимостьУслугПриИзменении(Элемент)
	
	ОтобразитьПериоды();
	
КонецПроцедуры

&НаКлиенте
Процедура ДиректКостингПриИзменении(Элемент)
	
	ПриИзмененииРеквизитаДиректКостинг();
	ОтобразитьПериоды();
	
КонецПроцедуры

&НаКлиенте
Процедура ДиректКостинг1ПриИзменении(Элемент)
	
	ПриИзмененииРеквизитаДиректКостинг();
	ОтобразитьПериоды();
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьОтклоненияОтПлановойСебестоимостиПриИзменении(Элемент)
	
	Если УчитыватьОтклоненияОтПлановойСебестоимости Тогда
		УчетнаяПолитика.СпособУчетаВыпускаГотовойПродукции = ПредопределенноеЗначение("Перечисление.СпособыУчетаВыпускаГотовойПродукции.СИспользованиемСчета40");
	Иначе
		УчетнаяПолитика.СпособУчетаВыпускаГотовойПродукции = ПредопределенноеЗначение("Перечисление.СпособыУчетаВыпускаГотовойПродукции.БезИспользованияСчета40");
	КонецЕсли;
	
	ОтобразитьПериоды();
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьРасходыПоЭлементамЗатратПриИзменении(Элемент)
	
	ОтобразитьПериоды();
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьРасходыПоСтатьямЗатратПриИзменении(Элемент)
	
	ОтобразитьПериоды();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПереводыВПутиПриПеремещенияДенежныхСредствПриИзменении(Элемент)
	
	ОтобразитьПериоды();
	
КонецПроцедуры

&НаКлиенте
Процедура ФормироватьРезервыПоСомнительнымДолгамПриИзменении(Элемент)
	
	ОтобразитьПериоды();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоддержкаПБУ18ПриИзменении(Элемент)
	
	ОтобразитьПериоды();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантБухгалтерскойОтчетностиПриИзменении(Элемент)
	
	ОтобразитьПериоды();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура МетодыРаспределенияКосвенныхРасходов(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Отбор", Новый Структура("Организация", ГоловнаяОрганизация));
	ОткрытьФорму("РегистрСведений.МетодыРаспределенияКосвенныхРасходовОрганизаций.ФормаСписка", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВстречныйВыпускПродукцииУслуг(Команда)
	
	Если УчетнаяПолитика.СпособРасчетаСебестоимостиПроизводства = ПредопределенноеЗначение("Перечисление.СпособыРасчетаСебестоимостиПродукции.ПоПеределам") Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Новый Структура("Организация", Организация));
		ОткрытьФорму("РегистрСведений.ВстречныйВыпускПродукцииУслуг.ФормаСписка", ПараметрыФормы);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПорядокПодразделенийДляЗакрытияСчетовЗатрат(Команда)

	Если УчетнаяПолитика.СпособРасчетаСебестоимостиПроизводства = ПредопределенноеЗначение("Перечисление.СпособыРасчетаСебестоимостиПродукции.ПоПодразделениям") Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Новый Структура("Организация", Организация));
		ОткрытьФорму("Документ.УстановкаПорядкаЗакрытияПодразделений.ФормаСписка", ПараметрыФормы);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	
	ЗаписатьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Отказ = Ложь;
	ЗаписатьИзменения(Истина, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	ОповеститьПослеЗаписи();
	ПослеЗаписи_НаКлиенте();
	ЭтаФорма.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура История(Команда)
	
	Отбор = Новый Структура("Организация", Организация);
	ОткрытьФорму("РегистрСведений.УчетнаяПолитика.Форма.ФормаСписка", Новый Структура("Отбор", Отбор));
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаНалоговИОтчетов(Команда)
	
	Если Модифицированность Тогда
		ВопросСохранитьИзменения("ВопросПриПереходеЗавершение");
	Иначе
		ПерейтиВНастройкуНалоговИОтчетов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтаФорма,
		Команда
	);

КонецПроцедуры

#Область Печать

&НаКлиенте
Процедура ПечатьПриказ(Команда)
	
	ВыполнитьКомандуПечати("Приказ");
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьУчетнаяПолитикаБУ(Команда)
	
	ВыполнитьКомандуПечати("УчетнаяПолитикаБУ");
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьПланСчетов(Команда)
	
	ВыполнитьКомандуПечати("ПланСчетов");
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьПервичныеДокументы(Команда)
	
	ВыполнитьКомандуПечати("ПервичныеДокументы");
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьРегистрыБУ(Команда)
	
	ВыполнитьКомандуПечати("РегистрыБУ");
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьУчетнаяПолитикаНУ(Команда)
	
	ВыполнитьКомандуПечати("УчетнаяПолитикаНУ");
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьРегистрыНУ(Команда)
	
	ВыполнитьКомандуПечати("РегистрыНУ");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Чтение

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Если НЕ ЭтоФормаЗаписи Тогда
		
		Если ЗначениеЗаполнено(Организация) Тогда
			Если Элементы.ОбщиеСтраницыНастроек.ТекущаяСтраница <> Элементы.ОбщаяСтраницаНастройки Тогда
				УстановитьДоступностьВидимостьНастроек(Истина);
			КонецЕсли;
		КонецЕсли;
		
		РазблокироватьДанныеДляРедактирования(, УникальныйИдентификатор); // Все разблокируем
		Если ПустаяСтрока(РезультатБлокировки) Тогда
			ПодготовитьФормуНастройки();
		КонецЕсли;
		
		ПрочитатьУчетнуюПолитику();
		
	КонецЕсли;
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьУчетнуюПолитику(ПериодЗначений = Неопределено)
	
	Если ПериодЗначений = Неопределено Тогда
		ПериодЗначений = ТекущаяДата;
	КонецЕсли;
	
	КлючЗаписи     = НастройкиУчета.КлючЗаписиДействующейУчетнойПолитики("УчетнаяПолитика", Организация, ПериодЗначений);
	Если КлючЗаписи = Неопределено Тогда
		РегистрыСведений.УчетнаяПолитика.УстановкаНастроекПоУмолчанию(УчетнаяПолитика, Новый Структура());
		УчетнаяПолитика.Период      = НачалоГода(ТекущаяДата);
		УчетнаяПолитика.Организация = Организация;
		МенеджерЗаписи = РеквизитФормыВЗначение("УчетнаяПолитика");
		МенеджерЗаписи.Записать(Истина);
	Иначе
		МенеджерЗаписи = МенеджерЗаписиПериодическогоРегистра("УчетнаяПолитика", КлючЗаписи);
	КонецЕсли;
	ЭтаФорма.ЗначениеВРеквизитФормы(МенеджерЗаписи, "УчетнаяПолитика");
	
	ЗаполнитьСвязанныеРеквизиты();
	
	ПрочитатьНастройкиНалоговогоУчета();
	
КонецПроцедуры

&НаСервере
Функция МенеджерЗаписиПериодическогоРегистра(ИмяРегистра, КлючЗаписи, ИмяИзмерения = "Организация") Экспорт
	
	МенеджерЗаписи = РегистрыСведений[ИмяРегистра].СоздатьМенеджерЗаписи();
	МенеджерЗаписи[ИмяИзмерения] = КлючЗаписи[ИмяИзмерения];
	МенеджерЗаписи.Период        = КлючЗаписи.Период;
	МенеджерЗаписи.Прочитать();
	
	Возврат МенеджерЗаписи;

КонецФункции

&НаСервере
Процедура СкопироватьУчетнуюПолитику(Отбор)
	
	МенеджерЗаписи = РегистрыСведений.УчетнаяПолитика.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Организация = Отбор.Организация;
	МенеджерЗаписи.Период      = Отбор.Период;
	МенеджерЗаписи.Прочитать();
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма.УчетнаяПолитика, МенеджерЗаписи);
	ЗаполнитьСвязанныеРеквизиты();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСвязанныеРеквизиты()
	
	ДиректКостинг = ?(УчетнаяПолитика.ДиректКостинг, 1, 2);
	
	УчитыватьОтклоненияОтПлановойСебестоимости = УчетнаяПолитика.СпособУчетаВыпускаГотовойПродукции = Перечисления.СпособыУчетаВыпускаГотовойПродукции.СИспользованиемСчета40;
		
	ДатаИзменения = ?(ЗначениеЗаполнено(УчетнаяПолитика.Период), УчетнаяПолитика.Период, НачалоГода(ТекущаяДатаСеанса()));
	
	ДатаИзмененияНастроек = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
		НачалоМесяца(ДатаИзменения),
		КонецМесяца(ДатаИзменения),
		Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьНастройкиОрганизации()
	
	ОрганизацияПриИзмененииНаСервере();
	
	Если Не ПустаяСтрока(РезультатБлокировки) Тогда
		ПоказатьПредупреждение( , РезультатБлокировки);
		РезультатБлокировки = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНастройкиНалоговогоУчета()
	
	НастройкиНалоговогоУчета = НастройкиУчета.УчетнаяПолитикаНалоговыйУчет(УчетнаяПолитика.Период, УчетнаяПолитика.Организация);
	Если НастройкиНалоговогоУчета = Неопределено Тогда
		ПлательщикНДФЛ                   = Ложь;
		ПрименяетсяУСНДоходыМинусРасходы = Ложь;
		ПлательщикНалогаНаПрибыль        = ЭтоЮрЛицо;
	Иначе
		ПлательщикНДФЛ                   = НастройкиНалоговогоУчета[0].ПлательщикНДФЛ;
		ПрименяетсяУСНДоходыМинусРасходы = НастройкиНалоговогоУчета[0].ПрименяетсяУСНДоходыМинусРасходы;
		ПлательщикНалогаНаПрибыль        = НастройкиНалоговогоУчета[0].ПлательщикНалогаНаПрибыль;
	КонецЕсли;
	
	СинхронизироватьНастройкиНалоговогоУчета();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкиНалоговогоУчета()
	
	ПрочитатьНастройкиНалоговогоУчета();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СинхронизироватьНастройкиНалоговогоУчета()
	
	Если ПлательщикНДФЛ ИЛИ ПрименяетсяУСНДоходыМинусРасходы Тогда
		Если УчетнаяПолитика.СпособОценкиМПЗ <> Перечисления.СпособыОценки.ФИФО Тогда
			УчетнаяПолитика.СпособОценкиМПЗ = Перечисления.СпособыОценки.ФИФО;
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Запись

&НаКлиенте
Процедура ЗаписатьНаКлиенте()
	
	Отказ = Ложь;
	ЗаписатьИзменения(Ложь, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	ОповеститьПослеЗаписи();
	ПослеЗаписи_НаКлиенте();
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьИзменения(Закрытие = Ложь, Отказ = Ложь)
	
	Отказ = НЕ ПроверитьЗаполнение();
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	ПередЗаписью_НаСервере();
	
	Если ЭтоФормаЗаписи Тогда
		МенеджерЗаписи = РеквизитФормыВЗначение("УчетнаяПолитика");
	Иначе
		Если ДатаИзменения = УчетнаяПолитика.Период Тогда
			МенеджерЗаписи = РеквизитФормыВЗначение("УчетнаяПолитика");
		Иначе
			МенеджерЗаписи = РегистрыСведений.УчетнаяПолитика.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, УчетнаяПолитика,,"Период");
			МенеджерЗаписи.Период = ДатаИзменения;
		КонецЕсли;
	КонецЕсли;
	МенеджерЗаписи.Записать(НЕ ЭтоФормаЗаписи);
	Модифицированность = Ложь;
	ЭтоНоваяЗапись     = Ложь;
	
	ПослеЗаписи_НаСервере(Закрытие);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписью_НаСервере()
	
	ПараметрыЗаписи = Новый Структура();
	// Определим, нужно ли выводить предупреждение после записи.
	ЕстьДвиженияЗаПериодПоОрганизации = Ложь;
	ПредупредитьОНеобходимостиПерепроведенияДокументов = Модифицированность;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписи_НаСервере(Закрытие)
	
	Если НЕ Закрытие Тогда
		Если ЭтоФормаЗаписи Тогда
			ПрочитатьУчетнуюПолитику(ЭтаФорма.УчетнаяПолитика.Период);
		Иначе
			ТекущаяДата = НачалоДня(ТекущаяДатаСеанса());
			ПрочитатьУчетнуюПолитику(ТекущаяДата);
			ПодготовитьФормуНаСервере();
		КонецЕсли;
	КонецЕсли;
	
	Если ПредупредитьОНеобходимостиПерепроведенияДокументов Тогда
		ДатаНач = НачалоДня(УчетнаяПолитика.Период);
		ДатаКон = КонецДня(ДатаОкончанияДействия);
		ЕстьДвиженияЗаПериодПоОрганизации = ЕстьДвиженияЗаПериод(ДатаНач, ДатаКон, УчетнаяПолитика.Организация);
	КонецЕсли;
	
	РезультатВыполнения = КалендарьБухгалтера.ЗапуститьЗаполнениеВФоне(УникальныйИдентификатор, УчетнаяПолитика.Организация);
	ПараметрыЗаписи.Вставить("РезультатВыполненияЗаданияКалендаряБухгалтера", РезультатВыполнения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьДвиженияЗаПериод(Знач ДатаНач, Знач ДатаКон, Знач Организация)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",     ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон",     ДатаКон);
	Запрос.УстановитьПараметр("Организация", Организация);

	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Хозрасчетный.Организация
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Период >= &ДатаНач
	|	И Хозрасчетный.Период <= &ДатаКон
	|	И Хозрасчетный.Организация = &Организация
	|	И Хозрасчетный.Активность";
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции

&НаКлиенте
Процедура ПослеЗаписи_НаКлиенте()
	
	Если ПараметрыЗаписи.Свойство("РезультатВыполненияЗаданияКалендаряБухгалтера") Тогда
		КалендарьБухгалтераКлиент.ОжидатьЗавершениеЗаполненияВФоне(ПараметрыЗаписи.РезультатВыполненияЗаданияКалендаряБухгалтера);
	КонецЕсли;
	
	Если ЕстьДвиженияЗаПериодПоОрганизации Тогда
		ДатаНач = НачалоДня(УчетнаяПолитика.Период);
		ДатаКон = КонецГода(ДатаОкончанияДействия);
		ТекстПредупреждения = НСтр("ru = 'Изменены параметры учетной политики.
			|Рекомендуется перепровести документы организации ""%1"" за период: %2'");
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстПредупреждения,
			УчетнаяПолитика.Организация,
			ПредставлениеПериода(ДатаНач, ДатаКон, "ФП = Истина"));
		ВыводитсяПредупреждение = Истина;
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗаписиЗавершение", ЭтотОбъект);
		ПоказатьПредупреждение(ОписаниеОповещения, ТекстПредупреждения);
	КонецЕсли;
	
	Активизировать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиЗавершение(Результат) Экспорт
	
	// В данный обработчик мы можем попасть и при выполнении команды "Записать", и при выполнении команды "Записать и закрыть".
	// Необходимо, чтобы обработчик по-разному отрабатывал в этих ситуациях,
	// т.е. нам необходимо понять, нужно ли закрывать форму. 
	// Для этого используется следующий прием:
	// т.к. при выполнении команды "Записать и закрыть" в процедуру ПередЗакрытием мы попадаем раньше, 
	// чем в обработчик оповещения, то мы можем сбрасывать флаг предупреждения в ней, а не в обработчике.
	// А в обработчике по тому, что флаг сброшен, мы понимаем, что отработало ПередЗакрытием и нужно закрыть форму.
	
	Если НЕ ВыводитсяПредупреждение Тогда
		Закрыть();
	Иначе
		ВыводитсяПредупреждение = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиДатуОкончанияДействия(Знач ТекПериод, Знач ТекОрганизация)
	
	Возврат НастройкиУчета.НайтиДатуОкончанияДействия(ТекПериод, ТекОрганизация, "УчетнаяПолитика");

КонецФункции

&НаСервере
Процедура ОтменитьИзмененияИстории()
	
	Модифицированность = Ложь;
	ТекущаяДата = НачалоДня(ТекущаяДатаСеанса());
	ПрочитатьУчетнуюПолитику(ТекущаяДата);
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область СохранениеРезультатовРаботы

&НаКлиенте
Процедура ВопросСохранитьИзменения(ИмяОповещения)
	
	ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
	Оповещение = Новый ОписаниеОповещения(ИмяОповещения, ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередСменойОрганизации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Элементы.СтраницыНастроек.ТекущаяСтраница = Элементы.СтраницаНеНайдено;
		ПрочитатьНастройкиОрганизации();
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
		Отказ = Ложь;
		ЗаписатьИзменения(Ложь, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		ОповеститьОбИзмененииНастроек();
		Модифицированность = Ложь;
		Элементы.СтраницыНастроек.ТекущаяСтраница = Элементы.СтраницаНеНайдено;
		ПрочитатьНастройкиОрганизации();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		
		Модифицированность = Ложь;
		Закрыть();
		
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
		
		Отказ = Ложь;
		ЗаписатьИзменения(Истина, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		Модифицированность = Ложь;
		ОповеститьОбИзмененииНастроек();
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриПереходеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		
		ОтменитьИзмененияИстории();
		ПерейтиВНастройкуНалоговИОтчетов();
		
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
		
		ЗаписатьНаКлиенте();
		ПерейтиВНастройкуНалоговИОтчетов();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИзмененияИзВладельца() Экспорт
	
	ЗаписатьИзменения(Истина);
	ОповеститьОбИзмененииНастроек();
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьПослеЗаписи()
	
	ПараметрыОповещения = Новый Структура("Организация, Период", УчетнаяПолитика.Организация, УчетнаяПолитика.Период);
	Оповестить("Запись_УчетнаяПолитика", ПараметрыОповещения);
	
	Оповестить("ИзменениеУчетнойПолитики", УчетнаяПолитика.Организация);
	
	ОповеститьОбИзменении(Тип("СправочникСсылка.ВидыНалоговИПлатежейВБюджет"));
	
КонецПроцедуры


#КонецОбласти

#Область ОтрисовкаФормы

&НаСервере
Процедура УстановитьДоступностьВидимостьНастроек(ДоступностьВидимость)
	
	Если ОрганизацияНедоступна Тогда
		Элементы.ОбщиеСтраницыНастроек.ТекущаяСтраница = Элементы.ОбщаяСтраницаНедоступная;
		Элементы.ГруппаОрганизацияПечать.Доступность              = Ложь;
		Элементы.СтраницыБухгалтерскаяОтчетностьИстория.Видимость = Ложь;
		Элементы.ГруппаКоманднаяПанель.Видимость                  = Ложь;
		Элементы.ПрименяетсяС.Видимость                           = Ложь;
	Иначе
		
		Если ДоступностьВидимость Тогда
			Если Элементы.ОбщиеСтраницыНастроек.ТекущаяСтраница <> Элементы.ОбщаяСтраницаНастройки Тогда
				Элементы.ОбщиеСтраницыНастроек.ТекущаяСтраница = Элементы.ОбщаяСтраницаНастройки;
				Элементы.ГруппаОрганизацияПечать.Доступность   = Истина;
			КонецЕсли;
		Иначе
			Элементы.ОбщиеСтраницыНастроек.ТекущаяСтраница = Элементы.ОбщаяСтраницаПустая;
			Элементы.ГруппаОрганизацияПечать.Доступность              = Ложь;
			Элементы.СтраницыБухгалтерскаяОтчетностьИстория.Видимость = Ложь;
			Элементы.ГруппаКоманднаяПанель.Видимость                  = Ложь;
			Элементы.ПрименяетсяС.Видимость                           = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ГруппаОрганизация.ЦветФона = ЦветаСтиля.БыстрыеОтборыФонГруппы;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере(ЗаполнитьПоУмолчанию = Ложь)
	
	Если НЕ ЭтоФормаЗаписи Тогда
		Элементы.ГруппаОрганизация.ЦветФона = ЦветаСтиля.БыстрыеОтборыФонГруппы;
	Иначе
		Если ЗаполнитьПоУмолчанию Тогда
			ДанныеЗаполнения = Новый Структура();
			ДанныеЗаполнения.Вставить("Период", НачалоГода(ТекущаяДата));
			Если ЗначениеЗаполнено(Организация) Тогда
				ДанныеЗаполнения.Вставить("Организация", Организация);
			КонецЕсли;
			РегистрыСведений.УчетнаяПолитика.УстановкаНастроекПоУмолчанию(УчетнаяПолитика, ДанныеЗаполнения);
		КонецЕсли;
	КонецЕсли;
	
	ОбособленноеПодразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяПолитика.Организация, "ОбособленноеПодразделение");
	Если (ЗначениеЗаполнено(УчетнаяПолитика.Организация) И ОбособленноеПодразделение)
		ИЛИ НЕ ПравоРедактированияНастроек Тогда
		
		ЭтаФорма.ТолькоПросмотр = Истина;
		
		Если ЭтоФормаЗаписи Тогда
			Элементы.Организация.ТолькоПросмотр      = Истина;
			Элементы.Организация.РежимВыбораИзСписка = Ложь;
			Элементы.Организация.КнопкаВыбора        = Ложь;
			Элементы.ПрименяетсяС.ТолькоПросмотр     = Истина;
			Элементы.ГруппаЗаписать.Доступность      = НЕ ОбособленноеПодразделение И ПравоРедактированияНастроек;
			Элементы.ГруппаПечать.Доступность        = ПравоРедактированияНастроек;
		Иначе
			Элементы.ГруппаПечать1.Доступность        = ПравоРедактированияНастроек;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьРеквизитыФормы();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы  = Форма.Элементы;
	Запись    = Форма.УчетнаяПолитика;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ГруппаСпособОценкиМПЗ",
		"Доступность",
		НЕ Форма.ПлательщикНДФЛ И НЕ Форма.ПрименяетсяУСНДоходыМинусРасходы);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ГруппаОтчетность",
		"Видимость",
		Форма.ЭтоЮрЛицо);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ПоддержкаПБУ18",
		"Видимость",
		Форма.ЭтоЮрЛицо И Форма.ПлательщикНалогаНаПрибыль);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ФормироватьРезервыПоСомнительнымДолгам",
		"Видимость",
		Форма.ЭтоЮрЛицо);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ВстречныйВыпускПродукцииУслуг",
		"Доступность",
		Запись.СпособРасчетаСебестоимостиПроизводства = ПредопределенноеЗначение("Перечисление.СпособыРасчетаСебестоимостиПродукции.ПоПеределам"));
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ПорядокПодразделенийДляЗакрытияСчетовЗатрат",
		"Доступность",
		Запись.СпособРасчетаСебестоимостиПроизводства = ПредопределенноеЗначение("Перечисление.СпособыРасчетаСебестоимостиПродукции.ПоПодразделениям"));
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ПорядокСписанияРасходовНаСебестоимостьУслуг",
		"Доступность",
		Запись.ОказаниеУслуг);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ВстречныйВыпускПродукцииУслуг",
		"Доступность",
		Запись.СпособРасчетаСебестоимостиПроизводства = ПредопределенноеЗначение("Перечисление.СпособыРасчетаСебестоимостиПродукции.ПоПеределам"));
		
	Элементы.ГруппаПеределы.Видимость = Запись.РассчитыватьСебестоимостьПолуфабрикатов
		ИЛИ Запись.РассчитыватьСебестоимостьУслугСобственнымПодразделениям;
		
	Элементы.СтраницыБухгалтерскаяОтчетностьИстория.Видимость = НЕ Форма.ЭтоФормаЗаписи;
	Элементы.ПрименяетсяС.Видимость                           = Форма.ЭтоФормаЗаписи;
	Элементы.ГруппаОрганизацияПечать.Видимость                = НЕ Форма.ЭтоФормаЗаписи;
	
	Элементы.ГруппаКоманднаяПанель.Видимость = Форма.ЭтоФормаЗаписи;
	
	Элементы.СтраницыБухгалтерскаяОтчетностьИстория.ТекущаяСтраница = Элементы.СтраницаБухгалтерскаяОтчетностьПериоды;
	Если Форма.Модифицированность И НЕ Форма.ЭтоФормаЗаписи Тогда
		Элементы.СтраницыБухгалтерскаяОтчетностьИстория.ТекущаяСтраница = Элементы.СтраницаБухгалтерскаяОтчетностьИзменение;
	КонецЕсли;
	
	Элементы.ГруппаДополнительныеНастройки.Видимость = Запись.ОказаниеУслуг ИЛИ Запись.ВыпускПродукции;
	
	Элементы.СтраницыНастроек.ТекущаяСтраница = Элементы.Страница_БухгалтерскаяОтчетность;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыФормы()
	
	ГоловнаяОрганизация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ГоловнаяОрганизация");
	ЭтоЮрЛицо           = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация);
	
	Элементы.ОсновнойСчетУчетаЗатрат.РасширеннаяПодсказка.Заголовок = ОсновнойСчетУчетаЗатратПриИзмененииНаСервере(УчетнаяПолитика.ОсновнойСчетУчетаЗатрат);
	
	ПрименяетсяС = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
		НачалоМесяца(ЭтаФорма.УчетнаяПолитика.Период),
		КонецМесяца(ЭтаФорма.УчетнаяПолитика.Период),
		Истина);
	
	ДатаОкончанияДействия = НайтиДатуОкончанияДействия(УчетнаяПолитика.Период, УчетнаяПолитика.Организация);
	
	ЗаполнитьСвязанныеРеквизиты();
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьПериоды()
	
	Если ЭтоФормаЗаписи Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.СтраницыБухгалтерскаяОтчетностьИстория.ТекущаяСтраница = Элементы.СтраницаБухгалтерскаяОтчетностьИзменение;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ПерейтиВНастройкуНалоговИОтчетов()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Организация);
	
	ОткрытьФорму("ОбщаяФорма.НалогиИОтчеты", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораОрганизации(Форма, ДоступныеОрганизации)
	
	Элементы = Форма.Элементы;
	
	ПараметрВыбораОтборПоОрганизации = Новый ПараметрВыбора("Отбор.Ссылка", ДоступныеОрганизации);
	
	ПараметрыВыбораОрганизации = Новый Массив();
	ПараметрыВыбораОрганизации.Добавить(ПараметрВыбораОтборПоОрганизации);
	
	Элементы.Организация.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораОрганизации);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОбИзмененииНастроек()
	
	ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.НалогиОтчеты"));
	ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.ЗадачиБухгалтера"));
	Оповестить("Обновить дерево отчетов", "Обновить дерево отчетов", ЭтаФорма); // На языке регламентированной отчетности
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаИзмененияЗавершениеВыбора(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		
		ДатаИзмененияНастроек = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
			РезультатВыбора.НачалоПериода,
			РезультатВыбора.КонецПериода,
			Истина);
		
		Модифицированность = Истина;
		
		ТекущаяДата   = РезультатВыбора.НачалоПериода;
		ДатаИзменения = ТекущаяДата;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодСЗавершениеВыбора(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		
		ПрименяетсяС = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
			РезультатВыбора.НачалоПериода,
			РезультатВыбора.КонецПериода,
			Истина);
		
		Модифицированность = Истина;
		
		ЭтаФорма.УчетнаяПолитика.Период = РезультатВыбора.НачалоПериода;
		ТекущаяДата = ЭтаФорма.УчетнаяПолитика.Период;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииРеквизитаДиректКостинг()
	
	УчетнаяПолитика.ДиректКостинг = ?(ДиректКостинг = 1, Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКомандуПечати(ИмяМакета)
	
	Если Модифицированность Тогда
		ТекстСообщения = НСтр("ru = 'Перед печатью данные учетной политики необходимо записать.'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("ИмяМакета",   ИмяМакета);
	ПараметрыПечати.Вставить("Организация", УчетнаяПолитика.Организация);
	ПараметрыПечати.Вставить("Период",      УчетнаяПолитика.Период);
	
	Если ИмяМакета = "РегистрыНУ"
		Или ИмяМакета = "РегистрыБУ" 
		Или ИмяМакета = "ПервичныеДокументы"
		Или ИмяМакета = "ПланСчетов" Тогда
		
		ОбъектыПечати = Новый Массив;
		ОбъектыПечати.Добавить(УчетнаяПолитика.Организация);
		Если ИмяМакета = "РегистрыБУ" Тогда
			ТекстЗаголовка = НСтр("ru = 'Регистры БУ на %1 по %2'");
		ИначеЕсли ИмяМакета = "РегистрыНУ" Тогда
			ТекстЗаголовка = НСтр("ru = 'Регистры НУ на %1 по %2'");
		ИначеЕсли ИмяМакета = "ПервичныеДокументы" Тогда
			ТекстЗаголовка = НСтр("ru = 'Формы первичных документов на %1 по %2'");
		ИначеЕсли ИмяМакета = "ПланСчетов" Тогда
			ТекстЗаголовка = НСтр("ru = 'Рабочий план счетов на %1 по %2'");
		КонецЕсли;
		ПараметрыПечати.Вставить("ЗаголовокФормы", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстЗаголовка,
			Формат(УчетнаяПолитика.Период, "ДЛФ=D"),
			УчетнаяПолитика.Организация));
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("РегистрСведений.УчетнаяПолитика",
			ИмяМакета, ОбъектыПечати, ЭтотОбъект, ПараметрыПечати);
		
	Иначе
		ОткрытьФорму("РегистрСведений.УчетнаяПолитика.Форма.ФормаПечати", 
			ПараметрыПечати, ЭтотОбъект, ИмяМакета);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОсновнойСчетУчетаЗатратПриИзмененииНаСервере(ОсновнойСчетУчетаЗатрат)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОсновнойСчетУчетаЗатрат, "Наименование");
	
КонецФункции

&НаКлиенте
Процедура Отменить(Команда)
	
	ОтменитьИзмененияИстории();
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНастройки()
	
	Модифицированность = Ложь;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Элементы.Список.ТолькоПросмотр = Истина;
		Элементы.СтраницыНастроек.ТолькоПросмотр = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не ПравоРедактированияНастроек Тогда
		Элементы.СтраницыНастроек.ТолькоПросмотр = Истина;
	Иначе
	
		Элементы.СтраницыНастроек.ТолькоПросмотр = Ложь;
		
		// Так как изменяем данные разных записей в одной форме, 
		// то наложим пессимистическую объектную блокировку вручную - 
		// по специальному набору измерений, который никогда не будет записан в регистр.
		
		КлючЗаписи = НастройкиУчета.КлючЗаписиДействующейУчетнойПолитики("УчетнаяПолитика", Организация, ТекущаяДатаСеанса());
		Если КлючЗаписи <> Неопределено Тогда
			
			РезультатБлокировки = "";
			Попытка 
				ЗаблокироватьДанныеДляРедактирования(
					КлючЗаписи,
					, // Данные не хранятся в ИБ
					УникальныйИдентификатор); // На все время жизни формы
			Исключение
				Элементы.СтраницыНастроек.ТолькоПросмотр = Истина;
				РезультатБлокировки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			КонецПопытки;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаКлиенте
// Вызывается при получении оповещения о записи организации.
// Для новых организаций добавляет их ссылки в отбор параметра выбора, 
// чтобы они были доступны в списке на форме.
//
// Параметры:
//	Параметр - Неопределено, Структура - Параметр, полученный в ОбработкаОповещения().
//		Если имеет тип Структура и содержит ключ "ЭтоНовый", то такое оповещения будет обработано,
//		иначе проигнорировано.
//	Источник - СправочникСсылка.Организации - Ссылка на измененную организацию.
//
Процедура ОбработкаОповещенияЗаписьОрганизации(Параметр, Источник)
	
	Если ТипЗнч(Параметр) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Параметр.Свойство("ЭтоНовый") 
		ИЛИ НЕ Параметр.ЭтоНовый Тогда
		Возврат;
	КонецЕсли;
	
	// При записи новой организации добавим ее в список доступных для выбора организаций на форме.
	ДоступныеОрганизации = Новый Массив;
	ДоступныеОрганизации.Добавить(Источник);
	
	Если Элементы.Организация.ПараметрыВыбора.Количество() > 0 Тогда
		// В качестве значения параметра выбора указан фиксированный массив ссылок организаций, 
		// полученный из ОбщегоНазначенияБПВызовСервераПовтИсп.ОрганизацииДанныеКоторыхДоступныПользователю().
		// Копируем их в новый массив.
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДоступныеОрганизации, Элементы.Организация.ПараметрыВыбора[0].Значение);
	КонецЕсли;
	
	ФиксированныйМассивДоступныхОрганизаций = Новый ФиксированныйМассив(ДоступныеОрганизации);
	
	УстановитьПараметрыВыбораОрганизации(ЭтотОбъект, ДоступныеОрганизации);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПоддерживаетсяУчетПоЭлементамЗатрат()

	Возврат УчетнаяПолитика.ПоддерживаетсяУчетПоЭлементамЗатрат();

КонецФункции

#КонецОбласти

#КонецОбласти
