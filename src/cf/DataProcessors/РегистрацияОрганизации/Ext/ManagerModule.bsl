#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОтправкаДанныхВЛичныйКабинет

Процедура ОтправитьДанныеРегистрацииВЛичныйКабинет()
	
	СтруктураДанных = СтруктураДанныхПомощникаДляЛичногоКабинета();
	Если СтруктураДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОтправитьЗапросВЛичныйКабинет(СтруктураДанных, ИмяМетодаДанныеРегистрации());
	
КонецПроцедуры

Процедура ОтправитьЗапросНаПолучениеКонсультации() Экспорт
	
	ОтправитьЗапросВЛичныйКабинет(Неопределено, ИмяМетодаЗапросКонсультации());
	
КонецПроцедуры

Процедура ОтправитьОписаниеНавигацииВЛичныйКабинет(ОписаниеНавигацииДляЛичногоКабинета)
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Route", ОписаниеНавигацииДляЛичногоКабинета);
	ОтправитьЗапросВЛичныйКабинет(СтруктураДанных, ИмяМетодаДанныеОНавигации());
	
КонецПроцедуры

#Область ИменаМетодовЛичногоКабинета

Функция ИмяМетодаЗапросКонсультации()
	
	ИмяМетода = "reg_support_request";
	ДобавитьПараметрОбластьДанных(ИмяМетода);
	Возврат ИмяМетода;
	
КонецФункции

Функция ИмяМетодаДанныеОНавигации()
	
	ИмяМетода = "reg_route_update";
	ДобавитьПараметрОбластьДанных(ИмяМетода);
	Возврат ИмяМетода;
	
КонецФункции

Функция ИмяМетодаДанныеРегистрации()
	
	ИмяМетода = "registration";
	ДобавитьПараметрОбластьДанных(ИмяМетода);
	Возврат ИмяМетода;
	
КонецФункции

#КонецОбласти

#Область ИменаШаговДляЛичногоКабинета

Функция ИмяШагаНачалоДляЛичногоКабинета()

	Возврат "Start";

КонецФункции

Функция ИмяШагаФормаБизнесаДляЛичногоКабинета()

	Возврат "BusinessForm";

КонецФункции

Функция ИмяШагаОКВЭДДляЛичногоКабинета()

	Возврат "OKVED";

КонецФункции

Функция ИмяШагаНалогиДляЛичногоКабинета()

	Возврат "TaxSystem";

КонецФункции

Функция ИмяШагаЗаявлениеДляЛичногоКабинета()

	Возврат "Details";

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииВзаимодействияСЛичнымКабинетом

Функция СтруктураДанныхПомощникаДляЛичногоКабинета()
	
	СтруктураНавигации = Обработки.РегистрацияОрганизации.СтруктураНавигацииПомощника();
	Если СтруктураНавигации = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеПомощникаРегистрации = ДанныеПомощникаРегистрации();
	СтруктураДанных = НовыйСтруктураДанныхРегистрацииДляЛичногоКабинета();
	
	// Считаем, что предыдущий шаг перед открытым - это выполненный этап.
	ПройденныйШаг = НомерШагаПомощника() - 1;
	Если ПройденныйШаг = 0 Тогда
		// Если это первый шаг, то отправляем в личный кабинет пустую структуру.
		СтруктураДанных.Stage = ИмяШагаНачалоДляЛичногоКабинета();
		Возврат СтруктураДанных;
	КонецЕсли;
	
	// Имя шага
	СтруктураШага = СтруктураНавигации[ИмяШага(ПройденныйШаг)];
	СтруктураДанных.Stage = СтруктураШага.ИмяШагаДляЛК;
	
	Для НомерШага = 1 По ПройденныйШаг Цикл
		СтруктураШага = СтруктураНавигации[ИмяШага(НомерШага)];
		Если СтруктураШага.ИмяШагаДляЛК = ИмяШагаФормаБизнесаДляЛичногоКабинета() Тогда
			
			// Форма бизнеса
			ЮридическоеФизическоеЛицо = ДанныеПомощникаРегистрации.ФормаБизнеса.ЮридическоеФизическоеЛицо;
			Если ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
				СтруктураДанных.BusinessForm = "ООО";
			ИначеЕсли ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
				СтруктураДанных.BusinessForm = "ИП";
			КонецЕсли;
			
		ИначеЕсли СтруктураШага.ИмяШагаДляЛК = ИмяШагаОКВЭДДляЛичногоКабинета() Тогда
			
			// ОКВЭД
			ВидДеятельности = ДанныеПомощникаРегистрации.ВидДеятельности;
			СтруктураДанных.OKVED.Code = ВидДеятельности.ОсновнойКод;
			СтруктураДанных.OKVED.Description = ВидДеятельности.ОсновноеНаименование;
			
		ИначеЕсли СтруктураШага.ИмяШагаДляЛК = ИмяШагаНалогиДляЛичногоКабинета() Тогда
			
			// Система налогообложения
			НалоговыйРежим = ДанныеПомощникаРегистрации.Налоги.ВыбранныйРежим;
			// Очистим выбранный режим от формы собственности.
			НалоговыйРежим = СтрЗаменить(НалоговыйРежим, "ИП", "");
			НалоговыйРежим = СтрЗаменить(НалоговыйРежим, "ООО", "");
			// Приведем налоговый режим к согласованным наименованиям.
			Если НалоговыйРежим = "УСНДоходыРасходы" Тогда
				НалоговыйРежим = "УСНДоходыМинусРасходы";
			ИначеЕсли НалоговыйРежим = "ПСН" Тогда
				НалоговыйРежим = "Патент";
			КонецЕсли;
			СтруктураДанных.TaxSystem = НалоговыйРежим;
			
		ИначеЕсли СтруктураШага.ИмяШагаДляЛК = ИмяШагаЗаявлениеДляЛичногоКабинета() Тогда
			
			// Данные заявления
			Заявление = ДанныеПомощникаРегистрации.Заявление;
			
			Если Заявление.Свойство("СпособРегистрации") Тогда
				СтруктураДанных.RegistrationMethod = Заявление.СпособРегистрации;
			КонецЕсли;
			Если Заявление.Свойство("НаименованиеОрганизации") Тогда
				СтруктураДанных.ShortOrgName = Заявление.НаименованиеОрганизации;
			КонецЕсли;
			Если Заявление.Свойство("ПолноеНаименованиеОрганизации") Тогда
				СтруктураДанных.FullOrgName = Заявление.ПолноеНаименованиеОрганизации;
			КонецЕсли;
			Если Заявление.Свойство("АдресXML") Тогда
				СтруктураДанных.AddressFields = Заявление.АдресXML;
			КонецЕсли;
			// PersonDetail
			Если Заявление.Свойство("Фамилия") Тогда
				СтруктураДанных.PersonDetail.Surname = Заявление.Фамилия;
			КонецЕсли;
			Если Заявление.Свойство("Имя") Тогда
				СтруктураДанных.PersonDetail.Name = Заявление.Имя;
			КонецЕсли;
			Если Заявление.Свойство("Отчество") Тогда
				СтруктураДанных.PersonDetail.MiddleName = Заявление.Отчество;
			КонецЕсли;
			Если Заявление.Свойство("Пол") Тогда
				СтруктураДанных.PersonDetail.Sex = Заявление.Пол;
			КонецЕсли;
			Если Заявление.Свойство("ИНН") Тогда
				СтруктураДанных.PersonDetail.INN = Заявление.ИНН;
			КонецЕсли;
			// Contacts
			Если Заявление.Свойство("Телефон") Тогда
				СтруктураДанных.Contacts.Phone = Заявление.Телефон;
			КонецЕсли;
			Если Заявление.Свойство("Email") Тогда
				СтруктураДанных.Contacts.Email = Заявление.Email;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураДанных;
	
КонецФункции

Функция НовыйСтруктураДанныхРегистрацииДляЛичногоКабинета()
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Stage",              "");
	СтруктураДанных.Вставить("BusinessForm",       "");
	СтруктураДанных.Вставить("TaxSystem",          "");
	СтруктураДанных.Вставить("RegistrationMethod", "");
	СтруктураДанных.Вставить("ShortOrgName",       "");
	СтруктураДанных.Вставить("FullOrgName",        "");
	СтруктураДанных.Вставить("AddressFields",      "");
	СтруктураДанных.Вставить("OKVED",              Новый Структура);
	СтруктураДанных.Вставить("PersonDetail",       Новый Структура);
	СтруктураДанных.Вставить("Contacts",           Новый Структура);
	
	// OKVED
	СтруктураДанных.OKVED.Вставить("Code", "");
	СтруктураДанных.OKVED.Вставить("Description", "");
	
	// PersonDetail
	СтруктураДанных.PersonDetail.Вставить("Surname", "");
	СтруктураДанных.PersonDetail.Вставить("Name", "");
	СтруктураДанных.PersonDetail.Вставить("MiddleName", "");
	СтруктураДанных.PersonDetail.Вставить("Sex", "");
	СтруктураДанных.PersonDetail.Вставить("INN", "");
	
	// Contacts
	СтруктураДанных.Contacts.Вставить("Phone", "");
	СтруктураДанных.Contacts.Вставить("Email", "");
	Возврат СтруктураДанных;
	
КонецФункции

Процедура ОтправитьЗапросВЛичныйКабинет(СтруктураДанных, ИмяМетода)
	
	// Выполняем отправку данных в личный кабинет с помощью фонового задания.
	// Мы не ждем обратную связь от личного кабинета, поэтому никак не обрабатываем результат.
	// Вся необходимая информация будет записана в журнал регистрации.
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("СтруктураДанных", СтруктураДанных);
	ПараметрыПроцедуры.Вставить("ИмяМетода", ИмяМетода);
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.ЗапуститьВФоне = Истина;
	
	ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.РегистрацияОрганизации.ОтправитьЗапросВЛичныйКабинетВФоне",
		ПараметрыПроцедуры,
		ПараметрыВыполненияВФоне)
	
КонецПроцедуры

Процедура ОтправитьЗапросВЛичныйКабинетВФоне(Параметры, АдресРезультата) Экспорт
	
	ПараметрыСоединения = ПараметрыСоединения();
	Если ПараметрыСоединения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Соединение = СоединениеССерверомРегистрации(ПараметрыСоединения);
	Если Соединение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПутьНаСервере = ПараметрыСоединения.ПутьНаСервере + ?(Прав(ПараметрыСоединения.ПутьНаСервере, 1) = "/", "", "/");
	Запрос = Новый HTTPЗапрос(ПутьНаСервере + Параметры.ИмяМетода);
	Если Параметры.СтруктураДанных <> Неопределено Тогда
		Запрос.УстановитьТелоИзСтроки(СтруктураВJSON(Параметры.СтруктураДанных));
	КонецЕсли;
	Ответ = Соединение.ВызватьHTTPМетод("POST", Запрос);
	
	ЗаписатьИнформациюВЖурналРегистрации(Ответ)
	
КонецПроцедуры

Процедура ЗаписатьИнформациюВЖурналРегистрации(Ответ)
	
	Если Ответ.КодСостояния = 200 Тогда
		ПараметрыОтвета = JSONВСтруктуру(Ответ.ПолучитьТелоКакСтроку());
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,,НСтр("ru='Успешная синхронизация с личным кабинетом.'"));
	ИначеЕсли Ответ.КодСостояния = 400 Тогда
		ПараметрыОтвета = JSONВСтруктуру(Ответ.ПолучитьТелоКакСтроку());
		Если ПараметрыОтвета.Свойство("error") Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru='Код ошибки: %1. Описание ошибки: %2'"),ПараметрыОтвета.error.code, ПараметрыОтвета.error.text);
		Иначе
			ТекстОшибки = НСтр("ru='Неизвестная ошибка'");
		КонецЕсли;
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,,ТекстОшибки);
	Иначе
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,, Ответ.ПолучитьТелоКакСтроку());
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПараметрОбластьДанных(ИмяМетода)
	
	РазделительСеанса = ОбщегоНазначения.ЗначениеРазделителяСеанса();
	ИмяМетода = ИмяМетода + СтрШаблон("?app=%1", Формат(РазделительСеанса, "ЧГ=0"));
	
КонецПроцедуры

Функция JSONВСтруктуру(СтрокаJSON)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	Структура = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	Возврат Структура;
	
КонецФункции

Функция СтруктураВJSON(Структура)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Структура);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Функция ПараметрыСоединения()
	
	АдресСервиса = Константы.АдресСервисаРегистрации.Получить();
	Если НЕ ЗначениеЗаполнено(АдресСервиса) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Логин = Константы.ИмяПользователяСервисаРегистрации.Получить();
	Если НЕ ЗначениеЗаполнено(Логин) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыСоединения = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресСервиса);
	ПараметрыСоединения.Схема = ?(ЗначениеЗаполнено(ПараметрыСоединения.Схема), ПараметрыСоединения.Схема, "http");
	ПараметрыСоединения.Вставить("Прокси", ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси(ПараметрыСоединения.Схема));
	ПараметрыСоединения.Вставить("Таймаут", 20);
	ПараметрыСоединения.Вставить("Логин", Логин);
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыСоединения.Вставить("Пароль", ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		Логин, "ПарольПользователяСервисаРегистрации", Истина));
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ПараметрыСоединения;
	
КонецФункции

Функция СоединениеССерверомРегистрации(ПараметрыСоединения)
	
	Соединение = Неопределено;
	
	Попытка
		Соединение = Новый HTTPСоединение(
			ПараметрыСоединения.Хост,
			ПараметрыСоединения.Порт,
			ПараметрыСоединения.Логин,
			ПараметрыСоединения.Пароль, 
			ПараметрыСоединения.Прокси,
			ПараметрыСоединения.Таймаут,
			?(НРег(ПараметрыСоединения.Схема) = "http", Неопределено, Новый ЗащищенноеСоединениеOpenSSL));
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Соединение;
	
КонецФункции

Функция ИмяСобытияЖурналаРегистрации()

	Возврат НСтр("ru = 'Регистрация организации.Личный кабинет'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());

КонецФункции

#КонецОбласти

#КонецОбласти

#Область ХранениеДанных

// Функция возвращает структуру с данными помощника регистрации.
// 
// Возвращаемое значение:
//    Структура - см. НовыйСтруктураДанныхПомощникаРегистрации().
//
Функция ДанныеПомощникаРегистрации() Экспорт
	
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		ИмяКлючаНастроек(),
		ИмяКлючаДанныеПомощникаРегистрации(),
		НовыйСтруктураДанныхПомощникаРегистрации());
	
КонецФункции

// Функция возвращает структуру с данными заявления помощника регистрации.
// 
// Возвращаемое значение:
//    Структура.
//
Функция НовыйДанныеЗаявления() Экспорт

	ДанныеЗаявления = Новый Структура;
	ДанныеЗаявления.Вставить("СпособРегистрации",             "");
	ДанныеЗаявления.Вставить("Ссылка",                        Справочники.Организации.ПустаяСсылка());
	ДанныеЗаявления.Вставить("НаименованиеОрганизации",       "");
	ДанныеЗаявления.Вставить("ПолноеНаименованиеОрганизации", "");
	ДанныеЗаявления.Вставить("Фамилия",                       "");
	ДанныеЗаявления.Вставить("Имя",                           "");
	ДанныеЗаявления.Вставить("Отчество",                      "");
	ДанныеЗаявления.Вставить("Пол",                           "");
	ДанныеЗаявления.Вставить("ИНН",                           "");
	ДанныеЗаявления.Вставить("Телефон",                       "");
	ДанныеЗаявления.Вставить("Email",                         "");
	ДанныеЗаявления.Вставить("АдресXML"                       "");
	
	Возврат ДанныеЗаявления;
	
КонецФункции

// Функция возвращает название способа регистрации в виде строки:
// Параметры:
//    СпособРегистрации - Число
// Возвращаемое значение:
//    Строка - Одно из значений - "Почтой", "Представитель" или "Лично"
//
Функция НазваниеСпособаРегистрации(СпособРегистрации) Экспорт
	
	Если СпособРегистрации = 3 Тогда
		НазваниеСпособаРегистрации = "Почтой";
	ИначеЕсли СпособРегистрации = 2 Тогда
		НазваниеСпособаРегистрации = "Представитель";
	Иначе
		НазваниеСпособаРегистрации = "Лично";
	КонецЕсли;
	Возврат НазваниеСпособаРегистрации;
	
КонецФункции

Функция НовыйСтруктураДанныхПомощникаРегистрации()
	
	ДанныеПомощникаРегистрации = Новый Структура;
	ДанныеПомощникаРегистрации.Вставить("Модифицированность", Ложь);
	ДанныеПомощникаРегистрации.Вставить("ФормаБизнеса",       Новый Структура);
	ДанныеПомощникаРегистрации.Вставить("ВидДеятельности",    Новый Структура);
	ДанныеПомощникаРегистрации.Вставить("Налоги",             Новый Структура);
	ДанныеПомощникаРегистрации.Вставить("Заявление",          НовыйДанныеЗаявления());
	
	// Форма бизнеса
	ДанныеПомощникаРегистрации.ФормаБизнеса.Вставить("ЮридическоеФизическоеЛицо");
	
	// Вид деятельности
	ДанныеПомощникаРегистрации.ВидДеятельности.Вставить("ОсновнойКод",          "");
	ДанныеПомощникаРегистрации.ВидДеятельности.Вставить("ОсновноеНаименование", "");
	ДанныеПомощникаРегистрации.ВидДеятельности.Вставить("ДополнительныеКоды",   "");
	ДанныеПомощникаРегистрации.ВидДеятельности.Вставить("ВыбранныеКодыОКВЭД",   Новый СписокЗначений);
	// Налогообложение
	ДанныеПомощникаРегистрации.Налоги.Вставить("СтруктураУчетнойПолитики", Новый Структура);
	ДанныеПомощникаРегистрации.Налоги.Вставить("ВыбранныйРежим",           "");
	
	Возврат ДанныеПомощникаРегистрации;
	
КонецФункции

Процедура СохранитьДанныеПомощникаРегистрации(ДанныеПомощникаРегистрации)

	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		ИмяКлючаНастроек(),
		ИмяКлючаДанныеПомощникаРегистрации(),
		ДанныеПомощникаРегистрации);
	
КонецПроцедуры

// Сохраняет данные шага "Заявление".
// Параметры:
//    Заявление - Структура - см. НовыйДанныеЗаявления().
//
Процедура СохранитьДанныеЗаявления(Заявление) Экспорт
	
	ДанныеПомощникаРегистрации = ДанныеПомощникаРегистрации();
	
	Если НЕ ОбщегоНазначения.ДанныеСовпадают(ДанныеПомощникаРегистрации.Заявление, Заявление) Тогда
		ЗаполнитьЗначенияСвойств(ДанныеПомощникаРегистрации.Заявление, Заявление);
		СохранитьДанныеПомощникаРегистрации(ДанныеПомощникаРегистрации);
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет данные шага "Налоги".
// Параметры:
//    Налоги - Структура - см. НовыйСтруктураДанныхПомощникаРегистрации().
//
Процедура СохранитьДанныеНалоги(Налоги) Экспорт
	
	ДанныеПомощникаРегистрации = ДанныеПомощникаРегистрации();
	Если НЕ ОбщегоНазначения.ДанныеСовпадают(ДанныеПомощникаРегистрации.Налоги, Налоги) Тогда
		ДанныеПомощникаРегистрации.Модифицированность = Истина;
		ЗаполнитьЗначенияСвойств(ДанныеПомощникаРегистрации.Налоги, Налоги);
		СохранитьДанныеПомощникаРегистрации(ДанныеПомощникаРегистрации);
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет основной код ОКВЭД, если помощник начинается с шага "Налоги".
// 
// Параметры:
//    ОКВЭД - Структура - с ключами Код и наименование.
//
Процедура СохранитьОсновнойОКВЭД(ОКВЭД) Экспорт
	
	ДанныеПомощникаРегистрации = ДанныеПомощникаРегистрации();
	
	Если ДанныеПомощникаРегистрации.ВидДеятельности.ОсновнойКод <> ОКВЭД.Код 
		ИЛИ ДанныеПомощникаРегистрации.ВидДеятельности.ОсновнойКод <> ОКВЭД.Наименование Тогда
		
		ДанныеПомощникаРегистрации.Модифицированность = Истина;
		ДанныеПомощникаРегистрации.ВидДеятельности.ОсновнойКод = ОКВЭД.Код;
		ДанныеПомощникаРегистрации.ВидДеятельности.ОсновноеНаименование = ОКВЭД.Наименование;
		ДанныеПомощникаРегистрации.ВидДеятельности.ВыбранныеКодыОКВЭД.Добавить(ОКВЭД.Код);
		СохранитьДанныеПомощникаРегистрации(ДанныеПомощникаРегистрации);
	КонецЕсли;
КонецПроцедуры

// Сохраняет данные шага "ФормаБизнеса".
// 
// Параметры:
//    ЮридическоеФизическоеЛицо - Перечисление.ЮридическоеФизическоеЛицо.
//
Процедура СохранитьДанныеФормаБизнеса(ЮридическоеФизическоеЛицо) Экспорт
	
	ДанныеПомощникаРегистрации = ДанныеПомощникаРегистрации();
	Если ДанныеПомощникаРегистрации.ФормаБизнеса.ЮридическоеФизическоеЛицо <> ЮридическоеФизическоеЛицо Тогда
		ДанныеПомощникаРегистрации.Модифицированность = Истина;
		ДанныеПомощникаРегистрации.ФормаБизнеса.ЮридическоеФизическоеЛицо = ЮридическоеФизическоеЛицо;
		СохранитьДанныеПомощникаРегистрации(ДанныеПомощникаРегистрации);
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет данные шага "Вид деятельности".
//
// Параметры:
//    ДанныеОКВЭД - Структура - см. НовыйСтруктураДанныхПомощникаРегистрации().
//
Процедура СохранитьДанныеОКВЭД(ДанныеОКВЭД) Экспорт
	
	ДанныеПомощникаРегистрации = ДанныеПомощникаРегистрации();
	Если НЕ ОбщегоНазначения.ДанныеСовпадают(ДанныеПомощникаРегистрации.ВидДеятельности, ДанныеОКВЭД) Тогда
		ДанныеПомощникаРегистрации.Модифицированность = Истина;
		ЗаполнитьЗначенияСвойств(ДанныеПомощникаРегистрации.ВидДеятельности, ДанныеОКВЭД);
		СохранитьДанныеПомощникаРегистрации(ДанныеПомощникаРегистрации);
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьНомерШага(НомерШага)
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		ИмяКлючаНастроек(),
		ИмяКлючаНомерШагаПомощника(),
		НомерШага);
	
КонецПроцедуры 

Функция ИмяКлючаНомерШагаПомощника()
	
	Возврат "НомерШага";
	
КонецФункции

Функция ИмяКлючаДанныеПомощникаРегистрации()

	Возврат "ДанныеПомощникаРегистрации";

КонецФункции

Функция ИмяКлючаНастроек()
	
	Возврат "ПомощникРегистрации";
	
КонецФункции

#КонецОбласти

#Область Навигация

// Размещает на форме элементы навигации по помощнику регистрации.
// 
// Параметры:
//
// Форма - Управляемая форма.
// Параметры - Структура - Структура параметров формы.
//
Процедура РазместитьНавигацию(Форма, Параметры = Неопределено) Экспорт
	
	СтруктураНавигацииПомощника = СтруктураНавигацииПомощника();
	
	Если СтруктураНавигацииПомощника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСлужебныеРеквизиты(Форма, СтруктураНавигацииПомощника, Параметры);
	Если Форма.НавигацияНомерШага = 0 Тогда
		Возврат;
	КонецЕсли;
	РазместитьКартинки(Форма, СтруктураНавигацииПомощника);
	РазместитьТексты(Форма, СтруктураНавигацииПомощника);
	УправлениеВидимостью(Форма);
	
КонецПроцедуры

// Процедура создает и сохраняет маршрут помощника регистрации
// в зависимости от переданного параметра. Обязательно должен быть передан один из двух параметров.
// 
// Параметры:
//  ПараметрЗапускаПомощника - Строка - Параметр запуска приложения, в зависимости от которого формируется маршрут.
//  ИмяПомощника - Строка - имя помощника для построения структуры, если параметр запуска неизвестен.
//
Процедура ПодготовитьСтруктуруНавигацииПомощника(ПараметрЗапускаПомощника = "", ИмяПомощника = "") Экспорт
	
	Если ПустаяСтрока(ПараметрЗапускаПомощника) И ПустаяСтрока(ИмяПомощника) Тогда
		ВызватьИсключение НСтр("ru = 'Не заданы параметры структуры навигации Помощника регистрации.'");
	КонецЕсли;
	
	РежимыРаботыПользователя = Обработки.НачалоРаботы.НовыйРежимРаботыПользователя();
	Если ВРег(ПараметрЗапускаПомощника) = ВРег(ИмяВыборВидаДеятельности()) Тогда
		
		НавигацияПомощника = НавигацияПомощникаВыбораОКВЭД();
		Обработки.НачалоРаботы.СохранитьРежимРаботыПользователя(РежимыРаботыПользователя.Регистрация);
		
	ИначеЕсли ВРег(ПараметрЗапускаПомощника) = ВРег(ИмяВыборСистемыНалогообложения()) Тогда
		
		НавигацияПомощника = НавигацияПомощникаВыбораСистемыНалогообложения();
		Обработки.НачалоРаботы.СохранитьРежимРаботыПользователя(РежимыРаботыПользователя.Регистрация);
		
	ИначеЕсли ВРег(ПараметрЗапускаПомощника) = ВРег(ИмяТестИПИлиООО()) Тогда
		
		НавигацияПомощника = НавигацияПомощникаВыбораОрганизационноПравовойФормы();
		Обработки.НачалоРаботы.СохранитьРежимРаботыПользователя(РежимыРаботыПользователя.Регистрация);
		
	ИначеЕсли ВРег(ПараметрЗапускаПомощника) = ВРег(ИмяИзменениеЕГР()) Тогда
		
		НавигацияПомощника = НавигацияПомощникаИзмененийЕГР();
		Обработки.НачалоРаботы.СохранитьРежимРаботыПользователя(РежимыРаботыПользователя.ВнесениеИзменений);
		
	ИначеЕсли ВРег(ПараметрЗапускаПомощника) = ВРег(ИмяНачалоРаботы()) Тогда
		
		// Начало работы без запуска Помощника
		
	Иначе
		
		Если ИмяПомощника = РегистрацияОрганизацииКлиентСервер.ИмяПомощникаРегистрации() Тогда
			НавигацияПомощника = НавигацияПомощникаРегистрации();
			Обработки.НачалоРаботы.СохранитьРежимРаботыПользователя(РежимыРаботыПользователя.Регистрация);
		ИначеЕсли ИмяПомощника = РегистрацияОрганизацииКлиентСервер.ИмяПомощникаВнесенияИзменений() Тогда
			НавигацияПомощника = НавигацияПомощникаИзмененийЕГР();
			Обработки.НачалоРаботы.СохранитьРежимРаботыПользователя(РежимыРаботыПользователя.ВнесениеИзменений);
		Иначе
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Неизвестное имя помощника регистрации: %1'"), ИмяПомощника);
		КонецЕсли;
		
	КонецЕсли;
	
	Если НавигацияПомощника <> Неопределено Тогда
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			ИмяКлючаНастроек(),
			ИмяКлючаСтруктураНавигации(),
			НавигацияПомощника.Структура);
			
		Если Не ПустаяСтрока(НавигацияПомощника.Описание) Тогда
			ОтправитьОписаниеНавигацииВЛичныйКабинет(НавигацияПомощника.Описание);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция НавигацияПомощникаРегистрации()
	
	СтруктураНавигации = Новый Структура;
	СтруктураНавигации.Вставить(ИмяШага(1), ДобавитьШагФормаБизнеса(СтруктураНавигации.Количество()));
	СтруктураНавигации.Вставить(ИмяШага(2), ДобавитьШагОКВЭД(СтруктураНавигации.Количество()));
	СтруктураНавигации.Вставить(ИмяШага(3), ДобавитьШагРежимНалогообложения(СтруктураНавигации.Количество()));
	СтруктураНавигации.Вставить(ИмяШага(4), ДобавитьШагЗаявление(СтруктураНавигации.Количество()));
	СтруктураНавигации.Вставить(ИмяШага(5), ДобавитьШагДокументы(СтруктураНавигации.Количество()));
	
	ИменаШагов = Новый Массив;
	ИменаШагов.Добавить(ИмяШагаФормаБизнесаДляЛичногоКабинета());
	ИменаШагов.Добавить(ИмяШагаОКВЭДДляЛичногоКабинета());
	ИменаШагов.Добавить(ИмяШагаНалогиДляЛичногоКабинета());
	ИменаШагов.Добавить(ИмяШагаЗаявлениеДляЛичногоКабинета());
	ОписаниеНавигации = СтрСоединить(ИменаШагов, ",");
	
	Возврат Новый Структура("Структура, Описание", СтруктураНавигации, ОписаниеНавигации);
	
КонецФункции

Функция НавигацияПомощникаВыбораОКВЭД()
	
	СтруктураНавигации = Новый Структура;
	СтруктураНавигации.Вставить(ИмяШага(1), ДобавитьШагОКВЭД(СтруктураНавигации.Количество()));
	СтруктураНавигации.Вставить(ИмяШага(2), ДобавитьШагФормаБизнеса(СтруктураНавигации.Количество()));
	СтруктураНавигации.Вставить(ИмяШага(3), ДобавитьШагРежимНалогообложения(СтруктураНавигации.Количество()));
	СтруктураНавигации.Вставить(ИмяШага(4), ДобавитьШагЗаявление(СтруктураНавигации.Количество()));
	СтруктураНавигации.Вставить(ИмяШага(5), ДобавитьШагДокументы(СтруктураНавигации.Количество()));
	
	ИменаШагов = Новый Массив;
	ИменаШагов.Добавить(ИмяШагаОКВЭДДляЛичногоКабинета());
	ИменаШагов.Добавить(ИмяШагаФормаБизнесаДляЛичногоКабинета());
	ИменаШагов.Добавить(ИмяШагаНалогиДляЛичногоКабинета());
	ИменаШагов.Добавить(ИмяШагаЗаявлениеДляЛичногоКабинета());
	ОписаниеНавигации = СтрСоединить(ИменаШагов, ",");
	
	Возврат Новый Структура("Структура, Описание", СтруктураНавигации, ОписаниеНавигации);
	
КонецФункции

Функция НавигацияПомощникаВыбораСистемыНалогообложения()
	
	СтруктураНавигации = Новый Структура;
	СтруктураНавигации.Вставить(ИмяШага(1), ДобавитьШагРежимНалогообложения(СтруктураНавигации.Количество(), "РежимНалогообложенияИФормаБизнеса"));
	СтруктураНавигации.Вставить(ИмяШага(2), ДобавитьШагФормаБизнеса(СтруктураНавигации.Количество(),"ПодтвердитьФормуБизнеса"));
	СтруктураНавигации.Вставить(ИмяШага(3), ДобавитьШагОКВЭД(СтруктураНавигации.Количество()));
	СтруктураНавигации.Вставить(ИмяШага(4), ДобавитьШагЗаявление(СтруктураНавигации.Количество()));
	СтруктураНавигации.Вставить(ИмяШага(5), ДобавитьШагДокументы(СтруктураНавигации.Количество()));
	
	ИменаШагов = Новый Массив;
	ИменаШагов.Добавить(ИмяШагаНалогиДляЛичногоКабинета());
	ИменаШагов.Добавить(ИмяШагаФормаБизнесаДляЛичногоКабинета());
	ИменаШагов.Добавить(ИмяШагаОКВЭДДляЛичногоКабинета());
	ИменаШагов.Добавить(ИмяШагаЗаявлениеДляЛичногоКабинета());
	ОписаниеНавигации = СтрСоединить(ИменаШагов, ",");
	
	Возврат Новый Структура("Структура, Описание", СтруктураНавигации, ОписаниеНавигации);
	
КонецФункции

Функция НавигацияПомощникаВыбораОрганизационноПравовойФормы()
	
	СтруктураНавигации = Новый Структура;
	СтруктураНавигации.Вставить(ИмяШага(1), ДобавитьШагФормаБизнеса(СтруктураНавигации.Количество(), "ПройтиТест"));
	СтруктураНавигации.Вставить(ИмяШага(2), ДобавитьШагОКВЭД(СтруктураНавигации.Количество()));
	СтруктураНавигации.Вставить(ИмяШага(3), ДобавитьШагРежимНалогообложения(СтруктураНавигации.Количество()));
	СтруктураНавигации.Вставить(ИмяШага(4), ДобавитьШагЗаявление(СтруктураНавигации.Количество()));
	СтруктураНавигации.Вставить(ИмяШага(5), ДобавитьШагДокументы(СтруктураНавигации.Количество()));
	
	ИменаШагов = Новый Массив;
	ИменаШагов.Добавить(ИмяШагаФормаБизнесаДляЛичногоКабинета());
	ИменаШагов.Добавить(ИмяШагаОКВЭДДляЛичногоКабинета());
	ИменаШагов.Добавить(ИмяШагаНалогиДляЛичногоКабинета());
	ИменаШагов.Добавить(ИмяШагаЗаявлениеДляЛичногоКабинета());
	ОписаниеНавигации = СтрСоединить(ИменаШагов, ",");
	
	Возврат Новый Структура("Структура, Описание", СтруктураНавигации, ОписаниеНавигации);
	
КонецФункции

Функция НавигацияПомощникаИзмененийЕГР()
	
	СтруктураНавигации = Новый Структура;
	СтруктураНавигации.Вставить(ИмяШага(1), ДобавитьШагСписокИзмененийЕГР(СтруктураНавигации.Количество()));
	СтруктураНавигации.Вставить(ИмяШага(2), ДобавитьШагЗаявлениеДляИзмененияЕГР(СтруктураНавигации.Количество()));
	СтруктураНавигации.Вставить(ИмяШага(3), ДобавитьШагДокументыДляИзмененияЕГР(СтруктураНавигации.Количество()));
	
	ОписаниеНавигации = "";
	
	Возврат Новый Структура("Структура, Описание", СтруктураНавигации, ОписаниеНавигации);
	
КонецФункции

// Функция возвращает сохраненную ранее структуру навигации.
//
Функция СтруктураНавигацииПомощника() Экспорт
	
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		ИмяКлючаНастроек(),
		ИмяКлючаСтруктураНавигации());
	
КонецФункции

// Функция возвращает имя формы, которую нужно открыть для этого параметра.
// Используется в случае, если одному шагу может соответствовать несколько форм.
//
// Параметры:
//    НавигацияПараметрФормы - Строка - Параметр навигации шага для которого нужно определить форму.
//
// Возвращаемое значение:
//    ИмяФормы - Строка - Имя формы, которую нужно открыть.
//
Функция ИмяФормыШага(НавигацияПараметрФормы) Экспорт
	
	ИмяФормыШага = "";
	ДанныеПомощникаРегистрации = ДанныеПомощникаРегистрации();
	Если НавигацияПараметрФормы = "Документы"
		ИЛИ НавигацияПараметрФормы = "Заявление" Тогда
		
		ЮридическоеФизическоеЛицо = ДанныеПомощникаРегистрации.ФормаБизнеса.ЮридическоеФизическоеЛицо;
		Если ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			ИмяФормыШага = ИмяФормыЗаявлениеООО();
		Иначе
			ИмяФормыШага = ИмяФормыЗаявлениеИП();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИмяФормыШага;
	
КонецФункции

// Функция возвращает номер последнего показанного шага.
// Используется для того, чтобы открыть тот же шаг при повторном запуске.
//
// Возвращаемое значение:
//    Число - Номер шага.
Функция НомерШагаПомощника() Экспорт
	
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		ИмяКлючаНастроек(),
		ИмяКлючаНомерШагаПомощника());
	
КонецФункции

// Функция возвращает номер шага на котором нужно открыть помощник.
// Функцию следует использовать если номер шага получается для запуска из интерфейса.
//
// Возвращаемое значение:
//    Неопределено, Число - Номер шага помощника
//
Функция НомерШагаПомощникаДляЗапускаИзИнтерфейса() Экспорт
	
	// Если сервис регистрации не используется, то ничего выполнять не нужно.
	Если НЕ ОбщегоНазначенияБп.ИспользуетсяСервисРегистрации() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НавигацияПомощника = СтруктураНавигацииПомощника();
	Если НавигацияПомощника = Неопределено Тогда
		// Восстановим навигацию помощника, если пользователь очистил настройки.
		ПодготовитьСтруктуруНавигацииПомощника(, РегистрацияОрганизацииКлиентСервер.ИмяПомощникаРегистрации());
	КонецЕсли;
	
	// Получим номер шага помощника
	НомерШагаПомощника = НомерШагаПомощника();
	Если Не ЗначениеЗаполнено(НомерШагаПомощника) Тогда
		НомерШагаПомощника = 1;
	КонецЕсли;
	
	Возврат НомерШагаПомощника
	
КонецФункции

#Область ИменаФорм

Функция ИмяФормыЗаявлениеИП()
	
	Возврат "Обработка.РегистрацияОрганизации.Форма.РегистрацияИП";
	
КонецФункции

Функция ИмяФормыЗаявлениеООО()
	
	Возврат "Обработка.РегистрацияОрганизации.Форма.РегистрацияООО";
	
КонецФункции

#КонецОбласти

#Область ОписаниеШагов

Функция ДобавитьШагФормаБизнеса(НомерШага, НавигацияПараметрФормы = "ФормаБизнеса")
	
	СтруктураШага                = НовыйСтруктураШага();
	СтруктураШага.ИмяПомощника   = РегистрацияОрганизацииКлиентСервер.ИмяПомощникаРегистрации();
	СтруктураШага.НомерШага      = НомерШага + 1;
	СтруктураШага.ИмяФормы       = "Обработка.РегистрацияОрганизации.Форма.ТестИПилиООО";
	СтруктураШага.ТекстНавигации = НСтр("ru='Форма бизнеса'");
	СтруктураШага.ИмяШагаДляЛК   = ИмяШагаФормаБизнесаДляЛичногоКабинета();
	СтруктураШага.СтруктураПараметровФормы.НавигацияПараметрФормы = НавигацияПараметрФормы;
	Возврат СтруктураШага;
	
КонецФункции

Функция ДобавитьШагОКВЭД(НомерШага)
	
	СтруктураШага                = НовыйСтруктураШага();
	СтруктураШага.ИмяПомощника   = РегистрацияОрганизацииКлиентСервер.ИмяПомощникаРегистрации();
	СтруктураШага.НомерШага      = НомерШага + 1;
	СтруктураШага.ИмяФормы       = "Обработка.РегистрацияОрганизации.Форма.ФормаВыбораВидовДеятельности";
	СтруктураШага.ТекстНавигации = НСтр("ru='Вид деятельности'");
	СтруктураШага.ИмяШагаДляЛК   = ИмяШагаОКВЭДДляЛичногоКабинета();
	СтруктураШага.СтруктураПараметровФормы.НавигацияПараметрФормы = "ОКВЭД";
	
	Возврат СтруктураШага;
	
КонецФункции

Функция ДобавитьШагРежимНалогообложения(НомерШага, НавигацияПараметрФормы = "РежимНалогообложения")
	
	СтруктураШага                = НовыйСтруктураШага();
	СтруктураШага.ИмяПомощника   = РегистрацияОрганизацииКлиентСервер.ИмяПомощникаРегистрации();
	СтруктураШага.НомерШага      = НомерШага + 1;
	СтруктураШага.ИмяФормы       = "Обработка.СравнениеРежимовНалогообложения.Форма.Форма";
	СтруктураШага.ТекстНавигации = НСтр("ru='Налоги'");
	СтруктураШага.ИмяШагаДляЛК   = ИмяШагаНалогиДляЛичногоКабинета();
	СтруктураШага.СтруктураПараметровФормы.НавигацияПараметрФормы = НавигацияПараметрФормы;
	СтруктураШага.СтруктураПараметровФормы.Вставить("КлючНазначенияИспользования", НРег("Регистрация"));
	
	Возврат СтруктураШага;
	
КонецФункции

Функция ДобавитьШагЗаявление(НомерШага)
	
	СтруктураШага                    = НовыйСтруктураШага();
	СтруктураШага.ИмяПомощника       = РегистрацияОрганизацииКлиентСервер.ИмяПомощникаРегистрации();
	СтруктураШага.НомерШага          = НомерШага + 1;
	СтруктураШага.ОпределятьИмяФормы = Истина; // см. ИмяФормыШага()
	СтруктураШага.ТекстНавигации     = НСтр("ru='Заявление'");
	СтруктураШага.ИмяШагаДляЛК       = ИмяШагаЗаявлениеДляЛичногоКабинета();
	СтруктураШага.СтруктураПараметровФормы.НавигацияПараметрФормы = "Заявление";
	
	Возврат СтруктураШага;
	
КонецФункции

Функция ДобавитьШагДокументы(НомерШага)
	
	СтруктураШага                    = НовыйСтруктураШага();
	СтруктураШага.ИмяПомощника       = РегистрацияОрганизацииКлиентСервер.ИмяПомощникаРегистрации();
	СтруктураШага.НомерШага          = НомерШага + 1;
	СтруктураШага.ОпределятьИмяФормы = Истина; // см. ИмяФормыШага()
	СтруктураШага.ТекстНавигации     = НСтр("ru='Документы'");
	СтруктураШага.ИмяШагаДляЛК       = ИмяШагаЗаявлениеДляЛичногоКабинета();
	СтруктураШага.СтруктураПараметровФормы.НавигацияПараметрФормы = "Документы";
	
	Возврат СтруктураШага;
	
КонецФункции

Функция ДобавитьШагСписокИзмененийЕГР(НомерШага)
	
	СтруктураШага                = НовыйСтруктураШага();
	СтруктураШага.ИмяПомощника   = РегистрацияОрганизацииКлиентСервер.ИмяПомощникаВнесенияИзменений();
	СтруктураШага.НомерШага      = НомерШага + 1;
	СтруктураШага.ИмяФормы       = "Обработка.РегистрацияОрганизации.Форма.ВнесениеИзмененийЕГР";
	СтруктураШага.ТекстНавигации = НСтр("ru = 'Изменения'");
	СтруктураШага.СтруктураПараметровФормы.НавигацияПараметрФормы = "ВнесениеИзмененийЕГР_СписокИзменений";
	
	Возврат СтруктураШага;
	
КонецФункции

Функция ДобавитьШагЗаявлениеДляИзмененияЕГР(НомерШага)
	
	СтруктураШага                = НовыйСтруктураШага();
	СтруктураШага.ИмяПомощника   = РегистрацияОрганизацииКлиентСервер.ИмяПомощникаВнесенияИзменений();
	СтруктураШага.НомерШага      = НомерШага + 1;
	СтруктураШага.ИмяФормы       = "Обработка.РегистрацияОрганизации.Форма.ВнесениеИзмененийЕГР";
	СтруктураШага.ТекстНавигации = НСтр("ru = 'Заявление'");
	СтруктураШага.СтруктураПараметровФормы.НавигацияПараметрФормы = "ВнесениеИзмененийЕГР_Заявление";
	
	Возврат СтруктураШага;
	
КонецФункции

Функция ДобавитьШагДокументыДляИзмененияЕГР(НомерШага)
	
	СтруктураШага                = НовыйСтруктураШага();
	СтруктураШага.ИмяПомощника   = РегистрацияОрганизацииКлиентСервер.ИмяПомощникаВнесенияИзменений();
	СтруктураШага.НомерШага      = НомерШага + 1;
	СтруктураШага.ИмяФормы       = "Обработка.РегистрацияОрганизации.Форма.ВнесениеИзмененийЕГР";
	СтруктураШага.ЗаголовокФормы = НСтр("ru = 'Внесение изменений в ЕГРЮЛ (ЕГРИП)'");
	СтруктураШага.ТекстНавигации = НСтр("ru = 'Регистрация'");
	СтруктураШага.СтруктураПараметровФормы.НавигацияПараметрФормы = "ВнесениеИзмененийЕГР_Документы";
	
	Возврат СтруктураШага;
	
КонецФункции

Функция НовыйСтруктураШага()
	
	СтруктураШага = Новый Структура;
	СтруктураШага.Вставить("ИмяПомощника", "");
	// Форма
	СтруктураШага.Вставить("ИмяФормы",                 "");
	СтруктураШага.Вставить("ОпределятьИмяФормы",       Ложь);
	СтруктураШага.Вставить("ЗаголовокФормы",           "");
	СтруктураШага.Вставить("СтруктураПараметровФормы", НовыйСтруктураПараметровФормы());
	// Служебные реквизиты
	СтруктураШага.Вставить("НомерШага",      0);
	СтруктураШага.Вставить("ТекстНавигации", "");
	СтруктураШага.Вставить("ИмяШагаДляЛК",   "");
	
	Возврат СтруктураШага;
	
КонецФункции

Функция НовыйСтруктураПараметровФормы()
	
	СтруктураПараметровФормы = Новый Структура;
	СтруктураПараметровФормы.Вставить("НавигацияПараметрФормы", "");
	
	Возврат СтруктураПараметровФормы;
	
КонецФункции

#КонецОбласти

#Область Имена

Функция ИмяКлючаСтруктураНавигации()
	
	Возврат НСтр("ru='СтруктураНавигации'");
	
КонецФункции 

Функция ИмяШага(НомерШага) Экспорт
	
	Возврат "Шаг" + НомерШага;
	
КонецФункции

Функция ИмяВыборВидаДеятельности()
	
	Возврат ВРег("OKVED");
	
КонецФункции

Функция ИмяВыборСистемыНалогообложения()
	
	Возврат ВРег("TaxSystem");
	
КонецФункции

Функция ИмяТестИПИлиООО()
	
	Возврат ВРег("businessform");
	
КонецФункции

Функция ИмяНачалоРаботы()
	
	Возврат ВРег("start");
	
КонецФункции

Функция ИмяИзменениеЕГР()
	
	Возврат ВРег("register_changes");
	
КонецФункции

// Функция возвращает массив запуска ключей помощника.
// Используется для определения структуры навигации помощника.
//
Функция МассивКлючейЗапуска() Экспорт

	МассивКлючейЗапуска = Новый Массив;
	МассивКлючейЗапуска.Добавить(ИмяНачалоРаботы());
	МассивКлючейЗапуска.Добавить(ИмяВыборВидаДеятельности());
	МассивКлючейЗапуска.Добавить(ИмяТестИПИлиООО());
	МассивКлючейЗапуска.Добавить(ИмяВыборСистемыНалогообложения());
	МассивКлючейЗапуска.Добавить(ИмяИзменениеЕГР());
	Возврат МассивКлючейЗапуска;

КонецФункции

#КонецОбласти

#Область ЭлементыУправлениеНавигации

Процедура ЗаполнитьСлужебныеРеквизиты(Форма, СтруктураНавигацииПомощника, Параметры)
	
	// Параметр навигации
	Если Параметры <> Неопределено И Параметры.Свойство("НавигацияПараметрФормы") Тогда
		Форма.НавигацияПараметрФормы = Параметры.НавигацияПараметрФормы;
	КонецЕсли;
	
	// Номер шага
	НомерШага = 0;
	Для Каждого Шаг Из СтруктураНавигацииПомощника Цикл
		СтруктураШага = Шаг.Значение;
		Если СтруктураШага.СтруктураПараметровФормы.НавигацияПараметрФормы = Форма.НавигацияПараметрФормы Тогда
			НомерШага = СтруктураШага.НомерШага;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если НомерШага = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Форма.НавигацияНомерШага = НомерШага;
	
	// Заголовок
	СтруктураШага = СтруктураНавигацииПомощника[ИмяШага(НомерШага)];
	Если Не ПустаяСтрока(СтруктураШага.ЗаголовокФормы) Тогда
		Форма.Заголовок = СтруктураШага.ЗаголовокФормы;
	КонецЕсли;
	
	// Сохранить текущий шаг
	СохранитьНомерШага(НомерШага);
	
	// Передать информацию в личный кабинет
	ОтправитьДанныеРегистрацииВЛичныйКабинет();
	
КонецПроцедуры

Процедура РазместитьКартинки(Форма, СтруктураНавигацииПомощника)
	
	НомерШагаФормы = Форма.НавигацияНомерШага;
	
	КартинкаОтступ = ?(НомерШагаФормы = 1,
		БиблиотекаКартинок.НавигацияОтступТекущийШаг,
		БиблиотекаКартинок.НавигацияОтступВыполненныйШаг);
		
	СтруктураКартинокНавигации = СтруктураКартинокНавигации();
	
	МассивФорматированныхСтрок = Новый Массив;
	МассивФорматированныхСтрок.Добавить(КартинкаОтступ);
	
	Для НомерШага = 1 По СтруктураНавигацииПомощника.Количество() Цикл
		
		ВыводитьЛинию = (НомерШага <> 1);
		
		// Шаги
		Если НомерШага < НомерШагаФормы Тогда
			ИдентификаторШага = "Выполненный";
		ИначеЕсли НомерШага = НомерШагаФормы Тогда
			ИдентификаторШага = "Текущий";
		Иначе
			ИдентификаторШага = "НеВыполненный";
		КонецЕсли;
		ИмяКартинкиШага = СтрШаблон("Шаг%1", ИдентификаторШага);
		
		// Линия
		ЦветЛинии    = ?(НомерШага <= НомерШагаФормы, "Выполненный", "НеВыполненный");
		РазмерЛинии  = ?(НомерШага = НомерШагаФормы ИЛИ НомерШага = НомерШагаФормы + 1, "Текущий", "");
		ИмяЛинии     = СтрШаблон("ЛинияШаг%1%2", ЦветЛинии, РазмерЛинии);
		
		// Ссылка
		ИмяСсылки    = ?(НомерШага < НомерШагаФормы, ИмяШага(НомерШага), "");
		
		Если ВыводитьЛинию Тогда
			МассивФорматированныхСтрок.Добавить(СтруктураКартинокНавигации[ИмяЛинии]);
		КонецЕсли;
		МассивФорматированныхСтрок.Добавить(Новый ФорматированнаяСтрока(СтруктураКартинокНавигации[ИмяКартинкиШага],,,,ИмяСсылки));
		
	КонецЦикла;
	
	Форма.Элементы.НавигацияКартинка.Заголовок = Новый ФорматированнаяСтрока(МассивФорматированныхСтрок);
	
КонецПроцедуры

Процедура РазместитьТексты(Форма, СтруктураНавигацииПомощника)
	
	ТекущийНомерШага = Форма.НавигацияНомерШага;
	
	Для НомерШага = 1 По СтруктураНавигацииПомощника.Количество() Цикл
		
		СтруктураШага = СтруктураНавигацииПомощника[ИмяШага(НомерШага)];
		
		ИмяСсылки   = ?(НомерШага < ТекущийНомерШага, ИмяШага(НомерШага), "");
		ШрифтТекста = ?(НомерШага = ТекущийНомерШага, ШрифтыСтиля.ШрифтТекущийШагРегистрацииОрганизации, Неопределено);
		ЦветТекста  = ?(НомерШага > ТекущийНомерШага,
			ЦветаСтиля.ЦветНедоступногоТекста, ЦветаСтиля.ЦветШрифтаВыполненныйШагРегистрацииОрганизации);
		
		ЭлементФормы = Форма.Элементы[ИмяШага(НомерШага)];
		ЭлементФормы.Заголовок = Новый ФорматированнаяСтрока(
			СтруктураШага.ТекстНавигации, ШрифтТекста, ЦветТекста, , ИмяСсылки);
		
	КонецЦикла;
	
КонецПроцедуры

Функция СтруктураКартинокНавигации()

	СтруктураКартинокНавигации = Новый Структура;
	СтруктураКартинокНавигации.Вставить("ЛинияШагВыполненный",          БиблиотекаКартинок.НавигацияЛинияШагВыполненный);
	СтруктураКартинокНавигации.Вставить("ЛинияШагНеВыполненный",        БиблиотекаКартинок.НавигацияЛинияШагНеВыполненный);
	СтруктураКартинокНавигации.Вставить("ЛинияШагВыполненныйТекущий",   БиблиотекаКартинок.НавигацияЛинияШагВыполненныйТекущий);
	СтруктураКартинокНавигации.Вставить("ЛинияШагНеВыполненныйТекущий", БиблиотекаКартинок.НавигацияЛинияШагНеВыполненныйТекущий);
	СтруктураКартинокНавигации.Вставить("ШагВыполненный",               БиблиотекаКартинок.НавигацияШагВыполненный);
	СтруктураКартинокНавигации.Вставить("ШагТекущий",                   БиблиотекаКартинок.НавигацияШагТекущий);
	СтруктураКартинокНавигации.Вставить("ШагНеВыполненный",             БиблиотекаКартинок.НавигацияШагНеВыполненный);
	Возврат СтруктураКартинокНавигации;

КонецФункции

Процедура УправлениеВидимостью(Форма)
	
	ГруппаНавигация = Форма.Элементы.Найти("ГруппаНавигация");
	Если ГруппаНавигация <> Неопределено Тогда
		ГруппаНавигация.Видимость = Истина;
	КонецЕсли;
	
	КомандаНазад = Форма.Элементы.Найти("КомандаНазад");
	Если Форма.НавигацияНомерШага = 1 И КомандаНазад <> Неопределено Тогда
		КомандаНазад.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ФормированиеДереваОКВЭД

Процедура ЗаполнитьКлассификаторВФормеВыбораОКВЭД(Параметры, АдресХранилища) Экспорт
	
	ТаблицаОКВЭД = Справочники.Организации.КлассификаторОКВЭД2();
	
	КлассификаторДляПоиска = Справочники.Организации.НовыйТаблицаДляПоискаОКВЭД();
	
	НомерТекущейСтроки = 0;
	
	ЗаполнитьДеревоПоТаблице(ТаблицаОКВЭД, НомерТекущейСтроки, Параметры.Классификатор.Строки, 0,
		Параметры.Выбранные, КлассификаторДляПоиска);
	
	РезультатВыполнения = Новый Структура();
	РезультатВыполнения.Вставить("КлассификаторДляПоиска", КлассификаторДляПоиска);
	РезультатВыполнения.Вставить("Классификатор",          Параметры.Классификатор);
	
	ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
	
КонецПроцедуры

Процедура ЗаполнитьДеревоПоТаблице(Таблица,
		НомерТекущейСтроки, ИсходныйУзел, ТекущийУровеньДерева, Выбранные, КлассификаторДляПоиска)
	
	Пока Таблица.Количество() > НомерТекущейСтроки Цикл
		
		СтрокаТаблицы = Таблица[НомерТекущейСтроки];
		
		КоличествоЦифрВКоде = СтрДлина(СтрЗаменить(СтрокаТаблицы.Код, ".", ""));
		
		УровеньУзла = КоличествоЦифрВКоде - 2; // Две цифры это нулевой уровень
		
		Если УровеньУзла > ТекущийУровеньДерева Тогда // Новый уровень вниз
			
			ЗаполнитьДеревоПоТаблице(
				Таблица, НомерТекущейСтроки,
				ИсходныйУзел[ИсходныйУзел.Количество()-1].Строки, ТекущийУровеньДерева + 1,
				Выбранные, КлассификаторДляПоиска);
			
		ИначеЕсли УровеньУзла < ТекущийУровеньДерева Тогда // На уровень вверх
			
			ТекущийУровеньДерева = ТекущийУровеньДерева - 1;
			Возврат;
			
		Иначе
			
			НовыйУзел = ИсходныйУзел.Добавить();
			
			ЗаполнитьЗначенияСвойств(НовыйУзел, СтрокаТаблицы);
			
			НовыйУзел.Выбран = Выбранные.Найти(НовыйУзел.Код, "Код") <> Неопределено;
			
			Если НовыйУзел.ДоступенДляВыбора Тогда
				ЗаполнитьЗначенияСвойств(КлассификаторДляПоиска.Добавить(), СтрокаТаблицы);
			КонецЕсли;
			
			НомерТекущейСтроки = НомерТекущейСтроки + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеДокументовВФоне

Процедура СформироватьДокументыОООВФоне(ПараметрыФормированияДокументов, АдресРезультата = Неопределено) Экспорт
	
	РезультатФормированияДокументов = Новый Структура();
	
	НачатьТранзакцию();
	Попытка
		
		// Организация
		ДанныеОрганизации = ПараметрыФормированияДокументов.ДанныеОрганизации;
		ЗаписатьНовоеЮридическоеЛицо(РезультатФормированияДокументов, ДанныеОрганизации);
		
		// Учетная политика
		ДанныеУчетнойПолитики = ДанныеОрганизации.УчетнаяПолитика;
		ДанныеУчетнойПолитики.Вставить("Организация", РезультатФормированияДокументов.Организация);
		НастройкиУчета.ОчисткаНастроекУчетнойПолитики(РезультатФормированияДокументов.Организация);
		НастройкиУчета.УстановкаПараметровУчетнойПолитикиПоУмолчанию(ДанныеУчетнойПолитики, Истина);
		
		// Руководитель
		ДанныеРуководителя           = ПараметрыФормированияДокументов.ДанныеРуководителя;
		ДанныеОДолжностиРуководителя = ПараметрыФормированияДокументов.ДанныеОДолжностиРуководителя;
		ЗаписатьРуководителя(РезультатФормированияДокументов, ДанныеРуководителя, ДанныеОДолжностиРуководителя);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Организации, ,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Попытка
		//Уставный капитал
		ДанныеУставногоКапитала = ПараметрыФормированияДокументов.ДанныеУставногоКапитала;
		ЗаписатьФормированиеУставногоКапитала(РезультатФормированияДокументов, ДанныеУставногоКапитала);
		
		// Квитанция на оплату госпошлины из веб-сервиса
		АдресКвитанцииНаОплатуГоспошлины = ДанныеСервисаРегистрации.КвитанцияНаОплатуГоспошлины(
				"РегистрацияЮрлица",
				ДанныеРуководителя,
				ДанныеОрганизации.ЮридическийАдресЗначенияПолей,
				СуммаПошлиныРегистрацияЮЛ());
		Если АдресКвитанцииНаОплатуГоспошлины <> Неопределено Тогда
			ПрисоединитьКвитанциюНаОплатуГоспошлиныКОрганизации(
					РезультатФормированияДокументов.Организация, АдресКвитанцииНаОплатуГоспошлины);
		Иначе
			ПометитьНаУдалениеКвитанциюНаОплатуГоспошлины(
					РезультатФормированияДокументов.Организация);
		КонецЕсли;
		
		// Заявление о регистрации индивидуального предпринимателя
		ПараметрыЗаявленияОРегистрацииООО = ПараметрыЗаявленияОРегистрации(
							РезультатФормированияДокументов.Организация,
							ПараметрыФормированияДокументов.СпособРегистрации);
		
		ЗаявлениеОРегистрацииООО = Обработки.РегистрацияОрганизации.НайтиЗаявлениеОРегистрации(
									РезультатФормированияДокументов.Организация, "Р11001");
		
		Отчеты.РегламентированноеУведомлениеФормаР11001.СоздатьЗаполненноеУведомление(
								ПараметрыЗаявленияОРегистрацииООО, ЗаявлениеОРегистрацииООО);
		
		// Заявление о переходе на УСН
		Если ПодаетсяУведомлениеОПереходеНаУСН(ДанныеУчетнойПолитики) Тогда
			
			ЗаписатьДанныеУведомленияОПереходеНаУСН(
				РезультатФормированияДокументов.Организация,
				ДанныеОрганизации.КодНалоговогоОргана,
				ДанныеРуководителя,
				ПараметрыФормированияДокументов.СпособРегистрации);
			
		КонецЕсли;
	
	Исключение
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Организации, ,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	ПоместитьВоВременноеХранилище(РезультатФормированияДокументов, АдресРезультата);
	
КонецПроцедуры

Процедура СформироватьДокументыИПВФоне(ПараметрыФормированияДокументов, АдресРезультата = Неопределено) Экспорт
	
	РезультатФормированияДокументов = Новый Структура();
	
	НачатьТранзакцию();
	Попытка
		
		// Организация
		ДанныеОрганизации = ПараметрыФормированияДокументов.ДанныеОрганизации;
		ЗаписатьНовогоИндивидуальногоПредпринимателя(РезультатФормированияДокументов, ДанныеОрганизации);
		
		// Учетная политика
		ДанныеУчетнойПолитики = ДанныеОрганизации.УчетнаяПолитика;
		ДанныеУчетнойПолитики.Вставить("Организация", РезультатФормированияДокументов.Организация);
		НастройкиУчета.ОчисткаНастроекУчетнойПолитики(РезультатФормированияДокументов.Организация);
		НастройкиУчета.УстановкаПараметровУчетнойПолитикиПоУмолчанию(ДанныеУчетнойПолитики, Истина);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Организации, ,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Попытка
		
		// Квитанция на оплату госпошлины из веб-сервиса
		АдресКвитанцииНаОплатуГоспошлины = ДанныеСервисаРегистрации.КвитанцияНаОплатуГоспошлины(
				"РегистрацияИП",
				ДанныеОрганизации.ИндивидуальныйПредприниматель,
				ДанныеОрганизации.ИндивидуальныйПредприниматель.АдресПропискиЗначенияПолей,
				СуммаПошлиныРегистрацияИП());
		Если АдресКвитанцииНаОплатуГоспошлины <> Неопределено Тогда
			ПрисоединитьКвитанциюНаОплатуГоспошлиныКОрганизации(
					РезультатФормированияДокументов.Организация, АдресКвитанцииНаОплатуГоспошлины);
		Иначе
			ПометитьНаУдалениеКвитанциюНаОплатуГоспошлины(
					РезультатФормированияДокументов.Организация);
		КонецЕсли;
		
		// Заявление о регистрации индивидуального предпринимателя
		ПараметрыЗаявленияОРегистрацииИП = ПараметрыЗаявленияОРегистрации(
							РезультатФормированияДокументов.Организация,
							ПараметрыФормированияДокументов.СпособРегистрации);
		
		ЗаявлениеОРегистрацииИП = Обработки.РегистрацияОрганизации.НайтиЗаявлениеОРегистрации(
									РезультатФормированияДокументов.Организация, "Р21001");
		
		Отчеты.РегламентированноеУведомлениеФормаР21001.СоздатьЗаполненноеУведомление(
															ПараметрыЗаявленияОРегистрацииИП, ЗаявлениеОРегистрацииИП);
		
		// Заявление о переходе на УСН
		Если ПодаетсяУведомлениеОПереходеНаУСН(ДанныеУчетнойПолитики) Тогда
			
			ЗаписатьДанныеУведомленияОПереходеНаУСН(
				РезультатФормированияДокументов.Организация,
				ДанныеОрганизации.ДанныеРегистрацииВНалоговомОргане.КодНалоговогоОргана,
				ДанныеОрганизации.ИндивидуальныйПредприниматель,
				ПараметрыФормированияДокументов.СпособРегистрации);
			
		КонецЕсли;
		
	Исключение
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Организации, ,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	ПоместитьВоВременноеХранилище(РезультатФормированияДокументов, АдресРезультата);
	
КонецПроцедуры

Функция ЗаписатьФизическоеЛицо(ДанныеФизическогоЛица) Экспорт
	
	Если ЗначениеЗаполнено(ДанныеФизическогоЛица.Ссылка) Тогда
		ФизическоеЛицоОбъект = ДанныеФизическогоЛица.Ссылка.ПолучитьОбъект();
	Иначе
		ФизическоеЛицоОбъект = Справочники.ФизическиеЛица.СоздатьЭлемент();
		ФизическоеЛицоОбъект.Заполнить(Неопределено);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ФизическоеЛицоОбъект, ДанныеФизическогоЛица,
		"Фамилия,Имя,Отчество,Пол,ИНН,ДатаРождения,МестоРожденияПредставление");
	
	ФизическоеЛицоОбъект.ФИО = СокрП(ФизическоеЛицоОбъект.Фамилия + " " + ФизическоеЛицоОбъект.Имя + " " + ФизическоеЛицоОбъект.Отчество);
	ФизическоеЛицоОбъект.Наименование = КадровыйУчетКлиентСервер.ПолноеНаименованиеСотрудника(
										ФизическоеЛицоОбъект.Фамилия, ФизическоеЛицоОбъект.Имя, ФизическоеЛицоОбъект.Отчество, "");
	ФизическоеЛицоОбъект.ДополнительныеСвойства.Вставить("ФИОУстановлены");
	
	УправлениеКонтактнойИнформациейБП.ЗаполнитьКонтактнуюИнформациюОбъекта(ФизическоеЛицоОбъект,
			Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица, ДанныеФизическогоЛица.АдресПропискиЗначенияПолей);
	УправлениеКонтактнойИнформациейБП.ЗаполнитьКонтактнуюИнформациюОбъекта(ФизическоеЛицоОбъект,
			Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица, ДанныеФизическогоЛица.ТелефонРабочийЗначенияПолей);
	УправлениеКонтактнойИнформациейБП.ЗаполнитьКонтактнуюИнформациюОбъекта(ФизическоеЛицоОбъект,
			Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица, ДанныеФизическогоЛица.EMailЗначенияПолей);
	
	ФизическоеЛицоОбъект.Записать();
	
	Набор = РегистрыСведений.ФИОФизическихЛиц.СоздатьНаборЗаписей();
	Набор.Отбор.ФизическоеЛицо.Установить(ФизическоеЛицоОбъект.Ссылка);
	Запись = Набор.Добавить();
	Запись.Фамилия  = ФизическоеЛицоОбъект.Фамилия;
	Запись.Имя      = ФизическоеЛицоОбъект.Имя;
	Запись.Отчество = ФизическоеЛицоОбъект.Отчество;
	Запись.ФизическоеЛицо = ФизическоеЛицоОбъект.Ссылка;
	Запись.Период   = ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведений();
	Набор.Записать();
	
	// Паспортные данные
	
	ПаспортРФ = Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ;
	
	ПаспортныеДанные = РегистрыСведений.ДокументыФизическихЛиц.СоздатьНаборЗаписей();
	ПаспортныеДанные.Отбор.Физлицо.Установить(ФизическоеЛицоОбъект.Ссылка);
	ПаспортныеДанные.Отбор.ВидДокумента.Установить(ПаспортРФ);
	
	ЗаписьПаспортныхДанных = ПаспортныеДанные.Добавить();
	ЗаписьПаспортныхДанных.Физлицо      = ФизическоеЛицоОбъект.Ссылка;
	ЗаписьПаспортныхДанных.ВидДокумента = ПаспортРФ;
	ЗаписьПаспортныхДанных.ЯвляетсяДокументомУдостоверяющимЛичность = Истина;
	ЗаполнитьЗначенияСвойств(ЗаписьПаспортныхДанных, ДанныеФизическогоЛица.ПаспортныеДанные);
	ЗаписьПаспортныхДанных.Период = ?(ЗначениеЗаполнено(ДанныеФизическогоЛица.ПаспортныеДанные.ДатаВыдачи),
		ДанныеФизическогоЛица.ПаспортныеДанные.ДатаВыдачи, ТекущаяДатаСеанса());
	ПаспортныеДанные.Записать();
	
	Возврат ФизическоеЛицоОбъект.Ссылка;
	
КонецФункции

Функция НовыеДанныеФизическогоЛица() Экспорт
	
	ДанныеФизическогоЛица = Новый Структура();
	ДанныеФизическогоЛица.Вставить("Ссылка",                     Справочники.ФизическиеЛица.ПустаяСсылка()); // Ссылка на справочник ФизическиеЛица
	ДанныеФизическогоЛица.Вставить("Фамилия",                    "");
	ДанныеФизическогоЛица.Вставить("Имя",                        "");
	ДанныеФизическогоЛица.Вставить("Отчество",                   "");
	ДанныеФизическогоЛица.Вставить("Пол",                        Перечисления.ПолФизическогоЛица.ПустаяСсылка());
	ДанныеФизическогоЛица.Вставить("ИНН",                        "");
	ДанныеФизическогоЛица.Вставить("ДатаРождения",               '00010101');
	ДанныеФизическогоЛица.Вставить("МестоРожденияПредставление", "");
	
	ДанныеФизическогоЛица.Вставить("ПаспортныеДанные", Новый Структура());
	ДанныеФизическогоЛица.ПаспортныеДанные.Вставить("Серия",             "");
	ДанныеФизическогоЛица.ПаспортныеДанные.Вставить("Номер",             "");
	ДанныеФизическогоЛица.ПаспортныеДанные.Вставить("КемВыдан",          "");
	ДанныеФизическогоЛица.ПаспортныеДанные.Вставить("ДатаВыдачи",        '00010101');
	ДанныеФизическогоЛица.ПаспортныеДанные.Вставить("КодПодразделения",  "");
	
	ДанныеФизическогоЛица.Вставить("АдресПропискиЗначенияПолей",  ""); // XML-строка - значение полей для КИ вида Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица
	ДанныеФизическогоЛица.Вставить("ТелефонРабочийЗначенияПолей", ""); // XML-строка - значение полей для КИ вида Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица
	ДанныеФизическогоЛица.Вставить("EMailЗначенияПолей",          ""); // XML-строка - значение полей для КИ вида Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица
	
	Возврат ДанныеФизическогоЛица;
	
КонецФункции

Функция НовыеДанныеДолжности() Экспорт
	
	ДанныеДолжности = Новый Структура();
	ДанныеДолжности.Вставить("Должность",      Справочники.Должности.ПустаяСсылка());
	ДанныеДолжности.Вставить("ДатаНазначения", '00010101');
	ДанныеДолжности.Вставить("СрокПолномочий", 0); // Число лет
	
	Возврат ДанныеДолжности;
	
КонецФункции

Функция НовыеДанныеРегистрацииВНалоговомОргане() Экспорт
	
	ДанныеРегистрации = Новый Структура();
	ДанныеРегистрации.Вставить("КодНалоговогоОргана", "");
	ДанныеРегистрации.Вставить("КодПоОКТМО", "");
	ДанныеРегистрации.Вставить("КодПоОКАТО", "");
	
	Возврат ДанныеРегистрации;
	
КонецФункции

Функция НайтиЗаявлениеОРегистрации(Организация, КодФормы, ДатаРешения = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация) Или ПустаяСтрока(КодФормы) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Организация", Организация);
	Отбор.Вставить("ВидУведомления", Перечисления.ВидыУведомленийОСпецрежимахНалогообложения["Форма" + КодФормы]);
	Уведомления = УведомлениеОСпецрежимахНалогообложения.НайтиУведомления(Отбор);
	
	ЗаявлениеОРегистрации = Новый Структура;
	ЗаявлениеОРегистрации.Вставить("Ссылка", Документы.УведомлениеОСпецрежимахНалогообложения.ПустаяСсылка());
	ЗаявлениеОРегистрации.Вставить("Дата", Дата(1, 1, 1));
	ЗаявлениеОРегистрации.Вставить("ИмяФормы", "");
	
	ИмяФормыПоУмолчанию = Отчеты["РегламентированноеУведомлениеФорма" + КодФормы].ПолучитьФормуПоУмолчанию();
	Если Уведомления.Количество() > 0 Тогда
		Для Каждого НайденноеЗаявление Из Уведомления Цикл
			Если ЗначениеЗаполнено(ДатаРешения) И НайденноеЗаявление.Дата < ДатаРешения Тогда
				Продолжить;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(ЗаявлениеОРегистрации, НайденноеЗаявление);
			ПозицияПоследнейТочки =  СтрНайти(ИмяФормыПоУмолчанию, ".", НаправлениеПоиска.СКонца);
			ИмяФормы = Лев(ИмяФормыПоУмолчанию, ПозицияПоследнейТочки) + НайденноеЗаявление.ИмяФормы;
			ЗаявлениеОРегистрации.Вставить("ИмяФормы", ИмяФормы);
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
	Если ПустаяСтрока(ЗаявлениеОРегистрации.ИмяФормы) Тогда
		ЗаявлениеОРегистрации.Вставить("ИмяФормы", ИмяФормыПоУмолчанию);
	КонецЕсли;
	
	Возврат ЗаявлениеОРегистрации;
	
КонецФункции

Функция НайтиУведомлениеОСпецРежимеНалогообложения(Организация, ВидУведомления, ИмяФормыПоУмолчанию) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УведомлениеОСпецРежимеНалогообложения = Новый Структура;
	УведомлениеОСпецРежимеНалогообложения.Вставить("Ссылка", Документы.УведомлениеОСпецрежимахНалогообложения.ПустаяСсылка());
	УведомлениеОСпецРежимеНалогообложения.Вставить("Дата", Дата(1, 1, 1));
	
	Отбор = Новый Структура;
	Отбор.Вставить("Организация", Организация);
	Отбор.Вставить("ВидУведомления", ВидУведомления);
	
	Уведомления = УведомлениеОСпецрежимахНалогообложения.НайтиУведомления(Отбор);
	Если Уведомления.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(УведомлениеОСпецРежимеНалогообложения, Уведомления[0]);
		ПозицияПоследнейТочки =  СтрНайти(ИмяФормыПоУмолчанию, ".", НаправлениеПоиска.СКонца);
		ИмяФормы = Лев(ИмяФормыПоУмолчанию, ПозицияПоследнейТочки) + Уведомления[0].ИмяФормы;
		УведомлениеОСпецРежимеНалогообложения.Вставить("ИмяФормы", ИмяФормы);
	Иначе
		УведомлениеОСпецРежимеНалогообложения.Вставить("ИмяФормы", ИмяФормыПоУмолчанию);
	КонецЕсли;
	
	Возврат УведомлениеОСпецРежимеНалогообложения;
	
КонецФункции

Функция ПодаетсяУведомлениеОПереходеНаУСН(СтруктураУчетнойПолитики) Экспорт
	
	Если СтруктураУчетнойПолитики <> Неопределено
		И СтруктураУчетнойПолитики.Свойство("СистемаНалогообложения")
		И СтруктураУчетнойПолитики.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли
	
КонецФункции

Процедура ЗаписатьНовоеЮридическоеЛицо(РезультатФормированияДокументов, ДанныеОрганизации)
	
	Если ЗначениеЗаполнено(ДанныеОрганизации.Ссылка) Тогда
		ОрганизацияОбъект = ДанныеОрганизации.Ссылка.ПолучитьОбъект();
	Иначе
		ОрганизацияОбъект = Справочники.Организации.СоздатьЭлемент();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ОрганизацияОбъект, ДанныеОрганизации,
		"Наименование, НаименованиеСокращенное, НаименованиеПолное, ЮридическоеФизическоеЛицо,
		|КодОКВЭД2, НаименованиеОКВЭД2, ДополнительныеКодыОКВЭД2");
	ОрганизацияОбъект.ИНН = "";
	ОрганизацияОбъект.КПП = "";
	ОрганизацияОбъект.Наименование =ОрганизацииФормыКлиентСервер.НаименованиеПоСокращенномуНаименованию(
										ОрганизацияОбъект.НаименованиеСокращенное);
	
	ЗаписатьАдресОрганизации(ОрганизацияОбъект, ДанныеОрганизации.ЮридическийАдресЗначенияПолей);
	
	ОрганизацияОбъект.ВариантНаименованияДляПечатныхФорм = Перечисления.ВариантыНаименованияДляПечатныхФорм.СокращенноеНаименование;
	
	// Очищаем регистрацию в НО. Она будет заполнена позже, после ввода данных об организации
	ОрганизацияОбъект.РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка();
	ОрганизацияОбъект.КодНалоговогоОргана = "";
	
	ОрганизацияОбъект.ДополнительныеСвойства.Вставить("ОрганизацияЗарегистрирована", Ложь);
	ОрганизацияОбъект.Записать();
	
	РезультатФормированияДокументов.Вставить("Организация", ОрганизацияОбъект.Ссылка);
	
КонецПроцедуры

Процедура ЗаписатьНовогоИндивидуальногоПредпринимателя(РезультатФормированияДокументов, ДанныеОрганизации)
	
	ДанныеПредпринимателя = ДанныеОрганизации.ИндивидуальныйПредприниматель;
	
	ИндивидуальныйПредприниматель = ЗаписатьФизическоеЛицо(ДанныеПредпринимателя);
	
	Если ЗначениеЗаполнено(ДанныеОрганизации.Ссылка) Тогда
		ОрганизацияОбъект = ДанныеОрганизации.Ссылка.ПолучитьОбъект();
	Иначе
		ОрганизацияОбъект = Справочники.Организации.СоздатьЭлемент();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ОрганизацияОбъект, ДанныеОрганизации,
		"ЮридическоеФизическоеЛицо, КодОКВЭД2, НаименованиеОКВЭД2, ДополнительныеКодыОКВЭД2");
	
	ОрганизацияОбъект.ИндивидуальныйПредприниматель = ИндивидуальныйПредприниматель;
	ОрганизацияОбъект.ФамилияИП  = ДанныеПредпринимателя.Фамилия;
	ОрганизацияОбъект.ИмяИП      = ДанныеПредпринимателя.Имя;
	ОрганизацияОбъект.ОтчествоИП = ДанныеПредпринимателя.Отчество;
	ОрганизацияОбъект.ИНН        = ДанныеПредпринимателя.ИНН;
	ОрганизацияОбъект.КПП        = "";
	
	
	ОрганизацияОбъект.НаименованиеСокращенное = ОрганизацииФормыКлиентСервер.СокращенноеНаименованиеИндивидульногоПредпринимателя(
								ОрганизацияОбъект.ФамилияИП, ОрганизацияОбъект.ИмяИП, ОрганизацияОбъект.ОтчествоИП);
	ОрганизацияОбъект.НаименованиеПолное = ОрганизацииФормыКлиентСервер.ПолноеНаименованиеИндивидульногоПредпринимателя(
								ОрганизацияОбъект.ФамилияИП, ОрганизацияОбъект.ИмяИП, ОрганизацияОбъект.ОтчествоИП);
	ОрганизацияОбъект.Наименование = ОрганизацииФормыКлиентСервер.НаименованиеПоСокращенномуНаименованию(
										ОрганизацияОбъект.НаименованиеСокращенное);
	
	ОрганизацияОбъект.ВариантНаименованияДляПечатныхФорм = Перечисления.ВариантыНаименованияДляПечатныхФорм.СокращенноеНаименование;
	
	ОрганизацияОбъект.КодНалоговогоОргана = ДанныеОрганизации.ДанныеРегистрацииВНалоговомОргане.КодНалоговогоОргана;
	
	Если ЗначениеЗаполнено(ОрганизацияОбъект.КодНалоговогоОргана) Тогда
		
		СуществующаяРегистрация = Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка();
		Если ЗначениеЗаполнено(ОрганизацияОбъект.Ссылка) Тогда
			СуществующаяРегистрация = Справочники.РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане(
										ОрганизацияОбъект.Ссылка, 
										"",
										ОрганизацияОбъект.КодНалоговогоОргана);
		КонецЕсли;
		Если ЗначениеЗаполнено(СуществующаяРегистрация) Тогда
			ОрганизацияОбъект.РегистрацияВНалоговомОргане = СуществующаяРегистрация;
		Иначе
			ОрганизацияОбъект.РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.ПолучитьСсылку(Новый УникальныйИдентификатор);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаписатьАдресОрганизации(ОрганизацияОбъект, ДанныеПредпринимателя.АдресПропискиЗначенияПолей);
	
	УправлениеКонтактнойИнформациейБП.ЗаполнитьКонтактнуюИнформациюОбъекта(ОрганизацияОбъект,
			Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, ДанныеПредпринимателя.АдресПропискиЗначенияПолей);
	УправлениеКонтактнойИнформациейБП.ЗаполнитьКонтактнуюИнформациюОбъекта(ОрганизацияОбъект,
			Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации, ДанныеПредпринимателя.ТелефонРабочийЗначенияПолей);
	УправлениеКонтактнойИнформациейБП.ЗаполнитьКонтактнуюИнформациюОбъекта(ОрганизацияОбъект,
			Справочники.ВидыКонтактнойИнформации.EmailОрганизации, ДанныеПредпринимателя.EMailЗначенияПолей);
	
	ОрганизацияОбъект.ДополнительныеСвойства.Вставить("ОрганизацияЗарегистрирована", Ложь);
	ОрганизацияОбъект.Записать();
	
	ЗаписатьРегистрациюВНалоговомОргане(ОрганизацияОбъект.Ссылка, ОрганизацияОбъект.КПП, ДанныеОрганизации.ДанныеРегистрацииВНалоговомОргане);
	
	РезультатФормированияДокументов.Вставить("Организация", ОрганизацияОбъект.Ссылка);
	
КонецПроцедуры

Процедура ЗаписатьРегистрациюВНалоговомОргане(ОрганизацияСсылка, КПП, ДанныеРегистрацииВНалоговомОргане, РегистрацияВНалоговомОргане = Неопределено)
	
	Если ЗначениеЗаполнено(ДанныеРегистрацииВНалоговомОргане.КодНалоговогоОргана) Тогда
		
		РеквизитыНалоговогоОргана = ДанныеГосударственныхОрганов.РеквизитыНалоговогоОрганаПоКоду(
			ДанныеРегистрацииВНалоговомОргане.КодНалоговогоОргана);
		
		Если НЕ ЗначениеЗаполнено(РеквизитыНалоговогоОргана.ОписаниеОшибки) Тогда
			ДанныеГосударственныхОрганов.ОбновитьДанныеГосударственногоОргана(РеквизитыНалоговогоОргана);
		КонецЕсли;
		
		Если РегистрацияВНалоговомОргане = Неопределено Тогда
			РегистрацияВНалоговомОргане = ОрганизацияСсылка.РегистрацияВНалоговомОргане;
		КонецЕсли;
		Если ОбщегоНазначения.СсылкаСуществует(РегистрацияВНалоговомОргане) Тогда
			РегистрацияОбъект = РегистрацияВНалоговомОргане.ПолучитьОбъект();
		Иначе
			РегистрацияОбъект = Справочники.РегистрацииВНалоговомОргане.СоздатьЭлемент();
			РегистрацияОбъект.УстановитьСсылкуНового(РегистрацияВНалоговомОргане);
			РегистрацияОбъект.Заполнить(Неопределено);
		КонецЕсли;
		
		РегистрацияОбъект.Владелец         = ОрганизацияСсылка;
		РегистрацияОбъект.Код              = ДанныеРегистрацииВНалоговомОргане.КодНалоговогоОргана;
		РегистрацияОбъект.КодРегиона       = Лев(ДанныеРегистрацииВНалоговомОргане.КодНалоговогоОргана, 2);
		РегистрацияОбъект.Наименование     = РеквизитыНалоговогоОргана.Наименование;
		РегистрацияОбъект.НаименованиеИФНС = РеквизитыНалоговогоОргана.ПолноеНаименование;
		РегистрацияОбъект.КодПоОКТМО       = ДанныеРегистрацииВНалоговомОргане.КодПоОКТМО;
		РегистрацияОбъект.КодПоОКАТО       = ДанныеРегистрацииВНалоговомОргане.КодПоОКАТО;
		РегистрацияОбъект.КПП              = КПП;
		РегистрацияОбъект.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьРуководителя(РезультатФормированияДокументов, ДанныеРуководителя, ДанныеДолжности)
	
	Организация = РезультатФормированияДокументов.Организация;
	
	Руководитель = ЗаписатьФизическоеЛицо(ДанныеРуководителя);
	
	// Запись руководителя в ответственные лица
	ОтветственныеЛица = РегистрыСведений.ОтветственныеЛицаОрганизаций.СоздатьНаборЗаписей();
	ОтветственныеЛица.Отбор.СтруктурнаяЕдиница.Установить(Организация);
	ОтветственныеЛица.Отбор.ОтветственноеЛицо.Установить(Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	
	ОтветственноеЛицо = ОтветственныеЛица.Добавить();
	ОтветственноеЛицо.Период = ?(ЗначениеЗаполнено(ДанныеДолжности.ДатаНазначения), 
									ДанныеДолжности.ДатаНазначения, ТекущаяДатаСеанса());
	ОтветственноеЛицо.СтруктурнаяЕдиница = Организация;
	ОтветственноеЛицо.ФизическоеЛицо     = Руководитель;
	ОтветственноеЛицо.ОтветственноеЛицо  = Перечисления.ОтветственныеЛицаОрганизаций.Руководитель;
	ОтветственноеЛицо.Должность          = ДанныеДолжности.Должность;
	ОтветственноеЛицо.СрокПолномочий     = ДанныеДолжности.СрокПолномочий;
	
	ОтветственныеЛица.Записать();
	
	РезультатФормированияДокументов.Вставить("Руководитель", Руководитель);
	
КонецПроцедуры

Процедура ЗаписатьСменуРуководителя(РезультатФормированияДокументов, ДанныеРуководителя, ДанныеДолжности, ДанныеНовогоРуководителя, ДанныеДолжностиНовогоРуководителя)
	
	ОтветственныеЛица = РегистрыСведений.ОтветственныеЛицаОрганизаций.СоздатьНаборЗаписей();
	ОтветственныеЛица.Отбор.СтруктурнаяЕдиница.Установить(РезультатФормированияДокументов.Организация);
	ОтветственныеЛица.Отбор.ОтветственноеЛицо.Установить(Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	
	// Прежний руководитель
	Руководитель = ЗаписатьФизическоеЛицо(ДанныеРуководителя);
	ОтветственноеЛицо = ОтветственныеЛица.Добавить();
	ОтветственноеЛицо.Период             = ДанныеДолжности.ДатаНазначения;
	ОтветственноеЛицо.СтруктурнаяЕдиница = РезультатФормированияДокументов.Организация;
	ОтветственноеЛицо.ФизическоеЛицо     = Руководитель;
	ОтветственноеЛицо.ОтветственноеЛицо  = Перечисления.ОтветственныеЛицаОрганизаций.Руководитель;
	ОтветственноеЛицо.Должность          = ДанныеДолжности.Должность;
	ОтветственноеЛицо.СрокПолномочий     = ДанныеДолжности.СрокПолномочий;
	РезультатФормированияДокументов.Вставить("Руководитель", Руководитель);
	
	// Новый руководитель
	НовыйРуководитель = ЗаписатьФизическоеЛицо(ДанныеНовогоРуководителя);
	ОтветственноеЛицо = ОтветственныеЛица.Добавить();
	ОтветственноеЛицо.Период             = ДанныеДолжностиНовогоРуководителя.ДатаНазначения;
	ОтветственноеЛицо.СтруктурнаяЕдиница = РезультатФормированияДокументов.Организация;
	ОтветственноеЛицо.ФизическоеЛицо     = НовыйРуководитель;
	ОтветственноеЛицо.ОтветственноеЛицо  = Перечисления.ОтветственныеЛицаОрганизаций.Руководитель;
	ОтветственноеЛицо.Должность          = ДанныеДолжностиНовогоРуководителя.Должность;
	ОтветственноеЛицо.СрокПолномочий     = ДанныеДолжностиНовогоРуководителя.СрокПолномочий;
	РезультатФормированияДокументов.Вставить("НовыйРуководитель", НовыйРуководитель);
	
	ОтветственныеЛица.Записать();
	
КонецПроцедуры

Процедура ЗаписатьФормированиеУставногоКапитала(РезультатФормированияДокументов, ДанныеУставногоКапитала, ДатаРегистрации = Неопределено)
	
	Организация  = РезультатФормированияДокументов.Организация;
	Руководитель = РезультатФормированияДокументов.Руководитель;
	
	Если ЗначениеЗаполнено(ДанныеУставногоКапитала.Ссылка) Тогда
		УставныйКапиталОбъект = ДанныеУставногоКапитала.Ссылка.ПолучитьОбъект();
	Иначе
		УставныйКапиталОбъект = Документы.ФормированиеУставногоКапитала.СоздатьДокумент();
		ЗаполнениеДокументов.Заполнить(УставныйКапиталОбъект);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаРегистрации) Тогда
		УставныйКапиталОбъект.Дата = ДатаРегистрации;
	Иначе
		УставныйКапиталОбъект.Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(УставныйКапиталОбъект, ДанныеУставногоКапитала, "УставныйКапитал, СпособРегистрации");
	УставныйКапиталОбъект.Организация = Организация;
	УставныйКапиталОбъект.СформированПомощникомРегистрации = Истина;
	УставныйКапиталОбъект.Учредители.Очистить();
	Если ДанныеУставногоКапитала.ЕдинственныйУчредительРуководитель Тогда
		НоваяСтрока = УставныйКапиталОбъект.Учредители.Добавить();
		НоваяСтрока.ТипУчредителя = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		НоваяСтрока.Учредитель    = Руководитель;
		НоваяСтрока.СуммаВзноса   = УставныйКапиталОбъект.УставныйКапитал;
	Иначе
		УставныйКапиталОбъект.Учредители.Загрузить(ДанныеУставногоКапитала.Учредители);
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из УставныйКапиталОбъект.Учредители Цикл
		Если СтрокаТаблицы.ТипУчредителя = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			СтрокаТаблицы.Контрагент = СтрокаТаблицы.Учредитель;
		Иначе
			СтрокаТаблицы.Контрагент = КонтрагентСоответствующийФизическомуЛицу(СтрокаТаблицы.Учредитель);
		КонецЕсли;
	КонецЦикла;
	
	УставныйКапиталОбъект.Комментарий =  НСтр("ru='#Сформирован помощником регистрации'");
	
	Если УставныйКапиталОбъект.Проведен Тогда
		УставныйКапиталОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Иначе
		УставныйКапиталОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
	РезультатФормированияДокументов.Вставить("УставныйКапитал", УставныйКапиталОбъект.Ссылка);
	
КонецПроцедуры

Процедура ЗаписатьИзменениеУставногоКапитала(РезультатФормированияДокументов, ДанныеУставногоКапитала)
	
	Организация  = РезультатФормированияДокументов.Организация;
	
	Если ЗначениеЗаполнено(ДанныеУставногоКапитала.Ссылка) Тогда
		УставныйКапиталОбъект = ДанныеУставногоКапитала.Ссылка.ПолучитьОбъект();
	Иначе
		УставныйКапиталОбъект = Документы.ФормированиеУставногоКапитала.СоздатьДокумент();
		ЗаполнениеДокументов.Заполнить(УставныйКапиталОбъект);
	КонецЕсли;
	
	УставныйКапиталОбъект.Дата = ДанныеУставногоКапитала.Дата;
	
	ЗаполнитьЗначенияСвойств(УставныйКапиталОбъект, ДанныеУставногоКапитала, "УставныйКапитал, УставныйКапиталДоИзменения, СпособРегистрации");
	УставныйКапиталОбъект.Организация = Организация;
	УставныйКапиталОбъект.СформированПомощникомРегистрации = Истина;
	УставныйКапиталОбъект.ИзменениеУставногоКапитала = Истина;
	Если УставныйКапиталОбъект.УставныйКапитал = 0 Тогда
		УставныйКапиталОбъект.УставныйКапитал = УставныйКапиталОбъект.УставныйКапиталДоИзменения;
	КонецЕсли;
	УставныйКапиталОбъект.Учредители.Очистить();
	
	УчредителиДоИзменения = ДанныеУставногоКапитала.УчредителиДоИзменения.Скопировать();
	УчредителиДоИзменения.Колонки.СуммаВзноса.Имя = "СуммаВзносаДоИзменения";
	
	УставныйКапиталОбъект.Учредители.Загрузить(УчредителиДоИзменения);
	
	Если ДанныеУставногоКапитала.Учредители.Количество() > 0 Тогда
		
		Для Каждого Учредитель Из ДанныеУставногоКапитала.Учредители Цикл
			СтрокиУчредителя = УставныйКапиталОбъект.Учредители.НайтиСтроки(Новый Структура("Учредитель", Учредитель.Учредитель));
			Если СтрокиУчредителя.Количество() > 0 Тогда
				СтрокиУчредителя[0].СуммаВзноса = Учредитель.СуммаВзноса;
			Иначе
				СтрокаУчредителя = УставныйКапиталОбъект.Учредители.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаУчредителя, Учредитель);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		// Учредители не изменились, скопируем сумму взноса до изменения в колонку сумма взноса после изменения
		УставныйКапиталОбъект.Учредители.ЗагрузитьКолонку(
			УставныйКапиталОбъект.Учредители.ВыгрузитьКолонку("СуммаВзносаДоИзменения"), "СуммаВзноса");
		
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из УставныйКапиталОбъект.Учредители Цикл
		Если СтрокаТаблицы.ТипУчредителя = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			СтрокаТаблицы.Контрагент = СтрокаТаблицы.Учредитель;
		Иначе
			СтрокаТаблицы.Контрагент = КонтрагентСоответствующийФизическомуЛицу(СтрокаТаблицы.Учредитель);
		КонецЕсли;
	КонецЦикла;
	
	УставныйКапиталОбъект.Комментарий =  НСтр("ru='#Сформирован помощником регистрации'");
	
	Если УставныйКапиталОбъект.Проведен Тогда
		УставныйКапиталОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Иначе
		УставныйКапиталОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
	РезультатФормированияДокументов.Вставить("УставныйКапитал", УставныйКапиталОбъект.Ссылка);
	
КонецПроцедуры

Процедура ЗаписатьДанныеУведомленияОПереходеНаУСН(Организация, КодНалоговогоОргана, Подписант, СпособРегистрации)
	
	ПараметрыУведомленияОПереходеНаУСН = ПараметрыУведомленияОПереходеНаУСН(Организация, КодНалоговогоОргана, Подписант, СпособРегистрации);
	
	ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОПереходеНаУСН;
	ИмяФормыПоУмолчанию = Отчеты.РегламентированноеУведомлениеПереходНаУСН.ПолучитьФормуПоУмолчанию();
	
	ЗаявлениеОПереходеНаУСН = Обработки.РегистрацияОрганизации.НайтиУведомлениеОСпецРежимеНалогообложения(
														Организация, ВидУведомления, ИмяФормыПоУмолчанию);
	
	Отчеты.РегламентированноеУведомлениеПереходНаУСН.СоздатьЗаполненноеУведомление(
				ПараметрыУведомленияОПереходеНаУСН, ЗаявлениеОПереходеНаУСН);
	
КонецПроцедуры

Процедура ЗаписатьАдресОрганизации(ОрганизацияОбъект, АдресЗначенияПолей)
	
	УправлениеКонтактнойИнформациейБП.ЗаполнитьКонтактнуюИнформациюОбъекта(ОрганизацияОбъект,
			Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, АдресЗначенияПолей);
	
	УправлениеКонтактнойИнформациейБП.ЗаполнитьКонтактнуюИнформациюОбъекта(ОрганизацияОбъект,
			Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации, АдресЗначенияПолей);
	
	УправлениеКонтактнойИнформациейБП.ЗаполнитьКонтактнуюИнформациюОбъекта(ОрганизацияОбъект,
			Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации, АдресЗначенияПолей);
	
КонецПроцедуры

Функция КонтрагентСоответствующийФизическомуЛицу(ФизическоеЛицо)

	Запрос = Новый Запрос;
	РеквизитыФизическогоЛица = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ФизическоеЛицо, "ИНН,Наименование");
	Запрос.УстановитьПараметр("ИНН", РеквизитыФизическогоЛица.ИНН);
	Запрос.УстановитьПараметр("ИскатьПоИНН",  ЗначениеЗаполнено(РеквизитыФизическогоЛица.ИНН));
	Запрос.УстановитьПараметр("Наименование", РеквизитыФизическогоЛица.Наименование);
	Запрос.УстановитьПараметр("ФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка КАК Ссылка,
	|	1 КАК Приоритет
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	&ИскатьПоИНН
	|	И Контрагенты.ИНН = &ИНН
	|	И Контрагенты.ЮридическоеФизическоеЛицо = &ФизическоеЛицо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Контрагенты.Ссылка,
	|	2
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Наименование = &Наименование
	|	И Контрагенты.ЮридическоеФизическоеЛицо = &ФизическоеЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
	
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
		
	Иначе
		
		Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
		Контрагент.Заполнить(Неопределено);
		Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		Контрагент.ИНН = РеквизитыФизическогоЛица.ИНН;
		Контрагент.Наименование = РеквизитыФизическогоЛица.Наименование;
		Контрагент.НаименованиеПолное = РеквизитыФизическогоЛица.Наименование;
		Контрагент.Записать();
		Возврат Контрагент.Ссылка;
		
	КонецЕсли;

КонецФункции

Процедура ПрисоединитьКвитанциюНаОплатуГоспошлиныКОрганизации(Организация, АдресКвитанцииНаОплатуГоспошлины)
	
	СуществующаяКвитанция = ПрисоединенныйФайлКвитанцииНаОплатуГоспошлиныОрганизации(Организация);
	Если СуществующаяКвитанция = Неопределено Тогда
		ПараметрыФайла = Новый Структура();
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
		ПараметрыФайла.Вставить("Автор", Пользователи.ТекущийПользователь());
		ПараметрыФайла.Вставить("ВладелецФайлов", Организация);
		ПараметрыФайла.Вставить("ИмяБезРасширения", ИменаФайлов().КвитанцияНаОплатуГоспошлины);
		ПараметрыФайла.Вставить("РасширениеБезТочки", "pdf");
		ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(ПараметрыФайла, АдресКвитанцииНаОплатуГоспошлины);
	Иначе
		
		ПараметрыФайла = Новый Структура();
		ПараметрыФайла.Вставить("АдресФайлаВоВременномХранилище", АдресКвитанцииНаОплатуГоспошлины);
		ПараметрыФайла.Вставить("АдресВременногоХранилищаТекста", "");
		ПрисоединенныеФайлы.ОбновитьПрисоединенныйФайл(СуществующаяКвитанция, ПараметрыФайла);
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СуществующаяКвитанция, "ПометкаУдаления") Тогда
			СуществующаяКвитанцияОбъект = СуществующаяКвитанция.ПолучитьОбъект();
			СуществующаяКвитанцияОбъект.УстановитьПометкуУдаления(Ложь, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПометитьНаУдалениеКвитанциюНаОплатуГоспошлины(Организация)
	
	СуществующаяКвитанция = ПрисоединенныйФайлКвитанцииНаОплатуГоспошлиныОрганизации(Организация);
	Если СуществующаяКвитанция <> Неопределено Тогда
		СуществующаяКвитанцияОбъект = СуществующаяКвитанция.ПолучитьОбъект();
		СуществующаяКвитанцияОбъект.УстановитьПометкуУдаления(Истина, Истина);
	КонецЕсли;
	
КонецПроцедуры

Функция ПрисоединенныйФайлКвитанцииНаОплатуГоспошлиныОрганизации(Организация) Экспорт
	
	Возврат Справочники.Организации.ПрикрепленныйФайлПоИмени(Организация, ИменаФайлов().КвитанцияНаОплатуГоспошлины)
	
КонецФункции

Функция ПараметрыЗаявленияОРегистрации(Организация, СпособРегистрации)
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Организация", Организация);
	ПараметрыЗаполнения.Вставить("СпособРегистрации", СпособРегистрации);
	
	ПараметрыЗаявления = Новый Структура;
	ПараметрыЗаявления.Вставить("Организация", Организация);
	ПараметрыЗаявления.Вставить("ДополнительныеПараметры", ПараметрыЗаполнения);
	
	Возврат ПараметрыЗаявления;
	
КонецФункции

Функция ПараметрыУведомленияОПереходеНаУСН(Организация, КодНалоговогоОргана, Подписант, СпособРегистрации)
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Организация",       Организация);
	ПараметрыЗаполнения.Вставить("СпособРегистрации", СпособРегистрации);
	ПараметрыЗаполнения.Вставить("КОД_НО",            КодНалоговогоОргана);
	Если СпособРегистрации = 2 Тогда
		
		ПараметрыЗаполнения.Вставить("ПризнакПодписанта", "2");
		
	Иначе
		ПараметрыЗаполнения.Вставить("ПризнакПодписанта", "1");
		
		ПредставлениеТелефона = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(
			Подписант.ТелефонРабочийЗначенияПолей,
			Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица);
		ПараметрыЗаполнения.Вставить("НомерТелефонаПодписанта", ПредставлениеТелефона);
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ЮридическоеФизическоеЛицо") =
				Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			ПараметрыЗаполнения.Вставить("ФамилияПодписанта",       Подписант.Фамилия);
			ПараметрыЗаполнения.Вставить("ИмяПодписанта",           Подписант.Имя);
			ПараметрыЗаполнения.Вставить("ОтчествоПодписанта",      Подписант.Отчество);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыЗаявления = Новый Структура;
	ПараметрыЗаявления.Вставить("Организация", Организация);
	ПараметрыЗаявления.Вставить("ДополнительныеПараметры", ПараметрыЗаполнения);
	
	Возврат ПараметрыЗаявления;
	
КонецФункции

Процедура ЗаписатьИсториюНаименованийОрганизации(ОрганизацияОбъект, ДанныеОрганизации)
	
	ОрганизацияОбъект.ИсторияНаименований.Очистить();
	
	// Запишем прежнее наименование.
	НоваяСтрока = ОрганизацияОбъект.ИсторияНаименований.Добавить();
	НоваяСтрока.НаименованиеСокращенное = ОрганизацияОбъект.НаименованиеСокращенное;
	НоваяСтрока.НаименованиеПолное      = ОрганизацияОбъект.НаименованиеПолное;
	
	// Запишем новое наименование.
	НоваяСтрока = ОрганизацияОбъект.ИсторияНаименований.Добавить();
	НоваяСтрока.Период                  = ДанныеОрганизации.ДатаРешения;
	НоваяСтрока.НаименованиеСокращенное = ДанныеОрганизации.НаименованиеСокращенноеНовое;
	НоваяСтрока.НаименованиеПолное      = ДанныеОрганизации.НаименованиеПолноеНовое;
	
КонецПроцедуры

Процедура ЗаписатьИсториюАдресовОрганизации(ОрганизацияОбъект, АдресИсходный, АдресНовый, ДатаРешения)

	ОрганизацияОбъект.ИсторияКонтактнойИнформации.Очистить();
	ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
	
	СтрокаИстории               = ОрганизацияОбъект.ИсторияКонтактнойИнформации.Добавить();
	СтрокаИстории.Вид           = ВидКонтактнойИнформации;
	СтрокаИстории.ЗначенияПолей = АдресИсходный;
	СтрокаИстории.Представление = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(
		АдресИсходный, ВидКонтактнойИнформации);
	
	СтрокаИстории               = ОрганизацияОбъект.ИсторияКонтактнойИнформации.Добавить();
	СтрокаИстории.Период        = ДатаРешения;
	СтрокаИстории.Вид           = ВидКонтактнойИнформации;
	СтрокаИстории.ЗначенияПолей = АдресНовый;
	СтрокаИстории.Представление = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(
		АдресНовый, ВидКонтактнойИнформации);

КонецПроцедуры

#КонецОбласти

#Область РегистрацияОрганизации

// Заполнение уведомления о постановке ИП на учет в качестве налогоплательщика.
//
Процедура ЗаполнитьУведомлениеОПостановкеНаУчетИП(ПараметрыОтчета, Контейнер) Экспорт
	
	ПараметрыЗаполнения = ПараметрыОтчета.ПараметрыЗаполнения;
	
	СписокПоказателей = Новый Массив;
	СписокПоказателей.Добавить("ФамилияИП");
	СписокПоказателей.Добавить("ИмяИП");
	СписокПоказателей.Добавить("ОтчествоИП");
	СписокПоказателей.Добавить("ИННФЛ");
	СписокПоказателей.Добавить("Пол");
	СписокПоказателей.Добавить("ДатаРожд");
	СписокПоказателей.Добавить("МестоРождИП");
	СписокПоказателей.Добавить("Гражд");
	СписокПоказателей.Добавить("КодУдЛичн");
	СписокПоказателей.Добавить("СерияУдЛичн");
	СписокПоказателей.Добавить("НомерУдЛичн");
	СписокПоказателей.Добавить("ДатаУдЛичн");
	СписокПоказателей.Добавить("ОрганВыданУдЛичн");
	СписокПоказателей.Добавить("КодПодрУдЛичн");
	СписокПоказателей.Добавить("ТелСлуж");
	СписокПоказателей.Добавить("АдресЭлектроннойПочтыОрганизации");
	СписокПоказателей.Добавить("ОКВЭД2");
	СписокПоказателей.Добавить("ДополнительныеКодыОКВЭД2");
	
	СведенияОбОрганизации = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОбОрганизации(ПараметрыОтчета.Организация, ТекущаяДатаСеанса(), СписокПоказателей);
	
	СпособРегистрации = 0;
	ПараметрыЗаполнения.Свойство("СпособРегистрации", СпособРегистрации);
	
	#Область Стр001
	
	ДанныеЛиста = Новый Структура;
	ДанныеЛиста.Вставить("П01010101", СведенияОбОрганизации.ФамилияИП);
	ДанныеЛиста.Вставить("П01010102", СведенияОбОрганизации.ИмяИП);
	ДанныеЛиста.Вставить("П01010103", СведенияОбОрганизации.ОтчествоИП);
	ДанныеЛиста.Вставить("П01020000", СведенияОбОрганизации.ИННФЛ);
	ДанныеЛиста.Вставить("П01030000", СведенияОбОрганизации.Пол);
	ДанныеЛиста.Вставить("П01040100", Формат(СведенияОбОрганизации.ДатаРожд, "Л=ru; ДФ=dd.MM.yyyy"));
	ДанныеЛиста.Вставить("П01040200", СведенияОбОрганизации.МестоРождИП);
	Если СведенияОбОрганизации.Гражд = "643" Тогда
		// Гражданин РФ
		ДанныеЛиста.Вставить("П01050000", 1);
		ДанныеЛиста.Вставить("П01050100", "");
	ИначеЕсли ЗначениеЗаполнено(СведенияОбОрганизации.Гражд) Тогда
		// Иностранец
		ДанныеЛиста.Вставить("П01010201", СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(СведенияОбОрганизации.ФамилияИП));
		ДанныеЛиста.Вставить("П01010202", СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(СведенияОбОрганизации.ИмяИП));
		ДанныеЛиста.Вставить("П01010203", СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(СведенияОбОрганизации.ОтчествоИП));
		ДанныеЛиста.Вставить("П01050000", 2);
		ДанныеЛиста.Вставить("П01050100", СведенияОбОрганизации.Гражд);
	Иначе 
		//Лицо без гражданства
		ДанныеЛиста.Вставить("П01010201", СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(СведенияОбОрганизации.ФамилияИП));
		ДанныеЛиста.Вставить("П01010202", СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(СведенияОбОрганизации.ИмяИП));
		ДанныеЛиста.Вставить("П01010203", СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(СведенияОбОрганизации.ОтчествоИП));
		ДанныеЛиста.Вставить("П01050000", 3);
		ДанныеЛиста.Вставить("П01050100", "");
	КонецЕсли;
	
	Контейнер.Вставить("Лист001", ДанныеЛиста);
	
	#КонецОбласти
	
	#Область Стр002
	
	ДанныеЛиста = Новый Структура;
	// Адрес
	АдресСтруктурой = УправлениеКонтактнойИнформациейБП.АдресСтруктурой(ПараметрыОтчета.Организация,
		Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, , Ложь);
	
	ДанныеЛиста.Вставить("Индекс",                    АдресСтруктурой.Индекс);
	ДанныеЛиста.Вставить("КодРегиона",                АдресСтруктурой.КодРегиона);
	ДанныеЛиста.Вставить("РайонСокращение",           АдресСтруктурой.РайонСокращение);
	ДанныеЛиста.Вставить("Район",                     АдресСтруктурой.Район);
	ДанныеЛиста.Вставить("ГородСокращение",           АдресСтруктурой.ГородСокращение);
	ДанныеЛиста.Вставить("Город",                     АдресСтруктурой.Город);
	ДанныеЛиста.Вставить("НаселенныйПунктСокращение", АдресСтруктурой.НаселенныйПунктСокращение);
	ДанныеЛиста.Вставить("НаселенныйПункт",           АдресСтруктурой.НаселенныйПункт);
	ДанныеЛиста.Вставить("УлицаСокращение",           АдресСтруктурой.УлицаСокращение);
	ДанныеЛиста.Вставить("Улица",                     АдресСтруктурой.Улица);
	ДанныеЛиста.Вставить("ТипДома",                   АдресСтруктурой.ТипДома);
	ДанныеЛиста.Вставить("Дом",                       АдресСтруктурой.Дом);
	ДанныеЛиста.Вставить("ТипКорпуса",                АдресСтруктурой.ТипКорпуса);
	ДанныеЛиста.Вставить("Корпус",                    АдресСтруктурой.Корпус);
	ДанныеЛиста.Вставить("ТипКвартиры",               АдресСтруктурой.ТипКвартиры);
	ДанныеЛиста.Вставить("Квартира",                  АдресСтруктурой.Квартира);
	
	// Удостоверение личности
	ДанныеЛиста.Вставить("П01070100", СведенияОбОрганизации.КодУдЛичн);
	ДанныеЛиста.Вставить("П01070200", СведенияОбОрганизации.СерияУдЛичн + " " + СведенияОбОрганизации.НомерУдЛичн);
	ДанныеЛиста.Вставить("П01070300", Формат(СведенияОбОрганизации.ДатаУдЛичн, "Л=ru; ДФ=dd.MM.yyyy"));
	ДанныеЛиста.Вставить("П01070400", СведенияОбОрганизации.ОрганВыданУдЛичн);
	
	ПозицияРазделителя = СтрНайти(СведенияОбОрганизации.КодПодрУдЛичн, "-");
	
	ДанныеЛиста.Вставить("П01070501", Сред(СведенияОбОрганизации.КодПодрУдЛичн, 1, ПозицияРазделителя-1));
	ДанныеЛиста.Вставить("П01070502", Сред(СведенияОбОрганизации.КодПодрУдЛичн,ПозицияРазделителя + 1));
	
	Контейнер.Вставить("Лист002", ДанныеЛиста);
	
	#КонецОбласти
	
	#Область Стр003
	// Документы иностранцев или лиц без гражданства
	
	Если СведенияОбОрганизации.КодУдЛичн = "12" Тогда
		// Вид на жительство
		КодРазрешения = "1";
	ИначеЕсли СведенияОбОрганизации.КодУдЛичн = "15" Тогда
		// Разрешение на временное проживание
		КодРазрешения = "2";
	Иначе
		КодРазрешения = "";
	КонецЕсли;
	
	Если КодРазрешения <> "" Тогда
		
		ДанныеЛиста = Новый Структура;
		ДанныеЛиста.Вставить("П01080100", КодРазрешения);
		ДанныеЛиста.Вставить("П01080200", СведенияОбОрганизации.СерияУдЛичн + " " + СведенияОбОрганизации.НомерУдЛичн);
		ДанныеЛиста.Вставить("П01080300", Формат(СведенияОбОрганизации.ДатаУдЛичн, "Л=ru; ДФ=dd.MM.yyyy"));
		ДанныеЛиста.Вставить("П01080400", СведенияОбОрганизации.ОрганВыданУдЛичн);
		ДанныеЛиста.Вставить("П01080500", "");
		
		Контейнер.Вставить("Лист003", ДанныеЛиста);
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ЛистА
	
	// Сведения о кодах по Общероссийскому классификатору видов экономической деятельности. 
	
	// Основной код
	Контейнер.Лист004.А01010000 = СведенияОбОрганизации.ОКВЭД2;
	// Дополнительные коды
	ДополнительныеКоды = СтрРазделить(СведенияОбОрганизации.ДополнительныеКодыОКВЭД2, ";", Ложь);
	Если ДополнительныеКоды.Количество() > 0 Тогда
		Контейнер.МногострочнаяЧасть1.Очистить();
		Для каждого ДополнительныйКод Из ДополнительныеКоды Цикл
			НоваяСтрока = Контейнер.МногострочнаяЧасть1.Добавить();
			НоваяСтрока.А01020000 = ДополнительныйКод;
		КонецЦикла;
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ЛистБ
	
	ДанныеЛиста = Новый Структура;
	ДанныеЛиста.Вставить("Б01010000", СпособРегистрации);
	ДанныеЛиста.Вставить("Б01020000", СведенияОбОрганизации.ТелСлуж);
	ДанныеЛиста.Вставить("Б01030000", СведенияОбОрганизации.АдресЭлектроннойПочтыОрганизации);
	ДанныеЛиста.Вставить("Б03010000", "");
	ДанныеЛиста.Вставить("Б03020000", "");
	
	Контейнер.Вставить("Лист005", ДанныеЛиста);
	
	#КонецОбласти

КонецПроцедуры

// Заполнение уведомления о постановке ООО на учет в качестве налогоплательщика.
//
Процедура ЗаполнитьУведомлениеОПостановкеНаУчетООО(ПараметрыОтчета, Контейнер) Экспорт
	
	ДанныеУчредителей = ДанныеУчредителейОрганизации(ПараметрыОтчета.Организация, ТекущаяДатаСеанса(), Истина);
	Если ДанныеУчредителей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ДанныеРуководителя = ДанныеРуководителяОрганизации(ПараметрыОтчета.Организация, ТекущаяДатаСеанса(), Истина);
	Если ДанныеРуководителя = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполнения = ПараметрыОтчета.ПараметрыЗаполнения;
	
	СведенияОбОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыОтчета.Организация,
		"НаименованиеПолное,НаименованиеСокращенное,КодОКВЭД2,ДополнительныеКодыОКВЭД2");
	
	#Область Лист001
	
	// Полное наименование
	Контейнер.Лист001.П01010100 = СведенияОбОрганизации.НаименованиеПолное;
	// Сокращенное наименование
	Контейнер.Лист001.П01010200 = СведенияОбОрганизации.НаименованиеСокращенное;
	// Уставный капитал
	Контейнер.Лист001.П01030100 = ДанныеУчредителей.УставныйКапитал;
	// Адрес
	АдресСтруктурой = УправлениеКонтактнойИнформациейБП.АдресСтруктурой(ПараметрыОтчета.Организация, 
		Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, , Ложь);
	ЗаполнитьЗначенияСвойств(Контейнер.Лист001, АдресСтруктурой);
	// Вид капитала
	Контейнер.Лист001.П01030000 = 1; // Уставный капитал
	
	#КонецОбласти
	
	#Область ЛистА
	
	// Сведения об учредителе - российском юридическом лице.

	ШаблонЛиста = СкопироватьКлючиСтруктуры(Контейнер.ЛистА[0].Значение);
	Контейнер.ЛистА.Очистить();
	УчредителиЮридическиеЛица = ДанныеУчредителей.Учредители.Скопировать(Новый Структура("ЭтоЮридическоеЛицо", Истина));
	Если УчредителиЮридическиеЛица.Количество() > 0 Тогда
		Для каждого СтрокаТаблицы Из УчредителиЮридическиеЛица Цикл
			НовыйЛист = СкопироватьКлючиСтруктуры(ШаблонЛиста);
			// Реквизиты
			НовыйЛист.А01010000 = СтрокаТаблицы.СведенияОЮридическомЛице.ОГРН;
			НовыйЛист.А01020000 = СтрокаТаблицы.СведенияОЮридическомЛице.ИНН;
			НовыйЛист.А01030000 = СтрокаТаблицы.СведенияОЮридическомЛице.ПолноеНаименование;
			// Доля в уставном капитале
			НовыйЛист.А01040100 = СтрокаТаблицы.СуммаВзноса;
			НовыйЛист.А01040201 = СтрокаТаблицы.ДоляУставногоКапитала;
			
			Контейнер.ЛистА.Добавить(НовыйЛист);
		КонецЦикла;
	Иначе
		Контейнер.ЛистА.Добавить(ШаблонЛиста);
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ЛистБ
		
	// Сведения об учредителе - иностранном юридическом лице. 
	// Не заполняется.

	#КонецОбласти
	
	#Область ЛистВ
	
	// Сведения об учредителе - физическом лице.

	ШаблонЛиста = СкопироватьКлючиСтруктуры(Контейнер.ЛистВ[0].Значение);
	Контейнер.ЛистВ.Очистить();
	УчредителиФизическиеЛица = ДанныеУчредителей.Учредители.Скопировать(Новый Структура("ЭтоЮридическоеЛицо", Ложь));
	Если УчредителиФизическиеЛица.Количество() > 0 Тогда
		Для каждого СтрокаТаблицы Из УчредителиФизическиеЛица Цикл
			НовыйЛист = СкопироватьКлючиСтруктуры(ШаблонЛиста);
			СведенияОФизическомЛице = СтрокаТаблицы.СведенияОФизическомЛице;
			// ФИО
			НовыйЛист.В01010100 = СведенияОФизическомЛице.Фамилия;
			НовыйЛист.В01010200 = СведенияОФизическомЛице.Имя;
			НовыйЛист.В01010300 = СведенияОФизическомЛице.Отчество;
			// ИНН
			НовыйЛист.В01020000 = СведенияОФизическомЛице.ИНН;
			// Дата и место рождения
			НовыйЛист.В01030100 = Формат(СведенияОФизическомЛице.ДатаРождения, "Л=ru; ДФ=dd.MM.yyyy");
			НовыйЛист.В01030200 = СведенияОФизическомЛице.МестоРожденияПредставление;
			// Паспортные данные
			НовыйЛист.В01050100 = СведенияОФизическомЛице.ДокументКодМВД;
			НовыйЛист.В01050200 = "" + СведенияОФизическомЛице.ДокументСерия + " " + СведенияОФизическомЛице.ДокументНомер;
			НовыйЛист.В01050300 = Формат(СведенияОФизическомЛице.ДокументДатаВыдачи, "Л=ru; ДФ=dd.MM.yyyy");
			НовыйЛист.В01050400 = СведенияОФизическомЛице.ДокументКемВыдан;
			ЧастиКодаПодразделения = СтрРазделить("" + СведенияОФизическомЛице.ДокументКодПодразделения, "-", Ложь);
			Если ЧастиКодаПодразделения.Количество() = 2 Тогда
				НовыйЛист.В01050501 = ЧастиКодаПодразделения[0];
				НовыйЛист.В01050502 = ЧастиКодаПодразделения[1];
			КонецЕсли;
			// Доля в уставном капитале
			НовыйЛист.В01070100 = СтрокаТаблицы.СуммаВзноса;
			НовыйЛист.В01070201 = СтрокаТаблицы.ДоляУставногоКапитала;
			// Адрес
			ЗаполнитьЗначенияСвойств(НовыйЛист, СведенияОФизическомЛице.АдресСтруктурой);
			
			Контейнер.ЛистВ.Добавить(НовыйЛист);
		КонецЦикла;
	Иначе
		Контейнер.ЛистВ.Добавить(ШаблонЛиста);
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ЛистГ
		
	// Сведения об учредителе - Российской Федерации, субъекте Российской Федерации, муниципальном образовании. 
	// Не заполняется.

	#КонецОбласти
	
	#Область ЛистД
		
	// Сведения о паевом инвестиционном фонде, в состав имущества которого включается доля в уставном капитале 
	// создаваемого юридического лица. 
	// Не заполняется.

	#КонецОбласти
	
	#Область ЛистЕ
		
	// Сведения о физическом лице, имеющем право без доверенности действовать от имени юридического лица. 
	
	ШаблонЛиста = СкопироватьКлючиСтруктуры(Контейнер.ЛистЕ[0].Значение);
	Контейнер.ЛистЕ.Очистить();
	
	НовыйЛист = СкопироватьКлючиСтруктуры(ШаблонЛиста);
	СведенияОФизическомЛице = ДанныеРуководителя.СведенияОФизическомЛице;
	// ФИО
	НовыйЛист.Е01010000 = СведенияОФизическомЛице.Фамилия;
	НовыйЛист.Е01020000 = СведенияОФизическомЛице.Имя;
	НовыйЛист.Е01030000 = СведенияОФизическомЛице.Отчество;
	// ИНН
	НовыйЛист.Е02000000 = СведенияОФизическомЛице.ИНН;
	// Дата и место рождения
	НовыйЛист.Е03010000 = Формат(СведенияОФизическомЛице.ДатаРождения, "Л=ru; ДФ=dd.MM.yyyy");
	НовыйЛист.Е03020000 = СведенияОФизическомЛице.МестоРожденияПредставление;
	// Должность
	НовыйЛист.Е04000000 = ДанныеРуководителя.ДолжностьПредставление;
	// Паспортные данные
	НовыйЛист.Е05010000 = СведенияОФизическомЛице.ДокументКодМВД;
	НовыйЛист.Е05020000 = "" + СведенияОФизическомЛице.ДокументСерия + " " + СведенияОФизическомЛице.ДокументНомер;
	НовыйЛист.Е05030000 = Формат(СведенияОФизическомЛице.ДокументДатаВыдачи, "Л=ru; ДФ=dd.MM.yyyy");
	НовыйЛист.Е05040000 = СведенияОФизическомЛице.ДокументКемВыдан;
	ЧастиКодаПодразделения = СтрРазделить("" + СведенияОФизическомЛице.ДокументКодПодразделения, "-", Ложь);
	Если ЧастиКодаПодразделения.Количество() = 2 Тогда
		НовыйЛист.Е05050100 = ЧастиКодаПодразделения[0];
		НовыйЛист.Е05050200 = ЧастиКодаПодразделения[1];
	КонецЕсли;
	// Адрес
	ЗаполнитьЗначенияСвойств(НовыйЛист, СведенияОФизическомЛице.АдресСтруктурой);
	// Телефон
	НовыйЛист.Е07000000 = СведенияОФизическомЛице.Телефон;
	
	Контейнер.ЛистЕ.Добавить(НовыйЛист);

	#КонецОбласти
	
	#Область ЛистЖ
		
	// Сведения об управляющей организации. 
	// Не заполняется.

	#КонецОбласти
	
	#Область ЛистЗ
		
	// Сведения об управляющем. 
	// Не заполняется.

	#КонецОбласти
	
	#Область ЛистИ
		
	// Сведения о кодах по Общероссийскому классификатору видов экономической деятельности. 
	
	// Основной код
	Контейнер.ЛистИ.А01010000 = СведенияОбОрганизации.КодОКВЭД2;
	// Дополнительные коды
	ДополнительныеКоды = СтрРазделить(СведенияОбОрганизации.ДополнительныеКодыОКВЭД2, ";", Ложь);
	Если ДополнительныеКоды.Количество() > 0 Тогда
		Контейнер.МногострочнаяЧасть1.Очистить();
		Для каждого ДополнительныйКод Из ДополнительныеКоды Цикл
			НоваяСтрока = Контейнер.МногострочнаяЧасть1.Добавить();
			НоваяСтрока.А01020000 = ДополнительныйКод;
		КонецЦикла;
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ЛистК
		
	// Сведения о держателе реестра акционеров акционерного общества - регистраторе.
	// Не заполняется.

	#КонецОбласти
	
	#Область ЛистЛ
		
	// Сведения о крестьянском (фермерском) хозяйстве, на базе которого создается производственный кооператив
	// или хозяйственное товарищество.
	// Не заполняется.

	#КонецОбласти
	
	#Область ЛистМ
		
	// Сведения о согласовании создания юридического лица с иностранными инвестициями 
	// на территории закрытого административно-территориального образования (ЗАТО).
	// Не заполняется.

	#КонецОбласти
	
	#Область ЛистН
	
	// Сведения о заявителе.

	ШаблонЛиста = СкопироватьКлючиСтруктуры(Контейнер.ЛистН[0].Значение);
	Контейнер.ЛистН.Очистить();
	Для каждого СтрокаТаблицы Из ДанныеУчредителей.Учредители Цикл
		НовыйЛист = СкопироватьКлючиСтруктуры(ШаблонЛиста);
		// Вид заявителя
		НовыйЛист.Н01000000 = ?(СтрокаТаблицы.ЭтоЮридическоеЛицо, 2, 1);
		// Реквизиты юридического лица
		Если СтрокаТаблицы.ЭтоЮридическоеЛицо Тогда
			НовыйЛист.Н02010000 = СтрокаТаблицы.СведенияОЮридическомЛице.ОГРН;
			НовыйЛист.Н02020000 = СтрокаТаблицы.СведенияОЮридическомЛице.ИНН;
			НовыйЛист.Н02030000 = СтрокаТаблицы.СведенияОЮридическомЛице.ПолноеНаименование;
		КонецЕсли;
		// Заявитель
		СведенияОЗаявителе = ?(СтрокаТаблицы.ЭтоЮридическоеЛицо, 
			СтрокаТаблицы.СведенияОЮридическомЛице.Представитель, 
			СтрокаТаблицы.СведенияОФизическомЛице);
		// ФИО
		НовыйЛист.Н04010100 = СведенияОЗаявителе.Фамилия;
		НовыйЛист.Н04010200 = СведенияОЗаявителе.Имя;
		НовыйЛист.Н04010300 = СведенияОЗаявителе.Отчество;
		// ИНН
		НовыйЛист.Н04020000 = СведенияОЗаявителе.ИНН;
		// Дата и место рождения
		НовыйЛист.Н04030100 = Формат(СведенияОЗаявителе.ДатаРождения, "Л=ru; ДФ=dd.MM.yyyy");
		НовыйЛист.Н04030200 = СведенияОЗаявителе.МестоРожденияПредставление;
		// Паспортные данные
		НовыйЛист.Н04040100 = СведенияОЗаявителе.ДокументКодМВД;
		НовыйЛист.Н04040200 = "" + СведенияОЗаявителе.ДокументСерия + " " + СведенияОЗаявителе.ДокументНомер;
		НовыйЛист.Н04040300 = Формат(СведенияОЗаявителе.ДокументДатаВыдачи, "Л=ru; ДФ=dd.MM.yyyy");
		НовыйЛист.Н04040400 = СведенияОЗаявителе.ДокументКемВыдан;
		ЧастиКодаПодразделения = СтрРазделить("" + СведенияОЗаявителе.ДокументКодПодразделения, "-", Ложь);
		Если ЧастиКодаПодразделения.Количество() = 2 Тогда
			НовыйЛист.Н04040501 = ЧастиКодаПодразделения[0];
			НовыйЛист.Н04040502 = ЧастиКодаПодразделения[1];
		КонецЕсли;
		// Адрес
		ЗаполнитьЗначенияСвойств(НовыйЛист, СведенияОЗаявителе.АдресСтруктурой);
		// Телефон
		НовыйЛист.Н04060100 = СведенияОЗаявителе.Телефон;
		// Получение документов
		НовыйЛист.Н05000000 = ДанныеУчредителей.СпособРегистрации;
		
		Контейнер.ЛистН.Добавить(НовыйЛист);
	КонецЦикла;
	
	#КонецОбласти
	
КонецПроцедуры

// Возвращает табличный документ с инструкцией по регистрации ИП.
//
// Параметры:
//  СпособРегистрации - Число - Значения: "1" - лично, "2" - через преставителя, "3" - по почте
//  ВыборСпецрежимаНалогообложения - Структура - Ключи:
//                                    *УСН    - Булево - Выбран усн
//                                    *Патент - Булево - Выбран патент
//  ДанныеРегистрирующегоОргана - Структура - Ключи:
//                                *Наименование - Строка
//                                *Адрес - Строка
//                                *Телефон - Строка
// Возвращаемое значение:
//  Результат - Табличный документ
//
Функция ИнструкцияРегистрацияИП(СпособРегистрации, ВыборСпецрежимаНалогообложения, ДанныеРегистрирующегоОргана) Экспорт
	
	Результат = Новый ТабличныйДокумент;
	
	ШаблонИнструкции = Обработки.РегистрацияОрганизации.ПолучитьМакет("ИнструкцияРегистрацияИП");
	
	Параметры = Новый Структура;
	Параметры.Вставить("ДокументСпецрежимНалогообложения1",           "");
	Параметры.Вставить("ДокументСпецрежимНалогообложения1Примечание", "");
	Параметры.Вставить("ПолучениеДокументовСпецрежим1",               "");
	Параметры.Вставить("ДокументСпецрежимНалогообложения2",           "");
	Параметры.Вставить("ДокументСпецрежимНалогообложения2Примечание", "");
	Параметры.Вставить("ПолучениеДокументовСпецрежим2",               "");
	Параметры.Вставить("НомерШага",                                   "");
	
	НомерСпецрежима = 0;
	
	Если ВыборСпецрежимаНалогообложения.УСН Тогда
		
		НомерСпецрежима = НомерСпецрежима + 1;
		
		ВДвухЭкземплярахТекст = ?(СпособРегистрации = 3, "", "(2 экземпляра)");
		
		Параметры["ДокументСпецрежимНалогообложения" + НомерСпецрежима] = "Уведомление о переходе на УСН" + " " + ВДвухЭкземплярахТекст;
		Параметры["ДокументСпецрежимНалогообложения" + НомерСпецрежима + "Примечание"] = "Дата уведомления – дата подачи документа в ИФНС";
		
		Параметры["ПолучениеДокументовСпецрежим" + НомерСпецрежима] = "Получить один экземпляр уведомления о применении УСН с датой,
												 |печатью и подписью сотрудника налоговой";
		
	КонецЕсли;
	
	Если ВыборСпецрежимаНалогообложения.Патент Тогда
		
		НомерСпецрежима = НомерСпецрежима + 1;
		
		Параметры["ДокументСпецрежимНалогообложения" + НомерСпецрежима]           = "Заявление на получение патента";
		Параметры["ДокументСпецрежимНалогообложения" + НомерСпецрежима + "Примечание"] = "Дата заявления – дата подачи документа в ИФНС";
		
	КонецЕсли;
	
	СпецРежим1 = (НомерСпецрежима > 0);
	СпецРежим2 = (НомерСпецрежима > 1);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Параметры, ДанныеРегистрирующегоОргана);
	
	Область = ШаблонИнструкции.ПолучитьОбласть("Заголовок");
	
	Если СпособРегистрации = 1 Тогда
		Область.Параметры.Заголовок = "Инструкция по регистрации ИП";
	ИначеЕсли СпособРегистрации = 2 Тогда
		Область.Параметры.Заголовок = "Инструкция регистрации ИП через представителя";
	ИначеЕсли СпособРегистрации = 3 Тогда
		Область.Параметры.Заголовок = "Инструкция регистрации ИП по почте";
	КонецЕсли;
	
	Область.НижнийКолонтитул.Выводить              = Истина;
	Область.НижнийКолонтитул.ТекстСлева            = ОбщегоНазначенияБП.ДомашняяСтраницаСервиса();
	Область.НижнийКолонтитул.ТекстВЦентре          = ИмяПрограммы();
	Область.НижнийКолонтитул.НачальнаяСтраница     = 1;
	Область.НижнийКолонтитул.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	
	Результат.Вывести(Область);
	
	НомерШага = 0;
	
	ПараметрыИнструкции = НовыеПараметрыИнструкцииРегистрации();
	ПараметрыИнструкции.СпособРегистрации  = СпособРегистрации;
	ПараметрыИнструкции.ЕстьАдресИнспекции = ЗначениеЗаполнено(Параметры.НаименованиеФНС);
	ПараметрыИнструкции.СпецРежим1         = СпецРежим1;
	ПараметрыИнструкции.СпецРежим2         = СпецРежим2;
	
	Если СпособРегистрации <> 1 Тогда
		
		Область = ПолучитьОбластьИнструкцииРегистрация("ЗаверениеКопийУНотариуса", ШаблонИнструкции, ПараметрыИнструкции);
		Параметры.Вставить("НомерШага", УвеличитьЗначениеНаЕдиницу(НомерШага));
		Область.Параметры.Заполнить(Параметры);
		
		Результат.Вывести(Область);
		
	КонецЕсли;
	
	Область = ПолучитьОбластьИнструкцииРегистрация("ПодготовкаДокументов", ШаблонИнструкции, ПараметрыИнструкции);
	Параметры.Вставить("НомерШага", УвеличитьЗначениеНаЕдиницу(НомерШага));
	Область.Параметры.Заполнить(Параметры);
	Результат.Вывести(Область);
	
	Область = ПолучитьОбластьИнструкцииРегистрация("ПодачаДокументов", ШаблонИнструкции, ПараметрыИнструкции);
	Параметры.Вставить("НомерШага", УвеличитьЗначениеНаЕдиницу(НомерШага));
	Область.Параметры.Заполнить(Параметры);
	Результат.Вывести(Область);
	
	Если СпособРегистрации <> 3 Тогда
		Результат.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	Область = ПолучитьОбластьИнструкцииРегистрация("ПолучениеДокументов", ШаблонИнструкции, ПараметрыИнструкции);
	Параметры.Вставить("НомерШага", УвеличитьЗначениеНаЕдиницу(НомерШага));
	Область.Параметры.Заполнить(Параметры);
	Результат.Вывести(Область);
	
	Возврат Результат;
	
КонецФункции

Функция ИнструкцияРегистрацииООО(КоличествоУчредителей, ОдинУчредительЮридическоеЛицо, СпособРегистрации, ВыборСпецрежимаНалогообложения, ДанныеРегистрирующегоОргана, УникальныйИдентификатор) Экспорт
	
	ОдинУчредитель = КоличествоУчредителей = 1;
	ИмяМакетаИнструкция = ?(ОдинУчредитель, "ИнструкцияРегистрацииОООДляОдногоУчредителя",
		"ИнструкцияРегистрацииОООДляНесколькихУчредителей");
	ШаблонИнструкции = Обработки.РегистрацияОрганизации.ПолучитьМакет(ИмяМакетаИнструкция);
	
	Результат = Новый ТабличныйДокумент;
	Результат.ПолеСверху = 5;
	Результат.ПолеСлева  = 10;
	Результат.ПолеСправа = 10;
	
	ОбластьЗаголовка = ШаблонИнструкции.ПолучитьОбласть("Заголовок");
	Если СпособРегистрации = 1 Тогда
		ОбластьЗаголовка.Параметры.Заголовок = "Инструкция по регистрации ООО";
	ИначеЕсли СпособРегистрации = 2 Тогда
		ОбластьЗаголовка.Параметры.Заголовок = "Инструкция регистрации ООО через представителя";
	ИначеЕсли СпособРегистрации = 3 Тогда
		ОбластьЗаголовка.Параметры.Заголовок = "Инструкция регистрации ООО по почте";
	КонецЕсли;
	
	ОбластьЗаголовка.НижнийКолонтитул.Выводить              = Истина;
	ОбластьЗаголовка.НижнийКолонтитул.ТекстСлева            = ОбщегоНазначенияБП.ДомашняяСтраницаСервиса();
	ОбластьЗаголовка.НижнийКолонтитул.ТекстВЦентре          = ИмяПрограммы();
	ОбластьЗаголовка.НижнийКолонтитул.НачальнаяСтраница     = 1;
	ОбластьЗаголовка.НижнийКолонтитул.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	
	Результат.Вывести(ОбластьЗаголовка);
	
	НомерШага = 0;
	
	ПараметрыИнструкции = НовыеПараметрыИнструкцииРегистрации();
	ПараметрыИнструкции.СпособРегистрации  = СпособРегистрации;
	ПараметрыИнструкции.ЕстьАдресИнспекции = ЗначениеЗаполнено(ДанныеРегистрирующегоОргана.НаименованиеФНС);
	ПараметрыИнструкции.СпецРежим1         = ВыборСпецрежимаНалогообложения.УСН;
	ПараметрыИнструкции.ОдинУчредительЮридическоеЛицо = ОдинУчредительЮридическоеЛицо;
	
	Если Не ОдинУчредитель Тогда
		
		Область = ПолучитьОбластьИнструкцииРегистрация("ПроведениеСобранияУчредителей", ШаблонИнструкции, ПараметрыИнструкции);
		Параметры = Новый Структура();
		Параметры.Вставить("НомерШага", УвеличитьЗначениеНаЕдиницу(НомерШага));
		Параметры.Вставить("КоличествоЭкземпляров", КоличествоУчредителей + 1);
		Область.Параметры.Заполнить(Параметры);
		
		Результат.Вывести(Область);
		
	КонецЕсли;
	
	Если СпособРегистрации <> 1
		ИЛИ Не ОдинУчредитель Тогда
		
		Область = ПолучитьОбластьИнструкцииРегистрация("ЗаверениеКопийУНотариуса", ШаблонИнструкции, ПараметрыИнструкции);
		Параметры = Новый Структура("НомерШага", УвеличитьЗначениеНаЕдиницу(НомерШага));
		Область.Параметры.Заполнить(Параметры);
		
		Результат.Вывести(Область);
		
	КонецЕсли;
	
	// Выводим область "Подготовка документов".
	
	Область = ПолучитьОбластьИнструкцииРегистрация("ПодготовкаДокументов", ШаблонИнструкции, ПараметрыИнструкции);
	Параметры = Новый Структура();
	Параметры.Вставить("НомерШага", УвеличитьЗначениеНаЕдиницу(НомерШага));
	Если ВыборСпецрежимаНалогообложения.УСН Тогда
		Параметры.Вставить("ДокументСпецрежимНалогообложения",
			НСтр("ru='Уведомление о переходе на УСН (2 экземпляра)'"));
		Параметры.Вставить("ДокументСпецрежимНалогообложенияПримечание", 
			НСтр("ru='Дата уведомления – дата подачи документа в налоговую инспекцию'"));
	КонецЕсли;
	
	Если ОдинУчредитель Тогда
		// Номер пункта определяет количество пунктов в списке документов до пункта с уставом.
		НомерПункта = ?(СпособРегистрации = 3, 2, 3);
	Иначе
		НомерПункта = ?(СпособРегистрации = 2, 4, 3);
	КонецЕсли;
	Параметры.Вставить("НомерПунктаУстава", УвеличитьЗначениеНаЕдиницу(НомерПункта));
	Параметры.Вставить("НомерПунктаПротокол", УвеличитьЗначениеНаЕдиницу(НомерПункта));
	Если ВыборСпецрежимаНалогообложения.УСН Тогда
		Параметры.Вставить("НомерПунктаСпецРежим", УвеличитьЗначениеНаЕдиницу(НомерПункта));
	КонецЕсли;
	Параметры.Вставить("НомерПунктаПисьмо", УвеличитьЗначениеНаЕдиницу(НомерПункта));
	Область.Параметры.Заполнить(Параметры);
	
	Результат.Вывести(Область);
	
	Если НЕ ОдинУчредитель 
		И СпособРегистрации <> 2 Тогда
		Результат.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	// Выводим область "Подача документов".
	Область = ПолучитьОбластьИнструкцииРегистрация("ПодачаДокументов", ШаблонИнструкции, ПараметрыИнструкции);
	Параметры = Новый Структура();
	Параметры.Вставить("НомерШага",       УвеличитьЗначениеНаЕдиницу(НомерШага));
	Параметры.Вставить("НаименованиеФНС", ДанныеРегистрирующегоОргана.НаименованиеФНС);
	Параметры.Вставить("АдресФНС",        ДанныеРегистрирующегоОргана.АдресФНС);
	Параметры.Вставить("ТелефонФНС",      ДанныеРегистрирующегоОргана.ТелефонФНС);
	Область.Параметры.Заполнить(Параметры);
	Результат.Вывести(Область);
	
	Если ОдинУчредитель Тогда
		Результат.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	// Выводим область "Получение документов"
	Область = ПолучитьОбластьИнструкцииРегистрация("ПолучениеДокументов", ШаблонИнструкции, ПараметрыИнструкции);
	Параметры = Новый Структура();
	Параметры.Вставить("НомерШага", УвеличитьЗначениеНаЕдиницу(НомерШага));
	Область.Параметры.Заполнить(Параметры);
	Результат.Вывести(Область);
	
	ИмяФайла = ПолучитьИмяВременногоФайла("pdf");
	Результат.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.PDF);
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
	Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
	УдалитьФайлы(ИмяФайла);
	
	Возврат Адрес;
	
КонецФункции

// Формирует печатную форму устава организации.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация, по которой формируется устав.
//  ЗаявлениеОРегистрацииИзменений - ДокументСсылка.УведомлениеОСпецрежимахНалогообложения - экземпляр отчета формы Р13001.
//                                   Передается в случае, если формируется новая редакция устава.
//
// Возвращаемое значение:
//  Строка - адрес во временном хранилище, которое содержит двоичные данные сформированного документа в формате RTF.
//
Функция УставООО(Организация, ЗаявлениеОРегистрацииИзменений = Неопределено) Экспорт
	
	ДанныеУчредителей = ДанныеУчредителейОрганизации(Организация, ТекущаяДатаСеанса());
	Если ДанныеУчредителей = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Нет данных об учредителях организации.'");
	КонецЕсли;
	
	ДанныеРуководителя = ДанныеРуководителяОрганизации(Организация, ТекущаяДатаСеанса());
	Если ДанныеРуководителя = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Нет данных о руководителе организации.'");
	КонецЕсли;
	
	ЭтоНоваяРедакция = ЗначениеЗаполнено(ЗаявлениеОРегистрацииИзменений);
	Если ЭтоНоваяРедакция Тогда
		ДанныеЗаявления = Отчеты.РегламентированноеУведомлениеФормаР13001.ДанныеУведомления(ЗаявлениеОРегистрацииИзменений);
		Если ДанныеЗаявления = Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'Не заполнено заявление о внесении изменений в учредительные документы.'");
		КонецЕсли;
	КонецЕсли;
	
	КоличествоУчредителей = ДанныеУчредителей.Учредители.Количество();
	
	ПараметрыТекста = Новый Структура();
	
	ПараметрыТекста.Вставить("НомерПротокола", ?(ЭтоНоваяРедакция, "___", "1"));
	ПараметрыТекста.Вставить("ДатаПротокола",  Формат(ДанныеУчредителей.Дата, "Л=ru; ДФ='dd MMMM yyyy ''г.'''"));
	
	Если ЭтоНоваяРедакция
		И (Не ПустаяСтрока(ДанныеЗаявления.НаименованиеСокращенное)
			Или Не ПустаяСтрока(ДанныеЗаявления.НаименованиеПолное)) Тогда
		НаименованиеСокращенное = ДанныеЗаявления.НаименованиеСокращенное;
		НаименованиеПолное      = ДанныеЗаявления.НаименованиеПолное;
	Иначе
		РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, 
			"НаименованиеСокращенное, НаименованиеПолное");
		НаименованиеСокращенное = РеквизитыОрганизации.НаименованиеСокращенное;
		НаименованиеПолное      = РеквизитыОрганизации.НаименованиеПолное;
	КонецЕсли;
	ПараметрыТекста.Вставить("НаименованиеСокращенное", НаименованиеСокращенное);
	ПараметрыТекста.Вставить("НаименованиеПолное", НаименованиеПолное);
	
	НаименованиеПолноеВРодительномПадеже = НаименованиеПолноеВРодительномПадеже(СокрЛ(НаименованиеПолное));
	ПараметрыТекста.Вставить("НаименованиеПолноеВРодительномПадеже", НаименованиеПолноеВРодительномПадеже);
	
	Если ЭтоНоваяРедакция И Не ПустаяСтрока(ДанныеЗаявления.ЮридическийАдрес) Тогда
		ЮридическийАдрес = ДанныеЗаявления.ЮридическийАдрес;
	Иначе
		ЮридическийАдрес = УправлениеКонтактнойИнформациейБП.АдресСтруктурой(Организация,
			Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации).Представление;
	КонецЕсли;
	ПараметрыТекста.Вставить("ЮрАдресОрганизации", ЮридическийАдрес);
	
	Валюта = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	УставныйКапиталСВалютой = ОбщегоНазначенияБПВызовСервера.ФорматСумм(ДанныеУчредителей.УставныйКапитал, Валюта);
	УставныйКапиталПрописью = ЧислоПрописью(ДанныеУчредителей.УставныйКапитал, "Л=ru", Валюта.ПараметрыПрописиНаРусском);
	ПараметрыТекста.Вставить("УставныйКапитал", СтрШаблон("%1 (%2)", УставныйКапиталСВалютой, УставныйКапиталПрописью));
	
	ДолжностьДиректораСтрокой = Строка(ДанныеРуководителя.Должность);
	
	ПараметрыТекста.Вставить("ДолжностьДиректора", Строка(ДолжностьДиректораСтрокой));
	ПараметрыТекста.Вставить("ДолжностьДиректораВРодительномПадеже", 
		СокрЛП(СклонениеПредставленийОбъектов.ПросклонятьПредставление(Строка(ДолжностьДиректораСтрокой), 2)));
	ПараметрыТекста.Вставить("ДолжностьДиректораВДательномПадеже", 
		СокрЛП(СклонениеПредставленийОбъектов.ПросклонятьПредставление(Строка(ДолжностьДиректораСтрокой), 3)));
	ПараметрыТекста.Вставить("ДолжностьДиректораВТворительномПадеже", 
		СокрЛП(СклонениеПредставленийОбъектов.ПросклонятьПредставление(Строка(ДолжностьДиректораСтрокой), 5)));
	
	ПараметрыТекста.Вставить("СрокПолномочийДиректораПрописью", СрокПолномочийПрописью(ДанныеРуководителя.СрокПолномочий));
	
	Если КоличествоУчредителей > 1 Тогда
		ИмяМакета = "УставОбщества";
	Иначе
		ИмяМакета = "УставЕдинственногоУчредителя";
	КонецЕсли;
	Макет = Обработки.РегистрацияОрганизации.ПолучитьМакет(ИмяМакета);
	
	Текст = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Макет.ПолучитьТекст(), ПараметрыТекста);
	
	ДокументРезультат = Новый ФорматированныйДокумент;
	ДокументРезультат.УстановитьHTML(Текст, Новый Структура());
	
	ШрифтТекстаУчредительныхДокументов = Новый Шрифт("Times New Roman", 12);
	
	Для Каждого Параграф Из ДокументРезультат.Элементы Цикл
		Параграф.МеждустрочныйИнтервал = 1.5;
		Для Каждого Элемент Из Параграф.Элементы Цикл
			Если ТипЗнч(Элемент) = Тип("ТекстФорматированногоДокумента") Тогда
				Элемент.Шрифт = ШрифтТекстаУчредительныхДокументов;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("rtf");
	ЭлектронноеВзаимодействиеБП.КонвертироватьВФорматRTF(ДокументРезультат, ИмяФайла);
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
	АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	УдалитьФайлы(ИмяФайла);
	
	Возврат АдресХранилища;
	
КонецФункции

// Формирует печатную форму решения физического лица - единственного учредителя нового ООО.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - создаваемая организация.
//
// Возвращаемое значение:
//  Строка - адрес во временном хранилище, которое содержит двоичные данные сформированного документа в формате RTF.
//
Функция РешениеЕдинственногоУчредителяООО(Организация) Экспорт
	
	ДанныеУчредителей = ДанныеУчредителейОрганизации(Организация, ТекущаяДатаСеанса(), Истина);
	Если ДанныеУчредителей = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Нет данных об учредителях организации.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	Если ДанныеУчредителей.Учредители[0].ЭтоЮридическоеЛицо Тогда
		ТекстСообщения = НСтр("ru='Единственный учредитель должен быть физическим лицом.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	ДанныеРуководителя = ДанныеРуководителяОрганизации(Организация, ТекущаяДатаСеанса(), Истина);
	Если ДанныеРуководителя = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Нет данных о руководителе организации.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ПараметрыТекста = Новый Структура();
	ПараметрыТекста.Вставить("Город", "");
	ПараметрыТекста.Вставить("Дата", "");
	ПараметрыТекста.Вставить("НаименованиеОрганизации", "");
	ПараметрыТекста.Вставить("ФИОПолные", "");
	ПараметрыТекста.Вставить("ДокументПредставление", "");
	ПараметрыТекста.Вставить("АдресПоПропискеПредставление", "");
	ПараметрыТекста.Вставить("УставныйКапитал", "");
	ПараметрыТекста.Вставить("УставныйКапиталПрописью", "");
	ПараметрыТекста.Вставить("ДолжностьДиректора", "");
	ПараметрыТекста.Вставить("ФИОДиректора", "");
	ПараметрыТекста.Вставить("СрокПолномочийДиректора", "");
	ПараметрыТекста.Вставить("АдресОрганизации", "");
	
	ДанныеУчредителя = ДанныеУчредителей.Учредители[0];
	
	НаименованиеПолное = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "НаименованиеПолное");
	ПараметрыТекста.Вставить("НаименованиеПолное", НаименованиеПолное);
	НаименованиеПолноеВРодительномПадеже = НаименованиеПолноеВРодительномПадеже(СокрЛ(НаименованиеПолное));
	ПараметрыТекста.Вставить("НаименованиеПолноеВРодительномПадеже", НаименованиеПолноеВРодительномПадеже);
	
	ПараметрыТекста.Вставить("ДокументПредставление", ТекстСоСтрочнойБуквы(ДанныеУчредителя.СведенияОФизическомЛице.ДокументПредставление)); 
	ПараметрыТекста.Вставить("ФИОПолные", ДанныеУчредителя.СведенияОФизическомЛице.ФИОПолные);
	ПараметрыТекста.Вставить("АдресПоПропискеПредставление", ДанныеУчредителя.СведенияОФизическомЛице.АдресПрописки);
	ПараметрыТекста.Вставить("УставныйКапитал", Формат(ДанныеУчредителей.УставныйКапитал, "ЧДЦ=2; ЧГ=0"));
	Валюта = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	УставныйКапиталПрописью = ЧислоПрописью(ДанныеУчредителей.УставныйКапитал, "Л=ru", Валюта.ПараметрыПрописиНаРусском);
	ПараметрыТекста.Вставить("УставныйКапиталПрописью", НРег(УставныйКапиталПрописью));
	
	ПараметрыТекста.Вставить("ДолжностьДиректора", ТекстСоСтрочнойБуквы(ДанныеРуководителя.ДолжностьПредставление));
	ПараметрыТекста.Вставить("ФИОДиректора",       ДанныеРуководителя.СведенияОФизическомЛице.ФИОПолные);
	ПараметрыТекста.Вставить("ДокументДиректораПредставление", ТекстСоСтрочнойБуквы(ДанныеРуководителя.СведенияОФизическомЛице.ДокументПредставление));
	ПараметрыТекста.Вставить("АдресДиректораПредставление", ДанныеРуководителя.СведенияОФизическомЛице.АдресПрописки);
	
	Адрес = УправлениеКонтактнойИнформациейБП.АдресСтруктурой(Организация, 
		Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	ПараметрыТекста.Вставить("АдресОрганизации", Адрес.Представление);
	
	Если Адрес.Количество() > 0 Тогда
		Если Адрес.Свойство("Город") И ЗначениеЗаполнено(Адрес.Город) Тогда
			СловаАдреса = СтрРазделить(Адрес.Город, " ");
			СокращениеНаселенногоПункта = СловаАдреса[СловаАдреса.ВГраница()];
			СловаАдреса.Удалить(СловаАдреса.ВГраница());
			НаселенныйПункт = СтрСоединить(СловаАдреса, " ");
			ПараметрыТекста.Вставить("Город", Стршаблон("%1. %2", СокращениеНаселенногоПункта, НаселенныйПункт));
		ИначеЕсли Адрес.Свойство("НаселенныйПункт") И ЗначениеЗаполнено(Адрес.НаселенныйПункт) Тогда
			СловаАдреса = СтрРазделить(Адрес.НаселенныйПункт, " ");
			СокращениеНаселенногоПункта = СловаАдреса[СловаАдреса.ВГраница()];
			СловаАдреса.Удалить(СловаАдреса.ВГраница());
			НаселенныйПункт = СтрСоединить(СловаАдреса, " ");
			ПараметрыТекста.Вставить("Город", Стршаблон("%1. %2", СокращениеНаселенногоПункта, НаселенныйПункт));
		ИначеЕсли Адрес.Свойство("Регион") И ЗначениеЗаполнено(Адрес.Регион) Тогда
			СловаАдреса = СтрРазделить(Адрес.Регион, " ");
			СокращениеНаселенногоПункта = СловаАдреса[СловаАдреса.ВГраница()];
			СловаАдреса.Удалить(СловаАдреса.ВГраница());
			НаселенныйПункт = СтрСоединить(СловаАдреса, " ");
			ПараметрыТекста.Вставить("Город", Стршаблон("%1. %2", СокращениеНаселенногоПункта, НаселенныйПункт));
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыТекста.Вставить("Дата", Формат(ТекущаяДата(),"Л=ru; ДФ='dd MMMM yyyy ''г.'''"));
	
	Макет = Обработки.РегистрацияОрганизации.ПолучитьМакет("РешениеЕдинственногоУчредителя");
	Текст = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Макет.ПолучитьТекст(), ПараметрыТекста);
	
	ДокументРезультат = Новый ФорматированныйДокумент;
	ДокументРезультат.УстановитьHTML(Текст, Новый Структура());
	
	Для Каждого Параграф Из ДокументРезультат.Элементы Цикл
		Параграф.Отступ = 10;
		Если Параграф.ГоризонтальноеПоложение = ГоризонтальноеПоложение.ПоШирине И Параграф.Элементы.Количество() > 0 Тогда
			Параграф.Элементы[0].Текст = СтрШаблон("	%1", Параграф.Элементы[0].Текст);
		КонецЕсли;
	КонецЦикла;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("rtf");
	ЭлектронноеВзаимодействиеБП.КонвертироватьВФорматRTF(ДокументРезультат, ИмяФайла);
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
	Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	УдалитьФайлы(ИмяФайла);
	
	Возврат Адрес;
	
КонецФункции

// Формирует печатную форму протокола собрания учредителей организации - единственного учредителя нового ООО.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - создаваемая организация.
//
// Возвращаемое значение:
//  Строка - адрес во временном хранилище, которое содержит двоичные данные сформированного документа в формате RTF.
//
Функция ПротоколСобранияУчредителейЕдинственногоУчредителяООО(Организация) Экспорт
	
	ДанныеУчредителей = ДанныеУчредителейОрганизации(Организация, ТекущаяДатаСеанса(), Истина);
	Если ДанныеУчредителей = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Нет данных об учредителях организации.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	Если НЕ ДанныеУчредителей.Учредители[0].ЭтоЮридическоеЛицо Тогда
		ТекстСообщения = НСтр("ru='Единственный учредитель должен быть юридическим лицом.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	ДанныеРуководителя = ДанныеРуководителяОрганизации(Организация, ТекущаяДатаСеанса(), Истина);
	Если ДанныеРуководителя = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Нет данных о руководителе организации.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ПараметрыТекста = Новый Структура;
	ПараметрыТекста.Вставить("НаименованиеПолное");
	ПараметрыТекста.Вставить("НаименованиеПолноеВРодительномПадеже");
	ПараметрыТекста.Вставить("НаименованиеСокращенное");
	ПараметрыТекста.Вставить("НаименованиеУчредителяПолноеВРодительномПадеже");
	ПараметрыТекста.Вставить("УставныйКапитал");
	ПараметрыТекста.Вставить("УставныйКапиталПрописью");
	ПараметрыТекста.Вставить("НаименованиеОрганизации");
	ПараметрыТекста.Вставить("ДолжностьДиректора");
	ПараметрыТекста.Вставить("ФИОДиректора");
	ПараметрыТекста.Вставить("СрокПолномочийДиректораПрописью");
	ПараметрыТекста.Вставить("АдресДиректораПредставление");
	ПараметрыТекста.Вставить("ДокументДиректораПредставление");
	ПараметрыТекста.Вставить("АдресОрганизации");
	ПараметрыТекста.Вставить("Город");
	ПараметрыТекста.Вставить("Дата");
	
	ДанныеУчредителя = ДанныеУчредителей.Учредители[0];
	
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, 
		"НаименованиеПолное,НаименованиеСокращенное");
	ПараметрыТекста.НаименованиеПолное = РеквизитыОрганизации.НаименованиеПолное;
	ПараметрыТекста.НаименованиеПолноеВРодительномПадеже = 
		НаименованиеПолноеВРодительномПадеже(СокрЛП(РеквизитыОрганизации.НаименованиеПолное));
		
	ПараметрыТекста.НаименованиеУчредителяПолноеВРодительномПадеже =
		НаименованиеПолноеВРодительномПадеже(СокрЛП(ДанныеУчредителя.СведенияОЮридическомЛице.ПолноеНаименование));
	
	ПараметрыТекста.УставныйКапитал = Формат(ДанныеУчредителей.УставныйКапитал, "ЧДЦ=2; ЧГ=0");
	Валюта = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	УставныйКапиталПрописью = ЧислоПрописью(ДанныеУчредителей.УставныйКапитал, "Л=ru", Валюта.ПараметрыПрописиНаРусском);
	ПараметрыТекста.УставныйКапиталПрописью = НРег(УставныйКапиталПрописью);
	
	ПараметрыТекста.ДолжностьДиректора = ТекстСоСтрочнойБуквы(ДанныеРуководителя.ДолжностьПредставление);
	ПараметрыТекста.ФИОДиректора       = ДанныеРуководителя.СведенияОФизическомЛице.ФИОПолные;
	ПараметрыТекста.ДокументДиректораПредставление = 
		ТекстСоСтрочнойБуквы(ДанныеРуководителя.СведенияОФизическомЛице.ДокументПредставление);
	ПараметрыТекста.АдресДиректораПредставление     = ДанныеРуководителя.СведенияОФизическомЛице.АдресПрописки;
	ПараметрыТекста.СрокПолномочийДиректораПрописью = СрокПолномочийПрописью(ДанныеРуководителя.СрокПолномочий);
	
	АдресСтруктурой = УправлениеКонтактнойИнформациейБП.АдресСтруктурой(Организация, 
		Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	ПараметрыТекста.АдресОрганизации = АдресСтруктурой.Представление;
	
	Если АдресСтруктурой.Количество() > 0 Тогда
		СловаАдреса = Новый Массив;
		Если АдресСтруктурой.Свойство("Город") 
			И ЗначениеЗаполнено(АдресСтруктурой.Город) Тогда
			СловаАдреса = СтрРазделить(АдресСтруктурой.Город, " ");
		ИначеЕсли АдресСтруктурой.Свойство("НаселенныйПункт") 
			И ЗначениеЗаполнено(АдресСтруктурой.НаселенныйПункт) Тогда
			СловаАдреса = СтрРазделить(АдресСтруктурой.НаселенныйПункт, " ");
		ИначеЕсли АдресСтруктурой.Свойство("Регион") 
			И ЗначениеЗаполнено(АдресСтруктурой.Регион) Тогда
			СловаАдреса = СтрРазделить(АдресСтруктурой.Регион, " ");
		КонецЕсли;
		Если СловаАдреса.Количество() > 0 Тогда 
			СокращениеНаселенногоПункта = СловаАдреса[СловаАдреса.ВГраница()];
			СловаАдреса.Удалить(СловаАдреса.ВГраница());
			НаселенныйПункт = СтрСоединить(СловаАдреса, " ");
			ПараметрыТекста.Город = СтрШаблон("%1. %2", СокращениеНаселенногоПункта, НаселенныйПункт);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыТекста.Дата = Формат(ТекущаяДата(),"Л=ru; ДФ='dd MMMM yyyy ''г.'''");
	
	Макет = Обработки.РегистрацияОрганизации.ПолучитьМакет("ПротоколСобранияУчредителейЕдинственногоУчредителя");
	Текст = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Макет.ПолучитьТекст(), ПараметрыТекста);
	
	ДокументРезультат = Новый ФорматированныйДокумент;
	ДокументРезультат.УстановитьHTML(Текст, Новый Структура());
	
	Для Каждого Параграф Из ДокументРезультат.Элементы Цикл
		Параграф.Отступ = 10;
		Если Параграф.ГоризонтальноеПоложение = ГоризонтальноеПоложение.ПоШирине И Параграф.Элементы.Количество() > 0 Тогда
			Параграф.Элементы[0].Текст = СтрШаблон("	%1", Параграф.Элементы[0].Текст);
		КонецЕсли;
	КонецЦикла;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("rtf");
	ЭлектронноеВзаимодействиеБП.КонвертироватьВФорматRTF(ДокументРезультат, ИмяФайла);
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
	Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	УдалитьФайлы(ИмяФайла);
	
	Возврат Адрес;
	
КонецФункции

Функция НовыеПараметрыИнструкцииРегистрации()

	Результат = Новый Структура;
	Результат.Вставить("СпособРегистрации",  1);
	Результат.Вставить("ЕстьАдресИнспекции", Ложь);
	Результат.Вставить("СпецРежим1",         Ложь);
	Результат.Вставить("СпецРежим2",         Ложь);
	Результат.Вставить("ОдинУчредительЮридическоеЛицо", Ложь);
	Возврат Результат;

КонецФункции

Функция ПолучитьОбластьИнструкцииРегистрация(ИмяОбласти, Шаблон, Параметры)
	
	Область = Шаблон.ПолучитьОбласть(ИмяОбласти);
	
	Если Параметры.СпособРегистрации = 1 Тогда
		
		СпособРегистрацииТекст = "Лично";
		
	ИначеЕсли Параметры.СпособРегистрации = 2 Тогда
		
		СпособРегистрацииТекст = "ЧерезПредставителя";
		
	ИначеЕсли Параметры.СпособРегистрации = 3 Тогда
		
		СпособРегистрацииТекст = "ПоПочте";
		
	КонецЕсли;
	
	// Удалим все вложенные области, которые не содержат в наименовании нужного способа регистрации.
	ВсегоОбластей = Область.Области.Количество();
	
	Для НомерОбласти = 1 По ВсегоОбластей Цикл
		
		ВложеннаяОбласть = Область.Области[ВсегоОбластей-НомерОбласти];
		
		Если ИмяОбласти = ВложеннаяОбласть.Имя Тогда
			
			Продолжить;
			
		ИначеЕсли ВложеннаяОбласть.Имя = "ЕстьАдресФНС" Тогда
			
			Если НЕ Параметры.ЕстьАдресИнспекции Тогда
				Область.УдалитьОбласть(ВложеннаяОбласть, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			КонецЕсли;
			
		ИначеЕсли ВложеннаяОбласть.Имя = "НетАдресаФНС" Тогда 
			
			Если Параметры.ЕстьАдресИнспекции Тогда
				Область.УдалитьОбласть(ВложеннаяОбласть, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			КонецЕсли;
			
		ИначеЕсли СтрНайти(ВложеннаяОбласть.Имя, "Спецрежим1") <> 0 Тогда
			
			Если НЕ Параметры.СпецРежим1 
				ИЛИ СтрНайти(ВложеннаяОбласть.Имя, СпособРегистрацииТекст) = 0 Тогда
				Область.УдалитьОбласть(ВложеннаяОбласть, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			КонецЕсли;
			
		ИначеЕсли СтрНайти(ВложеннаяОбласть.Имя, "Спецрежим2") <> 0 Тогда
			
			Если НЕ Параметры.СпецРежим2 
				ИЛИ СтрНайти(ВложеннаяОбласть.Имя, СпособРегистрацииТекст) = 0 Тогда
				Область.УдалитьОбласть(ВложеннаяОбласть, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			КонецЕсли;
			
		ИначеЕсли ВложеннаяОбласть.Имя = "ОдинУчредительЮридическоеЛицо" Тогда
			
			Если НЕ Параметры.ОдинУчредительЮридическоеЛицо Тогда
				Область.УдалитьОбласть(ВложеннаяОбласть, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			КонецЕсли;
			
		ИначеЕсли СтрНайти(ВложеннаяОбласть.Имя, СпособРегистрацииТекст) = 0 Тогда
			
			Область.УдалитьОбласть(ВложеннаяОбласть, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Область;
	
КонецФункции

Функция ПротоколСобранияУчредителейООО(Организация) Экспорт
	
	ДанныеУчредителей = ДанныеУчредителейОрганизации(Организация, ТекущаяДатаСеанса(), Истина);
	Если ДанныеУчредителей = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Нет данных об учредителях организации.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	ДанныеРуководителя = ДанныеРуководителяОрганизации(Организация, ТекущаяДатаСеанса(), Истина);
	Если ДанныеРуководителя = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Нет данных о руководителе организации.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ПараметрыТекста = Новый Структура();
	
	Для Каждого СтрокаТаблицы Из ДанныеУчредителей.Учредители Цикл
		
		ПараметрыТекста.Вставить("СуммаВзноса" + СтрокаТаблицы.НомерСтроки, 
			СтрокаТаблицы.СуммаВзноса);
		ПараметрыТекста.Вставить("СуммаВзносаПрописью" + СтрокаТаблицы.НомерСтроки, 
			НРег(СтрокаТаблицы.СуммаВзносаПрописью));
		ПараметрыТекста.Вставить("ДоляВУставномКапитале" + СтрокаТаблицы.НомерСтроки, 
			СтрокаТаблицы.ДоляУставногоКапиталаСтрокой + "%");
		
		ПараметрыУчредителя = НовыйПараметрыУчредителяДляПротокола();
		ЗаполнитьЗначенияСвойств(ПараметрыУчредителя, СтрокаТаблицы);
		Если СтрокаТаблицы.ЭтоЮридическоеЛицо Тогда
			ЗаполнитьЗначенияСвойств(ПараметрыУчредителя, СтрокаТаблицы.СведенияОЮридическомЛице.Представитель);
			ЗаполнитьЗначенияСвойств(ПараметрыУчредителя, СтрокаТаблицы.СведенияОЮридическомЛице);
		Иначе
			ЗаполнитьЗначенияСвойств(ПараметрыУчредителя, СтрокаТаблицы.СведенияОФизическомЛице);
		КонецЕсли;
		
		ПараметрыУчредителя.ДокументПредставление  = ТекстСоСтрочнойБуквы(ПараметрыУчредителя.ДокументПредставление);
		ПараметрыУчредителя.ДолжностьПредставителя = ТекстСоСтрочнойБуквы(ПараметрыУчредителя.ДолжностьПредставителя);
		
		Если СтрокаТаблицы.ЭтоЮридическоеЛицо Тогда
			
			ПараметрыТекста.Вставить("НаименованиеУчредителя" + СтрокаТаблицы.НомерСтроки, 
				ПараметрыУчредителя.ПолноеНаименование);
			ПараметрыТекста.Вставить("КраткоеПредставлениеУчредителя" + СтрокаТаблицы.НомерСтроки, 
				ПараметрыУчредителя.ПолноеНаименование);
			
			ПредставлениеУчредителя = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
				ШаблонПоляПротокола("ЮридическоеЛицо"), ПараметрыУчредителя);
			ПараметрыТекста.Вставить("ПредставлениеУчредителя" + СтрокаТаблицы.НомерСтроки, ПредставлениеУчредителя);
			
			ПредставительУчредителя = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
				ШаблонПоляПротокола("Представитель"), ПараметрыУчредителя);
			ПараметрыТекста.Вставить("ПредставительУчредителя" + СтрокаТаблицы.НомерСтроки, ПредставительУчредителя);
			
		Иначе
			ПараметрыТекста.Вставить("КраткоеПредставлениеУчредителя" + СтрокаТаблицы.НомерСтроки, 
				СтрокаТаблицы.СведенияОФизическомЛице.ФИОПолные);
			
			ПредставлениеУчредителя = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
				ШаблонПоляПротокола("ФизическоеЛицо"), ПараметрыУчредителя);
			ПараметрыТекста.Вставить("ПредставлениеУчредителя" + СтрокаТаблицы.НомерСтроки, ПредставлениеУчредителя);
			
			ПараметрыТекста.Вставить("ПредставительУчредителя" + СтрокаТаблицы.НомерСтроки,
				СтрокаТаблицы.СведенияОФизическомЛице.ФИОПолные);
		КонецЕсли;
		
	КонецЦикла;
	
	СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Организация, ТекущаяДата());

	ПараметрыТекста.Вставить("НаименованиеПолное",      СведенияОбОрганизации.ПолноеНаименование);
	ПараметрыТекста.Вставить("НаименованиеСокращенное", СведенияОбОрганизации.СокращенноеНаименование);
	НаименованиеПолноеВРодительномПадеже = НаименованиеПолноеВРодительномПадеже(
		СокрЛ(СведенияОбОрганизации.ПолноеНаименование));
	ПараметрыТекста.Вставить("НаименованиеПолноеВРодительномПадеже", НаименованиеПолноеВРодительномПадеже);
	
	ПараметрыТекста.Вставить("УставныйКапитал", Формат(ДанныеУчредителей.УставныйКапитал, "ЧДЦ=2; ЧГ=0"));
	Валюта = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	УставныйКапиталПрописью = ЧислоПрописью(ДанныеУчредителей.УставныйКапитал, "Л=ru", Валюта.ПараметрыПрописиНаРусском);
	ПараметрыТекста.Вставить("УставныйКапиталПрописью", ТекстСоСтрочнойБуквы(УставныйКапиталПрописью));
	
	ПараметрыТекста.Вставить("ФИОДиректора",       ДанныеРуководителя.СведенияОФизическомЛице.ФИОПолные);
	ПараметрыТекста.Вставить("ДолжностьДиректора", ТекстСоСтрочнойБуквы(ДанныеРуководителя.ДолжностьПредставление));
	ПараметрыТекста.Вставить("ДокументДиректораПредставление", 
		ТекстСоСтрочнойБуквы(ДанныеРуководителя.СведенияОФизическомЛице.ДокументПредставление));
	ПараметрыТекста.Вставить("АдресДиректораПредставление", ДанныеРуководителя.СведенияОФизическомЛице.АдресПрописки);
	ПараметрыТекста.Вставить("СрокПолномочийДиректораПрописью", СрокПолномочийПрописью(ДанныеРуководителя.СрокПолномочий));
		
	Адрес = УправлениеКонтактнойИнформациейБП.АдресСтруктурой(Организация, 
		Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	
	ПараметрыТекста.Вставить("АдресОрганизации", Адрес.Представление);
	
	Если Адрес.Количество() > 0 Тогда
		Если Адрес.Свойство("Город") И ЗначениеЗаполнено(Адрес.Город) Тогда
			СловаАдреса = СтрРазделить(Адрес.Город, " ");
			СокращениеНаселенногоПункта = СловаАдреса[СловаАдреса.ВГраница()];
			СловаАдреса.Удалить(СловаАдреса.ВГраница());
			НаселенныйПункт = СтрСоединить(СловаАдреса, " ");
			ПараметрыТекста.Вставить("Город", Стршаблон("%1. %2", СокращениеНаселенногоПункта, НаселенныйПункт));
		ИначеЕсли Адрес.Свойство("НаселенныйПункт") И ЗначениеЗаполнено(Адрес.НаселенныйПункт) Тогда
			СловаАдреса = СтрРазделить(Адрес.НаселенныйПункт, " ");
			СокращениеНаселенногоПункта = СловаАдреса[СловаАдреса.ВГраница()];
			СловаАдреса.Удалить(СловаАдреса.ВГраница());
			НаселенныйПункт = СтрСоединить(СловаАдреса, " ");
			ПараметрыТекста.Вставить("Город", Стршаблон("%1. %2", СокращениеНаселенногоПункта, НаселенныйПункт));
		ИначеЕсли Адрес.Свойство("Регион") И ЗначениеЗаполнено(Адрес.Регион) Тогда
			СловаАдреса = СтрРазделить(Адрес.Регион, " ");
			СокращениеНаселенногоПункта = СловаАдреса[СловаАдреса.ВГраница()];
			СловаАдреса.Удалить(СловаАдреса.ВГраница());
			НаселенныйПункт = СтрСоединить(СловаАдреса, " ");
			ПараметрыТекста.Вставить("Город", Стршаблон("%1. %2", СокращениеНаселенногоПункта, НаселенныйПункт));
		КонецЕсли;
	КонецЕсли;

	ПараметрыТекста.Вставить("Дата", Формат(ТекущаяДата(), "Л=ru; ДФ='dd MMMM yyyy ''г.'''"));
		
	Макет = Обработки.РегистрацияОрганизации.ПолучитьМакет("ПротоколСобранияУчредителей");
	Текст = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Макет.ПолучитьТекст(), ПараметрыТекста);
	
	ДокументРезультат = Новый ФорматированныйДокумент;
	ДокументРезультат.УстановитьHTML(Текст, Новый Структура());
	
	НенужныеПараграфы = Новый Массив;
	Для Каждого Параграф Из ДокументРезультат.Элементы Цикл
		Если Параграф.ГоризонтальноеПоложение = ГоризонтальноеПоложение.ПоШирине 
			И Параграф.Элементы.Количество() > 0 Тогда
			Параграф.Элементы[0].Текст = СтрШаблон("    %1", Параграф.Элементы[0].Текст);
		КонецЕсли;
		// Удалим строки в которых остались незаполненные параметры.
		// Число учредителей может быть любым от 2 до 50.
		// Исходный текст рассчитан на 50 учредителей, поэтому, если их меньше,
		// то некоторые строки могли остаться с незаполненными параметрами.
		Для Каждого ЭлементПараграфа Из Параграф.Элементы Цикл
			Если ТипЗнч(ЭлементПараграфа) = Тип("ТекстФорматированногоДокумента") 
				И (СтрНайти(ЭлементПараграфа.Текст, "[КраткоеПредставлениеУчредителя") <> 0
				ИЛИ СтрНайти(ЭлементПараграфа.Текст, "[ПредставительУчредителя") <> 0
				ИЛИ СтрНайти(ЭлементПараграфа.Текст, "[ПредставлениеУчредителя") <> 0
				ИЛИ СтрНайти(ЭлементПараграфа.Текст, "[НаименованиеУчредителя") <> 0
				ИЛИ СтрНайти(ЭлементПараграфа.Текст, "[МеткаРевизора]") <> 0 ) Тогда
				НенужныеПараграфы.Добавить(Параграф);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для каждого Параграф Из НенужныеПараграфы Цикл
		ДокументРезультат.Элементы.Удалить(Параграф);
	КонецЦикла;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("rtf");
	ЭлектронноеВзаимодействиеБП.КонвертироватьВФорматRTF(ДокументРезультат, ИмяФайла);
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
	Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	УдалитьФайлы(ИмяФайла);
	
	Возврат Адрес;
	
КонецФункции

Функция ДоговорОбУчрежденииООО(Организация) Экспорт
	
	ДанныеУчредителей = ДанныеУчредителейОрганизации(Организация, ТекущаяДатаСеанса(), Истина);
	Если ДанныеУчредителей = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Нет данных об учредителях организации.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ДанныеРуководителя = ДанныеРуководителяОрганизации(Организация, ТекущаяДатаСеанса());
	Если ДанныеРуководителя = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Нет данных о руководителе организации.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Организация);
	
	ТекстHTML = Обработки.РегистрацияОрганизации.ПолучитьМакет("ДоговорОбУчрежденииООО").ПолучитьТекст();
	
	ПолноеНаименованиеОрганизацииВРодительномПадеже = СокрЛП(СведенияОбОрганизации.ПолноеНаименование);
	СловоОбщество = НСтр("ru = 'Общество с ограниченной ответственностью'");
	Если Лев(ВРЕГ(ПолноеНаименованиеОрганизацииВРодительномПадеже), СтрДлина(СловоОбщество)) = ВРЕГ(СловоОбщество) Тогда
		ПолноеНаименованиеОрганизацииВРодительномПадеже = НСтр("ru = 'Общества с ограниченной ответственностью'")
			+ СРЕД(ПолноеНаименованиеОрганизацииВРодительномПадеже, СтрДлина(СловоОбщество) + 1);
	КонецЕсли;
	
	ПодставитьПараметрВТекст(ТекстHTML, "ПолноеНаименованиеОрганизацииВРодительномПадеже", ПолноеНаименованиеОрганизацииВРодительномПадеже);
	ПодставитьПараметрВТекст(ТекстHTML, "ДатаДоговора", Формат(ТекущаяДатаСеанса(), "Л=ru; ДФ='dd MMMM yyyy ''г.'''"));
	ГородПоЮридическомуАдресу = УправлениеКонтактнойИнформациейБП.НаселенныйПунктПоАдресу(
		СведенияОбОрганизации.ЗначенияПолейЮридическийАдрес);
	ПодставитьПараметрВТекст(ТекстHTML, "ГородПоЮридическомуАдресуОрганизации", ГородПоЮридическомуАдресу);
	
	// Подготовим описания учредителей
	ОписаниеУчредителей = "";
	Для Каждого Учредитель Из ДанныеУчредителей.Учредители Цикл
		ОписаниеУчредителей = ОписаниеУчредителей + ОписаниеУчредителя(Учредитель);
	КонецЦикла;
	ПодставитьПараметрВТекст(ТекстHTML, "ОписаниеУчредителей", ОписаниеУчредителей);
	
	ПодставитьПараметрВТекст(ТекстHTML, "ПолноеНаименованиеОрганизации", СведенияОбОрганизации.ПолноеНаименование);
	ПодставитьПараметрВТекст(ТекстHTML, "КраткоеНаименованиеОрганизации", СведенияОбОрганизации.СокращенноеНаименование);
	ПодставитьПараметрВТекст(ТекстHTML, "ЮридическийАдресОрганизации", СведенияОбОрганизации.ЮридическийАдрес);
	
	СуммаУстановногоКапитала = ДанныеУчредителей.УставныйКапитал;
	
	Валюта = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	СуммаУстановногоКапиталаПрописью = ЧислоПрописью(СуммаУстановногоКапитала, "Л=ru", Валюта.ПараметрыПрописиНаРусском);
	
	ПодставитьПараметрВТекст(ТекстHTML, "СуммаУставногоКапитала", Формат(СуммаУстановногоКапитала, "ЧДЦ=2; ЧГ=3,0"));
	ПодставитьПараметрВТекст(ТекстHTML, "СуммаУставногоКапиталаПрописью", СуммаУстановногоКапиталаПрописью);
	
	ОписаниеУставногоКапиталаУчредителей = "";
	Для Каждого Учредитель Из ДанныеУчредителей.Учредители Цикл
		ОписаниеУставногоКапиталаУчредителей = ОписаниеУставногоКапиталаУчредителей 
			+ ОписаниеУставногоКапиталаУчредителя(Учредитель);
	КонецЦикла;
	ПодставитьПараметрВТекст(ТекстHTML, "УставныйКапиталУчредителей", ОписаниеУставногоКапиталаУчредителей);
		
	ПодставитьПараметрВТекст(ТекстHTML, "ДолжностьРуководителяОрганизации", 
		СведенияОбОрганизации.ДолжностьРуководителяПредставление);
	
	ПодписиУчредителей = "";
	Для Каждого Учредитель Из ДанныеУчредителей.Учредители Цикл
		ПодписиУчредителей = ПодписиУчредителей + ПодписьУчредителя(Учредитель);
	КонецЦикла;
	ПодставитьПараметрВТекст(ТекстHTML, "ПодписиУчредителей", ПодписиУчредителей);
	
	ДокументРезультат = Новый ФорматированныйДокумент;
	ДокументРезультат.УстановитьHTML(ТекстHTML, Новый Структура());
	
	ИмяФайла = ПолучитьИмяВременногоФайла("rtf");
	ЭлектронноеВзаимодействиеБП.КонвертироватьВФорматRTF(ДокументРезультат, ИмяФайла);
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
	Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	УдалитьФайлы(ИмяФайла);
	
	Возврат Адрес;
	
КонецФункции

Функция КвитанцияНаОплатуГоспошлины(Организация) Экспорт
	
	КвитанцияПрисоединенныйФайл = ПрисоединенныйФайлКвитанцииНаОплатуГоспошлиныОрганизации(Организация);
	Если КвитанцияПрисоединенныйФайл = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат ПоместитьВоВременноеХранилище(ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(КвитанцияПрисоединенныйФайл));
	
КонецФункции

Функция ПриказОВступленииВДолжностьРуководителя(Организация) Экспорт
	
	ДанныеУчредителей = ДанныеУчредителейОрганизации(Организация, ТекущаяДатаСеанса());
	Если ДанныеУчредителей = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Нет данных об учредителях организации.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	ДанныеРуководителя = ДанныеРуководителяОрганизации(Организация, ТекущаяДатаСеанса(), Истина);
	Если ДанныеРуководителя = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Нет данных о руководителе организации.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ФорматДат = "Л=ru_RU; ДФ=dd.MM.yyyy";
	
	ПараметрыТекста = Новый Структура();
	
	НаименованияОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, 
		"НаименованиеСокращенное, НаименованиеПолное");
	ПараметрыТекста.Вставить("НаименованиеСокращенное", НаименованияОрганизации.НаименованиеСокращенное);
	ПараметрыТекста.Вставить("НаименованиеПолное", НаименованияОрганизации.НаименованиеПолное);
	
	ПараметрыТекста.Вставить("ФИОПолныеДиректора", ДанныеРуководителя.СведенияОФизическомЛице.ФИОПолные);
	ПараметрыТекста.Вставить("ИОФамилияДиректора", ДанныеРуководителя.СведенияОФизическомЛице.ИОФамилия);
	
	ПараметрыТекста.Вставить("ДолжностьДиректора", ДанныеРуководителя.ДолжностьПредставление);
	ПараметрыТекста.Вставить("ДолжностьДиректораВРодительномПадеже", 
		СокрЛП(НРег(СклонениеПредставленийОбъектов.ПросклонятьПредставление(
			ДанныеРуководителя.ДолжностьПредставление, 2, ДанныеРуководителя.Должность))));
		
	ДатаПриказа = ДанныеРуководителя.Период;
	ПараметрыТекста.Вставить("ДатаПриказа",  Формат(ДатаПриказа, ФорматДат));
	ПараметрыТекста.Вставить("НомерПриказа", "№ 1");
	
	Адрес = УправлениеКонтактнойИнформациейБП.АдресСтруктурой(Организация, 
		Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	Если Адрес.Свойство("Город") И ЗначениеЗаполнено(Адрес.Город) Тогда
		Город = Адрес.Город;
	ИначеЕсли Адрес.Свойство("НаселенныйПункт") И ЗначениеЗаполнено(Адрес.НаселенныйПункт) Тогда
		Город = Адрес.НаселенныйПункт;
	ИначеЕсли Адрес.Свойство("Регион") И ЗначениеЗаполнено(Адрес.Регион) Тогда
		Город = СтрЗаменить(Адрес.Регион, " г", "");
	Иначе
		Город = "";
	КонецЕсли;
	ПараметрыТекста.Вставить("Город", Город);
	
	Если ДанныеУчредителей.Учредители.Количество() > 1 Тогда
		ШаблонОснования = НСтр("ru='протокол общего собрания участников общества от %1 № 1'");
	Иначе
		ШаблонОснования = НСтр("ru='решение единственного участника от %1 № 1'");
	КонецЕсли;
	ПараметрыТекста.Вставить("Основание", СтрШаблон(ШаблонОснования, Формат(ДатаПриказа, ФорматДат)));
	
	ПараметрыТекста.Вставить("ДатаНачала", Формат(ДатаПриказа, ФорматДат));
	ПараметрыТекста.Вставить("ДатаКонца", Формат(ДобавитьМесяц(ДатаПриказа, ДанныеРуководителя.СрокПолномочий * 12), ФорматДат));
	
	Макет = Обработки.РегистрацияОрганизации.ПолучитьМакет("ПриказОВступленииВДолжностьРуководителя");
	Текст = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Макет.ПолучитьТекст(), ПараметрыТекста);
	
	ДокументРезультат = Новый ФорматированныйДокумент;
	ДокументРезультат.УстановитьHTML(Текст, Новый Структура());
	
	ШрифтТекстаУчредительныхДокументов = Новый Шрифт("Times New Roman", 12);
	
	Для Каждого Параграф Из ДокументРезультат.Элементы Цикл
		Параграф.МеждустрочныйИнтервал = 1.5;
		Для Каждого Элемент Из Параграф.Элементы Цикл
			Если ТипЗнч(Элемент) = Тип("ТекстФорматированногоДокумента") Тогда
				Элемент.Шрифт = ШрифтТекстаУчредительныхДокументов;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("rtf");
	ЭлектронноеВзаимодействиеБП.КонвертироватьВФорматRTF(ДокументРезультат, ИмяФайла);
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
	Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	УдалитьФайлы(ИмяФайла);
	
	Возврат Адрес;
	
КонецФункции

Функция СформироватьПриказОВступленииВДолжностьРуководителя(МассивОбъектов, ОбъектыПечати, ИмяМакета) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Макет             = УправлениеПечатью.МакетПечатнойФормы("Обработка.РегистрацияОрганизации.ПриказОВступленииВДолжностьРуководителя");
	ОбластьДоговора   = Макет.ПолучитьОбласть("ТекстПриказа");
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Организации", МассивОбъектов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка В(&Организации)
	|	И Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)";
	
	НомерСтрокиНачало = 0;
	ФорматДат = "Л=ru_RU; ДФ=dd.MM.yyyy";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если НомерСтрокиНачало > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ДанныеУчредителей = ДанныеУчредителейОрганизации(Выборка.Ссылка, ТекущаяДатаСеанса());
		Если ДанныеУчредителей = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ДанныеРуководителя = ДанныеРуководителяОрганизации(Выборка.Ссылка, ТекущаяДатаСеанса(), Истина);
		Если ДанныеРуководителя = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыТекста = Новый Структура();
		
		НаименованияОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Выборка.Ссылка, 
			"НаименованиеСокращенное, НаименованиеПолное");
		ПараметрыТекста.Вставить("НаименованиеСокращенное", НаименованияОрганизации.НаименованиеСокращенное);
		ПараметрыТекста.Вставить("НаименованиеПолное", НаименованияОрганизации.НаименованиеПолное);
		
		ПараметрыТекста.Вставить("ФИОПолныеДиректора", ДанныеРуководителя.СведенияОФизическомЛице.ФИОПолные);
		ПараметрыТекста.Вставить("ИОФамилияДиректора", ДанныеРуководителя.СведенияОФизическомЛице.ИОФамилия);
		
		ПараметрыТекста.Вставить("ДолжностьДиректора", ДанныеРуководителя.ДолжностьПредставление);
		ПараметрыТекста.Вставить("ДолжностьДиректораВРодительномПадеже", 
			СокрЛП(НРег(СклонениеПредставленийОбъектов.ПросклонятьПредставление(
				ДанныеРуководителя.ДолжностьПредставление, 2, ДанныеРуководителя.Должность))));
			
		ДатаПриказа = ДанныеРуководителя.Период;
		ПараметрыТекста.Вставить("ДатаПриказа",  Формат(ДатаПриказа, ФорматДат));
		ПараметрыТекста.Вставить("НомерПриказа", "№ 1");
		
		Адрес = УправлениеКонтактнойИнформациейБП.АдресСтруктурой(Выборка.Ссылка, 
			Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
		Если Адрес.Свойство("Город") И ЗначениеЗаполнено(Адрес.Город) Тогда
			Город = Адрес.Город;
		ИначеЕсли Адрес.Свойство("НаселенныйПункт") И ЗначениеЗаполнено(Адрес.НаселенныйПункт) Тогда
			Город = Адрес.НаселенныйПункт;
		ИначеЕсли Адрес.Свойство("Регион") И ЗначениеЗаполнено(Адрес.Регион) Тогда
			Город = СтрЗаменить(Адрес.Регион, " г", "");
		Иначе
			Город = "";
		КонецЕсли;
		ПараметрыТекста.Вставить("Город", Город);
		
		Если ДанныеУчредителей.Учредители.Количество() > 1 Тогда
			ШаблонОснования = НСтр("ru='протокол общего собрания участников общества от %1 № 1'");
		Иначе
			ШаблонОснования = НСтр("ru='решение единственного участника от %1 № 1'");
		КонецЕсли;
		ПараметрыТекста.Вставить("Основание", СтрШаблон(ШаблонОснования, Формат(ДатаПриказа, ФорматДат)));
		
		ПараметрыТекста.Вставить("ДатаНачала", Формат(ДатаПриказа, ФорматДат));
		ПараметрыТекста.Вставить("ДатаКонца", Формат(ДобавитьМесяц(ДатаПриказа, ДанныеРуководителя.СрокПолномочий * 12), ФорматДат));
		
		ОбластьДоговора.Параметры.Заполнить(ПараметрыТекста);
		ТабличныйДокумент.Вывести(ОбластьДоговора);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Выборка.Ссылка);
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция РеквизитыРегистрирующегоОргана(КодНалоговогоОргана, ЭтоЮридическоеЛицо) Экспорт
	
	Если НЕ ЗначениеЗаполнено(КодНалоговогоОргана) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РеквизитыНалоговогоОргана = ДанныеГосударственныхОрганов.РеквизитыНалоговогоОрганаПоКоду(КодНалоговогоОргана);
	Если ЗначениеЗаполнено(РеквизитыНалоговогоОргана.ОписаниеОшибки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЭтоЮридическоеЛицо Тогда
		РегистрирующийОрган = РеквизитыНалоговогоОргана.РегистрирующийОрганЮЛ;
	Иначе
		РегистрирующийОрган = РеквизитыНалоговогоОргана.РегистрирующийОрганИП;
	КонецЕсли;
	
	РегистрирующийОрган.Наименование = СтрЗаменить(РегистрирующийОрган.Наименование, 
		НСтр("ru='инспекция Федеральной налоговой службы'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
		НСтр("ru='ИФНС'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	Если Не ПустаяСтрока(РегистрирующийОрган.Адрес) Тогда
		МассивПодстрок = СтрРазделить(РегистрирующийОрган.Адрес, ",", Ложь);
		РегистрирующийОрган.Адрес = СтрСоединить(МассивПодстрок, ",");
	КонецЕсли;
	
	Возврат РегистрирующийОрган;
	
КонецФункции

Функция ДанныеУчредителейОрганизации(Организация, Дата, Подробно = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ФормированиеУставногоКапитала.Ссылка КАК Ссылка,
	|	ФормированиеУставногоКапитала.Дата КАК Дата,
	|	ФормированиеУставногоКапитала.Организация КАК Организация,
	|	ФормированиеУставногоКапитала.УставныйКапиталДоИзменения КАК УставныйКапиталДоИзменения,
	|	ФормированиеУставногоКапитала.УставныйКапитал КАК УставныйКапитал,
	|	ФормированиеУставногоКапитала.СпособРегистрации КАК СпособРегистрации,
	|	ФормированиеУставногоКапитала.Учредители.(
	|		НомерСтроки,
	|		ФормированиеУставногоКапитала.Учредители.Учредитель ССЫЛКА Справочник.Контрагенты КАК ЭтоЮридическоеЛицо,
	|		Учредитель,
	|		СуммаВзносаДоИзменения,
	|		СуммаВзноса,
	|		ПредставительУчредителя,
	|		ДолжностьПредставителя,
	|		ПредставительНаОсновании
	|	)
	|ИЗ
	|	Документ.ФормированиеУставногоКапитала КАК ФормированиеУставногоКапитала
	|ГДЕ
	|	ФормированиеУставногоКапитала.Организация = &Организация
	|	И ФормированиеУставногоКапитала.Дата <= &Дата
	|	И НЕ ФормированиеУставногоКапитала.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		Данные = Новый Структура;
		Данные.Вставить("Дата",              Выборка.Дата);
		Данные.Вставить("Организация",       Выборка.Организация);
		Данные.Вставить("УставныйКапиталДоИзменения", Выборка.УставныйКапиталДоИзменения);
		Данные.Вставить("УставныйКапитал",   Выборка.УставныйКапитал);
		Данные.Вставить("СпособРегистрации", Выборка.СпособРегистрации);
		Данные.Вставить("Учредители",        Выборка.Учредители.Выгрузить());
		Данные.Учредители.Сортировать("НомерСтроки");
		Если Подробно Тогда
			ЗаполнитьПодробнуюИнформациюОбУчредителях(Данные.Учредители);
		КонецЕсли;
		
		Данные.Вставить("НовыеУчастники",    Данные.Учредители.Скопировать(Новый Структура("СуммаВзносаДоИзменения", 0)));
		Данные.Вставить("ВышедшиеУчастники", Данные.Учредители.Скопировать(Новый Структура("СуммаВзноса", 0)));
		
		Возврат Данные;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ДанныеРуководителяОрганизации(Организация, Дата, Подробно = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Организация);
	Запрос.УстановитьПараметр("ОтветственноеЛицо",  Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтветственныеЛицаОрганизаций.Период КАК Период,
	|	ОтветственныеЛицаОрганизаций.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ОтветственныеЛицаОрганизаций.ОтветственноеЛицо КАК ОтветственноеЛицо,
	|	ОтветственныеЛицаОрганизаций.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ОтветственныеЛицаОрганизаций.Должность КАК Должность,
	|	ОтветственныеЛицаОрганизаций.Должность.Наименование КАК ДолжностьПредставление,
	|	ОтветственныеЛицаОрганизаций.СрокПолномочий КАК СрокПолномочий
	|ИЗ
	|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
	|			&Дата,
	|			СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|				И ОтветственноеЛицо = &ОтветственноеЛицо) КАК ОтветственныеЛицаОрганизаций";
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		СведенияОРуководителе = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Результат.Выгрузить()[0]);
		Если Подробно Тогда
			ЗаполнитьПодробнуюИнформациюОРуководителе(СведенияОРуководителе);
		КонецЕсли;
		Возврат СведенияОРуководителе;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

Функция ДанныеИзмененияРуководителяОрганизации(Организация, Дата, Подробно = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Организация);
	Запрос.УстановитьПараметр("ОтветственноеЛицо",  Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	ОтветственныеЛицаОрганизаций.Период КАК Период,
	|	ОтветственныеЛицаОрганизаций.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ОтветственныеЛицаОрганизаций.ОтветственноеЛицо КАК ОтветственноеЛицо,
	|	ОтветственныеЛицаОрганизаций.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ОтветственныеЛицаОрганизаций.Должность КАК Должность,
	|	ОтветственныеЛицаОрганизаций.Должность.Наименование КАК ДолжностьПредставление,
	|	ОтветственныеЛицаОрганизаций.СрокПолномочий КАК СрокПолномочий
	|ИЗ
	|	РегистрСведений.ОтветственныеЛицаОрганизаций КАК ОтветственныеЛицаОрганизаций
	|ГДЕ
	|	ОтветственныеЛицаОрганизаций.Период <= &Дата
	|	И ОтветственныеЛицаОрганизаций.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|	И ОтветственныеЛицаОрганизаций.ОтветственноеЛицо = &ОтветственноеЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ";
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		СведенияОбИзмененииРуководителя = Новый Структура;
		
		ДанныеОбИзмененииРуководителя = Результат.Выгрузить();
		Если ДанныеОбИзмененииРуководителя.Количество() > 0 Тогда
			СведенияОбИзмененииРуководителя.Вставить("СведенияОРуководителе", 
				ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ДанныеОбИзмененииРуководителя[0]));
			Если Подробно Тогда
				ЗаполнитьПодробнуюИнформациюОРуководителе(СведенияОбИзмененииРуководителя.СведенияОРуководителе);
			КонецЕсли;
		КонецЕсли;
		
		Если ДанныеОбИзмененииРуководителя.Количество() > 1 Тогда
			СведенияОбИзмененииРуководителя.Вставить("СведенияОПрежнемРуководителе", 
				ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ДанныеОбИзмененииРуководителя[1]));
			Если Подробно Тогда
				ЗаполнитьПодробнуюИнформациюОРуководителе(СведенияОбИзмененииРуководителя.СведенияОПрежнемРуководителе);
			КонецЕсли;
		КонецЕсли;
		
		Возврат СведенияОбИзмененииРуководителя;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

Функция ИсторияРуководителейОрганизации(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	ОтветственныеЛицаОрганизаций.Период,
	|	ОтветственныеЛицаОрганизаций.СтруктурнаяЕдиница,
	|	ОтветственныеЛицаОрганизаций.ОтветственноеЛицо,
	|	ОтветственныеЛицаОрганизаций.ФизическоеЛицо,
	|	ОтветственныеЛицаОрганизаций.Должность,
	|	ОтветственныеЛицаОрганизаций.Должность.Наименование КАК ДолжностьПредставление,
	|	ОтветственныеЛицаОрганизаций.СрокПолномочий
	|ИЗ
	|	РегистрСведений.ОтветственныеЛицаОрганизаций КАК ОтветственныеЛицаОрганизаций
	|ГДЕ
	|	ОтветственныеЛицаОрганизаций.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|	И ОтветственныеЛицаОрганизаций.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ";
	
	ИсторияРуководителей = Запрос.Выполнить().Выгрузить();
	
	Возврат ИсторияРуководителей;
	
КонецФункции

Функция НаименованиеПолноеВРодительномПадеже(Знач НаименованиеПолное)
	
	Склоняемое = НСтр("ru='Общество'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	СклоняемоеВРодительномПадеже = НСтр("ru='Общества'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	Если СтрНачинаетсяС(НаименованиеПолное, Склоняемое) Тогда
		СклоняемоеВРодительномПадеже = НРег(СклоняемоеВРодительномПадеже);
	ИначеЕсли СтрНачинаетсяС(НаименованиеПолное, ВРег(Склоняемое)) Тогда
		СклоняемоеВРодительномПадеже = ВРег(СклоняемоеВРодительномПадеже);
	ИначеЕсли СтрНачинаетсяС(НаименованиеПолное, НРег(Склоняемое)) Тогда
		СклоняемоеВРодительномПадеже = НРег(СклоняемоеВРодительномПадеже);
	Иначе
		Возврат НаименованиеПолное;
	КонецЕсли;
	
	Результат = СклоняемоеВРодительномПадеже + Сред(НаименованиеПолное, СтрДлина(Склоняемое) + 1);
	
	Возврат Результат;
	
КонецФункции

Функция УвеличитьЗначениеНаЕдиницу(НомерПункта)
	НомерПункта = НомерПункта + 1;
	Возврат НомерПункта;
КонецФункции

Функция ИмяПрограммы()
	
	Если Метаданные.Имя = "БухгалтерияПредприятияБазовая1" Тогда
		Возврат НСтр("ru = '1С:БизнесСтарт'");
	ИначеЕсли ПолучитьФункциональнуюОпцию("ПредпринимательВСервисе") Тогда
		Возврат НСтр("ru = '1С:Предприниматель'");
	Иначе
		Возврат НСтр("ru = '1С:Бухгалтерия'");
	КонецЕсли;
	
КонецФункции

Функция СрокПолномочийПрописью(СрокПолномочий)
	
	Результат = СтрШаблон("%1 (%2) %3",
		Формат(СрокПолномочий, "ЧДЦ=; ЧГ=0"),
		СокрП(ЧислоПрописью(СрокПолномочий, "Л=ru_RU", ",,,,,,,,0")),
		СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(СрокПолномочий, "год,года,лет", Ложь)
		);
	
	Возврат Результат;
	
КонецФункции

Функция ШаблонПоляПротокола(ИмяПоля)

	Если ИмяПоля = "ЮридическоеЛицо" Тогда
		
		Шаблон = "[ПолноеНаименование], ОГРН: [ОГРН], ИНН: [ИНН], КПП: [КПП], адрес места нахождения: [ЮридическийАдрес]. Представитель: [ДолжностьПредставителя] [ФИОПолные], действует на основании [ПредставительНаОсновании]";
		
	ИначеЕсли ИмяПоля = "ФизическоеЛицо" Тогда
		
		Шаблон = "Гражданин Российской Федерации [ФИОПолные], [ДокументПредставление], место регистрации: [АдресПрописки]";
		
	ИначеЕсли ИмяПоля = "Представитель" Тогда
		
		Шаблон = "[ФИОПолные], [ДолжностьПредставителя]";
		
	Иначе
		
		Шаблон = "";
		
	КонецЕсли;
	
	Возврат Шаблон;

КонецФункции

Функция НовыйПараметрыУчредителяДляПротокола()
	
	ПараметрыУчредителя = Новый Структура();
	
	ПараметрыУчредителя.Вставить("ПолноеНаименование");
	ПараметрыУчредителя.Вставить("ЮридическийАдрес");
	ПараметрыУчредителя.Вставить("ОГРН");
	ПараметрыУчредителя.Вставить("ИНН");
	ПараметрыУчредителя.Вставить("КПП");
	ПараметрыУчредителя.Вставить("ФИОПолные");
	ПараметрыУчредителя.Вставить("АдресПрописки");
	ПараметрыУчредителя.Вставить("ДокументПредставление");
	ПараметрыУчредителя.Вставить("ДолжностьПредставителя");
	ПараметрыУчредителя.Вставить("ПредставительНаОсновании");
	
	Возврат ПараметрыУчредителя;
	
КонецФункции

Процедура ЗаполнитьПодробнуюИнформациюОбУчредителях(ТаблицаУчредителей)
	
	ТаблицаУчредителей.Колонки.Добавить("СуммаВзносаСтрокой",    Новый ОписаниеТипов("Строка"));
	ТаблицаУчредителей.Колонки.Добавить("СуммаВзносаПрописью",   Новый ОписаниеТипов("Строка"));
	ТаблицаУчредителей.Колонки.Добавить("ДоляУставногоКапитала", 
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 2)));
	ТаблицаУчредителей.Колонки.Добавить("ДоляУставногоКапиталаСтрокой", Новый ОписаниеТипов("Строка"));
	ТаблицаУчредителей.Колонки.Добавить("СведенияОЮридическомЛице",     Новый ОписаниеТипов("Структура"));
	ТаблицаУчредителей.Колонки.Добавить("СведенияОФизическомЛице",      Новый ОписаниеТипов("Структура"));
	
	СуммаВзносаВсего = ТаблицаУчредителей.Итог("СуммаВзноса");
	Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	
	МассивВзносов = ТаблицаУчредителей.ВыгрузитьКолонку("СуммаВзноса");
	МассивДолей = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(100, МассивВзносов, 2);
	Если МассивДолей <> Неопределено Тогда
		ТаблицаУчредителей.ЗагрузитьКолонку(МассивДолей, "ДоляУставногоКапитала");
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаУчредителей Цикл
		
		СтрокаТаблицы.СуммаВзносаСтрокой  = Формат(СтрокаТаблицы.СуммаВзноса, "ЧДЦ=2; ЧГ=3,0");
		СтрокаТаблицы.СуммаВзносаПрописью = ЧислоПрописью(СтрокаТаблицы.СуммаВзноса, "Л=ru", Валюта.ПараметрыПрописиНаРусском);
		СтрокаТаблицы.ДоляУставногоКапиталаСтрокой  = Формат(СтрокаТаблицы.ДоляУставногоКапитала, "ЧГ=0");
		
		Если СтрокаТаблицы.ЭтоЮридическоеЛицо Тогда
			
			СведенияОбУчредителе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(СтрокаТаблицы.Учредитель);
			СтрокаТаблицы.СведенияОЮридическомЛице.Вставить("ПолноеНаименование", СведенияОбУчредителе.ПолноеНаименование);
			СтрокаТаблицы.СведенияОЮридическомЛице.Вставить("ИНН",  СведенияОбУчредителе.ИНН);
			СтрокаТаблицы.СведенияОЮридическомЛице.Вставить("КПП",  СведенияОбУчредителе.КПП);
			СтрокаТаблицы.СведенияОЮридическомЛице.Вставить("ОГРН", СведенияОбУчредителе.ОГРН);
			СтрокаТаблицы.СведенияОЮридическомЛице.Вставить("ЮридическийАдрес", СведенияОбУчредителе.ЮридическийАдрес);
			СтрокаТаблицы.СведенияОЮридическомЛице.Вставить("Телефон", СведенияОбУчредителе.Телефоны);
			СтрокаТаблицы.СведенияОЮридическомЛице.Вставить("Email",   СведенияОбУчредителе.Email);
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.ПредставительУчредителя) Тогда
				ДанныеФизическогоЛица = СведенияОФизическомЛице(СтрокаТаблицы.ПредставительУчредителя);
				
				ДанныеФизическогоЛица.Вставить("Должность", 
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.ДолжностьПредставителя, "Наименование"));
				ДанныеФизическогоЛица.Вставить("ДолжностьРодительныйПадеж", 
					СклонениеПредставленийОбъектов.ПросклонятьПредставление(ДанныеФизическогоЛица.Должность, 
						2, СтрокаТаблицы.ДолжностьПредставителя));
				ДанныеФизическогоЛица.Вставить("ОснованияПолномочийРодительныйПадеж", СтрокаТаблицы.ПредставительНаОсновании);
				
				СтрокаТаблицы.СведенияОЮридическомЛице.Вставить("Представитель", ДанныеФизическогоЛица);
			Иначе
				СтрокаТаблицы.СведенияОЮридическомЛице.Вставить("Представитель", Неопределено);
			КонецЕсли;
			
		Иначе
			
			СтрокаТаблицы.СведенияОФизическомЛице = СведенияОФизическомЛице(СтрокаТаблицы.Учредитель);
			
		КонецЕсли;
		
		
	КонецЦикла;
	
КонецПроцедуры

Функция СведенияОФизическомЛице(ФизическоеЛицо)
	
	СписокКадровыхДанных = "Фамилия,Имя,Отчество,Пол,ДатаРождения,МестоРожденияПредставление,Страна,ИНН,"
			+ "ФамилияИО,ИОФамилия,ФИОПолные,ДокументВид,ДокументСрокДействия,ДокументКодМВД,"
			+ "ДокументСерия,ДокументНомер,ДокументДатаВыдачи,"
			+ "ДокументКемВыдан,ДокументКодПодразделения";
	
	КадровыеДанныеФизЛиц = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, ФизическоеЛицо,
		СписокКадровыхДанных, ТекущаяДатаСеанса());
	
	ДанныеФизическогоЛица = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(КадровыеДанныеФизЛиц[0]);
	ДанныеФизическогоЛица.Вставить("ДокументПредставление", ПредставлениеДокументаФизическогоЛица(ДанныеФизическогоЛица));
	
	ДанныеФизическогоЛица.Вставить("ФИОРодительныйПадеж", 
		СклонениеПредставленийОбъектов.ПросклонятьФИО(ДанныеФизическогоЛица.ФИОПолные, 
		2, ФизическоеЛицо, ПолДляСклонений(ДанныеФизическогоЛица.Пол)));
	
	ДанныеФизическогоЛица.Вставить("АдресСтруктурой", 
		УправлениеКонтактнойИнформациейБП.АдресСтруктурой(ФизическоеЛицо,
			Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица, , Ложь));
	ДанныеФизическогоЛица.Вставить("АдресПрописки", ДанныеФизическогоЛица.АдресСтруктурой.Представление);
	ДанныеФизическогоЛица.Вставить("Телефон", 
		УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ФизическоеЛицо,
			Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица));
	ДанныеФизическогоЛица.Вставить("Email", 
		УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ФизическоеЛицо,
			Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица));
	
	Возврат ДанныеФизическогоЛица;
	
КонецФункции

Функция ПредставлениеДокументаФизическогоЛица(КадровыеДанные)
	
	ТекстСерия = ", серия: %1";
	ТекстНомер = ", № %1";
	ТекстДатаВыдачи = ", выдан: %1 года";
	ТекстСрокДействия = ", действует до: %1 года";
	ТекстКодПодразделения = ", № подр. %1";
	
	Возврат Строка(КадровыеДанные.ДокументВид)
		+ ?(ЗначениеЗаполнено(КадровыеДанные.ДокументСерия), СтрШаблон(ТекстСерия, КадровыеДанные.ДокументСерия), "")
		+ ?(ЗначениеЗаполнено(КадровыеДанные.ДокументНомер), СтрШаблон(ТекстНомер, КадровыеДанные.ДокументНомер), "")
		+ ?(ЗначениеЗаполнено(КадровыеДанные.ДокументДатаВыдачи), СтрШаблон(ТекстДатаВыдачи, Формат(КадровыеДанные.ДокументДатаВыдачи,"Л=ru_RU; ДФ='дд ММММ гггг'")), "")
		+ ?(ЗначениеЗаполнено(КадровыеДанные.ДокументСрокДействия), СтрШаблон(ТекстСрокДействия, Формат(КадровыеДанные.ДокументСрокДействия,"Л=ru_RU; ДФ='дд ММММ гггг'")), "")
		+ ?(ЗначениеЗаполнено(КадровыеДанные.ДокументКемВыдан), ", " + КадровыеДанные.ДокументКемВыдан, "")
		+ ?(ЗначениеЗаполнено(КадровыеДанные.ДокументКодПодразделения) И КадровыеДанные.ДокументВид = Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ,
			СтрШаблон(ТекстКодПодразделения, КадровыеДанные.ДокументКодПодразделения), "");
	
КонецФункции

Процедура ЗаполнитьПодробнуюИнформациюОРуководителе(СведенияОРуководителе)

		СписокДанных = "Фамилия,Имя,Отчество,Пол,ДатаРождения,МестоРожденияПредставление,Страна,ИНН,"
			+ "ФамилияИО,ИОФамилия,ФИОПолные,ДокументВид,ДокументСрокДействия,ДокументКодМВД,"
			+ "ДокументСерия,ДокументНомер,ДокументДатаВыдачи,"
			+ "ДокументКемВыдан,ДокументКодПодразделения,ДокументПредставление";
		
		КадровыеДанные = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, СведенияОРуководителе.ФизическоеЛицо,
			СписокДанных, ТекущаяДатаСеанса());
		
		ДанныеФизическогоЛица = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(КадровыеДанные[0]);
		ДанныеФизическогоЛица.Вставить("ДокументПредставление", ПредставлениеДокументаФизическогоЛица(ДанныеФизическогоЛица));
		
		ДанныеФизическогоЛица.Вставить("ФИОПолныеРодительныйПадеж",
			СклонениеПредставленийОбъектов.ПросклонятьФИО(ДанныеФизическогоЛица.ФИОПолные,
				2, СведенияОРуководителе.ФизическоеЛицо, ПолДляСклонений(ДанныеФизическогоЛица.Пол)));
		
		ДанныеФизическогоЛица.Вставить("АдресСтруктурой", 
			УправлениеКонтактнойИнформациейБП.АдресСтруктурой(СведенияОРуководителе.ФизическоеЛицо,
				Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица, , Ложь));
		ДанныеФизическогоЛица.Вставить("АдресПрописки", ДанныеФизическогоЛица.АдресСтруктурой.Представление);
		ДанныеФизическогоЛица.Вставить("Телефон", 
			УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(СведенияОРуководителе.ФизическоеЛицо, 
				Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица));
		ДанныеФизическогоЛица.Вставить("Email", 
			УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(СведенияОРуководителе.ФизическоеЛицо, 
				Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица));
		
		СведенияОРуководителе.Вставить("СведенияОФизическомЛице", ДанныеФизическогоЛица);

КонецПроцедуры

Функция ОписаниеУчредителя(Учредитель)
	
	ОписаниеУчредителя = "";
	Если Учредитель.ЭтоЮридическоеЛицо Тогда
		
		Реквизиты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'ОГРН %1, ИНН %2, КПП %3, адрес места нахождения: %4'"),
			Учредитель.СведенияОЮридическомЛице.ОГРН,
			Учредитель.СведенияОЮридическомЛице.ИНН,
			Учредитель.СведенияОЮридическомЛице.КПП,
			Учредитель.СведенияОЮридическомЛице.ЮридическийАдрес);
		
		Если Учредитель.СведенияОЮридическомЛице.Представитель.Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда
			ТекстДействующего = НСтр("ru = 'действующего'")
		Иначе
			ТекстДействующего = НСтр("ru = 'действующей'")
		КонецЕсли;
		
		ОписаниеУчредителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '<STRONG>%1</STRONG> (%2) в лице %3 %4, %5 на основании %6,<BR>'"),
			Учредитель.СведенияОЮридическомЛице.ПолноеНаименование,
			Реквизиты,
			Учредитель.СведенияОЮридическомЛице.Представитель.ДолжностьРодительныйПадеж,
			Учредитель.СведенияОЮридическомЛице.Представитель.ФИОРодительныйПадеж,
			ТекстДействующего,
			Учредитель.СведенияОЮридическомЛице.Представитель.ОснованияПолномочийРодительныйПадеж);
		
	Иначе
		
		ОписаниеУчредителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '<STRONG>%1</STRONG> (%2, зарегистрирован по адресу: %3),<BR>'"),
			Учредитель.СведенияОФизическомЛице.ФИОПолные,
			Учредитель.СведенияОФизическомЛице.ДокументПредставление,
			Учредитель.СведенияОФизическомЛице.АдресПрописки);
		
	КонецЕсли;
	
	Возврат ОписаниеУчредителя;
	
КонецФункции

Функция ОписаниеУставногоКапиталаУчредителя(Учредитель)
	
	Если Учредитель.ЭтоЮридическоеЛицо Тогда
		НаименованиеУчредителя = Учредитель.СведенияОЮридическомЛице.ПолноеНаименование;
	Иначе
		НаименованиеУчредителя = Учредитель.СведенияОФизическомЛице.ФИОПолные;
	КонецЕсли;
	
	ОписаниеУставногоКапиталаУчредителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '<LI><DIV align=left>%1 - номинальная стоимость доли %2 рублей (%3), что составляет %4 %5 Уставного капитала.</DIV></LI>'"),
		НаименованиеУчредителя,
		Учредитель.СуммаВзносаСтрокой,
		Учредитель.СуммаВзносаПрописью,
		Учредитель.ДоляУставногоКапиталаСтрокой, 
		"%");
		
	Возврат ОписаниеУставногоКапиталаУчредителя;
	
КонецФункции

Функция ПодписьУчредителя(Учредитель)
	
	Если Учредитель.ЭтоЮридическоеЛицо Тогда
		
		ПодписьУчредителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '<STRONG>%1</STRONG><BR>Адрес: %2<BR>ИНН / КПП: %3 / %4<BR>Телефон: %5<BR>E-mail: %6<BR><BR>_____________________ %7 %8'"),
			Учредитель.СведенияОЮридическомЛице.ПолноеНаименование,
			Учредитель.СведенияОЮридическомЛице.ЮридическийАдрес,
			Учредитель.СведенияОЮридическомЛице.ИНН,
			Учредитель.СведенияОЮридическомЛице.КПП,
			Учредитель.СведенияОЮридическомЛице.Телефон,
			Учредитель.СведенияОЮридическомЛице.Email,
			Учредитель.СведенияОЮридическомЛице.Представитель.Должность,
			Учредитель.СведенияОЮридическомЛице.Представитель.ФамилияИО);
		
	Иначе
		
		ПодписьУчредителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '<STRONG>%1</STRONG><BR>Адрес: %2<BR>ИНН: %3<BR>Телефон: %4<BR>E-mail: %5<BR><BR>_____________________ %8'"),
			Учредитель.СведенияОФизическомЛице.ФИОПолные,
			Учредитель.СведенияОФизическомЛице.АдресПрописки,
			Учредитель.СведенияОФизическомЛице.ИНН,
			Учредитель.СведенияОФизическомЛице.Телефон,
			Учредитель.СведенияОФизическомЛице.Email,
			Учредитель.СведенияОФизическомЛице.ФамилияИО);
		
	КонецЕсли;
	
	Возврат "<P>" + ПодписьУчредителя + "</P><BR>";
	
КонецФункции

Процедура ПодставитьПараметрВТекст(ТекстHTML, ИмяПараметра, ЗначениеПараметра)
	
	ТекстHTML = СтрЗаменить(ТекстHTML, "{"+ИмяПараметра+"}", ЗначениеПараметра);
	
КонецПроцедуры

Функция ТекстСоСтрочнойБуквы(Текст)

	Возврат НРег(Лев(Текст, 1)) + Сред(Текст, 2);

КонецФункции

Функция СкопироватьКлючиСтруктуры(СтруктураИсточник)
	
	СтруктураРезультат = Новый Структура;
	
	Для Каждого КлючИЗначение Из СтруктураИсточник Цикл
		Ключ = КлючИЗначение.Ключ;
		Значение = КлючИЗначение.Значение;
		ТипЗначения = ТипЗнч(Значение);
		Если ТипЗначения = Тип("Структура") Тогда
			ПустоеЗначение = СкопироватьКлючиСтруктуры(Значение);
			СтруктураРезультат.Вставить(Ключ, ПустоеЗначение);
		ИначеЕсли ТипЗначения = Тип("СписокЗначений") И Значение.Количество() <> 0 Тогда
			ПустоеЗначение = Новый СписокЗначений;
			ПустоеЗначение.Добавить(СкопироватьКлючиСтруктуры(Значение[0].Значение));
			СтруктураРезультат.Вставить(Ключ, ПустоеЗначение);
		Иначе
			ПустоеЗначение = Неопределено;
			СтруктураРезультат.Вставить(Ключ, ПустоеЗначение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураРезультат;
	
КонецФункции

Функция СобытиеЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Регистрация организации'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

// Процедура очищает хранилище общих настроек после завершения регистрации.
//
Процедура ОчиститьСлужебныеДанныеПослеРегистрации() Экспорт
	
	ВыборкаНастроек = ХранилищеОбщихНастроек.Выбрать(Новый Структура("КлючОбъекта", ИмяКлючаНастроек()));
	Пока ВыборкаНастроек.Следующий() Цикл
		ХранилищеОбщихНастроек.Удалить(
			ВыборкаНастроек.КлючОбъекта,
			ВыборкаНастроек.КлючНастроек,
			ВыборкаНастроек.Пользователь);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеИНН

Процедура ПолучитьКартинкуСКодомВФоне(ПараметрыПолучения, АдресРезультата = Неопределено) Экспорт
	
	ДанныеКодаПолученияИНН = ДанныеСервисаРегистрации.ДанныеКодаПолученияИНН();
	
	ПоместитьВоВременноеХранилище(ДанныеКодаПолученияИНН, АдресРезультата);
	
КонецПроцедуры

Процедура ПолучитьИННВФоне(ПараметрыПолучения, АдресРезультата = Неопределено) Экспорт
	
	ДанныеИНН = ДанныеСервисаРегистрации.ОпределитьИНН(ПараметрыПолучения.ДанныеФизическогоЛица, ПараметрыПолучения.Токен, ПараметрыПолучения.КодСКартинки);
	
	ПоместитьВоВременноеХранилище(ДанныеИНН, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область ВнесениеИзмененийЕГРЮЛиЕГРИП

#Область ЗаполнениеДаннымиЕГР

// Заполняет реквизиты объекта и формы данными, полученными из госреестров.
//
// Параметры:
//   ОтветДанныхЕГР - Структура - см. ОрганизацииФормыДляОтчетности.НовыйОтветДанныхЕГР(),
//                                результат запроса к сервису, предоставляющему данные госреестров
//   Форма  - УправляемаяФорма - форма РегистрацияОрганизации.ВнесениеИзмененийЕГР
//
Процедура ЗаполнитьДаннымиЕГР(ОтветДанныхЕГР, Форма) Экспорт
	
	ДанныеЕГР = ПолучитьИзВременногоХранилища(ОтветДанныхЕГР.АдресДанных);
	Если ТипЗнч(ДанныеЕГР) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	// Инициализируем реквизит формы новым объектом
	НоваяОрганизация = Справочники.Организации.СоздатьЭлемент();
	НоваяОрганизация.Заполнить(Неопределено);
	НоваяОрганизация.ЮридическоеФизическоеЛицо = ДанныеЕГР.ЮридическоеФизическоеЛицо;
	Форма.ЗначениеВРеквизитФормы(НоваяОрганизация, "Объект");
	
	// Обработка заполнения по умолчанию
	ОрганизацииФормыДляОтчетности.ЗаполнитьДаннымиЕГР(ОтветДанныхЕГР, Форма);
	
КонецПроцедуры

// Получает сведения об учредителях, коды ОКВЭД, размер уставного капитала.
//
// Параметры:
//   ИННЗапрос        - Строка - ИНН, для которого следует получить информацию.
//   АдресРезультата  - Строка.
//
Процедура ПолучитьИнформациюОбУчредителяхИКодахОКВЭДВФоне(ИННЗапрос, АдресРезультата = Неопределено) Экспорт
	
	ИНН = СокрЛП(ИННЗапрос);
	ЭтоЮридическоеЛицо = (СтрДлина(ИНН) = 10);
	Если ЭтоЮридическоеЛицо Тогда
		ИнформацияОСвязях = ДанныеЕдиныхГосРеестров.ИнформацияОСвязяхЮридическогоЛицаПоИНН(ИНН);
	Иначе
		ИнформацияОСвязях = ДанныеЕдиныхГосРеестров.ИнформацияОСвязяхПредпринимателяПоИНН(ИНН);
	КонецЕсли;
	ПоместитьВоВременноеХранилище(ИнформацияОСвязях, АдресРезультата);
	
КонецПроцедуры

// Процедура заполнения дополнительных реквизитов формы и объекта после заполнения из ЕГР.
//
Процедура ЗаполнитьДополнительныеРеквизитыПоДаннымЕГР(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Форма.РуководительНаименование = ФИО(Форма.РуководительФамилия, Форма.РуководительИмя, Форма.РуководительОтчество);
	
	Если Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		ШаблонИННиОГРН = НСтр("ru = 'ИНН %1, ОГРНИП %2'");
	Иначе
		ШаблонИННиОГРН = НСтр("ru = 'ИНН %1, ОГРН %2'");
	КонецЕсли;
	Форма.ИННиОГРН = СтрШаблон(ШаблонИННиОГРН, Объект.ИНН, Объект.ОГРН);
	
	Если Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		
		Объект.НаименованиеСокращенное = ОрганизацииФормыКлиентСервер.СокращенноеНаименованиеИндивидульногоПредпринимателя(
			Объект.ФамилияИП, Объект.ИмяИП, Объект.ОтчествоИП);
		
		Объект.НаименованиеПолное = ОрганизацииФормыКлиентСервер.ПолноеНаименованиеИндивидульногоПредпринимателя(
			Объект.ФамилияИП, Объект.ИмяИП, Объект.ОтчествоИП);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Форма.НаименованиеСокращенное) Тогда
		Форма.НаименованиеСокращенное = Объект.НаименованиеСокращенное;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Форма.НаименованиеПолное) Тогда
		Форма.НаименованиеПолное = Объект.НаименованиеПолное;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Форма.КодОКВЭД2) Тогда
		Форма.КодОКВЭД2 = Объект.КодОКВЭД2;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет сведения об учредителях, коды ОКВЭД, размер уставного капитала.
//
// Параметры:
//   ИнформацияОСвязях - Структура - см. ДанныеЕдиныхГосРеестров.НоваяИнформацияОСвязяхЮридическогоЛица()
//                       результат запроса к сервису, возвращающему информацию о связях юридического лица,
//                       его руководителей и учредителей с другими лицами по данным ЕГРЮЛ
//   Форма  - УправляемаяФорма - форма РегистрацияОрганизации.ВнесениеИзмененийЕГР
//
Процедура ЗаполнитьИнформацияОСвязях(ИнформацияОСвязях, Форма) Экспорт
	
	Объект = Форма.Объект;
	
	ИнформацияОСвязях.Свойство("УставныйКапитал", Форма.УставныйКапитал);
	
	Форма.Учредители.Очистить();
	Если ИнформацияОСвязях.Свойство("Учредители") Тогда
		
		МассивКоэффициентов = ИнформацияОСвязях.Учредители.ВыгрузитьКолонку("СуммаКапитала");
		МассивДолей = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(100, МассивКоэффициентов, 2);
		
		Для Индекс = 0 По ИнформацияОСвязях.Учредители.Количество() - 1 Цикл
			
			Учредитель = ИнформацияОСвязях.Учредители[Индекс];
			
			НоваяСтрока = Форма.Учредители.Добавить();
			НоваяСтрока.Наименование  = Учредитель.Учредитель;
			НоваяСтрока.ДоляУчастия   = ?(МассивДолей <> Неопределено, МассивДолей[Индекс], 0);
			НоваяСтрока.ИНН           = Учредитель.ИНН;
			НоваяСтрока.СуммаВзноса   = Учредитель.СуммаКапитала;
			НоваяСтрока.ТипУчредителя = ТипУчредителя(Учредитель);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Форма.ВидыДеятельности.Очистить();
	Если ИнформацияОСвязях.Свойство("ВидыДеятельности") Тогда
		
		ТаблицаВидовДеятельности = ИнформацияОСвязях.ВидыДеятельности;
		ТаблицаВидовДеятельности.Колонки.КодОКВЭД.Имя          = "Код";
		ТаблицаВидовДеятельности.Колонки.НаименованиеОКВЭД.Имя = "Наименование";
		
		ОсновнойКод = ?(ЗначениеЗаполнено(Объект.КодОКВЭД2), Объект.КодОКВЭД2, "");
		ДополнительныеКоды = Новый Массив;
		Для Каждого ВидДеятельности Из ТаблицаВидовДеятельности Цикл
			Если ВидДеятельности.ЭтоОКВЭД2 Тогда
				ЗаполнитьЗначенияСвойств(Форма.ВидыДеятельности.Добавить(), ВидДеятельности);
				Если ВидДеятельности.Код <> ОсновнойКод Тогда
					ДополнительныеКоды.Добавить(ВидДеятельности.Код);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Объект.ДополнительныеКодыОКВЭД2 = СтрСоединить(ДополнительныеКоды, ";");
		
	КонецЕсли;
	
	Если Форма.ВидыДеятельности.Количество() = 0
		И ЗначениеЗаполнено(Объект.КодОКВЭД2) Тогда
		НоваяСтрока = Форма.ВидыДеятельности.Добавить();
		НоваяСтрока.Код = Объект.КодОКВЭД2;
	КонецЕсли;
	
КонецПроцедуры

Функция ТипУчредителя(Учредитель)
	
	ДлинаИНН = СтрДлина(СокрЛП(Учредитель.ИНН));
	Если ДлинаИНН = 10 Тогда
		Возврат Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	ИначеЕсли ДлинаИНН = 12 Тогда
		Возврат Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	КонецЕсли;
	
	ДопустимоВФИОКромеКириллицы = "-. 0123456789";
	Если Не СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(Учредитель.Учредитель, Истина, ДопустимоВФИОКромеКириллицы) Тогда
		Возврат Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	КонецЕсли;
	
	Возврат Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	
КонецФункции

// Процедура отложенного заполнения наименований видов деятельности в коллекции формы.
// Из ЕГРЮЛ возвращаются только коды ОКВЭД, наименования заполняем из макета при необходимости.
// Например, перед открытием формы ИзменениеВидовДеятельности.
//
// Параметры:
//   КоллекцияВидовДеятельности - ДанныеФормыКоллекция с колонками:
//     * Код - Строка - код ОКВЭД
//     * ЭтоОКВЭД2 - Булево - Истина, если это ОКВЭД2
//     * Наименование - Строка - наименование вида деятельности
//
Процедура ЗаполнитьНаименованияВидовДеятельности(КоллекцияВидовДеятельности) Экспорт
	
	Перем ОКВЭД, ОКВЭД2;
	
	Для Каждого ВидДеятельности Из КоллекцияВидовДеятельности Цикл
		
		Если ВидДеятельности.ЭтоОКВЭД2 Тогда
			Если ОКВЭД2 = Неопределено Тогда
				ОКВЭД2 = ОбщегоНазначенияБПВызовСервера.ПолучитьКлассификатор("ОКВЭД2");
			КонецЕсли;
			Классификатор = ОКВЭД2;
		Иначе
			Если ОКВЭД = Неопределено Тогда
				ОКВЭД = ОбщегоНазначенияБПВызовСервера.ПолучитьКлассификатор("ОКВЭД");
			КонецЕсли;
			Классификатор = ОКВЭД;
		КонецЕсли;
		
		ВидДеятельности.Наименование = Классификатор[ВидДеятельности.Код];
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ФоноваяЗаписьУчредителей

// Функция фоновой записи сведений об учредителях из ЕГРЮЛ в ИБ.
// Дозаполняет пустые колонки таблицы учредителей и помещает результат во временное хранилище.
//
// Параметры:
//   Учредители - ТаблицаЗначений - таблица с колонками:
//     * Ссылка - СправочникСсылка.ФизическиеЛица, СправочникСсылка.Контрагенты
//     * Наименование - Строка - ФИО физического или наименование юридического лица
//     * ИНН - Строка
//     * ПредставительУчредителя - СправочникСсылка.ФизическиеЛица - представитель юридического лица
//     * ДолжностьПредставителя - СправочникСсылка.Должности - должность представителя юридического лица
//     * ПредставительНаОсновании - Строка - представитель юридического лица
//   АдресРезультата - Строка - адрес временного хранилища для таблицы учредителей
//
Процедура ЗаписатьУчредителей(Знач Учредители, АдресРезультата = Неопределено) Экспорт
	
	УчредителиПоИНН = УчредителиПоИНН(ОбщегоНазначения.ВыгрузитьКолонку(Учредители, "ИНН", Истина));
	
	НачатьТранзакцию();
	Попытка
		
		Для Каждого Учредитель Из Учредители Цикл
			
			Если ЗначениеЗаполнено(Учредитель.Ссылка) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Учредитель.ТипУчредителя = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
				Если Не ПустаяСтрока(Учредитель.ИНН) Тогда
					ДанныеЗаполнения = ДанныеЕдиныхГосРеестров.РеквизитыЮридическогоЛицаПоИНН(Учредитель.ИНН);
					Если ЗначениеЗаполнено(ДанныеЗаполнения.ОписаниеОшибки) Тогда
						ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
								УровеньЖурналаРегистрации.Ошибка,
								Метаданные.Справочники.Контрагенты,
								,
								ДанныеЗаполнения.ОписаниеОшибки);
						ВызватьИсключение ДанныеЗаполнения.ОписаниеОшибки;
					КонецЕсли;
					ЗаписатьУчредителяЮридическоеЛицо(Учредитель, ДанныеЗаполнения, УчредителиПоИНН);
				ИначеЕсли Не ПустаяСтрока(Учредитель.Наименование) Тогда
					ДанныеЗаполнения = Новый Структура;
					ДанныеЗаполнения.Вставить("Наименование", Учредитель.Наименование);
					ДанныеЗаполнения.Вставить("НаименованиеПолное", Учредитель.Наименование);
					ДанныеЗаполнения.Вставить("НаименованиеСокращенное", Учредитель.Наименование);
					ЗаписатьУчредителяЮридическоеЛицо(Учредитель, ДанныеЗаполнения);
				КонецЕсли;
				
			КонецЕсли;
				
			Если Учредитель.ТипУчредителя = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
				Если Не ПустаяСтрока(Учредитель.ИНН) Или Не ПустаяСтрока(Учредитель.Наименование) Тогда
					ЗаписатьУчредителяФизическоеЛицо(Учредитель, УчредителиПоИНН);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Организации, ,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
		
	КонецПопытки;
	
	ПоместитьВоВременноеХранилище(Учредители, АдресРезультата);
	
КонецПроцедуры

Процедура ЗаписатьУчредителяФизическоеЛицо(Учредитель, УчредителиПоИНН)
	
	Если Не ПустаяСтрока(Учредитель.ИНН) Тогда
		Отбор = Новый Структура("ИНН", Учредитель.ИНН);
		Для Каждого СуществующийУчредитель Из УчредителиПоИНН.НайтиСтроки(Отбор) Цикл
			Если ТипЗнч(СуществующийУчредитель.Ссылка) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				Ссылка = СуществующийУчредитель.Ссылка;
				Наименование = СуществующийУчредитель.Наименование;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли Не ПустаяСтрока(Учредитель.Наименование) Тогда
		ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(Учредитель.Наименование);
		Ссылка = Справочники.Организации.ФизическоеЛицо(ФИО.Фамилия, ФИО.Имя, ФИО.Отчество);
		Наименование = Учредитель.Наименование;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Учредитель.Ссылка = Ссылка;
		Учредитель.Наименование = Наименование;
	Иначе
		ДанныеФизическогоЛица = Обработки.РегистрацияОрганизации.НовыеДанныеФизическогоЛица();
		ЗаполнитьЗначенияСвойств(ДанныеФизическогоЛица, ФизическиеЛицаКлиентСервер.ЧастиИмени(Учредитель.Наименование));
		ОрганизацииФормыКлиентСервер.ОпределитьПолПоОтчеству(ДанныеФизическогоЛица.Пол, ДанныеФизическогоЛица.Отчество);
		ДанныеФизическогоЛица.ИНН = Учредитель.ИНН;
		Учредитель.Ссылка = ЗаписатьФизическоеЛицо(ДанныеФизическогоЛица);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьУчредителяЮридическоеЛицо(Учредитель, ДанныеЗаполнения, УчредителиПоИНН = Неопределено)
	
	Если Не ПустаяСтрока(Учредитель.ИНН) И УчредителиПоИНН <> Неопределено Тогда
		Отбор = Новый Структура("ИНН", Учредитель.ИНН);
		Для Каждого СуществующийУчредитель Из УчредителиПоИНН.НайтиСтроки(Отбор) Цикл
			Если ТипЗнч(СуществующийУчредитель.Ссылка) = Тип("СправочникСсылка.Контрагенты") Тогда
				Ссылка = СуществующийУчредитель.Ссылка;
				Наименование = СуществующийУчредитель.Наименование;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Учредитель.Ссылка = Ссылка;
		Учредитель.Наименование = Наименование;
	Иначе
		КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
		КонтрагентОбъект.Заполнить(ДанныеЗаполнения);
		КонтрагентОбъект.Записать();
		Учредитель.Ссылка = КонтрагентОбъект.Ссылка;
		Учредитель.Наименование = КонтрагентОбъект.НаименованиеПолное;
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("Руководитель") И ДанныеЗаполнения.Руководитель <> Неопределено Тогда
		
		РуководительСсылка = Справочники.Организации.ФизическоеЛицо(
			ДанныеЗаполнения.Руководитель.Фамилия,
			ДанныеЗаполнения.Руководитель.Имя,
			ДанныеЗаполнения.Руководитель.Отчество,
			ДанныеЗаполнения.Руководитель.ИНН);
			
		Если ЗначениеЗаполнено(РуководительСсылка) Тогда
			Учредитель.ПредставительУчредителя = РуководительСсылка;
		Иначе
			ДанныеФизическогоЛица = Обработки.РегистрацияОрганизации.НовыеДанныеФизическогоЛица();
			ЗаполнитьЗначенияСвойств(ДанныеФизическогоЛица, ДанныеЗаполнения.Руководитель);
			ОрганизацииФормыКлиентСервер.ОпределитьПолПоОтчеству(ДанныеФизическогоЛица.Пол, ДанныеФизическогоЛица.Отчество);
			Учредитель.ПредставительУчредителя = ЗаписатьФизическоеЛицо(ДанныеФизическогоЛица);
		КонецЕсли;
		
		Учредитель.ДолжностьПредставителя = РаботаСДолжностямиБППовтИсп.ДолжностьПоНаименованию(ДанныеЗаполнения.Руководитель.Должность);
		Учредитель.ПредставительНаОсновании = НСтр("ru = 'Устава'");
		
	КонецЕсли;
	
КонецПроцедуры

Функция УчредителиПоИНН(МассивИНН)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивИНН", МассивИНН);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка,
	|	Контрагенты.ИНН КАК ИНН,
	|	Контрагенты.НаименованиеПолное КАК Наименование
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН В(&МассивИНН)
	|	И НЕ Контрагенты.ПометкаУдаления
	|	И НЕ Контрагенты.ЭтоГруппа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка,
	|	ФизическиеЛица.ИНН,
	|	ФизическиеЛица.Наименование
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.ИНН В(&МассивИНН)
	|	И НЕ ФизическиеЛица.ПометкаУдаления
	|	И НЕ ФизическиеЛица.ЭтоГруппа";
	
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Индексы.Добавить("ИНН");
	
	Возврат Результат;
	
КонецФункции

Функция ФИО(Фамилия, Имя, Отчество)
	
	Строки = Новый Массив;
	Если Не ПустаяСтрока(Фамилия) Тогда
		Строки.Добавить(Фамилия);
	КонецЕсли;
	Если Не ПустаяСтрока(Имя) Тогда
		Строки.Добавить(Имя);
	КонецЕсли;
	Если Не ПустаяСтрока(Отчество) Тогда
		Строки.Добавить(Отчество);
	КонецЕсли;
	
	Возврат СтрСоединить(Строки, " ");
	
КонецФункции

#КонецОбласти

#Область ПроверкаЗаполненияРеквизитовУчредителей

// Проверяет все ли необходимые реквизиты учредителя заполнены
//
// Параметры:
//   Учредитель - СправочникСсылка.ФизическиеЛица, СправочникСсылка.Контрагенты
//
// Возвращаемое значение:
//   Булево - Истина, если все необходимые реквизиты заполнены
//
Функция РеквизитыУчредителяЗаполнены(Учредитель) Экспорт
	
	Если Не ЗначениеЗаполнено(Учредитель) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Учредитель) = Тип("СправочникСсылка.Контрагенты") Тогда
		Возврат РеквизитыУчредителяКонтрагентаЗаполнены(Учредитель);
	ИначеЕсли ТипЗнч(Учредитель) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Возврат РеквизитыУчредителяФизическогоЛицаЗаполнены(Учредитель);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Функция проверки реквизитов юридического лица
//
// Параметры:
//   Учредитель - СправочникСсылка.Контрагенты
//
// Возвращаемое значение:
//   Булево - Истина, если все необходимые реквизиты заполнены
//
Функция РеквизитыУчредителяКонтрагентаЗаполнены(Учредитель)
	
	ПроверяемыеРеквизиты = "НаименованиеПолное, ИНН, КПП, РегистрационныйНомер, ДатаРегистрации";
	ПроверяемаяКонтактнаяИнформация = "ЮрАдресКонтрагента";
	
	Возврат ПроверитьРеквизитыУчредителя(Учредитель, ПроверяемыеРеквизиты, ПроверяемаяКонтактнаяИнформация);
	
КонецФункции

// Функция проверки реквизитов физического лица
//
// Параметры:
//   Учредитель - СправочникСсылка.ФизическиеЛица
//
// Возвращаемое значение:
//   Булево - Истина, если все необходимые реквизиты заполнены
//
Функция РеквизитыУчредителяФизическогоЛицаЗаполнены(Учредитель)
	
	ПроверяемыеРеквизиты = "Фамилия, Имя, Пол, ДатаРождения";
	ПроверяемаяКонтактнаяИнформация = "АдресПоПропискеФизическиеЛица, ТелефонРабочийФизическиеЛица";
	ПроверяемыеПаспортныеДанные = "Серия, Номер, ДатаВыдачи, КемВыдан, КодПодразделения";
	
	Возврат ПроверитьРеквизитыУчредителя(Учредитель, ПроверяемыеРеквизиты, ПроверяемаяКонтактнаяИнформация, ПроверяемыеПаспортныеДанные);
	
КонецФункции

// Функция проверки заполнения реквизитов учредителя
//
// Параметры:
//   Учредитель - СправочникСсылка.ФизическиеЛица, СправочникСсылка.Контрагенты
//   ПроверяемыеРеквизиты - Строка - имена проверяемых реквизитов объекта разделенные запятыми
//   ПроверяемаяКонтактнаяИнформация - Строка - имена проверяемых видов контактной информации разделенные запятыми
//   ПроверяемыеПаспортныеДанные - Строка - имена проверяемых реквизитов регистра ДокументыФизическихЛиц разделенные запятыми
//
// Возвращаемое значение:
//   Булево - Истина, если все необходимые реквизиты заполнены
//
Функция ПроверитьРеквизитыУчредителя(Учредитель, ПроверяемыеРеквизиты, ПроверяемаяКонтактнаяИнформация = "", ПроверяемыеПаспортныеДанные = "")
	
	ПроверяемыеРеквизиты = СтрЗаменить(ПроверяемыеРеквизиты, " ", "");
	ПроверяемаяКонтактнаяИнформация = СтрЗаменить(ПроверяемаяКонтактнаяИнформация, " ", "");
	ПроверяемыеПаспортныеДанные = СтрЗаменить(ПроверяемыеПаспортныеДанные, " ", "");
	
	// Проверка заполнения значений реквизитов
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Учредитель, ПроверяемыеРеквизиты);
	Для Каждого КлючИЗначение Из ЗначенияРеквизитов Цикл
		ЗначениеРеквизита = КлючИЗначение.Значение;
		Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	// Проверка заполнения контактной информации
	Для Каждого ВидКонтактнойИнформации Из СтрРазделить(ПроверяемаяКонтактнаяИнформация, ",") Цикл
		ЗначениеКонтактнойИнформации = УправлениеКонтактнойИнформацией.ЗначенияКонтактнойИнформацииОбъекта(
			Учредитель,
			Справочники.ВидыКонтактнойИнформации[ВидКонтактнойИнформации]);
		Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	// Проверка заполнения связанных регистров сведений
	Если ТипЗнч(Учредитель) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		ПаспортФизическогоЛица = Новый Структура;
		ПаспортФизическогоЛица.Вставить("Физлицо", Учредитель);
		ПаспортФизическогоЛица.Вставить("ВидДокумента", Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ);
		
		ПаспортныеДанные = РегистрыСведений.ДокументыФизическихЛиц.СрезПоследних(, ПаспортФизическогоЛица);
		Для Каждого РеквизитПаспорта Из СтрРазделить(ПроверяемыеПаспортныеДанные, ",") Цикл
			Если ПаспортныеДанные.Количество() <> 0 Тогда
				ЗначениеРеквизита = ПаспортныеДанные[0][РеквизитПаспорта];
			Иначе
				ЗначениеРеквизита = Неопределено;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ФормированиеДокументовДляВнесенияИзмененийЕГРЮЛиЕГРИП

Процедура СформироватьДокументыДляИзмененияРеквизитов(ПараметрыФормированияДокументов, АдресРезультата = Неопределено) Экспорт
	
	РезультатФормированияДокументов = Новый Структура();
	
	НачатьТранзакцию();
	Попытка
		
		ДанныеОрганизации = ПараметрыФормированияДокументов.ДанныеОрганизации;
		ЭтоЮрЛицо = (ДанныеОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
		
		// Организация
		Если ЭтоЮрЛицо Тогда
			ЗаписатьЮридическоеЛицо(РезультатФормированияДокументов, ДанныеОрганизации);
		Иначе
			ЗаписатьИндивидуальногоПредпринимателя(РезультатФормированияДокументов, ДанныеОрганизации);
		КонецЕсли;
		
		// Учетная политика
		ДанныеУчетнойПолитики = УчетнаяПолитикаПоУмолчанию(ДанныеОрганизации.ЮридическоеФизическоеЛицо);
		ДанныеУчетнойПолитики.Вставить("Организация", РезультатФормированияДокументов.Организация);
		НастройкиУчета.ОчисткаНастроекУчетнойПолитики(РезультатФормированияДокументов.Организация);
		НастройкиУчета.УстановкаПараметровУчетнойПолитикиПоУмолчанию(ДанныеУчетнойПолитики, Истина);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Организации,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Попытка
		
		Если ЭтоЮрЛицо Тогда
			
			// Руководитель
			Если ПараметрыФормированияДокументов.Изменено.Руководитель Тогда
				ЗаписатьСменуРуководителя(РезультатФормированияДокументов,
					ПараметрыФормированияДокументов.ДанныеРуководителя,
					ПараметрыФормированияДокументов.ДанныеОДолжностиРуководителя,
					ПараметрыФормированияДокументов.ДанныеЗаявителя,
					ПараметрыФормированияДокументов.ДанныеОДолжностиНовогоРуководителя);
			Иначе
				// Заявителем является руководитель
				ЗаписатьРуководителя(РезультатФормированияДокументов,
					ПараметрыФормированияДокументов.ДанныеЗаявителя,
					ПараметрыФормированияДокументов.ДанныеОДолжностиРуководителя);
			КонецЕсли;
			
			//Уставный капитал
			ЗаписатьИзменениеУставногоКапитала(РезультатФормированияДокументов,
				ПараметрыФормированияДокументов.ДанныеУставногоКапитала);
			
			АдресКвитанцииНаОплатуГоспошлины = Неопределено;
			Если ПараметрыФормированияДокументов.ИзмененияВносятсяВУчредительныеДокументы Тогда
				// Квитанция на оплату госпошлины из веб-сервиса
				АдресКвитанцииНаОплатуГоспошлины = ДанныеСервисаРегистрации.КвитанцияНаОплатуГоспошлины(
					"ИзмененияВУставеЮрлица",
					ПараметрыФормированияДокументов.ДанныеЗаявителя,
					?(ПараметрыФормированияДокументов.Изменено.Местоположение,
						ДанныеОрганизации.ЮридическийАдресНовыйЗначенияПолей, ДанныеОрганизации.ЮридическийАдресЗначенияПолей),
					СуммаПошлиныЗаВнесениеИзмененийВУчредительныеДокументы());
				// Реквизиты платежа на оплату госпошлины из веб-сервиса
				РеквизитыПлатежа = ДанныеСервисаРегистрации.ПлатежныеРеквизитыОплатаГоспошлины(
					ПараметрыФормированияДокументов.ДанныеЗаявителя,
					?(ПараметрыФормированияДокументов.Изменено.Местоположение,
						ДанныеОрганизации.ЮридическийАдресНовыйЗначенияПолей, ДанныеОрганизации.ЮридическийАдресЗначенияПолей),
					СуммаПошлиныЗаВнесениеИзмененийВУчредительныеДокументы());
				
				Если РеквизитыПлатежа <> Неопределено Тогда
					РезультатФормированияДокументов.Вставить("ПлатежныеРеквизитыОплатаГоспошлины", РеквизитыПлатежа);
				КонецЕсли;
			КонецЕсли;
			
			Если АдресКвитанцииНаОплатуГоспошлины <> Неопределено Тогда
				ПрисоединитьКвитанциюНаОплатуГоспошлиныКОрганизации(
					РезультатФормированияДокументов.Организация, АдресКвитанцииНаОплатуГоспошлины);
			Иначе
				ПометитьНаУдалениеКвитанциюНаОплатуГоспошлины(РезультатФормированияДокументов.Организация);
			КонецЕсли;
		КонецЕсли;
		
		ОпределитьРегистрирующийОрган(
			РезультатФормированияДокументов,
			ЭтоЮрЛицо,
			ПараметрыФормированияДокументов.Изменено,
			ДанныеОрганизации,
			ПараметрыФормированияДокументов.ДанныеЗаявителя);
		// Заявление о регистрации изменений
		СоздатьЗаявлениеРегистрацииИзменений(РезультатФормированияДокументов.Организация, ПараметрыФормированияДокументов);
		
	Исключение
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Организации,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	ПоместитьВоВременноеХранилище(РезультатФормированияДокументов, АдресРезультата);
	
КонецПроцедуры

Процедура ЗаписатьЮридическоеЛицо(РезультатФормированияДокументов, ДанныеОрганизации)
	
	Если ЗначениеЗаполнено(ДанныеОрганизации.Ссылка) Тогда
		ОрганизацияОбъект = ДанныеОрганизации.Ссылка.ПолучитьОбъект();
	Иначе
		СуществующаяОрганизация = Справочники.Организации.НайтиПоИНН(ДанныеОрганизации.ИНН);
		Если ЗначениеЗаполнено(СуществующаяОрганизация) Тогда
			ОрганизацияОбъект = СуществующаяОрганизация.ПолучитьОбъект();
		Иначе
			ОрганизацияОбъект = Справочники.Организации.СоздатьЭлемент();
			ОрганизацияОбъект.Заполнить(Неопределено);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ОрганизацияОбъект, ДанныеОрганизации, , "Ссылка");
	Если ЗначениеЗаполнено(ДанныеОрганизации.КодОКВЭД2Новый) Тогда
		ОрганизацияОбъект.КодОКВЭД2          = ДанныеОрганизации.КодОКВЭД2Новый;
		ОрганизацияОбъект.НаименованиеОКВЭД2 = ДанныеОрганизации.НаименованиеОКВЭД2Новое;
	КонецЕсли;
	Если (ЗначениеЗаполнено(ДанныеОрганизации.НаименованиеСокращенноеНовое)
		ИЛИ ЗначениеЗаполнено(ДанныеОрганизации.НаименованиеПолноеНовое)) Тогда
		
		ЗаписатьИсториюНаименованийОрганизации(ОрганизацияОбъект, ДанныеОрганизации);
		ОрганизацияОбъект.НаименованиеСокращенное = ДанныеОрганизации.НаименованиеСокращенноеНовое;
		ОрганизацияОбъект.НаименованиеПолное      = ДанныеОрганизации.НаименованиеПолноеНовое;
	КонецЕсли;
	
	ОрганизацияОбъект.Наименование = ОрганизацииФормыКлиентСервер.НаименованиеПоСокращенномуНаименованию(
		ОрганизацияОбъект.НаименованиеСокращенное);
	
	ОрганизацияОбъект.ВариантНаименованияДляПечатныхФорм = Перечисления.ВариантыНаименованияДляПечатныхФорм.СокращенноеНаименование;
	
	Если ЗначениеЗаполнено(ДанныеОрганизации.ДанныеРегистрацииВНалоговомОрганеНовое.КодНалоговогоОргана) Тогда
		ОрганизацияОбъект.КодНалоговогоОргана = ДанныеОрганизации.ДанныеРегистрацииВНалоговомОрганеНовое.КодНалоговогоОргана;
	Иначе
		ОрганизацияОбъект.КодНалоговогоОргана = ДанныеОрганизации.ДанныеРегистрацииВНалоговомОргане.КодНалоговогоОргана;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОрганизацияОбъект.КодНалоговогоОргана) Тогда
		СуществующаяРегистрация = Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка();
		Если ЗначениеЗаполнено(ОрганизацияОбъект.Ссылка) Тогда
			СуществующаяРегистрация = Справочники.РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане(
										ОрганизацияОбъект.Ссылка, 
										ОрганизацияОбъект.КПП,
										ОрганизацияОбъект.КодНалоговогоОргана);
		КонецЕсли;
		Если ЗначениеЗаполнено(СуществующаяРегистрация) Тогда
			ОрганизацияОбъект.РегистрацияВНалоговомОргане = СуществующаяРегистрация;
		Иначе
			ОрганизацияОбъект.РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.ПолучитьСсылку(Новый УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеОрганизации.ЮридическийАдресНовыйЗначенияПолей) Тогда
		
		ЗаписатьИсториюАдресовОрганизации(
			ОрганизацияОбъект,
			ДанныеОрганизации.ЮридическийАдресЗначенияПолей,
			ДанныеОрганизации.ЮридическийАдресНовыйЗначенияПолей,
			ДанныеОрганизации.ДатаРешения);
			
		ЗаписатьАдресОрганизации(ОрганизацияОбъект, ДанныеОрганизации.ЮридическийАдресНовыйЗначенияПолей);
	Иначе
		ЗаписатьАдресОрганизации(ОрганизацияОбъект, ДанныеОрганизации.ЮридическийАдресЗначенияПолей);
	КонецЕсли;
	
	ОрганизацияОбъект.ДополнительныеСвойства.Вставить("ОрганизацияЗарегистрирована", Ложь);
	ОрганизацияОбъект.Записать();
	РезультатФормированияДокументов.Вставить("Организация", ОрганизацияОбъект.Ссылка);
	
	Если ЗначениеЗаполнено(ДанныеОрганизации.ДанныеРегистрацииВНалоговомОрганеНовое.КодНалоговогоОргана) Тогда
		ЗаписатьРегистрациюВНалоговомОргане(ОрганизацияОбъект.Ссылка, ОрганизацияОбъект.КПП, ДанныеОрганизации.ДанныеРегистрацииВНалоговомОрганеНовое);
		
		// Очистим историю регистраций в налоговом органе.
		НаборЗаписей = РегистрыСведений.ИсторияРегистрацийВНалоговомОргане.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СтруктурнаяЕдиница.Установить(ОрганизацияОбъект.Ссылка);
		
		// Запишем прежнюю регистрацию в историю.
		СтрокаНабораЗаписей = НаборЗаписей.Добавить();
		СтрокаНабораЗаписей.СтруктурнаяЕдиница = ОрганизацияОбъект.Ссылка;
		СтрокаНабораЗаписей.Период = РегистрыСведений.ИсторияРегистрацийВНалоговомОргане.ДатаОтсчетаПериодическихСведений();
		Если ДанныеОрганизации.ДанныеРегистрацииВНалоговомОрганеНовое.КодНалоговогоОргана = ДанныеОрганизации.ДанныеРегистрацииВНалоговомОргане.КодНалоговогоОргана Тогда
			СтрокаНабораЗаписей.РегистрацияВНалоговомОргане = ОрганизацияОбъект.РегистрацияВНалоговомОргане;
		Иначе
			// Если код налогового органа изменился, то следует создать новую регистрацию.
			ПредыдущаяРегистрация = Справочники.РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане(
				ОрганизацияОбъект.Ссылка,
				ОрганизацияОбъект.КПП,
				ДанныеОрганизации.ДанныеРегистрацииВНалоговомОргане.КодНалоговогоОргана);
			Если НЕ ЗначениеЗаполнено(ПредыдущаяРегистрация) Тогда
				ПредыдущаяРегистрация = Справочники.РегистрацииВНалоговомОргане.ПолучитьСсылку(Новый УникальныйИдентификатор);
			КонецЕсли;
			ЗаписатьРегистрациюВНалоговомОргане(ОрганизацияОбъект.Ссылка, ОрганизацияОбъект.КПП, ДанныеОрганизации.ДанныеРегистрацииВНалоговомОргане, ПредыдущаяРегистрация);
			СтрокаНабораЗаписей.РегистрацияВНалоговомОргане = ПредыдущаяРегистрация;
		КонецЕсли;
		
		// Запишем новую регистрацию в историю.
		СтрокаНабораЗаписей = НаборЗаписей.Добавить();
		СтрокаНабораЗаписей.СтруктурнаяЕдиница          = ОрганизацияОбъект.Ссылка;
		СтрокаНабораЗаписей.РегистрацияВНалоговомОргане = ОрганизацияОбъект.РегистрацияВНалоговомОргане;
		СтрокаНабораЗаписей.Период                      = ДанныеОрганизации.ДатаРешения;
		
		НаборЗаписей.Записать();
		
	Иначе
		ЗаписатьРегистрациюВНалоговомОргане(ОрганизацияОбъект.Ссылка, ОрганизацияОбъект.КПП, ДанныеОрганизации.ДанныеРегистрацииВНалоговомОргане);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьИндивидуальногоПредпринимателя(РезультатФормированияДокументов, ДанныеОрганизации)
	
	ДанныеПредпринимателя = ДанныеОрганизации.ИндивидуальныйПредприниматель;
	
	Если ЗначениеЗаполнено(ДанныеОрганизации.Ссылка) Тогда
		ОрганизацияОбъект = ДанныеОрганизации.Ссылка.ПолучитьОбъект();
	Иначе
		СуществующаяОрганизация = Справочники.Организации.НайтиПоИНН(ДанныеОрганизации.ИНН);
		Если ЗначениеЗаполнено(СуществующаяОрганизация) Тогда
			ОрганизацияОбъект = СуществующаяОрганизация.ПолучитьОбъект();
		Иначе
			ОрганизацияОбъект = Справочники.Организации.СоздатьЭлемент();
			ОрганизацияОбъект.Заполнить(Неопределено);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеПредпринимателя.Ссылка) Тогда
		Если ЗначениеЗаполнено(ОрганизацияОбъект.ИндивидуальныйПредприниматель) Тогда
			ДанныеПредпринимателя.Ссылка = ОрганизацияОбъект.ИндивидуальныйПредприниматель;
		Иначе
			СуществующееФизическоеЛицо = Справочники.Организации.ФизическоеЛицо(
				ДанныеПредпринимателя.Фамилия,
				ДанныеПредпринимателя.Имя,
				ДанныеПредпринимателя.Отчество,
				ДанныеПредпринимателя.ИНН);
			Если СуществующееФизическоеЛицо <> Неопределено Тогда
				ДанныеПредпринимателя.Ссылка = СуществующееФизическоеЛицо;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ИндивидуальныйПредприниматель = ЗаписатьФизическоеЛицо(ДанныеПредпринимателя);
	
	ЗаполнитьЗначенияСвойств(ОрганизацияОбъект, ДанныеОрганизации, , "Ссылка");
	Если ЗначениеЗаполнено(ДанныеОрганизации.КодОКВЭД2Новый) Тогда
		ОрганизацияОбъект.КодОКВЭД2          = ДанныеОрганизации.КодОКВЭД2Новый;
		ОрганизацияОбъект.НаименованиеОКВЭД2 = ДанныеОрганизации.НаименованиеОКВЭД2Новое;
	КонецЕсли;
	
	ОрганизацияОбъект.ИндивидуальныйПредприниматель = ИндивидуальныйПредприниматель;
	ОрганизацияОбъект.ФамилияИП  = ДанныеПредпринимателя.Фамилия;
	ОрганизацияОбъект.ИмяИП      = ДанныеПредпринимателя.Имя;
	ОрганизацияОбъект.ОтчествоИП = ДанныеПредпринимателя.Отчество;
	ОрганизацияОбъект.ИНН        = ДанныеПредпринимателя.ИНН;
	ОрганизацияОбъект.КПП        = "";
	
	ОрганизацияОбъект.НаименованиеСокращенное = ОрганизацииФормыКлиентСервер.СокращенноеНаименованиеИндивидульногоПредпринимателя(
								ОрганизацияОбъект.ФамилияИП, ОрганизацияОбъект.ИмяИП, ОрганизацияОбъект.ОтчествоИП);
	ОрганизацияОбъект.НаименованиеПолное = ОрганизацииФормыКлиентСервер.ПолноеНаименованиеИндивидульногоПредпринимателя(
								ОрганизацияОбъект.ФамилияИП, ОрганизацияОбъект.ИмяИП, ОрганизацияОбъект.ОтчествоИП);
	ОрганизацияОбъект.Наименование = ОрганизацииФормыКлиентСервер.НаименованиеПоСокращенномуНаименованию(
										ОрганизацияОбъект.НаименованиеСокращенное);
	
	ОрганизацияОбъект.ВариантНаименованияДляПечатныхФорм = Перечисления.ВариантыНаименованияДляПечатныхФорм.СокращенноеНаименование;
	
	ОрганизацияОбъект.КодНалоговогоОргана = ДанныеОрганизации.ДанныеРегистрацииВНалоговомОргане.КодНалоговогоОргана;
	
	Если ЗначениеЗаполнено(ОрганизацияОбъект.КодНалоговогоОргана) Тогда
		
		СуществующаяРегистрация = Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка();
		Если ЗначениеЗаполнено(ОрганизацияОбъект.Ссылка) Тогда
			СуществующаяРегистрация = Справочники.РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане(
										ОрганизацияОбъект.Ссылка, 
										"",
										ОрганизацияОбъект.КодНалоговогоОргана);
		КонецЕсли;
		Если ЗначениеЗаполнено(СуществующаяРегистрация) Тогда
			ОрганизацияОбъект.РегистрацияВНалоговомОргане = СуществующаяРегистрация;
		Иначе
			ОрганизацияОбъект.РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.ПолучитьСсылку(Новый УникальныйИдентификатор);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаписатьАдресОрганизации(ОрганизацияОбъект, ДанныеПредпринимателя.АдресПропискиЗначенияПолей);
	
	УправлениеКонтактнойИнформациейБП.ЗаполнитьКонтактнуюИнформациюОбъекта(ОрганизацияОбъект,
			Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, ДанныеПредпринимателя.АдресПропискиЗначенияПолей);
	УправлениеКонтактнойИнформациейБП.ЗаполнитьКонтактнуюИнформациюОбъекта(ОрганизацияОбъект,
			Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации, ДанныеПредпринимателя.ТелефонРабочийЗначенияПолей);
	УправлениеКонтактнойИнформациейБП.ЗаполнитьКонтактнуюИнформациюОбъекта(ОрганизацияОбъект,
			Справочники.ВидыКонтактнойИнформации.EmailОрганизации, ДанныеПредпринимателя.EMailЗначенияПолей);
	
	ОрганизацияОбъект.ДополнительныеСвойства.Вставить("ОрганизацияЗарегистрирована", Ложь);
	ОрганизацияОбъект.Записать();
	
	ЗаписатьРегистрациюВНалоговомОргане(ОрганизацияОбъект.Ссылка, ОрганизацияОбъект.КПП, ДанныеОрганизации.ДанныеРегистрацииВНалоговомОргане);
	
	РезультатФормированияДокументов.Вставить("Организация", ОрганизацияОбъект.Ссылка);
	
КонецПроцедуры

Процедура СоздатьЗаявлениеРегистрацииИзменений(Организация, ПараметрыФормированияДокументов)
	
	ДанныеОрганизации = ПараметрыФормированияДокументов.ДанныеОрганизации;
	ЭтоЮрЛицо = (ДанныеОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	
	КодыФормЗаявлений = КодыФормЗаявленияОРегистрацииИзменений(
		ЭтоЮрЛицо,
		ПараметрыФормированияДокументов.Изменено,
		ПараметрыФормированияДокументов.ИзмененияВносятсяВУчредительныеДокументы,
		ПараметрыФормированияДокументов.ИзмененияТребуютУведомления);
	
	Для Каждого КодФормы Из КодыФормЗаявлений Цикл
		
		ИмяОтчета = СтрШаблон("РегламентированноеУведомлениеФорма%1", КодФормы);
		ПараметрыЗаявления = ПараметрыЗаявленияОРегистрацииИзменений(Организация, ПараметрыФормированияДокументов);
		ЗаявлениеОРегистрации = НайтиЗаявлениеОРегистрации(Организация, КодФормы, ПараметрыФормированияДокументов.ДатаРешения);
		Отчеты[ИмяОтчета].СоздатьЗаполненноеУведомление(ПараметрыЗаявления, ЗаявлениеОРегистрации);
		
	КонецЦикла;
	
	// Помечаем на удаление завления, соданные после решения
	ВсеКодыФорм = КодыФормЗаявлений();
	Для Каждого КлючИЗначение Из ВсеКодыФорм Цикл
		
		КодФормы = КлючИЗначение.Значение;
		Если КодыФормЗаявлений.Найти(КодФормы) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
			
		ЗаявлениеОРегистрации = НайтиЗаявлениеОРегистрации(Организация, КодФормы);
		Если ЗначениеЗаполнено(ЗаявлениеОРегистрации)
			И ЗначениеЗаполнено(ЗаявлениеОРегистрации.Ссылка)
			И ЗаявлениеОРегистрации.Дата >= ПараметрыФормированияДокументов.ДатаРешения Тогда
			
			ЗаявлениеОРегистрации.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция КодыФормЗаявленияОРегистрацииИзменений(ЭтоЮрЛицо, Изменено = Неопределено, ИзмененияВносятсяВУчредительныеДокументы = Ложь, ИзмененияТребуютУведомления = Ложь) Экспорт
	
	КодыФормЗаявлений = КодыФормЗаявлений();
	
	Результат = Новый Массив;
	
	Если ЭтоЮрЛицо Тогда
		Если Не ИзмененияВносятсяВУчредительныеДокументы Или ИзмененияТребуютУведомления Или Изменено.Руководитель Тогда
			Результат.Добавить(КодыФормЗаявлений.ЗаявлениеРегистрацииИзмененийЕГРЮЛ);
		КонецЕсли;
		Если ИзмененияВносятсяВУчредительныеДокументы Тогда
			Результат.Добавить(КодыФормЗаявлений.ЗаявлениеРегистрацииИзмененийУчредительныхДокументов);
		КонецЕсли;
	Иначе
		Результат.Добавить(КодыФормЗаявлений.ЗаявлениеРегистрацииИзмененийЕГРИП);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыЗаявленияОРегистрацииИзменений(Организация, Знач ПараметрыЗаполнения)
	
	ПараметрыЗаполнения.Вставить("Организация", Организация);
	
	ПараметрыЗаявления = Новый Структура;
	ПараметрыЗаявления.Вставить("Организация", Организация);
	ПараметрыЗаявления.Вставить("ДополнительныеПараметры", ПараметрыЗаполнения);
	
	Возврат ПараметрыЗаявления;
	
КонецФункции

Процедура ЗаполнитьЗаявлениеРегистрацииИзмененийУчредительныхДокументов(ПараметрыОтчета, Контейнер) Экспорт
	Перем КодОКВЭД2Новый, ДополнительныеКодыОКВЭД2Новые;
	
	ПараметрыЗаполнения = ПараметрыОтчета.ПараметрыЗаполнения;
	
	Изменено = ПараметрыЗаполнения.Изменено;
	
	Если Изменено.УставныйКапитал Тогда
		ДанныеУчредителей = ДанныеУчредителейОрганизации(ПараметрыОтчета.Организация, ПараметрыЗаполнения.ДатаРешения, Истина);
		Если ДанныеУчредителей = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеРуководителя = ДанныеРуководителяОрганизации(ПараметрыОтчета.Организация, ПараметрыЗаполнения.ДатаРешения, Истина);
	Если ДанныеРуководителя = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СведенияОбОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыОтчета.Организация,
		"ОГРН, ИНН, ДополнительныеКодыОКВЭД2");
		
	СведенияОбОрганизации.Вставить("НаименованиеПолное", ПараметрыЗаполнения.ДанныеОрганизации.НаименованиеПолное);
	СведенияОбОрганизации.Вставить("КодОКВЭД2",          ПараметрыЗаполнения.ДанныеОрганизации.КодОКВЭД2);
	
	ПараметрыЗаполнения.ДанныеОрганизации.Свойство("КодОКВЭД2Новый", КодОКВЭД2Новый);
	ПараметрыЗаполнения.ДанныеОрганизации.Свойство("ДополнительныеКодыОКВЭД2Новые", ДополнительныеКодыОКВЭД2Новые);
	
	СпособРегистрации = ПараметрыЗаполнения.СпособРегистрации;
	
	// Титульный лист
	Контейнер.Лист001.П01010000 = СведенияОбОрганизации.ОГРН;
	Контейнер.Лист001.П01020000 = СведенияОбОрганизации.ИНН;
	Контейнер.Лист001.П01030000 = СведенияОбОрганизации.НаименованиеПолное;
	
	// Лист А "Сведения о наименовании юридического лица"
	// Заполняется в случае изменении полного или сокращенного наименования юридического лица.
	Если Изменено.СокращенноеНаименование Или Изменено.ПолноеНаименование Тогда
		Контейнер.ЛистА.А01000000 = ПараметрыЗаполнения.ДанныеОрганизации.НаименованиеПолноеНовое;
		Контейнер.ЛистА.А02000000 = ПараметрыЗаполнения.ДанныеОрганизации.НаименованиеСокращенноеНовое;
	КонецЕсли;
	
	// Лист Б "Сведения об адресе (месте нахождения) постоянно действующего исполнительного органа".
	// Заполняется в случае изменения юридического адреса.
	Если Изменено.Местоположение
		Или (Изменено.ЮридическийАдрес И ПараметрыЗаполнения.ИзмененияВносятсяВУчредительныеДокументы) Тогда
		
		ЮридическийАдресНовый = ПараметрыЗаполнения.ДанныеОрганизации.ЮридическийАдресНовыйЗначенияПолей;
		СтруктураАдреса = УправлениеКонтактнойИнформациейБП.СтруктураАдреса(ЮридическийАдресНовый);
		ЗаполнитьЗначенияСвойств(Контейнер.ЛистБ, СтруктураАдреса);
		
	КонецЕсли;
	
	// Лист В "Сведения о размере уставного капитала"
	// Заполняется в случае изменения размера уставного капитала.
	// В случае заполнения листа В заявления заполняются также соответственно листы Г, Д, Е, Ж, З, И заявления.
	Если Изменено.УставныйКапитал Тогда
		Контейнер.ЛистВ.В01000000 = "1";
		// Вид изменения, Размер, Дата принятия решения об уменьшении уставного капитала
		Если ДанныеУчредителей.УставныйКапиталДоИзменения < ДанныеУчредителей.УставныйКапитал Тогда
			Контейнер.ЛистВ.В02000000 = "1"; // увеличение уставного капитала
			Контейнер.ЛистВ.В03000000 = ДанныеУчредителей.УставныйКапитал;
			Контейнер.ЛистВ.В04000000 = "";
		ИначеЕсли ДанныеУчредителей.УставныйКапиталДоИзменения > ДанныеУчредителей.УставныйКапитал Тогда
			Контейнер.ЛистВ.В02000000 = "2"; // уменьшение уставного капитала
			Контейнер.ЛистВ.В03000000 = ДанныеУчредителей.УставныйКапитал;
			Контейнер.ЛистВ.В04000000 = ""; // Заполняется вручную
		КонецЕсли;
		// Дата публикации сообщения о принятии решения об уменьшении уставного капитала в органе печати.
		Контейнер.ЛистВ.В05010000 = "";
		Контейнер.ЛистВ.В05020000 = "";
	КонецЕсли;
	
	// Лист Г "Сведения об участнике - российском юридическом лице"
	// Заполняется в случае изменения размера уставного капитала ООО.
	ШаблонЛистаГ = СкопироватьКлючиСтруктуры(Контейнер.ЛистГ[0].Значение);
	Контейнер.ЛистГ.Очистить();
	Если Изменено.УставныйКапитал Тогда
		
		УчастникиЮридическиеЛица = ДанныеУчредителей.Учредители.Скопировать(Новый Структура("ЭтоЮридическоеЛицо", Истина));
		УчастникиЮридическиеЛица.Сортировать("НомерСтроки Возр");
		Для Каждого СтрокаТаблицы Из УчастникиЮридическиеЛица Цикл
			
			НовыйЛист = СкопироватьКлючиСтруктуры(ШаблонЛистаГ);
			СведенияОЮридическомЛице = СтрокаТаблицы.СведенияОЮридическомЛице;
			Если СтрокаТаблицы.СуммаВзносаДоИзменения = 0 Тогда
				// Причина внесения изменений
				НовыйЛист.Г01000000 = "1"; // внесение сведений о новом участнике
				// Сведения об участнике, содержащиеся в ЕГРЮЛ
				НовыйЛист.Г03010000 = СведенияОЮридическомЛице.ОГРН;
				НовыйЛист.Г03020000 = СведенияОЮридическомЛице.ИНН;
				НовыйЛист.Г03030000 = СведенияОЮридическомЛице.ПолноеНаименование;
				// Доля в уставном капитале
				НовыйЛист.Г04010000 = СтрокаТаблицы.СуммаВзноса;
				НовыйЛист.Г04020100 = СтрокаТаблицы.ДоляУставногоКапитала;
			ИначеЕсли СтрокаТаблицы.СуммаВзноса = 0 Тогда
				// Причина внесения изменений
				НовыйЛист.Г01000000 = "2"; // внесение сведений о прекращении участия
				// Сведения об участнике, содержащиеся в ЕГРЮЛ
				НовыйЛист.Г02010000 = СведенияОЮридическомЛице.ОГРН;
				НовыйЛист.Г02020000 = СведенияОЮридическомЛице.ИНН;
				НовыйЛист.Г02030000 = СведенияОЮридическомЛице.ПолноеНаименование;
			Иначе
				// Причина внесения изменений
				НовыйЛист.Г01000000 = "3"; // внесение изменений в сведения об участнике
				// Сведения об участнике, содержащиеся в ЕГРЮЛ
				НовыйЛист.Г02010000 = СведенияОЮридическомЛице.ОГРН;
				НовыйЛист.Г02020000 = СведенияОЮридическомЛице.ИНН;
				НовыйЛист.Г02030000 = СведенияОЮридическомЛице.ПолноеНаименование;
				// Доля в уставном капитале
				НовыйЛист.Г04010000 = СтрокаТаблицы.СуммаВзноса;
				НовыйЛист.Г04020100 = СтрокаТаблицы.ДоляУставногоКапитала;
			КонецЕсли;
			Контейнер.ЛистГ.Добавить(НовыйЛист);
			
		КонецЦикла;
		
	Иначе
		Контейнер.ЛистГ.Добавить(ШаблонЛистаГ);
	КонецЕсли;
	
	// Лист Д "Сведения об участнике - иностранном юридическом лице"
	// Заполняется в случае изменения размера уставного капитала ООО.
	ШаблонЛистаД = СкопироватьКлючиСтруктуры(Контейнер.ЛистД[0].Значение);
	Контейнер.ЛистД.Очистить();
	Контейнер.ЛистД.Добавить(ШаблонЛистаД);
	
	// Лист Е "Сведения об участнике - физическом лице"
	// Заполняется в случае изменения размера уставного капитала ООО.
	ШаблонЛистаЕ = СкопироватьКлючиСтруктуры(Контейнер.ЛистЕ[0].Значение);
	Контейнер.ЛистЕ.Очистить();
	Если Изменено.УставныйКапитал Тогда
		
		УчастникиФизическиеЛица = ДанныеУчредителей.Учредители.Скопировать(Новый Структура("ЭтоЮридическоеЛицо", Ложь));
		УчастникиФизическиеЛица.Сортировать("НомерСтроки Возр");
		Для Каждого СтрокаТаблицы Из УчастникиФизическиеЛица Цикл
			
			НовыйЛист = СкопироватьКлючиСтруктуры(ШаблонЛистаЕ);
			СведенияОФизическомЛице = СтрокаТаблицы.СведенияОФизическомЛице;
			Если СтрокаТаблицы.СуммаВзносаДоИзменения = 0 Тогда
				// Причина внесения изменений
				НовыйЛист.Е01000000 = "1"; // внесение сведений о новом участнике
				// Сведения об участнике, вносимые в ЕГРЮЛ
				// ФИО
				НовыйЛист.Е03010100 = СведенияОФизическомЛице.Фамилия;
				НовыйЛист.Е03010200 = СведенияОФизическомЛице.Имя;
				НовыйЛист.Е03010300 = СведенияОФизическомЛице.Отчество;
				// ИНН
				НовыйЛист.Е03020000 = СведенияОФизическомЛице.ИНН;
				// Дата и место рождения
				НовыйЛист.Е03030100 = Формат(СведенияОФизическомЛице.ДатаРождения, "Л=ru; ДФ=dd.MM.yyyy");
				НовыйЛист.Е03030200 = СведенияОФизическомЛице.МестоРожденияПредставление;
				// Паспортные данные
				НовыйЛист.Е03050100 = СведенияОФизическомЛице.ДокументКодМВД;
				НовыйЛист.Е03050200 = "" + СведенияОФизическомЛице.ДокументСерия + " " + СведенияОФизическомЛице.ДокументНомер;
				НовыйЛист.Е03050300 = Формат(СведенияОФизическомЛице.ДокументДатаВыдачи, "Л=ru; ДФ=dd.MM.yyyy");
				НовыйЛист.Е03050400 = СведенияОФизическомЛице.ДокументКемВыдан;
				ЧастиКодаПодразделения = СтрРазделить("" + СведенияОФизическомЛице.ДокументКодПодразделения, "-", Ложь);
				Если ЧастиКодаПодразделения.Количество() = 2 Тогда
					НовыйЛист.Е03050501 = ЧастиКодаПодразделения[0];
					НовыйЛист.Е03050502 = ЧастиКодаПодразделения[1];
				КонецЕсли;
				// Адрес
				ЗаполнитьЗначенияСвойств(НовыйЛист, СведенияОФизическомЛице.АдресСтруктурой);
				// Доля в уставном капитале
				НовыйЛист.Е04010000 = СтрокаТаблицы.СуммаВзноса;
				НовыйЛист.Е04020100 = СтрокаТаблицы.ДоляУставногоКапитала;
			ИначеЕсли СтрокаТаблицы.СуммаВзноса = 0 Тогда
				// Причина внесения изменений
				НовыйЛист.Е01000000 = "2"; // внесение сведений о прекращении участия
				// Сведения об участнике, содержащиеся в ЕГРЮЛ
				// ФИО
				НовыйЛист.Е02010100 = СведенияОФизическомЛице.Фамилия;
				НовыйЛист.Е02010200 = СведенияОФизическомЛице.Имя;
				НовыйЛист.Е02010300 = СведенияОФизическомЛице.Отчество;
				// ИНН
				НовыйЛист.Е02020000 = СведенияОФизическомЛице.ИНН;
			Иначе
				// Причина внесения изменений
				НовыйЛист.Е01000000 = "3"; // внесение изменений в сведения об участнике
				// Сведения об участнике, содержащиеся в ЕГРЮЛ
				// ФИО
				НовыйЛист.Е02010100 = СведенияОФизическомЛице.Фамилия;
				НовыйЛист.Е02010200 = СведенияОФизическомЛице.Имя;
				НовыйЛист.Е02010300 = СведенияОФизическомЛице.Отчество;
				// ИНН
				НовыйЛист.Е02020000 = СведенияОФизическомЛице.ИНН;
				// Доля в уставном капитале
				НовыйЛист.Е04010000 = СтрокаТаблицы.СуммаВзноса;
				НовыйЛист.Е04020100 = СтрокаТаблицы.ДоляУставногоКапитала;
			КонецЕсли;
			Контейнер.ЛистЕ.Добавить(НовыйЛист);
			
		КонецЦикла;
		
	Иначе
		Контейнер.ЛистЕ.Добавить(ШаблонЛистаЕ);
	КонецЕсли;
	
	// Лист Ж "Сведения об участнике - Российской Федерации, субъекте Российской Федерации, муниципальном образовании"
	ШаблонЛистаЖ = СкопироватьКлючиСтруктуры(Контейнер.ЛистЖ1[0].Значение);
	Контейнер.ЛистЖ1.Очистить();
	Контейнер.ЛистЖ1.Добавить(ШаблонЛистаЖ);
	
	// Лист З "Сведения о паевом инвестиционном фонде, в состав имущества которого включена доля в уставном капитале юридического лица"
	ШаблонЛистаЗ = СкопироватьКлючиСтруктуры(Контейнер.ЛистЗ[0].Значение);
	Контейнер.ЛистЗ.Очистить();
	Контейнер.ЛистЗ.Добавить(ШаблонЛистаЗ);
	
	// Лист И "Сведения о доле в уставном капитале общества с ограниченной ответственностью, принадлежащей обществу"
	// Заполняется в случае уменьшения уставного капитала общества с ограниченной ответственностью за счет погашения доли, принадлежащей обществу.
	ШаблонЛистаИ = СкопироватьКлючиСтруктуры(Контейнер.ЛистИ[0].Значение);
	Контейнер.ЛистИ.Очистить();
	Контейнер.ЛистИ.Добавить(ШаблонЛистаИ);
	
	// Лист К заявления "Сведения о филиале/представительстве" 
	// Заполняется в случае, если вносимые в учредительные документы юридического лица изменения связаны с изменением сведений
	//  о филиале и (или) представительстве юридического лица.
	ШаблонЛистаК = СкопироватьКлючиСтруктуры(Контейнер.ЛистК[0].Значение);
	Контейнер.ЛистК.Очистить();
	Контейнер.ЛистК.Добавить(ШаблонЛистаК);
	
	// Лист Л "Сведения о кодах по ОКВЭД"
	Если Изменено.ОсновнойВидДеятельности Тогда
		// Страница 1: Сведения о кодах ОКВЭД, подлежащие внесению в ЕГРЮЛ
		Контейнер.ЛистЛ1.А01010000 = КодОКВЭД2Новый;
		// Страница 2: Сведения о кодах ОКВЭД, подлежащие исключению из ЕГРЮЛ
		Контейнер.ЛистЛ2.А01010000 = СведенияОбОрганизации.КодОКВЭД2;
	КонецЕсли;
	Если Изменено.ВидыДеятельности Тогда
		ДополнительныеКодыОКВЭД2Новые = СтрРазделить(ДополнительныеКодыОКВЭД2Новые, ";", Ложь);
		ДополнительныеКодыОКВЭД2      = СтрРазделить(СведенияОбОрганизации.ДополнительныеКодыОКВЭД2, ";", Ложь);
		// Страница 1: Сведения о кодах ОКВЭД, подлежащие внесению в ЕГРЮЛ
		Контейнер.МногострочнаяЧасть1.Очистить();
		Для Каждого ДополнительныйКод Из ДополнительныеКодыОКВЭД2Новые Цикл
			Если ДополнительныеКодыОКВЭД2.Найти(ДополнительныйКод) = Неопределено Тогда
				Контейнер.МногострочнаяЧасть1.Добавить().А01020000 = ДополнительныйКод;
			КонецЕсли;
		КонецЦикла;
		// Страница 2: Сведения о кодах ОКВЭД, подлежащие исключению из ЕГРЮЛ
		Контейнер.МногострочнаяЧасть2.Очистить();
		Для Каждого ДополнительныйКод Из ДополнительныеКодыОКВЭД2 Цикл
			Если ДополнительныеКодыОКВЭД2Новые.Найти(ДополнительныйКод) = Неопределено Тогда
				Контейнер.МногострочнаяЧасть2.Добавить().А01020000 = ДополнительныйКод;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Лист М "Сведения о заявителе"
	СведенияОЗаявителе = ДанныеРуководителя.СведенияОФизическомЛице;
	// Вид заявителя
	Контейнер.ЛистМ.М01000000 = 1; // 1 - руководитель постоянно действующего исполнительного органа
	// ФИО
	Контейнер.ЛистМ.М03010100 = СведенияОЗаявителе.Фамилия;
	Контейнер.ЛистМ.М03010200 = СведенияОЗаявителе.Имя;
	Контейнер.ЛистМ.М03010300 = СведенияОЗаявителе.Отчество;
	// ИНН
	Контейнер.ЛистМ.М03020000 = СведенияОЗаявителе.ИНН;
	// Дата и место рождения
	Контейнер.ЛистМ.М03030100 = Формат(СведенияОЗаявителе.ДатаРождения, "Л=ru; ДФ=dd.MM.yyyy");
	Контейнер.ЛистМ.М03030200 = СведенияОЗаявителе.МестоРожденияПредставление;
	// Паспортные данные
	Контейнер.ЛистМ.М03040100 = СведенияОЗаявителе.ДокументКодМВД;
	Контейнер.ЛистМ.М03040200 = "" + СведенияОЗаявителе.ДокументСерия + " " + СведенияОЗаявителе.ДокументНомер;
	Контейнер.ЛистМ.М03040300 = Формат(СведенияОЗаявителе.ДокументДатаВыдачи, "Л=ru; ДФ=dd.MM.yyyy");
	Контейнер.ЛистМ.М03040400 = СведенияОЗаявителе.ДокументКемВыдан;
	ЧастиКодаПодразделения = СтрРазделить("" + СведенияОЗаявителе.ДокументКодПодразделения, "-", Ложь);
	Если ЧастиКодаПодразделения.Количество() = 2 Тогда
		Контейнер.ЛистМ.М03040501 = ЧастиКодаПодразделения[0];
		Контейнер.ЛистМ.М03040502 = ЧастиКодаПодразделения[1];
	КонецЕсли;
	// Адрес
	ЗаполнитьЗначенияСвойств(Контейнер.ЛистМ, СведенияОЗаявителе.АдресСтруктурой);
	// Телефон
	Контейнер.ЛистМ.М03060100 = СведенияОЗаявителе.Телефон;
	Контейнер.ЛистМ.М03060200 = СведенияОЗаявителе.Email;
	// Получение документов
	Контейнер.ЛистМ.М04000000 = СпособРегистрации;
	
КонецПроцедуры

Процедура ЗаполнитьЗаявлениеРегистрацииИзмененийЕГРЮЛ(ПараметрыОтчета, Контейнер) Экспорт
	Перем КодОКВЭД2Новый, ДополнительныеКодыОКВЭД2Новые;
	
	ПараметрыЗаполнения = ПараметрыОтчета.ПараметрыЗаполнения;
	
	Изменено = ПараметрыЗаполнения.Изменено;
	
	Если Изменено.Руководитель Тогда
		ИсторияРуководителей = ИсторияРуководителейОрганизации(ПараметрыОтчета.Организация);
		КоличествоРуководителей = ИсторияРуководителей.Количество();
		Если КоличествоРуководителей > 0 Тогда
			ДанныеНовогоРуководителя = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ИсторияРуководителей[0]);
			ЗаполнитьПодробнуюИнформациюОРуководителе(ДанныеНовогоРуководителя);
			СведенияОЗаявителе = ДанныеНовогоРуководителя.СведенияОФизическомЛице;
			Если КоличествоРуководителей > 1 Тогда
				ДанныеПрежнегоРуководителя = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ИсторияРуководителей[1]);
				ЗаполнитьПодробнуюИнформациюОРуководителе(ДанныеПрежнегоРуководителя);
				СведенияОРуководителе = ДанныеПрежнегоРуководителя.СведенияОФизическомЛице;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ДанныеРуководителя = ДанныеРуководителяОрганизации(ПараметрыОтчета.Организация, ПараметрыЗаполнения.ДатаРешения, Истина);
		Если ДанныеРуководителя <> Неопределено Тогда
			СведенияОЗаявителе = ДанныеРуководителя.СведенияОФизическомЛице;
		КонецЕсли;
	КонецЕсли;
	
	Если СведенияОЗаявителе = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Изменено.Учредители И Не Изменено.УставныйКапитал Тогда
		ДанныеУчредителей = ДанныеУчредителейОрганизации(ПараметрыОтчета.Организация, ПараметрыЗаполнения.ДатаРешения, Истина);
		Если ДанныеУчредителей = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СведенияОбОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыОтчета.Организация,
		"ОГРН, ИНН, ДополнительныеКодыОКВЭД2");
	СведенияОбОрганизации.Вставить("НаименованиеПолное", ПараметрыЗаполнения.ДанныеОрганизации.НаименованиеПолное);
	СведенияОбОрганизации.Вставить("КодОКВЭД2",          ПараметрыЗаполнения.ДанныеОрганизации.КодОКВЭД2);
	
	ПараметрыЗаполнения.ДанныеОрганизации.Свойство("КодОКВЭД2Новый", КодОКВЭД2Новый);
	ПараметрыЗаполнения.ДанныеОрганизации.Свойство("ДополнительныеКодыОКВЭД2Новые", ДополнительныеКодыОКВЭД2Новые);
	
	СпособРегистрации = ПараметрыЗаполнения.СпособРегистрации;
	
	// Титульный лист
	Контейнер.Лист001.П01010000 = СведенияОбОрганизации.ОГРН;
	Контейнер.Лист001.П01020000 = СведенияОбОрганизации.ИНН;
	Контейнер.Лист001.П01030000 = СведенияОбОрганизации.НаименованиеПолное;
	// Заявление представлено
	Контейнер.Лист001.П02000000 = "1"; // в связи с изменением сведений о юридическом лице
	
	// Лист А "Сведения о наименовании юридического лица"
	// Заполняется в случае исправления ошибки в наименовании или полном наименовании юридического лица,
	// допущенной заявителем в ранее представленном заявлении.
	ШаблонЛистаА = СкопироватьКлючиСтруктуры(Контейнер.ЛистА);
	ЗаполнитьЗначенияСвойств(Контейнер.ЛистА, ШаблонЛистаА);
	
	// Лист Б "Сведения об адресе (месте нахождения) постоянно действующего исполнительного органа"
	// Заполняется в случае изменения юридического адреса
	Если Изменено.ЮридическийАдрес Тогда
		ЮридическийАдресНовый = ПараметрыЗаполнения.ДанныеОрганизации.ЮридическийАдресНовыйЗначенияПолей;
		СтруктураАдреса = УправлениеКонтактнойИнформациейБП.СтруктураАдреса(ЮридическийАдресНовый);
		ЗаполнитьЗначенияСвойств(Контейнер.ЛистБ, СтруктураАдреса);
	Иначе
		ШаблонЛистаБ = СкопироватьКлючиСтруктуры(Контейнер.ЛистБ);
		ЗаполнитьЗначенияСвойств(Контейнер.ЛистБ, ШаблонЛистаБ);
	КонецЕсли;
	
	// Лист В "Сведения об участнике - российском юридическом лице"
	// Заполняется при изменении состава участников общества
	ШаблонЛистаВ = СкопироватьКлючиСтруктуры(Контейнер.ЛистВ1[0].Значение);
	Контейнер.ЛистВ1.Очистить();
	Если Изменено.Учредители И Не Изменено.УставныйКапитал Тогда
		
		УчастникиЮридическиеЛица = ДанныеУчредителей.Учредители.Скопировать(Новый Структура("ЭтоЮридическоеЛицо", Истина));
		УчастникиЮридическиеЛица.Сортировать("НомерСтроки Возр");
		Для Каждого СтрокаТаблицы Из УчастникиЮридическиеЛица Цикл
			
			Если СтрокаТаблицы.СуммаВзносаДоИзменения = СтрокаТаблицы.СуммаВзноса  Тогда
				Продолжить;
			КонецЕсли;
			
			НовыйЛист = СкопироватьКлючиСтруктуры(ШаблонЛистаВ);
			СведенияОЮридическомЛице = СтрокаТаблицы.СведенияОЮридическомЛице;
			Если СтрокаТаблицы.СуммаВзносаДоИзменения = 0 Тогда
				// Причина внесения изменений
				НовыйЛист.В01000000 = "1"; // внесение сведений о новом участнике
				// Сведения об участнике, вносимые в ЕГРЮЛ
				НовыйЛист.В03010000 = СведенияОЮридическомЛице.ОГРН;
				НовыйЛист.В03020000 = СведенияОЮридическомЛице.ИНН;
				НовыйЛист.В03030000 = СведенияОЮридическомЛице.ПолноеНаименование;
				// Доля в уставном капитале
				НовыйЛист.В04010000 = СтрокаТаблицы.СуммаВзноса;
				НовыйЛист.В04020100 = СтрокаТаблицы.ДоляУставногоКапитала;
			ИначеЕсли СтрокаТаблицы.СуммаВзноса = 0 Тогда
				// Причина внесения изменений
				НовыйЛист.В01000000 = "2"; // внесение сведений о прекращении участия
				// Сведения об участнике, содержащиеся в ЕГРЮЛ
				НовыйЛист.В02010000 = СведенияОЮридическомЛице.ОГРН;
				НовыйЛист.В02020000 = СведенияОЮридическомЛице.ИНН;
				НовыйЛист.В02030000 = СведенияОЮридическомЛице.ПолноеНаименование;
			ИначеЕсли СтрокаТаблицы.СуммаВзносаДоИзменения <> СтрокаТаблицы.СуммаВзноса Тогда
				// Причина внесения изменений
				НовыйЛист.В01000000 = "3"; // внесение изменений в сведения об участнике
				// Сведения об участнике, содержащиеся в ЕГРЮЛ
				НовыйЛист.В02010000 = СведенияОЮридическомЛице.ОГРН;
				НовыйЛист.В02020000 = СведенияОЮридическомЛице.ИНН;
				НовыйЛист.В02030000 = СведенияОЮридическомЛице.ПолноеНаименование;
				// Доля в уставном капитале
				НовыйЛист.В04010000 = СтрокаТаблицы.СуммаВзноса;
				НовыйЛист.В04020100 = СтрокаТаблицы.ДоляУставногоКапитала;
			КонецЕсли;
			Контейнер.ЛистВ1.Добавить(НовыйЛист);
			
		КонецЦикла;
		
	Иначе
		Контейнер.ЛистВ1.Добавить(ШаблонЛистаВ);
	КонецЕсли;
	
	// Лист Г "Сведения об участнике - иностранном юридическом лице"
	// Заполняется при изменении состава участников общества
	ШаблонЛистаГ = СкопироватьКлючиСтруктуры(Контейнер.ЛистГ1_2[0].Значение);
	Контейнер.ЛистГ1_2.Очистить();
	Контейнер.ЛистГ1_2.Добавить(ШаблонЛистаГ);
	
	// Лист Д "Сведения об участнике - физическом лиц"
	// Заполняется при изменении состава участников общества
	ШаблонЛистаД = СкопироватьКлючиСтруктуры(Контейнер.ЛистД[0].Значение);
	Контейнер.ЛистД.Очистить();
	Если Изменено.Учредители И Не Изменено.УставныйКапитал Тогда
		
		УчастникиФизическиеЛица = ДанныеУчредителей.Учредители.Скопировать(Новый Структура("ЭтоЮридическоеЛицо", Ложь));
		УчастникиФизическиеЛица.Сортировать("НомерСтроки Возр");
		Для Каждого СтрокаТаблицы Из УчастникиФизическиеЛица Цикл
			
			Если СтрокаТаблицы.СуммаВзносаДоИзменения = СтрокаТаблицы.СуммаВзноса Тогда
				Продолжить;
			КонецЕсли;
			
			НовыйЛист = СкопироватьКлючиСтруктуры(ШаблонЛистаД);
			СведенияОФизическомЛице = СтрокаТаблицы.СведенияОФизическомЛице;
			Если СтрокаТаблицы.СуммаВзносаДоИзменения = 0 Тогда
				// Причина внесения изменений
				НовыйЛист.Д01000000 = "1"; // внесение сведений о новом участнике
				// Сведения об участнике, вносимые в ЕГРЮЛ
				// ФИО
				НовыйЛист.Д03010100 = СведенияОФизическомЛице.Фамилия;
				НовыйЛист.Д03010200 = СведенияОФизическомЛице.Имя;
				НовыйЛист.Д03010300 = СведенияОФизическомЛице.Отчество;
				// ИНН
				НовыйЛист.Д03020000 = СведенияОФизическомЛице.ИНН;
				// Дата и место рождения
				НовыйЛист.Д03030100 = Формат(СведенияОФизическомЛице.ДатаРождения, "Л=ru; ДФ=dd.MM.yyyy");
				НовыйЛист.Д03030200 = СведенияОФизическомЛице.МестоРожденияПредставление;
				// Паспортные данные
				НовыйЛист.Д03050100 = СведенияОФизическомЛице.ДокументКодМВД;
				НовыйЛист.Д03050200 = "" + СведенияОФизическомЛице.ДокументСерия + " " + СведенияОФизическомЛице.ДокументНомер;
				НовыйЛист.Д03050300 = Формат(СведенияОФизическомЛице.ДокументДатаВыдачи, "Л=ru; ДФ=dd.MM.yyyy");
				НовыйЛист.Д03050400 = СведенияОФизическомЛице.ДокументКемВыдан;
				ЧастиКодаПодразделения = СтрРазделить("" + СведенияОФизическомЛице.ДокументКодПодразделения, "-", Ложь);
				Если ЧастиКодаПодразделения.Количество() = 2 Тогда
					НовыйЛист.Д03050501 = ЧастиКодаПодразделения[0];
					НовыйЛист.Д03050502 = ЧастиКодаПодразделения[1];
				КонецЕсли;
				// Адрес
				ЗаполнитьЗначенияСвойств(НовыйЛист, СведенияОФизическомЛице.АдресСтруктурой);
				// Доля в уставном капитале
				НовыйЛист.Д04010000 = СтрокаТаблицы.СуммаВзноса;
				НовыйЛист.Д04020100 = СтрокаТаблицы.ДоляУставногоКапитала;
			ИначеЕсли СтрокаТаблицы.СуммаВзноса = 0 Тогда
				// Причина внесения изменений
				НовыйЛист.Д01000000 = "2"; // внесение сведений о прекращении участия
				// Сведения об участнике, содержащиеся в ЕГРЮЛ
				// ФИО
				НовыйЛист.Д02010100 = СведенияОФизическомЛице.Фамилия;
				НовыйЛист.Д02010200 = СведенияОФизическомЛице.Имя;
				НовыйЛист.Д02010300 = СведенияОФизическомЛице.Отчество;
				// ИНН
				НовыйЛист.Д02020000 = СведенияОФизическомЛице.ИНН;
			ИначеЕсли СтрокаТаблицы.СуммаВзносаДоИзменения <> СтрокаТаблицы.СуммаВзноса Тогда
				// Причина внесения изменений
				НовыйЛист.Д01000000 = "3"; // внесение изменений в сведения об участнике
				// Сведения об участнике, содержащиеся в ЕГРЮЛ
				// ФИО
				НовыйЛист.Д02010100 = СведенияОФизическомЛице.Фамилия;
				НовыйЛист.Д02010200 = СведенияОФизическомЛице.Имя;
				НовыйЛист.Д02010300 = СведенияОФизическомЛице.Отчество;
				// ИНН
				НовыйЛист.Д02020000 = СведенияОФизическомЛице.ИНН;
				// Доля в уставном капитале
				НовыйЛист.Д04010000 = СтрокаТаблицы.СуммаВзноса;
				НовыйЛист.Д04020100 = СтрокаТаблицы.ДоляУставногоКапитала;
			КонецЕсли;
			Контейнер.ЛистД.Добавить(НовыйЛист);
			
		КонецЦикла;
		
	Иначе
		Контейнер.ЛистД.Добавить(ШаблонЛистаД);
	КонецЕсли;
	
	// Лист Е "Сведения об участнике - Российской Федерации, субъекте Российской Федерации, муниципальном образовании"
	// Заполняется при изменении состава участников общества
	ШаблонЛистаЕ1 = СкопироватьКлючиСтруктуры(Контейнер.ЛистЕ1[0].Значение);
	Контейнер.ЛистЕ1.Очистить();
	Контейнер.ЛистЕ1.Добавить(ШаблонЛистаЕ1);
	
	// Лист Ж "Сведения о паевом инвестиционном фонде, в состав имущества которого включена доля в уставном капитале юридического лица"
	// Заполняется при изменении состава участников общества
	ШаблонЛистаЖ = СкопироватьКлючиСтруктуры(Контейнер.ЛистЖ1_2[0].Значение);
	Контейнер.ЛистЖ1_2.Очистить();
	Контейнер.ЛистЖ1_2.Добавить(ШаблонЛистаЖ);
	
	// Лист З "Сведения о доле в уставном капитале общества с ограниченной ответственностью, принадлежащей обществу"
	// Заполняется в случае приобретения обществом с ограниченной ответственностью доли в уставном капитале общества,
	// распределения или продажи принадлежащей обществу доли в уставном капитале общества.
	ШаблонЛистаЗ = СкопироватьКлючиСтруктуры(Контейнер.ЛистЗ);
	ЗаполнитьЗначенияСвойств(Контейнер.ЛистЗ, ШаблонЛистаЗ);
	
	// Лист И заявления "Сведения о держателе реестра акционеров акционерного общества"
	// Заполняется в случае изменения сведений о держателе реестра акционеров акционерного общества.
	ШаблонЛистаИ = СкопироватьКлючиСтруктуры(Контейнер.ЛистИ);
	ЗаполнитьЗначенияСвойств(Контейнер.ЛистИ, ШаблонЛистаИ);
	
	// Лист К "Сведения о физическом лице, имеющем право без доверенности действовать от имени юридического лица"
	// Заполняется при смене руководителя
	ШаблонЛистаК = СкопироватьКлючиСтруктуры(Контейнер.ЛистК[0].Значение);
	Контейнер.ЛистК.Очистить();
	Если Изменено.Руководитель Тогда
		// Новый руководитель
		НовыйЛист = СкопироватьКлючиСтруктуры(ШаблонЛистаК);
		// Причина внесения сведений
		НовыйЛист.К01000000 = "1"; // Возложение полномочий
		// ФИО
		НовыйЛист.К02010100 = СведенияОЗаявителе.Фамилия;
		НовыйЛист.К02010200 = СведенияОЗаявителе.Имя;
		НовыйЛист.К02010300 = СведенияОЗаявителе.Отчество;
		// ИНН
		НовыйЛист.К02020000 = СведенияОЗаявителе.ИНН;
		// Дата и место рождения
		НовыйЛист.К03030100 = Формат(СведенияОЗаявителе.ДатаРождения, "Л=ru; ДФ=dd.MM.yyyy");
		НовыйЛист.К03030200 = СведенияОЗаявителе.МестоРожденияПредставление;
		// Должность
		НовыйЛист.К03040000 = ДанныеНовогоРуководителя.ДолжностьПредставление;
		// Паспортные данные
		НовыйЛист.К03050100 = СведенияОЗаявителе.ДокументКодМВД;
		НовыйЛист.К03050200 = "" + СведенияОЗаявителе.ДокументСерия + " " + СведенияОЗаявителе.ДокументНомер;
		НовыйЛист.К03050300 = Формат(СведенияОЗаявителе.ДокументДатаВыдачи, "Л=ru; ДФ=dd.MM.yyyy");
		НовыйЛист.К03050400 = СведенияОЗаявителе.ДокументКемВыдан;
		ЧастиКодаПодразделения = СтрРазделить("" + СведенияОЗаявителе.ДокументКодПодразделения, "-", Ложь);
		Если ЧастиКодаПодразделения.Количество() = 2 Тогда
			НовыйЛист.К03050501 = ЧастиКодаПодразделения[0];
			НовыйЛист.К03050502 = ЧастиКодаПодразделения[1];
		КонецЕсли;
		// Адрес
		ЗаполнитьЗначенияСвойств(НовыйЛист, СведенияОЗаявителе.АдресСтруктурой);
		// Телефон
		НовыйЛист.К03070000 = СведенияОЗаявителе.Телефон;
		Контейнер.ЛистК.Добавить(НовыйЛист);
		
		// Прежний руководитель
		НовыйЛист = СкопироватьКлючиСтруктуры(ШаблонЛистаК);
		// Причина внесения сведений
		НовыйЛист.К01000000 = "2"; // Прекращение полномочий
		Если СведенияОРуководителе <> Неопределено Тогда
			// ФИО
			НовыйЛист.К02010100 = СведенияОРуководителе.Фамилия;
			НовыйЛист.К02010200 = СведенияОРуководителе.Имя;
			НовыйЛист.К02010300 = СведенияОРуководителе.Отчество;
			// ИНН
			НовыйЛист.К02020000 = СведенияОРуководителе.ИНН;
		КонецЕсли;
		Контейнер.ЛистК.Добавить(НовыйЛист);
	Иначе
		Контейнер.ЛистК.Добавить(ШаблонЛистаК);
	КонецЕсли;
	
	// Лист Л "Сведения об управляющей организации"
	// Заполняется в случае изменений сведений об управляющей организации юридического лица.
	ШаблонЛистаЛ = СкопироватьКлючиСтруктуры(Контейнер.ЛистЛ[0].Значение);
	Контейнер.ЛистЛ.Очистить();
	Контейнер.ЛистЛ.Добавить(ШаблонЛистаЛ);
	
	// Лист М "Сведения об управляющем"
	// Заполняется в случае изменений сведений об управляющем юридического лица.
	ШаблонЛистаМ = СкопироватьКлючиСтруктуры(Контейнер.ЛистМ[0].Значение);
	Контейнер.ЛистМ.Очистить();
	Контейнер.ЛистМ.Добавить(ШаблонЛистаМ);
	
	// Лист Н "Сведения о кодах по Общероссийскому классификатору видов экономической деятельности"
	// Заполняется при изменении кодов ОКВЭД
	Если Изменено.ОсновнойВидДеятельности И Не ПараметрыЗаполнения.ИзмененияВносятсяВУчредительныеДокументы Тогда
		// Страница 1: Сведения о кодах ОКВЭД, подлежащие внесению в ЕГРЮЛ
		Контейнер.ЛистН1.А01010000 = КодОКВЭД2Новый;
		// Страница 2: Сведения о кодах ОКВЭД, подлежащие исключению из ЕГРЮЛ
		Контейнер.ЛистН2.А01010000 = СведенияОбОрганизации.КодОКВЭД2;
	КонецЕсли;
	Если Изменено.ВидыДеятельности И Не ПараметрыЗаполнения.ИзмененияВносятсяВУчредительныеДокументы Тогда
		ДополнительныеКодыОКВЭД2Новые = СтрРазделить(ДополнительныеКодыОКВЭД2Новые, ";", Ложь);
		ДополнительныеКодыОКВЭД2      = СтрРазделить(СведенияОбОрганизации.ДополнительныеКодыОКВЭД2, ";", Ложь);
		// Страница 1: Сведения о кодах ОКВЭД, подлежащие внесению в ЕГРЮЛ
		Контейнер.МногострочнаяЧасть1.Очистить();
		Для Каждого ДополнительныйКод Из ДополнительныеКодыОКВЭД2Новые Цикл
			Если ДополнительныеКодыОКВЭД2.Найти(ДополнительныйКод) = Неопределено Тогда
				Контейнер.МногострочнаяЧасть1.Добавить().А01020000 = ДополнительныйКод;
			КонецЕсли;
		КонецЦикла;
		// Страница 2: Сведения о кодах ОКВЭД, подлежащие исключению из ЕГРЮЛ
		Контейнер.МногострочнаяЧасть2.Очистить();
		Для Каждого ДополнительныйКод Из ДополнительныеКодыОКВЭД2 Цикл
			Если ДополнительныеКодыОКВЭД2Новые.Найти(ДополнительныйКод) = Неопределено Тогда
				Контейнер.МногострочнаяЧасть2.Добавить().А01020000 = ДополнительныйКод;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Лист О "Сведения о филиале/представительстве"
	// Заполняется в случае внесения в Единый государственный реестр юридических лиц сведений о филиале и (или) представительстве,
	// содержащихся в учредительных документах юридического лица, но не отраженных в Едином государственном реестре юридических лиц.
	ШаблонЛистаО = СкопироватьКлючиСтруктуры(Контейнер.ЛистО[0].Значение);
	Контейнер.ЛистО.Очистить();
	Контейнер.ЛистО.Добавить(ШаблонЛистаО);
	
	// Лист П "Сведения о размере уставного капитала (складочного капитала, уставного фонда, паевого фонда)"
	// Заполняется в случае исправления ошибки в сведениях о размере уставного (складочного) капитала, уставного (паевого) фонда,
	// допущенной заявителем в ранее представленном заявлении.
	ШаблонЛистаП = СкопироватьКлючиСтруктуры(Контейнер.ЛистП);
	ЗаполнитьЗначенияСвойств(Контейнер.ЛистП, ШаблонЛистаП);
	
	// Лист Р "Сведения о заявителе"
	НовыйЛист = СкопироватьКлючиСтруктуры(Контейнер.ЛистР[0].Значение);
	Контейнер.ЛистР.Очистить();
	// Вид заявителя
	НовыйЛист.Р01000000 = "01"; // 01 - руководитель постоянно действующего исполнительного органа
	// Сведения о юридическом лице, от имени которого действует заявитель
	НовыйЛист.Р02010000 = СведенияОбОрганизации.ОГРН;
	НовыйЛист.Р02020000 = СведенияОбОрганизации.ИНН;
	НовыйЛист.Р02030000 = ПараметрыЗаполнения.ДанныеОрганизации.НаименованиеПолное;
	// ФИО
	НовыйЛист.Р04010100 = СведенияОЗаявителе.Фамилия;
	НовыйЛист.Р04010200 = СведенияОЗаявителе.Имя;
	НовыйЛист.Р04010300 = СведенияОЗаявителе.Отчество;
	// ИНН
	НовыйЛист.Р04020000 = СведенияОЗаявителе.ИНН;
	// Дата и место рождения
	НовыйЛист.Р04030100 = Формат(СведенияОЗаявителе.ДатаРождения, "Л=ru; ДФ=dd.MM.yyyy");
	НовыйЛист.Р04030200 = СведенияОЗаявителе.МестоРожденияПредставление;
	// Паспортные данные
	НовыйЛист.Р04040100 = СведенияОЗаявителе.ДокументКодМВД;
	НовыйЛист.Р04040200 = "" + СведенияОЗаявителе.ДокументСерия + " " + СведенияОЗаявителе.ДокументНомер;
	НовыйЛист.Р04040300 = Формат(СведенияОЗаявителе.ДокументДатаВыдачи, "Л=ru; ДФ=dd.MM.yyyy");
	НовыйЛист.Р04040400 = СведенияОЗаявителе.ДокументКемВыдан;
	ЧастиКодаПодразделения = СтрРазделить("" + СведенияОЗаявителе.ДокументКодПодразделения, "-", Ложь);
	Если ЧастиКодаПодразделения.Количество() = 2 Тогда
		НовыйЛист.Р04040501 = ЧастиКодаПодразделения[0];
		НовыйЛист.Р04040502 = ЧастиКодаПодразделения[1];
	КонецЕсли;
	// Адрес
	ЗаполнитьЗначенияСвойств(НовыйЛист, СведенияОЗаявителе.АдресСтруктурой);
	// Телефон
	НовыйЛист.Р04060100 = СведенияОЗаявителе.Телефон;
	НовыйЛист.Р04060200 = СведенияОЗаявителе.Email;
	// Получение документов
	НовыйЛист.Р05000000 = СпособРегистрации;
	Контейнер.ЛистР.Добавить(НовыйЛист);
	
КонецПроцедуры

Процедура ЗаполнитьЗаявлениеРегистрацииИзмененийЕГРИП(ПараметрыОтчета, Контейнер) Экспорт
	Перем КодОКВЭД2Новый, ДополнительныеКодыОКВЭД2Новые;
	
	ПараметрыЗаполнения = ПараметрыОтчета.ПараметрыЗаполнения;
	
	Изменено = ПараметрыЗаполнения.Изменено;
	
	СведенияОбОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыОтчета.Организация,
		"ОГРН,ФамилияИП,ИмяИП,ОтчествоИП,ИНН,ДополнительныеКодыОКВЭД2");
		
	СведенияОбОрганизации.Вставить("КодОКВЭД2", ПараметрыЗаполнения.ДанныеОрганизации.КодОКВЭД2);
	
	ПараметрыЗаполнения.ДанныеОрганизации.Свойство("КодОКВЭД2Новый", КодОКВЭД2Новый);
	ПараметрыЗаполнения.ДанныеОрганизации.Свойство("ДополнительныеКодыОКВЭД2Новые", ДополнительныеКодыОКВЭД2Новые);
	
	СпособРегистрации = ПараметрыЗаполнения.СпособРегистрации;
	
	// Титульный лист
	// Сведения об индивидуальном предпринимателе, содержащиеся в ЕГРИП
	Контейнер.Лист001.П01010100 = СведенияОбОрганизации.ОГРН;
	Контейнер.Лист001.П01010200 = СведенияОбОрганизации.ФамилияИП;
	Контейнер.Лист001.П01010300 = СведенияОбОрганизации.ИмяИП;
	Контейнер.Лист001.П01010400 = СведенияОбОрганизации.ОтчествоИП;
	Контейнер.Лист001.П01010500 = СведенияОбОрганизации.ИНН;
	// Заявление представлено
	Контейнер.Лист001.П01020100 = "1"; // в связи с изменением сведений об индивидуальном предпринимателе
	
	// Лист А "Сведения о данных индивидуального предпринимателя"
	// Заполняется в случае изменения (исправления) фамилии, имени, отчества, сведений о рождении
	// индивидуального предпринимателя - иностранного гражданина или лица без гражданства.
	ШаблонЛистаА = СкопироватьКлючиСтруктуры(Контейнер.ЛистА);
	ЗаполнитьЗначенияСвойств(Контейнер.ЛистА, ШаблонЛистаА);
	
	// Лист Б "Сведения о гражданстве"
	// Заполняется при изменении гражданства гражданином РФ или иностранным гражданином, приобретении гражданства лицом без гражданства.
	ШаблонЛистаБ = СкопироватьКлючиСтруктуры(Контейнер.ЛистБ);
	ЗаполнитьЗначенияСвойств(Контейнер.ЛистБ, ШаблонЛистаБ);
	
	// Лист В "Сведения о месте пребывания в Российской Федерации"
	// Заполняется в отношении физического лица, не имеющего место жительства на территории РФ.
	ШаблонЛистаВ = СкопироватьКлючиСтруктуры(Контейнер.ЛистВ);
	ЗаполнитьЗначенияСвойств(Контейнер.ЛистВ, ШаблонЛистаВ);
	
	// Лист Г "Сведения о документе, удостоверяющем личность"
	// Заполняется иностранным гражданином или лицом без гражданства.
	ШаблонЛистаГ = СкопироватьКлючиСтруктуры(Контейнер.ЛистГ);
	ЗаполнитьЗначенияСвойств(Контейнер.ЛистГ, ШаблонЛистаГ);
	
	// Лист Д "Сведения о документе, подтверждающем право иностранного гражданина или лица без гражданства
	//        временно или постоянно проживать на территории Российской Федерации"
	// Заполняется в случае изменения данных вида на жительство или разрешения на временное проживание.
	ШаблонЛистаД = СкопироватьКлючиСтруктуры(Контейнер.ЛистД);
	ЗаполнитьЗначенияСвойств(Контейнер.ЛистД, ШаблонЛистаД);
	
	// Лист Е "Сведения о кодах по Общероссийскому классификатору видов экономической деятельности"
	Если Изменено.ОсновнойВидДеятельности Тогда
		// Страница 1: Сведения о кодах ОКВЭД, подлежащие внесению в ЕГРЮЛ
		Контейнер.ЛистЕ1.А01010000 = КодОКВЭД2Новый;
		// Страница 2: Сведения о кодах ОКВЭД, подлежащие исключению из ЕГРЮЛ
		Контейнер.ЛистЕ2.А01010000 = СведенияОбОрганизации.КодОКВЭД2;
	КонецЕсли;
	Если Изменено.ВидыДеятельности Тогда
		ДополнительныеКодыОКВЭД2Новые = СтрРазделить(ДополнительныеКодыОКВЭД2Новые, ";", Ложь);
		ДополнительныеКодыОКВЭД2      = СтрРазделить(СведенияОбОрганизации.ДополнительныеКодыОКВЭД2, ";", Ложь);
		// Страница 1: Сведения о кодах ОКВЭД, подлежащие внесению в ЕГРЮЛ
		Контейнер.МногострочнаяЧасть1.Очистить();
		Для Каждого ДополнительныйКод Из ДополнительныеКодыОКВЭД2Новые Цикл
			Если ДополнительныеКодыОКВЭД2.Найти(ДополнительныйКод) = Неопределено Тогда
				Контейнер.МногострочнаяЧасть1.Добавить().А01020000 = ДополнительныйКод;
			КонецЕсли;
		КонецЦикла;
		// Страница 2: Сведения о кодах ОКВЭД, подлежащие исключению из ЕГРЮЛ
		Контейнер.МногострочнаяЧасть2.Очистить();
		Для Каждого ДополнительныйКод Из ДополнительныеКодыОКВЭД2 Цикл
			Если ДополнительныеКодыОКВЭД2Новые.Найти(ДополнительныйКод) = Неопределено Тогда
				Контейнер.МногострочнаяЧасть2.Добавить().А01020000 = ДополнительныйКод;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Лист Ж
	Контейнер.ЛистЖ.Ж01010000 = ПараметрыЗаполнения.СпособРегистрации;
	Контейнер.ЛистЖ.Ж01020000 = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ПараметрыОтчета.Организация,
		Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
	Контейнер.ЛистЖ.Ж01030000 = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ПараметрыОтчета.Организация,
		Справочники.ВидыКонтактнойИнформации.EmailОрганизации);
	
КонецПроцедуры

// Возвращает сумму государственной пошлины за внесение изменений в учредительные документы
//
// Возвращаемое значение:
//   Число 15, 2
//
Функция СуммаПошлиныЗаВнесениеИзмененийВУчредительныеДокументы() Экспорт
	
	Возврат 800;
	
КонецФункции

// Возвращает сумму государственной пошлины за регистрацию физ.лица в качестве ИП
//
// Возвращаемое значение:
//   Число 15, 2
//
Функция СуммаПошлиныРегистрацияИП()
	
	Возврат 800;
	
КонецФункции

// Возвращает сумму государственной пошлины за регистрацию Юридического лица
//
// Возвращаемое значение:
//   Число 15, 2
//
Функция СуммаПошлиныРегистрацияЮЛ()
	
	Возврат 4000;
	
КонецФункции

// Возвращает учетную политику по умолчанию при внесении изменений в ЕГРЮЛ/ЕГРИП
//
Функция УчетнаяПолитикаПоУмолчанию(ЮридическоеФизическоеЛицо)
	
	ЭтоЮрЛицо = (ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	
	ВидОрганизации = ?(ЭтоЮрЛицо, "ЮридическоеЛицо", "ИндивидуальныйПредприниматель");
	СистемаНалогообложения = "УпрощеннаяДоходы";
	ПлательщикЕНВД = Ложь;
	ПрименяетсяУСНПатент = Ложь;
	
	Возврат РегистрыСведений.НастройкиСистемыНалогообложения.СтруктураУчетнойПолитики(
		ВидОрганизации,
		СистемаНалогообложения,
		ПлательщикЕНВД,
		ПрименяетсяУСНПатент);
	
КонецФункции

Функция СведенияОНалоговомОрганеПоАдресу(Знач Адрес)
	
	Если Не ЗначениеЗаполнено(Адрес) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СведенияОНалоговомОрганеПоАдресу = АдресныйКлассификаторБП.КодыАдреса(Адрес, "Сервис1С");
	
	КодНалоговогоОрганаПоАдресу = Формат(СведенияОНалоговомОрганеПоАдресу.КодИФНСЮЛ, "ЧЦ=4; ЧДЦ=; ЧВН=; ЧГ=0");
	
	Если ЗначениеЗаполнено(КодНалоговогоОрганаПоАдресу) Тогда
		
		Сведения = Новый Структура();
		Сведения.Вставить("КодНалоговогоОргана", КодНалоговогоОрганаПоАдресу);
		Сведения.Вставить("КодПоОКТМО", Формат(СведенияОНалоговомОрганеПоАдресу.ОКТМО, "ЧДЦ=; ЧГ=0"));
		Сведения.Вставить("КодПоОКАТО", Формат(СведенияОНалоговомОрганеПоАдресу.OKATO, "ЧДЦ=; ЧГ=0"));
		
		Возврат Сведения;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ОпределитьРегистрирующийОрган(РезультатФормированияДокументов, ЭтоЮрЛицо, Изменено, ДанныеОрганизации, ДанныеЗаявителя)
	
	Если ЭтоЮрЛицо Тогда
		Если Изменено.Местоположение Тогда
			// Изменения регистрируются по новому местоположению
			СведенияОНалоговомОргане = СведенияОНалоговомОрганеПоАдресу(ДанныеОрганизации.ЮридическийАдресНовыйЗначенияПолей);
		Иначе
			// Изменения регистрируются по юридическому адресу
			СведенияОНалоговомОргане = СведенияОНалоговомОрганеПоАдресу(ДанныеОрганизации.ЮридическийАдресЗначенияПолей);
		КонецЕсли;
	Иначе
		// Изменения регистрируются по адресу прописки
		СведенияОНалоговомОргане = СведенияОНалоговомОрганеПоАдресу(ДанныеЗаявителя.АдресПропискиЗначенияПолей);
	КонецЕсли;
	
	Если СведенияОНалоговомОргане <> Неопределено Тогда
		РеквизитыРегистрирующегоОргана = РеквизитыРегистрирующегоОргана(СведенияОНалоговомОргане.КодНалоговогоОргана, Истина);
		Если РеквизитыРегистрирующегоОргана <> Неопределено Тогда
			РезультатФормированияДокументов.Вставить("РеквизитыРегистрирующегоОргана", РеквизитыРегистрирующегоОргана);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоЮрЛицо И Изменено.Местоположение Тогда
		
		СведенияОПрежнемНалоговомОргане = СведенияОНалоговомОрганеПоАдресу(ДанныеОрганизации.ЮридическийАдресЗначенияПолей);
		
		Если СведенияОПрежнемНалоговомОргане <> Неопределено Тогда
			РеквизитыПрежнегоРегистрирующегоОргана = РеквизитыРегистрирующегоОргана(СведенияОПрежнемНалоговомОргане.КодНалоговогоОргана, Истина);
			Если РеквизитыПрежнегоРегистрирующегоОргана <> Неопределено Тогда
				РезультатФормированияДокументов.Вставить("РеквизитыПрежнегоРегистрирующегоОргана", РеквизитыПрежнегоРегистрирующегоОргана);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИнструкцияПоРегистрации

Функция ИнструкцияРегистрацияИзмененийЕГРИП(СпособРегистрации, ДанныеРегистрирующегоОргана, АдресВоВременномХранилище = Неопределено) Экспорт

	ШаблонИнструкции = ПолучитьМакет("ИнструкцияРегистрацияИзмененийЕГРИП");
	Результат = Новый ТабличныйДокумент;
	Результат.ПолеСверху = 5;
	Результат.ПолеСлева  = 10;
	Результат.ПолеСправа = 10;
	
	// Выводим область "Заголовок".
	ОбластьЗаголовка = ШаблонИнструкции.ПолучитьОбласть("Заголовок");
	ТекстЗаголовка = НСтр("ru='Инструкция по внесению изменений ИП'");
	Если СпособРегистрации = 2 Тогда
		ТекстЗаголовка = СтрШаблон("%1" + Символы.ПС + "%2",
			ТекстЗаголовка,
			НСтр("ru='через представителя'"));
	ИначеЕсли СпособРегистрации = 3 Тогда
		ТекстЗаголовка = СтрШаблон("%1" + Символы.ПС + "%2",
			ТекстЗаголовка,
			НСтр("ru='по почте'"));
	КонецЕсли;
	ОбластьЗаголовка.Параметры.Заголовок                    = ТекстЗаголовка;
	ОбластьЗаголовка.НижнийКолонтитул.Выводить              = Истина;
	ОбластьЗаголовка.НижнийКолонтитул.ТекстСлева            = ОбщегоНазначенияБП.ДомашняяСтраницаСервиса();
	ОбластьЗаголовка.НижнийКолонтитул.ТекстВЦентре          = ИмяПрограммы();
	ОбластьЗаголовка.НижнийКолонтитул.НачальнаяСтраница     = 1;
	ОбластьЗаголовка.НижнийКолонтитул.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	Результат.Вывести(ОбластьЗаголовка);
	
	НомерШага = 0;
	
	ПараметрыНомераШагов = Новый Структура;
	ПараметрыИнструкции = НовыеПараметрыИнструкцииВнесенияИзменений();
	ПараметрыИнструкции.СпособРегистрации  = СпособРегистрации;
	ПараметрыИнструкции.ЕстьАдресИнспекции = ЗначениеЗаполнено(ДанныеРегистрирующегоОргана.НаименованиеФНС);
	
	Если СпособРегистрации <> 1 Тогда // Способ регистрации не "Лично".
		// Выводим область "Сходите к нотариусу".
		Область = ПолучитьОбластьИнструкцииВнесенияИзменений("ЗаверениеКопийУНотариуса", ШаблонИнструкции, ПараметрыИнструкции);
		ПараметрыНомераШагов.Вставить("НомерШага", УвеличитьЗначениеНаЕдиницу(НомерШага));
		Область.Параметры.Заполнить(ПараметрыНомераШагов);
		Результат.Вывести(Область);
	КонецЕсли;
	
	// Выводим область "Подготовка документов".
	Область = ПолучитьОбластьИнструкцииВнесенияИзменений("ПодготовкаДокументов", ШаблонИнструкции, ПараметрыИнструкции);
	ПараметрыНомераШагов.Вставить("НомерШага", УвеличитьЗначениеНаЕдиницу(НомерШага));
	Область.Параметры.Заполнить(ПараметрыНомераШагов);
	Результат.Вывести(Область);
	
	// Выводим область "Подача документов".
	Область = ПолучитьОбластьИнструкцииВнесенияИзменений("ПодачаДокументов", ШаблонИнструкции, ПараметрыИнструкции);
	ПараметрыНомераШагов.Вставить("НомерШага", УвеличитьЗначениеНаЕдиницу(НомерШага));
	Область.Параметры.Заполнить(ПараметрыНомераШагов);
	Область.Параметры.Заполнить(ДанныеРегистрирующегоОргана);
	Результат.Вывести(Область);
	
	// Выводим область "Получение документов".
	Область = ПолучитьОбластьИнструкцииВнесенияИзменений("ПолучениеДокументов", ШаблонИнструкции, ПараметрыИнструкции);
	ПараметрыНомераШагов.Вставить("НомерШага", УвеличитьЗначениеНаЕдиницу(НомерШага));
	Область.Параметры.Заполнить(ПараметрыНомераШагов);
	Результат.Вывести(Область);
	
	ИмяФайла = ПолучитьИмяВременногоФайла("pdf");
	Результат.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.PDF);
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
	Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные, АдресВоВременномХранилище);
	УдалитьФайлы(ИмяФайла);
	
	Возврат Адрес;
	
КонецФункции

Функция ИнструкцияРегистрацияИзмененийОООБезСменыАдреса(РеквизитыНалоговыхОрганов, ПараметрыФормирования, АдресВоВременномХранилище = Неопределено) Экспорт
	
	Если ПараметрыФормирования.НесколькоУчредителей Тогда
		ШаблонИнструкции = ПолучитьМакет("ИнструкцияРегистрацияИзмененийЕГРЮЛНесколькоУчредителей");
	Иначе
		ШаблонИнструкции = ПолучитьМакет("ИнструкцияРегистрацияИзмененийЕГРЮЛОдинУчредитель");
	КонецЕсли;
	
	Результат = Новый ТабличныйДокумент;
	Результат.ПолеСверху = 5;
	Результат.ПолеСлева  = 10;
	Результат.ПолеСправа = 10;
	
	ПараметрыИнструкции = НовыеПараметрыИнструкцииВнесенияИзменений();
	ПараметрыИнструкции.ЕстьАдресИнспекции = ЗначениеЗаполнено(РеквизитыНалоговыхОрганов.ДанныеРегистрирующегоОргана.НаименованиеФНС);
	ПараметрыИнструкции.ЕстьПлатежныеРеквизиты = (РеквизитыНалоговыхОрганов.ПлатежныеРеквизиты <> Неопределено);
	
	ЗаполнитьЗначенияСвойств(ПараметрыИнструкции, ПараметрыФормирования);
	
	// Выводим область "Заголовок".
	ОбластьЗаголовка = ШаблонИнструкции.ПолучитьОбласть("Заголовок");
	ТекстЗаголовка = НСтр("ru='Инструкция по внесению изменений ООО'");
	Если ПараметрыИнструкции.СпособРегистрации = 2 Тогда
		ТекстЗаголовка = СтрШаблон("%1" + Символы.ПС + "%2",
			ТекстЗаголовка,
			НСтр("ru='через представителя'"));
	ИначеЕсли ПараметрыИнструкции.СпособРегистрации = 3 Тогда
		ТекстЗаголовка = СтрШаблон("%1" + Символы.ПС + "%2",
			ТекстЗаголовка,
			НСтр("ru='по почте'"));
	КонецЕсли;
	ОбластьЗаголовка.Параметры.Заголовок                    = ТекстЗаголовка;
	ОбластьЗаголовка.НижнийКолонтитул.Выводить              = Истина;
	ОбластьЗаголовка.НижнийКолонтитул.ТекстСлева            = ОбщегоНазначенияБП.ДомашняяСтраницаСервиса();
	ОбластьЗаголовка.НижнийКолонтитул.ТекстВЦентре          = ИмяПрограммы();
	ОбластьЗаголовка.НижнийКолонтитул.НачальнаяСтраница     = 1;
	ОбластьЗаголовка.НижнийКолонтитул.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	
	Результат.Вывести(ОбластьЗаголовка);
	
	НомерШага = 0;
	
	// Выводим область "Собрание учредителей".
	Если ПараметрыИнструкции.НесколькоУчредителей Тогда
		Область = ПолучитьОбластьИнструкцииВнесенияИзменений("ПроведениеСобранияУчредителей", ШаблонИнструкции, ПараметрыИнструкции);
		ПараметрыНомераШагов = Новый Структура;
		ПараметрыНомераШагов.Вставить("НомерШага", УвеличитьЗначениеНаЕдиницу(НомерШага));
		Область.Параметры.Заполнить(ПараметрыНомераШагов);
		Результат.Вывести(Область);
	КонецЕсли;
	
	// Выводим область "Сходите к нотариусу".
	Область = ПолучитьОбластьИнструкцииВнесенияИзменений("ЗаверениеЗаявленийУНотариуса", ШаблонИнструкции, ПараметрыИнструкции);
	ПараметрыНомераШагов = Новый Структура;
	ПараметрыНомераШагов.Вставить("НомерШага", УвеличитьЗначениеНаЕдиницу(НомерШага));
	Если ПараметрыИнструкции.НесколькоУчредителей Тогда
		НомерПункта = 1; // Первый пункт в макете - Доверенность на руководителя.
	Иначе
		НомерПункта = 0;
	КонецЕсли;
	Если ПараметрыИнструкции.СпособРегистрации = 2 Тогда
		ПараметрыНомераШагов.Вставить("НомерПунктаНотариальнаяДоверенность", УвеличитьЗначениеНаЕдиницу(НомерПункта));
	КонецЕсли;
	Если ПараметрыИнструкции.ИзмененияТребуютУведомления Тогда
		ПараметрыНомераШагов.Вставить("НомерПунктаЗаявлениеР14001", УвеличитьЗначениеНаЕдиницу(НомерПункта));
	КонецЕсли;
	Если ПараметрыИнструкции.ИзмененияВносятсяВУчредительныеДокументы Тогда
		ПараметрыНомераШагов.Вставить("НомерПунктаЗаявлениеР13001", УвеличитьЗначениеНаЕдиницу(НомерПункта));
	КонецЕсли;
	Область.Параметры.Заполнить(ПараметрыНомераШагов);
	Результат.Вывести(Область);
	
	Если ПараметрыИнструкции.ИзмененияВносятсяВУчредительныеДокументы Тогда
		Результат.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	// Выводим область "Подготовка документов".
	Область = ПолучитьОбластьИнструкцииВнесенияИзменений("ПодготовкаДокументов", ШаблонИнструкции, ПараметрыИнструкции);
	ПараметрыПодготовкаДокументов = Новый Структура;
	ПараметрыПодготовкаДокументов.Вставить("НомерШага", УвеличитьЗначениеНаЕдиницу(НомерШага));
	ПараметрыПодготовкаДокументов.Вставить("СуммаПошлины", СуммаПошлиныЗаВнесениеИзмененийВУчредительныеДокументы());
	Если ПараметрыИнструкции.НесколькоУчредителей Тогда
		НомерПункта = 1; // Первый пункт в макете - Доверенность на руководителя.
	Иначе
		НомерПункта = 0;
	КонецЕсли;
	
	Если ПараметрыИнструкции.НесколькоУчредителей Тогда
		Если ПараметрыИнструкции.СпособРегистрации = 2 Тогда
			ПараметрыПодготовкаДокументов.Вставить("НомерПунктаДокументУдостоверяющийЛичность", УвеличитьЗначениеНаЕдиницу(НомерПункта));
		КонецЕсли;
	ИначеЕсли ПараметрыИнструкции.СпособРегистрации <> 3 Тогда
		ПараметрыПодготовкаДокументов.Вставить("НомерПунктаДокументУдостоверяющийЛичность", УвеличитьЗначениеНаЕдиницу(НомерПункта));
	КонецЕсли;
	ПараметрыПодготовкаДокументов.Вставить("НомерПунктаРешение", УвеличитьЗначениеНаЕдиницу(НомерПункта));
	Если ПараметрыИнструкции.ИзмененияТребуютУведомления Тогда
		ПараметрыПодготовкаДокументов.Вставить("НомерПунктаР14001", УвеличитьЗначениеНаЕдиницу(НомерПункта));
	КонецЕсли;
	Если ПараметрыИнструкции.ИзмененияВносятсяВУчредительныеДокументы Тогда
		ПараметрыПодготовкаДокументов.Вставить("НомерПунктаР13001",    УвеличитьЗначениеНаЕдиницу(НомерПункта));
		ПараметрыПодготовкаДокументов.Вставить("НомерПунктаУстав",     УвеличитьЗначениеНаЕдиницу(НомерПункта));
		ПараметрыПодготовкаДокументов.Вставить("НомерПунктаКвитанция", УвеличитьЗначениеНаЕдиницу(НомерПункта));
		Если ПараметрыИнструкции.ЕстьПлатежныеРеквизиты Тогда
			Область.Параметры.Заполнить(РеквизитыНалоговыхОрганов.ПлатежныеРеквизиты);
		КонецЕсли;
	КонецЕсли;
	
	Область.Параметры.Заполнить(ПараметрыПодготовкаДокументов);
	Результат.Вывести(Область);
	
	// Выводим область "Подача документов".
	Область = ПолучитьОбластьИнструкцииВнесенияИзменений("ПодачаДокументов", ШаблонИнструкции, ПараметрыИнструкции);
	ПараметрыНомераШагов = Новый Структура;
	ПараметрыНомераШагов.Вставить("НомерШага", УвеличитьЗначениеНаЕдиницу(НомерШага));
	Область.Параметры.Заполнить(ПараметрыНомераШагов);
	Область.Параметры.Заполнить(РеквизитыНалоговыхОрганов.ДанныеРегистрирующегоОргана);
	Результат.Вывести(Область);
	
	// Выводим область "Получение документов".
	Область = ПолучитьОбластьИнструкцииВнесенияИзменений("ПолучениеДокументов", ШаблонИнструкции, ПараметрыИнструкции);
	ПараметрыНомераШагов = Новый Структура;
	ПараметрыНомераШагов.Вставить("НомерШага", УвеличитьЗначениеНаЕдиницу(НомерШага));
	Область.Параметры.Заполнить(ПараметрыНомераШагов);
	Результат.Вывести(Область);
	
	ИмяФайла = ПолучитьИмяВременногоФайла("pdf");
	Результат.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.PDF);
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
	Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные, АдресВоВременномХранилище);
	УдалитьФайлы(ИмяФайла);
	
	Возврат Адрес;
	
КонецФункции

Функция ИнструкцияРегистрацияИзмененийОООСменаМестоположение(РеквизитыНалоговыхОрганов, ПараметрыФормирования, АдресВоВременномХранилище = Неопределено) Экспорт
	
	Если ПараметрыФормирования.НесколькоУчредителей Тогда
		ШаблонИнструкции = ПолучитьМакет("ИнструкцияРегистрацияИзмененийЕГРЮЛНесколькоУчредителейСменаМестоположения");
	Иначе
		ШаблонИнструкции = ПолучитьМакет("ИнструкцияРегистрацияИзмененийЕГРЮЛОдинУчредительСменаМестоположения");
	КонецЕсли;
	
	Результат = Новый ТабличныйДокумент;
	Результат.ПолеСверху = 5;
	Результат.ПолеСлева  = 10;
	Результат.ПолеСправа = 10;
	
	ПараметрыИнструкции = НовыеПараметрыИнструкцииВнесенияИзменений();
	ПараметрыИнструкции.ЕстьАдресИнспекции = 
		ЗначениеЗаполнено(РеквизитыНалоговыхОрганов.ДанныеРегистрирующегоОргана.НаименованиеФНС);
	ПараметрыИнструкции.ЕстьАдресПрежнейИнспекции = 
		ЗначениеЗаполнено(РеквизитыНалоговыхОрганов.ДанныеПрежнегоРегистрирующегоОргана.НаименованиеФНС);
	ПараметрыИнструкции.ЕстьПлатежныеРеквизиты = (РеквизитыНалоговыхОрганов.ПлатежныеРеквизиты <> Неопределено);
	ЗаполнитьЗначенияСвойств(ПараметрыИнструкции, ПараметрыФормирования);
	
	// Выводим область "Заголовок".
	ОбластьЗаголовка = ШаблонИнструкции.ПолучитьОбласть("Заголовок");
	ТекстЗаголовка = НСтр("ru='Инструкция по внесению изменений ООО'");
	Если ПараметрыИнструкции.СпособРегистрации = 2 Тогда
		ТекстЗаголовка = СтрШаблон("%1" + Символы.ПС + "%2",
			ТекстЗаголовка,
			НСтр("ru='через представителя'"));
	ИначеЕсли ПараметрыИнструкции.СпособРегистрации = 3 Тогда
		ТекстЗаголовка = СтрШаблон("%1" + Символы.ПС + "%2",
			ТекстЗаголовка,
			НСтр("ru='по почте'"));
	КонецЕсли;
	ОбластьЗаголовка.Параметры.Заголовок                    = ТекстЗаголовка;
	ОбластьЗаголовка.НижнийКолонтитул.Выводить              = Истина;
	ОбластьЗаголовка.НижнийКолонтитул.ТекстСлева            = ОбщегоНазначенияБП.ДомашняяСтраницаСервиса();
	ОбластьЗаголовка.НижнийКолонтитул.ТекстВЦентре          = ИмяПрограммы();
	ОбластьЗаголовка.НижнийКолонтитул.НачальнаяСтраница     = 1;
	ОбластьЗаголовка.НижнийКолонтитул.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	
	Результат.Вывести(ОбластьЗаголовка);
	
	НомерШага = 0;
	
	// Выводим область "Собрание учредителей".
	Если ПараметрыИнструкции.НесколькоУчредителей Тогда
		Область = ПолучитьОбластьИнструкцииВнесенияИзменений("ПроведениеСобранияУчредителей", ШаблонИнструкции, ПараметрыИнструкции);
		ПараметрыНомераШагов = Новый Структура;
		ПараметрыНомераШагов.Вставить("НомерШага", УвеличитьЗначениеНаЕдиницу(НомерШага));
		Область.Параметры.Заполнить(ПараметрыНомераШагов);
		Результат.Вывести(Область);
	КонецЕсли;

	// Выводим область "Сходите к нотариусу".
	Область = ПолучитьОбластьИнструкцииВнесенияИзменений("ЗаверениеЗаявленийУНотариуса", ШаблонИнструкции, ПараметрыИнструкции);
	ПараметрыНомераШагов = Новый Структура;
	ПараметрыНомераШагов.Вставить("НомерШага", УвеличитьЗначениеНаЕдиницу(НомерШага));
	Если ПараметрыИнструкции.НесколькоУчредителей Тогда
		НомерПункта = 1; // Первый пункт в макете - Доверенность на руководителя.
	Иначе
		НомерПункта = 0;
	КонецЕсли;
	Если ПараметрыИнструкции.СпособРегистрации = 2 Тогда
		ПараметрыНомераШагов.Вставить("НомерПунктаНотариальнаяДоверенность", УвеличитьЗначениеНаЕдиницу(НомерПункта));
	КонецЕсли;
	ПараметрыНомераШагов.Вставить("НомерПунктаЗаявлениеР14001", УвеличитьЗначениеНаЕдиницу(НомерПункта));
	ПараметрыНомераШагов.Вставить("НомерПунктаЗаявлениеР13001", УвеличитьЗначениеНаЕдиницу(НомерПункта));
	Область.Параметры.Заполнить(ПараметрыНомераШагов);
	Результат.Вывести(Область);
	
	// Выводим область "Подготовка документов".
	Область = ПолучитьОбластьИнструкцииВнесенияИзменений("ПодготовкаДокументов", ШаблонИнструкции, ПараметрыИнструкции);
	ПараметрыПодготовкаДокументов = Новый Структура;
	ПараметрыПодготовкаДокументов.Вставить("НомерШага", УвеличитьЗначениеНаЕдиницу(НомерШага));
	ПараметрыПодготовкаДокументов.Вставить("СуммаПошлины", СуммаПошлиныЗаВнесениеИзмененийВУчредительныеДокументы());
	
	НомерПункта = 0;
	
	Если ПараметрыИнструкции.НесколькоУчредителей Тогда
		Если ПараметрыИнструкции.СпособРегистрации = 2 Тогда
			ПараметрыПодготовкаДокументов.Вставить("НомерПунктаДокументУдостоверяющийЛичность", УвеличитьЗначениеНаЕдиницу(НомерПункта));
		КонецЕсли;
	ИначеЕсли ПараметрыИнструкции.СпособРегистрации <> 3 Тогда
		ПараметрыПодготовкаДокументов.Вставить("НомерПунктаДокументУдостоверяющийЛичность", УвеличитьЗначениеНаЕдиницу(НомерПункта));
	КонецЕсли;
	ПараметрыПодготовкаДокументов.Вставить("НомерПунктаРешение",   УвеличитьЗначениеНаЕдиницу(НомерПункта));
	ПараметрыПодготовкаДокументов.Вставить("НомерПунктаР14001",    УвеличитьЗначениеНаЕдиницу(НомерПункта));
	ПараметрыПодготовкаДокументов.Вставить("НомерПунктаР13001",    УвеличитьЗначениеНаЕдиницу(НомерПункта));
	ПараметрыПодготовкаДокументов.Вставить("НомерПунктаУстав",     УвеличитьЗначениеНаЕдиницу(НомерПункта));
	ПараметрыПодготовкаДокументов.Вставить("НомерПунктаКвитанция", УвеличитьЗначениеНаЕдиницу(НомерПункта));
	ПараметрыПодготовкаДокументов.Вставить("НомерПунктаАдрес",     УвеличитьЗначениеНаЕдиницу(НомерПункта));
	Если ПараметрыИнструкции.ЕстьПлатежныеРеквизиты Тогда
		Область.Параметры.Заполнить(РеквизитыНалоговыхОрганов.ПлатежныеРеквизиты);
	КонецЕсли;
	
	Область.Параметры.Заполнить(ПараметрыПодготовкаДокументов);
	Результат.Вывести(Область);
	
	// Выводим область "Подача документов в прежнюю налоговую".
	Область = ПолучитьОбластьИнструкцииВнесенияИзменений("ПодачаДокументовВПрежнююНалоговую", ШаблонИнструкции, ПараметрыИнструкции);
	ПараметрыНомераШагов = Новый Структура;
	ПараметрыНомераШагов.Вставить("НомерШага", УвеличитьЗначениеНаЕдиницу(НомерШага));
	Область.Параметры.Заполнить(ПараметрыНомераШагов);
	Область.Параметры.Заполнить(РеквизитыНалоговыхОрганов.ДанныеПрежнегоРегистрирующегоОргана);
	Результат.Вывести(Область);
	
	// Выводим область "Получение документов".
	Область = ПолучитьОбластьИнструкцииВнесенияИзменений("ПолучениеДокументовИзПрежнейНалоговой", ШаблонИнструкции, ПараметрыИнструкции);
	ПараметрыНомераШагов = Новый Структура;
	ПараметрыНомераШагов.Вставить("НомерШага", УвеличитьЗначениеНаЕдиницу(НомерШага));
	Область.Параметры.Заполнить(ПараметрыНомераШагов);
	Результат.Вывести(Область);
	
	// Выводим область "Ожидание".
	Область = ПолучитьОбластьИнструкцииВнесенияИзменений("Ожидание", ШаблонИнструкции, ПараметрыИнструкции);
	ПараметрыНомераШагов = Новый Структура;
	ПараметрыНомераШагов.Вставить("НомерШага", УвеличитьЗначениеНаЕдиницу(НомерШага));
	Область.Параметры.Заполнить(ПараметрыНомераШагов);
	Результат.Вывести(Область);
	
	// Выводим область "Подача документов".
	Область = ПолучитьОбластьИнструкцииВнесенияИзменений("ПодачаДокументов", ШаблонИнструкции, ПараметрыИнструкции);
	ПараметрыНомераШагов = Новый Структура;
	ПараметрыНомераШагов.Вставить("НомерШага", УвеличитьЗначениеНаЕдиницу(НомерШага));
	Область.Параметры.Заполнить(ПараметрыНомераШагов);
	Область.Параметры.Заполнить(РеквизитыНалоговыхОрганов.ДанныеРегистрирующегоОргана);
	Результат.Вывести(Область);
	
	// Выводим область "Получение документов".
	Область = ПолучитьОбластьИнструкцииВнесенияИзменений("ПолучениеДокументов", ШаблонИнструкции, ПараметрыИнструкции);
	ПараметрыНомераШагов = Новый Структура;
	ПараметрыНомераШагов.Вставить("НомерШага", УвеличитьЗначениеНаЕдиницу(НомерШага));
	Область.Параметры.Заполнить(ПараметрыНомераШагов);
	Результат.Вывести(Область);
	
	ИмяФайла = ПолучитьИмяВременногоФайла("pdf");
	Результат.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.PDF);
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
	Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные, АдресВоВременномХранилище);
	УдалитьФайлы(ИмяФайла);
	
	Возврат Адрес;

КонецФункции

Функция ПолучитьОбластьИнструкцииВнесенияИзменений(ИмяОбласти, Шаблон, Параметры)
	
	Область = Шаблон.ПолучитьОбласть(ИмяОбласти);
	
	Если Параметры.СпособРегистрации = 1 Тогда
		
		СпособРегистрацииТекст = "Лично";
		
	ИначеЕсли Параметры.СпособРегистрации = 2 Тогда
		
		СпособРегистрацииТекст = "ЧерезПредставителя";
		
	ИначеЕсли Параметры.СпособРегистрации = 3 Тогда
		
		СпособРегистрацииТекст = "ПоПочте";
		
	КонецЕсли;
	
	// Удалим все вложенные области, которые не содержат в наименовании нужного способа регистрации.
	ВсегоОбластей = Область.Области.Количество();
	
	Для НомерОбласти = 1 По ВсегоОбластей Цикл
		
		ВложеннаяОбласть = Область.Области[ВсегоОбластей-НомерОбласти];
		
		Если ИмяОбласти = ВложеннаяОбласть.Имя Тогда
			
			Продолжить;
			
		ИначеЕсли ВложеннаяОбласть.Имя = "ПлатежныеРеквизиты" Тогда
			
			Если НЕ Параметры.ЕстьПлатежныеРеквизиты Тогда
				Область.УдалитьОбласть(ВложеннаяОбласть, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			КонецЕсли;
			
			
		ИначеЕсли ВложеннаяОбласть.Имя = "ПодтверждениеАдреса" Тогда
			
			Если НЕ Параметры.ЕстьСменаАдреса Тогда
				Область.УдалитьОбласть(ВложеннаяОбласть, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			КонецЕсли;
			
		ИначеЕсли ВложеннаяОбласть.Имя = "ЕстьАдресФНС" Тогда
			
			Если НЕ Параметры.ЕстьАдресИнспекции Тогда
				Область.УдалитьОбласть(ВложеннаяОбласть, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			КонецЕсли;
			
		ИначеЕсли ВложеннаяОбласть.Имя = "НетАдресаФНС" Тогда 
			
			Если Параметры.ЕстьАдресИнспекции Тогда
				Область.УдалитьОбласть(ВложеннаяОбласть, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			КонецЕсли;
			
		ИначеЕсли ВложеннаяОбласть.Имя = "ЕстьАдресПрежнейФНС" Тогда
			
			Если НЕ Параметры.ЕстьАдресПрежнейИнспекции Тогда
				Область.УдалитьОбласть(ВложеннаяОбласть, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			КонецЕсли;
			
		ИначеЕсли ВложеннаяОбласть.Имя = "НетАдресаПрежнейФНС" Тогда 
			
			Если Параметры.ЕстьАдресПрежнейИнспекции Тогда
				Область.УдалитьОбласть(ВложеннаяОбласть, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			КонецЕсли;
		
		ИначеЕсли ВложеннаяОбласть.Имя = "ОдинУчредительЮридическоеЛицо" Тогда
			
			Если НЕ Параметры.ОдинУчредительЮридическоеЛицо Тогда
				Область.УдалитьОбласть(ВложеннаяОбласть, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			КонецЕсли;
			
		ИначеЕсли СтрНайти(ВложеннаяОбласть.Имя, СпособРегистрацииТекст) = 0 Тогда
			
			Область.УдалитьОбласть(ВложеннаяОбласть, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			
		ИначеЕсли СтрЗаканчиваетсяНа(ВложеннаяОбласть.Имя, "Р13001") Тогда
			
			Если НЕ Параметры.ИзмененияВносятсяВУчредительныеДокументы Тогда
				Область.УдалитьОбласть(ВложеннаяОбласть, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			КонецЕсли;
			
		ИначеЕсли СтрЗаканчиваетсяНа(ВложеннаяОбласть.Имя, "Р14001") Тогда
			
			Если НЕ Параметры.ИзмененияТребуютУведомления Тогда
				Область.УдалитьОбласть(ВложеннаяОбласть, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Область;
	
КонецФункции

Функция НовыеПараметрыИнструкцииВнесенияИзменений()
	
	Результат = Новый Структура;
	Результат.Вставить("СпособРегистрации",                        1);
	Результат.Вставить("ЕстьАдресИнспекции",                       Ложь);
	Результат.Вставить("ЕстьАдресПрежнейИнспекции",                Ложь);
	Результат.Вставить("ИзмененияТребуютУведомления",              Ложь);
	Результат.Вставить("ИзмененияВносятсяВУчредительныеДокументы", Ложь);
	Результат.Вставить("ОдинУчредительЮридическоеЛицо",            Ложь);
	Результат.Вставить("НесколькоУчредителей",                     Ложь);
	Результат.Вставить("ЕстьПлатежныеРеквизиты",                   Ложь);
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ИзмененияВРеквизитахОрганизации

// Формирует печатную форму решения учредителей ООО в зависимости от переданного макета
//
// Параметры:
//  Организация - СправочникСсылка.Организации - создаваемая организация.
//  ИмяМакета   - Строка - Имя макета для вывода.
//  ДатаРешения - Дата - Дата решения.
//  УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор формы.
//
// Возвращаемое значение:
//  Строка - адрес во временном хранилище, которое содержит двоичные данные сформированного документа в формате RTF.
//
Функция ПротоколРешениеУчредителейОООДляИзмененияРеквизитов(Знач Организация, Знач ИмяМакета, Знач ДатаРешения, Знач УникальныйИдентификатор) Экспорт
	
	ДанныеПечати = ДанныеПечатиПротоколаРешенияДляИзмененияРеквизитов(Организация, ДатаРешения);
	
	ТекстHTML = Обработки.РегистрацияОрганизации.ПолучитьМакет(ИмяМакета).ПолучитьТекст();
	
	ТекстHTML = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстHTML, ДанныеПечати.ПараметрыПечати);
	
	УдалитьБлокиHTML(ТекстHTML, ДанныеПечати.БлокиКУдалению);
	
	ПодставитьНомераПунктов(ТекстHTML, "[НомерПункта]");
	ПодставитьНомераПунктов(ТекстHTML, "[НомерПунктаПовестка]");
	ПодставитьНомераПунктовТекстом(ТекстHTML);
	
	ДокументРезультат = Новый ФорматированныйДокумент;
	ДокументРезультат.УстановитьHTML(ТекстHTML, Новый Структура());
	
	ИмяФайла = ПолучитьИмяВременногоФайла("rtf");
	ЭлектронноеВзаимодействиеБП.КонвертироватьВФорматRTF(ДокументРезультат, ИмяФайла);
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
	Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
	УдалитьФайлы(ИмяФайла);
	
	Возврат Адрес;
	
КонецФункции

Функция СведенияОбИзмененииРеквизитовООО(Организация, Дата) Экспорт
	
	СведенияОбИзменениях = НовыеСведенияОбИзмененияхООО();
	
	ЭтоЮрЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ЮридическоеФизическоеЛицо")
		= Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	
	КодыФормЗаявлений = КодыФормЗаявлений();
	
	КодыФорм = Новый Массив;
	Если ЭтоЮрЛицо Тогда
		КодыФорм.Добавить(КодыФормЗаявлений.ЗаявлениеРегистрацииИзмененийУчредительныхДокументов);
		КодыФорм.Добавить(КодыФормЗаявлений.ЗаявлениеРегистрацииИзмененийЕГРЮЛ);
	Иначе
		КодыФорм.Добавить(КодыФормЗаявлений.ЗаявлениеРегистрацииИзмененийЕГРИП);
	КонецЕсли;
	
	Для Каждого КодФормы Из КодыФорм Цикл
		ЗаявлениеОРегистрации = Обработки.РегистрацияОрганизации.НайтиЗаявлениеОРегистрации(Организация, КодФормы, Дата);
		Если ЗначениеЗаполнено(ЗаявлениеОРегистрации) И ЗначениеЗаполнено(ЗаявлениеОРегистрации.Ссылка) Тогда
			
			Если КодФормы = КодыФормЗаявлений.ЗаявлениеРегистрацииИзмененийУчредительныхДокументов Тогда
				СведенияОбИзменениях.ИзмененияВносятсяВУчредительныеДокументы = Истина;
			КонецЕсли;
			
			ИмяОтчета = СтрШаблон("РегламентированноеУведомлениеФорма%1", КодФормы);
			
			ДанныеЗаявления = Отчеты[ИмяОтчета].ДанныеУведомления(ЗаявлениеОРегистрации.Ссылка);
			Для Каждого Параметр Из ДанныеЗаявления Цикл
				Если ЗначениеЗаполнено(Параметр.Значение)
					И СведенияОбИзменениях.Свойство(Параметр.Ключ) Тогда
					СведенияОбИзменениях[Параметр.Ключ] = Параметр.Значение;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	СведенияОбИзмененииРуководителя = ДанныеИзмененияРуководителяОрганизации(Организация, Дата, Истина);
	
	Если СведенияОбИзмененииРуководителя <> Неопределено
		И СведенияОбИзмененииРуководителя.Свойство("СведенияОРуководителе") Тогда
		
		СведенияОбИзменениях.Вставить("СведенияОРуководителе", СведенияОбИзмененииРуководителя.СведенияОРуководителе);
		
	КонецЕсли;
	
	Если СведенияОбИзмененииРуководителя <> Неопределено
		И СведенияОбИзмененииРуководителя.Свойство("СведенияОПрежнемРуководителе") Тогда
		
		СведенияОбИзменениях.Вставить("СведенияОПрежнемРуководителе", СведенияОбИзмененииРуководителя.СведенияОПрежнемРуководителе);
		
	КонецЕсли;
	
	Возврат СведенияОбИзменениях;
	
КонецФункции

Функция НовыеСведенияОбИзмененияхООО()
	
	СведенияОбИзменениях = Новый Структура;
	
	СведенияОбИзменениях.Вставить("ИзмененияВносятсяВУчредительныеДокументы", Ложь);
	СведенияОбИзменениях.Вставить("НаименованиеПолное",            "");
	СведенияОбИзменениях.Вставить("НаименованиеСокращенное",       "");
	СведенияОбИзменениях.Вставить("ЮридическийАдрес",              "");
	СведенияОбИзменениях.Вставить("ЮридическийАдресЗначенияПолей", "");
	СведенияОбИзменениях.Вставить("ПрежнийОсновнойКодОКВЭД",       "");
	СведенияОбИзменениях.Вставить("ОсновнойКодОКВЭД",              "");
	СведенияОбИзменениях.Вставить("ДобавленныеКодыОКВЭД",          "");
	СведенияОбИзменениях.Вставить("УдаленныеКодыОКВЭД",            "");
	СведенияОбИзменениях.Вставить("СпособРегистрации",             "");
	СведенияОбИзменениях.Вставить("СведенияОРуководителе",         Неопределено);
	СведенияОбИзменениях.Вставить("СведенияОПрежнемРуководителе",  Неопределено);
	
	Возврат СведенияОбИзменениях;
	
КонецФункции

Процедура УдалитьБлокиHTML(ТекстHTML, БлокиКУдалению)
	
	ЧтениеHTML = Новый ЧтениеHTML;
	ЧтениеHTML.УстановитьСтроку(ТекстHTML);
	
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеHTML);
	
	ЧтениеHTML.Закрыть();
	
	Для Каждого БлокКУдалению Из БлокиКУдалению Цикл
		УдаляемыйБлок = ДокументDOM.ПолучитьЭлементПоИдентификатору(БлокКУдалению);
		Если УдаляемыйБлок <> Неопределено Тогда
			УдаляемыйБлок.РодительскийУзел.УдалитьДочерний(УдаляемыйБлок);
		КонецЕсли;
	КонецЦикла;
	
	ЗаписьHTML = Новый ЗаписьHTML;
	ЗаписьHTML.УстановитьСтроку();
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.Записать(ДокументDOM, ЗаписьHTML);
	
	ТекстHTML = ЗаписьHTML.Закрыть();
	
КонецПроцедуры

Процедура ПодставитьНомераПунктов(ТекстHTML, ТегНомерПункта)
	
	НомерПункта = 0;
	
	ПозицияНомераПункта = СтрНайти(ТекстHTML, ТегНомерПункта);
	Пока ПозицияНомераПункта <> 0 Цикл
		НомерПункта = НомерПункта + 1;
		ТекстHTML = Лев(ТекстHTML, ПозицияНомераПункта - 1)
			+ Формат(НомерПункта, "ЧДЦ=") 
			+ Сред(ТекстHTML, ПозицияНомераПункта + СтрДлина(ТегНомерПункта));
		
		ПозицияНомераПункта = СтрНайти(ТекстHTML, ТегНомерПункта);
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ПодставитьНомераПунктовТекстом(ТекстHTML)
	
	НомерПункта = 0;
	
	ТегНомерПункта = "[НомерПунктаТекстом]";
	ПозицияНомераПункта = СтрНайти(ТекстHTML, ТегНомерПункта);
	Пока ПозицияНомераПункта <> 0 Цикл
		НомерПункта = НомерПункта + 1;
		ТекстHTML = Лев(ТекстHTML, ПозицияНомераПункта - 1)
			+ НомерПунктаТекстом(НомерПункта)
			+ Сред(ТекстHTML, ПозицияНомераПункта + СтрДлина(ТегНомерПункта));
		
		ПозицияНомераПункта = СтрНайти(ТекстHTML, ТегНомерПункта);
	КонецЦикла;
	
	
КонецПроцедуры

Функция НомерПунктаТекстом(НомерПункта)
	
	Если НомерПункта = 1 Тогда
		Возврат НСтр("ru='первому'");
	ИначеЕсли НомерПункта = 2 Тогда
		Возврат НСтр("ru='второму'");
	ИначеЕсли НомерПункта = 3 Тогда
		Возврат НСтр("ru='третьему'");
	ИначеЕсли НомерПункта = 4 Тогда
		Возврат НСтр("ru='четвертому'");
	ИначеЕсли НомерПункта = 5 Тогда
		Возврат НСтр("ru='пятому'");
	ИначеЕсли НомерПункта = 6 Тогда
		Возврат НСтр("ru='шестому'");
	ИначеЕсли НомерПункта = 7 Тогда
		Возврат НСтр("ru='седьмому'");
	ИначеЕсли НомерПункта = 8 Тогда
		Возврат НСтр("ru='восьмому'");
	ИначеЕсли НомерПункта = 9 Тогда
		Возврат НСтр("ru='девятому'");
	ИначеЕсли НомерПункта = 10 Тогда
		Возврат НСтр("ru='десятому'");
	ИначеЕсли НомерПункта = 11 Тогда
		Возврат НСтр("ru='одиннадцатому'");
	ИначеЕсли НомерПункта = 12 Тогда
		Возврат НСтр("ru='двенадцатому'");
	ИначеЕсли НомерПункта = 13 Тогда
		Возврат НСтр("ru='тринадцатому'");
	ИначеЕсли НомерПункта = 14 Тогда
		Возврат НСтр("ru='четырнадцатому'");
	ИначеЕсли НомерПункта = 15 Тогда
		Возврат НСтр("ru='пятнадцатому'");
	ИначеЕсли НомерПункта = 16 Тогда
		Возврат НСтр("ru='шестнадцатому'");
	ИначеЕсли НомерПункта = 17 Тогда
		Возврат НСтр("ru='семнадцатому'");
	ИначеЕсли НомерПункта = 18 Тогда
		Возврат НСтр("ru='восемнадцатому'");
	ИначеЕсли НомерПункта = 19 Тогда
		Возврат НСтр("ru='девятнадцатому'");
	ИначеЕсли НомерПункта = 20 Тогда
		Возврат НСтр("ru='двадцатому'");
	Иначе
		Возврат "";
	КонецЕсли;

КонецФункции 

Функция ДанныеПечатиПротоколаРешенияДляИзмененияРеквизитов(Организация, ДатаРешения)
	
	ДанныеУчредителей = ДанныеУчредителейОрганизации(Организация, ДатаРешения, Истина);
	Если ДанныеУчредителей = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Нет данных об учредителях организации.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	// У организации может измениться наименование, поэтому возьмем предыдущий день.
	ДатаПолученияСведенийОбОрганизации = ДатаРешения - (60 * 60 * 24);
	СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Организация, ДатаПолученияСведенийОбОрганизации);
	СведенияОбИзменениях = СведенияОбИзмененииРеквизитовООО(Организация, ДатаРешения);
	
	Если СведенияОбИзменениях.СведенияОРуководителе = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Нет данных о руководителе организации.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ПараметрыПечати = Новый Структура;
	БлокиКУдалению  = Новый Массив;
	
	ЗаполнитьОбщиеДанныеДляИзмененияРеквизитов(ПараметрыПечати, СведенияОбОрганизации, ДатаРешения);
	
	ЗаполнитьДанныеУчредителейДляИзмененияРеквизитов(ПараметрыПечати, СведенияОбОрганизации, ДанныеУчредителей.Учредители);
	
	ЗаполнитьДанныеРуководителяДляИзмененияРеквизитов(ПараметрыПечати, СведенияОбИзменениях.СведенияОРуководителе);
	
	ЗаполнитьДанныеПрежнегоРуководителяДляИзмененияРеквизитов(ПараметрыПечати, БлокиКУдалению, СведенияОбИзменениях);
	
	ЗаполнитьДанныеНаименованияДляИзмененияРеквизитов(ПараметрыПечати, БлокиКУдалению, СведенияОбИзменениях, СведенияОбОрганизации);
	
	ЗаполнитьДанныеАдресаДляИзмененияРеквизитов(ПараметрыПечати, БлокиКУдалению, СведенияОбИзменениях, СведенияОбОрганизации);
	
	ЗаполнитьДанныеИзмененияУчредителейДляИзмененияРеквизитов(ПараметрыПечати, БлокиКУдалению, ДанныеУчредителей);
	
	ЗаполнитьДанныеИзмененияОсновногоОКВЭДДляИзмененияРеквизитов(ПараметрыПечати, БлокиКУдалению, СведенияОбИзменениях);
	
	ЗаполнитьДанныеДобавленияДополнительныхОКВЭДДляИзмененияРеквизитов(ПараметрыПечати, БлокиКУдалению, СведенияОбИзменениях);
	
	ЗаполнитьДанныеИсключенияДополнительныхОКВЭДДляИзмененияРеквизитов(ПараметрыПечати, БлокиКУдалению, СведенияОбИзменениях);
	
	ЗаполнитьДанныеИзмененияУставаДляИзмененияРеквизитов(ПараметрыПечати, БлокиКУдалению, СведенияОбИзменениях);
	
	ДанныеПечати = Новый Структура;
	ДанныеПечати.Вставить("ПараметрыПечати", ПараметрыПечати);
	ДанныеПечати.Вставить("БлокиКУДалению", БлокиКУдалению);
	Возврат ДанныеПечати;
	
КонецФункции

Функция ПредставлениеУчредителей(Учредители)
	
	ПредставлениеУчредителей = "";
	Для Каждого Учредитель Из Учредители Цикл
		
		Если Учредитель.СуммаВзносаДоИзменения <> 0 Тогда
		
			ПараметрыУчредителя = НовыйПараметрыУчредителяДляПротокола();
			ЗаполнитьЗначенияСвойств(ПараметрыУчредителя, Учредитель);
			
			Если Учредитель.ЭтоЮридическоеЛицо Тогда
				
				Шаблон = "<LI><DIV align=left>[ПолноеНаименование], ОГРН: [ОГРН], ИНН: [ИНН], КПП: [КПП], адрес места нахождения: [ЮридическийАдрес]. "
					+ "Представитель: [ДолжностьПредставителя] [ФИОПолные], действует на основании [ПредставительНаОсновании]</DIV></LI>";
				
				ЗаполнитьЗначенияСвойств(ПараметрыУчредителя, Учредитель.СведенияОЮридическомЛице);
				
			Иначе
				
				Шаблон = "<LI><DIV align=left>Гражданин Российской Федерации [ФИОПолные], "
					+ "[ДокументПредставление], место регистрации: [АдресПрописки]</DIV></LI>";
				
				ЗаполнитьЗначенияСвойств(ПараметрыУчредителя, Учредитель.СведенияОФизическомЛице);
				
			КонецЕсли;
			
			ПредставлениеУчредителя = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Шаблон, ПараметрыУчредителя);
			
			ПредставлениеУчредителей = ПредставлениеУчредителей + ПредставлениеУчредителя + Символы.ПС + Символы.ПС;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПредставлениеУчредителей;
	
КонецФункции

Функция ПодписиУчредителей(Учредители)
	
	ПодписиУчредителей = "";
	
	Для Каждого Учредитель Из Учредители Цикл
		
		Если Учредитель.СуммаВзносаДоИзменения <> 0 Тогда
		
			ПараметрыУчредителя = НовыйПараметрыУчредителяДляПротокола();
			ЗаполнитьЗначенияСвойств(ПараметрыУчредителя, Учредитель);
			
			Если Учредитель.ЭтоЮридическоеЛицо Тогда
				
				Шаблон = "<BR>[ПолноеНаименование] <BR>Представитель:_____________________[ДолжностьПредставителя] [ФИОПолные]";
				
				ЗаполнитьЗначенияСвойств(ПараметрыУчредителя, Учредитель.СведенияОЮридическомЛице);
				
			Иначе
				
				Шаблон = "<BR>_____________________[ДолжностьПредставителя] [ФИОПолные]";
				
				ЗаполнитьЗначенияСвойств(ПараметрыУчредителя, Учредитель.СведенияОФизическомЛице);
				
			КонецЕсли;
			
			ПодписиУчредителя = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Шаблон, ПараметрыУчредителя);
			
			ПодписиУчредителей = ПодписиУчредителей + ПодписиУчредителя + Символы.ПС + Символы.ПС;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПодписиУчредителей;
	
КонецФункции

Функция РешениеГолосованияДляПротоколаСобранияУчредителей()
	
	Возврат "<P align=justify>Результаты голосования: ""За"" - единогласно, ""Против"" - нет, ""Воздержался"" - нет</P>
			|<P align=justify><STRONG>Решение принято единогласно.</STRONG></P>";
	
КонецФункции

Функция ОписаниеВводаНовыхУчастников(НовыеУчредители)
	
	ОписаниеУчредителей = "";
	Для Каждого Учредитель Из НовыеУчредители Цикл
		
		Если Учредитель.ЭтоЮридическоеЛицо Тогда
			ОписаниеУчредителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'На основании поданного заявления ввести в состав участников Общества %1, ИНН %2, КПП %3, адрес места нахождения: %4.'"),
				Учредитель.СведенияОЮридическомЛице.ПолноеНаименование,
				Учредитель.СведенияОЮридическомЛице.ИНН,
				Учредитель.СведенияОЮридическомЛице.КПП,
				Учредитель.СведенияОЮридическомЛице.ЮридическийАдрес);
		Иначе
			ОписаниеУчредителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'На основании поданного заявления ввести в состав участников Общества гражданина Российской Федерации %1, %2, место регистрации: %3.'"),
					Учредитель.СведенияОФизическомЛице.ФИОРодительныйПадеж,
					Учредитель.СведенияОФизическомЛице.ДокументПредставление,
					Учредитель.СведенияОФизическомЛице.АдресПрописки);
		КонецЕсли;
		
		ОписаниеУчредителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '<DIV><P align=justify>[НомерПункта]. %1</P>
				|</DIV>'"),
				ОписаниеУчредителя);
	//Иначе
	//		ОписаниеУчредителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	//			НСтр("ru = '<P align=justify>%1</P>'"), ОписаниеУчредителя);
	//		
	//	КонецЕсли;
		
		ОписаниеУчредителей = ОписаниеУчредителей + ОписаниеУчредителя;
	КонецЦикла;
	
	Возврат ОписаниеУчредителей;
	
КонецФункции

Функция ОписаниеУчастниковОбщества(Учредители)
	
	ОписаниеУчастников = "";
	Для Каждого Учредитель Из Учредители Цикл
		Если Учредитель.ЭтоЮридическоеЛицо Тогда
			НаименованиеУчредителя = Учредитель.СведенияОЮридическомЛице.ПолноеНаименование;
		Иначе
			НаименованиеУчредителя = Учредитель.СведенияОФизическомЛице.ФИОПолные;
		КонецЕсли;
		
		ОписаниеУчастников = ОписаниеУчастников + СтрШаблон(НСтр("ru = '<LI>%1.</LI>'"), НаименованиеУчредителя);
	КонецЦикла;
	
	Возврат ОписаниеУчастников;
	
КонецФункции

Функция ОписаниеДолейУставногоКапитала(Учредители)
	
	ОписаниеДолейУставногоКапитала = "";
	
	Для Каждого Учредитель Из Учредители Цикл
		Если Учредитель.СуммаВзноса <> 0 Тогда
			ОписаниеДолейУставногоКапитала = ОписаниеДолейУставногоКапитала
			+ ОписаниеУставногоКапиталаУчредителя(Учредитель);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОписаниеДолейУставногоКапитала;
	
КонецФункции

Процедура ЗаполнитьОбщиеДанныеДляИзмененияРеквизитов(ПараметрыПечати, СведенияОбОрганизации, ДатаРешения)
	
	ПолноеНаименованиеОрганизацииВРодительномПадеже = СокрЛП(СведенияОбОрганизации.ПолноеНаименование);
	СловоОбщество = НСтр("ru = 'Общество с ограниченной ответственностью'");
	Если Лев(ВРЕГ(ПолноеНаименованиеОрганизацииВРодительномПадеже), СтрДлина(СловоОбщество)) = ВРЕГ(СловоОбщество) Тогда
		ПолноеНаименованиеОрганизацииВРодительномПадеже = НСтр("ru = 'Общества с ограниченной ответственностью'")
			+ СРЕД(ПолноеНаименованиеОрганизацииВРодительномПадеже, СтрДлина(СловоОбщество) + 1);
	КонецЕсли;
	
	Город = УправлениеКонтактнойИнформациейБП.НаселенныйПунктПоАдресу(СведенияОбОрганизации.ЗначенияПолейЮридическийАдрес);
	
	ПараметрыПечати.Вставить("НаименованиеПолноеВРодительномПадеже", ПолноеНаименованиеОрганизацииВРодительномПадеже);
	ПараметрыПечати.Вставить("ДатаПроведения",                       Формат(ДатаРешения, "Л=ru; ДФ='dd MMMM yyyy ''г.'''"));
	ПараметрыПечати.Вставить("МестоПроведения",                      Город);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеУчредителейДляИзмененияРеквизитов(ПараметрыПечати, СведенияОбОрганизации, Учредители)
	
	КоличествоУчредителейДоИзменения = 0;
	СтрокаЕдинственногоУчредителя = Неопределено;
	Для Каждого Учредитель Из Учредители Цикл
		Если Учредитель.СуммаВзносаДоИзменения <> 0 Тогда
			КоличествоУчредителейДоИзменения = КоличествоУчредителейДоИзменения + 1;
			СтрокаЕдинственногоУчредителя = Учредитель;
		КонецЕсли;
	КонецЦикла;
	
	Если СтрокаЕдинственногоУчредителя = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Не указаны учредители до изменения.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Если КоличествоУчредителейДоИзменения = 1 Тогда
		
		Если СтрокаЕдинственногоУчредителя.ЭтоЮридическоеЛицо Тогда
			
			ПолноеНаименованиеОрганизацииВРодительномПадеже = 
				СокрЛП(СтрокаЕдинственногоУчредителя.СведенияОЮридическомЛице.ПолноеНаименование);
			СловоОбщество = НСтр("ru = 'Общество с ограниченной ответственностью'");
			Если Лев(ВРЕГ(ПолноеНаименованиеОрганизацииВРодительномПадеже), СтрДлина(СловоОбщество)) = ВРЕГ(СловоОбщество) Тогда
				ПолноеНаименованиеОрганизацииВРодительномПадеже = НСтр("ru = 'Общества с ограниченной ответственностью'")
					+ СРЕД(ПолноеНаименованиеОрганизацииВРодительномПадеже, СтрДлина(СловоОбщество) + 1);
			КонецЕсли;
			
			ПараметрыПечати.Вставить("НаименованиеУчредителяПолноеВРодительномПадеже", ПолноеНаименованиеОрганизацииВРодительномПадеже);
			
		Иначе
			
			ДанныеУчредителя = СтрокаЕдинственногоУчредителя.СведенияОФизическомЛице;
			
			ПараметрыПечати.Вставить("ФИОПолные",                    ДанныеУчредителя.ФИОПолные);
			ПараметрыПечати.Вставить("ФИОПолныеРодительныйПадеж",    ДанныеУчредителя.ФИОРодительныйПадеж);
			ПараметрыПечати.Вставить("ДокументПредставление",        ДанныеУчредителя.ДокументПредставление);
			ПараметрыПечати.Вставить("АдресПоПропискеПредставление", ДанныеУчредителя.АдресПрописки);
			ПараметрыПечати.Вставить("Принял",
				?(ДанныеУчредителя.Пол = Перечисления.ПолФизическогоЛица.Женский, НСтр("ru = 'приняла'"), НСтр("ru = 'принял'")));
			
		КонецЕсли;
		
	Иначе
		
		ПараметрыПечати.Вставить("ПредставлениеУчредителей", ПредставлениеУчредителей(Учредители));
		ПараметрыПечати.Вставить("ПодписиУчредителей",       ПодписиУчредителей(Учредители));
		ПараметрыПечати.Вставить("РешениеГолосования",       РешениеГолосованияДляПротоколаСобранияУчредителей());
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеРуководителяДляИзмененияРеквизитов(ПараметрыПечати, СведенияОРуководителе)
	
	ПараметрыПечати.Вставить("ФИОРуководителяВРодительномПадеже", 
		СведенияОРуководителе.СведенияОФизическомЛице.ФИОПолныеРодительныйПадеж);
	ПараметрыПечати.Вставить("ДокументРуководителя", 
		СведенияОРуководителе.СведенияОФизическомЛице.ДокументПредставление);
	ПараметрыПечати.Вставить("АдресРуководителя", 
		СведенияОРуководителе.СведенияОФизическомЛице.АдресПрописки);
	ПараметрыПечати.Вставить("ДолжностьРуководителяРодительныйПадеж", 
		СклонениеПредставленийОбъектов.ПросклонятьПредставление(
			СведенияОРуководителе.ДолжностьПредставление, 2, СведенияОРуководителе.Должность));
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПрежнегоРуководителяДляИзмененияРеквизитов(ПараметрыПечати, БлокиКУдалению, СведенияОбИзменениях)
	
	Если ЗначениеЗаполнено(СведенияОбИзменениях.СведенияОРуководителе)
		И ЗначениеЗаполнено(СведенияОбИзменениях.СведенияОПрежнемРуководителе)
		И СведенияОбИзменениях.СведенияОРуководителе.ФизическоеЛицо <> СведенияОбИзменениях.СведенияОПрежнемРуководителе.ФизическоеЛицо Тогда
		
		СведенияОПрежнемРуководителе = СведенияОбИзменениях.СведенияОПрежнемРуководителе;
		
		ПараметрыПечати.Вставить("ФИОСтарогоРуководителяВРодительномПадеже", 
			СведенияОПрежнемРуководителе.СведенияОФизическомЛице.ФИОПолныеРодительныйПадеж);
		ПараметрыПечати.Вставить("ДокументСтарогоРуководителя", 
			СведенияОПрежнемРуководителе.СведенияОФизическомЛице.ДокументПредставление);
		ПараметрыПечати.Вставить("АдресСтарогоРуководителя", 
			СведенияОПрежнемРуководителе.СведенияОФизическомЛице.АдресПрописки);
		ПараметрыПечати.Вставить("ДолжностьСтарогоРуководителяРодительныйПадеж", 
			СклонениеПредставленийОбъектов.ПросклонятьПредставление(
				СведенияОПрежнемРуководителе.ДолжностьПредставление, 2, СведенияОПрежнемРуководителе.Должность));
		
	Иначе
		БлокиКУдалению.Добавить("Руководитель");
		БлокиКУдалению.Добавить("ПовесткаРуководитель");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеНаименованияДляИзмененияРеквизитов(ПараметрыПечати, БлокиКУдалению, СведенияОбИзменениях, СведенияОбОрганизации)
	
	Если ЗначениеЗаполнено(СведенияОбИзменениях.НаименованиеПолное)
			И СведенияОбИзменениях.НаименованиеПолное <> СведенияОбОрганизации.ПолноеНаименование
		ИЛИ ЗначениеЗаполнено(СведенияОбИзменениях.НаименованиеСокращенное)
			И СведенияОбИзменениях.НаименованиеСокращенное <> СведенияОбОрганизации.СокращенноеНаименование Тогда
		
		ОписаниеНаименований = Новый Массив;
		
		Если ЗначениеЗаполнено(СведенияОбИзменениях.НаименованиеПолное)
			И СведенияОбИзменениях.НаименованиеПолное <> СведенияОбОрганизации.ПолноеНаименование Тогда
			ОписаниеНаименований.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				" " + НСтр("ru = 'полное наименование - %1'"),
				СведенияОбИзменениях.НаименованиеПолное));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СведенияОбИзменениях.НаименованиеСокращенное)
			И СведенияОбИзменениях.НаименованиеСокращенное <> СведенияОбОрганизации.СокращенноеНаименование Тогда
			ОписаниеНаименований.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				" " + НСтр("ru = 'сокращенное наименование - %1'"), 
				СведенияОбИзменениях.НаименованиеСокращенное));
		КонецЕсли;
		
		ПараметрыПечати.Вставить("ОписаниеНовогоНаименования", СтрСоединить(ОписаниеНаименований, ","));
		
	Иначе
		БлокиКУдалению.Добавить("Наименование");
		БлокиКУдалению.Добавить("ПовесткаНаименование");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеАдресаДляИзмененияРеквизитов(ПараметрыПечати, БлокиКУдалению, СведенияОбИзменениях, СведенияОбОрганизации)
	
	Если ЗначениеЗаполнено(СведенияОбИзменениях.ЮридическийАдрес)
		И СведенияОбИзменениях.ЮридическийАдрес <> СведенияОбОрганизации.ЮридическийАдрес Тогда
		
		ПараметрыПечати.Вставить("НовыйАдресОрганизации", СведенияОбИзменениях.ЮридическийАдрес);
		
	Иначе
		
		БлокиКУдалению.Добавить("Адрес");
		БлокиКУдалению.Добавить("ПовесткаАдрес");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеИзмененияУчредителейДляИзмененияРеквизитов(ПараметрыПечати, БлокиКУдалению, ДанныеУчредителей)
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	// Есть изменение уставного капитала
	Если ДанныеУчредителей.УставныйКапитал <> ДанныеУчредителей.УставныйКапиталДоИзменения Тогда
		
		ПараметрыПечати.Вставить("УставныйКапиталДоИзменения", 
			Формат(ДанныеУчредителей.УставныйКапиталДоИзменения, "ЧДЦ=2; ЧГ=3,0"));
		СуммаПрописью = ЧислоПрописью(ДанныеУчредителей.УставныйКапиталДоИзменения, "Л=ru", ВалютаРегламентированногоУчета.ПараметрыПрописиНаРусском);
		ПараметрыПечати.Вставить("УставныйКапиталДоИзмененияПрописью", СуммаПрописью);
		
		ПараметрыПечати.Вставить("УставныйКапитал", ДанныеУчредителей.УставныйКапитал);
		СуммаПрописью = ЧислоПрописью(ДанныеУчредителей.УставныйКапитал, "Л=ru", ВалютаРегламентированногоУчета.ПараметрыПрописиНаРусском);
		ПараметрыПечати.Вставить("УставныйКапиталПрописью", СуммаПрописью);
		
	КонецЕсли;
	
	// Есть увеличение уставного капитала.
	Если ДанныеУчредителей.УставныйКапитал > ДанныеУчредителей.УставныйКапиталДоИзменения Тогда
		
		ОписаниеИзмененияУставногоКапитала = ОписаниеИзмененияУставногоКапитала(ДанныеУчредителей.Учредители);
		ПараметрыПечати.Вставить("ОписаниеИзмененияУставногоКапитала", ОписаниеИзмененияУставногоКапитала);
		
	Иначе
		БлокиКУдалению.Добавить("УвеличениеУставногоКапитала");
		БлокиКУдалению.Добавить("ПовесткаУвеличениеУставногоКапитала");
	КонецЕсли;
	
	// Есть уменьшение уставного капитала.
	Если ДанныеУчредителей.УставныйКапитал < ДанныеУчредителей.УставныйКапиталДоИзменения Тогда
		
		УставныйКапиталУменьшение = ДанныеУчредителей.УставныйКапиталДоИзменения - ДанныеУчредителей.УставныйКапитал;
		
		ПараметрыПечати.Вставить("УставныйКапиталУменьшение", Формат(УставныйКапиталУменьшение, "ЧДЦ=2; ЧГ=3,0"));
		СуммаПрописью = ЧислоПрописью(УставныйКапиталУменьшение, "Л=ru", ВалютаРегламентированногоУчета.ПараметрыПрописиНаРусском);
		ПараметрыПечати.Вставить("УставныйКапиталУменьшениеПрописью", СуммаПрописью);
		
	Иначе
		БлокиКУдалению.Добавить("УменьшениеУставногоКапитала");
		БлокиКУдалению.Добавить("ПовесткаУменьшениеУставногоКапитала");
	КонецЕсли;
	
	// Есть новые участники.
	Если ДанныеУчредителей.НовыеУчастники.Количество() > 0 Тогда
		
		ПараметрыПечати.Вставить("ОписаниеВводаНовыхУчастников", ОписаниеВводаНовыхУчастников(ДанныеУчредителей.НовыеУчастники));
		
		ПараметрыПечати.Вставить("ОписаниеНовыхУчастников",      ОписаниеУчастниковОбщества(ДанныеУчредителей.НовыеУчастники));
		ПараметрыПечати.Вставить("ОписаниеДолейНовыхУчастников", ОписаниеДолейУставногоКапитала(ДанныеУчредителей.НовыеУчастники));
		
	Иначе
		ПараметрыПечати.Вставить("ОписаниеВводаНовыхУчастников", "");
		
		БлокиКУдалению.Добавить("ПовесткаНовыеУчастникиОбщества");
		БлокиКУдалению.Добавить("НовыеУчастникиОбщества");
	КонецЕсли;
	
	// Есть вышедшие участники.
	Если ДанныеУчредителей.ВышедшиеУчастники.Количество() > 0 Тогда
		ПараметрыПечати.Вставить("ОписаниеВышедшихУчастников", ОписаниеУчастниковОбщества(ДанныеУчредителей.ВышедшиеУчастники));
	Иначе
		БлокиКУдалению.Добавить("ПовесткаВышедшиеУчастникиОбщества");
		БлокиКУдалению.Добавить("ВышедшиеУчастникиОбщества");
	КонецЕсли;
	
	// Если доля вышедших участников равна доле новых участников, то считаем, что это продажа доли.
	// Общество в таком случае ничего не выплачивает.
	Если ДанныеУчредителей.НовыеУчастники.Количество() > 0 И ДанныеУчредителей.ВышедшиеУчастники.Количество() > 0 
		И ДанныеУчредителей.НовыеУчастники.Итог("СуммаВзноса") = ДанныеУчредителей.ВышедшиеУчастники.Итог("СуммаВзносаДоИзменения") Тогда
		БлокиКУдалению.Добавить("ВыплатыБывшимУчастникиОбщества");
	КонецЕсли;
	
	// Есть перераспределение уставного капитала.
	Если ДанныеУчредителей.УставныйКапитал <> ДанныеУчредителей.УставныйКапиталДоИзменения
		ИЛИ УчредителиИзменены(ДанныеУчредителей) Тогда
		
		ПараметрыПечати.Вставить("ОписаниеДолейУставногоКапитала", ОписаниеДолейУставногоКапитала(ДанныеУчредителей.Учредители));
		
	Иначе
		БлокиКУдалению.Добавить("ПовесткаРаспределениеУставногоКапитала");
		БлокиКУдалению.Добавить("РаспределениеУставногоКапитала");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеИзмененияОсновногоОКВЭДДляИзмененияРеквизитов(ПараметрыПечати, БлокиКУдалению, СведенияОбИзменениях)
	
	Если ЗначениеЗаполнено(СведенияОбИзменениях.ОсновнойКодОКВЭД)
		И СведенияОбИзменениях.ОсновнойКодОКВЭД <> СведенияОбИзменениях.ПрежнийОсновнойКодОКВЭД Тогда
		
		ТаблицаВидовДеятельности = Справочники.Организации.КлассификаторОКВЭД2();
		
		ПараметрыПечати.Вставить("ОсновнойВидДеятельности",
			ОписаниеВидаДеятельности(СведенияОбИзменениях.ОсновнойКодОКВЭД, ТаблицаВидовДеятельности));
		
	Иначе
		БлокиКУдалению.Добавить("ОсновнойВидДеятельности");
		БлокиКУдалению.Добавить("ПовесткаОсновнойВидДеятельности");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеДобавленияДополнительныхОКВЭДДляИзмененияРеквизитов(ПараметрыПечати, БлокиКУдалению, СведенияОбИзменениях)
	
	ДобавленныеКодыОКВЭД = СтрРазделить(СведенияОбИзменениях.ДобавленныеКодыОКВЭД, ";");
	
	Если ЗначениеЗаполнено(СведенияОбИзменениях.ДобавленныеКодыОКВЭД)
		И ДобавленныеКодыОКВЭД.Количество() > 0 Тогда
		ТаблицаВидовДеятельности = Справочники.Организации.КлассификаторОКВЭД2();
		ОписаниеНовыхВидовДеятельности = ОписаниеВидовДеятельности(ДобавленныеКодыОКВЭД, ТаблицаВидовДеятельности);
		ПараметрыПечати.Вставить("ОписаниеНовыхВидовДеятельности", ОписаниеНовыхВидовДеятельности);
	Иначе
		БлокиКУдалению.Добавить("НовыеВидыДеятельности");
		БлокиКУдалению.Добавить("ПовесткаНовыеВидыДеятельности");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеИсключенияДополнительныхОКВЭДДляИзмененияРеквизитов(ПараметрыПечати, БлокиКУдалению, СведенияОбИзменениях)
	
	УдаленныеКодыОКВЭД = СтрРазделить(СведенияОбИзменениях.УдаленныеКодыОКВЭД, ";");
	
	Если ЗначениеЗаполнено(СведенияОбИзменениях.УдаленныеКодыОКВЭД)
		И УдаленныеКодыОКВЭД.Количество() > 0 Тогда
		ТаблицаВидовДеятельности = Справочники.Организации.КлассификаторОКВЭД2();
		ОписаниеИсключенныхВидовДеятельности = ОписаниеВидовДеятельности(УдаленныеКодыОКВЭД, ТаблицаВидовДеятельности);
		ПараметрыПечати.Вставить("ОписаниеИсключенныхВидовДеятельности", ОписаниеИсключенныхВидовДеятельности);
	Иначе
		БлокиКУдалению.Добавить("ИсключенныеВидыДеятельности");
		БлокиКУдалению.Добавить("ПовесткаИсключенныеВидыДеятельности");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеИзмененияУставаДляИзмененияРеквизитов(ПараметрыПечати, БлокиКУдалению, СведенияОбИзменениях)
	
	Если НЕ СведенияОбИзменениях.ИзмененияВносятсяВУчредительныеДокументы Тогда
		
		БлокиКУдалению.Добавить("НоваяРедакцияУстава");
		БлокиКУдалению.Добавить("ПовесткаНоваяРедакцияУстава");
		
	КонецЕсли;
	
КонецПроцедуры

Функция УчредителиИзменены(ДанныеУчредителей)
	
	УчредителиИзменены = Ложь;
	Для Каждого Учредитель Из ДанныеУчредителей.Учредители Цикл
		Если Учредитель.СуммаВзносаДоИзменения <> Учредитель.СуммаВзноса Тогда
			УчредителиИзменены = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат УчредителиИзменены;
	
КонецФункции

Функция ОписаниеИзмененияУставногоКапитала(Учредители)
	
	ОписанияИзмененийУставногоКапитала = Новый Массив;
	
	Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Для Каждого Учредитель ИЗ Учредители Цикл
		
		Взнос = Учредитель.СуммаВзноса - Учредитель.СуммаВзносаДоИзменения;
		
		Если Взнос > 0 Тогда
			
			ОписаниеУчредителяРодительныйПадеж = ?(Учредитель.ЭтоЮридическоеЛицо,
				Учредитель.СведенияОЮридическомЛице.ПолноеНаименование,
				Учредитель.СведенияОФизическомЛице.ФИОРодительныйПадеж);
			
			ОписанияИзмененийУставногоКапитала.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				" " + НСтр("ru = '%1 в виде денежных средств в размере %2 рублей (%3)'"),
				ОписаниеУчредителяРодительныйПадеж,
				Формат(Взнос, "ЧДЦ=2; ЧГ=3,0"),
				ЧислоПрописью(Взнос, "Л=ru", Валюта.ПараметрыПрописиНаРусском)));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОписанияИзмененийУставногоКапитала.Количество() = 0 Тогда
		Возврат "";
	ИначеЕсли ОписанияИзмененийУставногоКапитала.Количество() = 1 Тогда
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'вклада %1.</P>
				|<P align=justify>Вклад в уставный капитал должен быть внесен в течение 5 дней со дня принятия данного решения.'"),
			СтрСоединить(ОписанияИзмененийУставногоКапитала, ","));
	Иначе
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'вкладов:</P>
				|<P><UL><LI>%1</LI></UL></P><P></P>
				|<P align=justify>Вклады в уставный капитал должны быть внесены в течение 5 дней со дня принятия данного решения.'"),
			СтрСоединить(ОписанияИзмененийУставногоКапитала, "</LI><LI>"));
	КонецЕсли;
	
КонецФункции

Функция ОписаниеВидовДеятельности(КодыОКВЭД2, ТаблицаОКВЭД)
	
	ОписаниеВидовДеятельности = "";
	
	Для Каждого КодОКВЭД2 ИЗ КодыОКВЭД2 Цикл
		
		ОписаниеВидовДеятельности = ОписаниеВидовДеятельности + 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '<LI><DIV align=left>%1</DIV></LI>'"),
				ОписаниеВидаДеятельности(КодОКВЭД2, ТаблицаОКВЭД));
		
	КонецЦикла;
	
	Возврат ОписаниеВидовДеятельности;
	
КонецФункции

Функция ОписаниеВидаДеятельности(КодОКВЭД2, ТаблицаОКВЭД)
	
	ОписаниеОКВЭД = "";
	
	СтрокиКодаОКВЭД2 = ТаблицаОКВЭД.НайтиСтроки(Новый Структура("Код", КодОКВЭД2));
	Если СтрокиКодаОКВЭД2.Количество() > 0 Тогда
		ОписаниеОКВЭД = СтрокиКодаОКВЭД2[0].Наименование;
	КонецЕсли;
	
	Если ОписаниеОКВЭД = "" Тогда
		Возврат КодОКВЭД2;
	Иначе
		Возврат СтрШаблон("%1 - %2", КодОКВЭД2, ОписаниеОКВЭД);
	КонецЕсли;
	
КонецФункции

Функция ПолДляСклонений(Пол)
	
	Если Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда
		Возврат 1;
	ИначеЕсли Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
		Возврат 2;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция КодыФормЗаявлений() Экспорт
	
	КодыФорм = Новый Структура;
	КодыФорм.Вставить("ЗаявлениеРегистрацииООО", "Р11001");
	КодыФорм.Вставить("ЗаявлениеРегистрацииИзмененийУчредительныхДокументов", "Р13001");
	КодыФорм.Вставить("ЗаявлениеРегистрацииИзмененийЕГРЮЛ", "Р14001");
	КодыФорм.Вставить("ЗаявлениеРегистрацииИП", "Р21001");
	КодыФорм.Вставить("ЗаявлениеРегистрацииИзмененийЕГРИП", "Р24001");
	
	Возврат КодыФорм;
	
КонецФункции

Функция ИменаФайлов() Экспорт
	
	ИменаФайлов = Новый Структура;
	ИменаФайлов.Вставить("Устав", НСтр("ru = 'Устав'"));
	ИменаФайлов.Вставить("РешениеЕдинственногоУчредителя", НСтр("ru = 'Решение единственного учредителя'"));
	ИменаФайлов.Вставить("ПротоколСобранияУчредителейЕдинственногоУчредителя", НСтр("ru = 'Образец протокола собрания учредителей'"));
	ИменаФайлов.Вставить("ПротоколСобранияУчредителей", НСтр("ru = 'Протокол собрания учредителей'"));
	ИменаФайлов.Вставить("КвитанцияНаОплатуГоспошлины", НСтр("ru = 'Квитанция на оплату госпошлины'"));
	ИменаФайлов.Вставить("ИнструкцияПоВнесениюИзмененийВЕГРИП", НСтр("ru = 'Инструкция по внесению изменений в ЕГРИП'"));
	ИменаФайлов.Вставить("ИнструкцияПоВнесениюИзмененийВЕГРЮЛ", НСтр("ru = 'Инструкция по внесению изменений в ЕГРЮЛ'"));
	
	Возврат ИменаФайлов;
	
КонецФункции

Функция Используется() Экспорт
	
	Возврат ОбщегоНазначенияПовтИсп.РазделениеВключено()
		И (ПолучитьФункциональнуюОпцию("ПредпринимательВСервисе") Или ПолучитьФункциональнуюОпцию("ПредпринимательВСервисеСтандартныйИнтерфейс"))
		И ПолучитьФункциональнуюОпцию("ИспользоватьСервисРегистрации")
		И СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации();
	
КонецФункции

#КонецОбласти

#КонецЕсли