#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Не ЗначениеЗаполнено(ДатаРешения) Тогда
		ДатаРешения = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ПрочитатьОрганизацию();
	ПрочитатьДанныеУчредителей();
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	ИсключаемыеВиды = Новый Массив();
	ИсключаемыеВиды.Добавить(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(
		ЭтотОбъект, Объект, "ЮридическийАдрес", , ИсключаемыеВиды, Истина);
		
	ИсключаемыеВиды = Новый Массив();
	ИсключаемыеВиды.Добавить(Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица);
	ИсключаемыеВиды.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица);
	ИсключаемыеВиды.Добавить(Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица);
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(
		ЭтотОбъект, Заявитель, "ГруппаКонтактныеДанныеЗаявителя", , ИсключаемыеВиды, Истина);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	Обработки.РегистрацияОрганизации.РазместитьНавигацию(ЭтотОбъект, Параметры);
	
	ШрифтИзмененныхРеквизитов = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , , , , Истина); // Зачеркнутый
	
	УзнатьИНН = НСтр("ru = 'Узнать ИНН'");
	
	РегистрирующийОрганАдресНаКарте        = УправлениеКонтактнойИнформациейБП.СтрокаСсылкиПоказатьНаКарте();
	РегистрирующийОрганПрежнийАдресНаКарте = УправлениеКонтактнойИнформациейБП.СтрокаСсылкиПоказатьНаКарте();
	
	Элементы.УплатаГоспошлиныЗаголовокДекорация.Заголовок = СтрШаблон(НСтр("ru = 'Оплатите госпошлину %1 руб.'"),
		Обработки.РегистрацияОрганизации.СуммаПошлиныЗаВнесениеИзмененийВУчредительныеДокументы());
	
	ИзменитьЭтап(НавигацияПараметрФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Оповестим другие формы регистрации, чтобы они закрылись.
	РегистрацияОрганизацииКлиент.ОповеститьОбОткрытии(ЭтотОбъект,
		РегистрацияОрганизацииКлиентСервер.ИмяПомощникаВнесенияИзменений(),
		НавигацияНомерШага);
	
	// Восстановим признак модифицированности формы для того,
	// чтобы была выполнена запись объекта при переходе к следующему шагу.
	Если ДанныеМодифицированы Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// Все данные сохраняются в настройках формы и при последующем открытии восстанавливаются.
	// Поэтому сохраним модифицированность формы, чтобы при следующем открытии помощника восстановить форму.
	// В базу данные запишутся, после того как пользователь двинется дальше по помощнику.
	ДанныеМодифицированы = Модифицированность;
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма") Тогда
		
		Если ИсточникВыбора.ИмяФормы = ИмяФормыИзмененияНаименования() Тогда
			ОбработатьИзменениеНаименования(ВыбранноеЗначение);
		ИначеЕсли ИсточникВыбора.ИмяФормы = ИмяФормыИзмененияРуководителя() Тогда
			ОбработатьИзменениеРуководителя(ВыбранноеЗначение);
		ИначеЕсли ИсточникВыбора.ИмяФормы = ИмяФормыИзмененияУчредителей() Тогда
			ОбработатьИзменениеУчредителей(ВыбранноеЗначение);
		ИначеЕсли ИсточникВыбора.ИмяФормы = ИмяФормыИзмененияВидовДеятельности() Тогда
			ОбработатьИзменениеВидовДеятельности(ВыбранноеЗначение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = ЭтотОбъект Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменитьПараметрНавигации" Тогда
		
		ИзменитьЭтап(Параметр);
		Если Параметр = "ВнесениеИзмененийЕГР_Заявление" Тогда
			ИзменитьЭтап(1);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ОткрытШагПомощника_РегистрацияОрганизации" Тогда
				
		Если Параметр = Неопределено
			ИЛИ Параметр.ИмяПомощника <> РегистрацияОрганизацииКлиентСервер.ИмяПомощникаВнесенияИзменений()
			ИЛИ Параметр.НомерШага <> НавигацияНомерШага Тогда
			Закрыть();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ИзменениеУчетнойПолитики" Тогда
		
		Если Параметр = Объект.Ссылка
			Или Параметр = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Объект.Ссылка) Тогда
			УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Организация", Объект.Ссылка));
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_ФизическиеЛица" И Источник = Заявитель.Ссылка Тогда
		
		ПрочитатьДанныеЗаявителя();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если ТекущийЭтап = "ВнесениеИзмененийЕГР_СписокИзменений" Тогда
		ПроверитьЗаполнениеСпискаИзменений(Отказ);
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("ПоискИННЗапрос");
	КонецЕсли;
	
	Если ТекущийЭтап = "ВнесениеИзмененийЕГР_Заявление" Тогда
		Если ЭтоЮрЛицо(ЭтотОбъект) И Не ИзмененРуководитель(ЭтотОбъект) Тогда
			ПроверитьЗаполнениеПаспортныхДанныхЗаявителя(Отказ);
		КонецЕсли;
		ПроверитьЗаполнениеЗаявления(Отказ);
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ПоискИННЗапрос = Объект.ИНН;
	
	Если Не ЗначениеЗаполнено(ДатаРешения) Тогда
		ДатаРешения = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ЮридическийАдресНовый = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(ЮридическийАдресНовыйЗначенияПолей);
	
	Обработки.РегистрацияОрганизации.ЗаполнитьДополнительныеРеквизитыПоДаннымЕГР(ЭтотОбъект);
	
	// При открытии если номер этапа не задан, будет открыта начальная страница, необходимо отработать её видимость.
	Если ПустаяСтрока(НавигацияПараметрФормы) Тогда
		ИзменитьЭтап("ВнесениеИзмененийЕГР_СписокИзменений");
	Иначе
		ИзменитьЭтап(НавигацияПараметрФормы);
	КонецЕсли;
	
	ОтобразитьУчредителей();
	ОтобразитьВидыДеятельности();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	РегистрацияОрганизацииКлиент.ОбработатьНавигационнуюСсылку(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область СписокИзменений

&НаКлиенте
Процедура ПолеПоискаИННПриИзменении(Элемент)
	
	ПоискИННОтвет = ОрганизацииФормыДляОтчетностиВызовСервера.ЗапроситьДанныеЕГР(НовыйЗапросДанныхЕГР(ПоискИННЗапрос));
	
	// Пользователь сразу после изменения поля мог нажать команду "Заполнить".
	// Дадим возможность выполниться обработчику команды заполнения.
	// Поэтому фактическую обработку результата выполняем после обработчика изменения поля.
	ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПоискаИНН", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНаименованиеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	Если Не ПустаяСтрока(НаименованиеПолноеНовое) И ПустаяСтрока(НаименованиеСокращенноеНовое) Тогда
		ПараметрыФормы.Вставить("НаименованиеСокращенное", НаименованиеСокращенное);
	Иначе
		ПараметрыФормы.Вставить("НаименованиеСокращенное", НаименованиеСокращенноеНовое);
	КонецЕсли;
	Если Не ПустаяСтрока(НаименованиеСокращенноеНовое) И ПустаяСтрока(НаименованиеПолноеНовое) Тогда
		ПараметрыФормы.Вставить("НаименованиеПолное", НаименованиеПолное);
	Иначе
		ПараметрыФормы.Вставить("НаименованиеПолное", НаименованиеПолноеНовое);
	КонецЕсли;
	
	ОткрытьФорму(ИмяФормыИзмененияНаименования(), ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЮридическийАдресНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидКонтактнойИнформации", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации"));
	ПараметрыОткрытия.Вставить("ЗначенияПолей", ЮридическийАдресНовыйЗначенияПолей);
	ПараметрыОткрытия.Вставить("Представление", ЮридическийАдресНовый);
	ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru = 'Новый юридический адрес'"));
	ПараметрыОткрытия.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	
	Оповещение = Новый ОписаниеОповещения("ОбработкаЗакрытияФормыИзмененияЮридическогоАдреса", ЭтотОбъект);
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, Элемент, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРуководителяНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Новый руководитель'"));
	ПараметрыФормы.Вставить("ФормаБлокируетОкноВладельца", Истина);
	ПараметрыФормы.Вставить("ИспользоватьДолжность", Истина);
	
	Если ЗначениеЗаполнено(ОтветственныеЛицаНовые.ФизическоеЛицо) Тогда
		ПараметрыФормы.Вставить("Ключ",      ОтветственныеЛицаНовые.ФизическоеЛицо);
		ПараметрыФормы.Вставить("Должность", ОтветственныеЛицаНовые.Должность);
		ПараметрыФормы.Вставить("СрокПолномочий", ОтветственныеЛицаНовые.СрокПолномочий);
	Иначе
		ПараметрыФормы.Вставить("Должность", РуководительДолжность);
		ПараметрыФормы.Вставить("СрокПолномочий", 5);
	КонецЕсли;
	
	ОткрытьФорму(ИмяФормыИзмененияРуководителя(), ПараметрыФормы, ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьУчредителейНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИмяИзменяемойТаблицы = ?(ИзмененыУчредители(ЭтотОбъект), "УчредителиНовые", "Учредители");
	ИзменяемыйУставныйКапитал = ?(ИзмененУставныйКапитал(ЭтотОбъект), УставныйКапиталНовый, УставныйКапитал);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("АдресХранилища",            СохранитьТаблицуВоВременноеХранилище(ИмяИзменяемойТаблицы));
	ПараметрыФормы.Вставить("АдресХранилищаДоИзменения", СохранитьТаблицуВоВременноеХранилище("Учредители"));
	ПараметрыФормы.Вставить("УставныйКапитал",            ИзменяемыйУставныйКапитал);
	ПараметрыФормы.Вставить("УставныйКапиталДоИзменения", УставныйКапитал);
	
	ОткрытьФорму(ИмяФормыИзмененияУчредителей(), ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВидыДеятельностиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИмяИзменяемойТаблицы = ?(ИзмененыВидыДеятельности(ЭтотОбъект), "ВидыДеятельностиНовые", "ВидыДеятельности");
	ИзменяемыйОсновнойКод = ?(ИзмененОсновнойВидДеятельности(ЭтотОбъект), КодОКВЭД2Новый, КодОКВЭД2);
	
	ИзменяемаяТаблица = ЭтотОбъект[ИмяИзменяемойТаблицы];
	Если ИзменяемаяТаблица.Количество() > 0 Тогда
		Если ПустаяСтрока(ИзменяемаяТаблица[0].Наименование) Тогда
			// Отложеное заполнение
			ЗаполнитьНаименованияВидовДеятельности();
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ЮридическоеФизическоеЛицо", Объект.ЮридическоеФизическоеЛицо);
	ПараметрыФормы.Вставить("АдресХранилища", СохранитьТаблицуВоВременноеХранилище(ИмяИзменяемойТаблицы));
	ПараметрыФормы.Вставить("ОсновнойКод", ИзменяемыйОсновнойКод);
	ПараметрыФормы.Вставить("ОсновнойКодЕГР", КодОКВЭД2);
	
	ОткрытьФорму(ИмяФормыИзмененияВидовДеятельности(), ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область Заявление

&НаКлиенте
Процедура ОтчествоЗаявителяПриИзменении(Элемент)
	
	ОрганизацииФормыКлиентСервер.ОпределитьПолПоОтчеству(Заявитель.Пол, Заявитель.Отчество);
	
КонецПроцедуры

&НаКлиенте
Процедура ДолжностьРуководителяОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСДолжностямиБПКлиент.ДолжностьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДолжностьРуководителяАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСДолжностямиБПКлиент.ДолжностьАвтоПодбор(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДолжностьРуководителяОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСДолжностямиБПКлиент.ДолжностьОкончаниеВводаТекста(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеАдресПоПропискеФизическиеЛицаНажатие(Элемент, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиентБП.НачалоВыбора(ЭтотОбъект, Элемент, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИННЗаявителяПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УзнатьИНННажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОчиститьСообщения();
	
	Отказ = Ложь;
	ПроверитьЗаполнениеПаспортныхДанныхЗаявителя(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ДанныеФизическогоЛица", ДанныеЗаявителя());
	
	ОткрытьФорму("Обработка.РегистрацияОрганизации.Форма.УзнатьИНН", ПараметрыФормы, Элементы.ИННЗаявителя);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеТелефонРабочийФизическиеЛицаПриИзменении(Элемент)
	
	ОрганизацииФормыКлиентСервер.ТелефонПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеТелефонРабочийФизическиеЛицаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеEMailФизическиеЛицаПриИзменении(Элемент)
	
	КонтактнаяИнформацияПолеEMailФизическиеЛица = СокрЛП(КонтактнаяИнформацияПолеEMailФизическиеЛица);
	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область Документы

&НаКлиенте
Процедура ЗаявлениеОВнесенииИзмененийЕГРИПДекорацияНажатие(Элемент)
	
	ОткрытьЗаявлениеОРегистрацииИзменений("Р24001", Элемент.Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявлениеОВнесенииИзмененийЕГРЮЛДекорацияНажатие(Элемент)
	
	ОткрытьЗаявлениеОРегистрацииИзменений("Р14001", Элемент.Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявлениеОРегистрацииИзмененийВУставеДекорацияНажатие(Элемент)
	
	ОткрытьЗаявлениеОРегистрацииИзменений("Р13001", Элемент.Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура УплатаГоспошлиныОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОрганизацииФормыКлиент.ПерейтиКСервисуСкачатьКвитанциюНаОплатуГоспошлиныПриРегистрации();
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыУплатыГоспошлиныНажатие(Элемент)
	
	ПлатежныеРеквизиты = Новый Структура;
	ПлатежныеРеквизиты.Вставить("Получатель", ПлатежныеРеквизитыНаименованиеПолучателя);
	ПлатежныеРеквизиты.Вставить("ИНН", ПлатежныеРеквизитыИНН);
	ПлатежныеРеквизиты.Вставить("КПП", ПлатежныеРеквизитыКПП);
	ПлатежныеРеквизиты.Вставить("НомерСчета", ПлатежныеРеквизитыНомерСчета);
	ПлатежныеРеквизиты.Вставить("БанкПолучателя", ПлатежныеРеквизитыНаименованиеБанка);
	ПлатежныеРеквизиты.Вставить("БИК", ПлатежныеРеквизитыБИК);
	ПлатежныеРеквизиты.Вставить("КБК", ПлатежныеРеквизитыКБК);
	ПлатежныеРеквизиты.Вставить("Сумма", ПлатежныеРеквизитыСумма);
	
	ОткрытьФорму("Обработка.РегистрацияОрганизации.Форма.РеквизитыОплатыГоспошлины", ПлатежныеРеквизиты, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КвитанцияНаОплатуГоспошлиныНажатие(Элемент)
	
	АдресХранилища = КвитанцияНаОплатуГоспошлины(Объект.Ссылка);
	
	ИмяФайла = НСтр("ru = 'Квитанция на оплату госпошлины.pdf'");
	
	Если АдресХранилища <> Неопределено Тогда
		ПолучитьФайл(АдресХранилища, ИмяФайла, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрирующийОрганАдресНаКартеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеКонтактнойИнформациейКлиентБП.ПоказатьНаКартеНажатие(ЭтотОбъект, Элемент, РегистрирующийОрганАдрес);
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрирующийОрганПрежнийАдресНаКартеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеКонтактнойИнформациейКлиентБП.ПоказатьНаКартеНажатие(ЭтотОбъект, Элемент, РегистрирующийОрганПрежнийАдрес);
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкаИнструкцияЕГРИПОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	АдресХранилища = ИнструкцияПоВнесениюИзмененийИП();
	ИмяФайла = НСтр("ru = 'Инструкция по внесению изменений для ИП.pdf'");
	ПолучитьФайл(АдресХранилища, ИмяФайла, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкаИнструкцияЕГРЮЛОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	АдресХранилища = ИнструкцияПоВнесениюИзмененийООО();
	ИмяФайла = НСтр("ru = 'Инструкция по внесению изменений для ООО.pdf'");
	ПолучитьФайл(АдресХранилища, ИмяФайла, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УставОООНажатие(Элемент)
	
	ОткрытьФайлДокумента(УставООО(Объект.Ссылка, ДатаРешения), НСтр("ru = 'Устав ООО.rtf'"));
	
КонецПроцедуры

&НаКлиенте
Процедура РешениеЕдинственногоУчредителяОООНажатие(Элемент)
	
	ОткрытьФайлДокумента(
		ПротоколРешениеУчредителейООО(Объект.Ссылка, "РешениеЕдинственногоУчредителяДляИзмененияРеквизитов"),
		НСтр("ru = 'Решение единственного учредителя.rtf'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПротоколСобранияУчредителейОООНажатие(Элемент)
	
	ОткрытьФайлДокумента(
		ПротоколРешениеУчредителейООО(Объект.Ссылка, "ПротоколСобранияУчредителейДляИзмененияРеквизитов"),
		НСтр("ru = 'Протокол собрания учредителей ООО.rtf'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПротоколСобранияУчредителейЕдинственногоУчредителяОООНажатие(Элемент)
	
	ОткрытьФайлДокумента(
		ПротоколРешениеУчредителейООО(Объект.Ссылка, "ПротоколСобранияУчредителейЕдинственногоУчредителяДляИзмененияРеквизитов"),
		СтрШаблон(НСтр("ru = 'Образец протокола собрания учредителей %1.rtf'"), НаименованиеЕдинственногоУчредителя));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУчредители

&НаКлиенте
Процедура УчредителиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "УчредителиНаименование" Тогда
		СтандартнаяОбработка = Ложь;
		РегистрацияОрганизацииКлиент.ОткрытьФормуУчредителя(Элемент, Элементы.Учредители.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СписокИзменений

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоПолюПоискаИНН(Команда)
	
	ОрганизацииФормыДляОтчетностиКлиент.ЗаполнитьРеквизитыПоПолюПоискаИНН(
		НовыйЗапросДанныхЕГР(ПоискИННЗапрос),
		ПоискИННОтвет,
		ОписаниеОповещенияЗакончитьЗаполнениеДаннымиЕГР(),
		ТекущийЭлемент,
		Элементы.ПолеПоискаИНН);
	
	ИзменитьЭтап("ВнесениеИзмененийЕГР_СписокИзменений");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаявление(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	НужноЗаписатьУчредителей = Ложь;
	Если ЭтоЮрЛицо(ЭтотОбъект) Тогда
		// Вызовем обработку записи, если хотя бы один из учредителей не заполнен
		Для Каждого Учредитель Из Учредители Цикл
			Если Не ЗначениеЗаполнено(Учредитель.Ссылка) Тогда
				НужноЗаписатьУчредителей = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если НужноЗаписатьУчредителей Тогда
		
		ДлительнаяОперация = НачатьЗаписьУчредителей();
		Если ДлительнаяОперация.Статус = "Ошибка" Тогда
			ПоказатьОшибкуЗаписиУчредителей(ДлительнаяОперация);
		Иначе
			УстановитьВидимостьСтраницы(ЭтотОбъект, "Ожидание");
			УправлениеФормой(ЭтотОбъект);
			НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
			НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
			НастройкиОжидания.ПолучатьРезультат = Истина;
			
			ДлительныеОперацииКлиент.ОжидатьЗавершение(
				ДлительнаяОперация,
				Новый ОписаниеОповещения("Подключаемый_ПослеЗаписиУчредителей", ЭтотОбъект),
				НастройкиОжидания);
		КонецЕсли;
		
	Иначе
		ИзменитьЭтап("ВнесениеИзмененийЕГР_Заявление");
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Заявление

&НаКлиенте
Процедура ИзменитьСписокИзменений(Команда)
	
	ИзменитьЭтап("ВнесениеИзмененийЕГР_СписокИзменений");
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДокументы(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Или Модифицированность Тогда
	
		ДлительнаяОперация = НачатьФормироватьДокументы();
		Если ДлительнаяОперация.Статус = "Ошибка" Тогда
			ПоказатьОшибкуФормированияДокументов(ДлительнаяОперация);
		Иначе
			УстановитьВидимостьСтраницы(ЭтотОбъект, "Ожидание");
			УправлениеФормой(ЭтотОбъект);
			НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
			НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
			НастройкиОжидания.ПолучатьРезультат = Истина;
			
			ДлительныеОперацииКлиент.ОжидатьЗавершение(
				ДлительнаяОперация,
				Новый ОписаниеОповещения("Подключаемый_ПослеФормированияДокументов", ЭтотОбъект),
				НастройкиОжидания);
		КонецЕсли;
		
	Иначе
		ИзменитьЭтап("ВнесениеИзмененийЕГР_Документы");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Документы

&НаКлиенте
Процедура ХочуКонсультацию(Команда)
	
	ОткрытьФорму("Обработка.РегистрацияОрганизации.Форма.ФормаХочуКонсультацию");
	
КонецПроцедуры

&НаКлиенте
Процедура АдресИРеквизитыВашейИнспекции(Команда)
	
	ОрганизацииФормыКлиент.ПерейтиКСервисуОпределитьРеквизитыИФНС();
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьРаботу(Команда)
	
	ПредупреждениеОбОшибке = Новый Структура;
	Если Не ПодготовитьНачалоРаботы(ПредупреждениеОбОшибке) Тогда
		СтандартныеПодсистемыКлиент.ВывестиПредупреждение(ЭтотОбъект, ПредупреждениеОбОшибке);
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияБПКлиент.УстановитьОсновнуюОрганизацию(Объект.Ссылка, Ложь);
	
	ОбновитьИнтерфейс();
	
	Оповестить("ЗавершенаРаботаПомощникаНачалаРаботы", ЭтотОбъект.ИмяФормы, ЭтотОбъект);
	
	ОткрытьФорму("Обработка.НачалоРаботы.Форма.НачалоРаботыПредпринимательВСервисе");
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗаявление(Команда)
	
	ИзменитьЭтап("ВнесениеИзмененийЕГР_Заявление");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УправлениеФормой

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Если Форма.ТекущийЭтап = "ВнесениеИзмененийЕГР_СписокИзменений" Тогда
		
		УправлениеЗакладкойИзменения(Форма);
		
	ИначеЕсли Форма.ТекущийЭтап = "ВнесениеИзмененийЕГР_Заявление" Тогда
		
		УправлениеЗакладкойЗаявление(Форма);
		
	ИначеЕсли Форма.ТекущийЭтап = "ВнесениеИзмененийЕГР_Документы" Тогда
		
		УправлениеЗакладкойДокументы(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЗакладкойИзменения(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ОбъектЗаполнен = ОбъектЗаполнен(Объект);
	
	ЭтоЮрЛицо = ЭтоЮрЛицо(Форма);
	
	Изменено = СтруктураИзменений(Форма);
	
	Элементы.ПредставлениеОрганизации.Видимость = ОбъектЗаполнен;
	Элементы.РеквизитыОрганизации.Видимость = ОбъектЗаполнен И ЭтоЮрЛицо;
	Элементы.ПодсказкаНеобходимостьИзмененийИП.Видимость = НЕ ЭтоЮрЛицо;
	
	ЦветПоУмолчанию = Новый Цвет;
	ШрифтПоУмолчанию = Новый Шрифт;
	
	Если ЭтоЮрЛицо Тогда
		
		// Наименование организации
		
		Если Изменено.ПолноеНаименование И Не Изменено.СокращенноеНаименование Тогда
			Элементы.НаименованиеСокращенное.Видимость = Ложь;
			Элементы.НаименованиеПолное.Видимость = Истина;
			Элементы.НаименованиеПолное.Шрифт = ?(Изменено.ПолноеНаименование, Форма.ШрифтИзмененныхРеквизитов, ШрифтПоУмолчанию);
		Иначе
			Элементы.НаименованиеСокращенное.Видимость = Истина;
			Элементы.НаименованиеСокращенное.Шрифт = ?(Изменено.СокращенноеНаименование, Форма.ШрифтИзмененныхРеквизитов, ШрифтПоУмолчанию);
			Элементы.НаименованиеПолное.Видимость = Ложь;
		КонецЕсли;
		
		Форма.ИзменитьНаименование = ТекстГиперссылкиИзменитьНаименование(Форма);
		
		// Юридический адрес
		
		Элементы.КонтактнаяИнформацияПолеЮрАдресОрганизации.Шрифт =
			?(Изменено.ЮридическийАдрес, Форма.ШрифтИзмененныхРеквизитов, ШрифтПоУмолчанию);
		
		Форма.ИзменитьЮридическийАдрес = ТекстГиперссылкиИзменитьЮридическийАдрес(Форма);
		
		// Уточнять как указан адрес в уставе имеет смысл только, если другие изменения не вносятся в устав
		Элементы.АдресВУставе.Видимость = СпрашиватьКакУказанАдресВУставе(Форма);
		
		// Руководитель организации
		
		ЕстьСведенияОРуководителе = ЕстьСведенияОРуководителе(Форма);
		Элементы.Руководитель.Доступность = ЕстьСведенияОРуководителе;
		
		Элементы.РуководительНаименование.Заголовок =
			?(ЗначениеЗаполнено(Форма.РуководительДолжность),
			НСтр("ru = 'Руководитель'"),
			Строка(Форма.РуководительДолжность));
		
		Элементы.РуководительНаименование.Шрифт = ?(Изменено.Руководитель, Форма.ШрифтИзмененныхРеквизитов, ШрифтПоУмолчанию);
		
		Элементы.ИзменитьРуководителя.Видимость = ЕстьСведенияОРуководителе;
		Форма.ИзменитьРуководителя = ТекстГиперссылкиИзменитьРуководителя(Форма);
		
	КонецЕсли;
	
	// Виды деятельности
	Элементы.СписокВидовДеятельности.Видимость = ОбъектЗаполнен;
	
	Элементы.ВидыДеятельностиВУставе.Видимость = ЭтоЮрЛицо И СпрашиватьКакУказаныВидыДеятельностиВУставе(Форма);
	
	// Командная панель
	Элементы.ЗаполнитьЗаявление.Видимость = ОбъектЗаполнен;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЗакладкойЗаявление(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	Заявитель = Форма.Заявитель;
	
	Изменено = СтруктураИзменений(Форма);
	
	ЭтоЮрЛицо = ЭтоЮрЛицо(Форма);
	
	Элементы.ДатаРешения.Видимость = ЭтоЮрЛицо;
	
	Элементы.Заявитель.ОтображатьЗаголовок = ЭтоЮрЛицо;
	Если ЕстьСведенияОРуководителе(Форма) Тогда
		Элементы.Заявитель.Заголовок = НСтр("ru = 'Руководитель'");
	Иначе
		// Исполнительным органом является управляющая компания
		Элементы.Заявитель.Заголовок = НСтр("ru = 'Заявитель'");
	КонецЕсли;
	
	// Если изменен руководитель организации, заявителелем является новый руководитель,
	// данные по которому введены на первом этапе.
	Элементы.Заявитель.Видимость = Не (ЭтоЮрЛицо И Изменено.Руководитель);
	
	Элементы.ЗаявительИП.Видимость = Не ЭтоЮрЛицо;
	Элементы.ЗаявительООО.Видимость = ЭтоЮрЛицо;
	
	// Паспортные данные и ИНН
	Элементы.ПаспортныеДанныеЗаявителя.ОтображатьЗаголовок = ЭтоЮрЛицо;
	Элементы.ПаспортныеДанные.Видимость = ЭтоЮрЛицо;
	
	// ИНН индивидуального предпринимателя вводится на этапе "Изменения"
	Элементы.ИННФизическогоЛица.Видимость = ЭтоЮрЛицо;
	Если ЭтоЮрЛицо Тогда
		Форма.НадписьОшибкаИННЗаявителя = СообщениеОбОшибкеИНН(Заявитель.ИНН);
		Элементы.НадписьОшибкаИННЗаявителя.Видимость = Не ПустаяСтрока(Форма.НадписьОшибкаИННЗаявителя);
	КонецЕсли;
	
	// Контактная информация
	Элементы.КонтактнаяИнформация.ОтображатьЗаголовок = ЭтоЮрЛицо;
	
	Элементы.ГруппаУчредители.Видимость = ЭтоЮрЛицо И Не ЕдинственныйУчредительРуководитель(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЗакладкойДокументы(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ЭтоЮрЛицо = ЭтоЮрЛицо(Форма);
	
	Изменено = СтруктураИзменений(Форма);
	ЮрАдресИПропискаГлавногоСовпадают = Изменено.Местоположение
		И ЮрАдресИПропискаГлавногоСовпадают(Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов, Форма.ЮридическийАдресНовыйЗначенияПолей, Форма.Учредители);
	ИзмененияВносятсяВУчредительныеДокументы = ИзмененияВносятсяВУчредительныеДокументы(
		ЭтоЮрЛицо, Изменено, АдресВУставеПолный(Форма.АдресВУставе), КодыОКВЭДпротиворечатУставу(Форма.ВидыДеятельностиВУставе));
	ИзмененияТребуютУведомления = ИзмененияТребуютУведомления(ЭтоЮрЛицо, Изменено, ЮрАдресИПропискаГлавногоСовпадают);
	
	// Пакет документов
	Элементы.ЗаявлениеОВнесенииИзмененийЕГРИП.Видимость = Не ЭтоЮрЛицо;
	Элементы.ЗаявлениеОВнесенииИзмененийЕГРЮЛ.Видимость = ЭтоЮрЛицо
		И (Не ИзмененияВносятсяВУчредительныеДокументы Или ИзмененияТребуютУведомления Или Изменено.Руководитель);
	Элементы.ЗаявлениеОРегистрацииИзмененийВУставе.Видимость = (ЭтоЮрЛицо И ИзмененияВносятсяВУчредительныеДокументы);
	Элементы.Устав.Видимость = (ЭтоЮрЛицо И ИзмененияВносятсяВУчредительныеДокументы);
	
	Если ЭтоЮрЛицо Тогда
		
		УчредителиПоТипам = УчредителиПоТипам(Форма);
		
		КоличествоЮридическихЛиц = УчредителиПоТипам.ЮридическиеЛица.Количество();
		КоличествоФизическихЛиц  = УчредителиПоТипам.ФизическиеЛица.Количество();
		ЕдинственныйУчредительЮридическоеЛицо = (КоличествоЮридическихЛиц = 1) И (КоличествоФизическихЛиц = 0);
		ЕдинственныйУчредительФизическоеЛицо = (КоличествоЮридическихЛиц = 0) И (КоличествоФизическихЛиц = 1);
		НесколькоУчредителей = (Не ЕдинственныйУчредительЮридическоеЛицо И Не ЕдинственныйУчредительФизическоеЛицо);
		
		Элементы.РешениеЕдинственногоУчредителя.Видимость = ЕдинственныйУчредительФизическоеЛицо;
		Элементы.ПротоколСобранияУчредителей.Видимость= НесколькоУчредителей;
		
		Элементы.ПротоколСобранияУчредителейЕдинственногоУчредителя.Видимость = ЕдинственныйУчредительЮридическоеЛицо;
		Если ЕдинственныйУчредительЮридическоеЛицо Тогда
			Форма.НаименованиеЕдинственногоУчредителя = Строка(УчредителиПоТипам.ЮридическиеЛица[0]);
			Элементы.ПротоколСобранияУчредителейЕдинственногоУчредителяДекорация.Заголовок =
				СтрШаблон(НСтр("ru = 'Образец протокола собрания учредителей %1'"), Форма.НаименованиеЕдинственногоУчредителя);
		КонецЕсли;
		
	Иначе
		Элементы.ПротоколСобранияУчредителейЕдинственногоУчредителя.Видимость = Ложь;
		Элементы.РешениеЕдинственногоУчредителя.Видимость = Ложь;
		Элементы.ПротоколСобранияУчредителей.Видимость    = Ложь;
	КонецЕсли;
	
	Элементы.СсылкаИнструкцияЕГРИП.Видимость = Не ЭтоЮрЛицо;
	Элементы.СсылкаИнструкцияЕГРЮЛ.Видимость = ЭтоЮрЛицо;
	
	// Уведомление
	Элементы.Уведомление.Видимость = ИзмененияТребуютУведомления;
	
	ОпределенПрежнийРегистрирующийОрган = Не ПустаяСтрока(Форма.РегистрирующийОрганПрежнийНаименование);
	Элементы.РегистрирующаяНалоговаяПрежняя.Видимость = ОпределенПрежнийРегистрирующийОрган;
	Элементы.РегистрирующийОрганПрежнийИнформация.Видимость = Не ПустаяСтрока(Форма.РегистрирующийОрганПрежнийИнформация);
	Элементы.АдресИРеквизитыВашейИнспекцииУведомление.Видимость = Не ОпределенПрежнийРегистрирующийОрган;

	// Уплата госпошлины
	Элементы.УплатаГоспошлины.Видимость = ИзмененияВносятсяВУчредительныеДокументы;
	НомерЭтапаУплатыГоспошлины = НомерЭтапаУплатыГоспошлины(ИзмененияТребуютУведомления);
	Элементы.УплатаГоспошлиныЗаголовокКартинка2.Видимость = (НомерЭтапаУплатыГоспошлины = 2);
	Элементы.УплатаГоспошлиныЗаголовокКартинка3.Видимость = (НомерЭтапаУплатыГоспошлины = 3);
	Элементы.ГруппаИнструкцииПоОплатеГоспошлиныБезКвитанции.Видимость = Не Форма.КвитанцияОбОплатеГоспошлиныПолучена;
	Элементы.ГруппаИнструкцииПоОплатеГоспошлиныСКвитанцией.Видимость  = Форма.КвитанцияОбОплатеГоспошлиныПолучена;
	Элементы.РеквизитыУплатыГоспошлины.Видимость = Форма.ПлатежныеРеквизитыОплатаГоспошлиныПолучены;
	
	// Регистрация изменений
	НомерЭтапаРегистрацииИзменений = НомерЭтапаРегистрацииИзменений(ИзмененияТребуютУведомления, ИзмененияВносятсяВУчредительныеДокументы);
	Элементы.РегистрацияИзмененийЗаголовокКартинка2.Видимость = (НомерЭтапаРегистрацииИзменений = 2);
	Элементы.РегистрацияИзмененийЗаголовокКартинка3.Видимость = (НомерЭтапаРегистрацииИзменений = 3);
	Элементы.РегистрацияИзмененийЗаголовокКартинка4.Видимость = (НомерЭтапаРегистрацииИзменений = 4);
	
	Если ИзмененияТребуютУведомления Тогда
		Элементы.Переместить(Элементы.Инструкция, Элементы.СписокДокументов, Элементы.УслугаКонсультации);
	Иначе
		Элементы.Переместить(Элементы.Инструкция, Элементы.ПодачаДокументов, Элементы.РегистрирующаяНалоговая);
	КонецЕсли;
	
	Элементы.ПредупреждениеПриРегистрацииИзмененийМестаНахождения.Видимость = Изменено.Местоположение И ИзмененияТребуютУведомления;
	
	ОпределенРегистрирующийОрган = Не ПустаяСтрока(Форма.РегистрирующийОрганНаименование);
	Элементы.РегистрирующаяНалоговая.Видимость = ОпределенРегистрирующийОрган;
	Элементы.РегистрирующийОрганИнформация.Видимость = Не ПустаяСтрока(Форма.РегистрирующийОрганИнформация);
	Элементы.АдресИРеквизитыВашейИнспекции.Видимость = Не ОпределенРегистрирующийОрган;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Адрес по прописке
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КонтактнаяИнформацияПолеАдресПоПропискеФизическиеЛица");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"КонтактнаяИнформацияПолеАдресПоПропискеФизическиеЛица",
		ВидСравненияКомпоновкиДанных.Равно,
		УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки());
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);
	
	// Представитель учредителя - юридического лица, должность и основание полномочий.
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УчредителиПредставительУчредителя");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УчредителиНадписьПредставитель");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УчредителиНадписьДолжность");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УчредителиДолжностьПредставителя");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УчредителиНадписьНаОсновании");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УчредителиПредставительНаОсновании");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Учредители.ТипУчредителя",
		ВидСравненияКомпоновкиДанных.НеРавно,
		ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо"));
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Заполненность учредителя
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УчредителиНаименование");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Учредители.ОтметкаНезаполненного",
		ВидСравненияКомпоновкиДанных.Равно,
		Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблицыУчредители()
	
	Для каждого Учредитель Из Учредители Цикл
		Учредитель.НадписьПредставитель = НСтр("ru = 'Представитель:'");
		Учредитель.НадписьДолжность     = НСтр("ru = 'Должность:'");
		Учредитель.НадписьНаОсновании   = НСтр("ru = 'На основании:'");
		Если Учредитель.Ссылка = Заявитель.Ссылка Тогда
			Учредитель.ОтметкаНезаполненного = Ложь;
		Иначе
			Учредитель.ОтметкаНезаполненного = Не Обработки.РегистрацияОрганизации.РеквизитыУчредителяЗаполнены(Учредитель.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НомерЭтапаРегистрацииИзменений(ИзмененияТребуютУведомления, ИзмененияВносятсяВУчредительныеДокументы)
	
	Если ИзмененияТребуютУведомления И ИзмененияВносятсяВУчредительныеДокументы Тогда
		Возврат 4;
	ИначеЕсли ИзмененияТребуютУведомления Или ИзмененияВносятсяВУчредительныеДокументы Тогда
		Возврат 3;
	Иначе
		Возврат 2;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НомерЭтапаУплатыГоспошлины(ИзмененияТребуютУведомления)
	
	Если ИзмененияТребуютУведомления Тогда
		Возврат 3;
	Иначе
		Возврат 2;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстГиперссылкиИзменитьНаименование(Форма)
	
	ИзмененоСокращенноеНаименование = ИзмененоСокращенноеНаименование(Форма);
	ИзмененоПолноеНаименование      = ИзмененоПолноеНаименование(Форма);
	
	Если ИзмененоПолноеНаименование И Не ИзмененоСокращенноеНаименование Тогда
		Возврат Форма.НаименованиеПолноеНовое;
	ИначеЕсли ИзмененоСокращенноеНаименование Тогда
		Возврат Форма.НаименованиеСокращенноеНовое;
	Иначе
		Возврат НСтр("ru = 'Изменить'");
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстГиперссылкиИзменитьРуководителя(Форма)
	
	Если ИзмененРуководитель(Форма) Тогда
		Возврат Строка(Форма.ОтветственныеЛицаНовые.ФизическоеЛицо);
	Иначе
		Возврат НСтр("ru = 'Изменить'");
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстГиперссылкиИзменитьЮридическийАдрес(Форма)
	
	Если ИзмененЮридическийАдрес(Форма) Тогда
		Возврат Строка(Форма.ЮридическийАдресНовый);
	Иначе
		Возврат НСтр("ru = 'Изменить'");
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОтобразитьУчредителей()
	
	// Признаки изменений
	ВыходУчастника      = 1;
	СтараяДоляУчастия   = 2;
	НоваяДоляУчастия    = 3;
	ВходНовогоУчастника = 4;
	
	ТаблицаУчредителей = Учредители.Выгрузить();
	ТаблицаУчредителей.Колонки.Добавить("Изменение", ОбщегоНазначения.ОписаниеТипаЧисло(1, 0));
	
	НовыхУчастников = 0;
	ВышлоУчастников = 0;
	Если УчредителиНовые.Количество() > 0 Тогда
		
		ТаблицаУчредителей.Колонки.Добавить("ПорядокВРеестре", ОбщегоНазначения.ОписаниеТипаЧисло(1, 0));
		ТаблицаУчредителей.Индексы.Добавить("ИНН");
		
		ТаблицаНовыхУчредителей = УчредителиНовые.Выгрузить();
		ТаблицаНовыхУчредителей.Индексы.Добавить("ИНН");
		
		ИзмененУставныйКапитал = (УставныйКапитал <> УставныйКапиталНовый);
		
		ПорядокВРеестре = 0;
		
		// Определяем вид изменения для существующих участников общества
		
		Для Каждого Учредитель Из ТаблицаУчредителей Цикл
			
			НайденаяСтрока = ТаблицаНовыхУчредителей.Найти(Учредитель.ИНН, "ИНН");
			Если НайденаяСтрока = Неопределено Тогда
				Учредитель.Изменение = ВыходУчастника;
				ВышлоУчастников = ВышлоУчастников + 1;
			ИначеЕсли НайденаяСтрока.СуммаВзноса <> Учредитель.СуммаВзноса Или НайденаяСтрока.ДоляУчастия <> Учредитель.ДоляУчастия Тогда
				Учредитель.Изменение = СтараяДоляУчастия;
			КонецЕсли;
			
			Учредитель.ПорядокВРеестре = ПорядокВРеестре;
			ПорядокВРеестре = ПорядокВРеестре + 1;
			
		КонецЦикла;
		
		// Добавляем в таблицу новых участников общества
		
		Для Каждого НовыйУчредитель Из ТаблицаНовыхУчредителей Цикл
			
			НайденаяСтрока = ТаблицаУчредителей.Найти(НовыйУчредитель.ИНН, "ИНН");
			
			Если НайденаяСтрока = Неопределено Тогда
				
				Учредитель = ТаблицаУчредителей.Добавить();
				ЗаполнитьЗначенияСвойств(Учредитель, НовыйУчредитель);
				Учредитель.Изменение = ВходНовогоУчастника;
				НовыхУчастников = НовыхУчастников + 1;
				
				Учредитель.ПорядокВРеестре = ПорядокВРеестре;
				ПорядокВРеестре = ПорядокВРеестре + 1;
				
			ИначеЕсли НайденаяСтрока.СуммаВзноса <> НовыйУчредитель.СуммаВзноса Или НайденаяСтрока.ДоляУчастия <> НовыйУчредитель.ДоляУчастия Тогда
				
				Учредитель = ТаблицаУчредителей.Добавить();
				ЗаполнитьЗначенияСвойств(Учредитель, НовыйУчредитель);
				Учредитель.Изменение = НоваяДоляУчастия;
				
				Учредитель.ПорядокВРеестре = ПорядокВРеестре;
				ПорядокВРеестре = ПорядокВРеестре + 1;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТаблицаУчредителей.Сортировать("Изменение, ПорядокВРеестре");
		ТаблицаУчредителей.Колонки.Удалить("ПорядокВРеестре");
		
	КонецЕсли;
	
	ЕстьСведенияОбУчредителях = (ТаблицаУчредителей.Количество() > 0);
	Если Не ЕстьСведенияОбУчредителях Тогда
		Учредитель = ТаблицаУчредителей.Добавить();
		Учредитель.Наименование = НСтр("ru = 'В реестре отсутствуют данные об учредителях'");
	КонецЕсли;
	
	// Выводим сформированную таблицу на форму
	
	ШрифтПоУмолчанию = Новый Шрифт;
	
	КоличествоПредопределенных = КоличествоПредопределенныхЭлементов("Учредитель");
	КоличествоУчредителей = ТаблицаУчредителей.Количество();
	
	// Добавляем недостающие элементы формы
	Для Индекс = КоличествоПредопределенных По КоличествоУчредителей - 1 Цикл
		ДобавитьПредставлениеУчредителя(Индекс);
	КонецЦикла;
	
	Для Индекс = 0 По КоличествоУчредителей - 1 Цикл
		
		Учредитель = ТаблицаУчредителей[Индекс];
		
		ЭлементФормы = Элементы[ИмяЭлементаПоИндексу(Индекс, "Учредитель")];
		ЭлементФормы.Видимость = Истина;
		ЭлементФормы.Доступность = ЕстьСведенияОбУчредителях;
		
		Шрифт = ?(Учредитель.Изменение = ВыходУчастника Или Учредитель.Изменение = СтараяДоляУчастия, ШрифтИзмененныхРеквизитов, ШрифтПоУмолчанию);
		
		ЭлементФормы = Элементы[ИмяЭлементаПоИндексу(Индекс, "НаименованиеУчредителя")];
		ЭлементФормы.Заголовок = Учредитель.Наименование;
		ЭлементФормы.Шрифт = Шрифт;
		
		ЭлементФормы = Элементы[ИмяЭлементаПоИндексу(Индекс, "ДоляУчастияУчредителя")];
		ЭлементФормы.Заголовок = ?(Учредитель.ДоляУчастия <> 0, Формат(Учредитель.ДоляУчастия, "ЧН=") + "%", "");
		ЭлементФормы.Шрифт = Шрифт;
		
		ЭлементФормы = Элементы[ИмяЭлементаПоИндексу(Индекс, "СуммаВзносаУчредителя")];
		ЭлементФормы.Заголовок = ?(Учредитель.СуммаВзноса <> 0, СтрШаблон(НСтр("ru = '%1 руб.'"), Учредитель.СуммаВзноса), "");
		ЭлементФормы.Шрифт = Шрифт;
		
	КонецЦикла;
	
	Для Индекс = КоличествоУчредителей По КоличествоПредопределенных - 1 Цикл
		ЭлементФормы = Элементы[ИмяЭлементаПоИндексу(Индекс, "Учредитель")];
		ЭлементФормы.Видимость = Ложь;
	КонецЦикла;
	
	ИзменитьУчредителей = ТекстГиперссылкиИзменитьУчредителей(НовыхУчастников, ВышлоУчастников);
	
	Элементы.ИзменитьУчредителей.Видимость = ЕстьСведенияОбУчредителях;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПредставлениеУчредителя(Индекс)
	
	ГруппаУчредитель = Элементы.Добавить(
		ИмяЭлементаПоИндексу(Индекс, "Учредитель"),
		Тип("ГруппаФормы"),
		Элементы.УчредителиПредставление);
	ГруппаУчредитель.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаУчредитель.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаУчредитель.Заголовок = СтрШаблон("Учредитель[%1]", Индекс);
	ГруппаУчредитель.ОтображатьЗаголовок = Ложь;
	ГруппаУчредитель.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	ГруппаУчредитель.Объединенная = Ложь;
	
	ЗаголовокУчредителя = Элементы.Добавить(
		ИмяЭлементаПоИндексу(Индекс, "ЗаголовокУчредителя"),
		Тип("ДекорацияФормы"),
		ГруппаУчредитель);
	ЗаголовокУчредителя.Заголовок = НСтр("ru = 'Учредители'");
	ЗаголовокУчредителя.Ширина = Элементы[ИмяЭлементаПоИндексу(0, "ЗаголовокУчредителя")].Ширина;
	ЗаголовокУчредителя.РастягиватьПоГоризонтали = Ложь;
	ЗаголовокУчредителя.ЦветТекста = ЦветаСтиля.ЦветФонаФормы;
	
	НаименованиеУчредителя = Элементы.Добавить(
		ИмяЭлементаПоИндексу(Индекс, "НаименованиеУчредителя"),
		Тип("ДекорацияФормы"),
		ГруппаУчредитель);
	
	ДоляУчастияУчредителя = Элементы.Добавить(
		ИмяЭлементаПоИндексу(Индекс, "ДоляУчастияУчредителя"),
		Тип("ДекорацияФормы"),
		ГруппаУчредитель);
	ДоляУчастияУчредителя.ГоризонтальноеПоложение = Элементы[ИмяЭлементаПоИндексу(0, "ДоляУчастияУчредителя")].ГоризонтальноеПоложение;
	
	СуммаВзносаУчредителя = Элементы.Добавить(
		ИмяЭлементаПоИндексу(Индекс, "СуммаВзносаУчредителя"),
		Тип("ДекорацияФормы"),
		ГруппаУчредитель);
	ДоляУчастияУчредителя.ГоризонтальноеПоложение = Элементы[ИмяЭлементаПоИндексу(0, "СуммаВзносаУчредителя")].ГоризонтальноеПоложение;
	
КонецПроцедуры

&НаСервере
Функция ТекстГиперссылкиИзменитьУчредителей(НовыхУчастников, ВышлоУчастников)
	
	МассивИзменений = Новый Массив;
	
	СводкаИзменений = "";
	
	Если НовыхУчастников = 0 И ВышлоУчастников = 0 Тогда
		Если ИзмененУставныйКапитал(ЭтотОбъект) Тогда
			МассивИзменений.Добавить(НСтр("ru = 'Изменен размер уставного капитала общества'"));
		КонецЕсли;
	ИначеЕсли НовыхУчастников = 1 И ВышлоУчастников = 1 И Не ИзмененУставныйКапитал(ЭтотОбъект) Тогда
		МассивИзменений.Добавить(НСтр("ru = 'Отражена продажа доли участника общества'"));
	ИначеЕсли НовыхУчастников = ВышлоУчастников И Не ИзмененУставныйКапитал(ЭтотОбъект) Тогда
		МассивИзменений.Добавить(НСтр("ru = 'Отражена продажа долей участников общества'"));
	Иначе
		Если НовыхУчастников <> 0 Тогда
			НовыхУчастниковЦифрамиИПрописью = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
				НовыхУчастников, НСтр("ru = 'новый участник общества, новых участников общества, новых участников общества'"));
			МассивИзменений.Добавить(НовыхУчастниковЦифрамиИПрописью);
		КонецЕсли;
		Если ВышлоУчастников <> 0 Тогда
			ВышлоУчастниковЦифрамиИПрописью = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
				ВышлоУчастников, НСтр("ru = 'участник вышел из общества, участника вышло из общества, новых участников вошло в общество'"));
			МассивИзменений.Добавить(ВышлоУчастниковЦифрамиИПрописью);
		КонецЕсли;
	КонецЕсли;
	
	Если МассивИзменений.Количество() > 0 Тогда
		ТекстГиперссылки = СтрСоединить(МассивИзменений, ", ");
	Иначе
		ТекстГиперссылки = НСтр("ru = 'Изменить'");
	КонецЕсли;
	
	Возврат ТекстГиперссылки;
	
КонецФункции

&НаСервере
Процедура ОтобразитьВидыДеятельности()
	
	// Признаки изменений
	НетИзменений   = 0;
	ИсключениеКода = 1;
	ДобавлениеКода = 2;
	
	ТаблицаВидовДеятельности = ВидыДеятельности.Выгрузить();
	ТаблицаВидовДеятельности.Колонки.Добавить("Изменение", ОбщегоНазначения.ОписаниеТипаЧисло(1, 0));
	ТаблицаВидовДеятельности.Колонки.Добавить("ПорядокВРеестре", ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
	
	НовыхКодов   = 0;
	УдаленоКодов = 0;
	
	Если ИзмененыВидыДеятельности(ЭтотОбъект) Тогда
		
		ТаблицаВидовДеятельности.Индексы.Добавить("Код");
		
		ТаблицаНовыхВидовДеятельности = ВидыДеятельностиНовые.Выгрузить();
		ТаблицаНовыхВидовДеятельности.Индексы.Добавить("Код");
		
		ПорядокВРеестре = 0;
		
		// Определяем вид изменения
		
		Для Каждого ВидДеятельности Из ТаблицаВидовДеятельности Цикл
			
			ВидДеятельностиУдален = (ТаблицаНовыхВидовДеятельности.Найти(ВидДеятельности.Код, "Код") = Неопределено);
			Если ВидДеятельностиУдален Тогда
				ВидДеятельности.Изменение = ИсключениеКода;
				УдаленоКодов = УдаленоКодов + 1;
			КонецЕсли;
			
			ВидДеятельности.ПорядокВРеестре = ПорядокВРеестре;
			ПорядокВРеестре = ПорядокВРеестре + 1;
			
		КонецЦикла;
		
		Для Каждого НовыйВидДеятельности Из ТаблицаНовыхВидовДеятельности Цикл
			
			ВидДеятельностиДобавлен = (ТаблицаВидовДеятельности.Найти(НовыйВидДеятельности.Код, "Код") = Неопределено);
			Если ВидДеятельностиДобавлен Тогда
				
				ВидДеятельности = ТаблицаВидовДеятельности.Добавить();
				ЗаполнитьЗначенияСвойств(ВидДеятельности, НовыйВидДеятельности);
				ВидДеятельности.Изменение = ДобавлениеКода;
				НовыхКодов = НовыхКодов + 1;
				
				ВидДеятельности.ПорядокВРеестре = ПорядокВРеестре;
				ПорядокВРеестре = ПорядокВРеестре + 1;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НовыхКодов = 0 И УдаленоКодов = 0 Тогда
		ВидыДеятельностиНовые.Очистить();
	Иначе
		ТаблицаВидовДеятельности.Сортировать("Изменение, ПорядокВРеестре");
		ТаблицаВидовДеятельности.Колонки.Удалить("ПорядокВРеестре");
	КонецЕсли;
	
	// Основной код ОКВЭД
	ЗначениеОсновногоКода = ?(ИзмененОсновнойВидДеятельности(ЭтотОбъект), КодОКВЭД2Новый, КодОКВЭД2);
	НайденаяСтрока = ТаблицаВидовДеятельности.Найти(ЗначениеОсновногоКода, "Код");
	Если НайденаяСтрока <> Неопределено Тогда
		ТаблицаВидовДеятельности.Удалить(НайденаяСтрока);
	КонецЕсли;
	
	ЕстьОсновнойКодОКВЭД = Не ПустаяСтрока(ЗначениеОсновногоКода);
	ЕстьПрочиеКодыОКВЭД = (ТаблицаВидовДеятельности.Количество() > 0);
	
	Если ЕстьОсновнойКодОКВЭД Тогда
		ПредставлениеКодаОКВЭД2 = СтрШаблон(НСтр("ru = '%1 (основной)'"), ЗначениеОсновногоКода);
		СообщениеОбОшибке = "";
		Если ОрганизацииФормыКлиентСервер.ОКВЭДСоответствуетТребованиям(СообщениеОбОшибке, КодОКВЭД2) Тогда
			ОсновнойКодОКВЭД = Новый ФорматированнаяСтрока(ПредставлениеКодаОКВЭД2);
		Иначе
			ОсновнойКодОКВЭД = Новый ФорматированнаяСтрока(
				ПредставлениеКодаОКВЭД2,
				" ",
				Новый ФорматированнаяСтрока(СообщениеОбОшибке, , ЦветаСтиля.ЦветТекстаНекорректногоКонтрагента));
		КонецЕсли;
	ИначеЕсли ЕстьПрочиеКодыОКВЭД Тогда
		СообщениеОбОшибке = НСтр("ru = 'В реестре не указан основной код ОКВЭД'");
		ОсновнойКодОКВЭД = Новый ФорматированнаяСтрока(СообщениеОбОшибке, , ЦветаСтиля.ЦветТекстаНекорректногоКонтрагента);
	Иначе
		СообщениеОбОшибке = НСтр("ru = 'В реестре не указаны коды ОКВЭД'");
		ОсновнойКодОКВЭД = Новый ФорматированнаяСтрока(СообщениеОбОшибке);
	КонецЕсли;
	
	Элементы.ОсновнойКодОКВЭД.Доступность = ЕстьОсновнойКодОКВЭД Или ЕстьПрочиеКодыОКВЭД;
	
	// Выводим сформированную таблицу на форму
	
	КоличествоПредопределенныхСтрок = КоличествоПредопределенныхЭлементов("ВидДеятельности");
	
	ЭлементыСтрокиКодовОКВЭД = Новый Массив;
	МаксКоличествоКодовОКВЭДвСтроке = МаксКоличествоКодовОКВЭДвСтроке(ТаблицаВидовДеятельности.Количество());
	
	Если ТаблицаВидовДеятельности.Количество() > 0 Тогда
		ИзменениеТекущйСтроки = ТаблицаВидовДеятельности[0].Изменение;
		// Спецкостыль для выравнивания декораций
		ЭлементФормы = Элементы[ИмяЭлементаПоИндексу(0, "ЗаголовокВидаДеятельности")];
		ЭлементФормы.Заголовок = ?(ЭтоЮрЛицо(ЭтотОбъект), НСтр("ru = 'Юридический адрес'"), НСтр("ru = 'Коды ОКВЭД'"));
	КонецЕсли;
	
	ИндексСтроки = 0;
	Для Каждого ВидДеятельности Из ТаблицаВидовДеятельности Цикл
		
		Если ЭлементыСтрокиКодовОКВЭД.Количество() = МаксКоличествоКодовОКВЭДвСтроке
			Или ВидДеятельности.Изменение <> ИзменениеТекущйСтроки Тогда
			
			Если ИндексСтроки = КоличествоПредопределенныхСтрок Тогда
				ДобавитьПредставлениеВидаДеятельности(ИндексСтроки);
				КоличествоПредопределенныхСтрок = КоличествоПредопределенныхСтрок + 1;
			КонецЕсли;
			
			ОтобразитьСтрокуКодовОКВЭД(ИндексСтроки, ЭлементыСтрокиКодовОКВЭД, ИзменениеТекущйСтроки);
			ЭлементыСтрокиКодовОКВЭД.Очистить();
			
			ИндексСтроки = ИндексСтроки + 1;
			
		КонецЕсли;
		
		ЭлементыСтрокиКодовОКВЭД.Добавить(ВидДеятельности.Код);
		
		ИзменениеТекущйСтроки = ВидДеятельности.Изменение;
		
	КонецЦикла;
	
	Если ЭлементыСтрокиКодовОКВЭД.Количество() > 0 Тогда
		
		Если ИндексСтроки = КоличествоПредопределенныхСтрок Тогда
			ДобавитьПредставлениеВидаДеятельности(ИндексСтроки);
			КоличествоПредопределенныхСтрок = КоличествоПредопределенныхСтрок + 1;
		КонецЕсли;
			
		ОтобразитьСтрокуКодовОКВЭД(ИндексСтроки, ЭлементыСтрокиКодовОКВЭД, ИзменениеТекущйСтроки);
		ЭлементыСтрокиКодовОКВЭД.Очистить();
		
		ИндексСтроки = ИндексСтроки + 1;
		
	КонецЕсли;
	
	КоличествоСтрокВидовДеятельности = ИндексСтроки;
	
	Для Индекс = КоличествоСтрокВидовДеятельности По КоличествоПредопределенныхСтрок - 1 Цикл
		ЭлементФормы = Элементы[ИмяЭлементаПоИндексу(Индекс, "ВидДеятельности")];
		ЭлементФормы.Видимость = Ложь;
	КонецЦикла;
	
	ИзменитьВидыДеятельности = ТекстГиперссылкиВидыДеятельности(НовыхКодов, УдаленоКодов);
	
	Элементы.ИзменитьВидыДеятельности.Видимость = ЕстьОсновнойКодОКВЭД Или ЕстьПрочиеКодыОКВЭД;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьСтрокуКодовОКВЭД(Индекс, ЭлементыСтрокиКодовОКВЭД, Изменение)
	
	ЭлементФормы = Элементы[ИмяЭлементаПоИндексу(Индекс, "ВидДеятельности")];
	ЭлементФормы.Видимость = Истина;
	
	Шрифт = ?(Изменение = 1, ШрифтИзмененныхРеквизитов, Новый Шрифт);
	
	ЭлементФормы = Элементы[ИмяЭлементаПоИндексу(Индекс, "СтрокаКодовОКВЭД")];
	ЭлементФормы.Заголовок = СтрСоединить(ЭлементыСтрокиКодовОКВЭД, "; ");
	ЭлементФормы.Шрифт = Шрифт;
	
КонецПроцедуры

// Добавляет новую строку кодов ОКВЭД на форму
//
&НаСервере
Процедура ДобавитьПредставлениеВидаДеятельности(Индекс)
	
	ГруппаВидДеятельности = Элементы.Добавить(
		ИмяЭлементаПоИндексу(Индекс, "ВидДеятельности"),
		Тип("ГруппаФормы"),
		Элементы.ВидыДеятельности);
	ГруппаВидДеятельности.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаВидДеятельности.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаВидДеятельности.Заголовок = СтрШаблон("ВидДеятельности[%1]", Индекс);
	ГруппаВидДеятельности.ОтображатьЗаголовок = Ложь;
	ГруппаВидДеятельности.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	ГруппаВидДеятельности.Объединенная = Ложь;
	
	ЗаголовокВидаДеятельности = Элементы.Добавить(
		ИмяЭлементаПоИндексу(Индекс, "ЗаголовокВидаДеятельности"),
		Тип("ДекорацияФормы"),
		ГруппаВидДеятельности);
	ЗаголовокВидаДеятельности.Заголовок = НСтр("ru = 'КодыОКВЭД'");
	ЗаголовокВидаДеятельности.Ширина = Элементы[ИмяЭлементаПоИндексу(0, "ЗаголовокВидаДеятельности")].Ширина;
	ЗаголовокВидаДеятельности.РастягиватьПоГоризонтали = Ложь;
	ЗаголовокВидаДеятельности.ЦветТекста = ЦветаСтиля.ЦветФонаФормы;
	
	СтрокаКодовОКВЭД = Элементы.Добавить(
		ИмяЭлементаПоИндексу(Индекс, "СтрокаКодовОКВЭД"),
		Тип("ДекорацияФормы"),
		ГруппаВидДеятельности);
	СтрокаКодовОКВЭД.АвтоМаксимальнаяШирина = Ложь;
	
КонецПроцедуры

// Возвращает число кодов ОКВЭД в строке формы
//
&НаСервереБезКонтекста
Функция МаксКоличествоКодовОКВЭДвСтроке(КоличествоВидовДеятельности)
	
	ПредопределенноеЗначение = 10;
	Если КоличествоВидовДеятельности < ПредопределенноеЗначение Тогда
		Возврат ПредопределенноеЗначение; // Не имеет значения
	КонецЕсли;
	
	КоличествоВПоследнейСтроке = КоличествоВидовДеятельности
		- (ПредопределенноеЗначение * Цел(КоличествоВидовДеятельности / ПредопределенноеЗначение));
	Если КоличествоВПоследнейСтроке = 1 Тогда
		Возврат ПредопределенноеЗначение + 1; // Избегаем переноса ради одного кода
	Иначе
		Возврат ПредопределенноеЗначение;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ТекстГиперссылкиВидыДеятельности(НовыхКодов, УдаленоКодов)
	
	МассивИзменений = Новый Массив;
	
	Если ИзмененОсновнойВидДеятельности(ЭтотОбъект) Тогда
		МассивИзменений.Добавить(НСтр("ru = 'Основной код изменен'"));
	КонецЕсли;
	
	Если УдаленоКодов <> 0 Тогда
		УдаленоЦифрамиИПрописью = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
			УдаленоКодов, НСтр("ru = 'код удален, кода удалено, кодов удалено'"));
		МассивИзменений.Добавить(УдаленоЦифрамиИПрописью);
	КонецЕсли;
	
	Если НовыхКодов <> 0 Тогда
		ДобавленоЦифрамиИПрописью = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
			НовыхКодов, НСтр("ru = 'код добавлен, кода добавлено, кодов добавлено'"));
		МассивИзменений.Добавить(ДобавленоЦифрамиИПрописью);
	КонецЕсли;
	
	Если МассивИзменений.Количество() > 0 Тогда
		ТекстГиперссылки = СтрСоединить(МассивИзменений, ", ");
	Иначе
		ТекстГиперссылки = НСтр("ru = 'Изменить'");
	КонецЕсли;
	
	Возврат ТекстГиперссылки;
	
КонецФункции

// Возвращает число элементов на форме с именем ПрефиксИмени1, ПрефиксИмени2 и т.д.
//
&НаСервере
Функция КоличествоПредопределенныхЭлементов(ПрефиксИмени)
	
	Перем Количество;
	
	Количество = 0;
	Пока Истина Цикл
		Если Элементы.Найти(ИмяЭлементаПоИндексу(Количество, ПрефиксИмени)) <> Неопределено Тогда
			Количество = Количество + 1;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Количество;
	
КонецФункции

// Возвращает имя элемента формы
//
&НаСервереБезКонтекста
Функция ИмяЭлементаПоИндексу(Индекс, ПрефиксИмени)
	
	Возврат СтрШаблон(ПрефиксИмени + "%1", Индекс);
	
КонецФункции

#КонецОбласти

#Область Навигация

&НаСервере
Процедура ИзменитьЭтап(Идентификатор)
	
	Если Идентификатор = "ВнесениеИзмененийЕГР_СписокИзменений" Тогда
		
		Если ОбъектЗаполнен(Объект) Тогда
			Элементы.ЗаполнитьЗаявление.КнопкаПоУмолчанию = Истина;
		Иначе
			Элементы.ЗаполнитьРеквизитыПоДаннымЕГР.КнопкаПоУмолчанию = Истина;
		КонецЕсли;
		
		УстановитьВидимостьСтраницы(ЭтотОбъект, "СписокИзменений");
		
	ИначеЕсли Идентификатор = "ВнесениеИзмененийЕГР_Заявление" Тогда
		
		Если Модифицированность Тогда
			ПрочитатьЗаявителя();
			ПрочитатьОтветственныеЛица();
			ПрочитатьДанныеЗаявления();
			Модифицированность = Ложь;
		КонецЕсли;
		
		ЗаполнитьДобавленныеКолонкиТаблицыУчредители();
		
		Элементы.СформироватьДокументы.КнопкаПоУмолчанию = Истина;
		
		УстановитьВидимостьСтраницы(ЭтотОбъект, "Заявление");
		
	ИначеЕсли Идентификатор = "ВнесениеИзмененийЕГР_Документы" Тогда
		
		ИзмененияВносятсяВУчредительныеДокументы = ИзмененияВносятсяВУчредительныеДокументы(
			ЭтоЮрЛицо(ЭтотОбъект),
			СтруктураИзменений(ЭтотОбъект),
			АдресВУставеПолный(АдресВУставе),
			КодыОКВЭДпротиворечатУставу(ВидыДеятельностиВУставе));
		
		Если ИзмененияВносятсяВУчредительныеДокументы Тогда
			КвитанцияОбОплатеГоспошлины =
				Обработки.РегистрацияОрганизации.ПрисоединенныйФайлКвитанцииНаОплатуГоспошлиныОрганизации(Объект.Ссылка);
		Иначе
			КвитанцияОбОплатеГоспошлины = Неопределено;
		КонецЕсли;
		
		КвитанцияОбОплатеГоспошлиныПолучена = КвитанцияОбОплатеГоспошлины <> Неопределено
			И Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КвитанцияОбОплатеГоспошлины, "ПометкаУдаления");
		
		Если ИзмененоМестоположение(ЭтотОбъект) Тогда
			Элементы.АдресИРеквизитыВашейИнспекции.Заголовок = НСтр("ru = 'Адрес и реквизиты инспекции по новому адресу'");
		Иначе
			Элементы.АдресИРеквизитыВашейИнспекции.Заголовок = НСтр("ru = 'Адрес и реквизиты вашей инспекции'");
		КонецЕсли;
		
		УстановитьВидимостьБаннераНачалоРаботы();
		
		УстановитьВидимостьСтраницы(ЭтотОбъект, "Документы");
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	ТекущийЭтап = Идентификатор;
	
	РазместитьНавигациюНаСервере();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьСтраницы(Форма, ИмяСтраницы)
	
	Элементы = Форма.Элементы;
	
	Для Каждого Страница ИЗ ИменаСтраницПомощника() Цикл
		Элементы[Страница].Видимость = (Страница = ИмяСтраницы);
	КонецЦикла;
	
	Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы[ИмяСтраницы];
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИменаСтраницПомощника()
	
	ИменаСтраницПомощника = Новый Массив;
	ИменаСтраницПомощника.Добавить("СписокИзменений");
	ИменаСтраницПомощника.Добавить("Заявление");
	ИменаСтраницПомощника.Добавить("Документы");
	ИменаСтраницПомощника.Добавить("Ожидание");
	
	Возврат ИменаСтраницПомощника;
	
КонецФункции

&НаСервере
Процедура РазместитьНавигациюНаСервере()
	
	СтруктураПараметров = Новый Структура("НавигацияПараметрФормы", ТекущийЭтап);
	Обработки.РегистрацияОрганизации.РазместитьНавигацию(ЭтотОбъект, СтруктураПараметров);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеДаннымиЕГР

&НаКлиенте
Функция НовыйЗапросДанныхЕГР(ИНН)
	
	Запрос = ОрганизацииФормыДляОтчетностиКлиентСервер.НовыйЗапросДанныхЕГР();
	Запрос.ИНН = ИНН;
	Запрос.ЮридическоеФизическоеЛицо = Объект.ЮридическоеФизическоеЛицо;
	Запрос.Ссылка = Объект.Ссылка;
	Запрос.ОбъектЗаполнен = ОбъектЗаполнен(Объект);
	Запрос.ОтборОПФ = СтрРазделить("Индивидуальные предприниматели,Общества с ограниченной ответственностью", ",");
	
	Возврат Запрос;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПоискаИНН()
	
	ОрганизацииФормыДляОтчетностиКлиент.ОбработатьРезультатПоискаИННПриИзмененииПоляПоиска(
		ПоискИННОтвет,
		ОписаниеОповещенияЗакончитьЗаполнениеДаннымиЕГР());
	
КонецПроцедуры

&НаКлиенте
Функция ОписаниеОповещенияЗакончитьЗаполнениеДаннымиЕГР()
	
	// Параметр оповещения может быть модифицирован - см. НачатьЗаполнениеДаннымиЕГР()
	Возврат Новый ОписаниеОповещения("ЗакончитьЗаполнениеДаннымиЕГР", ЭтотОбъект, Новый Структура);
	
КонецФункции

&НаКлиенте
Процедура ЗакончитьЗаполнениеДаннымиЕГР(Ответ, ПараметрыЗаполнения) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да И ПараметрыЗаполнения.Свойство("ПоискИННОтвет") Тогда
		УстановитьВидимостьСтраницы(ЭтотОбъект, "Ожидание");
		УправлениеФормой(ЭтотОбъект);
		ЗаполнитьДаннымиЕГР(ПараметрыЗаполнения.ПоискИННОтвет);
		ЗаполнитьИнформациюОбУчредителяхИКодахОКВЭД(ПоискИННЗапрос);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиЕГР(Знач ПоискИННОтвет)
	
	СброситьИзмененияРеквизитов();
	
	Обработки.РегистрацияОрганизации.ЗаполнитьДаннымиЕГР(ПоискИННОтвет, ЭтотОбъект);
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИнформациюОбУчредителяхИКодахОКВЭД(ИНН)
	
	ДлительнаяОперация = НачатьПолучениеИнформацииОбУчредителяхИКодахОКВЭД(ИНН);
	Если ДлительнаяОперация.Статус = "Ошибка" Тогда
		ПоказатьОшибкуПолученияИнформацииОбУчредителяхИКодахОКВЭД(ДлительнаяОперация);
	Иначе
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
		НастройкиОжидания.ПолучатьРезультат = Истина;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
			ДлительнаяОперация,
			Новый ОписаниеОповещения("Подключаемый_ПослеПолученияИнформацииОбУчредителяхИКодахОКВЭД", ЭтотОбъект),
			НастройкиОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НачатьПолучениеИнформацииОбУчредителяхИКодахОКВЭД(ИННЗапрос)
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	НастройкиЗапуска.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение информации о связях по данным ЕГР'");
	
	Результат = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.РегистрацияОрганизации.ПолучитьИнформациюОбУчредителяхИКодахОКВЭДВФоне",
		ИННЗапрос,
		НастройкиЗапуска);
		
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПослеПолученияИнформацииОбУчредителяхИКодахОКВЭД(ДлительнаяОперация, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		ОжиданиеОтвета = Ложь;
		ПослеПолученияИнформацииОбУчредителяхИКодахОКВЭДНаСервере(ДлительнаяОперация.АдресРезультата, ОжиданиеОтвета);
		Если ОжиданиеОтвета Тогда
			ПодключитьОбработчикОжидания("Подключаемый_ПолучитьИнформациюОбУчредителяхИКодахОКВЭД", 3, Истина);
		КонецЕсли;
	Иначе
		ПоказатьОшибкуПолученияИнформацииОбУчредителяхИКодахОКВЭД(ДлительнаяОперация);
		ПослеЗаполненияДанныхЕГР();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеПолученияИнформацииОбУчредителяхИКодахОКВЭДНаСервере(АдресРезультата, ОжиданиеОтвета)
	
	ИнформацияОСвязях = ПолучитьИзВременногоХранилища(АдресРезультата);
	ОжиданиеОтвета = ИнформацияОСвязях.ОжиданиеОтвета;
	
	Если ЗначениеЗаполнено(ИнформацияОСвязях.ОписаниеОшибки) Тогда
		ТекстСообщения = НСтр("ru = 'Ошибка при получении информации об учредителях и кодах ОКВЭД:'")
			+ Символы.ПС
			+ ИнформацияОСвязях.ОписаниеОшибки;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ,,"ПоискИННЗапрос");
	КонецЕсли;
	
	Если НЕ ОжиданиеОтвета Тогда
		Обработки.РегистрацияОрганизации.ЗаполнитьИнформацияОСвязях(ИнформацияОСвязях, ЭтотОбъект);
		ПослеЗаполненияДанныхЕГР();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолучитьИнформациюОбУчредителяхИКодахОКВЭД()
	
	ЗаполнитьИнформациюОбУчредителяхИКодахОКВЭД(ПоискИННЗапрос);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОшибкуПолученияИнформацииОбУчредителяхИКодахОКВЭД(ДлительнаяОперация)
	
	Текст = НСтр("ru = 'Ошибка при получении информации об учредителях и кодах ОКВЭД:'");
	Предупреждение = Новый Структура;
	Предупреждение.Вставить("Текст", Текст + Символы.ПС + ДлительнаяОперация.КраткоеПредставлениеОшибки);
	Предупреждение.Вставить("Подробно", ДлительнаяОперация.ПодробноеПредставлениеОшибки);
	СтандартныеПодсистемыКлиент.ВывестиПредупреждение(ЭтотОбъект, Предупреждение);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаполненияДанныхЕГР()
	
	Обработки.РегистрацияОрганизации.ЗаполнитьДополнительныеРеквизитыПоДаннымЕГР(ЭтотОбъект);
	
	Если ПустаяСтрока(РуководительНаименование) Тогда
		РуководительНаименование = НСтр("ru = 'В реестре не указаны данные о руководителе'");
	КонецЕсли;
	
	ОтобразитьУчредителей();
	ОтобразитьВидыДеятельности();
	
	ИзменитьЭтап("ВнесениеИзмененийЕГР_СписокИзменений");
	
КонецПроцедуры

#КонецОбласти

#Область ЗаписьУчредителейВФоне

&НаСервере
Функция НачатьЗаписьУчредителей()
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	НастройкиЗапуска.НаименованиеФоновогоЗадания = НСтр("ru = 'Запись учредителей'");
	
	Результат = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.РегистрацияОрганизации.ЗаписатьУчредителей",
		Учредители.Выгрузить(),
		НастройкиЗапуска);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПослеЗаписиУчредителей(ДлительнаяОперация, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		ОбработатьЗаписьУчредителей(ДлительнаяОперация.АдресРезультата);
		ОповеститьОбИзменении(Тип("СправочникСсылка.Контрагенты"));
		ОповеститьОбИзменении(Тип("СправочникСсылка.ФизическиеЛица"));
	Иначе
		ПоказатьОшибкуЗаписиУчредителей(ДлительнаяОперация);
		ОбработатьОшибкуЗаписиУчредителей();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьЗаписьУчредителей(АдресРезультата)
	
	ТаблицаУчредителей = ПолучитьИзВременногоХранилища(АдресРезультата);
	Если ТипЗнч(ТаблицаУчредителей) = Тип("ТаблицаЗначений") Тогда
		Учредители.Загрузить(ТаблицаУчредителей);
	КонецЕсли;
	
	ИзменитьЭтап("ВнесениеИзмененийЕГР_Заявление");
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьОшибкуЗаписиУчредителей()
	
	ИзменитьЭтап("ВнесениеИзмененийЕГР_СписокИзменений");
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОшибкуЗаписиУчредителей(ДлительнаяОперация)
	
	Текст = НСтр("ru = 'Ошибка при создании заявления:'");
	Предупреждение = Новый Структура;
	Предупреждение.Вставить("Текст", Текст + Символы.ПС + ДлительнаяОперация.КраткоеПредставлениеОшибки);
	Предупреждение.Вставить("Подробно", ДлительнаяОперация.ПодробноеПредставлениеОшибки);
	СтандартныеПодсистемыКлиент.ВывестиПредупреждение(ЭтотОбъект, Предупреждение);
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеДокументовВФоне

&НаСервере
Функция НачатьФормироватьДокументы()
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	НастройкиЗапуска.НаименованиеФоновогоЗадания = НСтр("ru = 'Формирование документов для внесения изменений в ЕГР'");
	
	Результат = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.РегистрацияОрганизации.СформироватьДокументыДляИзмененияРеквизитов",
		ПараметрыФормированияДокументов(),
		НастройкиЗапуска);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПараметрыФормированияДокументов()
	
	ЭтоЮрЛицо = ЭтоЮрЛицо(ЭтотОбъект);
	
	// Все реквизиты, которые выведены на форму необходимо
	// перенести в структуру для передачи в фоновое задание.
	
	Изменено = СтруктураИзменений(ЭтотОбъект);
	ЮрАдресИПропискаГлавногоСовпадают = Изменено.Местоположение
		И ЮрАдресИПропискаГлавногоСовпадают(КонтактнаяИнформацияОписаниеДополнительныхРеквизитов, ЮридическийАдресНовыйЗначенияПолей, Учредители);
	
	ПараметрыФормированияДокументов = Новый Структура;
	ПараметрыФормированияДокументов.Вставить("Изменено", Изменено);
	ПараметрыФормированияДокументов.Вставить("ИзмененияВносятсяВУчредительныеДокументы",
		ИзмененияВносятсяВУчредительныеДокументы(ЭтоЮрЛицо, Изменено, АдресВУставеПолный(АдресВУставе), КодыОКВЭДпротиворечатУставу(ВидыДеятельностиВУставе)));
	ПараметрыФормированияДокументов.Вставить("ИзмененияТребуютУведомления", ИзмененияТребуютУведомления(ЭтоЮрЛицо, Изменено, ЮрАдресИПропискаГлавногоСовпадают));
	ПараметрыФормированияДокументов.Вставить("СпособРегистрации", СпособРегистрации);
	ПараметрыФормированияДокументов.Вставить("ДатаРешения", ДатаРешения);
	
	ПараметрыФормированияДокументов.Вставить("ДанныеЗаявителя", ДанныеЗаявителя());
	
	Если Изменено.ПолноеНаименование Или Изменено.СокращенноеНаименование Тогда
		ПараметрыФормированияДокументов.Вставить("НаименованиеПолноеНовое",      НаименованиеПолноеНовое);
		ПараметрыФормированияДокументов.Вставить("НаименованиеСокращенноеНовое", НаименованиеСокращенноеНовое);
	КонецЕсли;
	
	Если Изменено.ЮридическийАдрес Тогда
		ПараметрыФормированияДокументов.Вставить("ЮридическийАдресНовыйЗначенияПолей", ЮридическийАдресНовыйЗначенияПолей);
	КонецЕсли;
	
	Если Изменено.ОсновнойВидДеятельности Тогда
		ПараметрыФормированияДокументов.Вставить("КодОКВЭД2", КодОКВЭД2);
		ПараметрыФормированияДокументов.Вставить("КодОКВЭД2Новый", КодОКВЭД2Новый);
	КонецЕсли;
	
	Если Изменено.ВидыДеятельности Тогда
		ПараметрыФормированияДокументов.Вставить("ВидыДеятельностиНовые", ВидыДеятельностиНовые.Выгрузить());
	КонецЕсли;
	
	Если ЭтоЮрЛицо(ЭтотОбъект) Тогда
		
		ПараметрыФормированияДокументов.Вставить("ДанныеОрганизации", ДанныеЮридическогоЛица());
		
		ПараметрыФормированияДокументов.Вставить("ДанныеОДолжностиРуководителя", ДанныеОДолжностиРуководителя(Ложь));
		Если Изменено.Руководитель Тогда
			ПараметрыФормированияДокументов.Вставить("ДанныеРуководителя", ДанныеРуководителя(Ложь));
			ПараметрыФормированияДокументов.Вставить("ДанныеНовогоРуководителя", ДанныеРуководителя(Истина));
			ПараметрыФормированияДокументов.Вставить("ДанныеОДолжностиНовогоРуководителя", ДанныеОДолжностиРуководителя(Истина));
		КонецЕсли;
		
		ФормированиеУставногоКапиталаУчредители = УчредителиНовые.Выгрузить();
		ФормированиеУставногоКапиталаУчредители.Колонки.Ссылка.Имя = "Учредитель";
		ФормированиеУставногоКапиталаУчредители.Колонки.Добавить("ЭтоЮридическоеЛицо", Новый ОписаниеТипов("Булево"));
		Для Каждого Участник Из ФормированиеУставногоКапиталаУчредители Цикл
			Участник.ЭтоЮридическоеЛицо = Участник.ТипУчредителя = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		КонецЦикла;
		
		ФормированиеУставногоКапиталаУчредителиДоИзменения = Учредители.Выгрузить();
		ФормированиеУставногоКапиталаУчредителиДоИзменения.Колонки.Ссылка.Имя = "Учредитель";
		ФормированиеУставногоКапиталаУчредителиДоИзменения.Колонки.Добавить("ЭтоЮридическоеЛицо", Новый ОписаниеТипов("Булево"));
		Для Каждого Участник Из ФормированиеУставногоКапиталаУчредителиДоИзменения Цикл
			Участник.ЭтоЮридическоеЛицо = Участник.ТипУчредителя = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		КонецЦикла;
		
		ДанныеУставногоКапитала = Новый Структура();
		ДанныеУставногоКапитала.Вставить("Дата",            ДатаРешения);
		ДанныеУставногоКапитала.Вставить("Ссылка",          ФормированиеУставногоКапитала.Ссылка);
		
		ДанныеУставногоКапитала.Вставить("УставныйКапитал", УставныйКапиталНовый);
		ДанныеУставногоКапитала.Вставить("Учредители",      ФормированиеУставногоКапиталаУчредители);
		
		ДанныеУставногоКапитала.Вставить("УставныйКапиталДоИзменения", ФормированиеУставногоКапитала.УставныйКапитал);
		ДанныеУставногоКапитала.Вставить("УчредителиДоИзменения",      ФормированиеУставногоКапиталаУчредителиДоИзменения);
		
		ДанныеУставногоКапитала.Вставить("СпособРегистрации", СпособРегистрации);
		ПараметрыФормированияДокументов.Вставить("ДанныеУставногоКапитала", ДанныеУставногоКапитала);
		
	Иначе
		
		ПараметрыФормированияДокументов.Вставить("ДанныеОрганизации", ДанныеИндивидуальногоПредпринимателя());
	КонецЕсли;
	
	Возврат ПараметрыФормированияДокументов;
	
КонецФункции

&НаСервере
Функция ДанныеЮридическогоЛица()
	
	ДанныеОрганизации = Новый Структура();
	ДанныеОрганизации.Вставить("Ссылка", Объект.Ссылка);
	ДанныеОрганизации.Вставить("ЮридическоеФизическоеЛицо", Объект.ЮридическоеФизическоеЛицо);
	ДанныеОрганизации.Вставить("Наименование", Объект.Наименование);
	ДанныеОрганизации.Вставить("ИНН", Объект.ИНН);
	ДанныеОрганизации.Вставить("КПП", Объект.КПП);
	ДанныеОрганизации.Вставить("ОГРН", Объект.ОГРН);
	ДанныеОрганизации.Вставить("ДатаРегистрации", Объект.ДатаРегистрации);
	ДанныеОрганизации.Вставить("ДатаРешения", ДатаРешения);
	
	ДанныеОрганизации.Вставить("НаименованиеСокращенное",      НаименованиеСокращенное);
	ДанныеОрганизации.Вставить("НаименованиеСокращенноеНовое", НаименованиеСокращенноеНовое);
	
	ДанныеОрганизации.Вставить("НаименованиеПолное",      НаименованиеПолное);
	ДанныеОрганизации.Вставить("НаименованиеПолноеНовое", НаименованиеПолноеНовое);
	
	ДанныеОрганизации.Вставить("ЮридическийАдресЗначенияПолей", 
			ЗначенияПолейКонтактнойИнформации(ЭтотОбъект, "КонтактнаяИнформацияПолеЮрАдресОрганизации"));
	ДанныеОрганизации.Вставить("ЮридическийАдресНовыйЗначенияПолей", 
			ЮридическийАдресНовыйЗначенияПолей);
	
	ДанныеОрганизации.Вставить("КодНалоговогоОргана", КодНалоговогоОргана);
	
	ДанныеОрганизации.Вставить("РегистрационныйНомерПФР", Объект.РегистрационныйНомерПФР);
	ДанныеОрганизации.Вставить("КодОрганаПФР", Объект.КодОрганаПФР);
	ДанныеОрганизации.Вставить("НаименованиеТерриториальногоОрганаПФР", Объект.НаименованиеТерриториальногоОрганаПФР);
	
	ДанныеОрганизации.Вставить("РегистрационныйНомерФСС", Объект.РегистрационныйНомерФСС);
	ДанныеОрганизации.Вставить("КодПодчиненностиФСС", Объект.КодПодчиненностиФСС);
	ДанныеОрганизации.Вставить("НаименованиеТерриториальногоОрганаФСС", Объект.НаименованиеТерриториальногоОрганаФСС);
	
	ДанныеОрганизации.Вставить("КодОКВЭД2", КодОКВЭД2);
	ДанныеОрганизации.Вставить("КодОКВЭД2Новый", КодОКВЭД2Новый);
	
	ДанныеОрганизации.Вставить("НаименованиеОКВЭД2", Объект.НаименованиеОКВЭД2);
	ДанныеОрганизации.Вставить("НаименованиеОКВЭД2Новое", НаименованиеОКВЭД2Новое);
	
	ДанныеОрганизации.Вставить("ДополнительныеКодыОКВЭД2",
		ДополнительныеКодыОКВЭД2(ВидыДеятельности, КодОКВЭД2));
	ДанныеОрганизации.Вставить("ДополнительныеКодыОКВЭД2Новые",
		ДополнительныеКодыОКВЭД2(ВидыДеятельностиНовые, ?(ИзмененОсновнойВидДеятельности(ЭтотОбъект), КодОКВЭД2Новый, КодОКВЭД2)));
	
	ДанныеОрганизации.Вставить("ДанныеРегистрацииВНалоговомОргане", ДанныеРегистрацииВНалоговомОргане());
	ДанныеОрганизации.Вставить("ДанныеРегистрацииВНалоговомОрганеНовое", ДанныеРегистрацииВНалоговомОрганеНовое());
	
	Возврат ДанныеОрганизации;
	
КонецФункции

&НаСервере
Функция ДанныеИндивидуальногоПредпринимателя()
	
	ДанныеОрганизации = Новый Структура();
	ДанныеОрганизации.Вставить("Ссылка", Объект.Ссылка);
	ДанныеОрганизации.Вставить("ЮридическоеФизическоеЛицо", Объект.ЮридическоеФизическоеЛицо);
	ДанныеОрганизации.Вставить("Наименование", Объект.Наименование);
	ДанныеОрганизации.Вставить("ИНН", Объект.ИНН);
	ДанныеОрганизации.Вставить("ОГРН", Объект.ОГРН);
	
	ДанныеОрганизации.Вставить("ДатаРегистрации", Объект.ДатаРегистрации);
	ДанныеОрганизации.Вставить("СвидетельствоСерияНомер", Объект.СвидетельствоСерияНомер);
	ДанныеОрганизации.Вставить("СвидетельствоДатаВыдачи", Объект.СвидетельствоДатаВыдачи);
	
	ДанныеОрганизации.Вставить("КодНалоговогоОргана", КодНалоговогоОргана);
	
	ДанныеОрганизации.Вставить("ИПРегистрационныйНомерПФР", Объект.ИПРегистрационныйНомерПФР);
	ДанныеОрганизации.Вставить("РегистрационныйНомерПФР", Объект.РегистрационныйНомерПФР);
	ДанныеОрганизации.Вставить("КодОрганаПФР", Объект.КодОрганаПФР);
	ДанныеОрганизации.Вставить("НаименованиеТерриториальногоОрганаПФР", Объект.НаименованиеТерриториальногоОрганаПФР);
	
	ДанныеОрганизации.Вставить("ИПРегистрационныйНомерФСС", Объект.ИПРегистрационныйНомерФСС);
	ДанныеОрганизации.Вставить("РегистрационныйНомерФСС", Объект.РегистрационныйНомерФСС);
	ДанныеОрганизации.Вставить("КодПодчиненностиФСС", Объект.КодПодчиненностиФСС);
	ДанныеОрганизации.Вставить("НаименованиеТерриториальногоОрганаФСС", Объект.НаименованиеТерриториальногоОрганаФСС);
	
	ДанныеОрганизации.Вставить("КодОКВЭД2", КодОКВЭД2);
	ДанныеОрганизации.Вставить("КодОКВЭД2Новый", КодОКВЭД2Новый);
	
	ДанныеОрганизации.Вставить("НаименованиеОКВЭД2", Объект.НаименованиеОКВЭД2);
	ДанныеОрганизации.Вставить("НаименованиеОКВЭД2Новое", НаименованиеОКВЭД2Новое);
	
	ДанныеОрганизации.Вставить("ДополнительныеКодыОКВЭД2",
		ДополнительныеКодыОКВЭД2(ВидыДеятельности, КодОКВЭД2));
	ДанныеОрганизации.Вставить("ДополнительныеКодыОКВЭД2Новые",
		ДополнительныеКодыОКВЭД2(ВидыДеятельностиНовые, КодОКВЭД2Новый));
	
	ДанныеОрганизации.Вставить("ДанныеРегистрацииВНалоговомОргане", ДанныеРегистрацииВНалоговомОргане());
	
	ДанныеИндивидуальногоПредпринимателя = Обработки.РегистрацияОрганизации.НовыеДанныеФизическогоЛица();
	ДанныеИндивидуальногоПредпринимателя.Ссылка = Заявитель.Ссылка;
	ДанныеИндивидуальногоПредпринимателя.Фамилия = Объект.ФамилияИП;
	ДанныеИндивидуальногоПредпринимателя.Имя = Объект.ИмяИП;
	ДанныеИндивидуальногоПредпринимателя.Отчество = Объект.ОтчествоИП;
	ДанныеИндивидуальногоПредпринимателя.Пол = Заявитель.Пол;
	ДанныеИндивидуальногоПредпринимателя.ИНН = Объект.ИНН;
	ДанныеИндивидуальногоПредпринимателя.ДатаРождения = Заявитель.ДатаРождения;
	ДанныеИндивидуальногоПредпринимателя.МестоРожденияПредставление = Заявитель.МестоРожденияПредставление;
	
	ДанныеИндивидуальногоПредпринимателя.АдресПропискиЗначенияПолей =
		ЗначенияПолейКонтактнойИнформации(ЭтотОбъект, "КонтактнаяИнформацияПолеАдресПоПропискеФизическиеЛица");
	ДанныеИндивидуальногоПредпринимателя.ТелефонРабочийЗначенияПолей =
		ЗначенияПолейКонтактнойИнформации(ЭтотОбъект, "КонтактнаяИнформацияПолеТелефонРабочийФизическиеЛица");
	ДанныеИндивидуальногоПредпринимателя.EMailЗначенияПолей = 
		ЗначенияПолейКонтактнойИнформации(ЭтотОбъект, "КонтактнаяИнформацияПолеEMailФизическиеЛица");
	
	СерияИНомерПаспорта = ОрганизацииФормы.СерияНомерПаспортаРаздельно(ПаспортСерияНомер);
	
	ДанныеИндивидуальногоПредпринимателя.ПаспортныеДанные.Серия            = СерияИНомерПаспорта.Серия;
	ДанныеИндивидуальногоПредпринимателя.ПаспортныеДанные.Номер            = СерияИНомерПаспорта.Номер;
	ДанныеИндивидуальногоПредпринимателя.ПаспортныеДанные.КемВыдан         = ПаспортныеДанныеЗаявителя.КемВыдан;
	ДанныеИндивидуальногоПредпринимателя.ПаспортныеДанные.ДатаВыдачи       = ПаспортныеДанныеЗаявителя.ДатаВыдачи;
	ДанныеИндивидуальногоПредпринимателя.ПаспортныеДанные.КодПодразделения = ПаспортныеДанныеЗаявителя.КодПодразделения;
	
	ДанныеОрганизации.Вставить("ИндивидуальныйПредприниматель", ДанныеИндивидуальногоПредпринимателя);
	
	Возврат ДанныеОрганизации;
	
КонецФункции

&НаСервере
Функция ДанныеЗаявителя()
	
	ДанныеЗаявителя = Обработки.РегистрацияОрганизации.НовыеДанныеФизическогоЛица();
	ДанныеЗаявителя.Ссылка                     = Заявитель.Ссылка;
	ДанныеЗаявителя.Фамилия                    = Заявитель.Фамилия;
	ДанныеЗаявителя.Имя                        = Заявитель.Имя;
	ДанныеЗаявителя.Отчество                   = Заявитель.Отчество;
	ДанныеЗаявителя.Пол                        = Заявитель.Пол;
	ДанныеЗаявителя.ИНН                        = Заявитель.ИНН;
	ДанныеЗаявителя.ДатаРождения               = Заявитель.ДатаРождения;
	ДанныеЗаявителя.МестоРожденияПредставление = Заявитель.МестоРожденияПредставление;
	
	СерияИНомерПаспорта = ОрганизацииФормы.СерияНомерПаспортаРаздельно(ПаспортСерияНомер);
	ДанныеЗаявителя.ПаспортныеДанные.Серия            = СерияИНомерПаспорта.Серия;
	ДанныеЗаявителя.ПаспортныеДанные.Номер            = СерияИНомерПаспорта.Номер;
	ДанныеЗаявителя.ПаспортныеДанные.КемВыдан         = ПаспортныеДанныеЗаявителя.КемВыдан;
	ДанныеЗаявителя.ПаспортныеДанные.ДатаВыдачи       = ПаспортныеДанныеЗаявителя.ДатаВыдачи;
	ДанныеЗаявителя.ПаспортныеДанные.КодПодразделения = ПаспортныеДанныеЗаявителя.КодПодразделения;
	
	ДанныеЗаявителя.АдресПропискиЗначенияПолей  =
			ЗначенияПолейКонтактнойИнформации(ЭтотОбъект, "КонтактнаяИнформацияПолеАдресПоПропискеФизическиеЛица");
	ДанныеЗаявителя.ТелефонРабочийЗначенияПолей =
			ЗначенияПолейКонтактнойИнформации(ЭтотОбъект, "КонтактнаяИнформацияПолеТелефонРабочийФизическиеЛица");
	ДанныеЗаявителя.EMailЗначенияПолей          =
			ЗначенияПолейКонтактнойИнформации(ЭтотОбъект, "КонтактнаяИнформацияПолеEMailФизическиеЛица");
	
	Возврат ДанныеЗаявителя;
	
КонецФункции

&НаСервере
Функция ДанныеРуководителя(НовыйРуководитель = Ложь)
	
	ИмяМенеджера = ?(НовыйРуководитель, "ОтветственныеЛицаНовые", "ОтветственныеЛица");
	
	ДанныеРуководителя = Обработки.РегистрацияОрганизации.НовыеДанныеФизическогоЛица();
	
	МенеджерОтветственныеЛица = ЭтотОбъект[ИмяМенеджера];
	
	Если НовыйРуководитель Или ЗначениеЗаполнено(МенеджерОтветственныеЛица.ФизическоеЛицо) Тогда
		ЗаполнитьЗначенияСвойств(ДанныеРуководителя,
			ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				МенеджерОтветственныеЛица.ФизическоеЛицо, "Ссылка, Фамилия, Имя, Отчество, ИНН, Пол"));
	Иначе
		ДанныеРуководителя.Фамилия  = РуководительФамилия;
		ДанныеРуководителя.Имя      = РуководительИмя;
		ДанныеРуководителя.Отчество = РуководительОтчество;
		ДанныеРуководителя.ИНН      = РуководительИНН;
		ОрганизацииФормыКлиентСервер.ОпределитьПолПоОтчеству(ДанныеРуководителя.Пол, РуководительОтчество);
	КонецЕсли;
	
	Возврат ДанныеРуководителя;
	
КонецФункции

&НаСервере
Функция ДанныеОДолжностиРуководителя(НовыйРуководитель = Ложь)
	
	ИмяМенеджера = ?(НовыйРуководитель, "ОтветственныеЛицаНовые", "ОтветственныеЛица");
	
	ДанныеОДолжностиРуководителя = Обработки.РегистрацияОрганизации.НовыеДанныеДолжности();
	ДанныеОДолжностиРуководителя.ДатаНазначения = ЭтотОбъект[ИмяМенеджера].Период;
	ДанныеОДолжностиРуководителя.Должность      = ЭтотОбъект[ИмяМенеджера].Должность;
	ДанныеОДолжностиРуководителя.СрокПолномочий = ЭтотОбъект[ИмяМенеджера].СрокПолномочий;
	
	Если Не ЗначениеЗаполнено(ДанныеОДолжностиРуководителя.ДатаНазначения) Тогда
		Если НовыйРуководитель Тогда
			ДанныеОДолжностиРуководителя.ДатаНазначения = ДатаРешения;
		Иначе
			Если ЗначениеЗаполнено(Объект.ДатаРегистрации) Тогда
				ДанныеОДолжностиРуководителя.ДатаНазначения = Объект.ДатаРегистрации;
			Иначе
				ДанныеОДолжностиРуководителя.ДатаНазначения = Дата(1899, 12, 31);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеОДолжностиРуководителя.Должность) Тогда
		ДанныеОДолжностиРуководителя.Должность = РуководительДолжность;
	КонецЕсли;
	
	Возврат ДанныеОДолжностиРуководителя;
	
КонецФункции

&НаСервере
Функция ДанныеРегистрацииВНалоговомОрганеНовое()
	
	ДанныеРегистрацииВНалоговомОргане = Обработки.РегистрацияОрганизации.НовыеДанныеРегистрацииВНалоговомОргане();
	СведенияОНалоговомОргане = СведенияОНалоговомОрганеПоАдресу(ЮридическийАдресНовыйЗначенияПолей);
	Если СведенияОНалоговомОргане <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ДанныеРегистрацииВНалоговомОргане, СведенияОНалоговомОргане);
	КонецЕсли;
	
	Возврат ДанныеРегистрацииВНалоговомОргане;
	
КонецФункции

&НаСервере
Функция ДанныеРегистрацииВНалоговомОргане()
	
	ДанныеРегистрацииВНалоговомОргане = Обработки.РегистрацияОрганизации.НовыеДанныеРегистрацииВНалоговомОргане();
	
	Если ЭтоЮрЛицо(ЭтотОбъект) Тогда
		ЗначенияПолейАдреса = ЗначенияПолейКонтактнойИнформации(ЭтотОбъект, "КонтактнаяИнформацияПолеЮрАдресОрганизации");
	Иначе
		ЗначенияПолейАдреса = ЗначенияПолейКонтактнойИнформации(ЭтотОбъект, "КонтактнаяИнформацияПолеАдресПоПропискеФизическиеЛица");
	КонецЕсли;
	
	СведенияОНалоговомОргане = СведенияОНалоговомОрганеПоАдресу(ЗначенияПолейАдреса);
	Если СведенияОНалоговомОргане <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ДанныеРегистрацииВНалоговомОргане, СведенияОНалоговомОргане);
	КонецЕсли;
	
	Возврат ДанныеРегистрацииВНалоговомОргане;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоЮрЛицо(Форма)
	
	Возврат (Форма.Объект.ЮридическоеФизическоеЛицо <> ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо"));
	
КонецФункции

&НаСервереБезКонтекста
Функция ДополнительныеКодыОКВЭД2(ТаблицаВидовДеятельности, ОсновнойКод)
	
	ДополнительныеКоды = Новый Массив;
	Для Каждого ВидДеятельности Из ТаблицаВидовДеятельности Цикл
		Если ВидДеятельности.ЭтоОКВЭД2 И ВидДеятельности.Код <> ОсновнойКод Тогда
			ДополнительныеКоды.Добавить(ВидДеятельности.Код);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрСоединить(ДополнительныеКоды, ";");
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПослеФормированияДокументов(ДлительнаяОперация, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		ОбработатьСформированныеДокументы(ДлительнаяОперация.АдресРезультата);
		ОповеститьОбИзменении(Объект.Ссылка);
		ОповеститьОбИзменении(Заявитель.Ссылка);
		ИзменитьЭтап("ВнесениеИзмененийЕГР_Документы");
	Иначе
		ПоказатьОшибкуФормированияДокументов(ДлительнаяОперация);
		ИзменитьЭтап("ВнесениеИзмененийЕГР_Заявление");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьСформированныеДокументы(АдресРезультата)
	Перем ПлатежныеРеквизитыОплатаГоспошлины; 
	
	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если РезультатВыполнения.Свойство("УставныйКапитал") Тогда
		УставныйКапиталОбъект = РезультатВыполнения.УставныйКапитал.ПолучитьОбъект();
		ЗначениеВРеквизитФормы(УставныйКапиталОбъект, "ФормированиеУставногоКапитала");
	КонецЕсли;
	
	Если РезультатВыполнения.Свойство("НовыйРуководитель") Тогда
		ЗаявительОбъект = РезультатВыполнения.НовыйРуководитель.ПолучитьОбъект();
		ЗначениеВРеквизитФормы(ЗаявительОбъект, "Заявитель");
		ПрочитатьДанныеЗаявителя();
	ИначеЕсли РезультатВыполнения.Свойство("Руководитель") Тогда
		ЗаявительОбъект = РезультатВыполнения.Руководитель.ПолучитьОбъект();
		ЗначениеВРеквизитФормы(ЗаявительОбъект, "Заявитель");
		ПрочитатьДанныеЗаявителя();
	КонецЕсли;
	
	ПлатежныеРеквизитыОплатаГоспошлиныПолучены = РезультатВыполнения.Свойство("ПлатежныеРеквизитыОплатаГоспошлины", ПлатежныеРеквизитыОплатаГоспошлины);
	Если ПлатежныеРеквизитыОплатаГоспошлиныПолучены Тогда
		ПлатежныеРеквизитыОКТМО = ПлатежныеРеквизитыОплатаГоспошлины.ОКТМО;
		ПлатежныеРеквизитыИНН = ПлатежныеРеквизитыОплатаГоспошлины.ИНН;
		ПлатежныеРеквизитыКПП = ПлатежныеРеквизитыОплатаГоспошлины.КПП;
		ПлатежныеРеквизитыНаименованиеПолучателя = ПлатежныеРеквизитыОплатаГоспошлины.НаименованиеПолучателя;
		ПлатежныеРеквизитыБИК = ПлатежныеРеквизитыОплатаГоспошлины.БИК;
		ПлатежныеРеквизитыНомерСчета = ПлатежныеРеквизитыОплатаГоспошлины.НомерСчета;
		ПлатежныеРеквизитыКоррСчет = ПлатежныеРеквизитыОплатаГоспошлины.КоррСчет;
		ПлатежныеРеквизитыНаименованиеБанка = ПлатежныеРеквизитыОплатаГоспошлины.НаименованиеБанка;
		ПлатежныеРеквизитыКБК = ПлатежныеРеквизитыОплатаГоспошлины.КБК;
		ПлатежныеРеквизитыСумма = ПлатежныеРеквизитыОплатаГоспошлины.Сумма;
	Иначе
		ПлатежныеРеквизитыОКТМО = "";
		ПлатежныеРеквизитыИНН = "";
		ПлатежныеРеквизитыКПП = "";
		ПлатежныеРеквизитыНаименованиеПолучателя = "";
		ПлатежныеРеквизитыБИК = "";
		ПлатежныеРеквизитыНомерСчета = "";
		ПлатежныеРеквизитыКоррСчет = "";
		ПлатежныеРеквизитыНаименованиеБанка = "";
		ПлатежныеРеквизитыКБК = "";
		ПлатежныеРеквизитыСумма = 0;
	КонецЕсли;
	
	РеквизитыРегистрирующегоОргана = Неопределено;
	РегистрирующийОрганОпределен = РезультатВыполнения.Свойство("РеквизитыРегистрирующегоОргана", РеквизитыРегистрирующегоОргана);
	Если РегистрирующийОрганОпределен Тогда
		РегистрирующийОрганНаименование = РеквизитыРегистрирующегоОргана.Наименование;
		РегистрирующийОрганТелефон      = РеквизитыРегистрирующегоОргана.Телефон;
		РегистрирующийОрганАдрес        = РеквизитыРегистрирующегоОргана.Адрес;
		РегистрирующийОрганИнформация   = РеквизитыРегистрирующегоОргана.Информация;
	Иначе
		РегистрирующийОрганАдрес        = "";
		РегистрирующийОрганИнформация   = "";
		РегистрирующийОрганНаименование = "";
		РегистрирующийОрганТелефон      = "";
	КонецЕсли;
	
	РеквизитыПрежнегоРегистрирующегоОргана = Неопределено;
	ПрежнийРегистрирующийОрганОпределен = РезультатВыполнения.Свойство("РеквизитыПрежнегоРегистрирующегоОргана", РеквизитыПрежнегоРегистрирующегоОргана);
	Если ПрежнийРегистрирующийОрганОпределен Тогда
		РегистрирующийОрганПрежнийНаименование = РеквизитыПрежнегоРегистрирующегоОргана.Наименование;
		РегистрирующийОрганПрежнийТелефон      = РеквизитыПрежнегоРегистрирующегоОргана.Телефон;
		РегистрирующийОрганПрежнийАдрес        = РеквизитыПрежнегоРегистрирующегоОргана.Адрес;
		РегистрирующийОрганПрежнийИнформация   = РеквизитыПрежнегоРегистрирующегоОргана.Информация;
	Иначе
		РегистрирующийОрганПрежнийНаименование = "";
		РегистрирующийОрганПрежнийТелефон      = "";
		РегистрирующийОрганПрежнийАдрес        = "";
		РегистрирующийОрганПрежнийИнформация   = "";
	КонецЕсли;
	
	ДанныеЗаявления = ДанныеЗаявления();
	ДанныеЗаявления.Ссылка = РезультатВыполнения.Организация;
	Обработки.РегистрацияОрганизации.СохранитьДанныеЗаявления(ДанныеЗаявления);
	
	ПрочитатьОрганизацию();
	ПрочитатьДанныеУчредителей();
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ДанныеЗаявления()
	
	ДанныеЗаявления = Обработки.РегистрацияОрганизации.НовыйДанныеЗаявления();
	Если ЭтоЮрЛицо(ЭтотОбъект) Тогда
		ДанныеЗаявления.НаименованиеОрганизации       = НаименованиеСокращенное;
		ДанныеЗаявления.ПолноеНаименованиеОрганизации = НаименованиеПолное;
		ДанныеЗаявления.Фамилия                       = Заявитель.Фамилия;
		ДанныеЗаявления.Имя                           = Заявитель.Имя;
		ДанныеЗаявления.Отчество                      = Заявитель.Отчество;
		ДанныеЗаявления.Пол                           = Строка(Заявитель.Пол);
		ДанныеЗаявления.ИНН                           = Заявитель.ИНН;
		ДанныеЗаявления.Телефон                       = КонтактнаяИнформацияПолеТелефонРабочийФизическиеЛица;
		ДанныеЗаявления.Email                         = КонтактнаяИнформацияПолеEMailФизическиеЛица;
		ДанныеЗаявления.СпособРегистрации =
			Обработки.РегистрацияОрганизации.НазваниеСпособаРегистрации(ФормированиеУставногоКапитала.СпособРегистрации);
		ДанныеЗаявления.АдресXML = УправлениеКонтактнойИнформациейБП.ЗначенияПолейВидаКонтактнойИнформации(
			КонтактнаяИнформацияОписаниеДополнительныхРеквизитов, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	Иначе
		ДанныеЗаявления.Фамилия           = Объект.ФамилияИП;
		ДанныеЗаявления.Имя               = Объект.ИмяИП;
		ДанныеЗаявления.Отчество          = Объект.ОтчествоИП;
		ДанныеЗаявления.Пол               = Строка(Заявитель.Пол);
		ДанныеЗаявления.ИНН               = Объект.ИНН;
		ДанныеЗаявления.Телефон           = КонтактнаяИнформацияПолеТелефонРабочийФизическиеЛица;
		ДанныеЗаявления.Email             = КонтактнаяИнформацияПолеEMailФизическиеЛица;
		ДанныеЗаявления.СпособРегистрации = Обработки.РегистрацияОрганизации.НазваниеСпособаРегистрации(СпособРегистрации);
		ДанныеЗаявления.АдресXML = УправлениеКонтактнойИнформациейБП.ЗначенияПолейВидаКонтактнойИнформации(
			КонтактнаяИнформацияОписаниеДополнительныхРеквизитов, Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица);
	КонецЕсли;
	
	Возврат ДанныеЗаявления;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьОшибкуФормированияДокументов(ДлительнаяОперация)
	
	Текст = НСтр("ru = 'Ошибка при создании пакета документов:'");
	Предупреждение = Новый Структура;
	Предупреждение.Вставить("Текст", Текст + Символы.ПС + ДлительнаяОперация.КраткоеПредставлениеОшибки);
	Предупреждение.Вставить("Подробно", ДлительнаяОперация.ПодробноеПредставлениеОшибки);
	СтандартныеПодсистемыКлиент.ВывестиПредупреждение(ЭтотОбъект, Предупреждение);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УставООО(ОрганизацияСсылка, ДатаРешения)
	
	ЗаявлениеОРегистрации = НайтиЗаявлениеОРегистрации(ОрганизацияСсылка, "Р13001", ДатаРешения);
	
	Если ЗначениеЗаполнено(ЗаявлениеОРегистрации) Тогда
		АдресВременногоХранилища = Обработки.РегистрацияОрганизации.УставООО(ОрганизацияСсылка, ЗаявлениеОРегистрации.Ссылка);
	Иначе
		АдресВременногоХранилища = "";
	КонецЕсли;
	
	Возврат АдресВременногоХранилища;
	
КонецФункции

&НаСервере
Функция ПротоколРешениеУчредителейООО(ОрганизацияСсылка, ИмяМакета)
	
	Возврат Обработки.РегистрацияОрганизации.ПротоколРешениеУчредителейОООДляИзмененияРеквизитов(
		ОрганизацияСсылка,
		ИмяМакета,
		ДатаРешения,
		УникальныйИдентификатор);
	
КонецФункции

#КонецОбласти

#Область СписокИзменений

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьСведенияОРуководителе(Форма)
	
	Возврат Не ПустаяСтрока(Форма.РуководительФамилия)
		Или Не ПустаяСтрока(Форма.РуководительИмя)
		Или Не ПустаяСтрока(Форма.РуководительОтчество);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИзмененияВносятсяВУчредительныеДокументы(ЭтоЮрЛицо, Изменено, АдресВУставеПолный, КодыОКВЭДпротиворечатУставу)
	
	Если ЭтоЮрЛицо Тогда
		ИзмененияВносятсяВУчредительныеДокументы = РегистрацияОрганизацииКлиентСервер.ИзмененияВносятсяВУчредительныеДокументы(
			Изменено,
			АдресВУставеПолный,
			КодыОКВЭДпротиворечатУставу);
	Иначе
		ИзмененияВносятсяВУчредительныеДокументы = Ложь;
	КонецЕсли;
	
	Возврат ИзмененияВносятсяВУчредительныеДокументы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИзмененияТребуютУведомления(ЭтоЮрЛицо, Изменено, ЮрАдресИПропискаГлавногоСовпадают)
	
	Если ЭтоЮрЛицо Тогда
		ИзмененияТребуютУведомления = РегистрацияОрганизацииКлиентСервер.ИзмененияТребуютУведомления(Изменено, ЮрАдресИПропискаГлавногоСовпадают);
	Иначе
		ИзмененияТребуютУведомления = Ложь;
	КонецЕсли;
	
	Возврат ИзмененияТребуютУведомления;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураИзменений(Форма)
	
	Изменено = РегистрацияОрганизацииКлиентСервер.НоваяСтруктураИзменений();
	Изменено.СокращенноеНаименование = ИзмененоСокращенноеНаименование(Форма);
	Изменено.ПолноеНаименование      = ИзмененоПолноеНаименование(Форма);
	Изменено.ЮридическийАдрес        = ИзмененЮридическийАдрес(Форма);
	Изменено.Местоположение          = ИзмененоМестоположение(Форма);
	Изменено.Руководитель            = ИзмененРуководитель(Форма);
	Изменено.Учредители              = ИзмененыУчредители(Форма);
	Изменено.УставныйКапитал         = ИзмененУставныйКапитал(Форма);
	Изменено.ОсновнойВидДеятельности = ИзмененОсновнойВидДеятельности(Форма);
	Изменено.ВидыДеятельности        = ИзмененыВидыДеятельности(Форма);
	
	Возврат Изменено;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИзмененоСокращенноеНаименование(Форма)
	
	Возврат Не ПустаяСтрока(Форма.НаименованиеСокращенноеНовое);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИзмененоПолноеНаименование(Форма)
	
	Возврат Не ПустаяСтрока(Форма.НаименованиеПолноеНовое);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИзмененЮридическийАдрес(Форма)
	
	Возврат Не ПустаяСтрока(Форма.ЮридическийАдресНовый);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СпрашиватьКакУказанАдресВУставе(Форма)
	
	Если Не ЭтоЮрЛицо(Форма) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Изменено = СтруктураИзменений(Форма);
	
	Возврат Изменено.ЮридическийАдрес
		И Не РегистрацияОрганизацииКлиентСервер.ИзмененияВносятсяВУчредительныеДокументы(Изменено);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СпрашиватьКакУказаныВидыДеятельностиВУставе(Форма)
	
	Если Не ЭтоЮрЛицо(Форма) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Изменено = СтруктураИзменений(Форма);
	
	Возврат Изменено.ВидыДеятельности
		И Не РегистрацияОрганизацииКлиентСервер.ИзмененияВносятсяВУчредительныеДокументы(Изменено);
	
КонецФункции

// Преобразует числовое значение переключателя в булево
//
&НаКлиентеНаСервереБезКонтекста
Функция АдресВУставеПолный(АдресВУставе)
	
	Если АдресВУставе = 2 Тогда
		Возврат Истина;
	ИначеЕсли АдресВУставе = 1 Тогда
		Возврат Ложь;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Преобразует числовое значение переключателя в булево
//
&НаКлиентеНаСервереБезКонтекста
Функция КодыОКВЭДпротиворечатУставу(ВидыДеятельностиВУставе)
	
	Если ВидыДеятельностиВУставе = 2 Тогда
		Возврат Истина;
	ИначеЕсли ВидыДеятельностиВУставе = 1 Тогда
		Возврат Ложь;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИзмененоМестоположение(Форма)
	
	Если Не ИзмененЮридическийАдрес(Форма) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОтборКонтактнойИнформации = Новый Структура("Вид", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации"));
	НайденныеСтроки = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(ОтборКонтактнойИнформации);
	ЮридическийАдресЗначенияПолей = ?(НайденныеСтроки.Количество() > 0, НайденныеСтроки[0].ЗначенияПолей, "");
	
	Возврат Не РегистрацияОрганизацииВызовСервераПовтИсп.СравнитьНаселенныеПункты(ЮридическийАдресЗначенияПолей, Форма.ЮридическийАдресНовыйЗначенияПолей);
	
КонецФункции

&НаСервереБезКонтекста
Функция ЮрАдресИПропискаГлавногоСовпадают(Знач ДопРеквизиты, Знач ЮридическийАдресНовыйЗначенияПолей, Знач Учредители)
	
	ОтборКонтактнойИнформации = Новый Структура("Вид", Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица);
	НайденныеСтроки = ДопРеквизиты.НайтиСтроки(ОтборКонтактнойИнформации);
	АдресПоПропискеЗначенияПолей = ?(НайденныеСтроки.Количество() > 0, НайденныеСтроки[0].ЗначенияПолей, "");
	
	ЮрАдресИПропискаРуководителяСовпадают = УправлениеКонтактнойИнформациейБП.СравнитьАдреса(АдресПоПропискеЗначенияПолей, ЮридическийАдресНовыйЗначенияПолей);
	Если ЮрАдресИПропискаРуководителяСовпадают Тогда
		// Новый адрес является адресом места жительства лица, наделенного правом действовать от имени общества без доверенности.
		Возврат Истина;
	КонецЕсли;
	
	ЮрАдресИПропискаГлавногоУчредителяСовпадают = Ложь;
	Для каждого Учредитель Из Учредители Цикл
		Если Учредитель.ДоляУчастия >= 50 И ТипЗнч(Учредитель.Ссылка) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			АдресПоПропискеУчредителя = Учредитель.Ссылка.КонтактнаяИнформация.Найти(
				ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица"), "Вид");
			Если АдресПоПропискеУчредителя <> Неопределено И Не ПустаяСтрока(АдресПоПропискеУчредителя.ЗначенияПолей) Тогда
				ЮрАдресИПропискаГлавногоУчредителяСовпадают = УправлениеКонтактнойИнформациейБП.СравнитьАдреса(
					АдресПоПропискеУчредителя.ЗначенияПолей, ЮридическийАдресНовыйЗначенияПолей);
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЮрАдресИПропискаГлавногоУчредителяСовпадают Тогда
		// Новый адрес является адресом места жительства одного из участников ООО, владеющего не менее 50% голосов от общего количества голосов всех учредителей.
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИзмененРуководитель(Форма)
	
	Возврат ЗначениеЗаполнено(Форма.ОтветственныеЛицаНовые.ФизическоеЛицо);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИзмененУставныйКапитал(Форма)
	
	Возврат Форма.УставныйКапиталНовый <> 0;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИзмененыУчредители(Форма)
	
	Возврат Форма.УчредителиНовые.Количество() <> 0;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИзмененОсновнойВидДеятельности(Форма)
	
	Возврат Не ПустаяСтрока(Форма.КодОКВЭД2Новый) И Форма.КодОКВЭД2Новый <> Форма.КодОКВЭД2;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИзмененыВидыДеятельности(Форма)
	
	Возврат Форма.ВидыДеятельностиНовые.Количество() <> 0;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьИзменениеНаименования(РезультатВыбора)
	
	Если ТипЗнч(РезультатВыбора) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Если РезультатВыбора.Свойство("НаименованиеСокращенное") Тогда
		Если ВРег(НаименованиеСокращенное) <> ВРег(РезультатВыбора.НаименованиеСокращенное) Тогда
			НаименованиеСокращенноеНовое = РезультатВыбора.НаименованиеСокращенное;
		Иначе
			НаименованиеСокращенноеНовое = "";
		КонецЕсли;
	КонецЕсли;
	
	Если РезультатВыбора.Свойство("НаименованиеПолное") Тогда
		Если ВРег(НаименованиеПолное) <> ВРег(РезультатВыбора.НаименованиеПолное) Тогда
			НаименованиеПолноеНовое = РезультатВыбора.НаименованиеПолное;
		Иначе
			НаименованиеПолноеНовое = "";
		КонецЕсли;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗакрытияФормыИзмененияЮридическогоАдреса(Знач РезультатЗакрытия, Знач ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ЮридическийАдресНовыйЗначенияПолей = РезультатЗакрытия.КонтактнаяИнформация;
	ЮридическийАдресНовый = РезультатЗакрытия.Представление;
	
	КодНалоговогоОргана = "";
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеРуководителя(РезультатВыбора)
	
	Если ТипЗнч(РезультатВыбора) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ЗаполнитьЗначенияСвойств(ОтветственныеЛицаНовые, РезультатВыбора);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеУчредителей(РезультатВыбора)
	
	Если ТипЗнч(РезультатВыбора) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Если УставныйКапитал <> РезультатВыбора.УставныйКапитал Тогда
		УставныйКапиталНовый = РезультатВыбора.УставныйКапитал;
	Иначе
		УставныйКапиталНовый = 0;
	КонецЕсли;
	
	ЗагрузитьТаблицуИзВременногоХранилища("УчредителиНовые", РезультатВыбора.АдресХранилища);
	ОтобразитьУчредителей();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеВидовДеятельности(РезультатВыбора)
	
	Если ТипЗнч(РезультатВыбора) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Если СокрЛП(РезультатВыбора.ОсновнойКод) <> СокрЛП(КодОКВЭД2) Тогда
		КодОКВЭД2Новый = РезультатВыбора.ОсновнойКод;
		НаименованиеОКВЭД2Новое = РезультатВыбора.ОсновнойКодНаименование;
	Иначе
		КодОКВЭД2Новый = "";
		НаименованиеОКВЭД2Новое = "";
	КонецЕсли;
	
	ЗагрузитьТаблицуИзВременногоХранилища("ВидыДеятельностиНовые", РезультатВыбора.АдресХранилища);
	ОтобразитьВидыДеятельности();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

// Заполняет наименования в коллекции ВидыДеятельности из ОКВЭД
//
&НаСервере
Процедура ЗаполнитьНаименованияВидовДеятельности()
	
	Обработки.РегистрацияОрганизации.ЗаполнитьНаименованияВидовДеятельности(ВидыДеятельности);
	
КонецПроцедуры

&НаСервере
Функция СохранитьТаблицуВоВременноеХранилище(ИмяТаблицы)
	
	Возврат ПоместитьВоВременноеХранилище(ЭтотОбъект[ИмяТаблицы].Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ЗагрузитьТаблицуИзВременногоХранилища(ИмяТаблицы, АдресТаблицы)
	
	ЭтотОбъект[ИмяТаблицы].Загрузить(ПолучитьИзВременногоХранилища(АдресТаблицы));
	
КонецПроцедуры

&НаКлиенте
Функция ИмяФормыИзмененияНаименования()
	
	Возврат "Обработка.РегистрацияОрганизации.Форма.ИзменениеНаименования";
	
КонецФункции

&НаКлиенте
Функция ИмяФормыИзмененияРуководителя()
	
	Возврат "Обработка.РегистрацияОрганизации.Форма.ФормаФизическогоЛица";
	
КонецФункции

&НаКлиенте
Функция ИмяФормыИзмененияУчредителей()
	
	Возврат "Обработка.РегистрацияОрганизации.Форма.ИзменениеУчредителей";
	
КонецФункции

&НаКлиенте
Функция ИмяФормыИзмененияВидовДеятельности()
	
	Возврат "Обработка.РегистрацияОрганизации.Форма.ИзменениеВидовДеятельности";
	
КонецФункции

&НаСервере
Процедура СброситьИзмененияРеквизитов()
	
	НаименованиеСокращенноеНовое = "";
	НаименованиеПолноеНовое = "";
	
	НаименованиеСокращенное = "";
	НаименованиеПолное = "";
	
	ЮридическийАдресНовыйЗначенияПолей = "";
	ЮридическийАдресНовый = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(ЮридическийАдресНовыйЗначенияПолей);
	АдресВУставе = 0;
	
	КодНалоговогоОргана = "";
	
	ЗначениеВРеквизитФормы(РегистрыСведений.ОтветственныеЛицаОрганизаций.СоздатьМенеджерЗаписи(), "ОтветственныеЛицаНовые");
	
	УставныйКапиталНовый = 0;
	УчредителиНовые.Очистить();
	
	КодОКВЭД2 = "";
	КодОКВЭД2Новый = "";
	ВидыДеятельностиНовые.Очистить();
	ВидыДеятельностиВУставе = 0;
	
КонецПроцедуры

#КонецОбласти

#Область Заявление

&НаСервереБезКонтекста
Функция НайтиФизическоеЛицо(Знач Фамилия, Знач Имя, Знач Отчество = "", Знач ИНН = "")
	
	Возврат Справочники.Организации.ФизическоеЛицо(Фамилия, Имя, Отчество, ИНН);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СообщениеОбОшибкеИНН(Знач ИНН)
	
	ТекстСообщения = "";
	Если НЕ ПустаяСтрока(ИНН) Тогда
		ЦифрыИНН = ОрганизацииФормыКлиентСервер.ТолькоЦифры(ИНН);
		РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ЦифрыИНН, Ложь, ТекстСообщения);
	КонецЕсли;
	Возврат ТекстСообщения;

КонецФункции

&НаСервере
Процедура ПроверитьЗаполнениеСпискаИзменений(Отказ)
	
	ЭтоЮрЛицо = ЭтоЮрЛицо(ЭтотОбъект);
	
	Если ЭтоЮрЛицо И Учредители.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'В реестре не найдены сведения об учредителях организации'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПоискИННЗапрос", , Отказ);
	КонецЕсли;
	
	Изменено = СтруктураИзменений(ЭтотОбъект);
	
	ЕстьИзменения = Ложь;
	Для Каждого КлючИЗначение Из Изменено Цикл
		Если КлючИЗначение.Значение Тогда
			ЕстьИзменения = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЕстьИзменения Тогда
		Если ЭтоЮрЛицо Тогда
			ТекстСообщения = НСтр("ru = 'Укажите изменения в сведениях о юридическом лице, содержащихся в ЕГРЮЛ'");
			ПолеФормы = "ИзменитьНаименование";
		Иначе
			ТекстСообщения = НСтр("ru = 'Укажите изменения в сведениях об индивидуальном предпринимателе, содержащихся в ЕГРИП'");
			ПолеФормы = "ИзменитьВидыДеятельности";
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , ПолеФормы, , Отказ);
	КонецЕсли;
	
	ДопустимоВНаименованииКромеКириллицы = "!""№()+-., 0123456789";
	
	Если Изменено.СокращенноеНаименование Тогда
		Префикс = НСтр("ru='ООО'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Если Не СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(НаименованиеСокращенноеНовое, Истина, ДопустимоВНаименованииКромеКириллицы) Тогда
			ТекстСообщения = НСтр("ru = 'Сокращенное наименование заполняется на русском языке'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ИзменитьНаименование", , Отказ);
		ИначеЕсли СтрНайти(НаименованиеСокращенноеНовое, Префикс) <> 1 Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Сокращенное наименование должно начинаться с ""%1""'"), Префикс);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ИзменитьНаименование", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Изменено.ПолноеНаименование Тогда
		Префикс = НСтр("ru = 'Общество с ограниченной ответственностью'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Если Не СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(НаименованиеПолноеНовое, Истина, ДопустимоВНаименованииКромеКириллицы) Тогда
			ТекстСообщения = НСтр("ru = 'Полное наименование заполняется на русском языке'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ИзменитьНаименование", , Отказ);
		ИначеЕсли СтрНайти(НаименованиеПолноеНовое, Префикс) <> 1 Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Полное наименование должно начинаться со слов ""%1""'"), Префикс);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ИзменитьНаименование", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(АдресВУставе) И СпрашиватьКакУказанАдресВУставе(ЭтотОбъект) Тогда
		ТекстСообщения = НСтр("ru = 'Уточните как указан адрес общества в уставе'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "АдресВУставе", , Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидыДеятельностиВУставе) И СпрашиватьКакУказаныВидыДеятельностиВУставе(ЭтотОбъект) Тогда
		ТекстСообщения = НСтр("ru = 'Уточните нужно ли вносить изменения в устав'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ВидыДеятельностиВУставе", , Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеЗаявления(Отказ)
	
	ЭтоЮрЛицо = ЭтоЮрЛицо(ЭтотОбъект);
	
	// Дата решения
	Если ЭтоЮрЛицо Тогда
		Если Не ЗначениеЗаполнено(ДатаРешения) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Дата решения'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ДатаРешения", , Отказ);
		Иначе
			КорректныйПериод = ОбщегоНазначенияБПСобытия.КорректныйПериодВводаДокументов();
			Если ДатаРешения < КорректныйПериод.НачалоКорректногоПериода 
				Или ДатаРешения > КорректныйПериод.КонецКорректногоПериода Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Корректность", НСтр("ru = 'Дата решения'"));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ДатаРешения", , Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Должность заявителя
	// Проверяем, если руководился не изменился, иначе проверка выполняется в форме физ. лица
	Если ЭтоЮрЛицо И Не ИзмененРуководитель(ЭтотОбъект) Тогда
		Если Не ЗначениеЗаполнено(ОтветственныеЛица.Должность) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Должность руководителя'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ОтветственныеЛица.Должность", , Отказ);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ОтветственныеЛица.СрокПолномочий) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Назначен на срок'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ОтветственныеЛица.СрокПолномочий", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	// Адрес заявителя
	ПредставлениеПустогоАдреса = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки();
	Если КонтактнаяИнформацияПолеАдресПоПропискеФизическиеЛица = ПредставлениеПустогоАдреса Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Адрес по прописке'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
			, "КонтактнаяИнформацияПолеАдресПоПропискеФизическиеЛица", , Отказ);
	КонецЕсли;
	
	// Телефон заявителя
	Если Не ЗначениеЗаполнено(КонтактнаяИнформацияПолеТелефонРабочийФизическиеЛица) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			, , НСтр("ru = 'Контактный телефон'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
			, "КонтактнаяИнформацияПолеТелефонРабочийФизическиеЛица", , Отказ);
	ИначеЕсли Не ОрганизацииФормыКлиентСервер.ТелефонСоответствуетТребованиям(
		КонтактнаяИнформацияПолеТелефонРабочийФизическиеЛица) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			, "Корректность", НСтр("ru = 'Контактный телефон'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
			, "КонтактнаяИнформацияПолеТелефонРабочийФизическиеЛица", , Отказ);
	КонецЕсли;
	
	// Электронная почта руководителя
	Если ЗначениеЗаполнено(КонтактнаяИнформацияПолеEMailФизическиеЛица)
		И Не ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(
			КонтактнаяИнформацияПолеEMailФизическиеЛица) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Корректность", НСтр("ru = 'Email'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
			, "КонтактнаяИнформацияПолеEMailФизическиеЛица", , Отказ);
	КонецЕсли;
	
	// Учредители
	Если ЭтоЮрЛицо И Не ЕдинственныйУчредительРуководитель(ЭтотОбъект) Тогда
		Для Индекс = 0 По Учредители.Количество() - 1 Цикл
			
			Учредитель = Учредители[Индекс];
			Если Учредитель.Ссылка <> Заявитель.Ссылка
				И Не Обработки.РегистрацияОрганизации.РеквизитыУчредителяЗаполнены(Учредитель.Ссылка) Тогда
				ПутьКСтроке = "Учредители[" + Формат(Индекс, "ЧГ=") + "].";
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не заполнены обязательные данные учредителя %1'"), Учредитель.Наименование);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
					, ПутьКСтроке + "Ссылка", , Отказ);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	// Способ регистрации
	Если НЕ ЗначениеЗаполнено(СпособРегистрации) Тогда
		ТекстСообщения = НСтр("ru = 'Не выбран способ регистрации'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "СпособРегистрации", , Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеПаспортныхДанныхЗаявителя(Отказ)
	
	// Серия и номер паспорта заявителя
	Если НЕ ЗначениеЗаполнено(ПаспортСерияНомер) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Серия и номер паспорта'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПаспортСерияНомер", , Отказ);
	Иначе
		ЦифрыСерииНомераПаспорта = ОрганизацииФормыКлиентСервер.ТолькоЦифры(СокрЛП(ПаспортСерияНомер));
		Если СтрДлина(ЦифрыСерииНомераПаспорта) <> 10 Тогда
			ТекстСообщения = НСтр("ru = 'Серия и номер паспорта должны состоять из 10 цифр'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПаспортСерияНомер", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	// Кем выдан паспорта заявителя
	Если НЕ ЗначениеЗаполнено(ПаспортныеДанныеЗаявителя.КемВыдан) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Кем выдан паспорт'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
			, "ПаспортныеДанныеЗаявителя.КемВыдан", , Отказ);
	КонецЕсли;
	
	// Дата выдачи паспорта заявителя
	Если НЕ ЗначениеЗаполнено(ПаспортныеДанныеЗаявителя.ДатаВыдачи) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Дата выдачи паспорта'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
			, "ПаспортныеДанныеЗаявителя.ДатаВыдачи", , Отказ);
	ИначеЕсли ПаспортныеДанныеЗаявителя.ДатаВыдачи > ТекущаяДатаСеанса() Тогда
		ТекстСообщения =  НСтр("ru = 'Дата выдачи паспорта должна быть раньше текущей даты'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
			, "ПаспортныеДанныеЗаявителя.ДатаВыдачи", , Отказ);
	КонецЕсли;
	
	// Код подразделения паспорта заявителя
	Если НЕ ЗначениеЗаполнено(ПаспортныеДанныеЗаявителя.КодПодразделения) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Код подразделения'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
			, "ПаспортныеДанныеЗаявителя.КодПодразделения", , Отказ);
	Иначе
		ЦифрыКодаПодразделения = ОрганизацииФормыКлиентСервер.ТолькоЦифры(ПаспортныеДанныеЗаявителя.КодПодразделения);
		Если СтрДлина(ЦифрыКодаПодразделения) <> 6 Тогда
			ТекстСообщения = НСтр("ru = 'Код подразделения должен состоять из 6 цифр'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
				, "ПаспортныеДанныеЗаявителя.КодПодразделения", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	// Дата рождения заявителя
	Если НЕ ЗначениеЗаполнено(Заявитель.ДатаРождения) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Дата рождения'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Заявитель.ДатаРождения", , Отказ);
	ИначеЕсли Заявитель.ДатаРождения > ТекущаяДатаСеанса() Тогда
		ТекстСообщения = НСтр("ru = 'Дата рождения должна быть раньше текущей даты'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Заявитель.ДатаРождения", , Отказ);
	ИначеЕсли ЗначениеЗаполнено(ПаспортныеДанныеЗаявителя.ДатаВыдачи) И 
		Заявитель.ДатаРождения > ПаспортныеДанныеЗаявителя.ДатаВыдачи Тогда
		
		ТекстСообщения = НСтр("ru = 'Дата рождения должна быть раньше даты выдачи паспорта'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Заявитель.ДатаРождения", , Отказ);
	КонецЕсли;
	
	// Место рождения заявителя
	Если НЕ ЗначениеЗаполнено(Заявитель.МестоРожденияПредставление) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Место рождения'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
			, "Заявитель.МестоРожденияПредставление", , Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначенияПолейКонтактнойИнформации(Форма, ИмяРеквизита)
	
	Отбор = Новый Структура("ИмяРеквизита", ИмяРеквизита);
	ДанныеИсточника = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	Если ДанныеИсточника.Количество() > 0 Тогда
		Возврат ДанныеИсточника[0].ЗначенияПолей;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаСервереБезКонтекста
Функция ИменаРеквизитовФизическогоЛица()

	Имена = Новый Структура;
	Имена.Вставить("ФизическоеЛицо",         "Заявитель");
	Имена.Вставить("ПаспортныеДанные",       "ПаспортныеДанныеЗаявителя");
	Имена.Вставить("СерияНомерПаспорта",     "ПаспортСерияНомер");
	Имена.Вставить("ГруппаКонтактныеДанные", "ГруппаКонтактныеДанныеЗаявителя");
	Возврат Имена;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЕдинственныйУчредительРуководитель(Форма)
	
	Возврат (Форма.Учредители.Количество() = 1) И (Форма.Учредители[0].Ссылка = Форма.Заявитель.Ссылка);
	
КонецФункции

#КонецОбласти

#Область Документы

&НаКлиенте
Процедура ОткрытьЗаявлениеОРегистрацииИзменений(КодФормыЗаявления, ИмяФормыЗаявления)
	
	ЗаявлениеОРегистрации = НайтиЗаявлениеОРегистрации(Объект.Ссылка, КодФормыЗаявления, ДатаРешения);
	
	Если ЗначениеЗаполнено(ЗаявлениеОРегистрации.Ссылка) Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", ЗаявлениеОРегистрации.Ссылка);
		ПараметрыФормы.Вставить("Организация", Объект.Ссылка);
		ФормаОтчета = ПолучитьФорму(ЗаявлениеОРегистрации.ИмяФормы, ПараметрыФормы, ЭтотОбъект, Объект.Ссылка);
		РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФормуУведомленияОСпецрежимах(ФормаОтчета);
	Иначе
		ТекстСообщения = СтрШаблон(НСтр("ru = '%1 не создано.'"), ИмяФормыЗаявления);
		ПоказатьПредупреждение(, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлДокумента(АдресХранилища, Знач ИмяФайла)
	
	Если ЗначениеЗаполнено(АдресХранилища) Тогда
		ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла, "_");
		ПолучитьФайл(АдресХранилища, ИмяФайла, Истина);
	Иначе
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Документ ""%1"" не создан.'"), ИмяФайла);
		ПоказатьПредупреждение(, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КвитанцияНаОплатуГоспошлины(Знач ОрганизацияСсылка)
	
	Возврат Обработки.РегистрацияОрганизации.КвитанцияНаОплатуГоспошлины(ОрганизацияСсылка);
	
КонецФункции

&НаСервереБезКонтекста
Функция СведенияОНалоговомОрганеПоАдресу(Знач Адрес)
	
	Если Не ЗначениеЗаполнено(Адрес) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СведенияОНалоговомОрганеПоАдресу = АдресныйКлассификаторБП.КодыАдреса(Адрес, "Сервис1С");
	
	КодНалоговогоОрганаПоАдресу = Формат(СведенияОНалоговомОрганеПоАдресу.КодИФНСЮЛ, "ЧЦ=4; ЧДЦ=; ЧВН=; ЧГ=0");
	
	Если ЗначениеЗаполнено(КодНалоговогоОрганаПоАдресу) Тогда
		
		Сведения = Новый Структура();
		Сведения.Вставить("КодНалоговогоОргана", КодНалоговогоОрганаПоАдресу);
		Сведения.Вставить("КодПоОКТМО", Формат(СведенияОНалоговомОрганеПоАдресу.ОКТМО, "ЧДЦ=; ЧГ=0"));
		Сведения.Вставить("КодПоОКАТО", Формат(СведенияОНалоговомОрганеПоАдресу.OKATO, "ЧДЦ=; ЧГ=0"));
		
		Возврат Сведения;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ПодготовитьНачалоРаботы(ПредупреждениеОбОшибке)
	
	УстановитьВидимостьСтраницы(ЭтотОбъект, "Ожидание");
	
	НачатьТранзакцию();
	
	Попытка
		
		Константы.НачалоРаботы.Установить(Ложь);
		Константы.ИзмененияЕГРЗавершены.Установить(Истина);
		
		ОбщегоНазначенияБПВызовСервера.УстановитьСтандартныйИнтерфейс();
		Если ЭтоЮрЛицо(ЭтотОбъект) Тогда
			ДокументОбъект = ФормированиеУставногоКапитала.Ссылка.ПолучитьОбъект();
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			ЗначениеВРеквизитФормы(ДокументОбъект, "ФормированиеУставногоКапитала");
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		Текст = НСтр("ru = 'Ошибка при начале работы:'");
		СведенияОбОшибке = ИнформацияОбОшибке();
		ПредупреждениеОбОшибке.Вставить("Текст",    Текст + Символы.ПС + КраткоеПредставлениеОшибки(СведенияОбОшибке));
		ПредупреждениеОбОшибке.Вставить("Подробно", ПодробноеПредставлениеОшибки(СведенияОбОшибке));
		
		УстановитьВидимостьСтраницы(ЭтотОбъект, "Документы");
		
		Возврат Ложь;
		
	КонецПопытки;
	
	ПрисоединитьФайлыКОрганизации();
	
	УстановитьВидимостьБаннераНачалоРаботы();
	
	Обработки.РегистрацияОрганизации.ОчиститьСлужебныеДанныеПослеРегистрации();
	
	УправлениеФормой(ЭтотОбъект);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ПрисоединитьФайлыКОрганизации()

	ИменаФайлов = Обработки.РегистрацияОрганизации.ИменаФайлов();
	
	ЭтоЮрЛицо = ЭтоЮрЛицо(ЭтотОбъект);
	Изменено = СтруктураИзменений(ЭтотОбъект);
	ИзмененияВносятсяВУчредительныеДокументы = ИзмененияВносятсяВУчредительныеДокументы(
		ЭтоЮрЛицо, Изменено, АдресВУставеПолный(АдресВУставе), КодыОКВЭДпротиворечатУставу(ВидыДеятельностиВУставе));
		
	ПакетДокументов = Новый Массив;
	Если НЕ ЭтоЮрЛицо Тогда
		НовыйДокумент = НовыйДокумент(
			ИменаФайлов.ИнструкцияПоВнесениюИзмененийВЕГРИП,
			ИнструкцияПоВнесениюИзмененийИП(),
			"pdf");
		ПакетДокументов.Добавить(НовыйДокумент);
	Иначе
		
		ОрганизацияСсылка = Объект.Ссылка;
		
		Если ЭтоЮрЛицо И ИзмененияВносятсяВУчредительныеДокументы Тогда
			ЗаявлениеОРегистрацииИзменений = НайтиЗаявлениеОРегистрации(ОрганизацияСсылка, "Р13001", ДатаРешения);
			НовыйДокумент = НовыйДокумент(
				ИменаФайлов.Устав,
				Обработки.РегистрацияОрганизации.УставООО(Объект.Ссылка, ЗаявлениеОРегистрацииИзменений));
				
			ПакетДокументов.Добавить(НовыйДокумент);
		КонецЕсли;
		
		УчредителиПоТипам = УчредителиПоТипам(ЭтотОбъект);
		КоличествоЮридическихЛиц = УчредителиПоТипам.ЮридическиеЛица.Количество();
		КоличествоФизическихЛиц  = УчредителиПоТипам.ФизическиеЛица.Количество();
		ЕдинственныйУчредительЮридическоеЛицо = (КоличествоЮридическихЛиц = 1) И (КоличествоФизическихЛиц = 0);
		ЕдинственныйУчредительФизическоеЛицо = (КоличествоЮридическихЛиц = 0) И (КоличествоФизическихЛиц = 1);
		НесколькоУчредителей = (Не ЕдинственныйУчредительЮридическоеЛицо И Не ЕдинственныйУчредительФизическоеЛицо);
		
		ПараметрыФормированияДокументов = ПараметрыФормированияДокументов();
		
		Если ЕдинственныйУчредительФизическоеЛицо Тогда
			НовыйДокумент = НовыйДокумент(
				ИменаФайлов.РешениеЕдинственногоУчредителя,
				ПротоколРешениеУчредителейООО(Объект.Ссылка, "РешениеЕдинственногоУчредителяДляИзмененияРеквизитов"));
			ПакетДокументов.Добавить(НовыйДокумент);
		КонецЕсли;
		Если НесколькоУчредителей Тогда
			НовыйДокумент = НовыйДокумент(
				ИменаФайлов.ПротоколСобранияУчредителей,
				ПротоколРешениеУчредителейООО(Объект.Ссылка, "ПротоколСобранияУчредителейДляИзмененияРеквизитов"));
			ПакетДокументов.Добавить(НовыйДокумент);
		КонецЕсли;
		Если ЕдинственныйУчредительЮридическоеЛицо Тогда
			НовыйДокумент = НовыйДокумент(
				ИменаФайлов.ПротоколСобранияУчредителейЕдинственногоУчредителя,
				ПротоколРешениеУчредителейООО(Объект.Ссылка, "ПротоколСобранияУчредителейЕдинственногоУчредителяДляИзмененияРеквизитов"));
			ПакетДокументов.Добавить(НовыйДокумент);
		КонецЕсли;
		НовыйДокумент = НовыйДокумент(
			ИменаФайлов.ИнструкцияПоВнесениюИзмененийВЕГРЮЛ,
			ИнструкцияПоВнесениюИзмененийООО(),
			"pdf");
		ПакетДокументов.Добавить(НовыйДокумент);
	КонецЕсли;
	
	Для Каждого Документ Из ПакетДокументов Цикл
		ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(Документ.ПараметрыФайла, Документ.АдресФайла);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция НовыйДокумент(ИмяДокумента, АдресФайла, РасширениеБезТочки = "rtf")
	
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("Автор", Пользователи.ТекущийПользователь());
	ПараметрыФайла.Вставить("ВладелецФайлов", Объект.Ссылка);
	ПараметрыФайла.Вставить("ИмяБезРасширения", ИмяДокумента);
	ПараметрыФайла.Вставить("РасширениеБезТочки", РасширениеБезТочки);
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
	
	НовыйДокумент = Новый Структура;
	НовыйДокумент.Вставить("ПараметрыФайла", ПараметрыФайла);
	НовыйДокумент.Вставить("АдресФайла",     АдресФайла);
	
	Возврат НовыйДокумент;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьБаннераНачалоРаботы()
	
	ВидимостьБаннераНачалоРаботы = ПолучитьФункциональнуюОпцию("ПредпринимательВСервисе") И Константы.НачалоРаботы.Получить();
	
	Элементы.НачалоРаботы.Видимость = ВидимостьБаннераНачалоРаботы;
	Элементы.НачатьРаботу.КнопкаПоУмолчанию = ВидимостьБаннераНачалоРаботы;
	
КонецПроцедуры

#КонецОбласти

#Область КонтактнаяИнформация

// СтандартныеПодсистемы.КонтактнаяИнформация
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.Очистка(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	УправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда.Имя);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат)
	УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
	УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Заявитель, Результат);
КонецПроцедуры
// Конец СтандартныеПодсистемы.КонтактнаяИнформация

&НаКлиенте
Процедура ПослеИзмененияКонтактнойИнформации(Результат) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

#Область Вспомогательные

&НаСервере
Процедура ПрочитатьДанныеЗаявления()
	
	Изменено = СтруктураИзменений(ЭтотОбъект);
	ЮрАдресИПропискаГлавногоСовпадают = Изменено.Местоположение
		И ЮрАдресИПропискаГлавногоСовпадают(КонтактнаяИнформацияОписаниеДополнительныхРеквизитов, ЮридическийАдресНовыйЗначенияПолей, Учредители);
	
	ЭтоЮрЛицо = ЭтоЮрЛицо(ЭтотОбъект);
	
	КодыФормЗаявлений = Обработки.РегистрацияОрганизации.КодыФормЗаявленияОРегистрацииИзменений(
		ЭтоЮрЛицо,
		Изменено,
		ИзмененияВносятсяВУчредительныеДокументы(ЭтоЮрЛицо, Изменено, АдресВУставеПолный(АдресВУставе), КодыОКВЭДпротиворечатУставу(ВидыДеятельностиВУставе)),
		ИзмененияТребуютУведомления(ЭтоЮрЛицо, Изменено, ЮрАдресИПропискаГлавногоСовпадают));
	
	Если КодыФормЗаявлений.Количество() > 0 Тогда
		КодФормы = КодыФормЗаявлений[КодыФормЗаявлений.ВГраница()];
		ЗаявлениеОРегистрации = НайтиЗаявлениеОРегистрации(Объект.Ссылка, КодФормы, ДатаРешения);
	КонецЕсли;
	
	Если ЗаявлениеОРегистрации <> Неопределено И Не ЗаявлениеОРегистрации.Ссылка.Пустая() Тогда
		ИмяОтчета = СтрШаблон("РегламентированноеУведомлениеФорма%1", КодФормы);
		ДанныеУведомления = Отчеты[ИмяОтчета].ДанныеУведомления(ЗаявлениеОРегистрации.Ссылка);
		ДанныеУведомления.Свойство("СпособРегистрации", СпособРегистрации);
	Иначе
		СпособРегистрации = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиЗаявлениеОРегистрации(Знач Организация, Знач КодФормы, Знач ДатаЗаявления)
	
	Возврат Обработки.РегистрацияОрганизации.НайтиЗаявлениеОРегистрации(Организация, КодФормы, ДатаЗаявления);
	
КонецФункции

&НаСервере
Процедура ПрочитатьЗаявителя()
	
	Перем ЗаявительОбъект, НайденноеФизическоеЛицо;
	
	Если ЭтоЮрЛицо(ЭтотОбъект) Тогда
		Если ИзмененРуководитель(ЭтотОбъект) Тогда
			// Заявителем является новый руководитель организации
			ЗаявительОбъект = ОтветственныеЛицаНовые.ФизическоеЛицо.ПолучитьОбъект();
		Иначе
			Если Не ОтветственныеЛица.ФизическоеЛицо.Пустая() Тогда
				ЗаявительОбъект = ОтветственныеЛица.ФизическоеЛицо.ПолучитьОбъект();
			Иначе
				// Заявителем является руководитель организации
				НайденноеФизическоеЛицо = НайтиФизическоеЛицо(РуководительФамилия, РуководительИмя, РуководительОтчество, РуководительИНН);
				Если ЗначениеЗаполнено(НайденноеФизическоеЛицо) Тогда
					ЗаявительОбъект = НайденноеФизическоеЛицо.ПолучитьОбъект();
				Иначе
					ЗаявительОбъект = Справочники.ФизическиеЛица.СоздатьЭлемент();
					ЗаявительОбъект.Заполнить(Неопределено);
					ЗаявительОбъект.Фамилия  = РуководительФамилия;
					ЗаявительОбъект.Имя      = РуководительИмя;
					ЗаявительОбъект.Отчество = РуководительОтчество;
					ЗаявительОбъект.ИНН      = РуководительИНН;
					ОрганизацииФормыКлиентСервер.ОпределитьПолПоОтчеству(ЗаявительОбъект.Пол, ЗаявительОбъект.Отчество);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		// Заявителем является индивидуальный предприниматель
		Если Не Объект.ИндивидуальныйПредприниматель.Пустая() Тогда
			ЗаявительОбъект = Объект.ИндивидуальныйПредприниматель.ПолучитьОбъект();
		Иначе
			НайденноеФизическоеЛицо = НайтиФизическоеЛицо(Объект.ФамилияИП, Объект.ИмяИП, Объект.ОтчествоИП, Объект.ИНН);
			Если ЗначениеЗаполнено(НайденноеФизическоеЛицо) Тогда
				ЗаявительОбъект = НайденноеФизическоеЛицо.ПолучитьОбъект();
			Иначе
				ЗаявительОбъект = Справочники.ФизическиеЛица.СоздатьЭлемент();
				ЗаявительОбъект.Заполнить(Неопределено);
				ЗаявительОбъект.Фамилия  = Объект.ФамилияИП;
				ЗаявительОбъект.Имя      = Объект.ИмяИП;
				ЗаявительОбъект.Отчество = Объект.ОтчествоИП;
				ЗаявительОбъект.ИНН      = Объект.ИНН;
				ОрганизацииФормыКлиентСервер.ОпределитьПолПоОтчеству(ЗаявительОбъект.Пол, ЗаявительОбъект.Отчество);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ЗаявительОбъект, "Заявитель");
	ПрочитатьДанныеЗаявителя();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДанныеЗаявителя()
	
	ОрганизацииФормы.ПрочитатьДанныеФизическогоЛица(ЭтотОбъект, Заявитель.Ссылка, ИменаРеквизитовФизическогоЛица());
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьОрганизацию()
	
	ДанныеПомощникаРегистрации = Обработки.РегистрацияОрганизации.ДанныеПомощникаРегистрации();
	Если ДанныеПомощникаРегистрации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОрганизацияСсылка = ДанныеПомощникаРегистрации.Заявление.Ссылка;
	
	Если ТипЗнч(ОрганизацияСсылка) = Тип("СправочникСсылка.Организации") И ОбщегоНазначения.СсылкаСуществует(ОрганизацияСсылка) Тогда
		ЗначениеВРеквизитФормы(ОрганизацияСсылка.ПолучитьОбъект(), "Объект");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДанныеУчредителей()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Объект.Ссылка);
	Запрос.УстановитьПараметр("Дата", КонецДня(ДатаРешения));
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ФормированиеУставногоКапитала.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ФормированиеУставногоКапитала КАК ФормированиеУставногоКапитала
	|ГДЕ
	|	ФормированиеУставногоКапитала.Организация = &Организация
	|	И НЕ ФормированиеУставногоКапитала.ПометкаУдаления
	|	И ФормированиеУставногоКапитала.Дата <= &Дата
	|	И ФормированиеУставногоКапитала.СформированПомощникомРегистрации
	|	И ФормированиеУставногоКапитала.ИзменениеУставногоКапитала
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФормированиеУставногоКапитала.Дата УБЫВ";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ЗначениеВРеквизитФормы(Выборка.Ссылка.ПолучитьОбъект(), "ФормированиеУставногоКапитала");
	КонецЕсли;
	
	Учредители.Очистить();
	ТаблицаУчредителей = Учредители.Выгрузить();
	
	УчредителиНовые.Очистить();
	ТаблицаУчредителейНовых = УчредителиНовые.Выгрузить();
	
	СоставУчредителейИзменен = Ложь;
	
	Для Каждого СтрокаУчредителя Из ФормированиеУставногоКапитала.Учредители Цикл
		
		РеквизитыУчредителя = РеквизитыУчредителя(СтрокаУчредителя.Учредитель);
		
		Если СтрокаУчредителя.СуммаВзносаДоИзменения <> СтрокаУчредителя.СуммаВзноса Тогда
			СоставУчредителейИзменен = Истина;
		КонецЕсли;
		
		Если СтрокаУчредителя.СуммаВзносаДоИзменения > 0 Тогда
			
			СтрокаУчредителяФормы = ТаблицаУчредителей.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаУчредителяФормы, СтрокаУчредителя, , "СуммаВзноса");
			ЗаполнитьЗначенияСвойств(СтрокаУчредителяФормы, РеквизитыУчредителя);
			СтрокаУчредителяФормы.Ссылка = СтрокаУчредителя.Учредитель;
			СтрокаУчредителяФормы.СуммаВзноса = СтрокаУчредителя.СуммаВзносаДоИзменения;
			
		КонецЕсли;
		
		Если СтрокаУчредителя.СуммаВзноса > 0 Тогда
			
			СтрокаУчредителяФормы = ТаблицаУчредителейНовых.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаУчредителяФормы, СтрокаУчредителя);
			ЗаполнитьЗначенияСвойств(СтрокаУчредителяФормы, РеквизитыУчредителя);
			СтрокаУчредителяФормы.Ссылка = СтрокаУчредителя.Учредитель;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаУчредителей.Количество() <> 0 Тогда
		МассивВзносов = ТаблицаУчредителей.ВыгрузитьКолонку("СуммаВзноса");
		МассивДолей = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(100, МассивВзносов, 2);
		Если МассивДолей <> Неопределено Тогда
			ТаблицаУчредителей.ЗагрузитьКолонку(МассивДолей, "ДоляУчастия");
		КонецЕсли;
	КонецЕсли;
	
	Учредители.Загрузить(ТаблицаУчредителей);
	
	Если СоставУчредителейИзменен Тогда
		
		Если ТаблицаУчредителейНовых.Количество() <> 0 Тогда
			МассивВзносов = ТаблицаУчредителейНовых.ВыгрузитьКолонку("СуммаВзноса");
			МассивДолей = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(100, МассивВзносов, 2);
			Если МассивДолей <> Неопределено Тогда
				ТаблицаУчредителейНовых.ЗагрузитьКолонку(МассивДолей, "ДоляУчастия");
			КонецЕсли;
		КонецЕсли;
		
		УчредителиНовые.Загрузить(ТаблицаУчредителейНовых);
		
	КонецЕсли;
	
	ЗаполнитьДобавленныеКолонкиТаблицыУчредители();
	
КонецПроцедуры

&НаСервере
Функция РеквизитыУчредителя(Учредитель)
	
	РеквизитыУчредителя = Новый Структура("Наименование, ИНН", "", "");
	
	Если ТипЗнч(Учредитель) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Учредитель, "ИНН, ФИО");
		РеквизитыУчредителя.ИНН = Реквизиты.ИНН;
		РеквизитыУчредителя.Наименование = Реквизиты.ФИО;
	ИначеЕсли ТипЗнч(Учредитель) = Тип("СправочникСсылка.Контрагенты") Тогда
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Учредитель, "ИНН, НаименованиеПолное");
		РеквизитыУчредителя.ИНН = Реквизиты.ИНН;
		РеквизитыУчредителя.Наименование = Реквизиты.НаименованиеПолное;
	КонецЕсли;
	
	Возврат РеквизитыУчредителя;
	
КонецФункции

&НаСервере
Процедура ПрочитатьОтветственныеЛица()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		// История возвращается в обратном порядке
		ИсторияРуководителей = Обработки.РегистрацияОрганизации.ИсторияРуководителейОрганизации(Объект.Ссылка);
		
		КоличествоЗаписей = ИсторияРуководителей.Количество();
		Если КоличествоЗаписей > 1 Тогда
			ЗаполнитьЗначенияСвойств(ОтветственныеЛицаНовые, ИсторияРуководителей[0]);
			ЗаполнитьЗначенияСвойств(ОтветственныеЛица, ИсторияРуководителей[1]);
		ИначеЕсли КоличествоЗаписей = 1 Тогда
			ЗаполнитьЗначенияСвойств(ОтветственныеЛица, ИсторияРуководителей[0]);
		КонецЕсли;
	Иначе
		ЗначениеВРеквизитФормы(РегистрыСведений.ОтветственныеЛицаОрганизаций.СоздатьМенеджерЗаписи(), "ОтветственныеЛица");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОтветственныеЛица.Период) Тогда
		ОтветственныеЛица.Период = Объект.ДатаРегистрации;
	КонецЕсли;
	
	Если Не ИзмененРуководитель(ЭтотОбъект) Тогда
		Если Не ЗначениеЗаполнено(ОтветственныеЛица.ФизическоеЛицо) Тогда
			ОтветственныеЛица.ФизическоеЛицо = Заявитель.Ссылка;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ОтветственныеЛица.Должность) Тогда
			ОтветственныеЛица.Должность = РуководительДолжность;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОтветственныеЛица.СрокПолномочий) Тогда
		ОтветственныеЛица.СрокПолномочий = 5;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОбъектЗаполнен(Объект)
	
	Возврат ЗначениеЗаполнено(Объект.ИНН);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция УчредителиПоТипам(Форма)
	
	ИзмененыУчредители = ИзмененыУчредители(Форма);
	
	УчредителиЮридическиеЛица = Новый Массив;
	УчредителиФизическиеЛица  = Новый Массив;
	
	Для Каждого Учредитель Из Форма.ФормированиеУставногоКапитала.Учредители Цикл
		
		Если ИзмененыУчредители И Учредитель.СуммаВзносаДоИзменения = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Учредитель.ТипУчредителя = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо") Тогда
			УчредителиЮридическиеЛица.Добавить(Учредитель.Учредитель);
		Иначе
			УчредителиФизическиеЛица.Добавить(Учредитель.Учредитель);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новый Структура("ЮридическиеЛица, ФизическиеЛица", УчредителиЮридическиеЛица, УчредителиФизическиеЛица);
	
КонецФункции

#КонецОбласти

#Область Инструкция

&НаСервере
Функция ИнструкцияПоВнесениюИзмененийИП()

	ДанныеРегистрирующегоОргана = Новый Структура;
	ДанныеРегистрирующегоОргана.Вставить("НаименованиеФНС", РегистрирующийОрганНаименование);
	ДанныеРегистрирующегоОргана.Вставить("АдресФНС",        РегистрирующийОрганАдрес);
	ДанныеРегистрирующегоОргана.Вставить("ТелефонФНС",      РегистрирующийОрганТелефон);
	Возврат Обработки.РегистрацияОрганизации.ИнструкцияРегистрацияИзмененийЕГРИП(
		СпособРегистрации,
		ДанныеРегистрирующегоОргана,
		УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ИнструкцияПоВнесениюИзмененийООО()
	
	Изменено = СтруктураИзменений(ЭтотОбъект);
	ЮрАдресИПропискаГлавногоСовпадают = Изменено.Местоположение
		И ЮрАдресИПропискаГлавногоСовпадают(КонтактнаяИнформацияОписаниеДополнительныхРеквизитов, ЮридическийАдресНовыйЗначенияПолей, Учредители);
	ЭтоЮрЛицо = Истина;
	ИзмененияВносятсяВУчредительныеДокументы = ИзмененияВносятсяВУчредительныеДокументы(
		ЭтоЮрЛицо, Изменено, АдресВУставеПолный(ЭтотОбъект.АдресВУставе), КодыОКВЭДпротиворечатУставу(ЭтотОбъект.ВидыДеятельностиВУставе));
	ИзмененияТребуютУведомления = ИзмененияТребуютУведомления(ЭтоЮрЛицо, Изменено, ЮрАдресИПропискаГлавногоСовпадают);
	ИзмененоМестоположение = ИзмененоМестоположение(ЭтотОбъект);
	
	ПараметрыФормирования = Новый Структура;
	ПараметрыФормирования.Вставить("ИзмененияТребуютУведомления",  (Не ИзмененияВносятсяВУчредительныеДокументы Или ИзмененияТребуютУведомления Или Изменено.Руководитель));
	ПараметрыФормирования.Вставить("ИзмененияВносятсяВУчредительныеДокументы", ИзмененияВносятсяВУчредительныеДокументы);
	ПараметрыФормирования.Вставить("НесколькоУчредителей", (Учредители.Количество() > 1));
	ПараметрыФормирования.Вставить("ОдинУчредительЮридическоеЛицо", Ложь);
	ПараметрыФормирования.Вставить("СпособРегистрации", СпособРегистрации);
	
	ДанныеРегистрирующегоОргана = Новый Структура;
	ДанныеРегистрирующегоОргана.Вставить("НаименованиеФНС", РегистрирующийОрганНаименование);
	ДанныеРегистрирующегоОргана.Вставить("АдресФНС",        РегистрирующийОрганАдрес);
	ДанныеРегистрирующегоОргана.Вставить("ТелефонФНС",      РегистрирующийОрганТелефон);
	
	ДанныеПрежнегоРегистрирующегоОргана = Новый Структура;
	ДанныеПрежнегоРегистрирующегоОргана.Вставить("НаименованиеФНС", РегистрирующийОрганПрежнийНаименование);
	ДанныеПрежнегоРегистрирующегоОргана.Вставить("АдресФНС",        РегистрирующийОрганПрежнийАдрес);
	ДанныеПрежнегоРегистрирующегоОргана.Вставить("ТелефонФНС",      РегистрирующийОрганПрежнийТелефон);
	
	ПлатежныеРеквизиты = Неопределено;
	Если ПлатежныеРеквизитыОплатаГоспошлиныПолучены Тогда
		ПлатежныеРеквизиты = ДанныеСервисаРегистрации.НовыйРеквизитыПлатежа();
		ПлатежныеРеквизиты.ОКТМО = ПлатежныеРеквизитыОКТМО;
		ПлатежныеРеквизиты.ИНН = ПлатежныеРеквизитыИНН;
		ПлатежныеРеквизиты.КПП = ПлатежныеРеквизитыКПП;
		ПлатежныеРеквизиты.НаименованиеПолучателя = ПлатежныеРеквизитыНаименованиеПолучателя;
		ПлатежныеРеквизиты.БИК = ПлатежныеРеквизитыБИК;
		ПлатежныеРеквизиты.НомерСчета = ПлатежныеРеквизитыНомерСчета;
		ПлатежныеРеквизиты.КоррСчет = ПлатежныеРеквизитыКоррСчет;
		ПлатежныеРеквизиты.НаименованиеБанка = ПлатежныеРеквизитыНаименованиеБанка;
		ПлатежныеРеквизиты.КБК = ПлатежныеРеквизитыКБК;
		ПлатежныеРеквизиты.Сумма = ПлатежныеРеквизитыСумма;
	КонецЕсли;
	
	РеквизитыНалоговыхОрганов = Новый Структура("ДанныеРегистрирующегоОргана, ДанныеПрежнегоРегистрирующегоОргана, ПлатежныеРеквизиты",
		ДанныеРегистрирующегоОргана, ДанныеПрежнегоРегистрирующегоОргана, ПлатежныеРеквизиты);
	
	Если Изменено.Местоположение И ИзмененияТребуютУведомления(ЭтоЮрЛицо, Изменено, ЮрАдресИПропискаГлавногоСовпадают) Тогда
		Возврат Обработки.РегистрацияОрганизации.ИнструкцияРегистрацияИзмененийОООСменаМестоположение(
			РеквизитыНалоговыхОрганов, ПараметрыФормирования, УникальныйИдентификатор);
	Иначе
		Возврат Обработки.РегистрацияОрганизации.ИнструкцияРегистрацияИзмененийОООБезСменыАдреса(
			РеквизитыНалоговыхОрганов, ПараметрыФормирования, УникальныйИдентификатор);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти