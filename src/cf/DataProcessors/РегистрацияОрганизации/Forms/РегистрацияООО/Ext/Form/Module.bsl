&НаКлиенте
Перем ТипУчредителяНовойСтроки;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	СсылкаДляПереходаНаКарту = УправлениеКонтактнойИнформациейБП.СтрокаСсылкиПоказатьНаКарте();
	
	Обработки.РегистрацияОрганизации.РазместитьНавигацию(ЭтотОбъект, Параметры);
	
	УстановитьЗначенияПоУмолчанию();
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	ИсключаемыеВиды = Новый Массив();
	ИсключаемыеВиды.Добавить(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(
		ЭтотОбъект, Организация, "ГруппаКонтактныеДанные", , ИсключаемыеВиды, Истина);
	
	ИсключаемыеВиды = Новый Массив();
	ИсключаемыеВиды.Добавить(Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица);
	ИсключаемыеВиды.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица);
	ИсключаемыеВиды.Добавить(Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица);
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(
		ЭтотОбъект, Руководитель, "ГруппаКонтактныеДанныеРуководителя", , ИсключаемыеВиды, Истина);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	Если НавигацияПараметрФормы = "Документы" Тогда
		ИзменитьЭтап(3);
	Иначе
		ИзменитьЭтап(1);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РегистрацияОрганизацииКлиент.ОповеститьОбОткрытии(ЭтотОбъект,
		РегистрацияОрганизацииКлиентСервер.ИмяПомощникаРегистрации(),
		НавигацияНомерШага);
	// Восстановим признак модифицированности формы
	// для того, чтобы была выполнена запись объекта при переходе к следующему шагу.
	Если ДанныеМодифицированы Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если НавигацияПараметрФормы = "Документы" Тогда
		ИзменитьЭтап(3);
	Иначе
		ИзменитьЭтап(1);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// Все данные сохраняются в настройках формы и при последующем открытии восстанавливаются.
	// Поэтому сохраним модифицированность формы, чтобы при следующем открытии помощника восстановить форму.
	// В базу данные запишутся, после того как пользователь двинется дальше по помощнику.
	ДанныеМодифицированы = Модифицированность;
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = ЭтотОбъект Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменитьПараметрНавигации" Тогда
		
		Если Параметр = "Заявление" Тогда
			ИзменитьЭтап(1);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ОткрытШагПомощника_РегистрацияОрганизации" Тогда
		
		Если Параметр = Неопределено
			Или Параметр.ИмяПомощника <> РегистрацияОрганизацииКлиентСервер.ИмяПомощникаРегистрации()
			Или Параметр.НомерШага <> НавигацияНомерШага Тогда
			Закрыть();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ИзменениеУчетнойПолитики" Тогда
		Если Параметр = Организация.Ссылка
			ИЛИ Параметр = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Организация.Ссылка) Тогда
			УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Организация", Организация.Ссылка));
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "Запись_ФизическиеЛица"
		И Источник = РуководительСсылка Тогда
		ПрочитатьДанныеРуководителя();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ТекущийЭтап = 1 Тогда
		
		ВыполнитьПроверкуЗаполненияДанныхЭтапа1(Отказ, ПроверяемыеРеквизиты);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	РегистрацияОрганизацииКлиент.ОбработатьНавигационнуюСсылку(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НаименованиеСокращенноеПриИзменении(Элемент)
	
	Префикс = НСтр("ru='ООО'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	Организация.НаименованиеСокращенное = Префикс + " " + СокрЛП(СтрЗаменить(Организация.НаименованиеСокращенное, Префикс, ""));
	ЧислоКавычек = СтрЧислоВхождений(Организация.НаименованиеСокращенное, """");
	Если ЧислоКавычек = 0 Тогда
		Организация.НаименованиеСокращенное = Префикс + " " 
			+ """" + Сред(Организация.НаименованиеСокращенное, СтрДлина(Префикс) + 2) + """";
	КонецЕсли;
	
	Если ПустаяСтрока(Организация.НаименованиеПолное)
		ИЛИ ОрганизацииФормыКлиентСервер.ПолноеНаименованиеСоответствуетСокращенномуНаименованию(
			НаименованиеСокращенноеДоИзменения, Организация.НаименованиеПолное) Тогда
		Организация.НаименованиеПолное = ОрганизацииФормыКлиентСервер.ПолноеНаименованиеПоСокращенномуНаименованию(
			Организация.НаименованиеСокращенное);
	КонецЕсли;
	
	Организация.Наименование = ОрганизацииФормыКлиентСервер.НаименованиеПоСокращенномуНаименованию(
		Организация.НаименованиеСокращенное);
	
	НаименованиеСокращенноеДоИзменения = Организация.НаименованиеСокращенное;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеЮрАдресОрганизацииНажатие(Элемент, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиентБП.НачалоВыбора(ЭтотОбъект, Элемент, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчествоРуководителяПриИзменении(Элемент)
	
	ОрганизацииФормыКлиентСервер.ОпределитьПолПоОтчеству(Руководитель.Пол, Руководитель.Отчество);
	
КонецПроцедуры

&НаКлиенте
Процедура ИННРуководителяПриИзменении(Элемент)
	
	НадписьОшибкаИННРуководителя = СообщениеОбОшибкеИНН(Руководитель.ИНН);
	УстановитьВидимостьОшибкиИНН(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеАдресПоПропискеФизическиеЛицаНажатие(Элемент, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиентБП.НачалоВыбора(ЭтотОбъект, Элемент, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеТелефонРабочийФизическиеЛицаПриИзменении(Элемент)
	
	ОрганизацииФормыКлиентСервер.ТелефонПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеТелефонРабочийФизическиеЛицаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеEMailФизическиеЛицаПриИзменении(Элемент)
	
	КонтактнаяИнформацияПолеEMailФизическиеЛица = СокрЛП(КонтактнаяИнформацияПолеEMailФизическиеЛица);
	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдинственныйУчредительРуководительПриИзменении(Элемент)
	
	Если ЕдинственныйУчредительРуководитель Тогда
		ФормированиеУставногоКапитала.УставныйКапитал = РегистрацияОрганизацииКлиентСервер.МинимальныйУставныйКапитал();
	Иначе
		ФормированиеУставногоКапитала.УставныйКапитал = 0;
		Если НЕ ПустаяСтрока(Руководитель.Фамилия)
			И НЕ ПустаяСтрока(Руководитель.Имя) Тогда
			ЗаписатьРуководителя();
		КонецЕсли;
	КонецЕсли;
	Учредители.Очистить();
	УстановитьВидимостьГруппыУчредителей(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДолжностьРуководителяОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСДолжностямиБПКлиент.ДолжностьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДолжностьРуководителяАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСДолжностямиБПКлиент.ДолжностьАвтоПодбор(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДолжностьРуководителяОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСДолжностямиБПКлиент.ДолжностьОкончаниеВводаТекста(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУчредители

&НаКлиенте
Процедура УчредителиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование 
		ИЛИ ТипУчредителяНовойСтроки <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо"));
	Оповещение = Новый ОписаниеОповещения("ДобавитьУчредителяЗавершение", ЭтотОбъект);
	Элементы.Учредители.ТекущийЭлемент = Элементы.УчредителиУчредитель;
	ПоказатьВыборИзМеню(Оповещение, СписокВыбора, Элементы.Учредители);
	
КонецПроцедуры

&НаКлиенте
Процедура УчредителиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Учредители.ТекущиеДанные;
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекущиеДанные.НадписьПредставитель = НСтр("ru='Представитель:'");
		ТекущиеДанные.НадписьДолжность     = НСтр("ru='Должность:'");
		ТекущиеДанные.НадписьНаОсновании   = НСтр("ru='На основании:'");
		ТекущиеДанные.ТипУчредителя = ТипУчредителяНовойСтроки;
		ТипУчредителяНовойСтроки    = Неопределено;
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ТипУчредителя) Тогда
			ТекущиеДанные.ТипУчредителя = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо");
		КонецЕсли;
	КонецЕсли;
	
	МассивПараметрыВыбора = Новый Массив;
	Если ТекущиеДанные.ТипУчредителя = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо") Тогда
		Элементы.УчредителиУчредитель.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ЮридическоеФизическоеЛицо", 
			ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо"));
		МассивПараметрыВыбора.Добавить(НовыйПараметр);
	Иначе
		Элементы.УчредителиУчредитель.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
	КонецЕсли;
	Элементы.УчредителиУчредитель.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметрыВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура УчредителиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования Тогда
		ФормированиеУставногоКапитала.УставныйКапитал = Учредители.Итог("СуммаВзноса");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчредителиПослеУдаления(Элемент)
	
	ФормированиеУставногоКапитала.УставныйКапитал = Учредители.Итог("СуммаВзноса");
	
КонецПроцедуры

&НаКлиенте
Процедура УчредителиУчредительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные  = Элементы.Учредители.ТекущиеДанные;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	Если ТекущиеДанные.ТипУчредителя = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо") Тогда
		ОткрытьФорму("Обработка.РегистрацияОрганизации.Форма.ФормаВыбораФизическогоЛица", ПараметрыФормы, Элемент);
	ИначеЕсли ТекущиеДанные.ТипУчредителя = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо") Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("ЮридическоеФизическоеЛицо", 
			ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо"));
		ПараметрыФормы.Вставить("Отбор", Отбор);
		ОткрытьФорму("Обработка.РегистрацияОрганизации.Форма.ФормаВыбораЮридическогоЛица", ПараметрыФормы, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчредителиУчредительОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные  = Элементы.Учредители.ТекущиеДанные;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	Если ЗначениеЗаполнено(ТекущиеДанные.Учредитель) Тогда
		ПараметрыФормы.Вставить("Ключ", ТекущиеДанные.Учредитель);
	Иначе
		ПараметрыФормы.Вставить("ТекстЗаполнения", Элемент.ТекстРедактирования);
	КонецЕсли;
	Если ТекущиеДанные.ТипУчредителя = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо") Тогда
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("ЮридическоеФизическоеЛицо", 
			ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо"));
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ОткрытьФорму("Обработка.РегистрацияОрганизации.Форма.ФормаЮридическогоЛица", ПараметрыФормы, Элемент);
	Иначе
		ОткрытьФорму("Обработка.РегистрацияОрганизации.Форма.ФормаФизическогоЛица", ПараметрыФормы, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчредителиУчредительСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные  = Элементы.Учредители.ТекущиеДанные;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ТекстЗаполнения", Элемент.ТекстРедактирования);
	Если ТекущиеДанные.ТипУчредителя = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо") Тогда
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("ЮридическоеФизическоеЛицо", 
			ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо"));
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ОткрытьФорму("Обработка.РегистрацияОрганизации.Форма.ФормаЮридическогоЛица", ПараметрыФормы, Элемент);
	Иначе
		ОткрытьФорму("Обработка.РегистрацияОрганизации.Форма.ФормаФизическогоЛица", ПараметрыФормы, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчредителиПредставительУчредителяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ОткрытьФорму("Обработка.РегистрацияОрганизации.Форма.ФормаВыбораФизическогоЛица", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура УчредителиПредставительУчредителяОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные  = Элементы.Учредители.ТекущиеДанные;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	Если ЗначениеЗаполнено(ТекущиеДанные.ПредставительУчредителя) Тогда
		ПараметрыФормы.Вставить("Ключ", ТекущиеДанные.ПредставительУчредителя);
	КонецЕсли;
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru='Представитель учредителя'"));
	ОткрытьФорму("Обработка.РегистрацияОрганизации.Форма.ФормаФизическогоЛица", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура УчредителиПредставительУчредителяСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("Заголовок",   НСтр("ru='Представитель учредителя'"));
	ОткрытьФорму("Обработка.РегистрацияОрганизации.Форма.ФормаФизическогоЛица", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура УчредителиДолжностьПредставителяПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Учредители.ТекущиеДанные;
	РуководительНаОсновании = НСтр("ru='Устава'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ПрочееНаОсновании       = НСтр("ru='Доверенности №'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	Если РегистрацияОрганизацииКлиентСервер.ЭтоДолжностьРуководителя(ТекущиеДанные.ДолжностьПредставителя) Тогда
		ТекущиеДанные.ПредставительНаОсновании = РуководительНаОсновании;
	ИначеЕсли ПустаяСтрока(ТекущиеДанные.ПредставительНаОсновании)
		ИЛИ ТекущиеДанные.ПредставительНаОсновании = РуководительНаОсновании Тогда
		ТекущиеДанные.ПредставительНаОсновании = ПрочееНаОсновании;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчредителиДолжностьПредставителяОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСДолжностямиБПКлиент.ДолжностьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УчредителиДолжностьПредставителяАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСДолжностямиБПКлиент.ДолжностьАвтоПодбор(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УчредителиДолжностьПредставителяОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСДолжностямиБПКлиент.ДолжностьОкончаниеВводаТекста(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьУчредителяФизическоеЛицо(Команда)
	
	ТипУчредителяНовойСтроки = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо");
	ТекущийЭлемент = Элементы.Учредители;
	Элементы.Учредители.ДобавитьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьУчредителяЮридическоеЛицо(Команда)
	
	ТипУчредителяНовойСтроки = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо");
	ТекущийЭлемент = Элементы.Учредители;
	Элементы.Учредители.ДобавитьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДокументы(Команда)
	
	Если Организация.Ссылка.Пустая() Или Модифицированность Тогда
		
		ДлительнаяОперация = ЗаписатьДанныеВФоне();
		
		Если ДлительнаяОперация = Неопределено Тогда
			// Ошибка проверки заполнения.
			Возврат;
		КонецЕсли;
		
		Если ДлительнаяОперация.Статус = "Ошибка" Тогда
			
			ПоказатьОшибкуФормированияДокументов(ДлительнаяОперация);
			
		Иначе
			
			ИзменитьЭтап(2);
			
			НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
			НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
			НастройкиОжидания.ПолучатьРезультат = Истина;
			
			Обработчик = Новый ОписаниеОповещения("ПослеЗавершенияФоновогоЗаданияФормированияДокументов", ЭтотОбъект);
			
			ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
			
		КонецЕсли;
		
	Иначе
		ИзменитьЭтап(3);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРеквизитыОрганизации(Команда)
	
	ИзменитьЭтап(1);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресИРеквизитыВашейИнспекции(Команда)
	
	ОрганизацииФормыКлиент.ПерейтиКСервисуОпределитьРеквизитыИФНС();
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрирующийОрганАдресПереходНаКартуНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеКонтактнойИнформациейКлиентБП.ПоказатьНаКартеНажатие(ЭтотОбъект, Элемент, РегистрирующийОрганАдрес);
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкаИнструкцияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	АдресХранилища = ИнструкцияРегистрацияООО(Организация.Ссылка);
	
	ИмяФайла = НСтр("ru='Инструкция по регистрации ООО.pdf'");
	
	ПолучитьФайл(АдресХранилища, ИмяФайла, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УплатаГоспошлиныОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОрганизацииФормыКлиент.ПерейтиКСервисуСкачатьКвитанциюНаОплатуГоспошлиныПриРегистрации();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявлениеОРегистрацииОООНажатие(Элемент)
	
	ЗаявлениеОРегистрацииООО(Организация.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура УставОООНажатие(Элемент)
	
	АдресХранилища = УставООО(Организация.Ссылка);
	
	ИмяФайла = НСтр("ru='Устав ООО.rtf'");
	
	ПолучитьФайл(АдресХранилища, ИмяФайла, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РешениеЕдинственногоУчредителяОООНажатие(Элемент)
	
	АдресХранилища = РешениеЕдинственногоУчредителяООО(Организация.Ссылка);
	
	ИмяФайла = НСтр("ru='Решение единственного учредителя.rtf'");
	
	ПолучитьФайл(АдресХранилища, ИмяФайла, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПротоколСобранияУчредителейОООНажатие(Элемент)
	
	АдресХранилища = ПротоколСобранияУчредителейООО(Организация.Ссылка);
	
	ИмяФайла = НСтр("ru='Протокол собрания учредителей ООО.rtf'");
	
	ПолучитьФайл(АдресХранилища, ИмяФайла, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПротоколСобранияУчредителейЕдинственногоУчредителяОООНажатие(Элемент)
	
	АдресХранилища = ПротоколСобранияУчредителейЕдинственногоУчредителяООО(Организация.Ссылка);
	
	ИмяФайла = СтрШаблон(НСтр("ru='Образец протокола собрания учредителей %1.rtf'"), НаименованиеЕдинственногоУчредителя);
	ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла, "_");
	
	ПолучитьФайл(АдресХранилища, ИмяФайла, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорОбУчрежденииОООНажатие(Элемент)
	
	АдресХранилища = ДоговорОбУчрежденииООО(Организация.Ссылка);
	
	ИмяФайла = НСтр("ru='Договор об учреждении ООО.rtf'");
	
	ПолучитьФайл(АдресХранилища, ИмяФайла, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УведомлениеОПереходеНаУСНОООНажатие(Элемент)
	
	УведомлениеОПереходеНаУСН();
	
КонецПроцедуры

&НаКлиенте
Процедура КвитанцияНаОплатуГоспошлиныНажатие(Элемент)
	
	АдресХранилища = КвитанцияНаОплатуГоспошлины(Организация.Ссылка);
	
	ИмяФайла = НСтр("ru='Квитанция на оплату госпошлины.pdf'");
	
	Если АдресХранилища <> Неопределено Тогда
		ПолучитьФайл(АдресХранилища, ИмяФайла, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ХочуКонсультацию(Команда)
	ОткрытьФорму("Обработка.РегистрацияОрганизации.Форма.ФормаХочуКонсультацию");
КонецПроцедуры

&НаКлиенте
Процедура НачатьРаботу(Команда)
	
	ПредупреждениеОбОшибке = Новый Структура;
	Если НЕ ПодготовитьНачалоРаботы(ПредупреждениеОбОшибке) Тогда
		СтандартныеПодсистемыКлиент.ВывестиПредупреждение(ЭтотОбъект, ПредупреждениеОбОшибке);
		Возврат;
	КонецЕсли;
	
	ОбновитьИнтерфейс();
	ОповеститьОЗавершенииПомощникаНачалаРаботы();
	
	ОткрытьФормуНачалаРаботы();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	
	РегистрацияОрганизацииКлиент.ОткрытьЭтап(НавигацияНомерШага - 1);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПослеЗавершенияФоновогоЗаданияФормированияДокументов(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		ОбработатьРезультатВыполненияФоновогоЗаданияФормированияДокументов(ДлительнаяОперация.АдресРезультата);
		
		ОповеститьОбИзменении(Организация.Ссылка);
		ОповеститьОбИзменении(ФизическоеЛицоРуководитель.Ссылка);
		
	Иначе
		ПоказатьОшибкуФормированияДокументов(ДлительнаяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеЗаявления()
	
	ДанныеЗаявления = Обработки.РегистрацияОрганизации.НовыйДанныеЗаявления();
	
	ДанныеЗаявления.НаименованиеОрганизации       = Организация.НаименованиеСокращенное;
	ДанныеЗаявления.ПолноеНаименованиеОрганизации = Организация.НаименованиеПолное;
	ДанныеЗаявления.Фамилия                       = Руководитель.Фамилия;
	ДанныеЗаявления.Имя                           = Руководитель.Имя;
	ДанныеЗаявления.Отчество                      = Руководитель.Отчество;
	ДанныеЗаявления.Пол                           = Строка(Руководитель.Пол);
	ДанныеЗаявления.ИНН                           = Руководитель.ИНН;
	ДанныеЗаявления.Телефон                       = КонтактнаяИнформацияПолеТелефонРабочийФизическиеЛица;
	ДанныеЗаявления.Email                         = КонтактнаяИнформацияПолеEMailФизическиеЛица;
	ДанныеЗаявления.СпособРегистрации =
		Обработки.РегистрацияОрганизации.НазваниеСпособаРегистрации(ФормированиеУставногоКапитала.СпособРегистрации);
	ДанныеЗаявления.АдресXML = УправлениеКонтактнойИнформациейБП.ЗначенияПолейВидаКонтактнойИнформации(
		КонтактнаяИнформацияОписаниеДополнительныхРеквизитов, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	
	Возврат ДанныеЗаявления;
	
КонецФункции

&НаСервере
Процедура ОбработатьРезультатВыполненияФоновогоЗаданияФормированияДокументов(АдресРезультата)
	
	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если РезультатВыполнения.Свойство("УставныйКапитал") Тогда
		УставныйКапиталОбъект = РезультатВыполнения.УставныйКапитал.ПолучитьОбъект();
		ЗначениеВРеквизитФормы(УставныйКапиталОбъект, "ФормированиеУставногоКапитала");
	КонецЕсли;
	
	ДанныеЗаявления = ДанныеЗаявления();
	ДанныеЗаявления.Ссылка = РезультатВыполнения.Организация;
	Обработки.РегистрацияОрганизации.СохранитьДанныеЗаявления(ДанныеЗаявления);
	
	ПодготовитьФормуНаСервере();
	
	Модифицированность = Ложь;
	
	ИзменитьЭтап(3);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОшибкуФормированияДокументов(ДлительнаяОперация)
	
	// Если при создании документов прозошла ошибка,
	// то нужно вернуться на этап заполнения данных и вывести сообщение об ошибке.
	ИзменитьЭтап(1);
	
	Текст = НСтр("ru = 'Ошибка при формировании документов:'");
	Предупреждение = Новый Структура;
	Предупреждение.Вставить("Текст",    Текст + Символы.ПС + ДлительнаяОперация.КраткоеПредставлениеОшибки);
	Предупреждение.Вставить("Подробно", ДлительнаяОперация.ПодробноеПредставлениеОшибки);
	СтандартныеПодсистемыКлиент.ВывестиПредупреждение(ЭтотОбъект, Предупреждение);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиУведомлениеОСпецРежимеНалогообложения(Знач ОрганизацияСсылка)
	
	ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОПереходеНаУСН;
	ИмяФормыПоУмолчанию = Отчеты.РегламентированноеУведомлениеПереходНаУСН.ПолучитьФормуПоУмолчанию();
	
	Возврат Обработки.РегистрацияОрганизации.НайтиУведомлениеОСпецРежимеНалогообложения(
												ОрганизацияСсылка, ВидУведомления, ИмяФормыПоУмолчанию);
	
КонецФункции

&НаСервере
Процедура ВыполнитьПроверкуЗаполненияДанныхЭтапа1(Отказ, ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Очистить();
	
	ПустойАдрес = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки();
	ДопустимоВНаименованииКромеКириллицы = "!""№()+-., 0123456789";
	ДопустимоВФИОКромеКириллицы = "-. 0123456789";
	
	// Сокращенное наименование
	Префикс = НСтр("ru='ООО'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	Если НЕ ЗначениеЗаполнено(Организация.НаименованиеСокращенное) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Сокращенное наименование'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Организация.НаименованиеСокращенное", , Отказ);
	ИначеЕсли НЕ СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(Организация.НаименованиеСокращенное, 
		Истина, ДопустимоВНаименованииКромеКириллицы) Тогда
		ТекстСообщения = НСтр("ru = 'Сокращенное наименование заполняется на русском языке'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Организация.НаименованиеСокращенное", , Отказ);
	ИначеЕсли СтрНайти(Организация.НаименованиеСокращенное, Префикс) <> 1 Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Сокращенное наименование должно начинаться с ""%1""'"), Префикс);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Организация.НаименованиеСокращенное", , Отказ);
	КонецЕсли;
	
	// Полное наименование
	Префикс = НСтр("ru='Общество с ограниченной ответственностью'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	Если НЕ ЗначениеЗаполнено(Организация.НаименованиеПолное) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Полное наименование'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Организация.НаименованиеПолное", , Отказ);
	ИначеЕсли НЕ СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(Организация.НаименованиеПолное,
		Истина, ДопустимоВНаименованииКромеКириллицы) Тогда
		ТекстСообщения = НСтр("ru = 'Полное наименование заполняется на русском языке'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Организация.НаименованиеПолное", , Отказ);
	ИначеЕсли СтрНайти(Организация.НаименованиеПолное, Префикс) <> 1 Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Полное наименование должно начинаться со слов ""%1""'"), Префикс);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Организация.НаименованиеПолное", , Отказ);
	КонецЕсли;
	
	// Юридический адрес
	Если КонтактнаяИнформацияПолеЮрАдресОрганизации = ПустойАдрес Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Юридический адрес'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
			, "КонтактнаяИнформацияПолеЮрАдресОрганизации", , Отказ);
	КонецЕсли;
	
	ПроверитьЗаполнениеПаспортныхДанныхРуководителя(Отказ);
	
	// Адрес руководителя
	Если КонтактнаяИнформацияПолеАдресПоПропискеФизическиеЛица = ПустойАдрес Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Адрес по прописке'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
			, "КонтактнаяИнформацияПолеАдресПоПропискеФизическиеЛица", , Отказ);
	КонецЕсли;
	
	// ИНН руководителя
	ТекстСообщения = СообщениеОбОшибкеИНН(Руководитель.ИНН);
	Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Руководитель.ИНН", , Отказ);
	КонецЕсли;
	
	// Телефон руководителя
	Если НЕ ЗначениеЗаполнено(КонтактнаяИнформацияПолеТелефонРабочийФизическиеЛица) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			, , НСтр("ru = 'Контактный телефон'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
			, "КонтактнаяИнформацияПолеТелефонРабочийФизическиеЛица", , Отказ);
	ИначеЕсли НЕ ОрганизацииФормыКлиентСервер.ТелефонСоответствуетТребованиям(
		КонтактнаяИнформацияПолеТелефонРабочийФизическиеЛица) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			, "Корректность", НСтр("ru = 'Контактный телефон'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
			, "КонтактнаяИнформацияПолеТелефонРабочийФизическиеЛица", , Отказ);
	КонецЕсли;
	
	// Электронная почта руководителя
	Если ЗначениеЗаполнено(КонтактнаяИнформацияПолеEMailФизическиеЛица)
		И НЕ ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(
			КонтактнаяИнформацияПолеEMailФизическиеЛица) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Корректность", НСтр("ru = 'Email'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
			, "КонтактнаяИнформацияПолеEMailФизическиеЛица", , Отказ);
	КонецЕсли;

	// Учредители
	
	МинимальныйУставныйКапитал = РегистрацияОрганизацииКлиентСервер.МинимальныйУставныйКапитал();
	Если ЕдинственныйУчредительРуководитель Тогда
		
		// Уставный капитал
		Если ФормированиеУставногоКапитала.УставныйКапитал < МинимальныйУставныйКапитал Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Уставный капитал не может быть меньше %1 руб.'"),
				Формат(МинимальныйУставныйКапитал, "ЧДЦ="));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
				, "ФормированиеУставногоКапитала.УставныйКапитал", , Отказ);
		КонецЕсли;
		
	Иначе
		
		ИмяСписка = НСтр("ru = 'Учредители'");
		
		Если Учредители.Количество() = 0 Тогда
			
			// Заполнение списка учредителей
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Список", , , , ИмяСписка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Учредители", , Отказ);
			
		Иначе
			
			Для Индекс = 0 По Учредители.Количество() - 1 Цикл
				СтрокаТаблицы = Учредители[Индекс];
				НомерСтроки = Формат(Индекс + 1, "ЧГ=");
				ПутьКСтроке = "Учредители[" + Формат(Индекс, "ЧГ=") + "].";
				
				// Учредитель
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Учредитель) Тогда
					ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
						"Колонка", , НСтр("ru = 'Учредитель'"), НомерСтроки, ИмяСписка);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
						, ПутьКСтроке + "Учредитель", , Отказ);
				КонецЕсли;
				
				Если СтрокаТаблицы.ТипУчредителя = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
					
					// Представитель учредителя
					Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ПредставительУчредителя) Тогда
						ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
							"Колонка", , НСтр("ru = 'Представитель'"), НомерСтроки, ИмяСписка);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
							, ПутьКСтроке + "ПредставительУчредителя", , Отказ);
					КонецЕсли;
					
					// Должность представителя
					Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДолжностьПредставителя) Тогда
						ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
							"Колонка", , НСтр("ru = 'Должность представителя'"), НомерСтроки, ИмяСписка);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
							, ПутьКСтроке + "ДолжностьПредставителя", , Отказ);
					КонецЕсли;
					
					// Основание полномочий представителя
					Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ПредставительНаОсновании) Тогда
						ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
							"Колонка", , НСтр("ru = 'На основании'"), НомерСтроки, ИмяСписка);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
							, ПутьКСтроке + "ПредставительНаОсновании", , Отказ);
					КонецЕсли;
					
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СуммаВзноса) Тогда
					ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
						"Колонка", , НСтр("ru = 'Сумма взноса'"), НомерСтроки, ИмяСписка);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , ПутьКСтроке + "СуммаВзноса", , Отказ);
				КонецЕсли;
			КонецЦикла;
			
			// Уставный капитал
			Если Учредители.Итог("СуммаВзноса") < МинимальныйУставныйКапитал Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Уставный капитал не может быть меньше %1 руб.'"),
					Формат(МинимальныйУставныйКапитал, "ЧДЦ="));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Учредители", , Отказ);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	// Способ регистрации
	Если НЕ ЗначениеЗаполнено(ФормированиеУставногоКапитала.СпособРегистрации) Тогда
		ТекстСообщения = НСтр("ru = 'Не выбран способ регистрации'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
			, "ФормированиеУставногоКапитала.СпособРегистрации", , Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеПаспортныхДанныхРуководителя(Отказ)
	
	ДопустимоВФИОКромеКириллицы = "-. 0123456789";
	
	// Фамилия руководителя
	Если НЕ ЗначениеЗаполнено(Руководитель.Фамилия) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Фамилия руководителя'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Руководитель.Фамилия", , Отказ);
	ИначеЕсли НЕ СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(Руководитель.Фамилия,
		Истина, ДопустимоВФИОКромеКириллицы) Тогда
		ТекстСообщения = НСтр("ru = 'Фамилия заполняется на русском языке'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Руководитель.Фамилия", , Отказ);
	КонецЕсли;
	
	// Имя руководителя
	Если НЕ ЗначениеЗаполнено(Руководитель.Имя) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Имя руководителя'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Руководитель.Имя", , Отказ);
	ИначеЕсли НЕ СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(Руководитель.Имя,
		Истина, ДопустимоВФИОКромеКириллицы) Тогда
		ТекстСообщения = НСтр("ru = 'Имя заполняется на русском языке'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Руководитель.Имя", , Отказ);
	КонецЕсли;
	
	// Отчество руководителя
	Если НЕ СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(Руководитель.Отчество,
		Истина, ДопустимоВФИОКромеКириллицы) Тогда
		ТекстСообщения = НСтр("ru = 'Отчество заполняется на русском языке'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Руководитель.Отчество", , Отказ);
	КонецЕсли;
	
	// Пол руководителя
	Если НЕ ЗначениеЗаполнено(Руководитель.Пол) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Пол руководителя'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Руководитель.Пол", , Отказ);
	КонецЕсли;
	
	// Должность руководителя
	Если НЕ ЗначениеЗаполнено(ОтветственныеЛица.Должность) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Должность руководителя'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ОтветственныеЛица.Должность", , Отказ);
	КонецЕсли;
	
	// Срок полномочий руководителя
	Если НЕ ЗначениеЗаполнено(ОтветственныеЛица.СрокПолномочий) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Срок полномочий руководителя'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ОтветственныеЛица.СрокПолномочий", , Отказ);
	КонецЕсли;
	
	// Серия и номер паспорта руководителя
	Если НЕ ЗначениеЗаполнено(ПаспортСерияНомер) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Серия и номер паспорта'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПаспортСерияНомер", , Отказ);
	Иначе
		ЦифрыСерииНомераПаспорта = ОрганизацииФормыКлиентСервер.ТолькоЦифры(СокрЛП(ПаспортСерияНомер));
		Если СтрДлина(ЦифрыСерииНомераПаспорта) <> 10 Тогда
			ТекстСообщения = НСтр("ru = 'Серия и номер паспорта должны состоять из 10 цифр'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПаспортСерияНомер", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	// Кем выдан паспорта руководителя
	Если НЕ ЗначениеЗаполнено(ПаспортныеДанныеРуководителя.КемВыдан) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Кем выдан паспорт'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
			, "ПаспортныеДанныеРуководителя.КемВыдан", , Отказ);
	КонецЕсли;
	
	// Дата выдачи паспорта руководителя
	Если НЕ ЗначениеЗаполнено(ПаспортныеДанныеРуководителя.ДатаВыдачи) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Дата выдачи паспорта'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
			, "ПаспортныеДанныеРуководителя.ДатаВыдачи", , Отказ);
	ИначеЕсли ПаспортныеДанныеРуководителя.ДатаВыдачи > ТекущаяДатаСеанса() Тогда
		ТекстСообщения =  НСтр("ru = 'Дата выдачи паспорта должна быть раньше текущей даты'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
			, "ПаспортныеДанныеРуководителя.ДатаВыдачи", , Отказ);
	КонецЕсли;
	
	// Код подразделения паспорта руководителя
	Если НЕ ЗначениеЗаполнено(ПаспортныеДанныеРуководителя.КодПодразделения) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Код подразделения'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
			, "ПаспортныеДанныеРуководителя.КодПодразделения", , Отказ);
	Иначе
		ЦифрыКодаПодразделения = ОрганизацииФормыКлиентСервер.ТолькоЦифры(ПаспортныеДанныеРуководителя.КодПодразделения);
		Если СтрДлина(ЦифрыКодаПодразделения) <> 6 Тогда
			ТекстСообщения = НСтр("ru = 'Код подразделения должен состоять из 6 цифр'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
				, "ПаспортныеДанныеРуководителя.КодПодразделения", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	// Дата рождения руководителя
	Если НЕ ЗначениеЗаполнено(Руководитель.ДатаРождения) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Дата рождения'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Руководитель.ДатаРождения", , Отказ);
	ИначеЕсли Руководитель.ДатаРождения > ТекущаяДатаСеанса() Тогда
		ТекстСообщения = НСтр("ru = 'Дата рождения должна быть раньше текущей даты'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Руководитель.ДатаРождения", , Отказ);
	ИначеЕсли ЗначениеЗаполнено(ПаспортныеДанныеРуководителя.ДатаВыдачи) И 
		Руководитель.ДатаРождения > ПаспортныеДанныеРуководителя.ДатаВыдачи Тогда
		
		ТекстСообщения = НСтр("ru = 'Дата рождения должна быть раньше даты выдачи паспорта'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Руководитель.ДатаРождения", , Отказ);
	КонецЕсли;
	
	// Место рождения руководителя
	Если НЕ ЗначениеЗаполнено(Руководитель.МестоРожденияПредставление) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Место рождения'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
			, "Руководитель.МестоРожденияПредставление", , Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ДанныеПомощникаРегистрации = Обработки.РегистрацияОрганизации.ДанныеПомощникаРегистрации();
	
	// Восстановим ссылку на организацию
	ОрганизацияСсылка = ДанныеПомощникаРегистрации.Заявление.Ссылка;
	ПрочитатьДанныеОрганизации(ОрганизацияСсылка);
	// Если на предыдущих этапах, что-то было изменено, то установим модифицированность у формы.
	Если ЗначениеЗаполнено(ОрганизацияСсылка) И ДанныеПомощникаРегистрации.Модифицированность Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	ИспользуетсяСервисРегистрации = Не ПустаяСтрока(Константы.АдресСервисаРегистрации.Получить());
	
	УзнатьИНН = НСтр("ru = 'Узнать ИНН'");
	
	// Установим ОКВЭД
	ВидДеятельности = ДанныеПомощникаРегистрации.ВидДеятельности;
	Если Организация.КодОКВЭД2 <> ВидДеятельности.ОсновнойКод Тогда
		Организация.КодОКВЭД2 = ВидДеятельности.ОсновнойКод;
	КонецЕсли;
	Если Организация.НаименованиеОКВЭД2 <> ВидДеятельности.ОсновноеНаименование Тогда
		Организация.НаименованиеОКВЭД2 = ВидДеятельности.ОсновноеНаименование;
	КонецЕсли;
	Если Организация.ДополнительныеКодыОКВЭД2 <> ВидДеятельности.ДополнительныеКоды Тогда
		Организация.ДополнительныеКодыОКВЭД2 = ВидДеятельности.ДополнительныеКоды;
	КонецЕсли;
	
	// Установим учетную политику
	ОрганизацииФормы.ПрочитатьУчетнуюПолитику(ЭтотОбъект, Организация.Ссылка);
	СохраненнаяСтруктураУчетнойПолитики = ДанныеПомощникаРегистрации.Налоги.СтруктураУчетнойПолитики;
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураУчетнойПолитики, СохраненнаяСтруктураУчетнойПолитики, Истина);
	
	ПрочитатьОтветственныеЛица();
	ПрочитатьДанныеРуководителя();
	ПрочитатьДанныеУчредителей();
	
	НадписьОшибкаИННРуководителя = СообщениеОбОшибкеИНН(Руководитель.ИНН);
	УстановитьВидимостьОшибкиИНН(ЭтотОбъект);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДанныеОрганизации(ОрганизацияСсылка)
	
	Если ТипЗнч(ОрганизацияСсылка) = Тип("СправочникСсылка.Организации")
		И ОбщегоНазначения.СсылкаСуществует(ОрганизацияСсылка) Тогда
		ОрганизацияОбъект = ОрганизацияСсылка.ПолучитьОбъект();
		// СтандартныеПодсистемы.КонтактнаяИнформация
		УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ОрганизацияОбъект);
		// Конец СтандартныеПодсистемы.КонтактнаяИнформация
		ЗначениеВРеквизитФормы(ОрганизацияОбъект, "Организация");
		ОпределитьРегистрирующийОрган();
	КонецЕсли;
	
	НаименованиеСокращенноеДоИзменения = Организация.НаименованиеСокращенное;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначенияПоУмолчанию()
	
	Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	ОтветственныеЛица.СрокПолномочий = 5;
	ЕдинственныйУчредительРуководитель      = Истина;
	ФормированиеУставногоКапитала.СпособРегистрации = 1; // Лично
	ФормированиеУставногоКапитала.УставныйКапитал   = РегистрацияОрганизацииКлиентСервер.МинимальныйУставныйКапитал();

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ЦветСтиля_НезаполненныйРеквизит = ЦветаСтиля.НезаполненныйРеквизит;
	
	// Юридический адрес
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КонтактнаяИнформацияПолеЮрАдресОрганизации");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"КонтактнаяИнформацияПолеЮрАдресОрганизации",
		ВидСравненияКомпоновкиДанных.Равно,
		УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки());
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветСтиля_НезаполненныйРеквизит);
	
	// Адрес руководителя
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КонтактнаяИнформацияПолеАдресПоПропискеФизическиеЛица");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"КонтактнаяИнформацияПолеАдресПоПропискеФизическиеЛица",
		ВидСравненияКомпоновкиДанных.Равно,
		УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки());
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветСтиля_НезаполненныйРеквизит);
	
	// Представитель учредителя - юридического лица, должность и основание полномочий.
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УчредителиПредставительУчредителя");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УчредителиНадписьПредставитель");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УчредителиНадписьДолжность");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УчредителиДолжностьПредставителя");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УчредителиНадписьНаОсновании");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УчредителиПредставительНаОсновании");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Учредители.ТипУчредителя",
		ВидСравненияКомпоновкиДанных.НеРавно,
		ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо"));
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьУчредителяЗавершение(ВыбранныйЭлемент, ДопПараметры) Экспорт

	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТипУчредителяНовойСтроки = ВыбранныйЭлемент.Значение;
	Элементы.Учредители.ДобавитьСтроку();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьОшибкиИНН(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.НадписьОшибкаИННРуководителя.Видимость = НЕ ПустаяСтрока(Форма.НадписьОшибкаИННРуководителя);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	
	Для каждого СтрокаУчредитель Из Учредители Цикл
		СтрокаУчредитель.НадписьПредставитель = НСтр("ru='Представитель:'");
		СтрокаУчредитель.НадписьДолжность     = НСтр("ru='Должность:'");
		СтрокаУчредитель.НадписьНаОсновании   = НСтр("ru='На основании:'");
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СведенияОНалоговомОрганеПоАдресу(Адрес)
	
	Если Не ЗначениеЗаполнено(Адрес) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СведенияОНалоговомОрганеПоАдресу = АдресныйКлассификаторБП.КодыАдреса(Адрес, "Сервис1С");
	
	КодНалоговогоОрганаПоАдресу = Формат(СведенияОНалоговомОрганеПоАдресу.КодИФНСЮЛ, "ЧЦ=4; ЧДЦ=; ЧВН=; ЧГ=0");
	
	Если ЗначениеЗаполнено(КодНалоговогоОрганаПоАдресу) Тогда
		
		Сведения = Новый Структура();
		Сведения.Вставить("КодНалоговогоОргана", КодНалоговогоОрганаПоАдресу);
		Сведения.Вставить("КодПоОКТМО", Формат(СведенияОНалоговомОрганеПоАдресу.ОКТМО, "ЧДЦ=; ЧГ=0"));
		Сведения.Вставить("КодПоОКАТО", Формат(СведенияОНалоговомОрганеПоАдресу.OKATO, "ЧДЦ=; ЧГ=0"));
		
		Возврат Сведения;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаСервере
Функция Подключаемый_ОбновитьКонтактнуюИнформацию(Результат) Экспорт
	
	РезультатОбновления = УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Организация, Результат);
	
	Возврат РезультатОбновления;
	
КонецФункции

&НаКлиенте
Процедура ПослеИзмененияКонтактнойИнформации(Результат) Экспорт
	
	Если Результат.ИмяРеквизита = "КонтактнаяИнформацияПолеЮрАдресОрганизации" Тогда
		ПриИзмененииЮрАдресаОрганизации();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииЮрАдресаОрганизации()
	
	СкопироватьПолеКонтактнойИнформации("КонтактнаяИнформацияПолеФактАдресОрганизации", "КонтактнаяИнформацияПолеЮрАдресОрганизации");
	СкопироватьПолеКонтактнойИнформации("КонтактнаяИнформацияПолеПочтовыйАдресОрганизации", "КонтактнаяИнформацияПолеЮрАдресОрганизации");
	
	Отбор = Новый Структура("ИмяРеквизита");
	Отбор.ИмяРеквизита = "КонтактнаяИнформацияПолеЮрАдресОрганизации";
	ДанныеИсточника = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	Если ДанныеИсточника.Количество() > 0 Тогда
		ЗначенияПолей = ДанныеИсточника[0].ЗначенияПолей;
		
		СведенияОНалоговомОргане = СведенияОНалоговомОрганеПоАдресу(ЗначенияПолей);
		
		Если СведенияОНалоговомОргане <> Неопределено Тогда
			
			Если ЗначениеЗаполнено(СведенияОНалоговомОргане.КодНалоговогоОргана) Тогда
				КодНалоговогоОргана = СведенияОНалоговомОргане.КодНалоговогоОргана;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьПолеКонтактнойИнформации(ИмяПриемника, ИмяИсточника)

	ИмяОписания	= "КонтактнаяИнформацияОписаниеДополнительныхРеквизитов";
	
	Отбор = Новый Структура("ИмяРеквизита");
	
	Отбор.ИмяРеквизита	= ИмяИсточника;
	ДанныеИсточника	= ЭтотОбъект[ИмяОписания].НайтиСтроки(Отбор);
	Если ДанныеИсточника.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Отбор.ИмяРеквизита	= ИмяПриемника;
	ДанныеПриемника	= ЭтотОбъект[ИмяОписания].НайтиСтроки(Отбор);
	Если ДанныеПриемника.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ДанныеИсточника[0].Тип = ДанныеПриемника[0].Тип Тогда
		Возврат
	КонецЕсли;
	
	ЗначенияПолейИсточника = ДанныеИсточника[0].ЗначенияПолей;
	Если ТипЗнч(ЗначенияПолейИсточника)=Тип("Строка") Тогда
		ДанныеПриемника[0].ЗначенияПолей = ЗначенияПолейИсточника;
	Иначе
		ДанныеПриемника[0].ЗначенияПолей = ЗначенияПолейИсточника.Скопировать();
	КонецЕсли;
	ДанныеПриемника[0].Представление = ДанныеИсточника[0].Представление;
	ДанныеПриемника[0].Комментарий = ДанныеИсточника[0].Комментарий;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьОтветственныеЛица()
	
	Если НЕ ЗначениеЗаполнено(Организация.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Организация.Ссылка);
	Запрос.УстановитьПараметр("ОтветственноеЛицо",  Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтветственныеЛицаОрганизаций.Период КАК Период,
	|	ОтветственныеЛицаОрганизаций.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ОтветственныеЛицаОрганизаций.ОтветственноеЛицо КАК ОтветственноеЛицо,
	|	ОтветственныеЛицаОрганизаций.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ОтветственныеЛицаОрганизаций.Должность КАК Должность,
	|	ОтветственныеЛицаОрганизаций.СрокПолномочий КАК СрокПолномочий
	|ИЗ
	|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
	|			,
	|			СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|				И ОтветственноеЛицо = &ОтветственноеЛицо) КАК ОтветственныеЛицаОрганизаций";
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ОтветственныеЛица, Выборка);
		РуководительСсылка = Выборка.ФизическоеЛицо;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПрочитатьДанныеРуководителя()

	ОрганизацииФормы.ПрочитатьДанныеФизическогоЛица(ЭтотОбъект, РуководительСсылка, ИменаРеквизитовФизическогоЛица());
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДанныеУчредителей()
	
	Если НЕ ЗначениеЗаполнено(Организация.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация.Ссылка); 
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ФормированиеУставногоКапитала.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ФормированиеУставногоКапитала КАК ФормированиеУставногоКапитала
	|ГДЕ
	|	ФормированиеУставногоКапитала.Организация = &Организация
	|	И НЕ ФормированиеУставногоКапитала.ПометкаУдаления";
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ЗначениеВРеквизитФормы(Выборка.Ссылка.ПолучитьОбъект(), "ФормированиеУставногоКапитала");
	КонецЕсли;
	
	РуководительСсылка = ОтветственныеЛица.ФизическоеЛицо;
	ЕдинственныйУчредительРуководитель = ФормированиеУставногоКапитала.Учредители.Количество() = 0
		ИЛИ ФормированиеУставногоКапитала.Учредители.Количество() = 1 
		И ФормированиеУставногоКапитала.Учредители[0].Учредитель = РуководительСсылка;
		
	ТаблицаУчредители = ФормированиеУставногоКапитала.Учредители.Выгрузить();
	Учредители.Загрузить(ТаблицаУчредители);
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьДанныеВФоне()
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	НастройкиЗапуска.НаименованиеФоновогоЗадания = НСтр("ru = 'Формирование документов для регистрации организации'");
	
	ПараметрыФормированияДокументов = ПараметрыФормированияДокументов();
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("Обработки.РегистрацияОрганизации.СформироватьДокументыОООВФоне", ПараметрыФормированияДокументов, НастройкиЗапуска);
	
КонецФункции

&НаСервере
Функция ПараметрыФормированияДокументов()
	// Все реквизиты, которые выведены на форму необходимо
	// перенести в структуру для передачи в фоновое задание.
	
	ПараметрыФормированияДокументов = Новый Структура;
	
	// Организация
	ДанныеОрганизации = Новый Структура();
	ДанныеОрганизации.Вставить("Ссылка",                    Организация.Ссылка);
	ДанныеОрганизации.Вставить("ЮридическоеФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	ДанныеОрганизации.Вставить("НаименованиеСокращенное",   Организация.НаименованиеСокращенное);
	ДанныеОрганизации.Вставить("НаименованиеПолное",        Организация.НаименованиеПолное);
	ДанныеОрганизации.Вставить("Наименование",              Организация.Наименование);
	ДанныеОрганизации.Вставить("ЮридическийАдресЗначенияПолей", 
			ЗначенияПолейКонтактнойИнформации(Элементы.КонтактнаяИнформацияПолеЮрАдресОрганизации));
	ДанныеОрганизации.Вставить("КодНалоговогоОргана",       КодНалоговогоОргана);
	ДанныеОрганизации.Вставить("КодОКВЭД2",                 Организация.КодОКВЭД2);
	ДанныеОрганизации.Вставить("НаименованиеОКВЭД2",        Организация.НаименованиеОКВЭД2);
	ДанныеОрганизации.Вставить("ДополнительныеКодыОКВЭД2",  Организация.ДополнительныеКодыОКВЭД2);
	
	ДанныеОрганизации.Вставить("УчетнаяПолитика",           ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураУчетнойПолитики));
	
	ПараметрыФормированияДокументов.Вставить("ДанныеОрганизации", ДанныеОрганизации);
	
	ПараметрыФормированияДокументов.Вставить("ДанныеРуководителя", ДанныеРуководителя());
	
	ПараметрыФормированияДокументов.Вставить("ДанныеОДолжностиРуководителя", ДанныеОДолжностиРуководителя());
	
	ДанныеУставногоКапитала = Новый Структура();
	ДанныеУставногоКапитала.Вставить("Ссылка",            ФормированиеУставногоКапитала.Ссылка);
	ДанныеУставногоКапитала.Вставить("УставныйКапитал",   ФормированиеУставногоКапитала.УставныйКапитал);
	ДанныеУставногоКапитала.Вставить("Учредители",        Учредители.Выгрузить());
	ДанныеУставногоКапитала.Вставить("СпособРегистрации", ФормированиеУставногоКапитала.СпособРегистрации);
	ДанныеУставногоКапитала.Вставить("ЕдинственныйУчредительРуководитель", ЕдинственныйУчредительРуководитель);
	
	ПараметрыФормированияДокументов.Вставить("ДанныеУставногоКапитала", ДанныеУставногоКапитала);
	ПараметрыФормированияДокументов.Вставить("СпособРегистрации", СпособРегистрации);
	
	Возврат ПараметрыФормированияДокументов;
	
КонецФункции

&НаСервере
Функция ДанныеРуководителя()
	
	ДанныеРуководителя = Обработки.РегистрацияОрганизации.НовыеДанныеФизическогоЛица();
	ДанныеРуководителя.Ссылка                     = Руководитель.Ссылка;
	ДанныеРуководителя.Фамилия                    = Руководитель.Фамилия;
	ДанныеРуководителя.Имя                        =  Руководитель.Имя;
	ДанныеРуководителя.Отчество                   = Руководитель.Отчество;
	ДанныеРуководителя.Пол                        = Руководитель.Пол;
	ДанныеРуководителя.ИНН                        = Руководитель.ИНН;
	ДанныеРуководителя.ДатаРождения               = Руководитель.ДатаРождения;
	ДанныеРуководителя.МестоРожденияПредставление = Руководитель.МестоРожденияПредставление;
	
	СерияИНомерПаспорта = ОрганизацииФормы.СерияНомерПаспортаРаздельно(ПаспортСерияНомер);
	ДанныеРуководителя.ПаспортныеДанные.Серия            = СерияИНомерПаспорта.Серия;
	ДанныеРуководителя.ПаспортныеДанные.Номер            = СерияИНомерПаспорта.Номер;
	ДанныеРуководителя.ПаспортныеДанные.КемВыдан         = ПаспортныеДанныеРуководителя.КемВыдан;
	ДанныеРуководителя.ПаспортныеДанные.ДатаВыдачи       = ПаспортныеДанныеРуководителя.ДатаВыдачи;
	ДанныеРуководителя.ПаспортныеДанные.КодПодразделения = ПаспортныеДанныеРуководителя.КодПодразделения;
	
	ДанныеРуководителя.АдресПропискиЗначенияПолей  =
			ЗначенияПолейКонтактнойИнформации(Элементы.КонтактнаяИнформацияПолеАдресПоПропискеФизическиеЛица);
	ДанныеРуководителя.ТелефонРабочийЗначенияПолей =
			ЗначенияПолейКонтактнойИнформации(Элементы.КонтактнаяИнформацияПолеТелефонРабочийФизическиеЛица);
	ДанныеРуководителя.EMailЗначенияПолей          =
			ЗначенияПолейКонтактнойИнформации(Элементы.КонтактнаяИнформацияПолеEMailФизическиеЛица);
	
	Возврат ДанныеРуководителя;
	
КонецФункции

&НаСервере
Функция ДанныеОДолжностиРуководителя()
	
	ДанныеОДолжностиРуководителя = Обработки.РегистрацияОрганизации.НовыеДанныеДолжности();
	ДанныеОДолжностиРуководителя.ДатаНазначения = ОтветственныеЛица.Период;
	ДанныеОДолжностиРуководителя.Должность      = ОтветственныеЛица.Должность;
	ДанныеОДолжностиРуководителя.СрокПолномочий = ОтветственныеЛица.СрокПолномочий;
	
	Возврат ДанныеОДолжностиРуководителя;
	
КонецФункции

&НаСервере
Функция ЗначенияПолейКонтактнойИнформации(Элемент)
	
	Отбор = Новый Структура("ИмяРеквизита");
	Отбор.ИмяРеквизита = Элемент.Имя;
	ДанныеИсточника = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	Если ДанныеИсточника.Количество() > 0 Тогда
		Возврат ДанныеИсточника[0].ЗначенияПолей;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаСервере
Процедура ЗаписатьРуководителя()
	
	РуководительСсылка = Обработки.РегистрацияОрганизации.ЗаписатьФизическоеЛицо(ДанныеРуководителя());
	ПрочитатьДанныеРуководителя();
	
КонецПроцедуры

&НаСервере
Функция ИменаРеквизитовФизическогоЛица()

	Имена = Новый Структура;
	Имена.Вставить("ФизическоеЛицо",         "Руководитель");
	Имена.Вставить("ПаспортныеДанные",       "ПаспортныеДанныеРуководителя");
	Имена.Вставить("СерияНомерПаспорта",     "ПаспортСерияНомер");
	Имена.Вставить("ГруппаКонтактныеДанные", "ГруппаКонтактныеДанныеРуководителя");
	Возврат Имена;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СообщениеОбОшибкеИНН(Знач ИНН)
	
	ТекстСообщения = "";
	Если НЕ ПустаяСтрока(ИНН) Тогда
		ЦифрыИНН = ОрганизацииФормыКлиентСервер.ТолькоЦифры(ИНН);
		РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ЦифрыИНН, Ложь, ТекстСообщения);
	КонецЕсли;
	Возврат ТекстСообщения;

КонецФункции

&НаСервереБезКонтекста
Функция ПодаетсяУведомлениеОПереходеНаУСН(Знач СтруктураУчетнойПолитики)
	
	Возврат Обработки.РегистрацияОрганизации.ПодаетсяУведомлениеОПереходеНаУСН(СтруктураУчетнойПолитики);
	
КонецФункции

&НаСервере
Процедура ИзменитьЭтап(НомерЭтапа)
	
	Если НомерЭтапа = 1 Тогда
		
		УстановитьВидимостьГруппыУчредителей(ЭтотОбъект);
		
		УстановитьВидимостьОшибкиИНН(ЭтотОбъект);
		
		Элементы.СформироватьДокументы.КнопкаПоУмолчанию = Истина;
		
		УстановитьВидимостьСтраницы("СтраницаВводДанных");
		
	ИначеЕсли НомерЭтапа = 2 Тогда
		
		УстановитьВидимостьСтраницы("СтраницаОжидание");
		
	ИначеЕсли НомерЭтапа = 3 Тогда
		
		ОпределитьРегистрирующийОрган();
		
		КвитанцияОбОплатеГоспошлины = 
			Обработки.РегистрацияОрганизации.ПрисоединенныйФайлКвитанцииНаОплатуГоспошлиныОрганизации(Организация.Ссылка);
			
		КвитанцияОбОплатеГоспошлиныПолучена = КвитанцияОбОплатеГоспошлины <> Неопределено
							И НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КвитанцияОбОплатеГоспошлины, "ПометкаУдаления");
		
		Элементы.ГруппаИнструкцииПоОплатеГоспошлиныБезКвитанции.Видимость = Не КвитанцияОбОплатеГоспошлиныПолучена;
		Элементы.ГруппаИнструкцииПоОплатеГоспошлиныСКвитанцией.Видимость  = КвитанцияОбОплатеГоспошлиныПолучена;
		
		КоличествоУчредителей = ФормированиеУставногоКапитала.Учредители.Количество();
		
		ОдинУчредительЮридическоеЛицо = КоличествоУчредителей = 1
			И ФормированиеУставногоКапитала.Учредители[0].ТипУчредителя = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		ОдинУчредительФизическоеЛицо = КоличествоУчредителей = 1 И НЕ ОдинУчредительЮридическоеЛицо;
		НесколькоУчредителей = НЕ (ОдинУчредительЮридическоеЛицо ИЛИ ОдинУчредительФизическоеЛицо);
		Элементы.ГруппаПротоколСобранияУчредителейЕдинственногоУчредителяООО.Видимость = ОдинУчредительЮридическоеЛицо;
		Элементы.ГруппаРешениеЕдинственногоУчредителяООО.Видимость = ОдинУчредительФизическоеЛицо;
		Элементы.ГруппаПротоколСобранияУчредителейООО.Видимость    = НесколькоУчредителей;
		Элементы.ГруппаДоговорОбУчрежденииООО.Видимость            = НесколькоУчредителей;
		Если ОдинУчредительЮридическоеЛицо Тогда
			Учредитель = ФормированиеУставногоКапитала.Учредители[0].Учредитель;
			НаименованиеЕдинственногоУчредителя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Учредитель, "Наименование");
			Элементы.ПротоколСобранияУчредителейЕдинственногоУчредителяООО.Заголовок =
				СтрШаблон(НСтр("ru='Образец протокола собрания учредителей %1'"), НаименованиеЕдинственногоУчредителя);
		КонецЕсли;
		
		Элементы.ПредупреждениеДляНесколькихУчредителей.Видимость = НЕ ЕдинственныйУчредительРуководитель;
		
		КоличествоЭкземпляров = КоличествоУчредителей + 1;
		КоличествоЭкземпляровПрописью = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
			КоличествоЭкземпляров, НСтр("ru = 'экземпляр, экземпляра, экземпляров'"));
		Элементы.ДоговорОбУчрежденииОООПримечание.Заголовок = НСтр("ru = 'распечатайте'") + КоличествоЭкземпляровПрописью;
		
		ОпределенРегистрирующийОрган = ЗначениеЗаполнено(РегистрирующийОрганНаименование);
		Элементы.РегистрирующийОрганНаименование.Видимость = ОпределенРегистрирующийОрган;
		Элементы.ГруппаРегистрирующийОрганАдрес.Видимость  = ОпределенРегистрирующийОрган;
		Элементы.РегистрирующийОрганТелефон.Видимость      = ОпределенРегистрирующийОрган;
		Элементы.РегистрирующийОрганИнформация.Видимость   = ЗначениеЗаполнено(РегистрирующийОрганИнформация) 
			И ОпределенРегистрирующийОрган;
		Элементы.АдресИРеквизитыВашейИнспекции.Видимость   = Не ОпределенРегистрирующийОрган;
		
		Элементы.ГруппаУведомлениеОПереходеНаУСНООО.Видимость = ПодаетсяУведомлениеОПереходеНаУСН(СтруктураУчетнойПолитики);
		
		Элементы.УслугаКонсультации.Видимость = ИспользуетсяСервисРегистрации;
		
		УстановитьВидимостьБаннераНачалоРаботы();
		
		УстановитьВидимостьСтраницы("СтраницаРегистрация");
		ТекущийЭлемент = Элементы.ХочуКонсультацию;
		
	КонецЕсли;
	
	ТекущийЭтап = НомерЭтапа;
	РазместитьНавигациюНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСтраницы(ИмяСтраницы)
	
	Страницы = Новый Массив;
	Страницы.Добавить("СтраницаВводДанных");
	Страницы.Добавить("СтраницаРегистрация");
	
	Для Каждого Страница ИЗ Страницы Цикл
		Элементы[Страница].Видимость = Страница = ИмяСтраницы;
	КонецЦикла;
	
	Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы[ИмяСтраницы];
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьГруппыУчредителей(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.ГруппаЕдинственныйУчредительРуководитель.Видимость = Форма.ЕдинственныйУчредительРуководитель;
	Элементы.ГруппаНесколькоУчредителей.Видимость               = НЕ Форма.ЕдинственныйУчредительРуководитель;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьРегистрирующийОрган()
	
	Если НЕ ЗначениеЗаполнено(КодНалоговогоОргана) Тогда
		ЮридическийАдресЗначенияПолей = 
			ЗначенияПолейКонтактнойИнформации(Элементы.КонтактнаяИнформацияПолеЮрАдресОрганизации);
		
		СведенияОНалоговомОргане = СведенияОНалоговомОрганеПоАдресу(ЮридическийАдресЗначенияПолей);
		Если СведенияОНалоговомОргане <> Неопределено Тогда
			
			Если ЗначениеЗаполнено(СведенияОНалоговомОргане.КодНалоговогоОргана) Тогда
				КодНалоговогоОргана = СведенияОНалоговомОргане.КодНалоговогоОргана;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	РеквизитыРегистрирующегоОргана = Обработки.РегистрацияОрганизации.РеквизитыРегистрирующегоОргана(
		КодНалоговогоОргана, Истина);
	Если РеквизитыРегистрирующегоОргана <> Неопределено Тогда
		РегистрирующийОрганНаименование = РеквизитыРегистрирующегоОргана.Наименование;
		РегистрирующийОрганТелефон      = РеквизитыРегистрирующегоОргана.Телефон;
		РегистрирующийОрганАдрес        = РеквизитыРегистрирующегоОргана.Адрес;
		РегистрирующийОрганИнформация   = РеквизитыРегистрирующегоОргана.Информация;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявлениеОРегистрацииООО(ОрганизацияСсылка)
	
	ЗаявлениеОРегистрации = НайтиЗаявлениеОРегистрации(ОрганизацияСсылка);
	
	Если ЗначениеЗаполнено(ЗаявлениеОРегистрации.Ссылка) Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", ЗаявлениеОРегистрации.Ссылка);
		ПараметрыФормы.Вставить("Организация", ОрганизацияСсылка);
		ФормаОтчета = ПолучитьФорму(ЗаявлениеОРегистрации.ИмяФормы, ПараметрыФормы, ЭтотОбъект, ОрганизацияСсылка);
		РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФормуУведомленияОСпецрежимах(ФормаОтчета);
	Иначе
		ТекстСообщения = НСтр("ru = 'Заявление о регистрации не создано.'");
		ПоказатьПредупреждение(, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиЗаявлениеОРегистрации(Знач ОрганизацияСсылка)
	
	Возврат Обработки.РегистрацияОрганизации.НайтиЗаявлениеОРегистрации(ОрганизацияСсылка, "Р11001");
	
КонецФункции

&НаСервереБезКонтекста
Функция УставООО(ОрганизацияСсылка)
	
	Возврат Обработки.РегистрацияОрганизации.УставООО(ОрганизацияСсылка);
	
КонецФункции

&НаСервереБезКонтекста
Функция РешениеЕдинственногоУчредителяООО(ОрганизацияСсылка)
	
	Возврат Обработки.РегистрацияОрганизации.РешениеЕдинственногоУчредителяООО(ОрганизацияСсылка);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПротоколСобранияУчредителейООО(ОрганизацияСсылка)
	
	Возврат Обработки.РегистрацияОрганизации.ПротоколСобранияУчредителейООО(ОрганизацияСсылка);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПротоколСобранияУчредителейЕдинственногоУчредителяООО(ОрганизацияСсылка)
	
	Возврат Обработки.РегистрацияОрганизации.ПротоколСобранияУчредителейЕдинственногоУчредителяООО(ОрганизацияСсылка);
	
КонецФункции

&НаСервереБезКонтекста
Функция ДоговорОбУчрежденииООО(ОрганизацияСсылка)
	
	Возврат Обработки.РегистрацияОрганизации.ДоговорОбУчрежденииООО(ОрганизацияСсылка);
	
КонецФункции

&НаКлиенте
Процедура УведомлениеОПереходеНаУСН()
	
	УведомлениеОСпецРежимеНалогообложения = НайтиУведомлениеОСпецРежимеНалогообложения(Организация.Ссылка);
	Если УведомлениеОСпецРежимеНалогообложения = Неопределено Тогда
		// Не требуется
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УведомлениеОСпецРежимеНалогообложения.Ссылка) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", УведомлениеОСпецРежимеНалогообложения.Ссылка);
		ПараметрыФормы.Вставить("Организация", Организация.Ссылка);
		
		ФормаОтчета = ПолучитьФорму(УведомлениеОСпецРежимеНалогообложения.ИмяФормы, ПараметрыФормы, ЭтотОбъект, Организация.Ссылка);
		РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФормуУведомленияОСпецрежимах(ФормаОтчета);
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Уведомление о переходе на УСН не создано'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Уведомление");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КвитанцияНаОплатуГоспошлины(Знач ОрганизацияСсылка)
	
	Возврат Обработки.РегистрацияОрганизации.КвитанцияНаОплатуГоспошлины(ОрганизацияСсылка);
	
КонецФункции

&НаСервере
Функция ИнструкцияРегистрацияООО(ОрганизацияСсылка)
	
	ВыборСпецрежимаНалогообложения = Новый Структура;
	ВыборСпецрежимаНалогообложения.Вставить("УСН", ПодаетсяУведомлениеОПереходеНаУСН(СтруктураУчетнойПолитики));
	
	ДанныеРегистрирующегоОргана = Новый Структура;
	ДанныеРегистрирующегоОргана.Вставить("НаименованиеФНС", РегистрирующийОрганНаименование);
	ДанныеРегистрирующегоОргана.Вставить("АдресФНС",        РегистрирующийОрганАдрес);
	ДанныеРегистрирующегоОргана.Вставить("ТелефонФНС",      РегистрирующийОрганТелефон);
	
	Если ЕдинственныйУчредительРуководитель Тогда
		КоличествоУчредителей = 1;
		ОдинУчредительЮридическоеЛицо = Ложь;
	Иначе
		КоличествоУчредителей = ФормированиеУставногоКапитала.Учредители.Количество();
		Если КоличествоУчредителей = 1 Тогда
			ТипУчредителя = ФормированиеУставногоКапитала.Учредители[0].ТипУчредителя;
			ОдинУчредительЮридическоеЛицо = ТипУчредителя = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		Иначе
			ОдинУчредительЮридическоеЛицо = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Обработки.РегистрацияОрганизации.ИнструкцияРегистрацииООО(
		КоличествоУчредителей,
		ОдинУчредительЮридическоеЛицо,
		ФормированиеУставногоКапитала.СпособРегистрации, 
		ВыборСпецрежимаНалогообложения, 
		ДанныеРегистрирующегоОргана,
		УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуНачалаРаботы()
	
	ОткрытьФорму("Обработка.НачалоРаботы.Форма.НачалоРаботыПредпринимательВСервисе");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьБаннераНачалоРаботы()
	
	ВидимостьБаннераНачалоРаботы = ПолучитьФункциональнуюОпцию("ПредпринимательВСервисе") 
		И Константы.НачалоРаботы.Получить();
	
	Элементы.НачалоРаботы.Видимость = ВидимостьБаннераНачалоРаботы;
	Элементы.НачатьРаботу.КнопкаПоУмолчанию = ВидимостьБаннераНачалоРаботы;
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьНачалоРаботы(ПредупреждениеОбОшибке)
	
	НачатьТранзакцию();
	
	Попытка
		
		Константы.НачалоРаботы.Установить(Ложь);
		Константы.РегистрацияНеЗавершена.Установить(Истина);
		
		ДокументОбъект = ФормированиеУставногоКапитала.Ссылка.ПолучитьОбъект();
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		ЗначениеВРеквизитФормы(ДокументОбъект, "ФормированиеУставногоКапитала");
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		Текст = НСтр("ru = 'Ошибка при начале работы:'");
		СведенияОбОшибке = ИнформацияОбОшибке();
		ПредупреждениеОбОшибке.Вставить("Текст",    Текст + Символы.ПС + КраткоеПредставлениеОшибки(СведенияОбОшибке));
		ПредупреждениеОбОшибке.Вставить("Подробно", ПодробноеПредставлениеОшибки(СведенияОбОшибке));
		
		Возврат Ложь;
		
	КонецПопытки;
	
	УстановитьВидимостьБаннераНачалоРаботы();
	
	ОбщегоНазначенияБПВызовСервера.УстановитьСтандартныйИнтерфейс();
	
	Возврат Истина;
		
КонецФункции

&НаКлиенте
Процедура ОповеститьОЗавершенииПомощникаНачалаРаботы()
	Оповестить("ЗавершенаРаботаПомощникаНачалаРаботы", ЭтотОбъект.ИмяФормы, ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура РазместитьНавигациюНаСервере()
	
	Если ТекущийЭтап = 1 Тогда
		СтруктураПараметров = Новый Структура("НавигацияПараметрФормы", "Заявление");
		Обработки.РегистрацияОрганизации.РазместитьНавигацию(ЭтотОбъект, СтруктураПараметров);
		Элементы.ГруппаНавигация.Доступность = Истина;
	Иначе
		СтруктураПараметров = Новый Структура("НавигацияПараметрФормы", "Документы");
		Обработки.РегистрацияОрганизации.РазместитьНавигацию(ЭтотОбъект, СтруктураПараметров);
		Элементы.ГруппаНавигация.Доступность = (ТекущийЭтап <> 2);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УзнатьИНННажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОчиститьСообщения();
	
	Отказ = Ложь;
	ПроверитьЗаполнениеПаспортныхДанныхРуководителя(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ДанныеФизическогоЛица", ДанныеРуководителя());
	
	ОткрытьФорму("Обработка.РегистрацияОрганизации.Форма.УзнатьИНН", ПараметрыФормы, Элементы.ИННРуководителя);
	
КонецПроцедуры

#КонецОбласти
