#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Настройки

Функция ПолучитьНастройкиПрограммыКлиентаБанка(Организация, БанковскийСчет) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		// Определим организацию
		Если ЗначениеЗаполнено(БанковскийСчет) Тогда
			// Из банковского счета
			Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, "Владелец");
		ИначеЕсли НЕ Справочники.Организации.ИспользуетсяНесколькоОрганизаций() Тогда
			// По умолчанию
			Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
		КонецЕсли;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(БанковскийСчет) И ЗначениеЗаполнено(Организация)
		И НЕ Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Организация) Тогда
		// Определим банковский счет, если он один
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(БанковскийСчет, Организация,
			ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	КонецЕсли;
	
	Настройки = Новый Структура;
	Настройки.Вставить("НастройкиЗагружены",                         Ложь);
	Настройки.Вставить("СоглашениеПрямогоОбменаСБанками",            Перечисления.ПрограммыБанка.ПустаяСсылка());
	Настройки.Вставить("БанкДляПрямогоОбмена",                       Справочники.Банки.ПустаяСсылка());
	Настройки.Вставить("Кодировка",                                  "Windows");
	Настройки.Вставить("Программа",                                  "");
	Настройки.Вставить("ФайлВыгрузки",                               "");
	Настройки.Вставить("ФайлЗагрузки",                               "");
	Настройки.Вставить("КонтролироватьНекорректныеСимволыВНомере",   Истина);
	Настройки.Вставить("Платежное_Поручение",                        Истина);
	Настройки.Вставить("Платежное_Требование",                       Ложь);
	Настройки.Вставить("СоздаватьНенайденныеЭлементы",               Истина);
	Настройки.Вставить("ПередЗагрузкойПоказыватьФормуОбменаСБанком", Ложь);
	Настройки.Вставить("КонтролироватьБезопасностьОбменаСБанком",    Истина);
	Настройки.Вставить("БанковскийСчет",                             БанковскийСчет);
	Настройки.Вставить("Организация",                                Организация);
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиОбменаСКлиентомБанка.Программа,
	|	НастройкиОбменаСКлиентомБанка.Кодировка,
	|	НастройкиОбменаСКлиентомБанка.ФайлЗагрузки,
	|	НастройкиОбменаСКлиентомБанка.ФайлВыгрузки,
	|	НастройкиОбменаСКлиентомБанка.КонтролироватьНекорректныеСимволыВНомере,
	|	НастройкиОбменаСКлиентомБанка.ВидыВыгружаемыхПлатДокументов,
	|	НастройкиОбменаСКлиентомБанка.ОтключитьАвтоматическоеСозданиеНенайденныхЭлементов,
	|	НастройкиОбменаСКлиентомБанка.ПередЗагрузкойПоказыватьФормуОбменаСБанком,
	|	НастройкиОбменаСКлиентомБанка.НеКонтролироватьБезопасностьОбменаСБанком
	|ИЗ
	|	РегистрСведений.НастройкиОбменаСКлиентомБанка КАК НастройкиОбменаСКлиентомБанка
	|ГДЕ
	|	НастройкиОбменаСКлиентомБанка.БанковскийСчет = &Счет
	|	И НастройкиОбменаСКлиентомБанка.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Счет",        БанковскийСчет);
	Запрос.УстановитьПараметр("Организация", Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Настройки.Вставить("НастройкиЗагружены",                         Истина);
		Настройки.Вставить("Кодировка",                                  Выборка.Кодировка);
		Настройки.Вставить("Программа",                                  Выборка.Программа);
		Настройки.Вставить("ФайлВыгрузки",                               Выборка.ФайлВыгрузки);
		Настройки.Вставить("ФайлЗагрузки",                               Выборка.ФайлЗагрузки);
		Настройки.Вставить("КонтролироватьНекорректныеСимволыВНомере",   Выборка.КонтролироватьНекорректныеСимволыВНомере);
		Настройки.Вставить("СоздаватьНенайденныеЭлементы",               НЕ Выборка.ОтключитьАвтоматическоеСозданиеНенайденныхЭлементов);
		Настройки.Вставить("ПередЗагрузкойПоказыватьФормуОбменаСБанком", Выборка.ПередЗагрузкойПоказыватьФормуОбменаСБанком);
		Настройки.Вставить("КонтролироватьБезопасностьОбменаСБанком",    НЕ Выборка.НеКонтролироватьБезопасностьОбменаСБанком);
		
		ВидыВыгружаемыхПлатДокументов = Выборка.ВидыВыгружаемыхПлатДокументов.Получить();
		Если ВидыВыгружаемыхПлатДокументов <> Неопределено Тогда
			Для каждого Вид Из ВидыВыгружаемыхПлатДокументов Цикл
				Настройки.Вставить(СтрЗаменить(Вид.Документ, " ", "_"), Вид.Пометка);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОбменСБанками")
		И ЗначениеЗаполнено(БанковскийСчет)
		И Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, "Валютный") Тогда
		
		Банк = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, "Банк");
		НастройкаДиректБанк = ОбменСБанками.НастройкаОбмена(Организация, Банк);
		
		Если НастройкаДиректБанк <> Неопределено Тогда
			Настройки.Вставить("СоглашениеПрямогоОбменаСБанками", НастройкаДиректБанк);
			Настройки.Вставить("БанкДляПрямогоОбмена",            Банк);
			Настройки.Вставить("Платежное_Требование",            Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

Функция НастройкиЗагрузки() Экспорт
	
	Настройки = ЗагрузкаВыпискиПоБанковскомуСчету.НовыйНастройкиОбменСБанком();
	
	СохраненныеНастройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ОбменСБанком", "НастройкиЗагрузки", Неопределено);
	Если СохраненныеНастройки = Неопределено Тогда
		СконвертироватьНастройкиЗагрузки(Настройки);
	Иначе
		ЗагрузкаВыпискиПоБанковскомуСчету.ЗаполнитьНастройкиОбменСБанком(Настройки, СохраненныеНастройки);
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

Процедура ЗаписатьНастройкиЗагрузки(Настройки) Экспорт
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ОбменСБанком", "НастройкиЗагрузки", Настройки);
	
КонецПроцедуры

// Читает настройки, сохраненные предыдущими версиями программы, и сохраняет их в новом формате.
// Раньше настройки хранились в текущих данных формы и если их не сконвертировать,
// то они будут утрачены при закрытии этой формы.
Процедура СконвертироватьНастройкиЗагрузки(Настройки) Экспорт
	
	СохраненныеНастройки = ХранилищеСистемныхНастроек.Загрузить("Обработка.КлиентБанк.Форма.Форма/ТекущиеДанные");
	Если ТипЗнч(СохраненныеНастройки) <> Тип("Соответствие") Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьДанные = Ложь;
	
	// 1. Родитель в новых элементах справочника
	ГруппаДляНовыхКонтрагентов = СохраненныеНастройки["ГруппаДляНовыхКонтрагентов"];
	Если ЗначениеЗаполнено(ГруппаДляНовыхКонтрагентов) Тогда
		
		НастройкиЗаполненияНовогоКонтрагента = Новый Структура;
		НастройкиЗаполненияНовогоКонтрагента.Вставить("Родитель", ГруппаДляНовыхКонтрагентов);
		Настройки.ЗаполнениеНовыхЭлементов.Вставить(Тип("СправочникСсылка.Контрагенты"), НастройкиЗаполненияНовогоКонтрагента);
		
		ЕстьДанные = Истина;
		
	КонецЕсли;
	
	// 2. Настройки для разных видов операций
	НастройкаЗаполнения = СохраненныеНастройки["НастройкаЗаполнения"];
	Если ТипЗнч(НастройкаЗаполнения) = Тип("ТаблицаЗначений") Тогда
		
		ОписаниеОпераций = Новый Структура;
		ОписаниеОпераций.Вставить("Поступило", Новый Структура);
		ОписаниеОпераций.Вставить("Списано",   Новый Структура);
		
		ОписаниеОпераций.Поступило.Вставить("Тип",       Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет"));
		ОписаниеОпераций.Поступило.Вставить("Псевдоним", "Поступление на расчетный счет");
		
		ОписаниеОпераций.Списано.Вставить("Тип",         Тип("ДокументСсылка.СписаниеСРасчетногоСчета"));
		ОписаниеОпераций.Списано.Вставить("Псевдоним",   "Списание с расчетного счета");
		
		Для Каждого ОписаниеОперации Из ОписаниеОпераций Цикл
			
			НастройкаОперации = НастройкаЗаполнения.Найти(ОписаниеОперации.Значение.Псевдоним, "Документ");
			Если НастройкаОперации <> Неопределено Тогда
				Настройки.СозданиеДокументов[ОписаниеОперации.Значение.Тип].ПроводитьДокумент = НастройкаОперации.Проводить;
				ЕстьДанные = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЕстьДанные Тогда
		ЗаписатьНастройкиЗагрузки(Настройки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаВБанк

Функция Выгрузить(ТаблицаДокументов, ПлатежныеДокументы, Кодировка, Программа, НачПериода, КонПериода, БанковскийСчет, ФайлВыгрузки,
		ВерсияФормата = "1.02",
		Организация, КлючУникальности) Экспорт
	
	ПотокВыгрузки = Новый ТекстовыйДокумент();
	
	ДатаСегодня = ТекущаяДатаСеанса();
	
	// Формируем заголовок
	ПотокВыгрузки.ДобавитьСтроку("1CClientBankExchange");
	ПотокВыгрузки.ДобавитьСтроку("ВерсияФормата=" + ВерсияФормата); // Поддерживаются версии "1.01" и "1.02"
	
	ПотокВыгрузки.ДобавитьСтроку("Кодировка="     + Кодировка);
	ПотокВыгрузки.ДобавитьСтроку("Отправитель="   + Метаданные.Синоним);
	ПотокВыгрузки.ДобавитьСтроку("Получатель="    + Программа);
	ПотокВыгрузки.ДобавитьСтроку("ДатаСоздания="  + Формат(ДатаСегодня, "ДЛФ=Д"));
	ПотокВыгрузки.ДобавитьСтроку("ВремяСоздания=" + Формат(ДатаСегодня, "ДЛФ=В"));
	ПотокВыгрузки.ДобавитьСтроку("ДатаНачала="    + Формат(НачПериода, "ДЛФ=Д"));
	ПотокВыгрузки.ДобавитьСтроку("ДатаКонца="     + Формат(КонПериода, "ДЛФ=Д"));
	
	ПотокВыгрузки.ДобавитьСтроку("РасчСчет="      + БанковскийСчет.НомерСчета);
	
	Для каждого Строка Из ТаблицаДокументов Цикл
		Если Строка.Пометка = Истина Тогда
			ИмяДокумента = СокрЛП(Строка.Название);
			ПотокВыгрузки.ДобавитьСтроку("Документ=" + ИмяДокумента);
		КонецЕсли;
	КонецЦикла;
	
	// выводим отмеченные секции документов
	Для каждого СтрокаСекции Из ПлатежныеДокументы Цикл
		Если НЕ СтрокаСекции.Выгружать Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнятьПоказательТипа = СтрокаСекции.Дата < ПлатежиВБюджетКлиентСервер.НачалоДействияУказания3844У();
		Буфер = ПолучитьСекциюДокумент(СтрокаСекции, Организация, ВерсияФормата, ЗаполнятьПоказательТипа);
		КоличествоСрокСекции = СтрЧислоСтрок(Буфер);
		Для Сч = 1 По КоличествоСрокСекции Цикл
			ПотокВыгрузки.ДобавитьСтроку(СтрПолучитьСтроку(Буфер, Сч));
		КонецЦикла;
		
		СтрокаСекции.Готовность = -2;
	КонецЦикла;
	
	ПотокВыгрузки.ДобавитьСтроку("КонецФайла");
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
	
	// Кодировку задаем текстом, иначе бывают проблемы на сервере в Linux и в связке англоязычная Windows + англоязычный SQL
	Если Кодировка = "DOS" Тогда
		Кодир = "cp866";        // КодировкаТекста.OEM;
	Иначе
		Кодир = "windows-1251"; // КодировкаТекста.ANSI;
	КонецЕсли;
	
	ПотокВыгрузки.Записать(ИмяВременногоФайла, Кодир);
	
	// Отметим те документы которые успешно загрузились
	Для каждого СтрокаСекции Из ПлатежныеДокументы Цикл
		СтрокаСекции.Готовность = ?(СтрокаСекции.Готовность = -2, -1, СтрокаСекции.Готовность);
	КонецЦикла;
	
	Адрес = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла), КлючУникальности);
	УдалитьФайлы(ИмяВременногоФайла); // Удалим временный файл, после его обработки.
	
	Возврат Адрес;
	
КонецФункции

// Процедура проверяет заполнение таблицы с документами
//
Процедура ПроверитьЗаполнениеТаблицыДокументов(Объект, Документ, ЕстьСтрокиЭкспортаСОшибками) Экспорт
	
	Для НомСтр = 0 По Документ.Количество() - 1 Цикл
		Если Документ[НомСтр].Готовность > 0 Тогда
			ЕстьСтрокиЭкспортаСОшибками = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьСтрокиЭкспортаСОшибками Тогда
		ТекстСообщения = НСтр("ru = 'Некоторые платежные поручения заполнены некорректно и не могут быть выгружены'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.ПлатежныеДокументы");
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеТаблицыДокументов

//Процедура выводит на печать отчет о выгруженных документах
//
Процедура ПечатьОтчетаОВыгруженныхПлатежныхДокументах(ПолеОтчета, Источник, Организация, БанковскийСчет, НачПериода, КонПериода) Экспорт
	
	МакетОтчета = ПолучитьМакет("ОтчетОВыгруженныхПлатежныхДокументах");
	
	Шапка   = МакетОтчета.ПолучитьОбласть("Шапка");
	Строка  = МакетОтчета.ПолучитьОбласть("Строка");
	Подвал  = МакетОтчета.ПолучитьОбласть("Подвал");
	НазвОрг = МакетОтчета.ПолучитьОбласть("НазваниеОрганизации");
	
	НазвОрг.Параметры.НазваниеОрганизации = Организация.Наименование;
	ПолеОтчета.Вывести(НазвОрг);
	
	Шапка.Параметры.ИмяОтчета           = "Отчет о выгруженных платежных документах";
	Шапка.Параметры.ИмяСуммыСписания    = "На списание";
	Шапка.Параметры.ИмяСуммыПоступления = "На поступление";
	
	Если НачПериода = КонПериода Тогда
		Шапка.Параметры.ОписаниеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'по счету  %1 за %2'"), БанковскийСчет.НомерСчета, Формат(НачПериода, "ДЛФ=D"));
	Иначе
		Шапка.Параметры.ОписаниеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'по счету  %1 с %2 по %3'"), БанковскийСчет.НомерСчета, Формат(НачПериода, "ДЛФ=D"), Формат(КонПериода, "ДЛФ=D"));
	КонецЕсли;
	
	ПолеОтчета.Вывести(Шапка);
	
	Индекс      = 0;
	ИтогоСуммаП = 0;
	ИтогоСуммаР = 0;
	
	Для каждого СтрокаИсточника Из Источник Цикл
		
		Если СтрокаИсточника.Готовность <> -1 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаИсточника.ВидДокумента = "Платежное поручение" Тогда
			Строка.Параметры.Плательщик     = СтрокаИсточника.Организация;
			Строка.Параметры.ПлательщикСчет = СтрокаИсточника.ОрганизацияНомерСчета;
			Строка.Параметры.Получатель     = СтрокаИсточника.Контрагент;
			Строка.Параметры.ПолучательСчет = СтрокаИсточника.КонтрагентНомерСчета;
			Строка.Параметры.СуммаСписание  = СтрокаИсточника.СуммаДокумента;
			Строка.Параметры.СуммаПоступление = "";
			ИтогоСуммаР = ИтогоСуммаР + СтрокаИсточника.СуммаДокумента;
		Иначе
			Строка.Параметры.Плательщик     = СтрокаИсточника.Контрагент;
			Строка.Параметры.ПлательщикСчет = СтрокаИсточника.КонтрагентНомерСчета;
			Строка.Параметры.Получатель     = СтрокаИсточника.Организация;
			Строка.Параметры.ПолучательСчет = СтрокаИсточника.ОрганизацияНомерСчета;
			Строка.Параметры.СуммаСписание  = "";
			Строка.Параметры.СуммаПоступление = СтрокаИсточника.СуммаДокумента;
			ИтогоСуммаП = ИтогоСуммаП + СтрокаИсточника.СуммаДокумента;
		КонецЕсли;
		
		Строка.Параметры.Документ = СтрокаИсточника.Документ;
		Индекс = Индекс + 1;
		Строка.Параметры.Индекс   = Индекс;
		
		ПолеОтчета.Вывести(Строка);
		
	КонецЦикла;
	
	Подвал.Параметры.ИтогоСуммаП = ИтогоСуммаП;
	Подвал.Параметры.ИтогоСуммаР = ИтогоСуммаР;
	
	ПолеОтчета.Вывести(Подвал);
	
	ПолеОтчета.ОтображатьГруппировки = Ложь;
	ПолеОтчета.ОтображатьЗаголовки   = Ложь;
	ПолеОтчета.ОтображатьСетку       = Ложь;
	ПолеОтчета.ТолькоПросмотр        = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаИзБанка

Процедура ФоноваяЗагрузкаБанковскойВыпискиИзЖурнала(СтруктураПараметров, АдресХранилища) Экспорт
	
	РезультатЗагрузкиИзЖурнала = Новый Структура;
	РезультатЗагрузкиИзЖурнала.Вставить("РезультатВыполнения", "");
	РезультатЗагрузкиИзЖурнала.Вставить("АдресХранилищаРаспознанныеДанныеИзБанка");
	РезультатЗагрузкиИзЖурнала.Вставить("ИмяФайла", СтруктураПараметров.ФайлЗагрузки);
	РезультатЗагрузкиИзЖурнала.Вставить("СообщенияПользователю", Новый Массив);
	РезультатЗагрузкиИзЖурнала.Вставить("СообщенияПользователюВФормеОбменСБанком", Новый Массив);
	Если СтруктураПараметров.Свойство("ДвоичныеДанные") Тогда
		ИмяФайла = ПолучитьИмяВременногоФайла();
		СтруктураПараметров.ДвоичныеДанные.Записать(ИмяФайла);
	Иначе
		ИмяФайла = СтруктураПараметров.ФайлЗагрузки;
	КонецЕсли;
	
	НастройкиЗагрузки = Обработки.КлиентБанк.НастройкиЗагрузки();
	НастройкиЗагрузки.Кодировка = СтруктураПараметров.Кодировка;
	
	РаспознанныеДанныеИзБанка = ЗагрузкаВыпискиПоБанковскомуСчету.РаспознанныеДанныеИзБанка(
		ИмяФайла,
		НастройкиЗагрузки,
		СтруктураПараметров.СведенияОВладельцеБанковскогоСчетаИзКонтекста);
	
	Если СтруктураПараметров.Свойство("ДвоичныеДанные") Тогда
		УдалитьФайлы(ИмяФайла); // Удалим временный файл, после его обработки.
	КонецЕсли;
	
	Если РаспознанныеДанныеИзБанка = Неопределено Тогда
		РезультатЗагрузкиИзЖурнала.РезультатВыполнения = "ЕстьОшибкиЧтенияФайла";
		ПоместитьВоВременноеХранилище(РезультатЗагрузкиИзЖурнала, АдресХранилища);
		Возврат;
	КонецЕсли;
	
	// Проверим ошибки чтения
	ПротоколЧтенияФайла = РаспознанныеДанныеИзБанка.ПротоколЧтенияФайла;
	ЕстьОшибкиЧтенияФайла = Ложь;
	Если ПротоколЧтенияФайла.Найти("ФайлСодержитНачальныйТег") = Неопределено Тогда
		ЕстьОшибкиЧтенияФайла = Истина;
		РезультатЗагрузкиИзЖурнала.СообщенияПользователю.Добавить(
			НСтр("ru='В файле не найден обязательный идентификатор 1CClientBankExchange. Возможно, файл сохранен с неверной кодировкой. Файл должен быть в ANSI (CP-1251)'")); // Если файл в UTF-8, то тег на латинице прочитан не будет
	КонецЕсли;
	Если ПротоколЧтенияФайла.Найти("ФайлСодержитКонечныйТег") = Неопределено Тогда
		ЕстьОшибкиЧтенияФайла = Истина;
		РезультатЗагрузкиИзЖурнала.СообщенияПользователю.Добавить(
			НСтр("ru='В файле не найден обязательный идентификатор конца файла. Возможно, неверно указана кодировка файла.'"));
	КонецЕсли;
	Если ЕстьОшибкиЧтенияФайла Тогда
		РезультатЗагрузкиИзЖурнала.РезультатВыполнения = "ЕстьОшибкиЧтенияФайла";
		РезультатЗагрузкиИзЖурнала.АдресХранилищаРаспознанныеДанныеИзБанка = ПоместитьВоВременноеХранилище(РаспознанныеДанныеИзБанка, СтруктураПараметров.АдресХранилищаРаспознанныеДанныеИзБанка);
		ПоместитьВоВременноеХранилище(РезультатЗагрузкиИзЖурнала, АдресХранилища);
		Возврат;
	КонецЕсли;
	
	ПолучитьДанныеВладельцаСчета(РезультатЗагрузкиИзЖурнала, РаспознанныеДанныеИзБанка.РаспознанныеВыписки);
	
	Если ЕстьОшибкиРаспознавания(РаспознанныеДанныеИзБанка.РаспознанныеВыписки) Тогда
		РезультатЗагрузкиИзЖурнала.РезультатВыполнения = "ЕстьОшибкиРаспознавания";
		РезультатЗагрузкиИзЖурнала.АдресХранилищаРаспознанныеДанныеИзБанка = ПоместитьВоВременноеХранилище(РаспознанныеДанныеИзБанка, СтруктураПараметров.АдресХранилищаРаспознанныеДанныеИзБанка);
		ПоместитьВоВременноеХранилище(РезультатЗагрузкиИзЖурнала, АдресХранилища);
		Возврат;
	КонецЕсли;
	
	// Проверим разрешил ли пользователь автоматическое создание
	
	Если НужноСоздатьНовыеОбъекты(РаспознанныеДанныеИзБанка.УчастникиОпераций) Тогда
		Если ПолучитьНастройкиПрограммыКлиентаБанка(РезультатЗагрузкиИзЖурнала.Организация, РезультатЗагрузкиИзЖурнала.БанковскийСчет).СоздаватьНенайденныеЭлементы Тогда
			// Создадим ненайденные элементы
			ОшибкиСоздания = ИдентификацияУчастниковБанковскихОпераций.СоздатьНовыеОбъекты(
				РаспознанныеДанныеИзБанка.УчастникиОпераций, 
				РаспознанныеДанныеИзБанка.Настройки);
			
			Если (ОшибкиСоздания.Количество() > 0) Тогда
				Для Каждого ОшибкаСозданияКонтрагента Из ОшибкиСоздания Цикл
					РезультатЗагрузкиИзЖурнала.СообщенияПользователюВФормеОбменСБанком.Добавить(ОшибкаСозданияКонтрагента.ТекстИсключения);
				КонецЦикла;
				РезультатЗагрузкиИзЖурнала.РезультатВыполнения = "ЕстьОшибкиСозданияКонтрагентов";
				РезультатЗагрузкиИзЖурнала.АдресХранилищаРаспознанныеДанныеИзБанка = ПоместитьВоВременноеХранилище(РаспознанныеДанныеИзБанка,  СтруктураПараметров.АдресХранилищаРаспознанныеДанныеИзБанка);
				ПоместитьВоВременноеХранилище(РезультатЗагрузкиИзЖурнала, АдресХранилища);
				Возврат;
			КонецЕсли;
		Иначе
			РезультатЗагрузкиИзЖурнала.РезультатВыполнения = "НеобходимоСоздатьКонтрагентов";
			РезультатЗагрузкиИзЖурнала.АдресХранилищаРаспознанныеДанныеИзБанка = ПоместитьВоВременноеХранилище(РаспознанныеДанныеИзБанка,  СтруктураПараметров.АдресХранилищаРаспознанныеДанныеИзБанка);
			ПоместитьВоВременноеХранилище(РезультатЗагрузкиИзЖурнала, АдресХранилища);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	// Создадим документы
	ТаблицаДокументыСозданныеПоВыписке = Новый ТаблицаЗначений;
	ТаблицаДокументыСозданныеПоВыписке.Колонки.Добавить("Выписка");
	ТаблицаДокументыСозданныеПоВыписке.Колонки.Добавить("Ссылка");
	ТаблицаДокументыСозданныеПоВыписке.Колонки.Добавить("Успешно",        Новый ОписаниеТипов("Булево"));
	ТаблицаДокументыСозданныеПоВыписке.Колонки.Добавить("СуммаПоступило", Новый ОписаниеТипов("Число"));
	ТаблицаДокументыСозданныеПоВыписке.Колонки.Добавить("СуммаСписано",   Новый ОписаниеТипов("Число"));
	ДопустимыеОрганизации = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Истина);
	
	РаспознанныеДанныеИзБанка.Вставить("СозданиеДокументов", Новый Соответствие);
	Для Каждого Выписка Из РаспознанныеДанныеИзБанка.Выписки Цикл
		
		РаспознаннаяВыписка = РаспознанныеДанныеИзБанка.РаспознанныеВыписки[Выписка.Ключ];
		
		Если РаспознаннаяВыписка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РаспознаннаяВыписка.ВладелецСчета.Организация)
			И ДопустимыеОрганизации.Найти(РаспознаннаяВыписка.ВладелецСчета.Организация) = Неопределено Тогда
			РезультатЗагрузкиИзЖурнала.СообщенияПользователю.Добавить(СтрШаблон(НСтр("ru='Недостаточно прав на создание документов по организации - %1'"),
				РаспознаннаяВыписка.ВладелецСчета.Организация));
			Продолжить;
		КонецЕсли;
		
		РезультатСозданияДокументов = ЗагрузкаВыпискиПоБанковскомуСчету.СоздатьДокументы(
			Выписка.Значение,
			РаспознаннаяВыписка,
			РаспознанныеДанныеИзБанка.Настройки);
			
		РаспознанныеДанныеИзБанка.СозданиеДокументов.Вставить(Выписка.Ключ, РезультатСозданияДокументов);
		ДобавитьВДокументыСозданныеПоВыписке(ТаблицаДокументыСозданныеПоВыписке, РезультатСозданияДокументов, Выписка);
		
	КонецЦикла;
	
	ЕстьОшибкиСозданияДокументов = (ТаблицаДокументыСозданныеПоВыписке.Найти(Ложь, "Успешно") <> Неопределено);
	Если ЕстьОшибкиСозданияДокументов Тогда
		РезультатЗагрузкиИзЖурнала.РезультатВыполнения = "ЕстьОшибкиСозданияДокументов";
		РезультатЗагрузкиИзЖурнала.АдресХранилищаРаспознанныеДанныеИзБанка = ПоместитьВоВременноеХранилище(РаспознанныеДанныеИзБанка,  СтруктураПараметров.АдресХранилищаРаспознанныеДанныеИзБанка);
		ПоместитьВоВременноеХранилище(РезультатЗагрузкиИзЖурнала, АдресХранилища);
		Возврат;
	КонецЕсли;
	
	РезультатЗагрузкиИзЖурнала.Вставить("РезультатСозданияДокументов", РезультатСозданияДокументов(ТаблицаДокументыСозданныеПоВыписке));
	РезультатЗагрузкиИзЖурнала.РезультатВыполнения = "УспешнаяЗагрузка";
	РезультатЗагрузкиИзЖурнала.АдресХранилищаРаспознанныеДанныеИзБанка = ПоместитьВоВременноеХранилище(РаспознанныеДанныеИзБанка,  СтруктураПараметров.АдресХранилищаРаспознанныеДанныеИзБанка);
	ПоместитьВоВременноеХранилище(РезультатЗагрузкиИзЖурнала, АдресХранилища);
	
КонецПроцедуры

Процедура ФоноваяРаспознатьДанныеИзБанка(СтруктураПараметров, АдресХранилища) Экспорт
	
	Если СтруктураПараметров.Свойство("ДвоичныеДанные") Тогда
		ИмяФайла = ПолучитьИмяВременногоФайла();
		СтруктураПараметров.ДвоичныеДанные.Записать(ИмяФайла);
	Иначе
		ИмяФайла = СтруктураПараметров.ИмяФайла;
	КонецЕсли;
	
	РаспознанныеДанныеИзБанка = ЗагрузкаВыпискиПоБанковскомуСчету.РаспознанныеДанныеИзБанка(
		ИмяФайла, 
		СтруктураПараметров.Настройки,
		СтруктураПараметров.СведенияОВладельцеБанковскогоСчетаИзКонтекста);
		
	ПоместитьВоВременноеХранилище(РаспознанныеДанныеИзБанка, АдресХранилища);
	
КонецПроцедуры

Процедура ФоноваяРаспознатьДанныеИзБанкаПовторно(СтруктураПараметров, АдресХранилища) Экспорт
	
	РаспознанныеДанныеИзБанка = СтруктураПараметров.РаспознанныеДанныеИзБанка;
	Если РаспознанныеДанныеИзБанка <> Неопределено Тогда
		РаспознанныеДанныеИзБанка.РаспознанныеВыписки = ЗагрузкаВыпискиПоБанковскомуСчету.РаспознатьВыписки(
			РаспознанныеДанныеИзБанка.Выписки,
			РаспознанныеДанныеИзБанка.УчастникиОпераций,
			РаспознанныеДанныеИзБанка.Настройки);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(РаспознанныеДанныеИзБанка, АдресХранилища);
	
КонецПроцедуры

Процедура ФоноваяСозданиеНовыхОбъектов(ПараметрыСозданияНовыхОбъектов, АдресХранилища) Экспорт
	
	РезультатСозданияНовыхОбъектов = Новый Структура;
	РаспознанныеДанныеИзБанка = ПараметрыСозданияНовыхОбъектов.РаспознанныеДанныеИзБанка;
	
	ОшибкиСоздания = ИдентификацияУчастниковБанковскихОпераций.СоздатьНовыеОбъекты(
		РаспознанныеДанныеИзБанка.УчастникиОпераций,
		РаспознанныеДанныеИзБанка.Настройки,
		ПараметрыСозданияНовыхОбъектов.ОтборСсылкиКСозданию);
	
	РезультатСозданияНовыхОбъектов.Вставить("МассивСообщений", Новый Массив);
	
	Для Каждого ОшибкаСозданияКонтрагента Из ОшибкиСоздания Цикл
		РезультатСозданияНовыхОбъектов.МассивСообщений.Добавить(ОшибкаСозданияКонтрагента.ТекстИсключения);
	КонецЦикла;
	
	АдресХранилищаРаспознанныеДанныеИзБанка = ПоместитьВоВременноеХранилище(РаспознанныеДанныеИзБанка, ПараметрыСозданияНовыхОбъектов.АдресХранилищаРаспознанныеДанныеИзБанка);
	РезультатСозданияНовыхОбъектов.Вставить("АдресХранилищаРаспознанныеДанныеИзБанка", АдресХранилищаРаспознанныеДанныеИзБанка);
	РезультатСозданияНовыхОбъектов.Вставить("СсылкиНаСозданныеОбъекты", СсылкиНаСозданныеОбъекты(ПараметрыСозданияНовыхОбъектов.ОтборСсылкиКСозданию, ОшибкиСоздания));
	
	ПоместитьВоВременноеХранилище(РезультатСозданияНовыхОбъектов, АдресХранилища);
	
КонецПроцедуры

Процедура ФоноваяЗагрузкаДокументовКИмпортуИзКлиентБанка(ПараметрыЗагрузкиДокументов, АдресХранилища) Экспорт
	
	РезультатЗагрузки         = Новый Структура;
	РаспознанныеДанныеИзБанка = ПараметрыЗагрузкиДокументов.РаспознанныеДанныеИзБанка;
	ДопустимыеОрганизации     = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Истина);
	МассивСообщений           = Новый Массив;
	
	// Создадим ненайденные элементы
	Если ПараметрыЗагрузкиДокументов.СоздаватьНенайденныеЭлементы Тогда
		
		ОшибкиСоздания = ИдентификацияУчастниковБанковскихОпераций.СоздатьНовыеОбъекты(
			РаспознанныеДанныеИзБанка.УчастникиОпераций,
			РаспознанныеДанныеИзБанка.Настройки,
			ПараметрыЗагрузкиДокументов.ОтборСсылкиКСозданию);
			
		Для Каждого ОшибкаСозданияКонтрагента Из ОшибкиСоздания Цикл
			МассивСообщений.Добавить(ОшибкаСозданияКонтрагента.ТекстИсключения);
		КонецЦикла;
		
		РезультатЗагрузки.Вставить("СсылкиНаСозданныеОбъекты", СсылкиНаСозданныеОбъекты(ПараметрыЗагрузкиДокументов.ОтборСсылкиКСозданию, ОшибкиСоздания));
		
	КонецЕсли;
	
	// Создадим документы
	ТаблицаДокументыСозданныеПоВыписке = Новый ТаблицаЗначений;
	ТаблицаДокументыСозданныеПоВыписке.Колонки.Добавить("Выписка");
	ТаблицаДокументыСозданныеПоВыписке.Колонки.Добавить("Ссылка");
	ТаблицаДокументыСозданныеПоВыписке.Колонки.Добавить("Успешно",        Новый ОписаниеТипов("Булево"));
	ТаблицаДокументыСозданныеПоВыписке.Колонки.Добавить("СуммаПоступило", Новый ОписаниеТипов("Число"));
	ТаблицаДокументыСозданныеПоВыписке.Колонки.Добавить("СуммаСписано",   Новый ОписаниеТипов("Число"));
	
	РаспознанныеДанныеИзБанка.Вставить("СозданиеДокументов", Новый Соответствие);
	
	// Создадим документы
	Для Каждого Выписка Из РаспознанныеДанныеИзБанка.Выписки Цикл
		
		РаспознаннаяВыписка = РаспознанныеДанныеИзБанка.РаспознанныеВыписки[Выписка.Ключ];
		
		Если ЗначениеЗаполнено(РаспознаннаяВыписка.ВладелецСчета.Организация) И ДопустимыеОрганизации.Найти(РаспознаннаяВыписка.ВладелецСчета.Организация) = Неопределено Тогда
			МассивСообщений.Добавить(СтрШаблон(НСтр("ru='Недостаточно прав на создание документов по организации - %1'"),
				РаспознаннаяВыписка.ВладелецСчета.Организация));
			Продолжить;
		КонецЕсли;
		
		// Предотвратим создание документов с новыми (не записанными) ссылками
		ЗагрузкаВыпискиПоБанковскомуСчету.УдалитьНовыеОбъекты(РаспознаннаяВыписка.Операции, РаспознанныеДанныеИзБанка.УчастникиОпераций);
		
		// СоздатьДокументы
		РезультатСозданияДокументов = ЗагрузкаВыпискиПоБанковскомуСчету.СоздатьДокументы(
			Выписка.Значение, 
			РаспознаннаяВыписка, 
			РаспознанныеДанныеИзБанка.Настройки, 
			ПараметрыЗагрузкиДокументов.ОтборДокументовКСозданию[Выписка.Ключ]);
			
		РаспознанныеДанныеИзБанка.СозданиеДокументов.Вставить(Выписка.Ключ, РезультатСозданияДокументов);
		ДобавитьВДокументыСозданныеПоВыписке(ТаблицаДокументыСозданныеПоВыписке, РезультатСозданияДокументов, Выписка);
		
	КонецЦикла;
	
	АдресХранилищаРаспознанныеДанныеИзБанка = ПоместитьВоВременноеХранилище(РаспознанныеДанныеИзБанка, ПараметрыЗагрузкиДокументов.АдресХранилищаРаспознанныеДанныеИзБанка);
	
	// Распознанные данные из банка могли поменяться, вернем их обратно
	РезультатЗагрузки.Вставить("АдресХранилищаРаспознанныеДанныеИзБанка", АдресХранилищаРаспознанныеДанныеИзБанка);
	РезультатЗагрузки.Вставить("РезультатСозданияДокументов", РезультатСозданияДокументов(ТаблицаДокументыСозданныеПоВыписке));
	РезультатЗагрузки.Вставить("МассивСообщений", МассивСообщений);
	
	ПоместитьВоВременноеХранилище(РезультатЗагрузки, АдресХранилища);
	
КонецПроцедуры

// Процедура печатает отчет о загруженных платежных документах
//
Процедура ПечатьОтчетаОЗагруженныхПлатежныхДокументах(ПолеОтчета, ДанныеФормы, АдресХранилищаРаспознанныеДанныеИзБанка) Экспорт
	
	Если ДанныеФормы.ДокументыКИмпорту.Количество() = 0 ИЛИ АдресХранилищаРаспознанныеДанныеИзБанка = "" Тогда
		Возврат;
	КонецЕсли;
	
	МакетОтчета = ПолучитьМакет("ОтчетОЗагруженныхПлатежныхДокументах");
	
	РаспознанныеДанныеИзБанка    = ПолучитьИзВременногоХранилища(АдресХранилищаРаспознанныеДанныеИзБанка);
	СоздаватьНенайденныеЭлементы = ДанныеФормы.СоздаватьНенайденныеЭлементы;
	
	Шапка   = МакетОтчета.ПолучитьОбласть("Шапка");
	Строка  = МакетОтчета.ПолучитьОбласть("Строка");
	Подвал  = МакетОтчета.ПолучитьОбласть("Подвал");
	Остатки = МакетОтчета.ПолучитьОбласть("Остатки");
	
	Если ЗначениеЗаполнено(ДанныеФормы.Организация) Тогда
		НазвОрг = МакетОтчета.ПолучитьОбласть("НазваниеОрганизации");
		НазвОрг.Параметры.НазваниеОрганизации = ДанныеФормы.Организация.Наименование;
		ПолеОтчета.Вывести(НазвОрг);
	КонецЕсли;
	
	// В отчет выводим информация в хронологическом порядке
	ДанныеФормы.ДокументыКИмпорту.Сортировать("ДатаПроведения");
	
	Для Каждого КлючИЗначение Из РаспознанныеДанныеИзБанка.Выписки Цикл
		
		ВыпискаДанныеФайла    = КлючИЗначение.Значение;
		НачалоПериода         = ВыпискаДанныеФайла.НачалоПериода;
		КонецПериода          = ВыпискаДанныеФайла.КонецПериода;
		РаспознаннаяВыписка   = РаспознанныеДанныеИзБанка.РаспознанныеВыписки[КлючИЗначение.Ключ];
		НомерБанковскогоСчета = РаспознаннаяВыписка.ВладелецСчета.БанковскийСчет.НомерСчета;
		Если ЗначениеЗаполнено(ДанныеФормы.БанковскийСчет) И ДанныеФормы.БанковскийСчет <> РаспознаннаяВыписка.ВладелецСчета.БанковскийСчет Тогда
			Продолжить;
		КонецЕсли;
		
		// Шапка
		Если КонецДня(НачалоПериода) = КонецДня(КонецПериода) ИЛИ НЕ ЗначениеЗаполнено(КонецПериода) Тогда
			ОписаниеПериода = Формат(НачалоПериода, "ДФ=dd.MM.yyyy");
		Иначе
			ОписаниеПериода = СтрШаблон(НСтр("ru = '%1 по %2'"),
				Формат(НачалоПериода, "ДФ=dd.MM.yyyy"),
				Формат(КонецПериода,  "ДФ=dd.MM.yyyy"));
		КонецЕсли;
		
		Шапка.Параметры.ОписаниеПериода = СтрШаблон(НСтр("ru = 'по счету %1 за %2'"),
			НомерБанковскогоСчета,
			ОписаниеПериода);
		
		ПолеОтчета.Вывести(Шапка);
		
		// Строки таблицы
		Для Каждого СтрокаТаблицы Из ДанныеФормы.ДокументыКИмпорту Цикл
			
			Если СтрокаТаблицы.БанковскийСчетОрганизации <> РаспознаннаяВыписка.ВладелецСчета.БанковскийСчет Тогда
				Продолжить;
			КонецЕсли;
			
			// Установим у всей строки черный цвет текста
			Строка.Области.Строка.ЦветТекста = ЦветаСтиля.ЦветТекстаПоля;
			
			// Контрагент
			Если СтрокаТаблицы.КонтрагентОтображениеНенайденного = НСтр("ru = 'Не указаны реквизиты контрагента'") Тогда
				Строка.Параметры.Контрагент = "";
				Строка.Область("R1C7:R1C7").ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
			ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.КонтрагентОтображениеНенайденного) Тогда
				Строка.Параметры.Контрагент = СтрокаТаблицы.КонтрагентОтображениеНенайденного;
				Если НЕ СоздаватьНенайденныеЭлементы Тогда
					Строка.Область("R1C7:R1C7").ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
				КонецЕсли;
			Иначе
				Строка.Параметры.Контрагент = СтрокаТаблицы.Контрагент;
			КонецЕсли;
			// Банковский счет
			Если СтрокаТаблицы.СчетКонтрагентаОтображениеНенайденного = НСтр("ru = 'Не указаны реквизиты р/счета'") Тогда
				Строка.Параметры.Счет = "";
				Строка.Область("R2C7:R2C7").ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
			ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.СчетКонтрагентаОтображениеНенайденного) Тогда
				Строка.Параметры.Счет = СтрокаТаблицы.СчетКонтрагентаОтображениеНенайденного;
				Если НЕ СоздаватьНенайденныеЭлементы Тогда
					Строка.Область("R2C7:R2C7").ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
				КонецЕсли;
			Иначе
				Строка.Параметры.Счет            = СтрокаТаблицы.СчетКонтрагента;
				Строка.Области.Строка.ЦветТекста = ЦветаСтиля.ЦветТекстаПоля;
			КонецЕсли;
			// Договор
			Если ЗначениеЗаполнено(СтрокаТаблицы.ДоговорОтображениеНенайденного) Тогда
				Строка.Параметры.Договор = СтрокаТаблицы.ДоговорОтображениеНенайденного;
				Если НЕ СоздаватьНенайденныеЭлементы Тогда
					Строка.Область("R3C7:R3C7").ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
				КонецЕсли;
			Иначе
				Строка.Параметры.Договор = СтрокаТаблицы.Договор;
			КонецЕсли;
			// Документ
			Если ЗначениеЗаполнено(СтрокаТаблицы.Документ) Тогда
				Строка.Параметры.Документ = СтрокаТаблицы.Документ;
			Иначе
				Строка.Параметры.Документ = НСтр("ru = 'Не загружен'");
				Если НЕ СтрокаТаблицы.Готовность Тогда
					Строка.Область("R1C5:R1C5").ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
				КонецЕсли;
			КонецЕсли;
			
			Строка.Параметры.СуммаПоступление  = СтрокаТаблицы.СуммаПоступило;
			Строка.Параметры.СуммаСписание     = СтрокаТаблицы.СуммаСписано;
			Строка.Параметры.Дата              = Формат(СтрокаТаблицы.ДатаПроведения, "ДФ=dd.MM.yyyy");
			Строка.Параметры.Номер             = СтрокаТаблицы.НомерДок;
			Строка.Параметры.Индекс            = СтрокаТаблицы.НомерСтроки;
			Строка.Параметры.НазначениеПлатежа = СтрокаТаблицы.НазначениеПлатежа;
			
			ПолеОтчета.Вывести(Строка);
			
		КонецЦикла;
		
		// Подвал
		Если ВыпискаДанныеФайла.ВсегоПоступило <> 0 ИЛИ ВыпискаДанныеФайла.ВсегоСписано <> 0 Тогда
			ВсегоПоступило = ВыпискаДанныеФайла.ВсегоПоступило;
			ВсегоСписано   = ВыпискаДанныеФайла.ВсегоСписано;
		ИначеЕсли ВыпискаДанныеФайла.Операции.Количество() > 0 Тогда
			СтруктураПоискаПоступило = Новый Структура("ПоступилоСписано", "Поступило");
			ТаблицаПоступило         = ВыпискаДанныеФайла.Операции.Скопировать(СтруктураПоискаПоступило, "Сумма");
			ВсегоПоступило           = ТаблицаПоступило.Итог("Сумма");
			СтруктураПоискаСписано   = Новый Структура("ПоступилоСписано", "Списано");
			ТаблицаСписано           = ВыпискаДанныеФайла.Операции.Скопировать(СтруктураПоискаСписано, "Сумма");
			ВсегоСписано             = ТаблицаСписано.Итог("Сумма");
		Иначе
			ВсегоПоступило = 0;
			ВсегоСписано   = 0;
		КонецЕсли;
		Подвал.Параметры.ИтогоСуммаП = ВсегоПоступило;
		Подвал.Параметры.ИтогоСуммаР = ВсегоСписано;
		
		ПолеОтчета.Вывести(Подвал);
		
		Остатки.Параметры.Текст1 = СтрШаблон(НСтр("ru = 'Остаток на начало %1: '"), Формат(НачалоПериода, "ДФ=dd.MM.yyyy"));
		Остатки.Параметры.Текст2 = СтрШаблон(НСтр("ru = 'Остаток на конец %1: '"),  Формат(КонецПериода,  "ДФ=dd.MM.yyyy"));
		
		СтруктураПоиска = Новый Структура("Дата");
		
		СтруктураПоиска.Дата = НачалоПериода;
		СтрокиНачалоПериода = ВыпискаДанныеФайла.Сальдо.НайтиСтроки(СтруктураПоиска);
		// Сначала ищем по дате указанной в выписке как НачалоПериода
		Если СтрокиНачалоПериода.Количество() > 0 Тогда
			СуммаНаНачало = СтрокиНачалоПериода[0].Сумма;
		// Если ничего не нашли, то берем первое сальдо
		ИначеЕсли ВыпискаДанныеФайла.Сальдо.Количество() > 0 Тогда
			СуммаНаНачало = ВыпискаДанныеФайла.Сальдо[0].Сумма;
		// Если в файле сальдо не указано, то устанавливаем 0
		Иначе
			СуммаНаНачало = 0;
		КонецЕсли;
		
		СтруктураПоиска.Дата = КонецДня(КонецПериода) + 1;
		СтрокиКонецПериода = ВыпискаДанныеФайла.Сальдо.НайтиСтроки(СтруктураПоиска);
		// Сначала ищем по дате, указанной как КонецПериода
		Если СтрокиКонецПериода.Количество() > 0 Тогда
			// Если что-то нашли, то берем последнюю строку
			КоличествоСтрок = СтрокиКонецПериода.Количество();
			СуммаНаКонец = СтрокиКонецПериода[КоличествоСтрок-1].Сумма;
		// Если ничего не нашли, то берем последнее сальдо
		ИначеЕсли ВыпискаДанныеФайла.Сальдо.Количество() > 0 Тогда
			КоличествоСтрок = ВыпискаДанныеФайла.Сальдо.Количество();
			СуммаНаКонец = ВыпискаДанныеФайла.Сальдо[КоличествоСтрок-1].Сумма;
		Иначе
			СуммаНаКонец = 0;
		КонецЕсли;
		
		Остатки.Параметры.Сумма1 = СуммаНаНачало;
		Остатки.Параметры.Сумма2 = СуммаНаКонец;
		
		ПолеОтчета.Вывести(Остатки);
		
	КонецЦикла;
	
	ПолеОтчета.ОтображатьГруппировки = Ложь;
	ПолеОтчета.ОтображатьЗаголовки   = Ложь;
	ПолеОтчета.ОтображатьСетку       = Ложь;
	ПолеОтчета.ТолькоПросмотр        = Истина;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ЭкспортДокументов

Процедура ЗаполнитьДокументыНаЭкспортВФоне(ПараметрыЗадания, АдресХранилища) Экспорт
	
	ЗаполнитьДокументыНаЭкспорт(ПараметрыЗадания.ПлатежныеДокументы,
		ПараметрыЗадания.НачалоПериода, ПараметрыЗадания.КонецПериода, ПараметрыЗадания.БанковскийСчет,
		ПараметрыЗадания.ВыгружатьПлатПоручения, ПараметрыЗадания.ВыгружатьПлатТребования,
		ПараметрыЗадания.КонтролироватьНекорректныеСимволыВНомере, ПараметрыЗадания.СоглашениеПрямогоОбменаСБанками,
		ПараметрыЗадания.СписокДокументов);
	
	ПоместитьВоВременноеХранилище(ПараметрыЗадания.ПлатежныеДокументы, АдресХранилища);
	
КонецПроцедуры

Процедура ЗаполнитьДокументыНаЭкспорт(ОбъектПлатежныеДокументы, НачПериода, КонПериода, БанковскийСчет,
		ВыгружатьПлатПоручения, ВыгружатьПлатТребования, КонтролироватьНекорректныеСимволыВНомере = Ложь,
		СоглашениеПрямогоОбменаСБанками, СписокДокументов = Неопределено)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПлатежноеПоручение.Ссылка КАК ПлатежноеПоручение,
	|	СостоянияБанковскихДокументов.Состояние
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияБанковскихДокументов КАК СостоянияБанковскихДокументов
	|		ПО ПлатежноеПоручение.Ссылка = СостоянияБанковскихДокументов.СсылкаНаОбъект
	|ГДЕ
	|	ПлатежноеПоручение.Дата МЕЖДУ &ДатаНачало И &ДатаОкончание
	|	И &ДополнительноеУсловие
	|	И НЕ ПлатежноеПоручение.ПометкаУдаления
	|	И ПлатежноеПоручение.СчетОрганизации = &Счет
	|	И &ВыгружатьПлатПоручения
	|	И ЕСТЬNULL(СостоянияБанковскихДокументов.Состояние, НЕОПРЕДЕЛЕНО) <> ЗНАЧЕНИЕ(Перечисление.СостоянияБанковскихДокументов.Оплачено)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПлатежноеТребование.Ссылка КАК ПлатежноеТребование,
	|	СостоянияБанковскихДокументов.Состояние
	|ИЗ
	|	Документ.ПлатежноеТребование КАК ПлатежноеТребование
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияБанковскихДокументов КАК СостоянияБанковскихДокументов
	|		ПО ПлатежноеТребование.Ссылка = СостоянияБанковскихДокументов.СсылкаНаОбъект
	|ГДЕ
	|	ПлатежноеТребование.Дата МЕЖДУ &ДатаНачало И &ДатаОкончание
	|	И НЕ ПлатежноеТребование.ПометкаУдаления
	|	И ПлатежноеТребование.СчетОрганизации = &Счет
	|	И &ВыгружатьПлатТребования
	|	И ЕСТЬNULL(СостоянияБанковскихДокументов.Состояние, НЕОПРЕДЕЛЕНО) <> ЗНАЧЕНИЕ(Перечисление.СостоянияБанковскихДокументов.Оплачено)";
	
	ЗапросПоДокументам = Новый Запрос();
	ЗапросПоДокументам.УстановитьПараметр("ДатаНачало",    НачалоДня(НачПериода));
	ЗапросПоДокументам.УстановитьПараметр("ДатаОкончание", КонецДня(КонПериода));
	ЗапросПоДокументам.УстановитьПараметр("Счет",          БанковскийСчет);
	ЗапросПоДокументам.УстановитьПараметр("ВыгружатьПлатПоручения",  ВыгружатьПлатПоручения);
	ЗапросПоДокументам.УстановитьПараметр("ВыгружатьПлатТребования", ВыгружатьПлатТребования);
	ЗапросПоДокументам.УстановитьПараметр("ДополнительноеУсловие",   Истина);
	
	Если СписокДокументов <> Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДополнительноеУсловие", "ПлатежноеПоручение.Ссылка В (&СписокДокументов)");
		ЗапросПоДокументам.УстановитьПараметр("СписокДокументов", СписокДокументов);
		ЗапросПоДокументам.УстановитьПараметр("ВыгружатьПлатТребования", Ложь);
	КонецЕсли;
	
	ЗапросПоДокументам.Текст = ТекстЗапроса;
	
	РезультатЗапроса = ЗапросПоДокументам.ВыполнитьПакет();
	ПлатежныеПоручения  = РезультатЗапроса[0].Выгрузить().ВыгрузитьКолонку("ПлатежноеПоручение");
	ПлатежныеТребования = РезультатЗапроса[1].Выгрузить().ВыгрузитьКолонку("ПлатежноеТребование");
	
	// исключаем из выборки отправленные через ДиректБанк банковские документы
	Если ЗначениеЗаполнено(СоглашениеПрямогоОбменаСБанками) Тогда
		
		ПлатежныеПоручения = ОбменСБанками.ГотовыеКОтправкеДокументы(ПлатежныеПоручения);
		ПлатежныеТребования = ОбменСБанками.ГотовыеКОтправкеДокументы(ПлатежныеТребования);
		
	КонецЕсли;
	
	ВыборкаДляЭкспорта = ПолучитьТаблицуДокументовДляЭкспорта(ПлатежныеПоручения, ПлатежныеТребования);
	
	ОбъектПлатежныеДокументы.Очистить();
	
	КоллекцияЭлементов = Метаданные.Обработки.КлиентБанк.ТабличныеЧасти.ПлатежныеДокументы.Реквизиты;
	Для каждого СтрокаВыборкиДляЭкспорта Из ВыборкаДляЭкспорта Цикл
		
		СтрокаДокумента = ОбъектПлатежныеДокументы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаВыборкиДляЭкспорта);
		
		ПроверитьНаКорректностьИПустоеЗначениеЭкспорта(СтрокаДокумента, КоллекцияЭлементов, КонтролироватьНекорректныеСимволыВНомере);
		
		СтрокаДокумента.Выгружать = ПустаяСтрока(СтрокаДокумента.ОписаниеОшибок)
			И СтрокаДокумента.Состояние = Перечисления.СостоянияБанковскихДокументов.Подготовлено;
		
		Если СтрокаДокумента.Готовность > 0 Тогда
			СтрокаДокумента.ОписаниеОшибок = СтрокаДокумента.ОписаниеОшибок;
		Иначе
			СтрокаДокумента.ОписаниеОшибок = НСтр("ru = 'Документ готов к выгрузке.'");
		КонецЕсли;
		
	КонецЦикла;
	
	ПроверитьПлатежныеРеквизитыГосОрганов(ОбъектПлатежныеДокументы);
	
КонецПроцедуры // ЗаполнитьДокументыНаЭкспорт

// Возвращает соответствие со списком документов,
// у которых пользователь изменил флаг "Выгружать" в таблице платежных документов
//
// Параметры:
//  ПлатежныеДокументы - Обработки.КлиентБанк.ПлатежныеДокументы - таблица обработки, содержащая список документов.
//
// Возвращаемое значение:
//  Соответствие - Соответствие, в котором в качестве ключа указан документ, а в качестве значения - текущее значение флага "Выгружать".
Функция ДокументыСИзмененнымФлагомВыгрузки(ПлатежныеДокументы) Экспорт
	
	ДокументыДляВыгрузки = Новый Соответствие;
	Для Каждого ПлатежныйДокумент Из ПлатежныеДокументы Цикл
		ВыгружатьПоУмолчанию = ПлатежныйДокумент.Готовность = 0
			И ПлатежныйДокумент.Состояние = Перечисления.СостоянияБанковскихДокументов.Подготовлено;
		
		Если ПлатежныйДокумент.Выгружать <> ВыгружатьПоУмолчанию Тогда
			ДокументыДляВыгрузки.Вставить(ПлатежныйДокумент.Документ, ПлатежныйДокумент.Выгружать);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДокументыДляВыгрузки;
	
КонецФункции

Функция ПолучитьТаблицуДокументовДляЭкспорта(ПлатежныеПоручения, ПлатежныеТребования) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("ПлатежныеПоручения",  ПлатежныеПоручения);
	Запрос.Параметры.Вставить("ПлатежныеТребования", ПлатежныеТребования);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	""Платежное поручение"" КАК ВидДокумента,
	|	ПлатежноеПоручение.Ссылка КАК Документ,
	|	ПлатежноеПоручение.Проведен,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручение.Проведен
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СостояниеДокумента,
	|	ПлатежноеПоручение.Номер КАК Номер,
	|	ПлатежноеПоручение.Дата,
	|	ПлатежноеПоручение.ВидПлатежа,
	|	ПлатежноеПоручение.ПеречислениеВБюджет,
	|	ПлатежноеПоручение.ОчередностьПлатежа,
	|	ВЫРАЗИТЬ(ПлатежноеПоручение.НазначениеПлатежа КАК СТРОКА(210)) КАК НазначениеПлатежа,
	|	ПлатежноеПоручение.СуммаДокумента,
	|	0 КАК СуммаНаПриход,
	|	ПлатежноеПоручение.СуммаДокумента КАК СуммаНаРасход,
	|	ВЫРАЗИТЬ(ПлатежноеПоручение.ТекстПлательщика КАК СТРОКА(500)) КАК ТекстПлательщика,
	|	ВЫРАЗИТЬ(ПлатежноеПоручение.ТекстПолучателя КАК СТРОКА(500)) КАК ТекстПолучателя,
	|	ПлатежноеПоручение.ИННПлательщика,
	|	ПлатежноеПоручение.КПППлательщика,
	|	ПлатежноеПоручение.ИННПолучателя,
	|	ПлатежноеПоручение.КПППолучателя,
	|	ПлатежноеПоручение.КодБК,
	|	ПлатежноеПоручение.КодОКАТО,
	|	ПлатежноеПоручение.ПоказательДаты,
	|	ПлатежноеПоручение.ПоказательНомера,
	|	ПлатежноеПоручение.ПоказательОснования,
	|	ПлатежноеПоручение.ПоказательТипа,
	|	ПлатежноеПоручение.ПоказательПериода,
	|	ПлатежноеПоручение.СтатусСоставителя,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручение.Организация.ВариантНаименованияДляПечатныхФорм = ЗНАЧЕНИЕ(Перечисление.ВариантыНаименованияДляПечатныхФорм.СокращенноеНаименование)
	|			ТОГДА ВЫРАЗИТЬ(ПлатежноеПоручение.Организация.НаименованиеСокращенное КАК СТРОКА(250))
	|		ИНАЧЕ ВЫРАЗИТЬ(ПлатежноеПоручение.Организация.НаименованиеПолное КАК СТРОКА(250))
	|	КОНЕЦ КАК Организация,
	|	ПлатежноеПоручение.Организация.Наименование КАК ОрганизацияКратко,
	|	ПлатежноеПоручение.Организация.НаименованиеПлательщикаПриПеречисленииВБюджет КАК ОрганизацияПеречислениеНалога,
	|	ПлатежноеПоручение.Организация.ИНН КАК ОрганизацияИНН,
	|	ПлатежноеПоручение.Организация.КПП КАК ОрганизацияКПП,
	|	ПлатежноеПоручение.СчетОрганизации КАК ОрганизацияСчет,
	|	ПлатежноеПоручение.СчетОрганизации.НомерСчета КАК ОрганизацияНомерСчета,
	|	ПлатежноеПоручение.СчетОрганизации.Банк.Код КАК ОрганизацияБИКБанка,
	|	ПлатежноеПоручение.СчетОрганизации.Банк.Наименование КАК ОрганизацияБанк,
	|	ПлатежноеПоручение.СчетОрганизации.Банк.КоррСчет КАК ОрганизацияРасчСчет,
	|	ПлатежноеПоручение.СчетОрганизации.Банк.Город КАК ОрганизацияГородБанка,
	|	ПлатежноеПоручение.СчетОрганизации.БанкДляРасчетов.Наименование КАК ОрганизацияБанкДляРасчетов,
	|	ПлатежноеПоручение.СчетОрганизации.БанкДляРасчетов.Город КАК ОрганизацияГородРЦБанка,
	|	ПлатежноеПоручение.СчетОрганизации.БанкДляРасчетов.Код КАК ОрганизацияБИКРЦБанка,
	|	ПлатежноеПоручение.СчетОрганизации.БанкДляРасчетов.КоррСчет КАК ОрганизацияКоррСчетРЦБанка,
	|	ПлатежноеПоручение.СчетОрганизации.СуммаБезКопеек КАК СуммаБезКопеек,
	|	ВЫРАЗИТЬ(ПлатежноеПоручение.СчетОрганизации.ТекстКорреспондента КАК СТРОКА(500)) КАК ОрганизацияТекстКорреспондента,
	|	ВЫРАЗИТЬ(ПлатежноеПоручение.СчетОрганизации.ТекстНазначения КАК СТРОКА(210)) КАК ОрганизацияТекстНазначения,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(ПлатежноеПоручение.СчетКонтрагента.Владелец.НаименованиеПолное, ЕСТЬNULL(ПлатежноеПоручение.СчетКонтрагента.Владелец.ФИО, ПлатежноеПоручение.СчетКонтрагента.Владелец.ФИО)) КАК СТРОКА(250)) КАК Контрагент,
	|	ПлатежноеПоручение.СчетКонтрагента.Владелец.Наименование КАК КонтрагентКратко,
	|	ПлатежноеПоручение.СчетКонтрагента.Владелец.ИНН КАК КонтрагентИНН,
	|	ПлатежноеПоручение.СчетКонтрагента.Владелец.КПП КАК КонтрагентКПП,
	|	ПлатежноеПоручение.СчетКонтрагента КАК КонтрагентСчет,
	|	ПлатежноеПоручение.СчетКонтрагента.НомерСчета КАК КонтрагентНомерСчета,
	|	ПлатежноеПоручение.СчетКонтрагента.Банк.Наименование КАК КонтрагентБанк,
	|	ПлатежноеПоручение.СчетКонтрагента.Банк.КоррСчет КАК КонтрагентРасчСчет,
	|	ПлатежноеПоручение.СчетКонтрагента.Банк.Город КАК КонтрагентГородБанка,
	|	ПлатежноеПоручение.СчетКонтрагента.БанкДляРасчетов.Наименование КАК КонтрагентБанкДляРасчетов,
	|	ПлатежноеПоручение.СчетКонтрагента.БанкДляРасчетов.Город КАК КонтрагентГородРЦБанка,
	|	ПлатежноеПоручение.СчетКонтрагента.Банк.Код КАК КонтрагентБИКБанка,
	|	ПлатежноеПоручение.СчетКонтрагента.БанкДляРасчетов.Код КАК КонтрагентБИКРЦБанка,
	|	ПлатежноеПоручение.СчетКонтрагента.БанкДляРасчетов.КоррСчет КАК КонтрагентКоррСчетРЦБанка,
	|	ВЫРАЗИТЬ(ПлатежноеПоручение.СчетКонтрагента.ТекстКорреспондента КАК СТРОКА(500)) КАК КонтрагентТекстКорреспондента,
	|	ВЫРАЗИТЬ(ПлатежноеПоручение.СчетКонтрагента.ТекстНазначения КАК СТРОКА(210)) КАК КонтрагентТекстНазначения,
	|	"""" КАК СрокАкцепта,
	|	"""" КАК УсловиеОплаты1,
	|	"""" КАК ДатаОтсылкиДок,
	|	"""" КАК ОписаниеОшибок,
	|	"""" КАК Готовность,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручение.СчетОрганизации.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НепрямыеРасчетыУПлательщика,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручение.СчетКонтрагента.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НепрямыеРасчетыУПолучателя,
	|	ПлатежноеПоручение.ИдентификаторПлатежа,
	|	"""" КАК ВидАкцепта,
	|	ЕСТЬNULL(СостоянияБанковскихДокументов.Состояние, НЕОПРЕДЕЛЕНО) КАК Состояние
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияБанковскихДокументов КАК СостоянияБанковскихДокументов
	|		ПО ПлатежноеПоручение.Ссылка = СостоянияБанковскихДокументов.СсылкаНаОбъект
	|ГДЕ
	|	ПлатежноеПоручение.Ссылка В(&ПлатежныеПоручения)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Платежное требование"",
	|	ПлатежноеТребование.Ссылка,
	|	ПлатежноеТребование.Проведен,
	|	ВЫБОР
	|		КОГДА ПлатежноеТребование.Проведен
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ПлатежноеТребование.Номер,
	|	ПлатежноеТребование.Дата,
	|	ПлатежноеТребование.ВидПлатежа,
	|	ЛОЖЬ,
	|	ПлатежноеТребование.ОчередностьПлатежа,
	|	ВЫРАЗИТЬ(ПлатежноеТребование.НазначениеПлатежа КАК СТРОКА(210)),
	|	ПлатежноеТребование.СуммаДокумента,
	|	ПлатежноеТребование.СуммаДокумента,
	|	0,
	|	ВЫРАЗИТЬ(ПлатежноеТребование.Контрагент.НаименованиеПолное КАК СТРОКА(250)),
	|	ВЫБОР
	|		КОГДА ПлатежноеТребование.Организация.ВариантНаименованияДляПечатныхФорм = ЗНАЧЕНИЕ(Перечисление.ВариантыНаименованияДляПечатныхФорм.СокращенноеНаименование)
	|			ТОГДА ВЫРАЗИТЬ(ПлатежноеТребование.Организация.НаименованиеСокращенное КАК СТРОКА(250))
	|		ИНАЧЕ ВЫРАЗИТЬ(ПлатежноеТребование.Организация.НаименованиеПолное КАК СТРОКА(250))
	|	КОНЕЦ,
	|	ПлатежноеТребование.Контрагент.ИНН,
	|	ПлатежноеТребование.Контрагент.КПП,
	|	ПлатежноеТребование.Организация.ИНН,
	|	ПлатежноеТребование.Организация.КПП,
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	ВЫБОР
	|		КОГДА ПлатежноеТребование.Организация.ВариантНаименованияДляПечатныхФорм = ЗНАЧЕНИЕ(Перечисление.ВариантыНаименованияДляПечатныхФорм.СокращенноеНаименование)
	|			ТОГДА ВЫРАЗИТЬ(ПлатежноеТребование.Организация.НаименованиеСокращенное КАК СТРОКА(250))
	|		ИНАЧЕ ВЫРАЗИТЬ(ПлатежноеТребование.Организация.НаименованиеПолное КАК СТРОКА(250))
	|	КОНЕЦ,
	|	ПлатежноеТребование.Организация.Наименование,
	|	ПлатежноеТребование.Организация.НаименованиеПлательщикаПриПеречисленииВБюджет,
	|	ПлатежноеТребование.Организация.ИНН,
	|	ПлатежноеТребование.Организация.КПП,
	|	ПлатежноеТребование.СчетОрганизации,
	|	ПлатежноеТребование.СчетОрганизации.НомерСчета,
	|	ПлатежноеТребование.СчетОрганизации.Банк.Код,
	|	ПлатежноеТребование.СчетОрганизации.Банк.Наименование,
	|	ПлатежноеТребование.СчетОрганизации.Банк.КоррСчет,
	|	ПлатежноеТребование.СчетОрганизации.Банк.Город,
	|	ПлатежноеТребование.СчетОрганизации.БанкДляРасчетов.Наименование,
	|	ПлатежноеТребование.СчетОрганизации.БанкДляРасчетов.Город,
	|	ПлатежноеТребование.СчетОрганизации.БанкДляРасчетов.Код,
	|	ПлатежноеТребование.СчетОрганизации.БанкДляРасчетов.КоррСчет,
	|	ПлатежноеТребование.СчетОрганизации.СуммаБезКопеек,
	|	ВЫРАЗИТЬ(ПлатежноеТребование.СчетОрганизации.ТекстКорреспондента КАК СТРОКА(500)),
	|	ВЫРАЗИТЬ(ПлатежноеТребование.СчетОрганизации.ТекстНазначения КАК СТРОКА(210)),
	|	ВЫРАЗИТЬ(ПлатежноеТребование.Контрагент.НаименованиеПолное КАК СТРОКА(250)),
	|	ПлатежноеТребование.Контрагент.Наименование,
	|	ПлатежноеТребование.Контрагент.ИНН,
	|	ПлатежноеТребование.Контрагент.КПП,
	|	ПлатежноеТребование.СчетКонтрагента,
	|	ПлатежноеТребование.СчетКонтрагента.НомерСчета,
	|	ПлатежноеТребование.СчетКонтрагента.Банк.Наименование,
	|	ПлатежноеТребование.СчетКонтрагента.Банк.КоррСчет,
	|	ПлатежноеТребование.СчетКонтрагента.Банк.Город,
	|	ПлатежноеТребование.СчетКонтрагента.БанкДляРасчетов.Наименование,
	|	ПлатежноеТребование.СчетКонтрагента.БанкДляРасчетов.Город,
	|	ПлатежноеТребование.СчетКонтрагента.Банк.Код,
	|	ПлатежноеТребование.СчетКонтрагента.БанкДляРасчетов.Код,
	|	ПлатежноеТребование.СчетКонтрагента.БанкДляРасчетов.КоррСчет,
	|	ВЫРАЗИТЬ(ПлатежноеТребование.СчетКонтрагента.ТекстКорреспондента КАК СТРОКА(500)),
	|	ВЫРАЗИТЬ(ПлатежноеТребование.СчетКонтрагента.ТекстНазначения КАК СТРОКА(210)),
	|	ПлатежноеТребование.СрокДляАкцепта,
	|	ВЫБОР ПлатежноеТребование.ВидАкцепта
	|		КОГДА 1
	|			ТОГДА ""1""
	|		ИНАЧЕ ""2""
	|	КОНЕЦ,
	|	ПлатежноеТребование.ДатаОтсылкиДокументов,
	|	"""",
	|	"""",
	|	ВЫБОР
	|		КОГДА ПлатежноеТребование.СчетОрганизации.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ПлатежноеТребование.СчетКонтрагента.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	"""",
	|	ПлатежноеТребование.ВидАкцепта,
	|	ЕСТЬNULL(СостоянияБанковскихДокументов.Состояние, НЕОПРЕДЕЛЕНО)
	|ИЗ
	|	Документ.ПлатежноеТребование КАК ПлатежноеТребование
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияБанковскихДокументов КАК СостоянияБанковскихДокументов
	|		ПО ПлатежноеТребование.Ссылка = СостоянияБанковскихДокументов.СсылкаНаОбъект
	|ГДЕ
	|	ПлатежноеТребование.Ссылка В(&ПлатежныеТребования)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидДокумента,
	|	ПлатежноеПоручение.Дата,
	|	Документ";
	
	ТаблицаПлатежныхДокументов = Запрос.Выполнить().Выгрузить();
	ТаблицаПлатежныхДокументов.Колонки.Добавить("НомерВФорматеВыгрузки", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(11)));
	Для каждого ПлатежныйДокумент Из ТаблицаПлатежныхДокументов Цикл
		ПлатежныйДокумент.НомерВФорматеВыгрузки = УчетДенежныхСредствКлиентСервер.НомерОбъектаБезПрефикса(ПлатежныйДокумент.Номер);
		
		ТекстПолучателя = "";
		Если ПлатежныйДокумент.НепрямыеРасчетыУПолучателя Тогда
			ПозицияРС = СтрНайти(ПлатежныйДокумент.ТекстПолучателя, "р/с");
			Если ПозицияРС = 0 Тогда
				ТекстПолучателя = ПлатежныйДокумент.ТекстПолучателя;
			Иначе
				ТекстПолучателя = СокрЛП((Лев(ПлатежныйДокумент.ТекстПолучателя, ПозицияРС - 1)));
			КонецЕсли;
		Иначе
			ТекстПолучателя = ПлатежныйДокумент.ТекстПолучателя;
		КонецЕсли;
		
		ПлатежныйДокумент.ТекстПолучателя = СтрЗаменить(ТекстПолучателя, Символы.ПС, " ");
		
		ТекстПлательщика = "";
		Если ПлатежныйДокумент.НепрямыеРасчетыУПлательщика Тогда
			ПозицияРС = СтрНайти(ПлатежныйДокумент.ТекстПлательщика, "р/с");
			Если ПозицияРС = 0 Тогда
				ТекстПлательщика = ПлатежныйДокумент.ТекстПлательщика;
			Иначе
				ТекстПлательщика = СокрЛП((Лев(ПлатежныйДокумент.ТекстПлательщика, ПозицияРС - 1)));
			КонецЕсли;
		Иначе
			ТекстПлательщика = ПлатежныйДокумент.ТекстПлательщика;
		КонецЕсли;
		
		ПлатежныйДокумент.ТекстПлательщика = СтрЗаменить(ТекстПлательщика, Символы.ПС, " ");
		ЗаполнитьНулемПустыеЗначенияРеквизитовПлатежаВБюджет(ПлатежныйДокумент);
	КонецЦикла;
	
	Возврат ТаблицаПлатежныхДокументов;
	
КонецФункции

Процедура ПроверитьПлатежныеРеквизитыГосОрганов(ПлатежныеДокументы)
	
	СчетаДляПроверки = Новый Соответствие;
	
	Для Каждого ПлатежныйДокумент Из ПлатежныеДокументы Цикл
		
		// Выполняем проверку только для платежных поручений на уплату налогов в бюджет
		// для правильно заполненных документов
		Если ПлатежныйДокумент.ПеречислениеВБюджет
			И ПлатежныйДокумент.Готовность = 0 Тогда
			
			ПлатежныеРеквизиты = Новый Структура();
			ПлатежныеРеквизиты.Вставить("ИНН", ПлатежныйДокумент.КонтрагентИНН);
			ПлатежныеРеквизиты.Вставить("КПП", ПлатежныйДокумент.КонтрагентКПП);
			ПлатежныеРеквизиты.Вставить("ПолучательПлатежа", ПлатежныйДокумент.КонтрагентТекстКорреспондента);
			ПлатежныеРеквизиты.Вставить("РасчетныйСчет",     ПлатежныйДокумент.КонтрагентНомерСчета);
			ПлатежныеРеквизиты.Вставить("БИК",               ПлатежныйДокумент.КонтрагентБИКБанка);
			
			СчетаДляПроверки.Вставить(ПлатежныйДокумент.КонтрагентСчет, ПлатежныеРеквизиты);
			
		КонецЕсли;
		
	КонецЦикла;
	
	РезультатПроверки = Новый Соответствие;
	
	Для Каждого СчетДляПроверки Из СчетаДляПроверки Цикл
		
		Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетДляПроверки.Ключ, "Владелец");
		Результат = ДанныеГосударственныхОрганов.ПроверитьПлатежныеРеквизитыКонтрагента(Контрагент, СчетДляПроверки.Значение);
		Если Результат.Свойство("ПлатежныеРеквизитыНайдены")
			И Результат.ПлатежныеРеквизитыНайдены Тогда
			
			Если Результат.Свойство("ПлатежныеРеквизитыАктуальны")
				И НЕ Результат.ПлатежныеРеквизитыАктуальны Тогда
				
				РезультатПроверки.Вставить(СчетДляПроверки.Ключ, Ложь);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ПлатежныйДокумент Из ПлатежныеДокументы Цикл
		
		Если ПлатежныйДокумент.ПеречислениеВБюджет
			И ПлатежныйДокумент.Готовность = 0 Тогда
			
			Если РезультатПроверки.Получить(ПлатежныйДокумент.КонтрагентСчет) <> Неопределено Тогда
				
				ПлатежныйДокумент.ЕстьОшибка = Истина;
				ПлатежныйДокумент.ОписаниеОшибок = "НеВерноУказаныПлатежныеРеквизиты";
				ПлатежныйДокумент.Готовность = 4;
				ПлатежныйДокумент.Выгружать  = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция проверяет строки таблицы на корректность и пустое значение
//
Процедура ПроверитьНаКорректностьИПустоеЗначениеЭкспорта(СтрокаДокумента, КоллекцияЭлементов,
		КонтролироватьНекорректныеСимволыВНомере = Ложь)
	
	ПеречислениеНалога          = Ложь;
	НепрямыеРасчетыУПлательщика = Ложь;
	НепрямыеРасчетыУПолучателя  = Ложь;
	
	Если СтрокаДокумента.ВидДокумента = "Платежное поручение" Тогда
		ПеречислениеНалога           = ЗначениеЗаполнено(СтрокаДокумента.СтатусСоставителя);
		НепрямыеРасчетыУПлательщика  = ЗначениеЗаполнено(СтрокаДокумента.ОрганизацияБанкДляРасчетов);
		НепрямыеРасчетыУПолучателя   = ЗначениеЗаполнено(СтрокаДокумента.КонтрагентБанкДляРасчетов);
		СтрокаДокумента.ТипДокумента = ?(ПеречислениеНалога, 1, 0) * 4
			+ ?(НепрямыеРасчетыУПолучателя, 1, 0) * 2 + ?(НепрямыеРасчетыУПлательщика, 1, 0) + 1;
		Плательщик    = "Организация";
		Получатель    = "Контрагент";
		ПлательщикИНН = "ИННПлательщика";
		ПолучательИНН = "ИННПолучателя";
	Иначе
		СтрокаДокумента.ТипДокумента = 0;
		Плательщик    = "Контрагент";
		Получатель    = "Организация";
		ПлательщикИНН = "КонтрагентИНН";
		ПолучательИНН = "ОрганизацияИНН";
	КонецЕсли;
	
	// РеквизитыПлДокЭкс_Основные
	Экспорт_НеПустые = Новый Структура("Номер, Дата, СуммаДокумента");
	
	// РеквизитыПлДокЭкс_Плательщик
	Экспорт_НеПустые.Вставить(ПлательщикИНН);
	Экспорт_НеПустые.Вставить(Плательщик);
	Экспорт_НеПустые.Вставить(Плательщик + "Счет");
	
	Если НепрямыеРасчетыУПлательщика Тогда
		// РеквизитыПлДокЭкс_ПлательщикНПР
		Экспорт_НеПустые.Вставить(Плательщик + "РасчСчет");
		Экспорт_НеПустые.Вставить(Плательщик + "БанкДляРасчетов");
		Экспорт_НеПустые.Вставить(Плательщик + "ГородБанка");
		Экспорт_НеПустые.Вставить(Плательщик + "БИКРЦБанка");
	КонецЕсли;
	
	// РеквизитыПлДокЭкс_Получатель
	Экспорт_НеПустые.Вставить(ПолучательИНН);
	Экспорт_НеПустые.Вставить(Получатель);
	Экспорт_НеПустые.Вставить(Получатель + "Счет");
	
	Если НепрямыеРасчетыУПолучателя Тогда
		// РеквизитыПлДокЭкс_ПолучательНПР
		Экспорт_НеПустые.Вставить(Получатель + "РасчСчет");
		Экспорт_НеПустые.Вставить(Получатель + "БанкДляРасчетов");
		Экспорт_НеПустые.Вставить(Получатель + "ГородБанка");
		Экспорт_НеПустые.Вставить(Получатель + "БИКРЦБанка");
	КонецЕсли;
	
	Для каждого Свойство Из Экспорт_НеПустые Цикл
		ПроверитьНаПустоеЗначениеЭкспорта(СтрокаДокумента, Свойство.Ключ, КоллекцияЭлементов.Найти(Свойство.Ключ).Синоним);
	КонецЦикла;
	
	Если ПеречислениеНалога Тогда
		ПроверитьЗаполнениеНалоговыхРеквизитов(СтрокаДокумента);
	КонецЕсли;
	
	ПроверитьНаКорректностьНомераПриВыгрузке(СтрокаДокумента, КонтролироватьНекорректныеСимволыВНомере);
	
	ПроверитьНаКорректностьДатыПриВыгрузке(СтрокаДокумента);
	
КонецПроцедуры

Процедура ПроверитьНаПустоеЗначениеЭкспорта(СтрокаЭкспорта, ИмяСвойства, ПредставлениеСвойства)
	
	Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта[ИмяСвойства]) Тогда
		ДобавитьЗамечание(СтрокаЭкспорта, 4, "Не заполнено поле """ + ПредставлениеСвойства + """");
	КонецЕсли;
	
КонецПроцедуры

// Процедура проверяет корректность номера
//
Процедура ПроверитьНаКорректностьНомераПриВыгрузке(СтрокаЭкспорта, КонтролироватьНекорректныеСимволыВНомере = Ложь)
	
	Если КонтролироватьНекорректныеСимволыВНомере Тогда
		Значение = Прав(СокрЛП(СтрокаЭкспорта.Номер), 6);
		Если Значение = "000000" Тогда
			ДобавитьЗамечание(СтрокаЭкспорта, 4, НСтр("ru = 'Номер не должен быть равен нулю.'"));
		КонецЕсли;
		
		Если ЕстьНеЦифры(Значение) Тогда
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Указан неправильный номер документа(%1).'"), Значение);
			ДобавитьЗамечание(СтрокаЭкспорта, 4, ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура проверяет корректность даты выгрузки - она не должна быть старше, чем 10 дней.
//
Процедура ПроверитьНаКорректностьДатыПриВыгрузке(СтрокаЭкспорта)
	
	Если НачалоДня(ТекущаяДатаСеанса()) - НачалоДня(СтрокаЭкспорта.Дата) > 9 * 60 * 60 * 24 Тогда
		ДобавитьЗамечание(СтрокаЭкспорта, 4, НСтр("ru = 'Платежное поручение действительно только в течение 10 дней'"));
	КонецЕсли;
	
КонецПроцедуры

// Функция формирует структуру экспорта
//
Функция СформироватьСтруктуруЭкспорта(ВерсияФормата)
	
	СтруктураЭкспорта = Новый Структура;
	
	СтруктураЭкспорта.Вставить("Выгружать",              ""); // "_"
	СтруктураЭкспорта.Вставить("Готовность",             ""); // "Готовность"
	
	СтруктураЭкспорта.Вставить("НомерДок",               ""); // "№ Документа"
	СтруктураЭкспорта.Вставить("Номер",                  ""); // "Номер"
	СтруктураЭкспорта.Вставить("Дата",                   ""); // "Дата"
	СтруктураЭкспорта.Вставить("Операция",               ""); // "Операция"
	СтруктураЭкспорта.Вставить("СчетОрганизации",        ""); // "Эл. Р/с организации"
	СтруктураЭкспорта.Вставить("НомерСчетаОрганизации",  ""); // "Р/с организации"
	СтруктураЭкспорта.Вставить("Сумма",                  ""); // "Сумма"
	
	СтруктураЭкспорта.Вставить("Контрагент",             ""); // "Контрагент"
	СтруктураЭкспорта.Вставить("СчетКонтрагента",        ""); // "Р/с контрагента"
	СтруктураЭкспорта.Вставить("НомерСчетаКонтрагента",  ""); // "Эл. Р/с контрагента"
	
	СтруктураЭкспорта.Вставить("КвитанцияДата",          ""); // "Дата форм. квитанции"
	СтруктураЭкспорта.Вставить("КвитанцияВремя",         ""); // "Время форм. квитанции"
	СтруктураЭкспорта.Вставить("КвитанцияСодержание",    ""); // "Содержание квитанции"
	
	СтруктураЭкспорта.Вставить("ПлательщикСчет",         ""); // "Расчетный счет плательщика"
	СтруктураЭкспорта.Вставить("Плательщик",             ""); // "Плательщик"
	СтруктураЭкспорта.Вставить("ПлательщикИНН",          ""); // "ИНН плательщика"
	СтруктураЭкспорта.Вставить("Плательщик1",            ""); // "Наименование плательщика"
	СтруктураЭкспорта.Вставить("Плательщик2",            ""); // "Расчетный счет плательщика"
	СтруктураЭкспорта.Вставить("Плательщик3",            ""); // "Банк плательщика"
	СтруктураЭкспорта.Вставить("Плательщик4",            ""); // "Город банка плательщика"
	СтруктураЭкспорта.Вставить("ПлательщикРасчСчет",     ""); // "Корсчет банка плательщика"
	СтруктураЭкспорта.Вставить("ПлательщикБанк1",        ""); // "РЦ банка плательщика"
	СтруктураЭкспорта.Вставить("ПлательщикБанк2",        ""); // "Город РЦ банка плательщика"
	СтруктураЭкспорта.Вставить("ПлательщикБИК",          ""); // "БИК РЦ банка плательщика"
	СтруктураЭкспорта.Вставить("ПлательщикКорсчет",      ""); // "Корсчет РЦ банка плат."
	
	СтруктураЭкспорта.Вставить("ПолучательСчет",         ""); // "Расчетный счет получателя"
	СтруктураЭкспорта.Вставить("Получатель",             ""); // "Получатель"
	СтруктураЭкспорта.Вставить("ПолучательИНН",          ""); // "ИНН получателя"
	СтруктураЭкспорта.Вставить("Получатель1",            ""); // "Наименование получателя"
	СтруктураЭкспорта.Вставить("Получатель2",            ""); // "Расчетный счет получателя"
	СтруктураЭкспорта.Вставить("Получатель3",            ""); // "Банк получателя"
	СтруктураЭкспорта.Вставить("Получатель4",            ""); // "Город банка получателя"
	СтруктураЭкспорта.Вставить("ПолучательРасчСчет",     ""); // "Корсчет банка получателя"
	СтруктураЭкспорта.Вставить("ПолучательБанк1",        ""); // "РЦ банка получателя"
	СтруктураЭкспорта.Вставить("ПолучательБанк2",        ""); // "Город РЦ банка получателя"
	СтруктураЭкспорта.Вставить("ПолучательБИК",          ""); // "БИК РЦ банка получателя"
	СтруктураЭкспорта.Вставить("ПолучательКорсчет",      ""); // "Корсчет РЦ банка пол."
	
	СтруктураЭкспорта.Вставить("ВидПлатежа",             ""); // "Вид платежа"
	СтруктураЭкспорта.Вставить("ВидОплаты",              ""); // "Вид оплаты"
	СтруктураЭкспорта.Вставить("ПеречислениеВБюджет",    ""); // "Перечисление в бюджет",
	СтруктураЭкспорта.Вставить("ВидПеречисленияВБюджет", ""); // "Вид перечисления в бюджет",
	
	СтруктураЭкспорта.Вставить("СтатусСоставителя",      ""); // "Статус составителя"
	СтруктураЭкспорта.Вставить("ПлательщикКПП",          ""); // "КПП плательщика"
	СтруктураЭкспорта.Вставить("ПолучательКПП",          ""); // "КПП получателя"
	СтруктураЭкспорта.Вставить("ПоказательКБК",          ""); // "Показатель КБК"
	СтруктураЭкспорта.Вставить("ОКАТО",                  ""); // "ОКАТО/ОКТМО"
	СтруктураЭкспорта.Вставить("ПоказательОснования",    ""); // "Пок. основания"
	СтруктураЭкспорта.Вставить("ПоказательПериода",      ""); // "Пок. нал. периода"
	СтруктураЭкспорта.Вставить("ПоказательНомера",       ""); // "Пок. номера док."
	СтруктураЭкспорта.Вставить("ПоказательДаты",         ""); // "Пок. даты док."
	
	Если ВерсияФормата < "1.03" Тогда // С 01.01.2015 не используется
		СтруктураЭкспорта.Вставить("ПоказательТипа",     ""); // "Пок. типа платежа"
	КонецЕсли;
	
	СтруктураЭкспорта.Вставить("СрокПлатежа",            ""); // "Срок действия аккредитива"
	СтруктураЭкспорта.Вставить("Очередность",            ""); // "Очередность платежа"
	
	СтруктураЭкспорта.Вставить("НазначениеПлатежа",      ""); // "Назначение платежа"
	СтруктураЭкспорта.Вставить("НазначениеПлатежа1",     ""); // "Назначение платежа, стр. 1"
	СтруктураЭкспорта.Вставить("НазначениеПлатежа2",     ""); // "Назначение платежа, стр. 2"
	СтруктураЭкспорта.Вставить("НазначениеПлатежа3",     ""); // "Назначение платежа, стр. 3"
	СтруктураЭкспорта.Вставить("НазначениеПлатежа4",     ""); // "Назначение платежа, стр. 4"
	СтруктураЭкспорта.Вставить("НазначениеПлатежа5",     ""); // "Назначение платежа, стр. 5"
	СтруктураЭкспорта.Вставить("НазначениеПлатежа6",     ""); // "Назначение платежа, стр. 6"
	
	СтруктураЭкспорта.Вставить("СрокАкцепта",            ""); // "Срок акцепта"
	СтруктураЭкспорта.Вставить("ВидАккредитива",         ""); // "Вид аккредитива"
	СтруктураЭкспорта.Вставить("УсловиеОплаты1",         ""); // "Условие оплаты, стр. 1"
	СтруктураЭкспорта.Вставить("УсловиеОплаты2",         ""); // "Условие оплаты, стр. 2"
	СтруктураЭкспорта.Вставить("УсловиеОплаты3",         ""); // "Условие оплаты, стр. 3"
	СтруктураЭкспорта.Вставить("ПлатежПоПредст",         ""); // "Платеж по представлению"
	СтруктураЭкспорта.Вставить("ДополнУсловия",          ""); // "Дополнительные условия"
	СтруктураЭкспорта.Вставить("НомерСчетаПоставщика",   ""); // "№ счета поставщика"
	СтруктураЭкспорта.Вставить("ДатаОтсылкиДок",         ""); // "Дата отсылки документов"
	
	СтруктураЭкспорта.Вставить("Документ",               ""); // "Источник"
	СтруктураЭкспорта.Вставить("СекцияДокумент",         ""); // "Выгрузка"
	
	СтруктураЭкспорта.Вставить("ОписаниеОшибок",         ""); // "Замечания"
	СтруктураЭкспорта.Вставить("ТипДокумента",           ""); // "Тип пл. документа"
	
	Если ВерсияФормата >= "1.02" Тогда
		СтруктураЭкспорта.Вставить("Код", ""); // "Уникальный идентификатор платежа"
	КонецЕсли;
	
	Возврат СтруктураЭкспорта;
	
КонецФункции // СформироватьСтруктуруЭкспорта

// Процедура заполняет экспортные значения
//
Процедура ЗаполнитьЗначениеЭкспорта(СтрокаЭкспорта, ВыборкаДляЭкспорта) Экспорт
	
	Если ВыборкаДляЭкспорта.ВидДокумента = "Платежное требование" Тогда
		Плательщик = "Контрагент";
		Получатель = "Организация";
	Иначе
		Плательщик = "Организация";
		Получатель = "Контрагент";
	КонецЕсли;
	
	СтрокаЭкспорта.Номер          = ВыборкаДляЭкспорта.НомерВФорматеВыгрузки;
	СтрокаЭкспорта.Дата           = Формат(ВыборкаДляЭкспорта.Дата, "ДЛФ=Д");
	СтрокаЭкспорта.Сумма          = Формат(ВыборкаДляЭкспорта.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧРГ=' '; ЧГ=0");
	СтрокаЭкспорта.ПлательщикСчет = ВыборкаДляЭкспорта[Плательщик + "НомерСчета"];
	СтрокаЭкспорта.ПолучательСчет = ВыборкаДляЭкспорта[Получатель + "НомерСчета"];
	СтрокаЭкспорта.ВидПлатежа     = ВыборкаДляЭкспорта.ВидПлатежа;
	
	НепрямыеРасчетыУПлательщика   = ЗначениеЗаполнено(ВыборкаДляЭкспорта[Плательщик + "БанкДляРасчетов"]);
	НепрямыеРасчетыУПолучателя    = ЗначениеЗаполнено(ВыборкаДляЭкспорта[Получатель + "БанкДляРасчетов"]);
	
//ВидОплаты
	Если ВыборкаДляЭкспорта.ВидДокумента = "Платежное поручение" Тогда
		СтрокаЭкспорта.ВидОплаты  = "01";
	ИначеЕсли ВыборкаДляЭкспорта.ВидДокумента = "Аккредитив переданный" Тогда
		СтрокаЭкспорта.ВидОплаты  = "08";
	ИначеЕсли ВыборкаДляЭкспорта.ВидДокумента = "Инкассовое поручение" Тогда
		СтрокаЭкспорта.ВидОплаты  = "06";
	ИначеЕсли ВыборкаДляЭкспорта.ВидДокумента = "Платежное требование" Тогда
		СтрокаЭкспорта.ВидОплаты  = "02";
	Иначе
		СтрокаЭкспорта.ВидОплаты  = "00";
	КонецЕсли;
	
//Плательщик1
	СтрокаЭкспорта.Плательщик1 = ВыборкаДляЭкспорта.ТекстПлательщика;
	
//Плательщик, ПлательщикИНН
	Значение = ВыборкаДляЭкспорта.ИННПлательщика;
	СтрокаЭкспорта.ПлательщикИНН = Значение;
	СтрокаЭкспорта.Плательщик = "ИНН " + Значение + " " + СтрокаЭкспорта.Плательщик1;
	
//ПлательщикРасчСчет, ПлательщикБанк1, ПлательщикБанк2, ПлательщикБИК, ПлательщикКорсчет,Плательщик2, Плательщик3, Плательщик4
	Если НепрямыеРасчетыУПлательщика Тогда
		СтрокаЭкспорта.Плательщик2        = ВыборкаДляЭкспорта[Плательщик + "НомерСчета"];
		СтрокаЭкспорта.Плательщик3        = ВыборкаДляЭкспорта[Плательщик + "Банк"];
		СтрокаЭкспорта.Плательщик4        = ВыборкаДляЭкспорта[Плательщик + "ГородБанка"];
		СтрокаЭкспорта.Плательщик         = СтрокаЭкспорта.Плательщик + " р/с " + СтрокаЭкспорта.Плательщик2 + " в " + СтрокаЭкспорта.Плательщик3 + " " + СтрокаЭкспорта.Плательщик4;
		СтрокаЭкспорта.ПлательщикРасчСчет = ВыборкаДляЭкспорта[Плательщик + "РасчСчет"];
		СтрокаЭкспорта.ПлательщикБанк1    = ВыборкаДляЭкспорта[Плательщик + "БанкДляРасчетов"];
		СтрокаЭкспорта.ПлательщикБанк2    = ВыборкаДляЭкспорта[Плательщик + "ГородРЦБанка"];
		СтрокаЭкспорта.ПлательщикБИК      = ВыборкаДляЭкспорта[Плательщик + "БИКРЦБанка"];
		СтрокаЭкспорта.ПлательщикКорсчет  = ВыборкаДляЭкспорта[Плательщик + "КоррСчетРЦБанка"];
	Иначе
		СтрокаЭкспорта.ПлательщикРасчСчет = ВыборкаДляЭкспорта[Плательщик + "НомерСчета"];
		СтрокаЭкспорта.ПлательщикБанк1    = ВыборкаДляЭкспорта[Плательщик + "Банк"];
		СтрокаЭкспорта.ПлательщикБанк2    = ВыборкаДляЭкспорта[Плательщик + "ГородБанка"];
		СтрокаЭкспорта.ПлательщикБИК      = ВыборкаДляЭкспорта[Плательщик + "БИКБанка"];
		СтрокаЭкспорта.ПлательщикКорсчет  = ВыборкаДляЭкспорта[Плательщик + "РасчСчет"];
	КонецЕсли;
	
//Получатель1
	ПолучательПозицияСимволВК = СтрНайти(ВыборкаДляЭкспорта.ТекстПолучателя, Символы.ВК);
	Если ПолучательПозицияСимволВК = 0 Тогда
		СтрокаЭкспорта.Получатель1 = ВыборкаДляЭкспорта.ТекстПолучателя;
	КонецЕсли;
	
//Получатель, ПолучательИНН
	Значение = ВыборкаДляЭкспорта.ИННПолучателя;
	СтрокаЭкспорта.ПолучательИНН = Значение;
	СтрокаЭкспорта.Получатель    = "ИНН " + Значение + " " + СтрокаЭкспорта.Получатель1;
	
//ПолучательРасчСчет, ПолучательБанк1, ПолучательБанк2, ПолучательБИК, ПолучательКорсчет, Получатель2, Получатель3, Получатель4
	Если НепрямыеРасчетыУПолучателя Тогда
		СтрокаЭкспорта.Получатель2        = ВыборкаДляЭкспорта[Получатель + "НомерСчета"];
		СтрокаЭкспорта.Получатель3        = ВыборкаДляЭкспорта[Получатель + "Банк"];
		СтрокаЭкспорта.Получатель4        = ВыборкаДляЭкспорта[Получатель + "ГородБанка"];
		СтрокаЭкспорта.Получатель         = СтрокаЭкспорта.Получатель + " р/с " + СтрокаЭкспорта.Получатель2 + " в " + СтрокаЭкспорта.Получатель3 + " " + СтрокаЭкспорта.Получатель4;
		СтрокаЭкспорта.ПолучательРасчСчет = ВыборкаДляЭкспорта[Получатель + "РасчСчет"];
		СтрокаЭкспорта.ПолучательБанк1    = ВыборкаДляЭкспорта[Получатель + "БанкДляРасчетов"];
		СтрокаЭкспорта.ПолучательБанк2    = ВыборкаДляЭкспорта[Получатель + "ГородРЦБанка"];
		СтрокаЭкспорта.ПолучательБИК      = ВыборкаДляЭкспорта[Получатель + "БИКРЦБанка"];
		СтрокаЭкспорта.ПолучательКорсчет  = ВыборкаДляЭкспорта[Получатель + "КоррСчетРЦБанка"];
	Иначе
		СтрокаЭкспорта.ПолучательРасчСчет = ВыборкаДляЭкспорта[Получатель + "НомерСчета"];
		СтрокаЭкспорта.ПолучательБанк1    = ВыборкаДляЭкспорта[Получатель + "Банк"];
		СтрокаЭкспорта.ПолучательБанк2    = ВыборкаДляЭкспорта[Получатель + "ГородБанка"];
		СтрокаЭкспорта.ПолучательБИК      = ВыборкаДляЭкспорта[Получатель + "БИКБанка"];
		СтрокаЭкспорта.ПолучательКорсчет  = ВыборкаДляЭкспорта[Получатель + "РасчСчет"];
	КонецЕсли;
	
//ПлательщикКПП
	Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПлательщикКПП) Тогда
		СтрокаЭкспорта.ПлательщикКПП = ВыборкаДляЭкспорта.КПППлательщика;
	КонецЕсли;
	
//ПолучательКПП
	Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПолучательКПП) Тогда
		СтрокаЭкспорта.ПолучательКПП = ВыборкаДляЭкспорта.КПППолучателя;
	КонецЕсли;
	
	КодПредусмотренСтандартамиОбмена = СтрокаЭкспорта.Свойство("Код");
	КодВыгружаетсяВОтдельномПоле     = ВыборкаДляЭкспорта.Дата >= ПлатежиВБюджетКлиентСервер.НачалоПримененияИдентификатораПлатежа();
	Если КодВыгружаетсяВОтдельномПоле И КодПредусмотренСтандартамиОбмена Тогда
		Если НЕ ПустаяСтрока(ВыборкаДляЭкспорта.ИдентификаторПлатежа) Тогда
			СтрокаЭкспорта.Код = ВыборкаДляЭкспорта.ИдентификаторПлатежа;
		КонецЕсли;
	КонецЕсли;
	
//СтатусСоставителя, ПлательщикКПП ПолучательКПП ПоказательКБК ОКАТО/ОКТМО ПоказательОснования ПоказательПериода ПоказательНомера ПоказательДаты ПоказательТипа Код
	Если ВыборкаДляЭкспорта.ПеречислениеВБюджет Тогда
		СтрокаЭкспорта.СтатусСоставителя = ВыборкаДляЭкспорта.СтатусСоставителя;
		
		Если НЕ ПустаяСтрока(ВыборкаДляЭкспорта.КПППлательщика) Тогда
			СтрокаЭкспорта.ПлательщикКПП = ВыборкаДляЭкспорта.КПППлательщика;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ВыборкаДляЭкспорта.КПППолучателя) Тогда
			СтрокаЭкспорта.ПолучательКПП = ВыборкаДляЭкспорта.КПППолучателя;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ВыборкаДляЭкспорта.КодБК) Тогда
			СтрокаЭкспорта.ПоказательКБК = ВыборкаДляЭкспорта.КодБК;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ВыборкаДляЭкспорта.КодОКАТО) Тогда
			СтрокаЭкспорта.ОКАТО = ВыборкаДляЭкспорта.КодОКАТО;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ВыборкаДляЭкспорта.ПоказательОснования) Тогда
			СтрокаЭкспорта.ПоказательОснования = ВыборкаДляЭкспорта.ПоказательОснования;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ВыборкаДляЭкспорта.ПоказательПериода) И ВыборкаДляЭкспорта.ПоказательПериода <> "  .  .    " Тогда
			СтрокаЭкспорта.ПоказательПериода = ВыборкаДляЭкспорта.ПоказательПериода;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ВыборкаДляЭкспорта.ПоказательНомера) Тогда
			СтрокаЭкспорта.ПоказательНомера = ВыборкаДляЭкспорта.ПоказательНомера;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ВыборкаДляЭкспорта.ПоказательДаты) Тогда
			СтрокаЭкспорта.ПоказательДаты = ВыборкаДляЭкспорта.ПоказательДаты;
		КонецЕсли;
		
		ПоказательТипаПредусмотренСтандартамиОбмена = СтрокаЭкспорта.Свойство("ПоказательТипа");
		Если ПоказательТипаПредусмотренСтандартамиОбмена Тогда
			Если ВыборкаДляЭкспорта.Дата >= ПлатежиВБюджетКлиентСервер.НачалоДействияПриказа126н() Тогда
				СтрокаЭкспорта.ПоказательТипа = "0";
			Иначе
				СтрокаЭкспорта.ПоказательТипа = ВыборкаДляЭкспорта.ПоказательТипа;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
//СрокАкцепта, ДатаОтсылкиДок, УсловиеОплаты1
	Если ВыборкаДляЭкспорта.ВидДокумента = "Платежное требование" Тогда
		СтрокаЭкспорта.СрокАкцепта = ВыборкаДляЭкспорта.СрокАкцепта;
		СтрокаЭкспорта.ДатаОтсылкиДок = ВыборкаДляЭкспорта.ДатаОтсылкиДок;
		СтрокаЭкспорта.УсловиеОплаты1 = ВыборкаДляЭкспорта.УсловиеОплаты1;
	КонецЕсли;
	
//Очередность
	СтрокаЭкспорта.Очередность = "" + ВыборкаДляЭкспорта.ОчередностьПлатежа;
	
//НазначениеПлатежа, НазначениеПлатежа1 НазначениеПлатежа2 НазначениеПлатежа3 НазначениеПлатежа4 НазначениеПлатежа5 НазначениеПлатежа6
	СтрокаЭкспорта.НазначениеПлатежа = СтрЗаменить(ВыборкаДляЭкспорта.НазначениеПлатежа, Символы.ПС + Символы.ВК, " ");
	СтрокаЭкспорта.НазначениеПлатежа = СтрЗаменить(
		СтрЗаменить(СтрЗаменить(СтрокаЭкспорта.НазначениеПлатежа, Символы.ПС, " "), Символы.ВК, " "), Символы.ПФ, " ");
	КоличествоСтрокНП = СтрЧислоСтрок(ВыборкаДляЭкспорта.НазначениеПлатежа);
	
	Если КоличествоСтрокНП > 6 Тогда
		КоличествоСтрокНП = 6;
	КонецЕсли;
	
	Для Сч = 1 По КоличествоСтрокНП Цикл
		СтрокаЭкспорта["НазначениеПлатежа" + Сч] = СтрПолучитьСтроку(ВыборкаДляЭкспорта.НазначениеПлатежа, Сч);
	КонецЦикла;
	
	Для Сч = (КоличествоСтрокНП + 1) По 6 Цикл
		СтрокаЭкспорта["НазначениеПлатежа" + Сч] = "";
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьЗначениеЭкспорта

Процедура ЗаполнитьНулемПустыеЗначенияРеквизитовПлатежаВБюджет(СтрокаЭкспорта) Экспорт
	
	Если НЕ СтрокаЭкспорта.ПеречислениеВБюджет Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(СтрокаЭкспорта.КПППлательщика) Тогда
		СтрокаЭкспорта.КПППлательщика = "0";
	КонецЕсли;
	
	Если ПустаяСтрока(СтрокаЭкспорта.КПППолучателя) Тогда
		СтрокаЭкспорта.КПППолучателя = "0";
	КонецЕсли;
	
	Если ПустаяСтрока(СтрокаЭкспорта.КодБК) Тогда
		СтрокаЭкспорта.КодБК = "0";
	КонецЕсли;
	
	Если ПустаяСтрока(СтрокаЭкспорта.КодОКАТО) Тогда
		СтрокаЭкспорта.КодОКАТО = "0";
	КонецЕсли;
	
	Если ПустаяСтрока(СтрокаЭкспорта.ПоказательОснования) Тогда
		СтрокаЭкспорта.ПоказательОснования = "0";
	КонецЕсли;
	
	Если ПустаяСтрока(СтрокаЭкспорта.ПоказательПериода) Тогда
		СтрокаЭкспорта.ПоказательПериода = "0";
	КонецЕсли;
	
	Если ПустаяСтрока(СтрокаЭкспорта.ПоказательНомера) Тогда
		СтрокаЭкспорта.ПоказательНомера = "0";
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СтрокаЭкспорта.ПоказательТипа) Тогда
		СтрокаЭкспорта.ПоказательТипа = "";
	КонецЕсли;
	
	Если ПустаяСтрока(СтрокаЭкспорта.ПоказательДаты) Тогда
		СтрокаЭкспорта.ПоказательДаты = "0";
	КонецЕсли;
	
	Если ПустаяСтрока(СтрокаЭкспорта.ИдентификаторПлатежа) Тогда
		СтрокаЭкспорта.ИдентификаторПлатежа = "0";
	КонецЕсли;
	
КонецПроцедуры

// Функция получает секцию документа
//
Функция ПолучитьСекциюДокумент(СтруктураДокумента, Организация, ВерсияФормата, ЗаполнятьПоказательТипа)
	
	Буфер    = "";
	Реквизит = "";
	Секция   = СформироватьСтруктуруЭкспорта(ВерсияФормата);
	ЗаполнитьЗначениеЭкспорта(Секция, СтруктураДокумента);
	
	ДобавитьВСтроку(Буфер, "СекцияДокумент=" + СтруктураДокумента.ВидДокумента);
	
	Для каждого ВыгружаемыйРеквизит Из Секция Цикл
		
		Значение = ПривестиЗначение(ВыгружаемыйРеквизит.Значение);
		
		Если НЕ ПустаяСтрока(Значение) Тогда
			Если Не ЗаполнятьПоказательТипа И ВыгружаемыйРеквизит.Ключ = "ПоказательТипа" Тогда
				ДобавитьВСтроку(Буфер, ВыгружаемыйРеквизит.Ключ + "="); // Секция должна выгружаться пустой, потому что в банках может остаться ПО, которое ожидает такой ключ.
			Иначе
				ДобавитьВСтроку(Буфер, ВыгружаемыйРеквизит.Ключ + "=" + Значение);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавитьВСтроку(Буфер, "КонецДокумента");
	
	Возврат Буфер;
	
КонецФункции

// Процедура добавляет переданное значение в строку
//
Процедура ДобавитьВСтроку(Буфер, НоваяСтрока, Разделитель = "")
	
	Если ПустаяСтрока(Буфер) Тогда
		Буфер = НоваяСтрока;
	Иначе
		УжеЕстьФразаОшибкаВФайле = СтрНайти(Буфер, "Ошибка в файле. ") > 0;
		Если УжеЕстьФразаОшибкаВФайле Тогда
			НоваяСтрока = СтрЗаменить(НоваяСтрока, "Ошибка в файле. ", "");
		КонецЕсли;
		
		Шаблон = НСтр("ru = '%1%2%3'");
		Буфер  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					Шаблон,
					Буфер,
					?(ПустаяСтрока(Разделитель), Символы.ПС, Разделитель),
					НоваяСтрока);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеНалоговыхРеквизитов(СтрокаЭкспорта)
	
	// СтрокаЭкспорта - строка табличной части ПлатежныеДокументы обработки
	
	Если НЕ ПлатежиВБюджетКлиентСервер.ДействуетПриказ107н(СтрокаЭкспорта.Дата) Тогда
		// До даты применения 107н не выполняем проверку, так как был переходный период,
		// в течение которого непонятно, выполнение каких правил контролировать
		Возврат;
	КонецЕсли;
	
	РеквизитыПлатежаВБюджет = ПлатежиВБюджетКлиентСервер.НовыйРеквизитыПлатежаВБюджет();
	Если СтрокаЭкспорта.ВидДокумента = "Платежное поручение" Тогда
		РеквизитыПлатежаВБюджет.ВидПеречисления = СтрокаЭкспорта.Документ.ВидПеречисленияВБюджет;
	КонецЕсли;
	
	РеквизитыПлатежаВБюджет.ИдентификаторПлатежа = СтрокаЭкспорта.ИдентификаторПлатежа;
	РеквизитыПлатежаВБюджет.СтатусПлательщика    = СтрокаЭкспорта.СтатусСоставителя;
	РеквизитыПлатежаВБюджет.КБК                  = СтрокаЭкспорта.КодБК;
	РеквизитыПлатежаВБюджет.КодТерритории        = СтрокаЭкспорта.КодОКАТО;
	РеквизитыПлатежаВБюджет.ОснованиеПлатежа     = СтрокаЭкспорта.ПоказательОснования;
	РеквизитыПлатежаВБюджет.НалоговыйПериод      = СтрокаЭкспорта.ПоказательПериода;
	РеквизитыПлатежаВБюджет.НомерДокумента       = СтрокаЭкспорта.ПоказательНомера;
	РеквизитыПлатежаВБюджет.ДатаДокумента        = СтрокаЭкспорта.ПоказательДаты;
	РеквизитыПлатежаВБюджет.ТипПлатежа           = СтрокаЭкспорта.ПоказательТипа;
	
	ИсточникДанных = ПлатежиВБюджетПереопределяемый.НовыйИсточникДанныхКонтекстаПлатежногоДокумента();
	ИсточникДанных.Организация    = СтрокаЭкспорта.ОрганизацияСчет.Владелец;
	ИсточникДанных.Период         = СтрокаЭкспорта.Дата;
	ИсточникДанных.СчетПолучателя = СтрокаЭкспорта.КонтрагентСчет;
	ИсточникДанных.Налог          = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоКБК(СтрокаЭкспорта.КодБК);
	Контекст = ПлатежиВБюджетПереопределяемый.КонтекстПлатежногоДокумента(ИсточникДанных);
	
	// В незаполненных полях проставим "0"
	ПлатежиВБюджетКлиентСервер.ОтметитьНезаполненныеЗначения(РеквизитыПлатежаВБюджет);
	
	РезультатПроверки = ПлатежиВБюджетКлиентСервер.ПроверитьЗаполнение(РеквизитыПлатежаВБюджет, Контекст);
	Ошибки = РезультатПроверки.Ошибки;
	
	// Проверим дубли УИН
	ИнформацияДублиУИН = ПлатежиВБюджет.ПроверитьДублиУИН(РеквизитыПлатежаВБюджет.ИдентификаторПлатежа, СтрокаЭкспорта.Документ);
	Для каждого ОписаниеОшибки Из ИнформацияДублиУИН Цикл
		Ошибки.Добавить(ОписаниеОшибки);
	КонецЦикла;
	
	// Выведем результат проверки
	Для каждого Ошибка Из Ошибки Цикл
		ДобавитьЗамечание(СтрокаЭкспорта, 4, Ошибка.Описание); // 4 означает, что выгрузить можно только после ознакомления с ошибкой
	КонецЦикла;
	
	// Дополнительные проверки по Приказу Минфина России от 23 сентября 2015 г. № 148н.
	Если Лев(СтрокаЭкспорта.ИННПлательщика, 2) = "00" Тогда
		ДобавитьЗамечание(СтрокаЭкспорта, 4, НСтр("ru = 'Первые две цифры ИНН плательщика не могут быть ""00""'"));
	КонецЕсли;
	Если Лев(СтрокаЭкспорта.ИННПолучателя, 2) = "00" Тогда
		ДобавитьЗамечание(СтрокаЭкспорта, 4, НСтр("ru = 'Первые две цифры ИНН получателя не могут быть ""00""'"));
	КонецЕсли;
	Если Лев(СтрокаЭкспорта.КПППлательщика, 2) = "00" Тогда
		ДобавитьЗамечание(СтрокаЭкспорта, 4, НСтр("ru = 'КПП плательщика не должен начинаться на 00'"));
	КонецЕсли;
	Если Лев(СтрокаЭкспорта.КПППолучателя, 2) = "00" Тогда
		ДобавитьЗамечание(СтрокаЭкспорта, 4, НСтр("ru = 'КПП получателя не должен начинаться на 00'"));
	КонецЕсли;
	
КонецПроцедуры

// Процедура добавляет замечание
//
Процедура ДобавитьЗамечание(СтрокаДокумента, НоваяГотовность, ТекстЗамечания) Экспорт
	
	Если СтрокаДокумента.Готовность < НоваяГотовность Тогда
		СтрокаДокумента.Готовность = НоваяГотовность;
	КонецЕсли;
	ДобавитьВСтроку(СтрокаДокумента.ОписаниеОшибок, ТекстЗамечания, "; ");
	СтрокаДокумента.ЕстьОшибка = НоваяГотовность <> 0;
	
КонецПроцедуры

// Функция формирует значение на основании типа переданного значения
//
Функция ПривестиЗначение(Значение)
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		
		Возврат СокрЛП(Значение);
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
		
		Возврат Формат(Значение, "ЧРД=.; ЧРГ=' '; ЧГ=0");
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
		
		Возврат Формат(Значение, "ДФ=dd.MM.yyyy");
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

// Функция проверяет наличие в строке только цифр
//
Функция ЕстьНеЦифры(Знач СтрокаПроверки)
	
	Если ТипЗнч(СтрокаПроверки) <> Тип("Строка") Тогда
		Возврат Истина;
	КонецЕсли;
	
	СтрокаПроверки = СокрЛП(СтрокаПроверки);
	Длина = СтрДлина(СтрокаПроверки);
	
	Для Ном = 1 По Длина Цикл
		Если СтрНайти("0123456789", Сред(СтрокаПроверки, Ном, 1)) = 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ИмпортДокументов

Функция ЕстьОшибкиРаспознавания(РаспознанныеВыписки)
	
	Для Каждого КлючИЗначение Из РаспознанныеВыписки Цикл
		Выписка             = КлючИЗначение.Ключ;
		РаспознаннаяВыписка = КлючИЗначение.Значение;
		Если РаспознаннаяВыписка.Предупреждения.Количество() > 0 Тогда
			Возврат Истина;
		КонецЕсли;
		
		Для Каждого Операция Из РаспознаннаяВыписка.Операции Цикл
			
			// Если есть предупреждение в строке
			Если Операция.Предупреждения <> Неопределено Тогда
				Возврат Истина;
			КонецЕсли;
			
			// Если не удалось распознать операцию
			ЕстьОшибкиРаспознавания = НЕ ЗначениеЗаполнено(Операция.Ссылка)
				И НЕ ЗначениеЗаполнено(Операция.ХозяйственнаяОперация)
				И НЕ ЗначениеЗаполнено(Операция.ПлатежноеПоручение);
			
			Если ЕстьОшибкиРаспознавания Тогда
				Возврат Истина;
			КонецЕсли;
			
			// Если есть не заполненные реквизиты
			Если Операция.ХозяйственнаяОперация <> Неопределено Тогда
				ХозяйственнаяОперация = Операция.ХозяйственнаяОперация;
				
				// Банковский счет должен быть заполнен
				Если НЕ ХозяйственнаяОперация.Свойство("БанковскийСчетКонтрагента")
					ИЛИ ХозяйственнаяОперация.Свойство("БанковскийСчетКонтрагента") И НЕ ЗначениеЗаполнено(ХозяйственнаяОперация.БанковскийСчетКонтрагента) Тогда
					Возврат Истина;
				КонецЕсли;
				
				// Контрагент должен быть заполнен для конкретного вида операции
				ВидОперации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ХозяйственнаяОперация, "ВидОперацииДокумента");
				Если ВидОперации = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Если ТипЗнч(ВидОперации) = Тип("ПеречислениеСсылка.ВидыОперацийСписаниеДенежныхСредств") Тогда
					ТребуетсяКонтрагент = Документы.СписаниеСРасчетногоСчета.КонтрагентДолженБытьЗаполнен(ВидОперации);
				Иначе
					ТребуетсяКонтрагент = Документы.ПоступлениеНаРасчетныйСчет.КонтрагентДолженБытьЗаполнен(ВидОперации);
				КонецЕсли;
				Если ТребуетсяКонтрагент
					И НЕ ХозяйственнаяОперация.Свойство("Контрагент")
					ИЛИ ХозяйственнаяОперация.Свойство("Контрагент") И НЕ ЗначениеЗаполнено(ХозяйственнаяОперация.Контрагент) Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура ДобавитьВДокументыСозданныеПоВыписке(ТаблицаДокументыСозданныеПоВыписке, РезультатСозданияДокументов, Выписка)
	
	Для Каждого КлючИЗначение Из РезультатСозданияДокументов Цикл
		СтрокаОперации = Выписка.Значение.Операции.Найти(КлючИЗначение.Ключ, "Идентификатор");
		Если СтрокаОперации = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		СтрокаРезультат         = ТаблицаДокументыСозданныеПоВыписке.Добавить();
		СтрокаРезультат.Выписка = Выписка.Ключ;
		ЗаполнитьЗначенияСвойств(СтрокаРезультат, КлючИЗначение.Значение);
		Если СтрокаОперации.ПоступилоСписано = "Поступило" Тогда
			СтрокаРезультат.СуммаПоступило = СтрокаОперации.Сумма;
		Иначе
			СтрокаРезультат.СуммаСписано   = СтрокаОперации.Сумма;
		КонецЕсли;
	КонецЦикла
	
КонецПроцедуры

Процедура ПолучитьДанныеВладельцаСчета(РезультатЗагрузкиИзЖурнала, РаспознанныеВыписки)
	
	// Соберем уникальные значения организаций, банковских счетов и валют
	Организации     = Новый Соответствие;
	БанковскиеСчета = Новый Соответствие; 
	ВалютыСчета     = Новый Соответствие;
	Для Каждого КлючИЗначение Из РаспознанныеВыписки Цикл
		РаспознаннаяВыписка = КлючИЗначение.Значение;
		Если НЕ ЗначениеЗаполнено(РаспознаннаяВыписка.ВладелецСчета.БанковскийСчет) Тогда
			Продолжить;
		КонецЕсли;
		Организации.Вставить(РаспознаннаяВыписка.ВладелецСчета.Организация, Истина);
		БанковскиеСчета.Вставить(РаспознаннаяВыписка.ВладелецСчета.БанковскийСчет, Истина);
		ВалютыСчета.Вставить(РаспознаннаяВыписка.ВладелецСчета.ВалютаСчета, Истина);
	КонецЦикла;
	
	// Если Организация одна, передадим её в качестве отбора
	Если Организации.Количество() = 1 Тогда
		Для Каждого КлючИЗначение Из Организации Цикл
			РезультатЗагрузкиИзЖурнала.Вставить("Организация", КлючИЗначение.Ключ);
		КонецЦикла;
	// Если несколько, то очистим отбор
	ИначеЕсли Организации.Количество() > 1 Тогда
		РезультатЗагрузкиИзЖурнала.Вставить("Организация", Неопределено);
	КонецЕсли;
	
	Если БанковскиеСчета.Количество() = 1 Тогда
		Для Каждого КлючИЗначение Из БанковскиеСчета Цикл
			РезультатЗагрузкиИзЖурнала.Вставить("БанковскийСчет", КлючИЗначение.Ключ);
		КонецЦикла;
	ИначеЕсли БанковскиеСчета.Количество() > 1 Тогда
		РезультатЗагрузкиИзЖурнала.Вставить("БанковскийСчет", Неопределено);
	КонецЕсли;
	
	Если ВалютыСчета.Количество() = 1 Тогда
		Для Каждого КлючИЗначение Из ВалютыСчета Цикл
			РезультатЗагрузкиИзЖурнала.Вставить("ВалютаСчета", КлючИЗначение.Ключ);
		КонецЦикла;
	ИначеЕсли ВалютыСчета.Количество() > 1 Тогда
		РезультатЗагрузкиИзЖурнала.Вставить("ВалютаСчета", Неопределено);
	КонецЕсли;
	
КонецПроцедуры

Функция РезультатСозданияДокументов(ТаблицаДокументыСозданныеПоВыписке)
	
	РезультатСозданияДокументов = Новый Структура;
	СозданныеДокументы = ТаблицаДокументыСозданныеПоВыписке.Скопировать(Новый Структура("Успешно", Истина));
	Если СозданныеДокументы.Количество() > 0 Тогда
		СозданныеДокументы.Сортировать("Ссылка");
		РезультатСозданияДокументов.Вставить("КоличествоЗагружено", СозданныеДокументы.Количество());
		РезультатСозданияДокументов.Вставить("СуммаПоступило",      СозданныеДокументы.Итог("СуммаПоступило"));
		РезультатСозданияДокументов.Вставить("СуммаСписано",        СозданныеДокументы.Итог("СуммаСписано"));
		РезультатСозданияДокументов.Вставить("ПервыйЗагруженный",   СозданныеДокументы[0].Ссылка);
	КонецЕсли;
	
	Возврат РезультатСозданияДокументов;
	
КонецФункции

Функция СсылкиНаСозданныеОбъекты(СсылкиКСозданию, ОшибкиСоздания)
	
	МассивОшибок = ОшибкиСоздания.ВыгрузитьКолонку("Ссылка");
	СсылкиНаСозданныеОбъекты = Новый Массив;
	Для Каждого КлючИЗначение Из СсылкиКСозданию Цикл
		Для Каждого Ссылка Из СсылкиКСозданию[КлючИЗначение.Ключ] Цикл
			Если МассивОшибок.Найти(Ссылка.Ключ) = Неопределено Тогда
				СсылкиНаСозданныеОбъекты.Добавить(Ссылка.Ключ);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат СсылкиНаСозданныеОбъекты;
	
КонецФункции

Функция НужноСоздатьНовыеОбъекты(УчастникиОперации)
	
	НужноСоздатьНовыеОбъекты = Ложь;
	Для Каждого КлючИЗначение Из УчастникиОперации.НовыеОбъекты Цикл
		Если КлючИЗначение.Значение.Количество() > 0 Тогда
			НужноСоздатьНовыеОбъекты = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НужноСоздатьНовыеОбъекты;
	
КонецФункции

#КонецОбласти

#КонецЕсли