#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Функция СистемаНалогообложенияПоУмолчанию() Экспорт
	
	Возврат "УпрощеннаяДоходы";
	
КонецФункции

Функция СистемыНалогообложенияДопускающиеСовмещение() Экспорт
	
	СистемыНалогообложенияДопускающиеСовмещение = Новый Массив;
	
	СистемыНалогообложенияДопускающиеСовмещение.Добавить("УпрощеннаяДоходы");
	СистемыНалогообложенияДопускающиеСовмещение.Добавить("УпрощеннаяДоходыМинусРасходы");
	СистемыНалогообложенияДопускающиеСовмещение.Добавить("Общая");
	
	Возврат СистемыНалогообложенияДопускающиеСовмещение;
	
КонецФункции

Функция ВидОрганизации(ИНН) Экспорт
	
	Возврат ?(СтрДлина(СокрЛП(ИНН)) = 10, "ЮридическоеЛицо", "ИндивидуальныйПредприниматель");
	
КонецФункции

Процедура ПодключитьИнтернетПоддержку(ПараметрыЗадания, АдресХранилища) Экспорт
	
	ДанныеАутентификации = Новый Структура("Логин, Пароль", ПараметрыЗадания.ЛогинИПП, ПараметрыЗадания.ПарольИПП);
	ИнтернетПоддержкаПользователей.СохранитьДанныеАутентификации(ДанныеАутентификации);
	
	Результат = "ПодключениеУспешно";
	
	Попытка
		
		РезультатПолученияТикета = ИнтернетПоддержкаПользователей.ТикетАутентификацииНаПорталеПоддержки("https://api.orgregister.1c.ru/orgregister/");
		Если НЕ ЗначениеЗаполнено(РезультатПолученияТикета.КодОшибки) Тогда
			// Проверить подключение к 1С-Контрагент
			
			НайденныеРеквизиты = ДанныеЕдиныхГосРеестров.РеквизитыЮридическихЛицПоНаименованию("ТестовыйКонтрагент");
			Если ЗначениеЗаполнено(НайденныеРеквизиты.ОписаниеОшибки) Тогда
				Если ВРЕГ(НайденныеРеквизиты.ОписаниеОшибки) = ВРЕГ("НеУказаныПараметрыАутентификации")
					ИЛИ ВРЕГ(НайденныеРеквизиты.ОписаниеОшибки) = ВРЕГ("НеУказанПароль") Тогда
					Результат = "ОшибкаАвторизации";
				ИначеЕсли ВРЕГ(НайденныеРеквизиты.ОписаниеОшибки) = ВРЕГ("Сервис1СКонтрагентНеПодключен") Тогда
					Результат = "Сервис1СКонтрагентНеПодключен";
				Иначе
					Результат = "Неопределено";
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если ВРЕГ(РезультатПолученияТикета.КодОшибки) = ВРЕГ("НеверныйЛогинИлиПароль") Тогда
				Результат = "ОшибкаАвторизации";
			ИначеЕсли ВРЕГ(РезультатПолученияТикета.КодОшибки) = ВРЕГ("ОшибкаПодключения") Тогда
				Результат = "ОшибкаПодключения";
			ИначеЕсли ВРЕГ(РезультатПолученияТикета.КодОшибки) = ВРЕГ("ОшибкаСервиса") Тогда
				Результат = "ОшибкаСервиса";
			Иначе
				Результат = "Неопределено";
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		Результат = "Неопределено";
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
	КонецПопытки;
	
	Если Результат <> "ПодключениеУспешно"
		И Результат <> "Сервис1СКонтрагентНеПодключен" Тогда
		// Отключаем интернет-поддержку
		ИнтернетПоддержкаПользователей.СохранитьДанныеАутентификации(Неопределено);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Функция СобытиеЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Интернет-поддержка пользователей'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Функция ПолучитьДанныеОрганизации() Экспорт

	Результат = Новый Структура("Организация, ИНН, НаименованиеСокращенное");
	Результат.Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
	Если Не Результат.Организация.Пустая() Тогда
		
		ДанныеОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Результат.Организация, "ИНН, НаименованиеСокращенное");
		Результат.ИНН						 = ДанныеОрганизации.ИНН;
		Результат.НаименованиеСокращенное	 = ДанныеОрганизации.НаименованиеСокращенное;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РегистрацияОрганизации(ДанныеОрганизации, Регистрации) Экспорт
	
	Для Каждого Регистрация Из Регистрации Цикл
		Данные = Регистрация.СведенияОРегистрации.ДанныеРегистрации;
		Если ДанныеОрганизации.ИНН = Данные.ИНН Тогда
			Возврат Регистрация;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

#Область РежимРаботыПользователя

// Функция возвращает режим работы пользователя.
//
// Возвращаемое значение - Строка - см. НовыйРежимРаботыПользователя()
//
Функция РежимРаботыВыборПользователя() Экспорт
	
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		ИмяНастройкиНачалаРаботыПрогрессПользователя(),
		ИмяНастройкиРежимРаботы(),
		"");
	
КонецФункции

// Процедура сохраняет режим работы пользователя.
// 
// Параметры:
//    РежимРаботы - Строка - см. НовыйРежимРаботыПользователя()
//
Процедура СохранитьРежимРаботыПользователя(Знач РежимРаботы) Экспорт
	
	РежимРаботыПользователя = НовыйРежимРаботыПользователя();
	Если Не РежимРаботыПользователя.Свойство(РежимРаботы) Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Неизвестный режим работы: %1'"), РежимРаботы);
	КонецЕсли;
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		ИмяНастройкиНачалаРаботыПрогрессПользователя(),
		ИмяНастройкиРежимРаботы(),
		РежимРаботы);

КонецПроцедуры

Функция НовыйРежимРаботыПользователя() Экспорт
	
	РежимРаботы = Новый Структура;
	РежимРаботы.Вставить("БыстрыйСтарт", "БыстрыйСтарт");
	РежимРаботы.Вставить("Регистрация", "Регистрация");
	РежимРаботы.Вставить("ВнесениеИзменений", "ВнесениеИзменений");
	Возврат РежимРаботы;
	
КонецФункции

Функция ИмяНастройкиНачалаРаботыПрогрессПользователя()

	Возврат "НачалоРаботыПрогрессПользователя";

КонецФункции

Функция ИмяНастройкиРежимРаботы()

	Возврат "РежимРаботы";

КонецФункции

#КонецОбласти

#КонецЕсли