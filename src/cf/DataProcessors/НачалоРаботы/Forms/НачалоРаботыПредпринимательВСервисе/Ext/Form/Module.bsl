#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьОписаниеСсылок();
	ПоказыватьПриОткрытииПрограммы = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НачалоРаботыПредпринимательВСервисе", "Показывать", Истина);
	Если ПолучитьФункциональнуюОпцию("РегистрацияНеЗавершена") Тогда
		ДанныеПомощникаРегистрации = Обработки.РегистрацияОрганизации.ДанныеПомощникаРегистрации();
		Организация = ДанныеПомощникаРегистрации.Заявление.Ссылка;
	Иначе
		Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;
	
	ПодготовитьТекстСпискаДействий();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("ЗаписатьНовыеСобытияВЖурналРегистрации", 60, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьНовыеСобытияВЖурналРегистрации();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СписокДействийПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПерейтиПоСсылке(ДанныеСобытия.Href);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьПриОткрытииПрограммыПриИзменении(Элемент)
	
	СохранитьНастройкиПоказыватьПриОткрытииПрограммы(ПоказыватьПриОткрытииПрограммы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СообщитьОНенайденном(Команда)
	
	Если ПустаяСтрока(ТекстСообщения) Тогда
		ТекстПредупреждения = НСтр("ru='Напишите, что не удалось найти.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		ТекущийЭлемент = Элементы.ТекстСообщения;
		Возврат;
	КонецЕсли;
	
	ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(
		СобытиеЖурналаРегистрацииСообщение(),
		,
		ТекстСообщения,
		,
		Истина); // Сообщение сразу записываем.
	ПоказатьОповещениеПользователя(НСтр("ru='Сообщение отправлено'"), , ТекстСообщения);
	
	ТекстСообщения = "";	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьТекстСпискаДействий()
	
	ВидОрганизации = Неопределено;
	Если ЗначениеЗаполнено(Организация) Тогда
		ВидОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ЮридическоеФизическоеЛицо");
	КонецЕсли;
	ЭтоЮрЛицо = ВидОрганизации = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	Макет = Обработки.НачалоРаботы.ПолучитьМакет("НачалоРаботыПредпринимательВСервисе");
	ПоказатьУСН    = ПолучитьФункциональнуюОпцию("ИспользуетсяУСН");
	ПоказатьЕНВД   = ПолучитьФункциональнуюОпцию("ИспользуетсяЕНВД");
	ПоказатьПатент = ПолучитьФункциональнуюОпцию("ИспользуетсяУСНПатент");
	Показать1СОтчетность = НЕ ИнтерфейсыВзаимодействияБРО.ОрганизацияИмеетУчетнуюЗапись(Организация);
	ПоказатьИнструкциюПоРегистрации = ПолучитьФункциональнуюОпцию("РегистрацияНеЗавершена");
	ПоказатьИнструкциюПоИзменениямЕГРЮЛ = ПолучитьФункциональнуюОпцию("ИзмененияЕГРЗавершены") И ЭтоЮрЛицо;
	ПоказатьИнструкциюПоИзменениямЕГРИП = ПолучитьФункциональнуюОпцию("ИзмененияЕГРЗавершены") И НЕ ЭтоЮрЛицо;
	АдресДемоБазы = Константы.АдресДемобазы.Получить();
	ПоказатьСсылкуНаДемоБазу = ПоказатьИнструкциюПоРегистрации И ЗначениеЗаполнено(АдресДемоБазы);
	ПоказатьДляЮридическогоЛица = ПоказатьИнструкциюПоРегистрации И ЭтоЮрЛицо;
	
	ДокументHTML = Макет.ПолучитьДокументHTML();
	Если НЕ ПоказатьИнструкциюПоРегистрации Тогда
		УдалитьБлокHTMLПоИдентификатору(ДокументHTML, "Регистрация");
	КонецЕсли;
	Если НЕ ПоказатьИнструкциюПоИзменениямЕГРЮЛ Тогда
		УдалитьБлокHTMLПоИдентификатору(ДокументHTML, "ИзмененияЕГРЮЛ");
	КонецЕсли;
	Если ПоказатьИнструкциюПоИзменениямЕГРЮЛ И ЗначениеЗаполнено(Организация) Тогда
		ЗаявлениеРегистрацииИзмененийЕГРЮЛ = НайтиЗаявлениеОРегистрации(Организация, "ЗаявлениеРегистрацииИзмененийЕГРЮЛ");
		Если ЗаявлениеРегистрацииИзмененийЕГРЮЛ = Неопределено Или Не ЗначениеЗаполнено(ЗаявлениеРегистрацииИзмененийЕГРЮЛ.Ссылка) Тогда
			УдалитьБлокHTMLПоИдентификатору(ДокументHTML, "ЗаявлениеРегистрацииИзмененийЕГРЮЛ");
		КонецЕсли;
		ЗаявлениеРегистрацииИзмененийУчредительныхДокументов = НайтиЗаявлениеОРегистрации(Организация, "ЗаявлениеРегистрацииИзмененийУчредительныхДокументов");
		Если ЗаявлениеРегистрацииИзмененийУчредительныхДокументов = Неопределено Или Не ЗначениеЗаполнено(ЗаявлениеРегистрацииИзмененийУчредительныхДокументов.Ссылка) Тогда
			УдалитьБлокHTMLПоИдентификатору(ДокументHTML, "ЗаявлениеРегистрацииИзмененийУчредительныхДокументов");
		КонецЕсли;
		ПрикрепленныеФайлы = Справочники.Организации.ПрикрепленныеФайлыПоИмени(Организация, Обработки.РегистрацияОрганизации.ИменаФайлов());
		Для Каждого Идентификатор Из ИдентификаторыДокументовИзмененияЕГРЮЛ() Цикл
			Если Не ПрикрепленныеФайлы.Свойство(Идентификатор) Тогда
				УдалитьБлокHTMLПоИдентификатору(ДокументHTML, Идентификатор);
			КонецЕсли;
		КонецЦикла;
	Иначе
		УдалитьБлокHTMLПоИдентификатору(ДокументHTML, "ЗаявлениеРегистрацииИзмененийЕГРЮЛ");
		УдалитьБлокHTMLПоИдентификатору(ДокументHTML, "ЗаявлениеРегистрацииИзмененийУчредительныхДокументов");
		Для Каждого Идентификатор Из ИдентификаторыДокументовИзмененияЕГРЮЛ() Цикл
			УдалитьБлокHTMLПоИдентификатору(ДокументHTML, Идентификатор);
		КонецЦикла;
	КонецЕсли;
	Если НЕ ПоказатьИнструкциюПоИзменениямЕГРИП Тогда
		УдалитьБлокHTMLПоИдентификатору(ДокументHTML, "ИзмененияЕГРИП");
	КонецЕсли;
	Если ПоказатьИнструкциюПоИзменениямЕГРИП И ЗначениеЗаполнено(Организация) Тогда
		ЗаявлениеРегистрацииИзмененийЕГРИП = НайтиЗаявлениеОРегистрации(Организация, "ЗаявлениеРегистрацииИзмененийЕГРИП");
		Если ЗаявлениеРегистрацииИзмененийЕГРИП = Неопределено Или Не ЗначениеЗаполнено(ЗаявлениеРегистрацииИзмененийЕГРИП.Ссылка) Тогда
			УдалитьБлокHTMLПоИдентификатору(ДокументHTML, "ЗаявлениеРегистрацииИзмененийЕГРИП");
		КонецЕсли;
		ПрикрепленныеФайлы = Справочники.Организации.ПрикрепленныеФайлыПоИмени(Организация, Обработки.РегистрацияОрганизации.ИменаФайлов());
		Для Каждого Идентификатор Из ИдентификаторыДокументовИзмененияЕГРИП() Цикл
			Если Не ПрикрепленныеФайлы.Свойство(Идентификатор) Тогда
				УдалитьБлокHTMLПоИдентификатору(ДокументHTML, Идентификатор);
			КонецЕсли;
		КонецЦикла;
	Иначе
		УдалитьБлокHTMLПоИдентификатору(ДокументHTML, "ЗаявлениеРегистрацииИзмененийЕГРИП");
		Для Каждого Идентификатор Из ИдентификаторыДокументовИзмененияЕГРИП() Цикл
			УдалитьБлокHTMLПоИдентификатору(ДокументHTML, Идентификатор);
		КонецЦикла;
	КонецЕсли;
	Если НЕ ПоказатьИнструкциюПоИзменениямЕГРЮЛ И НЕ ПоказатьИнструкциюПоИзменениямЕГРИП Тогда
		УдалитьБлокHTMLПоИдентификатору(ДокументHTML, "ВводНачальныхОстатков");
	КонецЕсли;
	Если НЕ ПоказатьСсылкуНаДемоБазу Тогда
		УдалитьБлокHTMLПоИдентификатору(ДокументHTML, "Демоданные");
	КонецЕсли;
	Если НЕ ПоказатьДляЮридическогоЛица Тогда
		УдалитьБлокHTMLПоИдентификатору(ДокументHTML, "ЮридическоеЛицо");
	КонецЕсли;
	Если НЕ ПоказатьУСН Тогда
		УдалитьБлокHTMLПоИдентификатору(ДокументHTML, "УСН");
	КонецЕсли;
	Если НЕ ПоказатьЕНВД Тогда
		УдалитьБлокHTMLПоИдентификатору(ДокументHTML, "ЕНВД");
	КонецЕсли;
	Если НЕ ПоказатьПатент Тогда
		УдалитьБлокHTMLПоИдентификатору(ДокументHTML, "Патент");
	КонецЕсли;
	Если НЕ Показать1СОтчетность Тогда
		УдалитьБлокHTMLПоИдентификатору(ДокументHTML, "1СОтчетность");
	КонецЕсли;
	СписокДействий = ПолучитьТекстДокументаHTML(ДокументHTML);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИдентификаторыДокументовИзмененияЕГРЮЛ()
	
	Идентификаторы = Новый Массив;
	Идентификаторы.Добавить("Устав");
	Идентификаторы.Добавить("РешениеЕдинственногоУчредителя");
	Идентификаторы.Добавить("ПротоколСобранияУчредителейЕдинственногоУчредителя");
	Идентификаторы.Добавить("ПротоколСобранияУчредителей");
	Идентификаторы.Добавить("КвитанцияНаОплатуГоспошлины");
	Идентификаторы.Добавить("ИнструкцияПоВнесениюИзмененийВЕГРЮЛ");
	
	Возврат Идентификаторы;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИдентификаторыДокументовИзмененияЕГРИП()
	
	Идентификаторы = Новый Массив;
	Идентификаторы.Добавить("ИнструкцияПоВнесениюИзмененийВЕГРИП");
	
	Возврат Идентификаторы;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьОписаниеСсылок()

	ВсеСсылки = Новый Соответствие;
	
	// Регистрация
	// Регистрация.ПомощникРегистрации, Регистрация.РеквизитыОрганизации,
	// Регистрация.ПриказВступленииВДолжностьРуководителя - см. ПерейтиПоСсылке.
	
	// Перед началом работы
	ВсеСсылки.Вставить("ПередНачаломРаботы.ВводНачальныхОстатков", "e1cib/app/Обработка.ВводНачальныхОстатков");
	ВсеСсылки.Вставить("ПередНачаломРаботы.НалогиОтчеты", "e1cib/command/ОбщаяКоманда.НалогиИОтчеты");
	
	// Демоданные
	ВсеСсылки.Вставить("Демоданные.ОткрытьДемоданные", Константы.АдресДемобазы.Получить());
	
	// Отчетность
	ВсеСсылки.Вставить("Отчетность.ПомощникУСН",  "e1cib/app/Обработка.ПомощникРасчетаНалогаУСН");
	ВсеСсылки.Вставить("Отчетность.ПомощникЕНВД", "e1cib/app/Обработка.ПомощникРасчетаЕНВД");
	ВсеСсылки.Вставить("Отчетность.НовыйПатент",  "e1cib/command/Справочник.Патенты.Создать");
	ВсеСсылки.Вставить("Отчетность.СписокЗадач",  "e1cib/app/ОбщаяФорма.СписокЗадач");
	ВсеСсылки.Вставить("Отчетность.КнигаДоходовПатент", "e1cib/app/Отчет.КнигаУчетаДоходовПатент");
	// Отчетность.Подключение1СОтчетности - см. ПерейтиПоСсылке.
	
	// Аналитика
	ВсеСсылки.Вставить("Аналитика.Монитор",       "e1cib/app/ОбщаяФорма.МониторОсновныхПоказателей");
	ВсеСсылки.Вставить("Аналитика.ДоходыРасходы", "e1cib/app/Отчет.ДоходыРасходы");
	ВсеСсылки.Вставить("Аналитика.ЗадолженностьПокупателей", "e1cib/app/Отчет.ЗадолженностьПокупателей");
	ВсеСсылки.Вставить("Аналитика.НеоплаченныеСчета",        "e1cib/app/Отчет.АнализНеоплаченныхСчетовПокупателям");
	
	// Деньги
	ВсеСсылки.Вставить("Деньги.ПлатежныйКалендарь", "e1cib/app/Обработка.ПлатежныйКалендарь");
	ВсеСсылки.Вставить("Деньги.БанковскиеВыписки",  "e1cib/list/ЖурналДокументов.Деньги.Форма.БанковскиеВыписки");
	ВсеСсылки.Вставить("Деньги.ДосьеКонтрагента",   "e1cib/command/ОбщаяКоманда.ДосьеНовогоКонтрагента");
	// Деньги.ПодключениеДиректБанка - см. ПерейтиПоСсылке.
	
	// Документы
	ВсеСсылки.Вставить("Документы.НовыйСчет",    "e1cib/command/Документ.СчетНаОплатуПокупателю.Создать");
	ВсеСсылки.Вставить("Документы.НовыйДоговор", "e1cib/command/Справочник.ДоговорыКонтрагентов.Создать");
	ВсеСсылки.Вставить("Документы.ШаблоныДоговоров",          "e1cib/list/Справочник.ШаблоныДоговоров");
	ВсеСсылки.Вставить("Документы.НастройкиЭлектроннойПочты", "e1cib/list/Справочник.УчетныеЗаписиЭлектроннойПочты");
	// Документы.НовыйАкт, Документы.НоваяНакладная, Документы.Логотип - см. ПерейтиПоСсылке.
	
	// Товары
	ВсеСсылки.Вставить("Товары.Номенклатура",   "e1cib/list/Справочник.Номенклатура");
	ВсеСсылки.Вставить("Товары.ОстаткиТоваров", "e1cib/app/Отчет.ОстаткиТоваров");
	// Товары.НоваяНакладнаяПоставщика - см. ПерейтиПоСсылке.
	
	// Расходы на бизнес
	ВсеСсылки.Вставить("Расходы.НовоеПлатежноеПоручение", "e1cib/command/Документ.ПлатежноеПоручение.Создать");
	ВсеСсылки.Вставить("Расходы.НовыйАвансовыйОтчет",     "e1cib/command/Документ.АвансовыйОтчет.Создать");
	ВсеСсылки.Вставить("Расходы.КассовыеДокументы",       "e1cib/list/ЖурналДокументов.Деньги.Форма.КассовыеДокументы");
	// Расходы.НовыйАктПоставщика, Расходы.НоваяНакладнаяПоставщика - см. ПерейтиПоСсылке.
	
	// Другие возможности программы
	ВсеСсылки.Вставить("ДругиеВозможности.МобильноеПриложение", 
		"e1cib/app/ПланОбмена.МобильноеПриложениеПредприниматель.Форма.ФормаСинхронизацииСМобильнымПриложением");
	ВсеСсылки.Вставить("ДругиеВозможности.Функциональность", "e1cib/app/Обработка.ФункциональностьПрограммы");
	
	// Помощь
	ВсеСсылки.Вставить("Помощь.ОбращениеВСлужбуПоддержки",
		"e1cib/app/Обработка.ИнформационныйЦентр.Форма.ОбращенияВСлужбуПоддержки");
	ВсеСсылки.Вставить("Помощь.Видеоролики",     "http://its.1c.ru/clip8/?clip=buh8");
	ВсеСсылки.Вставить("Помощь.Бухобслуживание", "https://1cbo.ru/");
	
	ОписаниеСсылок = Новый ФиксированноеСоответствие(ВсеСсылки);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПерейтиПоСсылке(ПолнаяСсылкаHTML)
	
	Если НЕ ЗначениеЗаполнено(ПолнаяСсылкаHTML) Тогда
		Возврат;
	КонецЕсли;
	
	ЧастиСсылкиHTML   = СтрРазделить(ПолнаяСсылкаHTML, "/", Ложь);
	СсылкаHTML        = ЧастиСсылкиHTML.Получить(ЧастиСсылкиHTML.Количество() - 1);
	СсылкаДляПерехода = ОписаниеСсылок.Получить(СсылкаHTML);
	Если СсылкаДляПерехода <> Неопределено Тогда
		ПерейтиПоНавигационнойСсылке(СсылкаДляПерехода);
	Иначе
		Если СсылкаHTML = "Документы.НовыйАкт" Тогда
			ЗначенияЗаполнения = Новый Структура("ВидОперации", 
				ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.Услуги"));
			ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
			ОткрытьФорму("Документ.РеализацияТоваровУслуг.ФормаОбъекта", ПараметрыФормы);
			
		ИначеЕсли СсылкаHTML = "Документы.НоваяНакладная" Тогда
			ЗначенияЗаполнения = Новый Структура("ВидОперации", 
				ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.Товары"));
			ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
			ОткрытьФорму("Документ.РеализацияТоваровУслуг.ФормаОбъекта", ПараметрыФормы);
			
		ИначеЕсли СсылкаHTML = "Расходы.НовыйАктПоставщика" Тогда
			ЗначенияЗаполнения = Новый Структура("ВидОперации", 
				ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Услуги"));
			ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
			ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.ФормаОбъекта", ПараметрыФормы);
			
		ИначеЕсли СсылкаHTML = "Товары.НоваяНакладнаяПоставщика"
			ИЛИ СсылкаHTML = "Расходы.НоваяНакладнаяПоставщика" Тогда
			ЗначенияЗаполнения = Новый Структура("ВидОперации", 
				ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Товары"));
			ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
			ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.ФормаОбъекта", ПараметрыФормы);
			
		ИначеЕсли СсылкаHTML = "Отчетность.Подключение1СОтчетности" Тогда
			ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьФормуМастераЗаявленияНаПодключение(Организация);
			
		ИначеЕсли СсылкаHTML = "Деньги.ПодключениеДиректБанка" Тогда
			ОбменСБанкамиКлиент.ОткрытьСоздатьНастройкуОбмена(Организация, Неопределено);
			
		ИначеЕсли СсылкаHTML = "Документы.Логотип" Тогда
			ПараметрыФормы = Новый Структура("Ключ", Организация);
			ФормаОрганизации = ОткрытьФорму("Справочник.Организации.ФормаОбъекта", ПараметрыФормы);
			Если ФормаОрганизации.Элементы.Найти("ГруппаПечать") <> Неопределено Тогда
				ФормаОрганизации.ТекущийЭлемент = ФормаОрганизации.Элементы.ГруппаПечать;
			КонецЕсли;
			
		ИначеЕсли СсылкаHTML = "Регистрация.ПомощникРегистрации" Тогда
			
			НомерШагаПомощника = НомерШагаПомощника();
			Если ЗначениеЗаполнено(НомерШагаПомощника) Тогда
				РегистрацияОрганизацииКлиент.ОткрытьЭтап(НомерШагаПомощника());
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Сервис регистрации отключен или не используется'"));
			КонецЕсли;
			
		ИначеЕсли СсылкаHTML = "Регистрация.РеквизитыОрганизации" Тогда
			
			ПараметрыФормы = Новый Структура("Ключ", Организация);
			ФормаОрганизации = ОткрытьФорму("Справочник.Организации.ФормаОбъекта", ПараметрыФормы);
			Если ФормаОрганизации.Элементы.Найти("ИНН") <> Неопределено Тогда
				ФормаОрганизации.ТекущийЭлемент = ФормаОрганизации.Элементы.ИНН;
			КонецЕсли;
			
		ИначеЕсли СсылкаHTML = "Регистрация.ПриказВступленииВДолжностьРуководителя" Тогда
			
			ПараметрыПечати = Новый Структура("ЗаголовокФормы", НСтр("ru = 'Приказ о вступлении в должность руководителя'"));
			ПараметрКоманды = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Организация);
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Справочник.Организации", "ПриказВступленииВДолжностьРуководителя", ПараметрКоманды, ЭтотОбъект, ПараметрыПечати);
			
		ИначеЕсли СсылкаHTML = "ИзмененияЕГРИП.РеквизитыОрганизации"
			Или СсылкаHTML = "ИзмененияЕГРЮЛ.РеквизитыОрганизации" Тогда
			
			ПараметрыФормы = Новый Структура("Ключ", Организация);
			ФормаОрганизации = ОткрытьФорму("Справочник.Организации.ФормаОбъекта", ПараметрыФормы);
			
		ИначеЕсли СсылкаHTML = "ИзмененияЕГРИП.ЗаявлениеРегистрацииИзмененийЕГРИП"
			Или СсылкаHTML = "ИзмененияЕГРЮЛ.ЗаявлениеРегистрацииИзмененийЕГРЮЛ"
			Или СсылкаHTML = "ИзмененияЕГРЮЛ.ЗаявлениеРегистрацииИзмененийУчредительныхДокументов" Тогда
			
			ОткрытьЗаявлениеОРегистрации(СтрРазделить(СсылкаHTML, ".")[1]);
			
		ИначеЕсли СсылкаHTML = "ИзмененияЕГРИП.ИзменитьЗаявлениеРегистрацииИзмененийЕГРИП"
			Или СсылкаHTML = "ИзмененияЕГРЮЛ.ИзменитьЗаявлениеРегистрацииИзмененийЕГРЮЛ"
			Или СсылкаHTML = "ИзмененияЕГРЮЛ.ИзменитьЗаявлениеРегистрацииИзмененийУчредительныхДокументов" Тогда
			
			ИдентификаторЗаявления = Сред(СтрРазделить(СсылкаHTML, ".")[1], СтрДлина("Изменить") + 1);
			ИзменитьЗаявлениеОРегистрации(ИдентификаторЗаявления);
			
		ИначеЕсли СсылкаHTML = "ИзмененияЕГРЮЛ.Устав"
			Или СсылкаHTML = "ИзмененияЕГРЮЛ.РешениеЕдинственногоУчредителя"
			Или СсылкаHTML = "ИзмененияЕГРЮЛ.ПротоколСобранияУчредителейЕдинственногоУчредителя"
			Или СсылкаHTML = "ИзмененияЕГРЮЛ.ПротоколСобранияУчредителей"
			Или СсылкаHTML = "ИзмененияЕГРЮЛ.КвитанцияНаОплатуГоспошлины"
			Или СсылкаHTML = "ИзмененияЕГРЮЛ.ИнструкцияПоВнесениюИзмененийВЕГРЮЛ"
			Или СсылкаHTML = "ИзмененияЕГРИП.ИнструкцияПоВнесениюИзмененийВЕГРИП" Тогда
			
			ОткрытьПрисоединенныйФайл(СтрРазделить(СсылкаHTML, ".")[1]);
			
		Иначе
			ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(
				СобытиеЖурналаРегистрацииНеизвестнаяСсылка(),
				"Ошибка",
				СсылкаHTML,
				,
				Истина); // Сразу записываем.
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(
		СобытиеЖурналаРегистрацииПереходПоСсылке(СсылкаHTML));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаявлениеОРегистрации(Идентификатор)
	
	ЗаявлениеОРегистрации = НайтиЗаявлениеОРегистрации(Организация, Идентификатор);
	Если ЗаявлениеОРегистрации<> Неопределено И ЗначениеЗаполнено(ЗаявлениеОРегистрации.Ссылка) Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", ЗаявлениеОРегистрации.Ссылка);
		ПараметрыФормы.Вставить("Организация", Организация);
		ФормаОтчета = ПолучитьФорму(ЗаявлениеОРегистрации.ИмяФормы, ПараметрыФормы, ЭтотОбъект);
		РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФормуУведомленияОСпецрежимах(ФормаОтчета);
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Файл не найден'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗаявлениеОРегистрации(Идентификатор)
	
	ЗаявлениеОРегистрации = НайтиЗаявлениеОРегистрации(Организация, Идентификатор);
	Если ЗаявлениеОРегистрации<> Неопределено И ЗначениеЗаполнено(ЗаявлениеОРегистрации.Ссылка) Тогда
		ПоказатьЗначение(, ЗаявлениеОРегистрации.Ссылка);
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Заявление не найдено'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПрисоединенныйФайл(Идентификатор)
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ВызватьИсключение НСтр("ru = 'Организация не определена'");
	КонецЕсли;
	
	Документ = ДокументПоИдентификатору(Организация, Идентификатор, УникальныйИдентификатор);
	
	Если Документ <> Неопределено Тогда
		ПолучитьФайл(Документ.АдресХранилища, Документ.ИмяФайла, Истина);
	Иначе
		СтандартныеПодсистемыКлиент.ВывестиПредупреждение(ЭтотОбъект, Новый Структура("Текст", НСтр("ru = 'Файл не найден'")));
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДокументПоИдентификатору(Знач Организация, Знач Идентификатор, Знач УникальныйИдентификатор)
	
	Перем ИмяФайла;
	
	Если Обработки.РегистрацияОрганизации.ИменаФайлов().Свойство(Идентификатор, ИмяФайла) Тогда
		Файл = Справочники.Организации.ПрикрепленныйФайлПоИмени(Организация, ИмяФайла);
	КонецЕсли;
	
	Если Файл = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СвойстваФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Файл, "Наименование, Расширение");
	
	Документ = Новый Структура;
	Документ.Вставить("АдресХранилища", ПоместитьВоВременноеХранилище(ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(Файл), УникальныйИдентификатор));
	Документ.Вставить("ИмяФайла", СтрШаблон("%1.%2", СвойстваФайла.Наименование, СвойстваФайла.Расширение));
	
	Возврат Документ;
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиЗаявлениеОРегистрации(Знач Организация, Знач ИдентификаторДокумента)
	
	Перем КодФормы;
	
	Если Обработки.РегистрацияОрганизации.КодыФормЗаявлений().Свойство(ИдентификаторДокумента, КодФормы) Тогда
		ЗаявлениеОРегистрации = Обработки.РегистрацияОрганизации.НайтиЗаявлениеОРегистрации(Организация, КодФормы);
	КонецЕсли;
	
	Возврат ЗаявлениеОРегистрации;
	
КонецФункции

&НаСервереБезКонтекста
Функция НомерШагаПомощника()
	
	Возврат Обработки.РегистрацияОрганизации.НомерШагаПомощникаДляЗапускаИзИнтерфейса();
	
КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьНастройкиПоказыватьПриОткрытииПрограммы(ПоказыватьПриОткрытии)
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"НачалоРаботыПредпринимательВСервисе", "Показывать", ПоказыватьПриОткрытии);
	
	СтруктураСообщения = Новый Структура;
	СтруктураСообщения.Вставить("ИмяСобытия", СобытиеЖурналаРегистрацииПоказыватьПриОткрытии(ПоказыватьПриОткрытии));
	СтруктураСообщения.Вставить("ПредставлениеУровня", "");
	СтруктураСообщения.Вставить("Комментарий", "");
	СтруктураСообщения.Вставить("ДатаСобытия", "");
	СобытияЖурнала = Новый СписокЗначений;
	СобытияЖурнала.Добавить(СтруктураСообщения);
	ЖурналРегистрации.ЗаписатьСобытияВЖурналРегистрации(СобытияЖурнала);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СобытиеЖурналаРегистрацииПереходПоСсылке(НавигационнаяСсылка)

	КодЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
	ШаблонТекста = НСтр("ru='%1.Переход по ссылке.%2'", КодЯзыка);
	Возврат СтрШаблон(ШаблонТекста, ГруппаСобытийЖурналаРегистрации(), НавигационнаяСсылка);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СобытиеЖурналаРегистрацииСообщение()

	КодЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
	ШаблонТекста = НСтр("ru='%1.Сообщение'", КодЯзыка);
	Возврат СтрШаблон(ШаблонТекста, ГруппаСобытийЖурналаРегистрации());

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СобытиеЖурналаРегистрацииПоказыватьПриОткрытии(ПоказыватьПриОткрытии)
	
	КодЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
	ШаблонТекста = НСтр("ru='%1.Показывать при открытии.%2'", КодЯзыка);
	ТекстПоказывать = ?(ПоказыватьПриОткрытии, НСтр("ru='Да'", КодЯзыка), НСтр("ru='Нет'", КодЯзыка));
	Возврат СтрШаблон(ШаблонТекста, ГруппаСобытийЖурналаРегистрации(), ТекстПоказывать);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СобытиеЖурналаРегистрацииНеизвестнаяСсылка()

	КодЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
	ШаблонТекста = НСтр("ru='%1.Неизвестная ссылка'", КодЯзыка);
	Возврат СтрШаблон(ШаблонТекста, ГруппаСобытийЖурналаРегистрации());

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ГруппаСобытийЖурналаРегистрации()
	
	КодЯзыка  = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
	Возврат НСтр("ru='Начало работы Предприниматель в сервисе'", КодЯзыка);

КонецФункции

&НаКлиенте
Процедура ЗаписатьНовыеСобытияВЖурналРегистрации()

	НезаписанныеСобытия = ПараметрыПриложения["СтандартныеПодсистемы.СообщенияДляЖурналаРегистрации"];
	Если ТипЗнч(НезаписанныеСобытия) = Тип("СписокЗначений")
		И НезаписанныеСобытия.Количество() > 0 Тогда
		ЖурналРегистрацииВызовСервера.ЗаписатьСобытияВЖурналРегистрации(НезаписанныеСобытия);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УдалитьБлокHTMLПоИдентификатору(ДокументHTML, ИдентификаторБлока)

	УдаляемыйБлок = ДокументHTML.ПолучитьЭлементПоИдентификатору(ИдентификаторБлока);
	Если УдаляемыйБлок <> Неопределено Тогда
		УдаляемыйБлок.РодительскийУзел.УдалитьДочерний(УдаляемыйБлок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТекстДокументаHTML(ДокументHTML)
	
	ЗаписьHTML = Новый ЗаписьHTML;
	ЗаписьHTML.УстановитьСтроку();
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.Записать(ДокументHTML, ЗаписьHTML);
	Возврат ЗаписьHTML.Закрыть();
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОткрытШагПомощника_РегистрацияОрганизации" И Параметр = Неопределено Тогда
		
		ПодготовитьТекстСпискаДействий();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
