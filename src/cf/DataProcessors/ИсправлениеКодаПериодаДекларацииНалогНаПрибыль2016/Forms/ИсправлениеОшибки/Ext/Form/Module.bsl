#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ЭтоАдресВременногоХранилища(Параметры.АдресСведенияОбОшибке) Тогда
		АдресСведенияОбОшибке = Параметры.АдресСведенияОбОшибке;
		СведенияОбОшибке = ПолучитьИзВременногоХранилища(Параметры.АдресСведенияОбОшибке);
	Иначе
		СведенияОбОшибке = Обработки.ИсправлениеКодаПериодаДекларацииНалогНаПрибыль2016.СведенияОбОшибке();
		АдресСведенияОбОшибке = ПоместитьВоВременноеХранилище(СведенияОбОшибке);
	КонецЕсли;
	
	ЕстьДанные = ЗначениеЗаполнено(СведенияОбОшибке);
	Элементы.ИсправлениеОшибки.Видимость = ЕстьДанные;
	Элементы.ОшибкиНет.Видимость         = Не ЕстьДанные;
	
	Если Не ЕстьДанные Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьВыборОрганизаций(СведенияОбОшибке);
	Организация = СведенияОбОшибке[0].Организация;
	
	ЗаполнитьПоОрганизации(СведенияОбОшибке);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если СтрНачинаетсяС(ИмяСобытия, "Запись_") 
		Или ИмяСобытия = "Завершение отправки в контролирующий орган"
	  	Или ИмяСобытия = "Завершение отправки" 
	  	Или ИмяСобытия = "Актуализация состояния отправки" Тогда
		
		Если ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("Ссылка") Тогда
			
			Ссылка = Параметр.Ссылка;
			
			Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ПерепискаСКонтролирующимиОрганами") Тогда
				
				Если Не ЗначениеЗаполнено(ПоясняющееПисьмо) Тогда
					НайтиПисьмо(ПоясняющееПисьмо, ПоясняющееПисьмоПредставление, Организация, ДекларацияПредставленнаяРанее);
				ИначеЕсли Ссылка = ПоясняющееПисьмо Тогда
					УстановитьСтатусПисьма(ПоясняющееПисьмоПредставление, ПоясняющееПисьмо, ЗаголовокПоясняющееПисьмо());
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
				
				Если Не ЗначениеЗаполнено(ИсправительнаяДекларация) 
					Или Не ЗначениеЗаполнено(ОтменяющаяДекларация) Тогда
					НайтиДекларации();
				ИначеЕсли Ссылка = ИсправительнаяДекларация Тогда
					УстановитьСтатусДекларации(
						ИсправительнаяДекларацияПредставление,
						ИсправительнаяДекларация,
						ЗаголовокИсправительнаяДекларация());
				ИначеЕсли Ссылка = ОтменяющаяДекларация Тогда
					УстановитьСтатусДекларации(
						ОтменяющаяДекларацияПредставление,
						ОтменяющаяДекларация,
						ЗаголовокОтменяющаяДекларация());
				КонецЕсли;
				
			КонецЕсли;
				
			
		КонецЕсли;
		
  	КонецЕсли;
  
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	УстановитьОрганизациюИзСписка(Организация, Элемент);
	ЗаполнитьПоОрганизации();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	УстановитьОрганизациюИзСписка(Организация, Элемент);
	ЗаполнитьПоОрганизации();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДекларацияПредставленнаяРанееНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФормуДекларации(ДекларацияПредставленнаяРанее);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменяющаяДекларацияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(ОтменяющаяДекларация) Тогда
		ОтменяющаяДекларация = СоздатьОтменяющуюДекларацию(Организация, ДекларацияПредставленнаяРанее);
	КонецЕсли;
	
	ОткрытьФормуДекларации(ОтменяющаяДекларация);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсправительнаяДекларацияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(ИсправительнаяДекларация) Тогда
		ИсправительнаяДекларация = СоздатьИсправительнуюДекларацию(Организация, ДекларацияПредставленнаяРанее);
	КонецЕсли;
	
	ОткрытьФормуДекларации(ИсправительнаяДекларация);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоясняющееПисьмоНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ПоясняющееПисьмо) Тогда
		ОткрытьФормуПисьма(ПоясняющееПисьмо);
	Иначе
		Письмо = НовоеПоясняющееПисьмо(Организация, ДекларацияПредставленнаяРанее, ДатаПредставленияДекларации, ДекларацияПредставленаВЭлектронномВиде);
		Если ЗначениеЗаполнено(Письмо.Получатель) Тогда
			ОткрытьФормуПисьма(Письмо);
		Иначе
			ОткрытьПечатнуюФормуПисьма(Письмо);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокОтменяющаяДекларация()
	Возврат "Уточненная декларация с кодом 46, отменяющая представленную ранее";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокИсправительнаяДекларация()
	Возврат "Декларация с кодом 34, взамен представленной ранее";
КонецФункции

&НаСервереБезКонтекста
Функция ИдентификаторОснованияПисьма(Декларация)
	Возврат Строка(Декларация.УникальныйИдентификатор());
КонецФункции

&НаКлиенте
Процедура УстановитьОрганизациюИзСписка(Организация, Элемент)
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	Организация = Элемент.СписокВыбора[0].Значение;
		
КонецПроцедуры

#Область ЧтениеДанных

Процедура ЗаполнитьПоОрганизации(Знач СведенияОбОшибке = Неопределено)
	
	Если СведенияОбОшибке = Неопределено Тогда
		СведенияОбОшибке = ПолучитьИзВременногоХранилища(АдресСведенияОбОшибке);
	КонецЕсли;
	
	СведенияОбОрганизации = СведенияОбОшибке.Найти(Организация, "Организация");
	
	ДекларацияПредставленнаяРанее = СведенияОбОрганизации.ДекларацияКод46;
	
	// Представление декларации
	Если ЗначениеЗаполнено(СведенияОбОрганизации.ДатаПредставления) Тогда
		Шаблон = "Декларация с кодом 46, представленная %1";
		ДатаПредставленияДекларации = СведенияОбОрганизации.ДатаПредставления;
		ДекларацияПредставленаВЭлектронномВиде = Истина;
	Иначе
		// нет сведений о представлении, только о подписи
		Шаблон = "Декларация с кодом 46, подписанная %1";
		ДатаПредставленияДекларации = СведенияОбОрганизации.ДатаПодписи;
		ДекларацияПредставленаВЭлектронномВиде = Ложь;
	КонецЕсли;
	
	ДекларацияПредставленнаяРанееПредставление = СтрШаблон(Шаблон, Формат(ДатаПредставленияДекларации, "ДЛФ=D"));
	
	// Ссылка на налоговую инспекцию - для отправки документов
	НалоговаяИнспекция = Справочники.РегистрацииВНалоговомОргане.НайтиПоКоду(
		ДекларацияПредставленнаяРанее.КодНалоговогоОргана,
		Ложь,
		,
		Организация);
		
	НайтиДекларации();
	
	НайтиПисьмо(ПоясняющееПисьмо, ПоясняющееПисьмоПредставление, Организация, ДекларацияПредставленнаяРанее);
	
	Подключена1СОтчетность = ИнтерфейсыВзаимодействияБРО.ПодключенДокументооборотСКонтролирующимОрганом(
		Организация,
		Перечисления.ТипыКонтролирующихОрганов.ФНС);
		
	НастроитьПодсказкуПодготовленныеДокументы();
		
КонецПроцедуры

&НаСервере
Процедура НайтиДекларации()
	
	НайтиОтменяющуюДекларацию(ОтменяющаяДекларация, ОтменяющаяДекларацияПредставление, Организация, НалоговаяИнспекция);
	НайтиИсправительнуюДекларацию(ИсправительнаяДекларация, ИсправительнаяДекларацияПредставление, Организация, НалоговаяИнспекция);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НайтиОтменяющуюДекларацию(ОтменяющаяДекларация, ОтменяющаяДекларацияПредставление, Организация, НалоговаяИнспекция)
	
	КорректирующиеДекларации = РегламентированнаяОтчетность.ПолучитьСсылкуНаРеглОтчет(
		"РегламентированныйОтчетПрибыль",
		Организация,
		'2016-12-31',
		Истина,
		НалоговаяИнспекция);
		
	ОтменяющаяДекларация = Неопределено;
	Для Каждого Декларация Из КорректирующиеДекларации Цикл
		
		Если Декларация.Периодичность <> Перечисления.Периодичность.Год Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не Обработки.ИсправлениеКодаПериодаДекларацииНалогНаПрибыль2016.СодержитНулевыеПоказатели(Декларация) Тогда
			Продолжить;
		КонецЕсли;
		
		ОтменяющаяДекларация = Декларация;
		Прервать;
		
	КонецЦикла;
	
	УстановитьСтатусДекларации(ОтменяющаяДекларацияПредставление, ОтменяющаяДекларация, ЗаголовокОтменяющаяДекларация());
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НайтиИсправительнуюДекларацию(ИсправительнаяДекларация, ИсправительнаяДекларацияПредставление, Организация, НалоговаяИнспекция)
	
	ПервичныеДекларации = РегламентированнаяОтчетность.ПолучитьСсылкуНаРеглОтчет(
		"РегламентированныйОтчетПрибыль",
		Организация,
		'2016-12-31',
		Ложь,
		НалоговаяИнспекция);
	
	ИсправительнаяДекларация = Неопределено;
	Для Каждого Декларация Из ПервичныеДекларации Цикл
		
		Если Декларация.Периодичность <> Перечисления.Периодичность.Квартал Тогда
			Продолжить;
		КонецЕсли;
		
		ИсправительнаяДекларация = Декларация;
		Прервать;
		
	КонецЦикла;
	
	УстановитьСтатусДекларации(ИсправительнаяДекларацияПредставление, ИсправительнаяДекларация, ЗаголовокИсправительнаяДекларация());
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НайтиПисьмо(ПоясняющееПисьмо, ПоясняющееПисьмоПредставление, Организация, ДекларацияПредставленнаяРанее)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",            Организация);
	Запрос.УстановитьПараметр("ИдентификаторОснования", ИдентификаторОснованияПисьма(ДекларацияПредставленнаяРанее));
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Письма.Ссылка
	|ИЗ
	|	Справочник.ПерепискаСКонтролирующимиОрганами КАК Письма
	|ГДЕ
	|	НЕ Письма.ПометкаУдаления
	|	И Письма.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыПерепискиСКонтролирующимиОрганами.ПерепискаСФНС)
	|	И Письма.Отправитель = &Организация
	|	И Письма.ИдентификаторОснования = &ИдентификаторОснования
	|
	|УПОРЯДОЧИТЬ ПО
	|	Письма.ДатаСообщения УБЫВ,
	|	Письма.ДатаОтправки УБЫВ,
	|	Письма.Ссылка УБЫВ";
	
	ПоясняющееПисьмо = Неопределено;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПоясняющееПисьмо = Выборка.Ссылка;
	КонецЕсли;
	
	УстановитьСтатусПисьма(ПоясняющееПисьмоПредставление, ПоясняющееПисьмо, ЗаголовокПоясняющееПисьмо());
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СостояниеДекларации(Декларация)
	
	// См. также Обработки.ПомощникУплатыНалога.ПолучитьСостояниеОтправки()
	
	Если Не ЗначениеЗаполнено(Декларация) Тогда
		Возврат "";
	КонецЕсли;
	
	СостояниеОтправки = "";
	
	СведенияПоВсемОтправкам = СведенияПоОтправкам.СведенияПоВсемОтправкам(Декларация);
	Если ЗначениеЗаполнено(СведенияПоВсемОтправкам) Тогда
		Идентификатор      = СведенияПоВсемОтправкам[0].ИдентификаторОтправки;
		СведенияПоОтправке = СведенияПоОтправкам.СведенияПоОтправке(Декларация, Идентификатор);
		СостояниеОтправки  = Строка(СведенияПоОтправке.Статус);
		
		Если СведенияПоОтправке.Статус = Перечисления.СтатусыОтправки.Сдан Тогда
			ДополнитьПрошлойДатой(СостояниеОтправки, СведенияПоОтправке.ДатаРезультата);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СостояниеОтправки;
	
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьСтатус(Представление, НачалоЗаголовка, Состояние)
	
	Если ПустаяСтрока(Состояние) Тогда
		Представление = НачалоЗаголовка;
	Иначе
		Представление = НачалоЗаголовка + " (" + Состояние + ")";
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДополнитьПрошлойДатой(Строка, Дата)
	
	Если ЗначениеЗаполнено(Дата)
		И НачалоДня(Дата) <> НачалоДня(ТекущаяДатаСеанса()) Тогда
		Строка = Строка + " " + Формат(Дата, "ДЛФ=D");
	КонецЕсли;
	
КонецПроцедуры


&НаСервереБезКонтекста
Процедура УстановитьСтатусДекларации(Представление, Декларация, НачалоЗаголовка)
	
	УстановитьСтатус(Представление, НачалоЗаголовка, СостояниеДекларации(Декларация));
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьСтатусПисьма(Представление, Письмо, НачалоЗаголовка);
	
	СостояниеОтправки = "";
	
	Если ЗначениеЗаполнено(Письмо) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Письмо);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИСТИНА КАК Отправлено
		|ИЗ
		|	РегистрСведений.ЖурналОтправокВКонтролирующиеОрганы КАК ЖурналОтправокВКонтролирующиеОрганы
		|ГДЕ
		|	ЖурналОтправокВКонтролирующиеОрганы.Ссылка = &Ссылка
		|	И ЖурналОтправокВКонтролирующиеОрганы.СостояниеСдачиОтчетности В (ЗНАЧЕНИЕ(Перечисление.СостояниеСдачиОтчетности.ДокументооборотНачат), ЗНАЧЕНИЕ(Перечисление.СостояниеСдачиОтчетности.ПоложительныйРезультатДокументооборота))";
		Если Запрос.Выполнить().Пустой() Тогда
			СостояниеОтправки = "";
		Иначе
			СостояниеОтправки = "отправлено";
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьСтатус(Представление, НачалоЗаголовка, СостояниеОтправки);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокПоясняющееПисьмо()
	
	Возврат "Поясняющее письмо";
	
КонецФункции

#КонецОбласти

#Область СозданиеДокументов

&НаСервереБезКонтекста
Функция НовоеПоясняющееПисьмо(Организация, ДекларацияПредставленнаяРанее, ДатаОтправки, ДекларацияПредставленаВЭлектронномВиде)

	Наименование = "О представлении уточненной налоговой декларации за 2016 год в связи с допущенной технической ошибкой";
	
	ШаблонТекста = "[Организация] [ДатаОтправки] представила [СпособПредставления] декларацию по налогу на прибыль за 2016 год, ошибочно указав код налогового периода «46», в то время, как заявление на переход на ежемесячное исчисление авансовых платежей по налогу на прибыль нами не подавалось.
	|
	|В соответствии с абзацем 2 пункта 1 статьи 81 Налогового кодекса РФ при обнаружении налогоплательщиком в поданной им в налоговый орган налоговой декларации недостоверных сведений, а также ошибок, не приводящих к занижению суммы налога, подлежащей уплате, налогоплательщик вправе внести необходимые изменения в налоговую декларацию и представить в налоговый орган уточненную налоговую декларацию в порядке, установленном настоящей статьей. 
	|При этом уточненная налоговая декларация, представленная после истечения установленного срока подачи декларации, не считается представленной с нарушением срока.
	|
	|[ПримечаниеПротоколВходногоКонтроля]
	|Основанием для отказа в приеме налоговой декларации в соответствии с п. 28 Административного регламента, утвержденного приказом Минфина России от 02.07.2012 № 99н, является, в том числе представление налоговой декларации не по установленной форме (установленному формату).
	|
	|Указание неверного кода налогового периода является технической ошибкой и не относится к нарушениям формы налоговой декларации и сроков представления декларации в Инспекцию. Это подтверждено постановлениями ФАС Московского округа от 24.06.2009 N КА-А40/4648-09 по делу N А40-68235/08-142-294 и Северо-Кавказского округа от 28.06.2010 по делу N А32-26244/2008-26/386-2009-4/786.
	|
	|Ответственность по статье 119 Налогового кодекса РФ наступает за непредставление или несвоевременное представление налоговой декларации. Технические ошибки не являются обстоятельствами, которые приводят к непредставлению декларации, следовательно ответственность по данной статье при представлении декларации в срок, но с техническими ошибками не наступает.
	|
	|Аналогичные разъяснения приведены в письме УФНС РФ по г. Москве от 02.11.2007 N 09-14/105412.
	|
	|Поскольку указание неверного кода не привело к занижению суммы налога, подлежащей уплате в бюджет, то в соответствии с абзацем 2 пункта 1 статьи 81 Налогового кодекса РФ направляем:
	|1)	декларацию с кодом периода «46», но с нулевыми показателями, отменяющую ранее поданную, с указанием соответствующего номера корректировки;
	|2)	первичную декларацию с кодом периода «34» с заполненными показателями.";
	
	ПараметрыТекста = Новый Структура;
	ПараметрыТекста.Вставить("Организация",  Организация.НаименованиеСокращенное);
	ПараметрыТекста.Вставить("ДатаОтправки", Формат(ДатаОтправки, "ДЛФ=DD"));
	Если Не ДекларацияПредставленаВЭлектронномВиде Тогда
		ПараметрыТекста.Вставить("СпособПредставления", "");
		ПараметрыТекста.Вставить("ПримечаниеПротоколВходногоКонтроля", "");
	Иначе
		ПараметрыТекста.Вставить("СпособПредставления", "по телекомунникационным каналам связи");
		ПараметрыТекста.Вставить("ПримечаниеПротоколВходногоКонтроля", "
			|Согласно пункту 4 раздела II Порядка представления налоговой декларации в электронном виде по телекоммуникационным каналам связи (утвержден приказом МНС России от 02.04.2002 N БГ-3-32/169) датой представления налоговой декларации в электронном виде является дата ее отправки, зафиксированная в подтверждении специализированного оператора связи.
			|Подтверждением принятия налоговым органом декларации является получение налогоплательщиком протокола входного контроля (уведомления), свидетельствующего о том, что формы не содержат ошибок.");
	КонецЕсли;
	
	Содержание = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонТекста, ПараметрыТекста);

	НалоговаяИнспекция = Справочники.НалоговыеОрганы.НайтиПоКоду(ДекларацияПредставленнаяРанее.КодНалоговогоОргана);
	
	Письмо = Новый Структура;
	
	Письмо.Вставить("Тип", Перечисления.ТипыПерепискиСКонтролирующимиОрганами.ПерепискаСФНС);
	
	Письмо.Вставить("Отправитель",            Организация);
	Письмо.Вставить("Получатель",             НалоговаяИнспекция);
	Письмо.Вставить("КодНалоговогоОргана",    ДекларацияПредставленнаяРанее.КодНалоговогоОргана);
	Письмо.Вставить("Наименование",           Наименование);
	Письмо.Вставить("Содержание",             Содержание);
	Письмо.Вставить("ИдентификаторОснования", ИдентификаторОснованияПисьма(ДекларацияПредставленнаяРанее));
	
	Возврат Письмо;
	
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьИсправительнуюДекларацию(Организация, ДекларацияПредставленнаяРанее)
	
	Документ = ДекларацияПредставленнаяРанее.Скопировать();
	
	Документ.Дата = ДекларацияПредставленнаяРанее.Дата; // При копировании очищается
	
	Документ.Периодичность = Перечисления.Периодичность.Квартал; // Для кода 34; см. также ...
	
	Документ.Вид = 0; // С кодом 34 ранее не подавалась; также см. НомерКорректировки
	Документ.ПредставлениеВида = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(Документ.Вид);
	Документ.ДатаПодписи = ТекущаяДатаСеанса();
	
	Документ.Комментарий = ЗаголовокИсправительнаяДекларация();
	
	// Уточняем данные на титульном листе
	ДанныеОтчета = Документ.ДанныеОтчета.Получить();
	// - сведения об организации
	ЗаполнитьСведенияОбОрганизации(
		ДанныеОтчета.ПоказателиОтчета.ПолеТабличногоДокументаТитульный,
		Организация,
		Документ.ДатаПодписи);
	// - код периода
	ДанныеОтчета.ПоказателиОтчета.ПолеТабличногоДокументаТитульный.Период = "34";
	// - номер корректировки
	ДанныеОтчета.ПоказателиОтчета.ПолеТабличногоДокументаТитульный.НомерКорректировки = Документ.Вид;
	
	Документ.ДанныеОтчета = Новый ХранилищеЗначения(ДанныеОтчета);
	
	Документ.Записать();
	
	Возврат Документ.Ссылка;
	
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьОтменяющуюДекларацию(Организация, ДекларацияПредставленнаяРанее)
	
	Документ = ДекларацияПредставленнаяРанее.Скопировать();
	
	Документ.Дата = ДекларацияПредставленнаяРанее.Дата; // При копировании очищается
	
	Документ.Вид = Документ.Вид + 1; // Следующее уточнение; также см. НомерКорректировки
	Документ.ПредставлениеВида = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(Документ.Вид);
	Документ.ДатаПодписи = ТекущаяДатаСеанса();
	Документ.Комментарий = ЗаголовокОтменяющаяДекларация();
	
	// Очистим ранее заполненные данные.
	
	ДанныеОтчета = Документ.ДанныеОтчета.Получить();
	ДанныеОтчета.Расшифровка.Очистить();
	
	// На титульном листе уточняем
	// - сведения об организации
	ЗаполнитьСведенияОбОрганизации(
		ДанныеОтчета.ПоказателиОтчета.ПолеТабличногоДокументаТитульный,
		Организация,
		Документ.ДатаПодписи);
	// - номер корректировки
	ДанныеОтчета.ПоказателиОтчета.ПолеТабличногоДокументаТитульный.НомерКорректировки = Документ.Вид;
	// - приложенные листы (их нет, так как данных нет)
	ДанныеОтчета.ПоказателиОтчета.ПолеТабличногоДокументаТитульный.Прил = 0;
	
	// На всех листах, кроме титульного,
	// очищаем все значения кроме защищенных
	
	ЗащищенныеПоля = Новый Массив;
	// В состав Декларации обязательно включаются: 
	// - Титульный лист (Лист 01),
	// - подраздел 1.1 Раздела 1,
	// - Лист 02,
	// - Приложения N 1 и N 2 к Листу 02
	// Подраздел 1.1
	ЗащищенныеПоля.Добавить("П000110001003"); // ОКТМО
	ЗащищенныеПоля.Добавить("П000110003003"); // КБК федеральный
	ЗащищенныеПоля.Добавить("П000110006003"); // КБК региональный
	// признаки налогоплательщика в листе 02 и обязательных приложениях
	ЗащищенныеПоля.Добавить("П000200000100");
	ЗащищенныеПоля.Добавить("П000210000100");
	ЗащищенныеПоля.Добавить("П000220000100");
	// ставки налога на листе 02
	ЗащищенныеПоля.Добавить("П000200014003");
	ЗащищенныеПоля.Добавить("П000200015003");
	ЗащищенныеПоля.Добавить("П000200016003");
	// метод начисления амортизации в приложении N 2
	ЗащищенныеПоля.Добавить("П000220013503");
	
	// Механизмы БРО оставляют служебные поля в сохраненных данных. Они вредны.
	СлужебныеПоля = Новый Массив;
	СлужебныеПоля.Добавить("П100220040101");
	СлужебныеПоля.Добавить("П100220040103");
	СлужебныеПоля.Добавить("П100240004001");
	СлужебныеПоля.Добавить("П100240004003");
	
	Для Каждого ДанныеЛиста Из ДанныеОтчета.ПоказателиОтчета Цикл
		Если ДанныеЛиста.Ключ = "ПолеТабличногоДокументаТитульный" Тогда
			Продолжить;
		КонецЕсли;
		ОчиститьПоля(ДанныеЛиста.Значение, ЗащищенныеПоля, СлужебныеПоля);
	КонецЦикла;
	
	// Очистим страницы, кроме первой
	Для Каждого НаборСтраниц Из ДанныеОтчета.ДанныеМногостраничныхРазделов Цикл
		Пока НаборСтраниц.Значение.Количество() > 1 Цикл
			НаборСтраниц.Значение.Удалить(1);
		КонецЦикла;
		Если ЗначениеЗаполнено(НаборСтраниц.Значение) Тогда
			
			ОчиститьПоля(НаборСтраниц.Значение[0].Данные, ЗащищенныеПоля, СлужебныеПоля);
			
			// Страницы могут содержать вложенные многострочные разделы разных форматов
			Если НаборСтраниц.Значение.Колонки.Найти("ДанныеДопСтрок") <> Неопределено Тогда
				ДанныеДопСтрок = НаборСтраниц.Значение[0].ДанныеДопСтрок;
				Если ТипЗнч(ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
					УпакованныеДанныеДопСтрок = Новый Структура("Данные", ДанныеДопСтрок);
				ИначеЕсли ТипЗнч(ДанныеДопСтрок) = Тип("Структура") Тогда
					УпакованныеДанныеДопСтрок = ДанныеДопСтрок;
				Иначе
					УпакованныеДанныеДопСтрок = Неопределено;
				КонецЕсли;
				Если УпакованныеДанныеДопСтрок <> Неопределено Тогда
					Для Каждого ЭлементДанныхДопСтрок Из УпакованныеДанныеДопСтрок Цикл
						Если ТипЗнч(ЭлементДанныхДопСтрок.Значение) <> Тип("ТаблицаЗначений") Тогда
							Продолжить;
						КонецЕсли;
						Пока ЭлементДанныхДопСтрок.Значение.Количество() > 1 Цикл
							ЭлементДанныхДопСтрок.Значение.Удалить(1);
						КонецЦикла;
						ОчиститьКолонки(ЭлементДанныхДопСтрок.Значение, ЗащищенныеПоля);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	// Очистим строки, кроме первой
	Для Каждого НаборСтрок Из ДанныеОтчета.ДанныеМногострочныхРазделов Цикл
		Пока НаборСтрок.Значение.Количество() > 1 Цикл
			НаборСтрок.Значение.Удалить(1);
		КонецЦикла;
		ОчиститьКолонки(НаборСтрок.Значение, ЗащищенныеПоля);
	КонецЦикла;
	
	Документ.ДанныеОтчета = Новый ХранилищеЗначения(ДанныеОтчета);
	
	Документ.Записать();
	
	Возврат Документ.Ссылка;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОчиститьПоля(Данные, ЗащищенныеПоля, СлужебныеПоля)
	
	КУдалению = Новый Массив;
	
	Для Каждого КлючИЗначение Из Данные Цикл
		
		Если ЗащищенныеПоля.Найти(КлючИЗначение.Ключ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Удалено = Ложь;
		Для Каждого СлужебноеПоле Из СлужебныеПоля Цикл
			Если СтрНачинаетсяС(КлючИЗначение.Ключ, СлужебноеПоле) Тогда
				КУдалению.Добавить(КлючИЗначение.Ключ);
				Удалено = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Удалено Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеТипов = Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипЗнч(КлючИЗначение.Значение)));
		Данные[КлючИЗначение.Ключ] = ОписаниеТипов.ПривестиЗначение(Неопределено);
		
	КонецЦикла;
	
	Для Каждого УдаляемыйКлюч Из КУдалению Цикл
		Данные.Удалить(УдаляемыйКлюч);
	КонецЦикла;
	
КонецПроцедуры
	
&НаСервереБезКонтекста
Процедура ОчиститьКолонки(Данные, ЗащищенныеПоля)
	
	ИменаОчищаемыхКолонок = Новый Массив;
	Для Каждого Колонка Из Данные.Колонки Цикл
		
		Если ЗащищенныеПоля.Найти(Колонка.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Данные.ЗаполнитьЗначения(
			Колонка.ТипЗначения.ПривестиЗначение(Неопределено),
			Колонка.Имя);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСведенияОбОрганизации(ДанныеТитульногоЛиста,	Организация, ДатаПодписи)
	
	СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, НаимНО, ТипНП, ТелОрганизации, ФИО, ОКТМО";
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		Организация,
		ДатаПодписи,
		СтрокаСведений);
							
	КодНО = СведенияОбОрганизации.КодНО;
	Для Инд = СтрДлина(СведенияОбОрганизации.КодНО) + 1 По 4 Цикл
		КодНО = " " + КодНО;
	КонецЦикла;
	
	КПП = СокрЛП(СведенияОбОрганизации.КППЮЛ);

	ЗаполнитьСведенияОПодписантах(ДанныеТитульногоЛиста, Организация, ДатаПодписи, КодНО, КПП);
	
	ДанныеТитульногоЛиста.Вставить("ИНН1",           СокрЛП(СведенияОбОрганизации.ИННЮЛ));
	ДанныеТитульногоЛиста.Вставить("КПП1",           КПП);
	
	ДанныеТитульногоЛиста.Вставить("КодИМНС",        КодНО);
	ДанныеТитульногоЛиста.Вставить("НаимОрг",        СокрЛП(СведенияОбОрганизации.НаимЮлПол));
	ДанныеТитульногоЛиста.Вставить("ТелОрганизации", СокрЛП(СведенияОбОрганизации.ТелОрганизации));
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСведенияОПодписантах(ДанныеТитульногоЛиста, Организация, ДатаПодписи, КодНО, КПП)
	
	Если Не РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(
		Организация,
		КодНО,
		КПП);
	
	ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
	
	Если ТипПодписанта = "1" Тогда
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, "ФИОРук, ФИО");
		Подписант = СокрЛП(?(ЗначениеЗаполнено(СведенияОбОрганизации.ФИОРук), СведенияОбОрганизации.ФИОРук, СведенияОбОрганизации.ФИО));	
		НаименованиеОрганизацииПредставителя = "";
		ДокументПредставителя                = "";
	Иначе
	    Подписант                               = СведенияОПредставителе.ФИОПредставителя;
 		НаименованиеОрганизацииПредставителя 	= СведенияОПредставителе.НаименованиеОрганизацииПредставителя;
		ДокументПредставителя 					= СведенияОПредставителе.ДокументПредставителя;
	КонецЕсли;
	
	ДанныеТитульногоЛиста.Вставить("ПрПодп",       ТипПодписанта);
	ДанныеТитульногоЛиста.Вставить("ОргПодписант", Подписант);
	ДанныеТитульногоЛиста.Вставить("ОргУп",        НаименованиеОрганизацииПредставителя);
	ДанныеТитульногоЛиста.Вставить("ДокУпПред",    ДокументПредставителя);
	
КонецПроцедуры



&НаКлиенте
Процедура ОткрытьПечатнуюФормуПисьма(Письмо)
	
	ТабличныйДокумент = ПечатнаяФормаПисьма(Письмо);
	
	Если ТабличныйДокумент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбластиОбъектов = Новый СписокЗначений;
	
	ИдентификаторПечатнойФормы = "ПисьмоВНалоговуюИнспекцию";
	
	КоллекцияПечатныхФорм = УправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм(ИдентификаторПечатнойФормы);
	
	ПечатнаяФорма = УправлениеПечатьюКлиент.ОписаниеПечатнойФормы(КоллекцияПечатныхФорм, ИдентификаторПечатнойФормы);
	ПечатнаяФорма.СинонимМакета = ПоясняющееПисьмоПредставление;
	ПечатнаяФорма.ТабличныйДокумент = ТабличныйДокумент;
	ПечатнаяФорма.ИмяФайлаПечатнойФормы = ПоясняющееПисьмоПредставление;
	
	ОбъектыПечати = Новый СписокЗначений;
	
	КлючУникальности = Строка(Новый УникальныйИдентификатор);
	
	ПараметрыОткрытия = Новый Структура("ИмяМенеджераПечати,ИменаМакетов,ПараметрКоманды,ПараметрыПечати");
	ПараметрыОткрытия.ПараметрКоманды = Новый Массив;
	
	ПараметрыОткрытия.ПараметрыПечати = Новый Структура;
	ПараметрыОткрытия.ПараметрыПечати.Вставить("ЗаголовокФормы", ПоясняющееПисьмоПредставление);
	
	ПараметрыОткрытия.Вставить("КоллекцияПечатныхФорм", КоллекцияПечатныхФорм);
	ПараметрыОткрытия.Вставить("ОбъектыПечати", ОбъектыПечати);
	
	ОткрытьФорму("ОбщаяФорма.ПечатьДокументов", ПараметрыОткрытия, Неопределено, КлючУникальности);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПечатнаяФормаПисьма(Письмо)
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	Обработка = Обработки.ДокументооборотСКонтролирующимиОрганами.Создать();
	// получаем бланк отчета из макета
	Бланк = Обработка.ПолучитьМакетОбработки("Письмо");
	
	Организация = Письмо.Отправитель;
	
	#Область Гербы
	
	ОбластьГербов = Бланк.ПолучитьОбласть("Гербы");
	
	ДвДанныеЛоготипа = Неопределено;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ЛоготипОрганизации(Организация, ДвДанныеЛоготипа);
		
	Если ЗначениеЗаполнено(ДвДанныеЛоготипа) Тогда
		ОбластьГербов.Рисунки["ГербОтправителя"].Картинка = Новый Картинка(ДвДанныеЛоготипа);
	КонецЕсли;
	
	Герб = Обработка.ПолучитьМакетОбработки("ГербФНС");
	ОбластьГербов.Рисунки["ГербПолучателя"].Картинка = Новый Картинка(Герб);
	
	ТабДокумент.Вывести(ОбластьГербов);
	
	#КонецОбласти
	
	#Область Наименования
	
	ОбластьНаименований = Бланк.ПолучитьОбласть("Наименования");
	НаименованиеОтправителя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "НаименованиеСокращенное");
	ОбластьНаименований.Параметры["НаименованиеОтправителя"] = НаименованиеОтправителя;
	
	РеквизитыНалоговогоОргана = ДанныеГосударственныхОрганов.РеквизитыНалоговогоОрганаПоКоду(Письмо.КодНалоговогоОргана);
	НаименованиеНалоговогоОргана = РеквизитыНалоговогоОргана.ПолноеНаименование;
	Если НЕ ЗначениеЗаполнено( НаименованиеНалоговогоОргана) Тогда
		НаименованиеНалоговогоОргана = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'ИФНС %1'"), Письмо.КодНалоговогоОргана);
	КонецЕсли;
	ОбластьНаименований.Параметры["НаименованиеПолучателя"] = НСтр("ru = 'в'") + " " +НаименованиеНалоговогоОргана;
	ОбластьНаименований.Параметры["КодПолучателя"] = "(код " + Письмо.КодНалоговогоОргана + ")";
	
	ТабДокумент.Вывести(ОбластьНаименований);
	
	#КонецОбласти
	
	#Область КонтактыОрганизации
	
	ТребуемыеСведения = "ИННЮЛ, КППЮЛ, АдрЮР, АдрМЖ, ТелОрганизации";
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		Организация,
		,
		ТребуемыеСведения);
		
	// ИНН и КПП.
	Если ЗначениеЗаполнено(СведенияОбОрганизации.ИННЮЛ) Тогда
		
		ОбластьИННиКПП = Бланк.ПолучитьОбласть("ИННиКПП");
		НадписьИННиКПП = НСтр("ru = 'ИНН '") + СведенияОбОрганизации.ИННЮЛ;
		Если ЗначениеЗаполнено(СведенияОбОрганизации.КППЮЛ) Тогда 
			 НадписьИННиКПП = НадписьИННиКПП + НСтр("ru = ' КПП '") + СведенияОбОрганизации.КППЮЛ;
		КонецЕсли;
		
		ОбластьИННиКПП.Параметры["ИННиКППОтправителя"] = НадписьИННиКПП;
		ТабДокумент.Вывести(ОбластьИННиКПП);
		
	КонецЕсли;
	
	// Адрес.
	ОбластьАдрес = Бланк.ПолучитьОбласть("Адрес");
	Если ЗначениеЗаполнено(СведенияОбОрганизации.АдрЮР)
		ИЛИ ЗначениеЗаполнено(СведенияОбОрганизации.АдрЮР) Тогда
		
		ПредставлениеАдреса = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(СведенияОбОрганизации.АдрЮР);
		ОбластьАдрес.Параметры["АдресОтправителя"] = ПредставлениеАдреса;
		ТабДокумент.Вывести(ОбластьАдрес);
		
	КонецЕсли;

	// Телефон.
	ОбластьТелефон = Бланк.ПолучитьОбласть("Телефон");
	Если ЗначениеЗаполнено(СведенияОбОрганизации.ТелОрганизации)
		ИЛИ ЗначениеЗаполнено(СведенияОбОрганизации.ТелОрганизации) Тогда
		
		ОбластьТелефон.Параметры["ТелефонОтправителя"] = НСтр("ru = 'тел: '") + СведенияОбОрганизации.ТелОрганизации;
		ТабДокумент.Вывести(ОбластьТелефон);
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область СодержательнаяЧасть
	
	ОбластьПисьмо = Бланк.ПолучитьОбласть("Письмо");
	
	ОбластьПисьмо.Параметры.Заголовок   = Письмо.Наименование;
	ОбластьПисьмо.Параметры.ТекстПисьма = Письмо.Содержание;
	
	ОбластьПисьмо.Области.Письмо.Шрифт = Новый Шрифт( , 10);
	
	ТабДокумент.Вывести(ОбластьПисьмо);
	
	#КонецОбласти
	
	ЗаполнитьПодписиОрганизации(Письмо, ТабДокумент, Бланк);
	
	ТабДокумент.АвтоМасштаб = Истина;
	Возврат ТабДокумент;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьПодписиОрганизации(Письмо, ТабДокумент, Бланк)
	
	Организация = Письмо.Отправитель;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьПодписей = Бланк.ПолучитьОбласть("Подписи");
	
	ТребуемыеСведения = "ФамилияРук, ИмяРук, ОтчествоРук, ДолжнРук";
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		Организация,
		,
		ТребуемыеСведения);
		
	ФИО = Новый Структура();
	ФИО.Вставить("Фамилия", 	СведенияОбОрганизации.ФамилияРук);
	ФИО.Вставить("Имя", 		СведенияОбОрганизации.ИмяРук);
	ФИО.Вставить("Отчество", 	СведенияОбОрганизации.ОтчествоРук);
	
	Руководитель = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО);
	
	ОбластьПодписей.Параметры.Должность 	= СведенияОбОрганизации.ДолжнРук;
	ОбластьПодписей.Параметры.Руководитель 	= Руководитель;
	
	ТабДокумент.Вывести(ОбластьПодписей);
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаФормы

Процедура НастроитьВыборОрганизаций(СведенияОбОшибке)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизацийБухгалтерскийУчет") Тогда
		// скрыта функциональной опцией
		Возврат;
	КонецЕсли;
	
	// Список выбора
	Организации = СведенияОбОшибке.ВыгрузитьКолонку("Организация");
	Элементы.Организация.СписокВыбора.ЗагрузитьЗначения(Организации);
	
	// Подсказка
	ПредставленияОрганизаций = СведенияОбОшибке.ВыгрузитьКолонку("ПредставлениеОрганизации");
	КоличествоОрганизаций = ПредставленияОрганизаций.Количество();
	
	Если КоличествоОрганизаций = 1 Тогда
		Подсказка = "Ошибка может быть допущена в декларации одной организации";
	Иначе
		
		Шаблон = "Ошибка может быть допущена в декларациях %1"; // ... двух организаций
		
		ОписаниеОрганизаций = Обработки.ИсправлениеКодаПериодаДекларацииНалогНаПрибыль2016.ЧислительноеВТекстеРодительныйПадеж(
			КоличествоОрганизаций, 
			"организации", "организаций", "организаций");
			
		Подсказка = СтрШаблон(Шаблон, ОписаниеОрганизаций);
		
	КонецЕсли;
	
	Элементы.Организация.Подсказка = Подсказка;
			
КонецПроцедуры

Процедура НастроитьПодсказкуПодготовленныеДокументы()
	
	Если Подключена1СОтчетность Тогда
		Элементы.ПодготовленныеДокументы.Подсказка = 
		"Откройте каждый из документов, нажав на ссылки.
		|Ознакомьтесь с документом и отправьте в налоговую инспекцию.";
	Иначе
		Элементы.ПодготовленныеДокументы.Подсказка = 
		"Откройте каждый из документов, нажав на ссылки.
		|Ознакомьтесь с документом, распечатайте его и отправьте в налоговую инспекцию.";
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ИнтерактивнаяРаботаБРО

&НаКлиенте
Процедура ОткрытьФормуДекларации(Ссылка)
	
	ПоказатьЗначение(, Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПисьма(Письмо)
	
	Если ТипЗнч(Письмо) = Тип("СправочникСсылка.ПерепискаСКонтролирующимиОрганами") Тогда
		
		ПоказатьЗначение(, Письмо);
		
	Иначе
		
		ПараметрыФормы = Новый Структура;
		
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", Письмо);
		
		Форма = ПолучитьФорму(
			"Справочник.ПерепискаСКонтролирующимиОрганами.Форма.ФормаИсходящееПисьмо",
			ПараметрыФормы);
			
		ЗаполнитьЗначенияСвойств(Форма.Объект, Письмо);
		
		Форма.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
