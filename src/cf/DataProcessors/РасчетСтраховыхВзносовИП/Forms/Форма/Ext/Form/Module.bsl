#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекущийПериод = ?(ЗначениеЗаполнено(Параметры.ПериодСобытия), Параметры.ПериодСобытия, КонецКвартала(ОбщегоНазначения.ТекущаяДатаПользователя()));
	
	Объект.Период = ТекущийПериод;
	
	ДатаСеанса = ТекущаяДатаСеанса();
	
	Объект.Организация = Параметры.Организация;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		
		ОсновнаяОрганизация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
		
		Если ЗначениеЗаполнено(ОсновнаяОрганизация) И Не ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(ОсновнаяОрганизация) Тогда
			Объект.Организация = ОсновнаяОрганизация;
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверка реквизитов для отчетности
	ТекстДействия = НСтр("ru='уплатить фиксированные страховые взносы'");
	СообщениеТребуютсяРеквизиты = 
		ПроверкаРеквизитовОрганизации.СтрокаСообщенияНеЗаполненыРеквизитыДляОтчетности(Объект.Организация, ТекстДействия);
	ПроверитьРеквизитыОрганизацииДляОтчетности();
	
	ВыполнениеЗадачиКалендаря = ЗначениеЗаполнено(Параметры.Правило);
	Если ВыполнениеЗадачиКалендаря Тогда
		Правило = Параметры.Правило;
		Срок    = Параметры.Срок;
	Иначе
		ПорядокУплаты =  Обработки.РасчетСтраховыхВзносовИП.ПорядокУплаты(Объект.Организация, Объект.Период);
		Правило = ПорядокУплаты.Правило;
		Срок    = ПорядокУплаты.Срок;
	КонецЕсли;
	
	ОрганизацияПредставление = Объект.Организация;
	
	СчетОрганизации = БанковскийСчетОрганизации(Объект.Организация);
	
	УстановитьФункциональныеОпцииФормы();
	
	ПолучитьСведенияОСверке();
	
	РассчитатьСтраховыеВзносыКУплате();
	
	УправлениеФормойНаСервере();
	
	ТекущийЭлемент = Элементы.ОплатитьСБанковскогоСчета;
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтаФорма,
		"БП.Обработка.РасчетСтраховыхВзносовИП",
		"Форма",
		НСтр("ru='Новости: Уплата фиксированных страховых взносов'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеВыписки" Тогда
		ОбработкаОповещенияИзменениеВыписки();
		
	ИначеЕсли ИмяСобытия = "Запись_Организации"
		И Объект.Организация = Источник Тогда
		
		ПроверитьРеквизитыОрганизацииДляОтчетности();
		
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// См. также ПроверитьЗаполнениеНаКлиенте()
	
	Если НЕ РеквизитыОрганизацииЗаполнены Тогда
		НезаполненныеРеквизиты = ПолучитьИзВременногоХранилища(АдресХранилищаНезаполненныхРеквизитов);
		ТекстОписанияОбъектаПроверки = НСтр("ru='уплаты фиксированных страховых взносов'");
		ПроверкаРеквизитовОрганизации.СообщитьОбОшибкеЗаполненияРеквизитовДляОтчетности(
			Объект.Организация,
			НезаполненныеРеквизиты,
			"СообщениеТребуютсяРеквизиты",
			Отказ,
			ТекстОписанияОбъектаПроверки)
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	ПериодПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьДеньРегистрацииПриРасчетеСтраховыхВзносовИППриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания(
		"Подключаемый_СохранитьУчитыватьДеньРегистрацииПриРасчетеСтраховыхВзносовИП", 0.1, Истина)
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СохранитьУчитыватьДеньРегистрацииПриРасчетеСтраховыхВзносовИП()
	
	СохранитьУчитыватьДеньРегистрацииПриРасчетеСтраховыхВзносовИП();
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкаУчитыватьДеньРегистрацииПриРасчетеСтраховыхВзносовИПНажатие(Элемент)
	
	ПерейтиПоНавигационнойСсылке("http://its.1c.ru/bmk/bp30/ip_vzn_dategreg");
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаВзносаПФРНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Период", Объект.Период);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ИмяВзноса", Элемент.Имя);
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Взнос в ПФР фиксированный'"));
	ПараметрыФормы.Вставить("Всего", СуммаВзносаПФРВсего);
	ПараметрыФормы.Вставить("Уплачено", СуммаВзносаПФРУплачено);
	ПараметрыФормы.Вставить("Сумма", Объект.СуммаВзносаПФР);
	ПараметрыФормы.Вставить("ЧастичнаяОплата", ЧастичнаяОплата(Объект.Период, Периодичность));
	ПараметрыФормы.Вставить("АдресТаблицыПлатежей", АдресТаблицыПлатежей("ПФР"));
	
	ОткрытьФорму("Обработка.РасчетСтраховыхВзносовИП.Форма.РасчетСуммыВзноса", ПараметрыФормы, ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаВзносаПФРсДоходовНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИмяВзноса", Элемент.Имя);
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Взнос в ПФР с доходов'"));
	ПараметрыФормы.Вставить("Всего",     СуммаВзносаПФРсДоходовВсего);
	ПараметрыФормы.Вставить("Уплачено",  СуммаВзносаПФРсДоходовУплачено);
	ПараметрыФормы.Вставить("Сумма",     Объект.СуммаВзносаПФРсДоходов);
	
	ПараметрыФормы.Вставить("Период", Объект.Период);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("СтруктураДоходов", СтруктураДоходов);
	ПараметрыФормы.Вставить("ПредельнаяСуммаВзноса", ПредельнаяСуммаВзноса);
	
	ПараметрыФормы.Вставить("АдресТаблицыПлатежей", АдресТаблицыПлатежей("ПФРсДоходов"));
	
	ОткрытьФорму("Обработка.РасчетСтраховыхВзносовИП.Форма.РасчетСуммыВзносаСДоходов", ПараметрыФормы, ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаВзносаФФОМСНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Период", Объект.Период);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ИмяВзноса", Элемент.Имя);
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Взнос в ФФОМС'"));
	ПараметрыФормы.Вставить("Всего", СуммаВзносаФФОМСВсего);
	ПараметрыФормы.Вставить("Уплачено", СуммаВзносаФФОМСУплачено);
	ПараметрыФормы.Вставить("Сумма", Объект.СуммаВзносаФФОМС);
	ПараметрыФормы.Вставить("ЧастичнаяОплата", ЧастичнаяОплата(Объект.Период, Периодичность));
	ПараметрыФормы.Вставить("АдресТаблицыПлатежей", АдресТаблицыПлатежей("ФФОМС"));
	
	ОткрытьФорму("Обработка.РасчетСтраховыхВзносовИП.Форма.РасчетСуммыВзноса", ПараметрыФормы, ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаВзносаФССНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Период", Объект.Период);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ИмяВзноса", Элемент.Имя);
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Взнос в ФСС'"));
	ПараметрыФормы.Вставить("Всего", СуммаВзносаФССВсего);
	ПараметрыФормы.Вставить("Уплачено", СуммаВзносаФССУплачено);
	ПараметрыФормы.Вставить("Сумма", Объект.СуммаВзносаФСС);
	ПараметрыФормы.Вставить("ЧастичнаяОплата", ЧастичнаяОплата(Объект.Период, Периодичность));
	ПараметрыФормы.Вставить("АдресТаблицыПлатежей", АдресТаблицыПлатежей("ФСС"));
	
	ОткрытьФорму("Обработка.РасчетСтраховыхВзносовИП.Форма.РасчетСуммыВзноса", ПараметрыФормы, ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДекорацияПлатежПФРНажатие(Элемент)
	
	РасчетСтраховыхВзносовИПФормыКлиент.ПлатежНажатие(Элемент.Имя, ПлатежиПФР, "ДекорацияПлатежПФР");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДекорацияПлатежПФРсДоходовНажатие(Элемент)
	
	РасчетСтраховыхВзносовИПФормыКлиент.ПлатежНажатие(Элемент.Имя, ПлатежиПФРсДоходов, "ДекорацияПлатежПФРсДоходов");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДекорацияПлатежФФОМСНажатие(Элемент)
	
	РасчетСтраховыхВзносовИПФормыКлиент.ПлатежНажатие(Элемент.Имя, ПлатежиФФОМС, "ДекорацияПлатежФФОМС");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДекорацияПлатежФССНажатие(Элемент)
	
	РасчетСтраховыхВзносовИПФормыКлиент.ПлатежНажатие(Элемент.Имя, ПлатежиФСС, "ДекорацияПлатежФСС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапросНаСверкуНаименованиеНажатие(Элемент, СтандартнаяОбработка)
	
	ОповещениеВыполнениеСверки = Новый ОписаниеОповещения("ОбработатьВыполнениеСверки", ЭтотОбъект);
	ОткрытьФорму(ОписаниеДействияСверка.ИмяФормы, ОписаниеДействияСверка.ПараметрыФормы, ЭтотОбъект,,,,ОповещениеВыполнениеСверки);
	
КонецПроцедуры

&НаКлиенте
Процедура СообщениеТребуютсяРеквизитыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ",                 Объект.Организация);
	ПараметрыФормы.Вставить("Назначение",           "ДляОтчетности");
	ПараметрыФормы.Вставить("ПроверяемыеРеквизиты", ПроверяемыеРеквизитыДляОтчетности());
	
	ОткрытьФорму("Справочник.Организации.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОплатитьСБанковскогоСчета(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	СозданныеДокументы = СоздатьПлатежныеДокументыНаСервере(ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.БанковскийПеревод"));
	Если СозданныеДокументы <> Неопределено Тогда;
		ОткрытьСозданныеДокументы(СозданныеДокументы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьНаличнымиПоКвитанции(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	СозданныеДокументы = СоздатьПлатежныеДокументыНаСервере(ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.НаличнымиПоКвитанции"));
	Если СозданныеДокументы <> Неопределено Тогда;
		ОткрытьСозданныеДокументы(СозданныеДокументы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиОплату(Команда)
	
	Если Не ПроверитьЗаполнениеНаКлиенте() Тогда
		Возврат;
	КонецЕсли;
	
	КлючЗаписи = ПеренестиПлатежНаСервере(Объект.Организация, Правило, Объект.Период);
	ОповеститьОбИзменении(КлючЗаписи);
	Оповестить("СписокЗадачБухгалтера_Изменение");
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСверку(Команда)
	
	Если Не ПроверитьЗаполнениеНаКлиенте() Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеВыполнениеСверки = Новый ОписаниеОповещения("ОбработатьВыполнениеСверки", ЭтотОбъект);
	ОткрытьФорму(ОписаниеДействияСверка.ИмяФормы, ОписаниеДействияСверка.ПараметрыФормы, ЭтотОбъект,,,,ОповещениеВыполнениеСверки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтаФорма,
		Команда
	);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ПроверитьЗаполнениеНаКлиенте()
	
	// На клиенте проверяется только заполненность реквизитов формы.
	// В тех случаях, когда требуется дополнительно проверить и полноту заполнения реквизитов организации,
	// следует использовать ПроверитьЗаполнение()
	
	Отказ = Ложь;
	
	ПроверяемыеПоля = Новый Структура;
	ПроверяемыеПоля.Вставить("Организация", НСтр("ru = 'Организация'"));
	ПроверяемыеПоля.Вставить("Период",      НСтр("ru = 'Период'"));
	
	Для Каждого ОписаниеПоля Из ПроверяемыеПоля Цикл
	
		Если ЗначениеЗаполнено(Объект[ОписаниеПоля.Ключ]) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Заполнение", ОписаниеПоля.Значение);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , ОписаниеПоля.Ключ, , Отказ);
		
	КонецЦикла;
	
	Возврат Не Отказ;
	
КонецФункции

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	Периодичность = УчетСтраховыхВзносовИП.ПериодичностьУплатыФиксированныхСтраховыхВзносов(Объект.Организация, Объект.Период);
	
	УплачиватьДобровольныеВзносыВФСС = УчетнаяПолитика.УплачиватьДобровольныеВзносыВФСС(Объект.Организация, Объект.Период);
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ДатаРегистрации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "ДатаРегистрации");
	КонецЕсли;
	
	УчитыватьДеньРегистрацииПриРасчетеСтраховыхВзносовИП = УчетСтраховыхВзносовИП.УчитыватьДеньРегистрацииПриРасчетеСтраховыхВзносовИП(Объект.Период);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойНаСервере()
	
	НесколькоОрганизаций = Справочники.Организации.ИспользуетсяНесколькоОрганизаций();
	
	Элементы.Организация.Видимость              = НесколькоОрганизаций И (НЕ ВыполнениеЗадачиКалендаря ИЛИ НЕ ЗначениеЗаполнено(Объект.Организация));
	Элементы.ОрганизацияПредставление.Видимость = НЕ НесколькоОрганизаций ИЛИ (ВыполнениеЗадачиКалендаря И ЗначениеЗаполнено(Объект.Организация));
	Элементы.Период.Видимость                   = НесколькоОрганизаций И (НЕ ВыполнениеЗадачиКалендаря ИЛИ НЕ ЗначениеЗаполнено(Объект.Период));
	
	// Список выбора периода
	Элементы.Период.СписокВыбора.Очистить();
	
	ПрошлыйГод = КонецГода(ДобавитьМесяц(ТекущийПериод, -12));
	Если ПрошлыйГод >= УчетСтраховыхВзносовИП.ДатаНачалаУчетаСтраховыхВзносовИП()
		И (Не ЗначениеЗаполнено(ДатаРегистрации) Или ДатаРегистрации <= НачалоДня(ПрошлыйГод - 86400)) Тогда
		// Добавляем прошлый год, если не знаем дату регистрации ИП или он зарегистрировался до 31 декабря
		Элементы.Период.СписокВыбора.Добавить(НачалоДня(ПрошлыйГод), БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
			НачалоГода(ПрошлыйГод), КонецГода(ПрошлыйГод), Истина));
	КонецЕсли;
	
	// Приводим текущий период к установленной периодичности
	Если Периодичность = Перечисления.Периодичность.Год Тогда
		
		ТекущийПериод = КонецГода(ТекущийПериод);
		Объект.Период = КонецГода(Объект.Период);
		
		Элементы.Период.СписокВыбора.Добавить(НачалоДня(ТекущийПериод), БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
			НачалоГода(ТекущийПериод), КонецГода(ТекущийПериод), Истина));
	Иначе
		
		ТекущийПериод = КонецКвартала(ТекущийПериод);
		Объект.Период = КонецКвартала(Объект.Период);
		
		Для НомерКвартала = 1 По 4 Цикл
			Квартал = КонецКвартала(ДобавитьМесяц(НачалоГода(ТекущийПериод), 3*(НомерКвартала - 1)));
			Если Не ЗначениеЗаполнено(ДатаРегистрации) Или ДатаРегистрации <= НачалоДня(Квартал - 86400) Тогда
				// Добавляем квартал, если ИП зарегистрировался ранее последнего дня квартала
				Элементы.Период.СписокВыбора.Добавить(НачалоДня(Квартал), БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
					НачалоГода(Квартал), КонецКвартала(Квартал), Истина));
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ТекстЗаголовка = НСтр("ru = 'Уплата фиксированных страховых взносов'");
	Если Периодичность = Перечисления.Периодичность.Квартал Тогда;
		ПредставлениеПериода = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
			НачалоКвартала(Объект.Период), КонецКвартала(Объект.Период), Истина);
	Иначе
		ПредставлениеПериода = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
			НачалоГода(Объект.Период), КонецГода(Объект.Период), Истина);
	КонецЕсли;
	
	Если ВыполнениеЗадачиКалендаря Тогда
		// Обработка выполняется в контексте задачи бухгалтера с фиксированным периодом
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 за %2'"),
			ТекстЗаголовка, ПредставлениеПериода);
	Иначе
		// Период выбирается, дублировать в заголовках не нужно
		Заголовок = ТекстЗаголовка;
	КонецЕсли;
	
	// Показываем настройку в год регистрации предпринимателя до отмены 212-ФЗ.
	Элементы.ГруппаУчитыватьДеньРегистрацииПриРасчетеСтраховыхВзносовИП.Видимость = 
		Год(Объект.Период) = Год(ДатаРегистрации)
		И УчетСтраховыхВзносовИП.ПроверятьНастройкуУчетаДняРегистрации(Объект.Период);
	
	НайтиПлатежиСвязанныеСЗадачей();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура НайтиПлатежиСвязанныеСЗадачей()
	
	ПлатежиПФР.Очистить();
	ПлатежиПФРсДоходов.Очистить();
	ПлатежиФФОМС.Очистить();
	ПлатежиФСС.Очистить();
	
	ТаблицаПлатежей = Обработки.РасчетСтраховыхВзносовИП.ДокументыУплаты(Объект.Организация, Объект.Период, Правило);
	Если ТаблицаПлатежей <> Неопределено Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаПлатежей Цикл
			Если СтрокаТаблицы.ВидНалога = Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть Тогда
				Если СтрокаТаблицы.ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.Налог Тогда
					ЗаполнитьЗначенияСвойств(ПлатежиПФР.Добавить(), СтрокаТаблицы);
				ИначеЕсли СтрокаТаблицы.ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела Тогда
					ЗаполнитьЗначенияСвойств(ПлатежиПФРсДоходов.Добавить(), СтрокаТаблицы);
				КонецЕсли;
			ИначеЕсли СтрокаТаблицы.ВидНалога = Перечисления.ВидыНалогов.ФиксированныеВзносы_ФФОМС Тогда
				ЗаполнитьЗначенияСвойств(ПлатежиФФОМС.Добавить(), СтрокаТаблицы);
			ИначеЕсли СтрокаТаблицы.ВидНалога = Перечисления.ВидыНалогов.ФиксированныеВзносы_ФСС Тогда
				ЗаполнитьЗначенияСвойств(ПлатежиФСС.Добавить(), СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	РасчетСтраховыхВзносовИПФормы.ОтобразитьПлатежи(ЭтотОбъект, ПлатежиПФР,         "ДекорацияПлатежПФР");
	РасчетСтраховыхВзносовИПФормы.ОтобразитьПлатежи(ЭтотОбъект, ПлатежиПФРсДоходов, "ДекорацияПлатежПФРсДоходов");
	РасчетСтраховыхВзносовИПФормы.ОтобразитьПлатежи(ЭтотОбъект, ПлатежиФФОМС,       "ДекорацияПлатежФФОМС");
	РасчетСтраховыхВзносовИПФормы.ОтобразитьПлатежи(ЭтотОбъект, ПлатежиФСС,         "ДекорацияПлатежФСС");
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Форма.ВсегоВзносов = Объект.СуммаВзносаПФР + Объект.СуммаВзносаПФРсДоходов + Объект.СуммаВзносаФФОМС + Объект.СуммаВзносаФСС;
	
	Элементы.ГруппаСтраховыеВзносыФСС.Видимость = Форма.УплачиватьДобровольныеВзносыВФСС;
	
	ВзносыОплачены = ВзносыОплачены(Форма);
	Элементы.ОплатитьСБанковскогоСчета.Доступность    = Не ВзносыОплачены;
	Элементы.ОплатитьНаличнымиПоКвитанции.Доступность = Не ВзносыОплачены;
	
	Элементы.ПеренестиОплату.Видимость = Не ВзносыОплачены И Форма.ВыполнениеЗадачиКалендаря И ЧастичнаяОплата(Объект.Период, Форма.Периодичность);
	
	Если  ПлатежиВБюджетКлиентСервер.ДействуетПриказ2017_90н(Форма.ДатаСеанса) Тогда
		ЗаголовокСверки                    = НСтр("ru = 'Запросить сверку с ФНС'");
		ЗаголовокГруппаСверка              = НСтр("ru = 'Сверка с ФНС'");
		ЗаголовокДекорацияИнформацияСверка = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Рекомендуется провести сверку, чтобы убедиться в правильности расчетов с бюджетом 
				|Обычно ответ на запрос сверки приходит в течение 3-6 рабочих дней'"), НовыйШрифтКурсив());
	Иначе
		ЗаголовокСверки                    = НСтр("ru = 'Запросить сверку с ПФР'");
		ЗаголовокГруппаСверка              = НСтр("ru = 'Сверка с ПФР'");
		ЗаголовокДекорацияИнформацияСверка = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Рекомендуется провести сверку, чтобы убедиться в правильности расчетов с фондом 
				|Обычно ответ на запрос сверки приходит в течение 3-6 рабочих дней'"), НовыйШрифтКурсив());
	КонецЕсли;
	Элементы.ГруппаСверка.Заголовок               = ЗаголовокГруппаСверка;
	Элементы.ВыполнитьСверку.Заголовок            = ЗаголовокСверки;
	Элементы.ДекорацияИнформацияСверка.Заголовок  = ЗаголовокДекорацияИнформацияСверка;
	Элементы.ВыполнитьСверку.Видимость            = Не Форма.СверкаВыполнена;
	Элементы.ЗапросНаСверкуНаименование.Видимость = Форма.СверкаВыполнена;
	
	Элементы.КакОплатитьСБанковскогоСчета.Видимость = Не ЗначениеЗаполнено(Форма.СчетОрганизации);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВзносыОплачены(Форма)
	
	Объект = Форма.Объект;
	
	ВзносПФРОплачен         = (Объект.СуммаВзносаПФР = 0);
	ВзносПФРсДоходовОплачен = (Объект.СуммаВзносаПФРсДоходов = 0);
	ВзносФФОМСОплачен       = (Объект.СуммаВзносаФФОМС = 0);
	ВзносФССОплачен         = (Объект.СуммаВзносаФСС = 0);
	
	Возврат ВзносПФРОплачен И ВзносПФРсДоходовОплачен И ВзносФФОМСОплачен И ВзносФССОплачен;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЧастичнаяОплата(Период, Периодичность)
	
	Возврат (Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") И КонецКвартала(Период) < КонецГода(Период));
	
КонецФункции

&НаСервере
Процедура ПериодПриИзмененииНаСервере()
	
	Если Не ВыполнениеЗадачиКалендаря Тогда
		ПорядокУплаты =  Обработки.РасчетСтраховыхВзносовИП.ПорядокУплаты(Объект.Организация, Объект.Период);
		Правило = ПорядокУплаты.Правило;
		Срок    = ПорядокУплаты.Срок;
	КонецЕсли;
	
	УстановитьФункциональныеОпцииФормы();
	
	ПолучитьСведенияОСверке();
	
	РассчитатьСтраховыеВзносыКУплате();
	
	УправлениеФормойНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Если Не ВыполнениеЗадачиКалендаря Тогда
		ПорядокУплаты =  Обработки.РасчетСтраховыхВзносовИП.ПорядокУплаты(Объект.Организация, Объект.Период);
		Правило = ПорядокУплаты.Правило;
		Срок    = ПорядокУплаты.Срок;
	КонецЕсли;
	
	СчетОрганизации = БанковскийСчетОрганизации(Объект.Организация);
	
	УстановитьФункциональныеОпцииФормы();
	
	ПолучитьСведенияОСверке();
	
	РассчитатьСтраховыеВзносыКУплате();
	
	ПроверитьРеквизитыОрганизацииДляОтчетности();
	
	УправлениеФормойНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьУчитыватьДеньРегистрацииПриРасчетеСтраховыхВзносовИП()
	
	Константы.УчитыватьДеньРегистрацииПриРасчетеСтраховыхВзносовИП.Установить(УчитыватьДеньРегистрацииПриРасчетеСтраховыхВзносовИП);
	
	РассчитатьСтраховыеВзносыКУплате();
	
КонецПроцедуры

// Помещает часть таблицы СтраховыеВзносыУплаченные с отбором по ключу во временное хранилище
//
&НаСервере
Функция АдресТаблицыПлатежей(Ключ)
	
	ПараметрыОтбора = Новый Структура("Ключ", Ключ);
	
	ТаблицаПлатежей = СтраховыеВзносыУплаченные.Выгрузить(СтраховыеВзносыУплаченные.НайтиСтроки(ПараметрыОтбора));
	ТаблицаПлатежей.Сортировать("Дата, Ссылка", Новый СравнениеЗначений);
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаПлатежей, УникальныйИдентификатор);
	
КонецФункции

// Серверная обработка оповещения ИзменениеВыписки
//
&НаСервере
Процедура ОбработкаОповещенияИзменениеВыписки()
	
	РассчитатьСтраховыеВзносыКУплате();
	
	УправлениеФормойНаСервере();
	
КонецПроцедуры

#Область РасчетСуммыВзносов

&НаСервере
Процедура РассчитатьСтраховыеВзносыКУплате()
	
	СтраховыеВзносыКУплате = СтраховыеВзносыКУплате(Объект.Организация, Объект.Период, Периодичность);
	ЗаполнитьЗначенияСвойств(Объект, СтраховыеВзносыКУплате, СвойстваОбъектаВзносыКУплате());
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтраховыеВзносыКУплате, СвойстваФормыВзносыНачисленоУплачено());
	
	СтраховыеВзносыУплаченные.Очистить();
	
	СчетаУчетаСтраховыхВзносов = УчетСтраховыхВзносовИП.СчетаУчетаСтраховыхВзносов();
	Если СтраховыеВзносыКУплате.ФиксированныеСтраховыеВзносыУплаченные <> Неопределено Тогда
		СтраховыеВзносыКУплате.ФиксированныеСтраховыеВзносыУплаченные.Колонки.ДокументОплаты.Имя = "Ссылка";
		СтраховыеВзносыКУплате.ФиксированныеСтраховыеВзносыУплаченные.Колонки.НомерДокументаОплаты.Имя = "Номер";
		СтраховыеВзносыКУплате.ФиксированныеСтраховыеВзносыУплаченные.Колонки.ДатаДокументаОплаты.Имя = "Дата";
		Для Каждого СтрокаТаблицы Из СтраховыеВзносыКУплате.ФиксированныеСтраховыеВзносыУплаченные Цикл
			НоваяСтрока = СтраховыеВзносыУплаченные.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			Если СтрокаТаблицы.СчетУчета = СчетаУчетаСтраховыхВзносов.ПФР Тогда
				НоваяСтрока.Ключ = "ПФР";
			ИначеЕсли СтрокаТаблицы.СчетУчета = СчетаУчетаСтраховыхВзносов.ФФОМС Тогда
				НоваяСтрока.Ключ = "ФФОМС";
			ИначеЕсли СтрокаТаблицы.СчетУчета = СчетаУчетаСтраховыхВзносов.ФСС Тогда
				НоваяСтрока.Ключ = "ФСС";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СтраховыеВзносыКУплате.СтраховыеВзносыСДоходовУплаченные <> Неопределено Тогда
		СтраховыеВзносыКУплате.СтраховыеВзносыСДоходовУплаченные.Колонки.ДокументОплаты.Имя = "Ссылка";
		СтраховыеВзносыКУплате.СтраховыеВзносыСДоходовУплаченные.Колонки.НомерДокументаОплаты.Имя = "Номер";
		СтраховыеВзносыКУплате.СтраховыеВзносыСДоходовУплаченные.Колонки.ДатаДокументаОплаты.Имя = "Дата";
		Для Каждого СтрокаТаблицы Из СтраховыеВзносыКУплате.СтраховыеВзносыСДоходовУплаченные Цикл
			НоваяСтрока = СтраховыеВзносыУплаченные.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Ключ = "ПФРсДоходов";
		КонецЦикла;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтраховыеВзносыКУплате(Знач Организация, Знач Период, Знач Периодичность)
	
	СтраховыеВзносы = Новый Структура(СвойстваОбъектаВзносыКУплате() + ", " + СвойстваФормыВзносыНачисленоУплачено());
	
	// Доходы по видам деятельности
	СтруктураДоходов = УчетСтраховыхВзносовИП.СтруктураДоходовПоВидамДеятельности(
		Организация, НачалоГода(Период), КонецКвартала(Период));
	
	СтраховыеВзносы.Вставить("СтруктураДоходов", СтруктураДоходов);
	
	// Фиксированная часть страховых взносов
	ФиксированныеСтраховыеВзносыКУплате = УчетСтраховыхВзносовИП.ФиксированныеСтраховыеВзносыКУплате(
		Организация, Период, Периодичность);
	
	ЗаполнитьЗначенияСвойств(СтраховыеВзносы, ФиксированныеСтраховыеВзносыКУплате);
	
	СтраховыеВзносы.Вставить("ФиксированныеСтраховыеВзносыУплаченные", ФиксированныеСтраховыеВзносыКУплате.СтраховыеВзносыУплаченные);
	
	// Страховые взносы, исчисленные с суммы доходов
	СтраховыеВзносыСДоходовКУплате = УчетСтраховыхВзносовИП.СтраховыеВзносыСДоходовКУплате(
		Организация, Период, Периодичность, СтруктураДоходов, Ложь);
	
	ЗаполнитьЗначенияСвойств(СтраховыеВзносы, СтраховыеВзносыСДоходовКУплате);
	
	СтраховыеВзносы.Вставить("СтраховыеВзносыСДоходовУплаченные", СтраховыеВзносыСДоходовКУплате.СтраховыеВзносыУплаченные);
	
	Возврат СтраховыеВзносы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СвойстваОбъектаВзносыКУплате()
	
	Возврат "СуммаВзносаПФР, СуммаВзносаПФРсДоходов, СуммаВзносаФФОМС, СуммаВзносаФСС";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СвойстваФормыВзносыНачисленоУплачено()
	
	Возврат "СтруктураДоходов, ПредельнаяСуммаВзноса, "
		+ "СуммаВзносаПФРВсего, СуммаВзносаПФРсДоходовВсего, СуммаВзносаФФОМСВсего, СуммаВзносаФССВсего, "
		+ "СуммаВзносаПФРУплачено, СуммаВзносаПФРсДоходовУплачено, СуммаВзносаФФОМСУплачено, СуммаВзносаФССУплачено";
	
КонецФункции

#КонецОбласти

#Область ВыполнениеКоманд

// Создает Платежные поручения или Выплаты наличными в зависимости от выбранного способа оплаты
// 
// Параметры:
//   СпособОплаты - ПеречислениеСсылка.СпособыОплаты
// 
// Возвращаемое значение:
//   Массив - созданные документы
//
&НаСервере
Функция СоздатьПлатежныеДокументыНаСервере(СпособОплаты)
	
	Если СпособОплаты = Перечисления.СпособыУплатыНалогов.БанковскийПеревод Тогда
		
		СчетОрганизации = БанковскийСчетОрганизации(Объект.Организация);
		Если Не ЗначениеЗаполнено(СчетОрганизации) Тогда
			ТекстСообщения = НСтр("ru = 'Укажите банковский счет в реквизитах организации'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Организация);
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеФормойНаСервере();
	
	ТаблицаПлатежей = Обработки.РасчетСтраховыхВзносовИП.ТаблицаПлатежейДляФормированияПлатежныхПоручений(Объект);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Правило",         Правило);
	СтруктураПараметров.Вставить("ПериодСобытия",   Объект.Период);
	СтруктураПараметров.Вставить("Организация",     Объект.Организация);
	СтруктураПараметров.Вставить("НалоговыйПериод", НачалоГода(Объект.Период));
	СтруктураПараметров.Вставить("Платежи",         ПоместитьВоВременноеХранилище(ТаблицаПлатежей));
	СтруктураПараметров.Вставить("СпособОплаты",    СпособОплаты);
	СтруктураПараметров.Вставить("СчетОрганизации", СчетОрганизации);
	
	СозданныеДокументы = Обработки.ФормированиеПлатежныхПорученийНаУплатуНалогов.СоздатьПлатежныеДокументы(СтруктураПараметров);
	
	РассчитатьСтраховыеВзносыКУплате();
	
	УправлениеФормойНаСервере();
	
	Возврат СозданныеДокументы;
	
КонецФункции

&НаСервереБезКонтекста
Функция БанковскийСчетОрганизации(Знач Организация)
	
	СчетОрганизации = Справочники.БанковскиеСчета.ПустаяСсылка();
	
	УчетДенежныхСредствБП.УстановитьБанковскийСчет(
		СчетОрганизации,
		Организация,
		ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	
	Возврат СчетОрганизации;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьСозданныеДокументы(СозданныеДокументы)
	
	Если СозданныеДокументы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПервыйДокумент = СозданныеДокументы[0];
	ТипСозданныхДокументов = ТипЗнч(ПервыйДокумент);
	
	ОповеститьОбИзменении(ТипСозданныхДокументов);
	
	Если СозданныеДокументы.Количество() = 1 Тогда
		
		ПоказатьЗначение(, ПервыйДокумент);
		
	Иначе
		
		Отбор = Новый Структура;
		Отбор.Вставить("Организация", Объект.Организация);
		
		Если ТипСозданныхДокументов = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
			ИмяФормыСписка = "Документ.ПлатежноеПоручение.ФормаСписка";
		ИначеЕсли ТипСозданныхДокументов = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
			ИмяФормыСписка = "Документ.РасходныйКассовыйОрдер.ФормаСписка";
		Иначе
			Возврат;
		КонецЕсли;
		
		СписокДокументов = Новый СписокЗначений;
		СписокДокументов.ЗагрузитьЗначения(СозданныеДокументы);
		СписокВыделения = Новый Структура("Ссылка", СписокДокументов);
		
		ОткрытьФорму(ИмяФормыСписка, Новый Структура("Отбор, ТекущаяСтрока, СписокВыделения", Отбор, ПервыйДокумент, СписокВыделения), ЭтотОбъект, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПеренестиПлатежНаСервере(Организация, Правило, ПериодСобытия)
	
	ЗначенияКлюча = Новый Структура;
	ЗначенияКлюча.Вставить("Организация",   Организация);
	ЗначенияКлюча.Вставить("Правило",       Правило);
	ЗначенияКлюча.Вставить("ПериодСобытия", ПериодСобытия);
	
	КлючЗаписи = РегистрыСведений.ЗадачиБухгалтера.УстановитьСтатусВыполнено(ЗначенияКлюча);
	ИсторияРаботыПользователя.Добавить(КлючЗаписи);
	
	Возврат КлючЗаписи;
	
КонецФункции

#КонецОбласти

#Область Сверка

&НаКлиенте
Процедура ОбработатьВыполнениеСверки(РезультатЗакрытия = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПолучитьСведенияОСверке();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСведенияОСверке()
	
	Если Не ЗначениеЗаполнено(Объект.Организация)
		Или Не ЗначениеЗаполнено(Правило) 
		Или Не ЗначениеЗаполнено(Срок) Тогда
		УправлениеФормой(ЭтотОбъект);
		Возврат;
	КонецЕсли;
	
	ПараметрыДляСверки       = ПараметрыДляСверки();
	СтруктураСведенийОСверке = ВыполнениеЗадачБухгалтера.СведенияОСверке(ПараметрыДляСверки);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураСведенийОСверке,
		"СверкаВыполнена, ОписаниеДействияСверка, ЗапросНаСверкуНаименование");
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыДляСверки()
	
	ПараметрыДляСверки = ВыполнениеЗадачБухгалтера.НовыйПараметрыЗадачиДляСверки();
	ПараметрыДляСверки.Организация = Объект.Организация;
	ПараметрыДляСверки.Правило = Правило;
	ПараметрыДляСверки.ИдентификаторЗадачи = Правило.Владелец.Код;
	ПараметрыДляСверки.ПериодСобытия = Объект.Период;
	ПараметрыДляСверки.Срок = Срок;
	
	Возврат ПараметрыДляСверки;
	
КонецФункции

#КонецОбласти

#Область ПроверкаРеквизитовДляОтчетности

&НаСервере
Процедура ПроверитьРеквизитыОрганизацииДляОтчетности()
	
	Если ЭтоАдресВременногоХранилища(АдресХранилищаНезаполненныхРеквизитов) Тогда
		УдалитьИзВременногоХранилища(АдресХранилищаНезаполненныхРеквизитов);
		АдресХранилищаНезаполненныхРеквизитов = "";
	КонецЕсли;
	
	НезаполненныеРеквизиты = Неопределено;
	РеквизитыОрганизацииЗаполнены = РеквизитыДляОтчетностиЗаполнены(Объект.Организация, НезаполненныеРеквизиты);
	
	Если НЕ РеквизитыОрганизацииЗаполнены Тогда
		АдресХранилищаНезаполненныхРеквизитов = ПоместитьВоВременноеХранилище(НезаполненныеРеквизиты, УникальныйИдентификатор);
	КонецЕсли;
	
	Элементы.СообщениеТребуютсяРеквизиты.Видимость =
		(ЗначениеЗаполнено(Объект.Организация) И НЕ РеквизитыОрганизацииЗаполнены);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПроверяемыеРеквизитыДляОтчетности()
	
	СтрокаРеквизиты = "ИНН,ФамилияИП,ИмяИП,Адрес,ИПРегистрационныйНомерПФР,КодПоОКТМО,КодОрганаПФР";
	СтрокаРеквизиты = СтрЗаменить(СтрокаРеквизиты, " ", "");
	Возврат СтрРазделить(СтрокаРеквизиты, ",", Ложь);
	
КонецФункции 

&НаСервере
Функция РеквизитыДляОтчетностиЗаполнены(Организация, НезаполненныеРеквизиты)
	
	Возврат ОрганизацииФормыДляОтчетности.РеквизитыЗаполнены(
		Организация,
		ПроверяемыеРеквизитыДляОтчетности(),
		НезаполненныеРеквизиты);
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()
	
	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НовыйШрифтКурсив()
	
	Возврат Новый Шрифт(,,,Истина);
	
КонецФункции

#КонецОбласти

