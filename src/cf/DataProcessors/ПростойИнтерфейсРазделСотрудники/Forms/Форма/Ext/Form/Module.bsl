
#Область ОбъявлениеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Получить() Тогда
		Элементы.ГруппаВариантыУчетаЗарплаты.ТекущаяСтраница = Элементы.СтраницаУчетЗарплатыИКадровВоВнешнейПрограмме;
		Возврат;
	КонецЕсли;
	
	ЭтоМедленныйРежимРаботы = ОбщегоНазначенияБП.ЭтоМедленныйРежимРаботы();
	ЭтоВебКлиент            = ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент();
	
	Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	
	ТекущаяДатаРаботы = ТекущаяДатаСеанса();
	
	ПериодРегистрации = РасчетныйПериод(Организация, ТекущаяДатаРаботы);
	
	ПредставлениеПериодаРегистрации = ВыборПериодаКлиентСервер.ПолучитьПредставлениеПериодаОтчета(
		Перечисления.ДоступныеПериодыОтчета.Месяц, ПериодРегистрации, КонецМесяца(ПериодРегистрации));
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

	СпособВыплатыЗарплата = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СпособыВыплатыЗарплаты.Зарплата");
	СпособВыплатыАванс    = Справочники.СпособыВыплатыЗарплаты.НайтиПоРеквизиту("ХарактерВыплаты", Перечисления.ХарактерВыплатыЗарплаты.Аванс);
	
	ЕстьБанковскийСчет = Истина;
	ЭтоПредприниматель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ЮридическоеФизическоеЛицо") = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	Если ЭтоПредприниматель Тогда
		ЕстьБанковскийСчет = Справочники.БанковскиеСчета.ПолучитьКоличествоПодчиненныхЭлементовПоВладельцу(Организация) <> 0;
	КонецЕсли;
	
	РасчетЗарплатыДляНебольшихОрганизаций = ПолучитьФункциональнуюОпцию("РасчетЗарплатыДляНебольшихОрганизаций");
	Элементы.ГруппаКомандыДокументы.Видимость = РасчетЗарплатыДляНебольшихОрганизаций;
	Элементы.ДокументСправкаНДФЛ.Видимость = НЕ РасчетЗарплатыДляНебольшихОрганизаций;
	
	ИспользоватьКадровыйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет");
	
	УстановитьУсловноеОформление();
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		УправлениеФормой(ЭтотОбъект);
	Иначе
		ПустойСписок = ПустойСписок(Организация);
		Если ПустойСписок Тогда
			УправлениеФормой(ЭтотОбъект);
		Иначе
			Если НЕ ЭтоМедленныйРежимРаботы И НЕ ЭтоВебКлиент Тогда
				ПолучитьДанныеРазделаНаСервере();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(Организация) 
		И НЕ ПустойСписок Тогда
		
		Если ЭтоМедленныйРежимРаботы ИЛИ ЭтоВебКлиент Тогда
			ПодключитьОбработчикОжидания("Подключаемый_ПолучитьДанныеРаздела",0.5, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	СтрокаТаблицы = Элементы.Список.ТекущиеДанные;
	ТекущийСотрудник = Неопределено;
	Если СтрокаТаблицы <> Неопределено Тогда
		ТекущийСотрудник = СтрокаТаблицы.Ссылка;
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеДанныхМестаРаботы" Тогда
		
		ПолучитьДанныеРаздела(Параметр);
		
	ИначеЕсли ИмяСобытия = "СозданСотрудник" Тогда
		
		ПолучитьДанныеРаздела(Параметр);
		
		Если ПустойСписок Тогда
			ПустойСписок = Ложь;
			УправлениеФормой(ЭтотОбъект);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ЗаписьДокумента" Тогда
		Если ТипЗнч(Параметр) = Тип("ДокументСсылка.НачислениеЗарплаты")
			ИЛИ ТипЗнч(Параметр) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк")
			ИЛИ ТипЗнч(Параметр) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу")
			ИЛИ ТипЗнч(Параметр) = Тип("ДокументСсылка.Отпуск")
			ИЛИ ТипЗнч(Параметр) = Тип("ДокументСсылка.БольничныйЛист")
			ИЛИ ТипЗнч(Параметр) = Тип("ДокументСсылка.ПриемНаРаботу")
			ИЛИ ТипЗнч(Параметр) = Тип("ДокументСсылка.КадровыйПеревод")
			ИЛИ ТипЗнч(Параметр) = Тип("ДокументСсылка.Увольнение")Тогда
			
			ПолучитьДанныеРаздела(Параметр);
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ЗарплатаРассчитана_ПомощникУчетаЗарплаты" Тогда
		Если Параметр.Организация = Организация Тогда
			ПолучитьДанныеРаздела();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПустойСписок = ПустойСписок(Организация);
	УправлениеФормой(ЭтотОбъект);
	
	ПолучитьДанныеРаздела();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь; // Незачем очищать
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаРегистрацииПриИзменении(Элемент)
	
	ПриИзмененииПериода();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаРегистрацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыВыбора = Новый Структура("НачалоПериода, КонецПериода", ПериодРегистрации, КонецМесяца(ПериодРегистрации));
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериодаМесяц", ПараметрыВыбора, Элементы.ПредставлениеПериодаРегистрации, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПериода()
	
	Если ПериодРегистрации > ТекущаяДатаРаботы Тогда
		ТекущаяДатаРаботы = ПериодРегистрации;
	КонецЕсли;
	
	// Обновляем представление периода на форме.
	ПредставлениеПериодаРегистрации = ВыборПериодаКлиентСервер.ПолучитьПредставлениеПериодаОтчета(
		ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц"),
		ПериодРегистрации,
		КонецМесяца(ПериодРегистрации));
		
	ПолучитьДанныеРаздела();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПриемНаРаботуНажатие(Элемент)
	
	СоздатьДокументПриемНаРаботу();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСообщениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Обработка.ПанельАдминистрированияБП.Форма.Интерфейс");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьКарточкуСотрудника();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УменьшитьПериод(Команда)
	
	ПериодРегистрации = ДобавитьМесяц(ПериодРегистрации,-1);
	ПриИзмененииПериода();
	
КонецПроцедуры

&НаКлиенте
Процедура УвеличитьПериод(Команда)
	
	ПериодРегистрации = ДобавитьМесяц(ПериодРегистрации, 1);
	ПриИзмененииПериода();
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетЗарплаты(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",      Организация);
	ПараметрыФормы.Вставить("ПериодСобытия",    ПериодРегистрации);
	ПараметрыФормы.Вставить("Правило",          "");
	
	ОткрытьФорму("Обработка.ПомощникУчетаЗарплаты.Форма.Форма", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатитьАванс(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",      Организация);
	ПараметрыФормы.Вставить("ПериодСобытия",    ПериодРегистрации);
	ПараметрыФормы.Вставить("Аванс",            Истина);
	ПараметрыФормы.Вставить("Правило",          "");
	
	ОткрытьФорму("Обработка.ПомощникУчетаЗарплаты.Форма.Форма", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокумент(Команда)
	
	СтрокаТаблицы = Элементы.Список.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтрокаТаблицы.Работает Тогда
		
		ТекущийМесяц = Месяц(ПериодРегистрации);
		
		ТекстГод   = Прав(ПредставлениеПериодаРегистрации,4);
		ТекстМесяц = Лев(ПредставлениеПериодаРегистрации,
			СтрДлина(ПредставлениеПериодаРегистрации)-?(ТекущийМесяц = 3 ИЛИ ТекущийМесяц = 8,5,6));
		ТекстМесяц = СтрШаблон(НСтр("ru = '%1е'"), ТекстМесяц);
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Сотрудник ""%1"" не работает в организации в %2 %3 г.'"),
			СтрокаТаблицы.Наименование,
			ТекстМесяц,
			ТекстГод);
	Иначе
		ПараметрыДокумента = Новый Структура("Организация, ПериодРегистрации, Сотрудник", 
											Организация, НачалоМесяца(ПериодРегистрации), СтрокаТаблицы.Ссылка);
		ОткрытьФорму("Документ." + СтрЗаменить(Команда.Имя, "Документ","") + ".ФормаОбъекта",
			Новый Структура("ЗначенияЗаполнения", ПараметрыДокумента),
			ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументПриемНаРаботу(Команда)
	
	СоздатьДокументПриемНаРаботу();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументКадровыйПеревод(Команда)
	
	СтрокаТаблицы = Элементы.Список.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьКадровыйУчет Тогда
		СотрудникиКлиент.ОформитьНаОсновании(ЭтаФорма, СтрокаТаблицы.Ссылка, "Документ." + СтрЗаменить(Команда.Имя, "Документ",""));
	Иначе
		ПараметрыСотрудника = Новый Структура("Ключ", СтрокаТаблицы.Ссылка);
		ФормаСотрудника = ПолучитьФорму("Справочник.Сотрудники.ФормаОбъекта", ПараметрыСотрудника);
		ФормаСотрудника.ТекущийЭлемент = ФормаСотрудника.Элементы.ТекущаяТарифнаяСтавка;
		ФормаСотрудника.Открыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументУвольнение(Команда)
	
	СтрокаТаблицы = Элементы.Список.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьКадровыйУчет Тогда
		СотрудникиКлиент.ОформитьНаОсновании(ЭтаФорма, СтрокаТаблицы.Ссылка, "Документ." + СтрЗаменить(Команда.Имя, "Документ",""));
	Иначе
		ПараметрыСотрудника = Новый Структура("Ключ", СтрокаТаблицы.Ссылка);
		ФормаСотрудника = ПолучитьФорму("Справочник.Сотрудники.ФормаОбъекта", ПараметрыСотрудника);
		ФормаСотрудника.Элементы.ДатаУвольнения.Видимость = Истина;
		ФормаСотрудника.Элементы.Уволить.Видимость        = Ложь;
		ФормаСотрудника.ТекущийЭлемент = ФормаСотрудника.Элементы.ДатаУвольнения;
		ФормаСотрудника.Открыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетТ2(Команда)
	
	СтрокаТаблицы = Элементы.Список.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивСотрудников = Новый Массив;
	МассивСотрудников.Добавить(СтрокаТаблицы.Ссылка);
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Справочник.Сотрудники",
		"ПФ_MXL_Т2",
		МассивСотрудников,
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетВзаиморасчеты(Команда)
	
	Вариант = ПолучитьВариантОтчета("АнализНачисленийИУдержаний", СтрЗаменить(Команда.Имя, "Отчет",""));
	ВариантыОтчетовКлиент.ОткрытьФормуОтчета(ЭтотОбъект, Вариант);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетНДФЛ(Команда)
	
	Вариант = ПолучитьВариантОтчета("АнализНДФЛ", СтрЗаменить(Команда.Имя, "Отчет",""));
	ВариантыОтчетовКлиент.ОткрытьФормуОтчета(ЭтотОбъект, Вариант);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетСтраховыеВзносы(Команда)
	
	Вариант = ПолучитьВариантОтчета("АнализВзносовВФонды", СтрЗаменить(Команда.Имя, "Отчет",""));
	ВариантыОтчетовКлиент.ОткрытьФормуОтчета(ЭтотОбъект, Вариант);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетСотрудники(Команда)
	
	Вариант = ПолучитьВариантОтчета("ОтчетыПоСотрудникам", СтрЗаменить(Команда.Имя, "Отчет",""));
	ВариантыОтчетовКлиент.ОткрытьФормуОтчета(ЭтотОбъект, Вариант);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетНалогиИВзносыКратко(Команда)
	
	Вариант = ПолучитьВариантОтчета("НалогиИВзносыКратко", СтрЗаменить(Команда.Имя, "Отчет",""));
	ВариантыОтчетовКлиент.ОткрытьФормуОтчета(ЭтотОбъект, Вариант);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетТ13(Команда)
	
	Вариант = ПолучитьВариантОтчета("УнифицированнаяФормаТ13", СтрЗаменить(Команда.Имя, "Отчет",""));
	ВариантыОтчетовКлиент.ОткрытьФормуОтчета(ЭтотОбъект, Вариант);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетАнализРасходовНаОплатуТруда(Команда)
	
	ОткрытьФорму("Отчет.АнализРасходовНаОплатуТруда.ФормаОбъекта");
	
КонецПроцедуры

&НаКлиенте
Процедура КарточкаСотрудника(Команда)
	
	ОткрытьКарточкуСотрудника();
	
КонецПроцедуры

&НаКлиенте
Процедура ПометкаУдаления(Команда)
	
	СтрокаТаблицы = Элементы.Список.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СведенияОСотруднике = Новый Структура("Ссылка, ДатаПриема, ДатаУвольнения, ДатаРождения, Работает, Картинка, ПометкаУдаления");
	ЗаполнитьЗначенияСвойств(СведенияОСотруднике, СтрокаТаблицы);
	
	УстановитьСнятьПометкуУдаления(СведенияОСотруднике);
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СведенияОСотруднике, "Работает, Картинка, ПометкаУдаления");
	Объект.Список.Сортировать("Работает Убыв, ПометкаУдаления Возр, Наименование Возр");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанные(Команда)
	
	ПолучитьДанныеРаздела();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//Оформление таблицы Список
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Список");
	ГруппаИли = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ЭлементУО.Отбор.Элементы,
		"ПризнакРаботника",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИли,
		"Объект.Список.Работает", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИли,
		"Объект.Список.ПометкаУдаления", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Если НЕ ЗначениеЗаполнено(Форма.Организация) Тогда
		Форма.Элементы.ГруппаСписокСотрудников.ТекущаяСтраница = Форма.Элементы.СтраницаНеВыбранаОрганизация;
		Форма.Элементы.ГруппаКоманднаяПанель.Доступность = Ложь;
	ИначеЕсли Форма.ПустойСписок Тогда
		Форма.Элементы.ГруппаСписокСотрудников.ТекущаяСтраница = Форма.Элементы.СтраницаПустая;
		Форма.Элементы.ГруппаКоманднаяПанель.Доступность = Ложь;
	Иначе
		Форма.Элементы.ГруппаСписокСотрудников.ТекущаяСтраница = Форма.Элементы.СтраницаСписок;
		Форма.Элементы.ГруппаКоманднаяПанель.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПустойСписок(Организация)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Сотрудники.Ссылка
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.ГоловнаяОрганизация = &Организация";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Пустой();
	
КонецФункции

&НаСервере
Функция ВыполнитьПолучениеДанныхНаСервере(Параметр = Неопределено)
	
	ПараметрыОбработки = СформироватьПараметрыОбработки(Параметр);
	
	НаименованиеЗадания = НСтр("ru = 'Раздел ""Сотрудники"": получение данных'");
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"Обработки.ПростойИнтерфейсРазделСотрудники.ПодготовитьДанные", 
			ПараметрыОбработки, 
			НаименованиеЗадания);
			
		АдресХранилища = Результат.АдресХранилища;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьРезультат()
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ОбновитьВесьСписок  = Ложь;
		ОбновитьСотрудников = Ложь;
		Результат.Свойство("ОбновитьВесьСписок",  ОбновитьВесьСписок);
		Результат.Свойство("ОбновитьСотрудников", ОбновитьСотрудников);
		
		Если ОбновитьВесьСписок ИЛИ ОбновитьСотрудников Тогда
			
			Если Результат.Свойство("Список") Тогда
				Если ТипЗнч(Результат.Список) = Тип("ТаблицаЗначений") Тогда
					
					Если ОбновитьВесьСписок Тогда
						Объект.Список.Очистить();
						Объект.Список.Загрузить(Результат.Список);
					КонецЕсли;
					
					Если ОбновитьСотрудников Тогда
						ОбновитьДанныеСотрудников(Результат.Список);
					КонецЕсли;
					
					Если Объект.Список.Итог("ИсполнительныйЛист")<> 0 Тогда
						Элементы.Удержано.Заголовок = НСтр("ru = 'НДФЛ и алименты'");
					Иначе
						Элементы.Удержано.Заголовок = НСтр("ru = 'НДФЛ'");
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолучитьДанныеРаздела()
	
	ПолучитьДанныеРаздела();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеРаздела(Параметр = Неопределено)
	
	Результат = ВыполнитьПолучениеДанныхНаСервере(Параметр);
	
	Если НЕ Результат.ЗаданиеВыполнено Тогда
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища       = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	Иначе
		ЗагрузитьРезультат();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеРазделаНаСервере()
	
	ПараметрыОбработки = СформироватьПараметрыОбработки();
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	Обработки.ПростойИнтерфейсРазделСотрудники.ПодготовитьДанные(ПараметрыОбработки, АдресХранилища);
	ЗагрузитьРезультат();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеСотрудников(ТаблицаДаных)
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаДаных Цикл
		
		МассивСтрок = Объект.Список.НайтиСтроки(Новый Структура("Ссылка", СтрокаТаблицы.Ссылка));
		Если МассивСтрок.Количество() = 1 Тогда
			ЗаполнитьЗначенияСвойств(МассивСтрок[0], СтрокаТаблицы);
		Иначе
			НоваяСтрока = Объект.Список.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			Объект.Список.Сортировать("Работает Убыв, ПометкаУдаления Возр, Наименование Возр");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПериодРегистрации = РезультатВыбора.НачалоПериода;
	
	ПриИзмененииПериода();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументПриемНаРаботу()
	
	Если ИспользоватьКадровыйУчет Тогда
		ОткрытьФорму("Документ.ПриемНаРаботу.Форма.ФормаДокумента");
	Иначе
		ОткрытьФорму("Справочник.Сотрудники.Форма.ФормаЭлемента");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВариантОтчета(ИмяОтчета, ИмяВарианта)
	
	Отчет         = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Отчет." + ИмяОтчета);
	ВариантОтчета = ВариантыОтчетов.ПолучитьСсылку(Отчет, ИмяВарианта);
	Возврат ВариантОтчета;
	
КонецФункции

&НаКлиенте
Процедура ОтчетДругиеОтчеты(Команда)
	
	ВариантыОтчетовКлиент.ПоказатьПанельОтчетов(
		"Отчеты.Сотрудники", 
		Неопределено, 
		НСтр("ru = 'Отчеты раздела ""Сотрудники""'"));
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуСотрудника()
	
	СтрокаТаблицы = Элементы.Список.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ОткрытиеФормыЭлементаСправочникаСотрудники");
	
	ПараметрыФормы = Новый Структура("Ключ", СтрокаТаблицы.Ссылка);
	ОткрытьФорму("Справочник.Сотрудники.Форма.ФормаЭлемента", ПараметрыФормы);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСнятьПометкуУдаления(СведенияОСотруднике)
	
	СотрудникОбъект = СведенияОСотруднике.Ссылка.ПолучитьОбъект();
	СотрудникОбъект.УстановитьПометкуУдаления(НЕ СотрудникОбъект.ПометкаУдаления);
	
	СведенияОСотруднике.ПометкаУдаления = СотрудникОбъект.ПометкаУдаления;
	
	Обработки.ПростойИнтерфейсРазделСотрудники.УстановитьСтатусСотрудника(СведенияОСотруднике, ПериодРегистрации);
	
КонецПроцедуры

Функция РасчетныйПериод(Организация, ТекущаяДатаРаботы);
	
	ТекущийПериод       = НачалоМесяца(ТекущаяДатаРаботы);
	ПериодЗадолженности = ТекущийПериод;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		НастройкиУчетаЗарплаты = РегистрыСведений.НастройкиУчетаЗарплаты.СоздатьМенеджерЗаписи();
		НастройкиУчетаЗарплаты.Организация = Организация;
		НастройкиУчетаЗарплаты.Прочитать();
		ДатаВыплатыЗарплаты = НастройкиУчетаЗарплаты.ДатаВыплатыЗарплаты;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗарплатаКВыплатеОстатки.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов
		|ИЗ
		|	РегистрНакопления.ЗарплатаКВыплате.Остатки(, Организация = &Организация) КАК ЗарплатаКВыплатеОстатки
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПериодВзаиморасчетов";
		
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ПериодЗадолженности = НачалоМесяца(Выборка.ПериодВзаиморасчетов);
		КонецЕсли;
	Иначе
		ДатаВыплатыЗарплаты = День(ТекущаяДатаРаботы);
	КонецЕсли;
	
	Если ПериодЗадолженности < ТекущийПериод Тогда
		РасчетныйПериод = ПериодЗадолженности;
	Иначе
		Если ДатаВыплатыЗарплаты >= День(ТекущаяДатаРаботы) Тогда
			РасчетныйПериод = НачалоМесяца(ДобавитьМесяц(ТекущийПериод, -1));
		Иначе
			РасчетныйПериод = ТекущийПериод;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РасчетныйПериод;
	
КонецФункции

#Область ДлительныеОперации

&НаСервере
Функция СформироватьПараметрыОбработки(Параметр = Неопределено)
	
	ПараметрыОбработки = Новый Структура();
	ПараметрыОбработки.Вставить("Организация",             Организация);
	ПараметрыОбработки.Вставить("ПериодРегистрации",       ПериодРегистрации);
	ПараметрыОбработки.Вставить("ТекущаяДатаРаботы",       ТекущаяДатаРаботы);
	ПараметрыОбработки.Вставить("Параметр",                Параметр);
	
	Возврат ПараметрыОбработки;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ФормаДлительнойОперации.Открыта() 
			И ФормаДлительнойОперации.ИдентификаторЗадания = ИдентификаторЗадания Тогда
			Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
				ЗагрузитьРезультат();
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			Иначе
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания(
					"Подключаемый_ПроверитьВыполнениеЗадания", 
					ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
					Истина);
			КонецЕсли;
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти


#КонецОбласти

