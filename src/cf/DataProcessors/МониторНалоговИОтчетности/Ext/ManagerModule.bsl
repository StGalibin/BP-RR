#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс
// Создает и заполняет модель налоговых и отчетных индикаторов монитора.
// 
// Параметры:
//  Параметры - Структура - структура со свойствами:
//   * Организация                     - СправочникСсылка.Организация - организация, для которой формируются индикаторы.
//   * Текущий день                    - Дата - день на который формируются индикаторы.
//   * ДатаНачалаПримененияЭДООтчетов  - Дата - дата, с которой анализируется ЭДО отчетность.
//   * ОтсутствуютПатенты              - Булево - признак того, что для ИП, применяющего патент, нет введены патенты. 
//                                                Для остальных лиц должен быть ЛОЖЬ.
//   * ОтсутствуютВидыДеятельностиЕНВД - Булево - признак того, что для организации, применяющей ЕНВД, не введены виды деятельности
//                                                Для остальных лиц должен быть ЛОЖЬ.
//  АдресРезультата - Строка - адрес временного хранилища, в которое будет помещен результат работы процедуры.
// 
// Возвращаемое значение:
//  ХранилищеЗначения - сформированная модель монитора, включающая данные для каждого из столбцов формы монитора. 
//                      Хранилище содержит структуру со следующими ключами:
//   * ВключенныеЗадачи    - ТаблицаЗначений - см функцию НовыйВключенныеЗадачи().
//   * НалоговыеИндикаторы - ТаблицаЗначений - см функцию НовыйТаблицаНалоговыхИндикаторов().
//   * ОтчетныеИндикаторы  - ТаблицаЗначений - см. функцию НовыйТаблицаОтчетныхИндикаторов().
//
Функция СФормироватьПоказателиМонитораВФоне(Параметры, АдресРезультата) Экспорт
	
	ИндикаторыМонитора = СформироватьПоказателиМонитора(Параметры);

	Хранилище = Новый ХранилищеЗначения(ИндикаторыМонитора);
	ПоместитьВоВременноеХранилище(Хранилище, АдресРезультата);

КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ЗеленыйИндикатор() Экспорт
	Возврат "Зеленый";
КонецФункции

Функция ЖелтыйИндикатор() Экспорт
	Возврат "Желтый";
КонецФункции

Функция КрасныйИндикатор() Экспорт
	Возврат "Красный"
КонецФункции

Функция Ненастроенный() Экспорт
	Возврат "Ненастроеннный";
КонецФункции

Процедура УдалитьСтрокиТаблицы(ТаблицаИсточник, СтрокиТаблицы) Экспорт
	
	Для каждого Задача Из СтрокиТаблицы Цикл
		ТаблицаИсточник.Удалить(Задача);
	КонецЦикла;
	
КонецПроцедуры

Функция КапитализироватьСтроку(ИсхСтрока, ВерхнийРегистр = Истина) Экспорт
	
	ПерваяБуква = ?(ВерхнийРегистр, ВРег(Лев(ИсхСтрока, 1)), НРег(Лев(ИсхСтрока, 1)));
	Остальное = Сред(ИсхСтрока, 2);
	Возврат ПерваяБуква + Остальное;
	
КонецФункции

Функция СамыйКритичныйИндикатор(Индикаторы) Экспорт
	
	Индикатор = ЗеленыйИндикатор();
	
	Для каждого ТекИндикатор Из Индикаторы Цикл 
		
		Если ТекИндикатор = Ненастроенный() Тогда 
			Возврат ТекИндикатор;
		КонецЕсли;
		
		Если ТекИндикатор = КрасныйИндикатор() Тогда 
			Возврат ТекИндикатор;
		КонецЕсли;
		
		Если ТекИндикатор = ЖелтыйИндикатор() Тогда
			Индикатор = ТекИндикатор;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Индикатор;
	
КонецФункции

Функция ЭтоЗадачаУСН(КодЗадачи) Экспорт
	Возврат ?(КодЗадачи = "УСН", Истина, Ложь);
КонецФункции

Функция КодЗадачиНДФЛПоУплате() Экспорт
	
	Возврат "НДФЛ_Агент_Уплата";
	
КонецФункции

Функция КодЗадачиНДФЛПоОтчету() Экспорт
	
	Возврат "НДФЛ_Агент";
	
КонецФункции

Функция ЭтоЗадачаЕНВД(КодЗадачи) Экспорт
	
	Возврат КодЗадачи = "ЕНВД";
	
КонецФункции

Функция КодЗадачиПатент() Экспорт
	
	Возврат "Патент";
	
КонецФункции

Функция ЭтоЗадачаСтраховыхВзносов(КодЗадачи) Экспорт
	
	Возврат КодЗадачи = "СтраховыеВзносы";
	
КонецФункции

Функция ЭтоЗадачаВзносовИП(КодЗадачи) Экспорт
	
	Возврат КодЗадачи = "СтраховыеВзносы_Предприниматель";
	
КонецФункции

Функция ЭтоЗадачаЕжеквартальныхФиксированныхВзносовИП(КодЗадачи, КодПравила) Экспорт
	
	Возврат ЭтоЗадачаВзносовИП(КодЗадачи) И КодПравила = "2013_УплатаКвартал";
	
КонецФункции

Функция ЭтоЗадачаФиксированныхВзносовИП(КодЗадачи, КодПравила) Экспорт
	
	Возврат ЭтоЗадачаВзносовИП(КодЗадачи)
		И (КодПравила = "2013_Уплата" Или КодПравила = "2013_УплатаКвартал");
		
КонецФункции

Функция ЭтоЗадачаВзносовСДоходовИП(КодЗадачи, КодПравила) Экспорт
	
	Возврат ЭтоЗадачаВзносовИП(КодЗадачи) И КодПравила = "2013_Уплата_СДоходов";
	
КонецФункции

Функция ЭтоЗадачаТорговыйСбор(КодЗадачи) Экспорт

	Возврат КодЗадачи = "ТорговыйСбор";

КонецФункции

Функция КодЗадачиБухгалтерскаяОтчетность()
	
	Возврат "БухгалтерскаяОтчетность"
	
КонецФункции

Функция КодПравилаБОМалыеПредприятия()
	
	Возврат "2013_МалыеПредприятия"
	
КонецФункции

Функция КодПравилаБОСоциальноОриентированные()
	
	Возврат "2016_СоциальноОриентированные"
	
КонецФункции

Функция КодПравилаБОНекоммерческиеОрганизации()
	
	Возврат "2013_НекоммерческиеОрганизации"
	
КонецФункции

Функция КодЗадачиСреднесписочнаяЧисленность()

	Возврат "СведенияОСреднесписочнойЧисленности";

КонецФункции

Функция ЭтоЗадачаПроверкиСтатистики(КодЗадачи, КодПравила) Экспорт
	
	Если КодЗадачи = КодЗадачиСтатистика()
		И (КодПравила = "ПроверитьПереченьФормФизлица" Или КодПравила = "ПроверитьПереченьФормЮрлица") Тогда
		
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция КодЗадачиСтатистика()
	
	Возврат "СтатистическаяОтчетность";
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СформироватьПоказателиМонитора(Параметры) 
	
	Организация                     = Параметры.Организация;
	ТекущийДень                     = Параметры.ТекущийДень;
	ДатаНачалаПримененияЭДООтчетов  = Параметры.ДатаНачалаПримененияЭДООтчетов;
	ОтсутствуютПатенты              = Параметры.ОтсутствуютПатенты;
	ОтсутствуютВидыДеятельностиЕНВД = Параметры.ОтсутствуютВидыДеятельностиЕНВД;
	
	СписокОрганизаций = ОбщегоНазначенияБП.СписокДоступныхОрганизаций(Организация);
	Если СписокОрганизаций.Количество() > 0 Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	// Сначала обновим список задач при необходимости.
	КалендарьБухгалтера.ОбновитьЗадачи(Организация);
	
	ЗадачиОрганизации = СформироватьТекущиеПредстоящиеЗадачи(Организация, ТекущийДень);
	ТаблицаСоСчетамиУчета = ПоддерживаемыеСчетаУчетаЗадач();
	
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизации); // 50.01
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);   // 51
	СчетаУчетаДС = БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(МассивСчетов);
	
	// Подготовка налоговых индикаторов.
	НалоговыеИндикаторы = НовыйТаблицаНалоговыхИндикаторов();
	
	ПрименитьАлгоритмДляНенастроенныхНалогов(НалоговыеИндикаторы, ЗадачиОрганизации.ЗадачиПоНалогам, 
		ОтсутствуютПатенты, ОтсутствуютВидыДеятельностиЕНВД);
	
	ПрименитьОбщийАлгоритмПоНалогам(НалоговыеИндикаторы, ЗадачиОрганизации.ЗадачиПоНалогам, 
		Организация, ТекущийДень, ТаблицаСоСчетамиУчета, СчетаУчетаДС);
		
	ПрименитьАлгоритмУСНПриПересечении(НалоговыеИндикаторы, ЗадачиОрганизации.ЗадачиПоНалогам,
		Организация, ТекущийДень, ТаблицаСоСчетамиУчета, СчетаУчетаДС);
		
	ИндикаторВзносовИП = ПрименитьАлгоритмДляВзносовИП(НалоговыеИндикаторы, ЗадачиОрганизации.ЗадачиПоНалогам,
		Организация, ТекущийДень, ТаблицаСоСчетамиУчета, СчетаУчетаДС);
	
	ПрименитьАлгоритмДляВзносовИПСДоходов(НалоговыеИндикаторы, ЗадачиОрганизации.ЗадачиПоНалогам
		, Организация, ТекущийДень, ИндикаторВзносовИП, СчетаУчетаДС);
	
	НалоговыеИндикаторы.Сортировать("Владелец, Правило, Срок", Новый СравнениеЗначений());
	
	// Подготовка отчетных индикаторов. 
	ОтчетныеИндикаторы = НовыйТаблицаОтчетныхИндикаторов();
	
	ПрименитьАлгоритмДляНенастроенныхОтчетов(ОтчетныеИндикаторы, ЗадачиОрганизации.ЗадачиПоОтчетам);
	
	ПрименитьАлгоритмПоОтчетам(ОтчетныеИндикаторы, ЗадачиОрганизации.ЗадачиПоОтчетам, 
		Организация, ТекущийДень, ДатаНачалаПримененияЭДООтчетов);
	
	ОтчетныеИндикаторы.Сортировать("Владелец, Правило, Срок", Новый СравнениеЗначений());
	
	Результат = Новый Структура;
	Результат.Вставить("НалоговыеИндикаторы", НалоговыеИндикаторы);
	Результат.Вставить("ОтчетныеИндикаторы",  ОтчетныеИндикаторы);
	Результат.Вставить("ВключенныеЗадачи",    ЗадачиОрганизации.ВключенныеЗадачи);
	Результат.Вставить("ВсеЗадачиВыполнены",  ВсеЗадачиВыполнены(НалоговыеИндикаторы, ОтчетныеИндикаторы));
	
	Возврат Результат
	
КонецФункции

Функция ВсеЗадачиВыполнены(НалоговыеИндикаторы, ОтчетныеИндикаторы)
	
	НалогиУплачены = НалоговыеИндикаторы.НайтиСтроки(Новый Структура("Индикатор", ЗеленыйИндикатор())).Количество()
		= НалоговыеИндикаторы.Количество();
		
	ОтчетыСданы = ОтчетныеИндикаторы.НайтиСтроки(Новый Структура("Индикатор", ЗеленыйИндикатор())).Количество()
		= ОтчетныеИндикаторы.Количество();
		
	Возврат НалогиУплачены И ОтчетыСданы;
	
КонецФункции

Функция НовыйТаблицаНалоговыхИндикаторов()
	
	ТаблицаИндикаторов = Новый ТаблицаЗначений;
	ТаблицаИндикаторов.Колонки.Добавить("Владелец",             Новый ОписаниеТипов("СправочникСсылка.ЗадачиБухгалтера")); // задача бухгалтера по  уплате налога.
	ТаблицаИндикаторов.Колонки.Добавить("Правило",              Новый ОписаниеТипов("СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов")); // правило по  уплате налога.
	ТаблицаИндикаторов.Колонки.Добавить("БудущаяЗадача",        Новый ОписаниеТипов("Структура")); // см. описание НовыйБудущаяЗадача().
	ТаблицаИндикаторов.Колонки.Добавить("Наименование",         ОбщегоНазначения.ОписаниеТипаСтрока(150)); // краткое описание текста задачи, которое отображается в мониторе.
	ТаблицаИндикаторов.Колонки.Добавить("КодПравила",           ОбщегоНазначения.ОписаниеТипаСтрока(50)); // код элемента справочника СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов.
	ТаблицаИндикаторов.Колонки.Добавить("Срок",                 ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя)); // крайний срок уплаты налога.
	ТаблицаИндикаторов.Колонки.Добавить("ПериодСобытия",        ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя)); // последний день очередного периода начисления налога.
	ТаблицаИндикаторов.Колонки.Добавить("НачалоПериодаСобытия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя)); // первый день очередного периода начисления налога.
	ТаблицаИндикаторов.Колонки.Добавить("Индикатор",            ОбщегоНазначения.ОписаниеТипаСтрока(20)); // тип индикатора (Зеленый, красный или желтый).
	ТаблицаИндикаторов.Колонки.Добавить("КУплатеДолг",         ОбщегоНазначения.ОписаниеТипаЧисло(15, 2)); // сумма задолженности перед бюджетом.
	ТаблицаИндикаторов.Колонки.Добавить("КУплатеТекущий",       ОбщегоНазначения.ОписаниеТипаЧисло(15, 2)); // текущая сумма уплаты налога, если срок уплаты налога не наступил, тогда не должна заполняться.
	ТаблицаИндикаторов.Колонки.Добавить("Периодичность",        Новый ОписаниеТипов("ПеречислениеСсылка.Периодичность")); // периодичность периода начисления налога.
	ТаблицаИндикаторов.Колонки.Добавить("ЭтоТекущаяЗадача",     Новый ОписаниеТипов("Булево")); // означает, что срок оплаты налога наступил, но ещё не завершился.
	
	Возврат ТаблицаИндикаторов;
	
КонецФункции

Функция НовыйТаблицаОтчетныхИндикаторов()
	
	ТаблицаИндикаторов = Новый ТаблицаЗначений;
	ТаблицаИндикаторов.Колонки.Добавить("Владелец",             Новый ОписаниеТипов("СправочникСсылка.ЗадачиБухгалтера")); // задача по сдаче отчета
	ТаблицаИндикаторов.Колонки.Добавить("Правило",              Новый ОписаниеТипов("СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов")); // правило по сдаче отчета.
	ТаблицаИндикаторов.Колонки.Добавить("БудущаяЗадача",        Новый ОписаниеТипов("Структура")); // см. описание НовыйБудущаяЗадача().
	ТаблицаИндикаторов.Колонки.Добавить("Наименование",         ОбщегоНазначения.ОписаниеТипаСтрока(150)); //краткое описание текста задачи, которое отображается в мониторе.
	ТаблицаИндикаторов.Колонки.Добавить("КодПравила",           ОбщегоНазначения.ОписаниеТипаСтрока(50)); // код элемента справочника СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов.
	ТаблицаИндикаторов.Колонки.Добавить("Срок",                 ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя)); // крайний срок сдачи отчета.
	ТаблицаИндикаторов.Колонки.Добавить("ПериодСобытия",        ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя)); // последний день очередного отчетного периода.
	ТаблицаИндикаторов.Колонки.Добавить("НачалоПериодаСобытия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя)); // первый день очередного отчетного периода.
	ТаблицаИндикаторов.Колонки.Добавить("Индикатор",            ОбщегоНазначения.ОписаниеТипаСтрока(20)); // тип индикатора (Зеленый, красный или желтый).
	ТаблицаИндикаторов.Колонки.Добавить("ЭтоТекущаяЗадача",     Новый ОписаниеТипов("Булево")); // означает, что срок оплаты налога наступил, но ещё не завершился.
	ТаблицаИндикаторов.Колонки.Добавить("ПросроченныеОтчеты",   Новый ОписаниеТипов("ТаблицаЗначений")); // список несданных вовремя отчетов. См функцию НовыйПросроченныеОтчеты().
	ТаблицаИндикаторов.Колонки.Добавить("СтатусЭДОТекОтчета",   ОбщегоНазначения.ОписаниеТипаСтрока(50)); // статус ЭДО отчета, срок сдачи которого наступил, но ещё не завершился.
	ТаблицаИндикаторов.Колонки.Добавить("ТекущийОтчетСдан",     Новый ОписаниеТипов("Булево")); // признак, того, что задача по текущему отчету выполнена.
	ТаблицаИндикаторов.Колонки.Добавить("ТекущийОтчетЕстьВБазе",Новый ОписаниеТипов("Булево")); // признак того, что текущий отчет записан в базу.
	ТаблицаИндикаторов.Колонки.Добавить("Периодичность",        Новый ОписаниеТипов("ПеречислениеСсылка.Периодичность")); // периодичность отчетного периода по правилу.
	
	Возврат ТаблицаИндикаторов;
	
КонецФункции

Функция НовыйБудущаяЗадача()
	
	БудущаяЗадача = Новый Структура;
	БудущаяЗадача.Вставить("Наименование", ""); // краткое описание текста задачи, которое отображается в мониторе.
	БудущаяЗадача.Вставить("ПериодСобытия", Дата("00010101")); // последний день очередного отчетного периода.
	БудущаяЗадача.Вставить("Срок", Дата("00010101"));  // крайний срок выполнения очередной задачи.
	БудущаяЗадача.Вставить("НачалоПериодаСобытия", Дата("00010101")); // первый день очередного отчетного периода.
	БудущаяЗадача.Вставить("НачалоВыполнения", Дата("00010101")); // первый день, начиная с которого можно приступать к выполнению задачи.
	
	Возврат БудущаяЗадача;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеЗадач

// Заполняет все задачи в разрезе правил по налогам и отчетам, которые организация по закону должна выполнить, начиная с сегодняшнего дня. 
// Результат функции передается далее конкретным алгоритмам, которые решают, исходя из конкретной учетной политики и конкретных данных базы, 
// должна ли это задача действительно выполнятся и какой у нее должен статус (красный, желтый, зеленый, серый).
//
Функция СформироватьТекущиеПредстоящиеЗадачи(Организация, ТекущийДень)
	
	НачалоИнтервала = Дата("00010101");
	КонецИнтервала  = ДобавитьМесяц(КонецГода(ТекущийДень), 12);
	
	Расписание = РегистрыСведений.ЗадачиБухгалтера.РасписаниеПоНалогамОтчетамЗаПериод(Организация, НачалоИнтервала, КонецИнтервала);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Расписание", Расписание);
	Запрос.УстановитьПараметр("ТекущийДень", НачалоДня(ТекущийДень));
	Запрос.УстановитьПараметр("ИсключаемыеПравила", ИсключаемыеПравила());
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПравилаРазовыхЗадач", ПравилаРазовыхЗадач());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Расписание.Срок КАК Срок,
	|	Расписание.Правило КАК Правило,
	|	Расписание.Наименование,
	|	Расписание.ПериодСобытия,
	|	Расписание.НачалоВыполнения
	|ПОМЕСТИТЬ РасписаниеЗаПериод
	|ИЗ
	|	&Расписание КАК Расписание
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Правило,
	|	Расписание.ПериодСобытия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасписаниеЗаПериод.Срок КАК Срок,
	|	РасписаниеЗаПериод.Правило КАК Правило,
	|	РасписаниеЗаПериод.Наименование,
	|	РасписаниеЗаПериод.ПериодСобытия,
	|	РасписаниеЗаПериод.НачалоВыполнения
	|ПОМЕСТИТЬ ВТРасписание
	|ИЗ
	|	РасписаниеЗаПериод КАК РасписаниеЗаПериод
	|ГДЕ
	|	НЕ РасписаниеЗаПериод.Правило В (&ИсключаемыеПравила)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗадачиБухгалтера.Срок,
	|	ЗадачиБухгалтера.Правило,
	|	ЗадачиБухгалтера.Наименование,
	|	ЗадачиБухгалтера.ПериодСобытия,
	|	ЗадачиБухгалтера.НачалоВыполнения
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|		ЛЕВОЕ СОЕДИНЕНИЕ РасписаниеЗаПериод КАК РасписаниеЗаПериод
	|		ПО ЗадачиБухгалтера.Правило = РасписаниеЗаПериод.Правило
	|			И ЗадачиБухгалтера.ПериодСобытия = РасписаниеЗаПериод.ПериодСобытия
	|ГДЕ
	|	ЗадачиБухгалтера.Организация = &Организация
	|	И ЗадачиБухгалтера.Правило В(&ПравилаРазовыхЗадач)
	|	И РасписаниеЗаПериод.Правило ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Правило,
	|	Срок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТРасписание.Срок КАК Срок,
	|	ВТРасписание.Правило КАК Правило,
	|	ВТРасписание.Наименование,
	|	ВТРасписание.ПериодСобытия,
	|	ВТРасписание.НачалоВыполнения
	|ПОМЕСТИТЬ ТекущиеЗадачи
	|ИЗ
	|	ВТРасписание КАК ВТРасписание
	|ГДЕ
	|	ВТРасписание.НачалоВыполнения <= &ТекущийДень
	|	И (ВТРасписание.Срок >= &ТекущийДень
	|			ИЛИ ВЫРАЗИТЬ(ВТРасписание.Правило КАК Справочник.ПравилаПредставленияОтчетовУплатыНалогов).Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.Отчет))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Срок,
	|	Правило
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ВТРасписание.Срок) КАК Срок,
	|	ВТРасписание.Правило КАК Правило
	|ПОМЕСТИТЬ БудущиеЗадачи
	|ИЗ
	|	ВТРасписание КАК ВТРасписание
	|ГДЕ
	|	ВТРасписание.НачалоВыполнения > &ТекущийДень
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТРасписание.Правило
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Срок,
	|	Правило
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПолныйСписокТекущийБудущихПравил.Правило КАК Правило,
	|	МИНИМУМ(ПолныйСписокТекущийБудущихПравил.БудЗадачаСрок) КАК БудЗадачаСрок,
	|	МАКСИМУМ(ПолныйСписокТекущийБудущихПравил.ТекЗадачаСрок) КАК ТекЗадачаСрок
	|ПОМЕСТИТЬ ТекущиеБудущиеПравила
	|ИЗ
	|	(ВЫБРАТЬ
	|		БудущиеЗадачи.Правило КАК Правило,
	|		БудущиеЗадачи.Срок КАК БудЗадачаСрок,
	|		ДАТАВРЕМЯ(1, 1, 1) КАК ТекЗадачаСрок
	|	ИЗ
	|		БудущиеЗадачи КАК БудущиеЗадачи
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТекущиеЗадачи.Правило,
	|		ДАТАВРЕМЯ(2999, 12, 31),
	|		ТекущиеЗадачи.Срок
	|	ИЗ
	|		ТекущиеЗадачи КАК ТекущиеЗадачи) КАК ПолныйСписокТекущийБудущихПравил
	|
	|СГРУППИРОВАТЬ ПО
	|	ПолныйСписокТекущийБудущихПравил.Правило
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Правило
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТекущиеБудущиеПравила.Правило КАК Правило,
	|	ТекущиеЗадачи.Срок КАК ТекЗадачаСрок,
	|	ТекущиеЗадачи.Наименование КАК ТекЗадачаНаименование,
	|	ТекущиеЗадачи.ПериодСобытия КАК ТекЗадачаПериодСобытия,
	|	ТекущиеЗадачи.НачалоВыполнения КАК ТекЗадачаНачалоВыполнения,
	|	БудущиеЗадачи.Срок КАК БудЗадачаСрок,
	|	БудущиеЗадачи.Наименование КАК БудЗадачаНаименование,
	|	БудущиеЗадачи.ПериодСобытия КАК БудЗадачаПериодСобытия,
	|	БудущиеЗадачи.НачалоВыполнения КАК БудЗадачаНачалоВыполнения,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Действие,
	|	ВЫБОР
	|		КОГДА ТекущиеЗадачи.Правило ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьТекущаяЗадача,
	|	ВЫБОР
	|		КОГДА БудущиеЗадачи.Правило ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьБудущаяЗадача,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Владелец КАК Владелец,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Код КАК КодПравила,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Владелец.Код КАК КодЗадачи,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Владелец.Наименование КАК ИмяЗадачи,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Описание,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Владелец.РеквизитДопУпорядочивания КАК Порядок,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Периодичность
	|ИЗ
	|	ТекущиеБудущиеПравила КАК ТекущиеБудущиеПравила
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТекущиеЗадачи КАК ТекущиеЗадачи
	|		ПО ТекущиеБудущиеПравила.Правило = ТекущиеЗадачи.Правило
	|			И ТекущиеБудущиеПравила.ТекЗадачаСрок = ТекущиеЗадачи.Срок
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРасписание КАК БудущиеЗадачи
	|		ПО ТекущиеБудущиеПравила.Правило = БудущиеЗадачи.Правило
	|			И ТекущиеБудущиеПравила.БудЗадачаСрок = БудущиеЗадачи.Срок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК ПравилаПредставленияОтчетовУплатыНалогов
	|		ПО ТекущиеБудущиеПравила.Правило = ПравилаПредставленияОтчетовУплатыНалогов.Ссылка
	|ГДЕ
	|	НЕ ПравилаПредставленияОтчетовУплатыНалогов.ПометкаУдаления = ИСТИНА";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЗадачиПоНалогам  = НовыйЗадачиОрганизации();
	ЗадачиПоОтчетам  = НовыйЗадачиОрганизации();
	ВключенныеЗадачи = НовыйВключенныеЗадачи();
	
	Пока Выборка.Следующий() Цикл
		
		Если Не (Выборка.ЕстьТекущаяЗадача Или Выборка.ЕстьБудущаяЗадача) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтоНалог = ЭтоНалоговыйПоказатель(Выборка.Действие);
		
		НоваяСтрока = ?(ЭтоНалог, ЗадачиПоНалогам.Добавить(), ЗадачиПоОтчетам.Добавить());
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		Если Выборка.ЕстьТекущаяЗадача Тогда
			
			НоваяСтрока.ЭтоТекущаяЗадача = Истина;
			НоваяСтрока.Срок             = Выборка.ТекЗадачаСрок;
			НоваяСтрока.НачалоВыполнения = Выборка.ТекЗадачаНачалоВыполнения;
			НоваяСтрока.ПериодСобытия    = КонецДня(Выборка.ТекЗадачаПериодСобытия);
			
			НоваяСтрока.НачалоПериодаСобытия = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(
				Выборка.Периодичность, Выборка.ТекЗадачаПериодСобытия);
				
			НоваяСтрока.Наименование = СокращенноеНаименованиеЗадачи(
				Выборка.КодЗадачи, 
				Выборка.КодПравила, 
				Выборка.ИмяЗадачи,
				Выборка.Описание, 
				НоваяСтрока.НачалоПериодаСобытия, 
				НоваяСтрока.ПериодСобытия);
			
		Иначе
			
			НоваяСтрока.ЭтоТекущаяЗадача = Ложь;
			НоваяСтрока.Срок             = Выборка.БудЗадачаСрок;
			НоваяСтрока.НачалоВыполнения = Выборка.БудЗадачаНачалоВыполнения;
			НоваяСтрока.ПериодСобытия    = КонецДня(Выборка.БудЗадачаПериодСобытия);
			
			НоваяСтрока.НачалоПериодаСобытия = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(
				Выборка.Периодичность, Выборка.БудЗадачаПериодСобытия);
				
			НоваяСтрока.Наименование = СокращенноеНаименованиеЗадачи(
				Выборка.КодЗадачи, 
				Выборка.КодПравила, 
				Выборка.ИмяЗадачи, 
				Выборка.Описание, 
				НоваяСтрока.НачалоПериодаСобытия, 
				НоваяСтрока.ПериодСобытия);
			
		КонецЕсли;
		
		БудущаяЗадача = НовыйБудущаяЗадача();
		Если Выборка.ЕстьБудущаяЗадача Тогда
			
			БудущаяЗадача.Срок             = Выборка.БудЗадачаСрок;
			БудущаяЗадача.НачалоВыполнения = Выборка.БудЗадачаНачалоВыполнения;
			БудущаяЗадача.ПериодСобытия    = КонецДня(Выборка.БудЗадачаПериодСобытия);
			
			БудущаяЗадача.НачалоПериодаСобытия = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(
				Выборка.Периодичность, Выборка.БудЗадачаПериодСобытия);
				
			БудущаяЗадача.Наименование = СокращенноеНаименованиеЗадачи(
				Выборка.КодЗадачи, 
				Выборка.КодПравила, 
				Выборка.ИмяЗадачи, 
				Выборка.Описание, 
				БудущаяЗадача.НачалоПериодаСобытия, 
				БудущаяЗадача.ПериодСобытия);
				
		КонецЕсли;
		НоваяСтрока.БудущаяЗадача = БудущаяЗадача;
		
		ВключеннаяЗадача = ВключенныеЗадачи.Найти(Выборка.Владелец, "Владелец");
		Если ВключеннаяЗадача = Неопределено Тогда
			ВключеннаяЗадача = ВключенныеЗадачи.Добавить();
			ВключеннаяЗадача.ПоддерживаетсяНалог = Истина;
		КонецЕсли;
		
		Если ЭтоНалог Тогда
			ВключеннаяЗадача.ПравилоНалог.Добавить(Выборка.Правило);
		Иначе
			ВключеннаяЗадача.ПравилоОтчет.Добавить(Выборка.Правило);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ВключеннаяЗадача, Выборка);
		ВключеннаяЗадача.ИмяЗадачи = КапитализироватьСтроку(ВключеннаяЗадача.ИмяЗадачи);
		
		Если ЭтоНалог И Не ЭтаНалоговаяЗадачаПоддерживается(Выборка.КодЗадачи) Тогда
			ВключеннаяЗадача.ПоддерживаетсяНалог = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация) 
		И УчетнаяПолитика.ПрименяетсяУСНПатент(Организация, ТекущийДень) Тогда
		
		ИдЗадачиПатент = КодЗадачиПатент();
		
		СтрокаПатент = ВключенныеЗадачи.Добавить();
		СтрокаПатент.ИмяЗадачи           = ИдЗадачиПатент;
		СтрокаПатент.КодЗадачи           = ИдЗадачиПатент;
		СтрокаПатент.ПоддерживаетсяНалог = Ложь;
		СтрокаПатент.Порядок             = 11;
		
		СтрокаПатент = ЗадачиПоНалогам.Добавить();
		СтрокаПатент.КодЗадачи = ИдЗадачиПатент;
	КонецЕсли;
	
	ВключенныеЗадачи.Сортировать("Порядок");
	Возврат Новый Структура("ЗадачиПоНалогам, ЗадачиПоОтчетам, ВключенныеЗадачи", 
		ЗадачиПоНалогам, ЗадачиПоОтчетам, ВключенныеЗадачи);
	
КонецФункции

Функция НовыйЗадачиОрганизации()
	
	ТаблицаЗадач = Новый ТаблицаЗначений;
	ТаблицаЗадач.Колонки.Добавить("Правило",              Новый ОписаниеТипов("СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов")); // правило, относящееся к уплате налога по данной задаче.
	ТаблицаЗадач.Колонки.Добавить("БудущаяЗадача",        Новый ОписаниеТипов("Структура")); // см. описание функции НовыйБудущаяЗадача().
	ТаблицаЗадач.Колонки.Добавить("НачалоВыполнения",     ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя)); // первый день, начиная с которого можно сдавать отчет / платить налог за очередной период.
	ТаблицаЗадач.Колонки.Добавить("ПериодСобытия",        ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя)); // последний день очередного отчетного периода.
	ТаблицаЗадач.Колонки.Добавить("НачалоПериодаСобытия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя)); // первый день очередного отчетного периода.
	ТаблицаЗадач.Колонки.Добавить("Наименование",         ОбщегоНазначения.ОписаниеТипаСтрока(150)); //краткое описание текста задачи, которое отображается в мониторе.
	ТаблицаЗадач.Колонки.Добавить("ЭтоТекущаяЗадача",     Новый ОписаниеТипов("Булево")); // означает, что срок оплаты налога наступил, но ещё не завершился.
	ТаблицаЗадач.Колонки.Добавить("Владелец",             Новый ОписаниеТипов("СправочникСсылка.ЗадачиБухгалтера")); // задача по сдаче отчета.
	ТаблицаЗадач.Колонки.Добавить("КодЗадачи",            ОбщегоНазначения.ОписаниеТипаСтрока(50));  // код задачи по налогу и отчету.
	ТаблицаЗадач.Колонки.Добавить("КодПравила",           ОбщегоНазначения.ОписаниеТипаСтрока(50)); // код элемента справочника СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов.
	ТаблицаЗадач.Колонки.Добавить("Срок",                 ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя)); // крайний срок сдачи отчета / уплаты налога.
	ТаблицаЗадач.Колонки.Добавить("Периодичность",        Новый ОписаниеТипов("ПеречислениеСсылка.Периодичность")); // периодичность отчетного / налогового периода по правилу.
	
	Возврат ТаблицаЗадач;
	
КонецФункции

Функция НовыйВключенныеЗадачи()
	
	ВключенныеЗадачи = Новый ТаблицаЗначений;
	ВключенныеЗадачи.Колонки.Добавить("Владелец",       Новый ОписаниеТипов("СправочникСсылка.ЗадачиБухгалтера")); // задача по налогу или отчету.
	ВключенныеЗадачи.Колонки.Добавить("ПоддерживаетсяНалог", Новый ОписаниеТипов("Булево")); // признак того, что налог не должен выводится в сером блоке.
	ВключенныеЗадачи.Колонки.Добавить("ИмяЗадачи",      ОбщегоНазначения.ОписаниеТипаСтрока(100)); // имя налога / отчета, отображаемое в мониторе.
	ВключенныеЗадачи.Колонки.Добавить("КодЗадачи",      ОбщегоНазначения.ОписаниеТипаСтрока(50)); // код задачи по налогу и отчету.
	ВключенныеЗадачи.Колонки.Добавить("Порядок",        ОбщегоНазначения.ОписаниеТипаЧисло(2)); // порядк для сортировки задачи в мониторе.
	ВключенныеЗадачи.Колонки.Добавить("ПравилоНалог",   Новый ОписаниеТипов("Массив")); // правило, относящееся к уплате налога по данной задаче.
	ВключенныеЗадачи.Колонки.Добавить("ПравилоОтчет",   Новый ОписаниеТипов("Массив")); // правило, относящееся к сдаче отчета по данной задаче.
	ВключенныеЗадачи.Индексы.Добавить("Владелец");
	
	Возврат ВключенныеЗадачи;
	
КонецФункции

Функция ДопускаетсяНесколькоЗадач(КодЗадачи)
	
	Если КодЗадачи = "СтраховыеВзносы" Или КодЗадачи = "НДФЛ_Агент" Или КодЗадачи = "СтраховыеВзносы_Предприниматель" Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция СокращенноеНаименованиеЗадачи(КодЗадачи, КодПравила, ИмяЗадачи, ОписаниеПравила, НачалоПериода, КонецПериода)
	
	Шаблон = НСтр("ru = '%1 за %2'");
	
	//  Заменяем слова уплату на оплату.
	Параметр1 = ?(ПустаяСтрока(ОписаниеПравила), ИмяЗадачи, ОписаниеПравила);
	Если СтрНачинаетсяС(Параметр1, "уплата") Тогда
		Параметр1 = "О" + Прав(Параметр1, СтрДлина(Параметр1) - 1);
	КонецЕсли;
	
	Если КодПравила = "2013_ОтчетностьФСС" 
		Или КодПравила = "2014_ОтчетностьФССЭлектронная" 
		Или КодПравила = "2014_ОтчетностьФССБумажная" Тогда
		
		Параметр1 = Нстр("ru = 'Отчет в ФСС'");
		
	ИначеЕсли КодПравила = "2013_ОтчетностьПФР"
		Или КодПравила = " 2014_ОтчетностьПФРЭлектронная"
		Или КодПравила = "2014_ОтчетностьПФРБумажная" Тогда
		
		Параметр1 = Нстр("ru = 'Отчет в ПФР'");
		
	КонецЕсли;
	
	Если КодЗадачи = "НДФЛ_Агент_Уплата" Тогда
		Параметр1 = Нстр("ru = 'НДФЛ'");
	КонецЕсли;
	
	Параметр2 = КалендарьБухгалтера.ПредставлениеПериодаСобытия(НачалоПериода, КонецПериода);
	
	Результат = СтрШаблон(Шаблон, Параметр1, Параметр2);
	Результат = КапитализироватьСтроку(Результат);
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоНалоговыйПоказатель(ВидДействия)
	
	Если ВидДействия = Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога
		Или ВидДействия = Перечисления.ВидыДействийКалендаряБухгалтера.Зарплата Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ПоддерживаемыеСчетаУчетаЗадач()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СоответствиеВидовНалоговЗадач", РасчетыСБюджетом.ТаблицаСоответствияЗадачБухгалтера());
	Запрос.УстановитьПараметр("ПоддерживаемыеНалоги", ПоддерживаемыеВидыНалогов());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыНалогов.ВидНалога КАК ВидНалога,
	|	ВидыНалогов.КодЗадачи
	|ПОМЕСТИТЬ ВидыНалогов
	|ИЗ
	|	&СоответствиеВидовНалоговЗадач КАК ВидыНалогов
	|ГДЕ
	|	ВидыНалогов.ВидНалога В(&ПоддерживаемыеНалоги)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидНалога
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВидыНалоговИПлатежейВБюджет.СчетУчета КАК СчетУчета,
	|	ВидыНалогов.КодЗадачи КАК КодЗадачи,
	|	ВидыНалоговИПлатежейВБюджет.ВидНалога
	|ИЗ
	|	ВидыНалогов КАК ВидыНалогов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНалоговИПлатежейВБюджет КАК ВидыНалоговИПлатежейВБюджет
	|		ПО ВидыНалогов.ВидНалога = ВидыНалоговИПлатежейВБюджет.ВидНалога";
	
	ПоддерживаемыеЗадачи = Запрос.Выполнить().Выгрузить();
	ПоддерживаемыеЗадачи.Индексы.Добавить("КодЗадачи");
	Возврат ПоддерживаемыеЗадачи;
	
КонецФункции

Функция ЭтаНалоговаяЗадачаПоддерживается(КодЗадачи)
	
	Если КодЗадачи = "УСН" 
		Или КодЗадачи = "ЕНВД" 
		Или КодЗадачи = "ТорговыйСбор"
		Или КодЗадачи = "НДФЛ" 
		Или КодЗадачи = "НДФЛ_Агент_Уплата" 
		Или КодЗадачи = "СтраховыеВзносы"
		Или КодЗадачи = "СтраховыеВзносы_Предприниматель" Тогда
			
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ПоддерживаемыеВидыНалогов()
	
	ПоддерживаемыеНалоги = Новый Массив();
	ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.УСН_Доходы);
	ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.УСН_ДоходыМинусРасходы);
	ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.УСН_МинимальныйНалог);
	ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.ЕНВД);
	ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.ТорговыйСбор);
	ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.НДФЛ);
	
	ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть);
	ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.ФиксированныеВзносы_ФСС);
	ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.ФиксированныеВзносы_ФФОМС);
	
	ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.СтраховыеВзносы_ПФР_СтраховаяЧасть);
	ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.СтраховыеВзносы_ПФР_Добровольные);
	ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.СтраховыеВзносы_ФСС);
	ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.СтраховыеВзносы_ФСС_НСиПЗ);
	ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.СтраховыеВзносы_ФФОМС);
	
	ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.ДополнительныеВзносы_ПФР_ВредныеУсловия);
	ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.ДополнительныеВзносы_ПФР_ЛетныеЭкипажи);
	ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.ДополнительныеВзносы_ПФР_ТяжелыеУсловия);
	ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.ДополнительныеВзносы_ПФР_Шахтеры);
	
	Возврат ПоддерживаемыеНалоги;
	
КонецФункции

// Исключаемые правила в рамках поддерживаемых задач, которые вообще не должны показываться в мониторе.
// Например это те, которые не требуется законом выполнять регулярно.
Функция ИсключаемыеПравила()
	
	ИсключаемыеПравила = Новый ТаблицаЗначений;
	ИсключаемыеПравила.Колонки.Добавить("КодЗадачи", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ИсключаемыеПравила.Колонки.Добавить("КодПравила", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	
	Правило = ИсключаемыеПравила.Добавить();
	Правило.КодЗадачи  = "НДФЛ";
	Правило.КодПравила = "2013_2НДФЛ_Неудержанный";
	
	Правило = ИсключаемыеПравила.Добавить();
	Правило.КодЗадачи  = "НДФЛ";
	Правило.КодПравила = "2016_2НДФЛ_Неудержанный";
	
	Правило = ИсключаемыеПравила.Добавить();
	Правило.КодЗадачи  = "НДФЛ";
	Правило.КодПравила = "2016_2НДФЛ_Неудержанный";
	
	Правило = ИсключаемыеПравила.Добавить();
	Правило.КодЗадачи  = "СтраховыеВзносы";
	Правило.КодПравила = "2013_Уплата_Допвзносы_Накопительная_ПФР";
	
	Правило = ИсключаемыеПравила.Добавить();
	Правило.КодЗадачи  = "НДС";
	Правило.КодПравила = "СверкаНДС";
	
	Правило = ИсключаемыеПравила.Добавить();
	Правило.КодЗадачи  = "НДС";
	Правило.КодПравила = "СверкаНДС";
	
	Правило = ИсключаемыеПравила.Добавить();
	Правило.КодЗадачи  = "НДС";
	Правило.КодПравила = "СверкаНДС";
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ИсключаемыеПравила.КодЗадачи,
	|	ИсключаемыеПравила.КодПравила
	|ПОМЕСТИТЬ КритерииПоиска
	|ИЗ
	|	&ИсключаемыеПравила КАК ИсключаемыеПравила
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Ссылка 
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК ПравилаПредставленияОтчетовУплатыНалогов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КритерииПоиска КАК КритерииПоиска
	|		ПО ПравилаПредставленияОтчетовУплатыНалогов.Владелец.Код = КритерииПоиска.КодЗадачи
	|			И ПравилаПредставленияОтчетовУплатыНалогов.Код = КритерииПоиска.КодПравила");
	Запрос.УстановитьПараметр("ИсключаемыеПравила", ИсключаемыеПравила);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция ПравилаРазовыхЗадач()

	// Правила предоставления отчетов и уплаты налогов, являющихся разовыми событиями.
	// Задачи по ним могут быть в прошлых периодах, но если они не выполнены, то про них надо сообщать.
	Результат = Новый Массив(1);
	
	// Отчет о среднесписочной численности при создании новой организации,
	// предоставляется один раз до 20 числа месяца, следующего за месяцем регистрации.
	Результат[0] = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.НайтиПоИдентификатору(
		КодЗадачиСреднесписочнаяЧисленность(), "2016_РегистрацияОрганизации");
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область АлгоритмДляНенастроенныхНалоговИОтчетов

Процедура ПрименитьАлгоритмДляНенастроенныхНалогов(НалоговыеИндикаторы, ЗадачиПоНалогам, ОтсутствуютПатенты, ОтсутствуютВидыДеятельностиЕНВД)
	
	Для каждого Задача Из ЗадачиПоНалогам Цикл
	
		Если (ЭтоЗадачаЕНВД(Задача.КодЗадачи) И ОтсутствуютВидыДеятельностиЕНВД)
			Или (Задача.КодЗадачи = КодЗадачиПатент() И ОтсутствуютПатенты) Тогда
			
			НоваяСтрока = НалоговыеИндикаторы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Задача);
			
			НоваяСтрока.Индикатор = Ненастроенный();
			
			ЗадачиПоНалогам.Удалить(Задача); // чтобы данные задачи не анализировались другими алгоритмами.
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрименитьАлгоритмДляНенастроенныхОтчетов(ОтчетныеИндикаторы, ЗадачиПоОтчетам)
	
	Для каждого Задача Из ЗадачиПоОтчетам Цикл
	
		Если ЭтоЗадачаПроверкиСтатистики(Задача.КодЗадачи, Задача.КодПравила) Тогда
			
			ОтсутствуютЗадачиПоСтатистике = ЗадачиПоОтчетам.НайтиСтроки(
				Новый Структура("КодЗадачи", КодЗадачиСтатистика())).Количество() = 1;
				
			Если ОтсутствуютЗадачиПоСтатистике Тогда
				НоваяСтрока = ОтчетныеИндикаторы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Задача);
				НоваяСтрока.Индикатор = Ненастроенный();
			КонецЕсли;
			ЗадачиПоОтчетам.Удалить(Задача); // чтобы данные задачи не анализировались другими алгоритмами.
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область  ОбщийАлгоритмПоНалогам

// Алгоритм, анализирует остатки и обороты за отчетные периоды на 68 и 69 счетах регистра бухгалтерии. 
// По результатам анализа формируется индикатор в разрезе каждого счета учета налога.
// Может применятся ко всем налогам, отвечающим следующим предпосылкам:
// - Сначала всегда идет начисление налога с проводкой в кредит 68, потом списание (уплата) с проводкой в дебет 68. 
// - Переплаты налогов в одном периоде засчитываются автоматически в следующем периоде.
// - Периоды оплат в рамках одного налога не пересекаются.
// - Сначала погашается текущий платеж, затем задолженность.
//
Процедура ПрименитьОбщийАлгоритмПоНалогам(НалоговыеИндикаторы, ЗадачиПоНалогам, Организация, ТекущийДень, ТаблицаСоСчетамиУчета, СчетаУчетаДС)
	
	// 1. Формируем таблицу из задач, которые поддерживаются данным алгоритмом.
	ОбрабатываемыеЗадачи = НовыйЗадачиОрганизации();
	ОбрабатываемыеЗадачи.Колонки.Добавить("СчетаУчета", Новый ОписаниеТипов("Массив"));
	Для каждого Задача Из ЗадачиПоНалогам Цикл
	
		Если Не ИспользуетсяОбщийАлгоритм(Задача.КодЗадачи)
			Или ПересечениеУСН1Квартал(Задача.КодЗадачи, ТекущийДень, Организация)
			Или ПересечениеУСН2Квартал(Задача.КодЗадачи, ТекущийДень, Организация) Тогда
			
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ОбрабатываемыеЗадачи.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Задача);
		НоваяСтрока.СчетаУчета = ПодобратьСчетаУчетаПоЗадаче(Задача.КодЗадачи, ТаблицаСоСчетамиУчета);
		
		Если ЭтоЗадачаУСН(Задача.КодЗадачи) Тогда
			// Изменяем для целей алгоритма начало периода события годового платежа по УСН на начало квартала.
			НоваяСтрока.НачалоПериодаСобытия = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(
				Перечисления.Периодичность.Квартал, НоваяСтрока.ПериодСобытия);
			НоваяСтрока.Периодичность = Перечисления.Периодичность.Квартал;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОбрабатываемыеЗадачи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбрабатываемыеЗадачи.Сортировать("Владелец,НачалоПериодаСобытия,ПериодСобытия", Новый СравнениеЗначений());
	
	// 2. Динамически создаем текст запроса к бухгалтерским остаткам и оборотам по отчетным периодам таблицы задач.
	ОтчетныеПериоды = ОбрабатываемыеЗадачи.СкопироватьКолонки();
	Для каждого Задача ИЗ ОбрабатываемыеЗадачи Цикл;
		
		Если Не ДопускаетсяНесколькоЗадач(Задача.КодЗадачи) 
			И ОтчетныеПериоды.НайтиСтроки(Новый Структура("Владелец", Задача.Владелец)).Количество() > 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ОтчетныеПериоды.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Задача);
	
	КонецЦикла;
	
	СуммыНалогов = ПолучитьСуммыНалогов(ОтчетныеПериоды, Организация, ТекущийДень, СчетаУчетаДС);
	
	//3. Применяем алгоритм. Интерпретируем полученные суммы и добавляем в таблицу индикаторов.
	Для каждого Задача Из ОбрабатываемыеЗадачи Цикл
		
		НоваяСтрока = НалоговыеИндикаторы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Задача);
		
		МассивИндикаторов = Новый Массив;
		КУплатеДолг = 0;
		КУплатеТекущий = 0;
		
		Для каждого СчетУчета Из Задача.СчетаУчета Цикл
			ПараметрыИндикатора = ПолучитьПараметрыИндикатора(СчетУчета, Задача, СуммыНалогов, ТекущийДень, Организация);
			МассивИндикаторов.Добавить(ПараметрыИндикатора.Индикатор);
			КУплатеДолг = КУплатеДолг + ПараметрыИндикатора.КУплатеДолг;
			КУплатеТекущий = КУплатеТекущий + ПараметрыИндикатора.КУплатеТекущий;
		КонецЦикла;
		
		Индикатор = СамыйКритичныйИндикатор(МассивИндикаторов);
		НоваяСтрока.Индикатор = Индикатор;
		НоваяСтрока.КУплатеДолг = КУплатеДолг;
		НоваяСтрока.КУплатеТекущий = КУплатеТекущий;
		
	КонецЦикла;
	
КонецПроцедуры

// Алгоритм анализирует остатки обороты на счете учета налога УСН, в период когда сроки уплаты годового платежа пересекаются
// со сроками уплаты авансовго платежа за первый квартал. (с 1 по 30 апреля для УСН ИП) В этом случае считается, что первым погашается 
// наиболее ранний платеж (годовой платеж).
//
Процедура ПрименитьАлгоритмУСНПриПересечении(НалоговыеИндикаторы, ЗадачиПоНалогам, Организация, ТекущийДень, ТаблицаСоСчетамиУчета, СчетаУчетаДС)
	
	ОбрабатываемыеЗадачи = НовыйЗадачиОрганизации();
	ОбрабатываемыеЗадачи.Колонки.Добавить("СчетаУчета", Новый ОписаниеТипов("Массив"));
	МинНачалоВыполнения = Дата("39990101");
	Для каждого Задача Из ЗадачиПоНалогам Цикл
		
		Если Не (ПересечениеУСН1Квартал(Задача.КодЗадачи, ТекущийДень, Организация) 
			Или ПересечениеУСН2Квартал(Задача.КодЗадачи, ТекущийДень, Организация)) Тогда
			
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ОбрабатываемыеЗадачи.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Задача);
		НоваяСтрока.СчетаУчета = ПодобратьСчетаУчетаПоЗадаче(Задача.КодЗадачи, ТаблицаСоСчетамиУчета);
		
		// Изменяем для целей алгоритма начало периода события годового платежа по УСН на начало квартала.
		НоваяСтрока.НачалоПериодаСобытия = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(
			Перечисления.Периодичность.Квартал, НоваяСтрока.ПериодСобытия);
				
		Если Задача.НачалоВыполнения < МинНачалоВыполнения Тогда
			МинНачалоВыполнения = Задача.НачалоВыполнения;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОбрабатываемыеЗадачи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Задача Из ОбрабатываемыеЗадачи Цикл;
		Задача.НачалоВыполнения = МинНачалоВыполнения;
	КонецЦикла;
	
	ОбрабатываемыеЗадачи.Сортировать("Владелец,НачалоПериодаСобытия,ПериодСобытия", Новый СравнениеЗначений());
	
	Запрос = ПолучитьСуммыНалогов(ОбрабатываемыеЗадачи, Организация, ТекущийДень, СчетаУчетаДС, Ложь);

	Запрос.Текст = Запрос.Текст +"
	|ИТОГИ
	|	МАКСИМУМ(СуммаОстаток),
	|	МАКСИМУМ(СуммаНачислено),
	|	МАКСИМУМ(СуммаУплачено),
	|	СУММА(СуммаНачисленоТекущий)
	|ПО
	|	ОБЩИЕ";
	
	ВыборкаОбшиеИтоги = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Начислено1Квартал = 0;
	Если ПересечениеУСН2Квартал("УСН", ТекущийДень, Организация) Тогда
		
		Запрос.Текст = "ВЫБРАТЬ
		|	ХозрасчетныйОбороты.СуммаОборотКт КАК Начислено1Квартал
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			&Начало1Квартал,
		|			&Конец1Квартал,
		|			Месяц,
		|			Счет В (&СчетаУчета0),
		|			&ВидыСубконто,
		|			Организация В (&Организация)
		|				И Субконто1 В (&ВидыНалоговыхПлатежей),
		|			,
		|			) КАК ХозрасчетныйОбороты";
		Запрос.УстановитьПараметр("Начало1Квартал", НачалоГода(ТекущийДень));
		Запрос.УстановитьПараметр("Конец1Квартал", КонецКвартала(НачалоГода(ТекущийДень)));
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Начислено1Квартал = Выборка.Начислено1Квартал;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыборкаОбшиеИтоги.Следующий() Тогда
		
		// Для годового и авансового платежа заводим переменные по остатку на начало периода и сумм уплаты с начала периода 
		// и при каждой итерации цикла погашаем их. В процесе цикла распределяем суммы между текущим платежом и долгом и формируем индикатор.
		// Подробнее порядок распределения см. в функции ИзвлечьСуммыПоЗадаче()
		
		ОстатокНачислено1Квартал = Начислено1Квартал - Мин(Начислено1Квартал, ВыборкаОбшиеИтоги.СуммаУплачено);
		
		ОстатокНаНачалоПериода = ВыборкаОбшиеИтоги.СуммаОстаток + ВыборкаОбшиеИтоги.СуммаНачислено - ОстатокНачислено1Квартал - ВыборкаОбшиеИтоги.СуммаУплачено;
		ОсталосьСуммаУплачено = ВыборкаОбшиеИтоги.СуммаУплачено - Мин(ВыборкаОбшиеИтоги.СуммаУплачено, Начислено1Квартал);
		
		Выборка = ВыборкаОбшиеИтоги.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выборка.Следующий() Цикл
			
			КУплатеТекущий = Выборка.СуммаНачисленоТекущий - Мин(Выборка.СуммаНачисленоТекущий, ОсталосьСуммаУплачено);
			КУплатеДолг    = ?(ОстатокНаНачалоПериода < 0, - ОстатокНаНачалоПериода, 0);
			
			ПереплатаТекущая = Макс(ОсталосьСуммаУплачено - Выборка.СуммаНачисленоТекущий, 0);
			ПереплатаДолг    = ?(ОстатокНаНачалоПериода > 0, ОстатокНаНачалоПериода, 0);
			
			КУплатеТекущий = КУплатеТекущий - ПереплатаТекущая - ПереплатаДолг;
			Если КУплатеТекущий < 0 Тогда 
				// Переплата, погашаем долг.
				КУплатеДолг = КУплатеДолг + КУплатеТекущий;
			КонецЕсли;
			
			КУплатеДолг    = ?(КУплатеДолг > 0, КУплатеДолг, 0);
			КУплатеТекущий = ?(КУплатеТекущий > 0, КУплатеТекущий, 0);
			
			ОсталосьСуммаУплачено = ОсталосьСуммаУплачено - Мин(Выборка.СуммаНачисленоТекущий, ОсталосьСуммаУплачено);
			ОстатокНаНачалоПериода  = ОстатокНаНачалоПериода + КУплатеДолг - ПереплатаДолг;
			
			Индикатор = ПолучитьИндикатор(Истина, КУплатеДолг, КУплатеТекущий);
			
			СтрокиЗадачи = ОбрабатываемыеЗадачи.НайтиСтроки(Новый Структура("НачалоПериодаСобытия, ПериодСобытия", 
				Выборка.НачалоПериодаСобытия, Выборка.ПериодСобытия));
				
			Для каждого Задача Из СтрокиЗадачи Цикл
				НоваяСтрока = НалоговыеИндикаторы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Задача);
				НоваяСтрока.Индикатор = Индикатор;
				НоваяСтрока.КУплатеДолг = КУплатеДолг;
				НоваяСтрока.КУплатеТекущий = КУплатеТекущий;
				
				ОбрабатываемыеЗадачи.Удалить(Задача);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Задачам с нулевыми остатками нужно вручную добавить зеленый индикатор.
	Для каждого Задача Из ОбрабатываемыеЗадачи Цикл
		НоваяСтрока = НалоговыеИндикаторы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Задача);
		НоваяСтрока.Индикатор = ПолучитьИндикатор(Истина, 0, 0);
		НоваяСтрока.КУплатеДолг = 0;
		НоваяСтрока.КУплатеТекущий = 0;
	КонецЦикла;
	
КонецПроцедуры

Функция ПересечениеУСН1Квартал(КодЗадачи, ТекущийДень, Организация)
	
	День = День(ТекущийДень);
	Месяц = Месяц(ТекущийДень);
	
	ЕстьПересечение = Ложь;
	Если ЭтоЗадачаУСН(КодЗадачи) И Месяц = 4 И День >= 1 И День <= 25 
		И Не ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация) Тогда 
		ЕстьПересечение = Истина;
	КонецЕсли;
	
	Возврат ЕстьПересечение;
	
КонецФункции

Функция ПересечениеУСН2Квартал(КодЗадачи, ТекущийДень, Организация)
	
	День = День(ТекущийДень);
	Месяц = Месяц(ТекущийДень);
	
	ЕстьПересечение = Ложь;
	Если ЭтоЗадачаУСН(КодЗадачи) 
		И (Месяц = 4 И День >= 26 Или Месяц = 5 И День <= 2)
		И Не ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация) Тогда 
		
		ЕстьПересечение = Истина;
	КонецЕсли;
	
	Возврат ЕстьПересечение;
	
КонецФункции

Функция ИспользуетсяОбщийАлгоритм(КодЗадачи)
	
	Если КодЗадачи = "УСН" 
		Или КодЗадачи = "ЕНВД"
		Или КодЗадачи = "НДФЛ_Агент_Уплата"
		Или КодЗадачи = "ТорговыйСбор"
		Или КодЗадачи = "СтраховыеВзносы" Тогда
		
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ДинамическиеПараметрыЗапроса(ПоказателиГруппировки, Счетчик)
	
	Результат = Новый Структура;
	
	ПараметрыГруппировки = СтрРазделить(ПоказателиГруппировки, ",");
	
	Для каждого ИмяПараметра Из ПараметрыГруппировки Цикл
		Результат.Вставить(ИмяПараметра, ИмяПараметра + Счетчик);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ШаблонЗапросаОстатковОборотов()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СвернутыеОстаткиОбороты.СчетУчета,
	|	СУММА(СвернутыеОстаткиОбороты.СуммаОстаток) КАК СуммаОстаток,
	|	СУММА(СвернутыеОстаткиОбороты.СуммаНачислено) КАК СуммаНачислено,
	|	СУММА(СвернутыеОстаткиОбороты.СуммаУплачено) КАК СуммаУплачено,
	|	СвернутыеОстаткиОбороты.ПериодСобытия,
	|	СвернутыеОстаткиОбороты.НачалоПериодаСобытия,
	|	СУММА(СвернутыеОстаткиОбороты.СуммаНачисленоТекущий) КАК СуммаНачисленоТекущий
	|ИЗ
	|	(ВЫБРАТЬ
	|		ХозрасчетныйОстатки.Счет КАК СчетУчета,
	|		ХозрасчетныйОстатки.СуммаОстаток КАК СуммаОстаток,
	|		0 КАК СуммаНачислено,
	|		0 КАК СуммаНачисленоТекущий,
	|		0 КАК СуммаУплачено,
	|		&ПериодСобытия КАК ПериодСобытия,
	|		&НачалоПериодаСобытия КАК НачалоПериодаСобытия
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Остатки(
	|				,
	|				Счет В (&СчетаУчета),
	|				&ВидыСубконто,
	|				Организация В (&Организация)
	|					И Субконто1 В (&ВидыНалоговыхПлатежей)) КАК ХозрасчетныйОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ХозрасчетныйОбороты.Счет,
	|		0,
	|		ХозрасчетныйОбороты.СуммаОборотКт,
	|		ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.Период >= &НачалоПериодаСобытия
	|					И ХозрасчетныйОбороты.Период <= &ПериодСобытия
	|				ТОГДА ХозрасчетныйОбороты.СуммаОборотКт
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		0,
	|		&ПериодСобытия,
	|		&НачалоПериодаСобытия
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&НачалоПериодаСобытия,
	|				,
	|				Месяц,
	|				Счет В (&СчетаУчета),
	|				&ВидыСубконто,
	|				Организация В (&Организация)
	|					И Субконто1 В (&ВидыНалоговыхПлатежей),
	|				,
	|				) КАК ХозрасчетныйОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ХозрасчетныйОбороты.Счет,
	|		0,
	|		0,
	|		0,
	|		ХозрасчетныйОбороты.СуммаОборотДт,
	|		&ПериодСобытия,
	|		&НачалоПериодаСобытия
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&НачалоВыполнения,
	|				,
	|				,
	|				Счет В (&СчетаУчета),
	|				&ВидыСубконто,
	|				Организация В (&Организация)
	|					И Субконто1 В (&ВидыНалоговыхПлатежей),
	|				КорСчет В (&СчетаДС),
	|				) КАК ХозрасчетныйОбороты) КАК СвернутыеОстаткиОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	СвернутыеОстаткиОбороты.СчетУчета,
	|	СвернутыеОстаткиОбороты.НачалоПериодаСобытия,
	|	СвернутыеОстаткиОбороты.ПериодСобытия";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьИндикатор(ЭтоТекущаяЗадача, КУплатеДолг, КУплатеТекущий)
	
	Индикатор = "";
	
	Если ЭтоТекущаяЗадача Тогда 
		Если КУплатеТекущий = 0 И КУплатеДолг = 0 Тогда
			Индикатор = ЗеленыйИндикатор();
		ИначеЕсли КУплатеДолг = 0 И КУплатеТекущий > 0 Тогда
			Индикатор = ЖелтыйИндикатор();
		Иначе
			Индикатор = КрасныйИндикатор();
		КонецЕсли;
	Иначе
		Индикатор = ?(КУплатеДолг = 0, ЗеленыйИндикатор(), КрасныйИндикатор());
	КонецЕсли;
	
	Возврат Индикатор;
	
КонецФункции

Функция ПодобратьСчетаУчетаПоЗадаче(КодЗадачи, ТаблицаСоСчетамиУчета)
	
	Результат = Новый Массив;
	СтрокиСчетовУчета = ТаблицаСоСчетамиУчета.НайтиСтроки(Новый Структура("КодЗадачи", КодЗадачи));
	Для каждого СтрокаСоСчетомУчета Из СтрокиСчетовУчета Цикл
		Если Результат.Найти(СтрокаСоСчетомУчета.СчетУчета) = Неопределено Тогда
			Результат.Добавить(СтрокаСоСчетомУчета.СчетУчета);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ТекстОбъединениеЗапросов()
	Возврат "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|";
	
КонецФункции

Функция ПолучитьСуммыНалогов(ОбрабатываемыеЗадачи, Организация, ТекущийДень, СчетаУчетаДС, ВыполнитьЗапрос = Истина) 
	
	ПоказателиГруппировки = "ПериодСобытия,НачалоПериодаСобытия,НачалоВыполнения";
	
	ЗадачиПоПериодам = ОбрабатываемыеЗадачи.Скопировать(, ПоказателиГруппировки);
	ЗадачиПоПериодам.Свернуть(ПоказателиГруппировки);
	ЗадачиПоПериодам.Колонки.Добавить("СчетаУчета", Новый ОписаниеТипов("Массив"));
	
	Отбор = Новый Структура(ПоказателиГруппировки);
	Для Каждого СтрокаТаблицы Из ЗадачиПоПериодам Цикл
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТаблицы);
		НайденныеЗадачи = ОбрабатываемыеЗадачи.НайтиСтроки(Отбор);
		Для Каждого Задача Из НайденныеЗадачи Цикл
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокаТаблицы.СчетаУчета, Задача.СчетаУчета, Истина);
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВидыНалоговыхПлатежей", Перечисления.ВидыПлатежейВГосБюджет.ВидыНалоговыхПлатежей());
	Запрос.УстановитьПараметр("СчетаДС", СчетаУчетаДС);
	Запрос.УстановитьПараметр("ВидыСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	
	ОбщийТекст = Новый Массив;
	Счетчик = 0;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	Для каждого Задача Из ЗадачиПоПериодам Цикл
		
		ДинамическиеПараметры = ДинамическиеПараметрыЗапроса(ПоказателиГруппировки, Счетчик);
		
		ТекстЗапроса = ШаблонЗапросаОстатковОборотов();
		
		Если Задача.НачалоВыполнения > ТекущийДень Тогда
			// Для оптимизации удалим третий запрос в объединении на получение сумм оплат по задачам, т.к. срок оплаты ещё не наступил.
			СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
			СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Источники[0].Источник.Запрос.Операторы.Удалить(2);
			ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
		КонецЕсли;
		
		Для каждого ПараметрЗапроса Из ДинамическиеПараметры Цикл
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&" + ПараметрЗапроса.Ключ, "&" + ПараметрЗапроса.Значение);
			Запрос.УстановитьПараметр(ПараметрЗапроса.Значение, Задача[ПараметрЗапроса.Ключ]); 
		КонецЦикла;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СчетаУчета", "&СчетаУчета" + Счетчик);
		Запрос.УстановитьПараметр("СчетаУчета" + Счетчик, Задача.СчетаУчета);
		
		ОбщийТекст.Добавить(ТекстЗапроса);
		
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
	Запрос.Текст = СтрСоединить(ОбщийТекст, ТекстОбъединениеЗапросов());
	Если ВыполнитьЗапрос Тогда
		Возврат Запрос.Выполнить().Выгрузить();
	Иначе
		Возврат Запрос;
	КонецЕсли;
	
КонецФункции

Функция ИзвлечьСуммыПоЗадаче(СчетУчета, СтрокаЗадачи, СуммыНалогов)
	
	// 1. Выбираем из таблицы СуммыНалогов остатки обороты по данному счету учета в отдельные переменные.
	
	СуммаОстаток = 0;
	СуммаНачислено = 0;
	СуммаУплачено = 0;
	СуммаНачисленоТекущий = 0;
	
	Для каждого СуммаНаСчете Из СуммыНалогов Цикл
		
		ЭтоСчетЗадачи = (СчетУчета = СуммаНаСчете.СчетУчета);
		
		Если ЭтоСчетЗадачи И СтрокаЗадачи.ПериодСобытия = СуммаНаСчете.ПериодСобытия
			И СтрокаЗадачи.НачалоПериодаСобытия = СуммаНаСчете.НачалоПериодаСобытия Тогда
			
			СуммаОстаток = СуммаОстаток + СуммаНаСчете.СуммаОстаток;
			СуммаНачислено = СуммаНачислено + СуммаНаСчете.СуммаНачислено;
			СуммаНачисленоТекущий = СуммаНачисленоТекущий + СуммаНаСчете.СуммаНачисленоТекущий;
			СуммаУплачено = СуммаУплачено + СуммаНаСчете.СуммаУплачено;
		КонецЕсли;
		
	КонецЦикла;
	
	// 2. Распределяем полученные остатки и обороты на уплату за текущий отчетный период и уплату долга за прошедшие периоды,
	// чтобы правильно сформировать цвет индикатора. Все платежи начиная с даты НачалоПериодаСобытия относим сначала на погашение
	// текущего налога, а затем - на погашение задолженности. Сначала погашаем текущее начисление, т.к. все помощники  по уплате
	// налога открываются с периодом текущего платежа.
	//
	// При этом, например, обрабатываются следующие нестандартные ситуации:
	//
	// А) Дано: Начислено текущий (СуммаНачисленоТекущий) - 15 000р., долг на начало периода (ОстатокНаНачалоПериода) - 10 000р., уплачено (СуммаУплачено) - 18 000р. 
	//    Результат: КУплатеТекущий - 0, КУплатеДолг - 7 0000 р.
	//
	// Б) Дано: Начислено текущий (СуммаНачисленоТекущий) - 15 000р., переплата на начало периода (ОстатокНаНачалоПериода) - 2 000р., уплачено (СуммаУплачено) - 12 000р. 
	//    Результат: КУплатеТекущий - 1 000, КУплатеДолг - 0 р.
	
	КУплатеДолг = 0;
	КУплатеТекущий = 0;
	
	Если СтрокаЗадачи.ЭтоТекущаяЗадача Тогда
		
		ОстатокНаНачалоПериода = СуммаОстаток + СуммаНачислено - СуммаУплачено;
		
		КУплатеТекущий = СуммаНачисленоТекущий - Мин(СуммаНачисленоТекущий, СуммаУплачено);
		КУплатеДолг    = ?(ОстатокНаНачалоПериода < 0, - ОстатокНаНачалоПериода, 0);
		
		ПереплатаТекущая = Макс(СуммаУплачено - СуммаНачисленоТекущий, 0);
		ПереплатаДолг    = ?(ОстатокНаНачалоПериода > 0, ОстатокНаНачалоПериода, 0);
		
		КУплатеТекущий = КУплатеТекущий - ПереплатаТекущая - ПереплатаДолг;
		Если КУплатеТекущий < 0 Тогда 
			// Переплата, погашаем долг.
			КУплатеДолг = КУплатеДолг + КУплатеТекущий;
		КонецЕсли;
		
		КУплатеДолг    = ?(КУплатеДолг > 0, КУплатеДолг, 0);
		КУплатеТекущий = ?(КУплатеТекущий > 0, КУплатеТекущий, 0);
		
	Иначе
		КУплатеДолг = СуммаОстаток + СуммаНачислено;
		КУплатеДолг = ? (КУплатеДолг < 0, - КУплатеДолг, 0);
	КонецЕсли;
	
	СуммыПоЗадаче = Новый Структура;
	СуммыПоЗадаче.Вставить("КУплатеДолг",    КУплатеДолг);
	СуммыПоЗадаче.Вставить("КУплатеТекущий", КУплатеТекущий);
	
	Возврат СуммыПоЗадаче;
	
КонецФункции

Функция ПолучитьПараметрыИндикатора(СчетУчета, СтрокаЗадачи, СуммыНалогов, ТекущийДень, Организация)
	
	// Суммы начислений и остатков могут быть как за текущие периоды , так и за последующие будущие периоды.
	// Кроме того суммы оплат могут быть за текущие и будущие периоды, однако их мы не можем достоверно отнести к текущим или будущим оплатам.
	// Поэтому в первую очередь погашаем будущие и текущие платежи, затем прошлые платежи.
	// Во всех случаях отрицательная сумма означает задолженность по налогу, положительная сумма означает переплату.
	СтруктураСумм = ИзвлечьСуммыПоЗадаче(СчетУчета, СтрокаЗадачи, СуммыНалогов);
		
	Индикатор = ПолучитьИндикатор(СтрокаЗадачи.ЭтоТекущаяЗадача, СтруктураСумм.КУплатеДолг, СтруктураСумм.КУплатеТекущий);
	
	ПараметрыИндикатора = Новый Структура;
	ПараметрыИндикатора.Вставить("Индикатор", Индикатор);
	ПараметрыИндикатора.Вставить("КУплатеДолг", СтруктураСумм.КУплатеДолг);
	ПараметрыИндикатора.Вставить("КУплатеТекущий", СтруктураСумм.КУплатеТекущий);
	
	Возврат ПараметрыИндикатора;
	
КонецФункции

#КонецОбласти

#Область АлгоритмыВзносовИП

// Алгоритм предназначен для анализа уплаты всех фиксированных взносов за текущий год, 
// Алгоритм берет остатки на конец предыдущего года, за исключением остатков по взносам с доходов, которые берутся другим алгоритмом
// Затем прибавляет к остаткам регламентную сумму начисления за текущий период и  и вычитает сумм уплат с начала года.
// Таким образом получается текущий остаток, который можно сравнивать с текущими начислениями для формирования корректного индикатора.
//
Функция ПрименитьАлгоритмДляВзносовИП(НалоговыеИндикаторы, ЗадачиПоНалогам, Организация, ТекущийДень, ТаблицаСоСчетамиУчета, СчетаУчетаДС)
	
	ЗадачаПоВзносам = Неопределено;
	Для каждого Задача Из ЗадачиПоНалогам Цикл 
		Если ЭтоЗадачаФиксированныхВзносовИП(Задача.КодЗадачи, Задача.КодПравила) Тогда
			ЗадачаПоВзносам = Задача;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗадачаПоВзносам = Неопределено  Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СчетаВзносовИП = Новый Массив;
	Для каждого Задача Из ТаблицаСоСчетамиУчета Цикл 
		Если ЭтоЗадачаВзносовИП(Задача.КодЗадачи) Тогда
			СчетаВзносовИП.Добавить(Задача.СчетУчета);
		КонецЕсли;
	КонецЦикла;
	
	ВидыНалоговыхПлатежей = Перечисления.ВидыПлатежейВГосБюджет.ВидыНалоговыхПлатежей();
	
	ИндексВзносовСДоходов = ВидыНалоговыхПлатежей.Найти(Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела);
	Если ИндексВзносовСДоходов <> Неопределено Тогда
		ВидыНалоговыхПлатежей.Удалить(ИндексВзносовСДоходов);
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаОстаток,
	|	0 КАК СуммаУплачено
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Период,
	|			Счет В (&СчетаВзносовИП),
	|			,
	|			Организация = &Организация
	|				И Субконто1 В (&ВидыНалоговыхПлатежей)) КАК ХозрасчетныйОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотДт, 0)
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоВыполнения,
	|			,
	|			,
	|			Счет В (&СчетаВзносовИП),
	|			&ВидыСубконто,
	|			Организация = &Организация
	|				И Субконто1 В (&ВидыНалоговыхПлатежей),
	|			КорСчет В (&СчетаУчетаДС),
	|			) КАК ХозрасчетныйОбороты");
	Запрос.УстановитьПараметр("Период", Новый Граница(НачалоГода(ТекущийДень) - 1, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("НачалоВыполнения", НачалоГода(ТекущийДень));
	Запрос.УстановитьПараметр("СчетаВзносовИП", СчетаВзносовИП);
	Запрос.УстановитьПараметр("СчетаУчетаДС", СчетаУчетаДС);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВидыНалоговыхПлатежей", ВидыНалоговыхПлатежей);
	Запрос.УстановитьПараметр("ВидыСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	
	СуммаОстаток = 0;
	СуммаУплачено = 0;
	Выборка = Запрос.Выполнить().Выбрать();
	// Отрицательная сумма означает задолженность по налогу, положительная сумма означает переплату.
	Пока Выборка.Следующий() Цикл
		СуммаОстаток = СуммаОстаток + Выборка.СуммаОстаток;
		СуммаУплачено = СуммаУплачено + Выборка.СуммаУплачено;
	КонецЦикла;
	
	ВзносыИП = УчетСтраховыхВзносовИП.ФиксированныеСтраховыеВзносыКУплате(
		Организация, ЗадачаПоВзносам.ПериодСобытия, ЗадачаПоВзносам.Периодичность);
		
	ОсталосьТекущихВзносовИП = ВзносыИП.СуммаВзносаПФР + ВзносыИП.СуммаВзносаФСС + ВзносыИП.СуммаВзносаФФОМС;
	
	ТекущиеВзносыИПУплачено = ВзносыИП.СуммаВзносаПФРУплачено + ВзносыИП.СуммаВзносаФССУплачено
		+ ВзносыИП.СуммаВзносаФФОМСУплачено;
		
	ОстатокЗаВычетомТекущейУплаты = СуммаОстаток + СуммаУплачено - ТекущиеВзносыИПУплачено;
	КУплатеДолг = ?(ОстатокЗаВычетомТекущейУплаты < 0, -ОстатокЗаВычетомТекущейУплаты, 0);
	
	Индикатор = ПолучитьИндикатор(Истина, КУплатеДолг, ОсталосьТекущихВзносовИП);
	
	НоваяСтрока = НалоговыеИндикаторы.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗадачаПоВзносам);
	НоваяСтрока.Индикатор = Индикатор;
	НоваяСтрока.КУплатеТекущий = ОсталосьТекущихВзносовИП;
	НоваяСтрока.КУплатеДолг = ОсталосьТекущихВзносовИП + КУплатеДолг;
	
	ЭтоЕжеквартальныеВзносы = (ЗадачаПоВзносам.Периодичность = Перечисления.Периодичность.Квартал);
	Если ЭтоЕжеквартальныеВзносы Тогда
		НоваяСтрока.НачалоПериодаСобытия = НачалоГода(НоваяСтрока.НачалоПериодаСобытия);
		НоваяСтрока.ПериодСобытия = КонецГода(НоваяСтрока.ПериодСобытия);
		НоваяСтрока.Срок = КонецГода(НоваяСтрока.Срок);
	КонецЕсли;
	
	Возврат НоваяСтрока;
	
КонецФункции

// Алгоритм предназначен для анализа уплаты фиксированных взносов с доходов за завершившиеся отчетные годы. 
// Работает аналогично алгоритму для анализа фиксированных взносов ИП
//
Процедура ПрименитьАлгоритмДляВзносовИПСДоходов(НалоговыеИндикаторы, ЗадачиПоНалогам, Организация, ТекущийДень, ИндикаторВзносовИП, СчетаУчетаДС)
	
	ЗадачаПоВзносам = Неопределено;
	Для каждого Задача Из ЗадачиПоНалогам Цикл 
		Если ЭтоЗадачаВзносовСДоходовИП(Задача.КодЗадачи, Задача.КодПравила) Тогда
			ЗадачаПоВзносам = Задача;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗадачаПоВзносам = Неопределено  Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ШаблонЗапросаОстатковОборотов();
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВидыНалоговыхПлатежей", Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела);
	Запрос.УстановитьПараметр("СчетаДС", СчетаУчетаДС);
	Запрос.УстановитьПараметр("ВидыСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	Запрос.УстановитьПараметр("СчетаУчета", ПланыСчетов.Хозрасчетный.ПФР_ОПС_ИП);
	Запрос.УстановитьПараметр("НачалоВыполнения", ЗадачаПоВзносам.НачалоВыполнения);
	Запрос.УстановитьПараметр("ПериодСобытия", ЗадачаПоВзносам.ПериодСобытия);
	Запрос.УстановитьПараметр("НачалоПериодаСобытия", ЗадачаПоВзносам.НачалоПериодаСобытия);
	
	СуммыНалогов = Запрос.Выполнить().Выгрузить();
	
	ПериодСобытия = ?(ИндикаторВзносовИП.Периодичность = Перечисления.Периодичность.Квартал, 
		КонецКвартала(ТекущийДень), КонецГода(ТекущийДень));
	
	СтруктураДоходов = УчетСтраховыхВзносовИП.СтруктураДоходовПоВидамДеятельности(
		Организация, НачалоГода(ТекущийДень), ПериодСобытия);
		
	ВзносыСДоходов = УчетСтраховыхВзносовИП.СтраховыеВзносыСДоходовКУплате(
		Организация,  НачалоГода(ТекущийДень), ЗадачаПоВзносам.Периодичность, СтруктураДоходов, Ложь);
		
	// Если есть взносы за текущий год, то нужно вычесть суммы оплат взносов текущего года из конечных остатков и уплат для получения корректного индикатора, т.к.
	// эти суммы относятся к следующему году. Затем в функции ПолучитьИндикатор() мы обратно добавляем эти суммы.
	ТекущиеВзносы = ?(ВзносыСДоходов.СуммаВзносаПФРсДоходов > 0, ВзносыСДоходов.СуммаВзносаПФРсДоходов, 0);
	Если ТекущиеВзносы > 0 Тогда
		СтрокаТекНалога = СуммыНалогов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТекНалога, ЗадачаПоВзносам);
		СтрокаТекНалога.СчетУчета = ПланыСчетов.Хозрасчетный.ПФР_ОПС_ИП;
		СтрокаТекНалога.СуммаНачислено = 0;
		СтрокаТекНалога.СуммаНачисленоТекущий = 0;
		СтрокаТекНалога.СуммаУплачено = - ВзносыСДоходов.СуммаВзносаПФРсДоходовУплачено;
		СтрокаТекНалога.СуммаОстаток = - ВзносыСДоходов.СуммаВзносаПФРсДоходовУплачено;
	КонецЕсли;
	
	СуммыПоЗадаче = ИзвлечьСуммыПоЗадаче(ПланыСчетов.Хозрасчетный.ПФР_ОПС_ИП, ЗадачаПоВзносам, СуммыНалогов);
	Индикатор = ПолучитьИндикатор(Истина, СуммыПоЗадаче.КУплатеДолг, СуммыПоЗадаче.КУплатеТекущий + ТекущиеВзносы);
	
	КУплатеТекущий = СуммыПоЗадаче.КУплатеТекущий + ВзносыСДоходов.СуммаВзносаПФРсДоходов;
	КУплатеТекущий = Макс(КУплатеТекущий, 0);
	Если Не ЗначениеЗаполнено(ИндикаторВзносовИП) Или СуммыПоЗадаче.КУплатеТекущий > 0 Тогда
		НоваяСтрока = НалоговыеИндикаторы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗадачаПоВзносам);
		НоваяСтрока.Индикатор = Индикатор;
		НоваяСтрока.КУплатеТекущий = КУплатеТекущий;
		НоваяСтрока.КУплатеДолг = СуммыПоЗадаче.КУплатеДолг;
	ИначеЕсли ЗначениеЗаполнено(ИндикаторВзносовИП) Тогда
		// Объединяем задачи по фиксированным взносам и взносам с доходов в одну, т.к. в этом случае используется один помощник.
		ИндикаторВзносовИП.КУплатеТекущий = ИндикаторВзносовИП.КУплатеТекущий + КУплатеТекущий;
		ИндикаторВзносовИП.КУплатеДолг = ИндикаторВзносовИП.КУплатеДолг + СуммыПоЗадаче.КУплатеДолг;
		
		ИндикаторыВзносов = Новый Массив(2);
		ИндикаторыВзносов[0] = ИндикаторВзносовИП.Индикатор;
		ИндикаторыВзносов[1] = Индикатор;
		ИндикаторВзносовИП.Индикатор = СамыйКритичныйИндикатор(ИндикаторыВзносов);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область АлгоритмПоОтчетам

// Алгоритм проверяет наличие и статусы отчетности в документах, связанных с отчетностью. Проверяются отчеты по правилам, 
// которые включены организацией.Для каждого правила подбираются все отчеты за последние 3 года (срок исковой давности), включая текущий период.
// Если организация подключена к 1С-Отчетности, то начиная с этого периода проверяются статусы сдачи отчетности. 
// Отчет считается сданным, если есть статус "ПоложительныйРезультатДокументооборота". Если организация не подключена
// к 1С-Отчетности, то отчет считается сданным при выполнении двух условий: отчет записан в базе и закончился период отчетности.
//
Процедура ПрименитьАлгоритмПоОтчетам(ОтчетныеИндикаторы, ЗадачиПоОтчетам, Организация, ТекущийДень, ДатаНачалаПримененияЭДООтчетов)
	
	Если ЗадачиПоОтчетам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗадачиПоОтчетам.Индексы.Добавить("Правило");

	Используется1СОтчетность = ЗначениеЗаполнено(ДатаНачалаПримененияЭДООтчетов) И (ДатаНачалаПримененияЭДООтчетов <> '2999-12-31');
	
	// 1. Выбираем все поддерживаемые задачи из списка задач по отчетам за последние 3 года.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВключенныеЗадачи", ЗадачиПоОтчетам.ВыгрузитьКолонку("Владелец"));
	Запрос.УстановитьПараметр("ИсключаемыеПравила", ИсключаемыеПравила());
	Запрос.УстановитьПараметр("НачалоОбзора", НачалоОбзораОтчетности(Организация, ТекущийДень));
	Запрос.УстановитьПараметр("ТекущийДень", ТекущийДень);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Правила.Владелец.Код КАК КодЗадачи,
	|	Правила.Код КАК КодПравила,
	|	Правила.Ссылка КАК Правило,
	|	Правила.Владелец КАК Владелец
	|ПОМЕСТИТЬ ПоддерживаемыеПравила
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК Правила
	|ГДЕ
	|	Правила.Владелец В(&ВключенныеЗадачи)
	|	И Правила.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.Отчет)
	|	И НЕ Правила.Ссылка В (&ИсключаемыеПравила)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Правило
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиБухгалтера.Правило КАК Правило,
	|	ЗадачиБухгалтера.Срок,
	|	ЗадачиБухгалтера.Периодичность,
	|	ЗадачиБухгалтера.ПериодСобытия,
	|	ПоддерживаемыеПравила.КодЗадачи,
	|	ПоддерживаемыеПравила.КодПравила,
	|	ПоддерживаемыеПравила.Владелец
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПоддерживаемыеПравила КАК ПоддерживаемыеПравила
	|		ПО ЗадачиБухгалтера.Правило = ПоддерживаемыеПравила.Правило
	|ГДЕ
	|	ЗадачиБухгалтера.Организация В(&Организация)
	|	И ЗадачиБухгалтера.ПериодСобытия >= &НачалоОбзора
	|	И ЗадачиБухгалтера.ПериодСобытия < &ТекущийДень
	|	И НЕ ЗадачиБухгалтера.ВАрхиве";
	
	ВсеЗадачи = Запрос.Выполнить().Выгрузить();
	
	// 2. Формируем виды отчетности и нужные нам периоды за которые она должна быть сдана.
	ТЗПараметрыСЗВ_М = НовыйПараметрыОтчетности();
	ТЗПараметры2НДФЛ = НовыйПараметрыОтчетности();
	
	ТЗПараметрыРегОтчетов = ИнтерфейсыВзаимодействияБРО.ПараметрыСпискаРеглОтчетов();
	ТЗПараметрыРегОтчетов.Колонки.Добавить("Правило",  Новый ОписаниеТипов("СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов"));
	ТЗПараметрыРегОтчетов.Колонки.Добавить("Владелец", Новый ОписаниеТипов("СправочникСсылка.ЗадачиБухгалтера"));
	ТЗПараметрыРегОтчетов.Колонки.Добавить("Срок",     ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	
	Для каждого Задача Из ВсеЗадачи Цикл
		
		Если Задача.КодПравила = "2016_СведенияПФРЕжемесячные" 
			Или Задача.КодПравила = "2017_СведенияПФРЕжемесячные" Тогда
			// Используется документ - СведенияОЗастрахованныхЛицахСЗВ_М
			НоваяСтрока = ТЗПараметрыСЗВ_М.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Задача);
			НоваяСтрока.ПериодСобытия = НачалоМесяца(Задача.ПериодСобытия);
			
		ИначеЕсли Задача.КодПравила = "2013_2НДФЛ" Тогда
			// Используется документ - СправкиНДФЛДляПередачиВНалоговыйОрган
			НоваяСтрока = ТЗПараметры2НДФЛ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Задача);
		Иначе
			
			// Используется документ РегламентированныйОтчет
			ПолноеИмяПравила = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.
				СкомпоноватьПолноеИмяПравила(Задача.КодЗадачи, Задача.КодПравила);
				
			ИмяРеглОтчета = ИнтерфейсыВзаимодействияБРО.ИмяРеглОтчета(ПолноеИмяПравила);

			Если ИмяРеглОтчета = Неопределено Тогда
				// форма отсутствует в регламентированной отчетности. Штатно цикл не должен заходить сюда.
				Продолжить;
			КонецЕсли;
			
			ВыбраннаяФорма = РегламентированнаяОтчетностьВызовСервера.ИмяФормыРеглОтчетаДействующейВОтчетномПериоде(
				ИмяРеглОтчета, Задача.ПериодСобытия);
			
			НоваяСтрока = ТЗПараметрыРегОтчетов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Задача);
			
			НоваяСтрока.ИмяРеглОтчета = ИмяРеглОтчета;
			НоваяСтрока.ВыбраннаяФорма = ВыбраннаяФорма;
			
			НоваяСтрока.ПолноеИмяПравила = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.СкомпоноватьПолноеИмяПравила(
				Задача.КодЗадачи, Задача.КодПравила);

			// Добавляем вручную задачи по сдаче особой бухгалтерской отчетности.
			Если Задача.КодЗадачи = КодЗадачиБухгалтерскаяОтчетность() Тогда
				ОсобаяБухОтч = Новый Массив;
				ОсобаяБухОтч.Добавить(КодПравилаБОМалыеПредприятия());
				ОсобаяБухОтч.Добавить(КодПравилаБОНекоммерческиеОрганизации());
				ОсобаяБухОтч.Добавить(КодПравилаБОСоциальноОриентированные());
				Для каждого ПравилоБО Из ОсобаяБухОтч Цикл
					ПолноеИмяПравила = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.
						СкомпоноватьПолноеИмяПравила(Задача.КодЗадачи, ПравилоБО);
					
					ИмяРеглОтчета = ИнтерфейсыВзаимодействияБРО.ИмяРеглОтчета(ПолноеИмяПравила);
					
					ВыбраннаяФорма = РегламентированнаяОтчетностьВызовСервера.ИмяФормыРеглОтчетаДействующейВОтчетномПериоде(
						ИмяРеглОтчета, Задача.ПериодСобытия);
					
					НоваяСтрока = ТЗПараметрыРегОтчетов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Задача);
					
					НоваяСтрока.ИмяРеглОтчета = ИмяРеглОтчета;
					НоваяСтрока.ВыбраннаяФорма = ВыбраннаяФорма;
					
					НоваяСтрока.ПолноеИмяПравила = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.СкомпоноватьПолноеИмяПравила(
						Задача.КодЗадачи, Задача.КодПравила);

				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	ИнтерфейсыВзаимодействияБРО.ПолучитьСписокРеглОтчетовПоПериодам(МенеджерВТ, Организация, ТЗПараметрыРегОтчетов);
	
	// 3. Запрашиваем фактически сданные отчеты по данным базы за нужные нам периоды.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ТЗПараметрыРегОтчетов", ТЗПараметрыРегОтчетов);
	Запрос.УстановитьПараметр("ТЗПараметрыСЗВ_М", ТЗПараметрыСЗВ_М);
	Запрос.УстановитьПараметр("ТЗПараметры2НДФЛ", ТЗПараметры2НДФЛ);
	
	Запрос.УстановитьПараметр("ДатаНачалаПримененияЭДООтчетов", ДатаНачалаПримененияЭДООтчетов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЗПараметрыОтчетов.ИмяРеглОтчета,
	|	ТЗПараметрыОтчетов.ВыбраннаяФорма,
	|	ТЗПараметрыОтчетов.ПериодСобытия КАК ПериодСобытия,
	|	ТЗПараметрыОтчетов.Правило,
	|	ТЗПараметрыОтчетов.Владелец,
	|	ТЗПараметрыОтчетов.Срок,
	|	ТЗПараметрыОтчетов.ПолноеИмяПравила КАК ПолноеИмяПравила
	|ПОМЕСТИТЬ ПараметрыОтчетности
	|ИЗ
	|	&ТЗПараметрыРегОтчетов КАК ТЗПараметрыОтчетов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПолноеИмяПравила,
	|	ПериодСобытия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЗПараметрыСЗВ_М.ПериодСобытия КАК ПериодСобытия,
	|	ТЗПараметрыСЗВ_М.Правило,
	|	ТЗПараметрыСЗВ_М.Владелец,
	|	ТЗПараметрыСЗВ_М.Срок
	|ПОМЕСТИТЬ ПараметрыСЗВ_М
	|ИЗ
	|	&ТЗПараметрыСЗВ_М КАК ТЗПараметрыСЗВ_М
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЗПараметры2НДФЛ.ПериодСобытия КАК ПериодСобытия,
	|	ТЗПараметры2НДФЛ.Правило,
	|	ТЗПараметры2НДФЛ.Владелец,
	|	ТЗПараметры2НДФЛ.Срок
	|ПОМЕСТИТЬ Параметры2НДФЛ
	|ИЗ
	|	&ТЗПараметры2НДФЛ КАК ТЗПараметры2НДФЛ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ВТ_РеглОтчеты.Ссылка) КАК ПредставлениеОтчета,
	|	ПараметрыОтчетности.ПериодСобытия КАК ПериодСобытия,
	|	ПараметрыОтчетности.Правило КАК Правило,
	|	ВЫБОР
	|		КОГДА НЕ ВТ_РеглОтчеты.Ссылка ЕСТЬ NULL
	|			ТОГДА ВТ_РеглОтчеты.ПериодСобытия
	|	КОНЕЦ КАК ПериодОтчета,
	|	ПараметрыОтчетности.Владелец,
	|	ПараметрыОтчетности.Срок,
	|	ВТ_РеглОтчеты.Статус,
	|	ВТ_РеглОтчеты.СостояниеСдачиОтчетности = ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.СостояниеСдачиОтчетности.ПоложительныйРезультатДокументооборота) КАК ПоложительныйРезультат
	|ПОМЕСТИТЬ СписокОтчетов
	|ИЗ
	|	ПараметрыОтчетности КАК ПараметрыОтчетности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_РеглОтчеты КАК ВТ_РеглОтчеты
	|		ПО ПараметрыОтчетности.ПериодСобытия = ВТ_РеглОтчеты.ПериодСобытия
	|			И ПараметрыОтчетности.ПолноеИмяПравила = ВТ_РеглОтчеты.ПолноеИмяПравила
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Справки2НДФЛ.Ссылка),
	|	Параметры2НДФЛ.ПериодСобытия,
	|	Параметры2НДФЛ.Правило,
	|	Справки2НДФЛ.НалоговыйПериодДата,
	|	Параметры2НДФЛ.Владелец,
	|	Параметры2НДФЛ.Срок,
	|	ЖурналОтчетовСтатусы.Статус,
	|	ЖурналОтчетовСтатусы.СостояниеСдачиОтчетности = ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.СостояниеСдачиОтчетности.ПоложительныйРезультатДокументооборота)
	|ИЗ
	|	Параметры2НДФЛ КАК Параметры2НДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СправкиНДФЛДляПередачиВНалоговыйОрган КАК Справки2НДФЛ
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналОтчетовСтатусы КАК ЖурналОтчетовСтатусы
	|			ПО Справки2НДФЛ.Ссылка = ЖурналОтчетовСтатусы.Ссылка
	|				И Справки2НДФЛ.Организация = ЖурналОтчетовСтатусы.Организация
	|		ПО (Справки2НДФЛ.НалоговыйПериодДата = Параметры2НДФЛ.ПериодСобытия)
	|			И (Справки2НДФЛ.Организация = &Организация)
	|			И (Справки2НДФЛ.Проведен = ИСТИНА)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(СведенияОЗастрахованныхЛицахСЗВ_М.Ссылка),
	|	КОНЕЦПЕРИОДА(ПараметрыСЗВ_М.ПериодСобытия, МЕСЯЦ),
	|	ПараметрыСЗВ_М.Правило,
	|	КОНЕЦПЕРИОДА(СведенияОЗастрахованныхЛицахСЗВ_М.ОтчетныйПериод, МЕСЯЦ),
	|	ПараметрыСЗВ_М.Владелец,
	|	ПараметрыСЗВ_М.Срок,
	|	ЖурналОтчетовСтатусы.Статус,
	|	ЖурналОтчетовСтатусы.СостояниеСдачиОтчетности = ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.СостояниеСдачиОтчетности.ПоложительныйРезультатДокументооборота)
	|ИЗ
	|	ПараметрыСЗВ_М КАК ПараметрыСЗВ_М
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СведенияОЗастрахованныхЛицахСЗВ_М КАК СведенияОЗастрахованныхЛицахСЗВ_М
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналОтчетовСтатусы КАК ЖурналОтчетовСтатусы
	|			ПО (ЖурналОтчетовСтатусы.Ссылка = СведенияОЗастрахованныхЛицахСЗВ_М.Ссылка)
	|				И СведенияОЗастрахованныхЛицахСЗВ_М.Организация = ЖурналОтчетовСтатусы.Организация
	|		ПО ПараметрыСЗВ_М.ПериодСобытия = СведенияОЗастрахованныхЛицахСЗВ_М.ОтчетныйПериод
	|			И (СведенияОЗастрахованныхЛицахСЗВ_М.Организация = &Организация)
	|			И (СведенияОЗастрахованныхЛицахСЗВ_М.Проведен = ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетыОрганизации.Правило КАК Правило,
	|	ОтчетыОрганизации.ПериодСобытия,
	|	ОтчетыОрганизации.МаксПериодСобытия КАК МаксПериодСобытия,
	|	ОтчетыОрганизации.Владелец КАК Владелец,
	|	1 КАК КолвоОтчетовПлан,
	|	ОтчетыОрганизации.ПериодОтчетаЭДО,
	|	ОтчетыОрганизации.Статус,
	|	ОтчетыОрганизации.Срок,
	|	ОтчетыОрганизации.ПредставлениеОтчета,
	|	ВЫБОР
	|		КОГДА ОтчетыОрганизации.ПериодСданногоОтчета ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КолвоОтчетовФакт,
	|	ОтчетыОрганизации.ПериодСданногоОтчета
	|ИЗ
	|	(ВЫБРАТЬ
	|		СписокОтчетов.Правило КАК Правило,
	|		СписокОтчетов.ПериодСобытия КАК ПериодСобытия,
	|		СписокОтчетов.ПериодСобытия КАК МаксПериодСобытия,
	|		СписокОтчетов.Владелец КАК Владелец,
	|		ВЫБОР
	|			КОГДА &ДатаНачалаПримененияЭДООтчетов < СписокОтчетов.ПериодСобытия
	|				ТОГДА СписокОтчетов.ПериодОтчета
	|		КОНЕЦ КАК ПериодОтчетаЭДО,
	|		СписокОтчетов.Статус КАК Статус,
	|		СписокОтчетов.Срок КАК Срок,
	|		СписокОтчетов.ПредставлениеОтчета КАК ПредставлениеОтчета,
	|		ВЫБОР
	|			КОГДА &ДатаНачалаПримененияЭДООтчетов = ДАТАВРЕМЯ(2999, 12, 31)
	|				ТОГДА СписокОтчетов.ПериодОтчета
	|			КОГДА &ДатаНачалаПримененияЭДООтчетов >= СписокОтчетов.ПериодСобытия
	|				ТОГДА СписокОтчетов.ПериодОтчета
	|			КОГДА &ДатаНачалаПримененияЭДООтчетов < СписокОтчетов.ПериодСобытия
	|					И СписокОтчетов.ПоложительныйРезультат
	|				ТОГДА СписокОтчетов.ПериодОтчета
	|		КОНЕЦ КАК ПериодСданногоОтчета
	|	ИЗ
	|		СписокОтчетов КАК СписокОтчетов) КАК ОтчетыОрганизации
	|ИТОГИ
	|	МАКСИМУМ(МаксПериодСобытия),
	|	МАКСИМУМ(Владелец),
	|	СУММА(КолвоОтчетовПлан),
	|	СУММА(КолвоОтчетовФакт)
	|ПО
	|	Правило";
	
	ВыборкаИтогов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// 4. Назначаем индикаторы каждой задаче.
	Пока ВыборкаИтогов.Следующий() Цикл
		
		СтрокиЗадачи = ЗадачиПоОтчетам.НайтиСтроки(Новый Структура("Правило", ВыборкаИтогов.Правило));
		ВключеннаяЗадачаПоОтчету = ?(СтрокиЗадачи.Количество() > 0, СтрокиЗадачи[0], Неопределено);
		
		Если ВключеннаяЗадачаПоОтчету = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтоТекущаяЗадача = ВключеннаяЗадачаПоОтчету.ЭтоТекущаяЗадача;
		
		Если ВыборкаИтогов.КолвоОтчетовПлан <= ВыборкаИтогов.КолвоОтчетовФакт И Не ЭтоТекущаяЗадача Тогда
			
			Если ВключеннаяЗадачаПоОтчету <> Неопределено Тогда
				// Зеленые задачи добавляем только, если они включены пользователем
				// и есть отчеты за все периоды.
				НоваяСтрока = ОтчетныеИндикаторы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВключеннаяЗадачаПоОтчету);
				НоваяСтрока.Индикатор = ЗеленыйИндикатор();
				НоваяСтрока.ТекущийОтчетСдан = Истина;
				НоваяСтрока.ТекущийОтчетЕстьВБазе = Истина;
			КонецЕсли;
			
		Иначе
			// Таблица содержит несданные отчеты за прошлые периоды.
			ПросроченныеОтчеты = НовыйПросроченныеОтчеты();
			ТекущийОтчетСдан = Ложь;
			ТекущийОтчетЕстьВБазе = Ложь;
			ВыборкаДетали = ВыборкаИтогов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			СтатусЭДОТекОтчета = "";
			Пока ВыборкаДетали.Следующий() Цикл
				
				ЭтоТекущийОтчет = (ВыборкаДетали.ПериодСданногоОтчета = ВыборкаИтогов.МаксПериодСобытия
					Или ВыборкаДетали.ПериодСобытия = ВыборкаИтогов.МаксПериодСобытия) И ЭтоТекущаяЗадача;
					
				// Выявляем просроченные отчеты.
				Если ВыборкаДетали.Срок < ТекущийДень И ВыборкаДетали.ПериодСобытия <> ВыборкаДетали.ПериодСданногоОтчета Тогда
					НовыйПросрОтчет = ПросроченныеОтчеты.Добавить();
					ЗаполнитьЗначенияСвойств(НовыйПросрОтчет, ВыборкаДетали);
					НовыйПросрОтчет.Статус = КапитализироватьСтроку(НовыйПросрОтчет.Статус);
					НовыйПросрОтчет.ПериодСобытия = КонецДня(ВыборкаДетали.ПериодСобытия);
				КонецЕсли;
				
				// Выявляем текущий отчет и факт его сдачи.
				Если ЭтоТекущийОтчет И Используется1СОтчетность
					И ВыборкаДетали.ПериодОтчетаЭДО = ВыборкаИтогов.МаксПериодСобытия Тогда
					
					СтатусЭДОТекОтчета = КапитализироватьСтроку(ВыборкаДетали.Статус, Ложь);
					ТекущийОтчетСдан = (ВыборкаДетали.ПериодСданногоОтчета = ВыборкаИтогов.МаксПериодСобытия);
				ИначеЕсли ЭтоТекущийОтчет И Не Используется1СОтчетность Тогда
					ТекущийОтчетСдан = (ТекущийДень > ВыборкаДетали.Срок);
				КонецЕсли;
				
				ТекущийОтчетЕстьВБазе = ЭтоТекущийОтчет И ЗначениеЗаполнено(ВыборкаДетали.ПериодСданногоОтчета);
				
			КонецЦикла;
			
			Индикатор = ЗеленыйИндикатор();
			Если Не Используется1СОтчетность Тогда
				
				Если ПросроченныеОтчеты.Количество() = 0 Тогда
					// Просроченных отчетов нет, анализируем сроки текущего отчетного периода.
					Если ВключеннаяЗадачаПоОтчету.НачалоВыполнения > ТекущийДень Тогда
						// Отчет еще рано предоставлять, отображаем зеленый индикатор.
					ИначеЕсли ВключеннаяЗадачаПоОтчету.Срок < ТекущийДень Тогда
						// Срок предоставления уже закончился, и т.к. нет просроченных, то считаем, что все сдано.
					Иначе
						// Держим желтый индикатор до завершения отчетного периода.
						Индикатор = ЖелтыйИндикатор();
					КонецЕсли;
				Иначе
					// Есть просроченные отчеты за предыдущие периоды.
					Индикатор = КрасныйИндикатор();
				КонецЕсли;
			Иначе
				Если ПросроченныеОтчеты.Количество() = 0 Тогда
					// Просроченных отчетов нет, анализируем сроки текущего отчетного периода.
					Если ВключеннаяЗадачаПоОтчету.НачалоВыполнения > ТекущийДень Тогда
						// Отчет еще рано предоставлять, отображаем зеленый индикатор.
					ИначеЕсли ТекущийОтчетСдан Тогда
						Индикатор = ЗеленыйИндикатор();
					ИначеЕсли Не ТекущийОтчетСдан Тогда
						Индикатор = ЖелтыйИндикатор();
					КонецЕсли;
				Иначе
					// Есть просроченные отчеты за предыдущие периоды.
					Индикатор = КрасныйИндикатор();
				КонецЕсли;
			КонецЕсли;
			
			НоваяСтрока = ОтчетныеИндикаторы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВключеннаяЗадачаПоОтчету);
			
			НоваяСтрока.ПросроченныеОтчеты = ПросроченныеОтчеты;
			НоваяСтрока.СтатусЭДОТекОтчета = КапитализироватьСтроку(СтатусЭДОТекОтчета);
			НоваяСтрока.Индикатор          = Индикатор;
			НоваяСтрока.ТекущийОтчетСдан = ТекущийОтчетСдан;
			НоваяСтрока.ТекущийОтчетЕстьВБазе = ТекущийОтчетЕстьВБазе;
			
		КонецЕсли;
		
		УдалитьСтрокиТаблицы(ЗадачиПоОтчетам, СтрокиЗадачи);
		
	КонецЦикла;
	
	/// Добавляем зеленые задачи по отчетности, срок сдавать которой ещё не наступил.
	// В этом случае в выборке таких задач не будет и мы их берем из ЗадачиПоОтчетам.
	Для каждого Задача Из ЗадачиПоОтчетам Цикл
		НоваяСтрока = ОтчетныеИндикаторы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Задача);
		НоваяСтрока.Индикатор = ЗеленыйИндикатор();
		НоваяСтрока.ТекущийОтчетСдан = Истина;
		НоваяСтрока.ТекущийОтчетЕстьВБазе = Истина;
	КонецЦикла;
	
КонецПроцедуры

Функция НовыйПараметрыОтчетности()
	
	ТаблицаПараметров = Новый ТаблицаЗначений;
	ТаблицаПараметров.Колонки.Добавить("ПериодСобытия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТаблицаПараметров.Колонки.Добавить("Правило",       Новый ОписаниеТипов("СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов"));
	ТаблицаПараметров.Колонки.Добавить("Владелец",      Новый ОписаниеТипов("СправочникСсылка.ЗадачиБухгалтера"));
	ТаблицаПараметров.Колонки.Добавить("Срок",          ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	
	Возврат ТаблицаПараметров;
	
КонецФункции

Функция НачалоОбзораОтчетности(Организация, ТекущийДень)
	
	ДатаНачалаДеятельности = КалендарьБухгалтера.ДатаНачалаДеятельности(Организация);
	НачалоИнтервала = Макс(ДобавитьМесяц(КонецГода(ТекущийДень) + 1,-36), ДатаНачалаДеятельности);
	
	Возврат НачалоИнтервала;
	
КонецФункции

Функция НовыйПросроченныеОтчеты()
	
	ПросроченныеОтчеты = Новый ТаблицаЗначений;
	ПросроченныеОтчеты.Колонки.Добавить("Срок", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ПросроченныеОтчеты.Колонки.Добавить("Статус", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ПросроченныеОтчеты.Колонки.Добавить("ПериодСОбытия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	
	Возврат ПросроченныеОтчеты;
	
КонецФункции

#КонецОбласти

#КонецЕсли