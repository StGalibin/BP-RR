#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжиданияАктуализации Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОгобработка)
	
	// Разрешим выбор только тех организаций, данные которых доступны на чтение.
	ДоступныеОрганизации = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Ложь);
	УстановитьПараметрыВыбораОрганизации(ЭтотОбъект, ДоступныеОрганизации);
	
	Если ЗначениеЗаполнено(Параметры.Организация) Тогда
		Организация = Параметры.Организация;
	Иначе
		Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;
	
	Если ДоступныеОрганизации.Найти(Организация) = Неопределено Тогда
		Организация = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	ОрганизацияПредставление = Организация;
	
	ТекущийДень = КонецДня(ТекущаяДатаСеанса());
	
	ЕстьПравоНаАктуализацию   = ПравоДоступа("Изменение", Метаданные.Документы.РегламентнаяОперация);
	ЕстьПравоВыполненияЗадачи = КалендарьБухгалтера.ПравоВыполненияЗадачи(Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПустаяСсылка());
	
	РазрешенУчетРегулярнойДеятельности = ТарификацияБПВызовСервераПовтИсп.РазрешенУчетРегулярнойДеятельности();
	
	УстановитьПараметрыЗависимыеОтОрганизации();
	
	УстановитьОформлениеМонитора();
	
	ПереключитьВРежимОжидания(Истина);
	
	Элементы.РекомендацияПоОбновлению.Видимость = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ВРег("МониторНалоговИОтчетности"), 
		ВРег("РекомендацияПоОбновлению"), 
		Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ЗапуститьОбновление();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовИКомандФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПредставление = Организация;
	
	УстановитьПараметрыЗависимыеОтОрганизации();
	
	ЗапуститьОбновление();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СсылкаНалогОтчетНажатие(Элемент)
	
	ОбработатьСсылкуНаНалогОтчет(Элемент, АдресСсылокНадписей);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НавигационнаяСсылкаНажатие(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработатьСсылкуНаНалогОтчет(Элемент, АдресНавигационныхСсылок);
	
КонецПроцедуры

&НаКлиенте
Процедура Актуализировать(Команда)
	
	АктуализироватьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьМонитор(Команда)
	
	УстановитьПараметрыЗависимыеОтОрганизации();
	ЗапуститьОбновление();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияАктуальностьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОбработатьСсылкуНаПереходВЗакрытиеМесяца(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьРекомендациюПоОбновлениюНажатие(Элемент)
	
	Элементы.РекомендацияПоОбновлению.Видимость = Ложь;
	СохранитьОтключениеРекомендацииПоОбновлению();
	
КонецПроцедуры

#КонецОбласти

#Область Представление

&НаСервере
Процедура РазместитьВИнтерфейсе()
	
	ИндикаторыМонитора = ПолучитьИзВременногоХранилища(АдресРезультата);
	ИндикаторыМонитора = ИндикаторыМонитора.Получить(); // получение из хранилища значения.
	
	ВключенныеЗадачи    = ИндикаторыМонитора.ВключенныеЗадачи;
	НалоговыеИндикаторы = ИндикаторыМонитора.НалоговыеИндикаторы;
	ОтчетныеИндикаторы  = ИндикаторыМонитора.ОтчетныеИндикаторы;
	НалоговыеИндикаторы.Индексы.Добавить("Владелец");
	ОтчетныеИндикаторы.Индексы.Добавить("Владелец");
	
	// Очистка.
	ПараметрыСсылокНадписей = Новый Соответствие;
	ПараметрыНавигационныхСсылок = Новый Соответствие;
	Столбцы    = Новый Массив(3);
	Столбцы[0] = 1; // первый столбец монитора с максимум 1-ой декорацией.
	Столбцы[1] = ЛимитСсылокИндикатора() + 3; // второй столбец монитора с максимум декораций согласно лимиту плюс запас
	Столбцы[2] = ЛимитСсылокИндикатора() + 3; // третий столбец монитора с максимум декораций согласно лимиту плюс запас.
	
	Для СчРяд = 1 По ТекущееЧислоРядов Цикл
		Элементы[ИмяРяд() + Строка(СчРяд)].Видимость = Ложь;
		Для СчСтолбец = 0 По Столбцы.ВГраница() Цикл 
			Для СчСтрока = 0 По Столбцы[СчСтолбец] - 1 Цикл
				ЭлементФормы = Элементы.Найти(ИмяСтрока() + Строка(СчРяд) + Строка(СчСтолбец) + Строка(СчСтрока));
				Если ЭлементФормы <> Неопределено Тогда
					ЭлементФормы.Видимость = Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	// Формирование.
	ПропускаемыеЗадачи = Новый Массив;
	
	СчРяд = 1;
	Для Сч = 0 По ВключенныеЗадачи.Количество() - 1 Цикл
		
		СтрокаЗадачи = ВключенныеЗадачи[Сч];
		
		Если ПропускаемыеЗадачи.Найти(СтрокаЗадачи.КодЗадачи) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ВладельцыЗадачи = ПодобратьПаруКЗадаче(ВключенныеЗадачи, СтрокаЗадачи.Владелец, СтрокаЗадачи.КодЗадачи, ПропускаемыеЗадачи);
		
		СтрокиНалога  = НалоговыеИндикаторы.НайтиСтроки(Новый Структура("Владелец", ВладельцыЗадачи.ВладелецНалог));
		СтрокиОтчетов = ОтчетныеИндикаторы.НайтиСтроки(Новый Структура("Владелец", ВладельцыЗадачи.ВладелецОтчет));

		// Определим необходимость вывода нового ряда на форму.
		НеобходимоРазместитьНовыйРяд = Ложь;
		Если Обработки.МониторНалоговИОтчетности.ЭтоЗадачаВзносовИП(СтрокаЗадачи.КодЗадачи)
			ИЛИ СтрокаЗадачи.КодЗадачи = Обработки.МониторНалоговИОтчетности.КодЗадачиПатент()
			ИЛИ Обработки.МониторНалоговИОтчетности.ЭтоЗадачаТорговыйСбор(СтрокаЗадачи.КодЗадачи) Тогда
			// Задачи по патенту, страховым взносам ИП за себя и торговому сбору выводим всегда, даже если по ним нулевые суммы налога,
			// такое может быть, например, в случае, когда данным еще не введены в программу.
			НеобходимоРазместитьНовыйРяд = Истина;
		Иначе
			// Если отчетности по налогу предоставлять не требуется и задолженности к уплате нет, 
			// то не выводим блок.
			КУплатеВсего = 0;
			Для Каждого СтрокаНалога Из СтрокиНалога Цикл
				КУплатеВсего = КУплатеВсего + СтрокаНалога.КУплатеДолг + СтрокаНалога.КУплатеТекущий;
			КонецЦикла;
			
			НеобходимоРазместитьНовыйРяд = КУплатеВсего <> 0 ИЛИ СтрокиОтчетов.Количество() > 0;
		КонецЕсли;
		
		// Размещаем новый ряд на форме.
		Если НеобходимоРазместитьНовыйРяд Тогда
		
			РазместитьНовыйРяд(СчРяд);
			
			Элементы[ИмяРяд() + Строка(СчРяд)].Видимость = Истина;
			Элементы[ИмяСтрока() + Строка(СчРяд) + "00"].Видимость = Истина;
			Если СтрокаЗадачи.КодЗадачи = Обработки.МониторНалоговИОтчетности.КодЗадачиНДФЛПоУплате()
				Или СтрокаЗадачи.КодЗадачи = Обработки.МониторНалоговИОтчетности.КодЗадачиНДФЛПоОтчету() Тогда
				ИмяЗадачи = "НДФЛ";
			Иначе
				ИмяЗадачи = СтрокаЗадачи.ИмяЗадачи;
			КонецЕсли;
			ЭлементПоказателя = Элементы[ИмяСтрока() + Строка(СчРяд) + "00"];
			ЭлементПоказателя.Заголовок = Строка(СчРяд) + ". " + ИмяЗадачи;

			БлокНалога = СоздатьЭкземплярБлока(СтрокаЗадачи, СтрокиНалога, Истина);
			ЗаполнитьЭлементБлока(БлокНалога, СчРяд, Истина, ПараметрыСсылокНадписей, ПараметрыНавигационныхСсылок);
			
			БлокОтчетов = СоздатьЭкземплярБлока(СтрокаЗадачи, СтрокиОтчетов, Ложь);
			ЗаполнитьЭлементБлока(БлокОтчетов, СчРяд, Ложь, ПараметрыСсылокНадписей, ПараметрыНавигационныхСсылок);
			
			СчРяд = СчРяд + 1;
		КонецЕсли;	
		
		// Удаляем обработанные строки налогов и отчетов.
		Обработки.МониторНалоговИОтчетности.УдалитьСтрокиТаблицы(НалоговыеИндикаторы, СтрокиНалога);
		Обработки.МониторНалоговИОтчетности.УдалитьСтрокиТаблицы(ОтчетныеИндикаторы, СтрокиОтчетов);
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ПараметрыСсылокНадписей, АдресСсылокНадписей);
	ПоместитьВоВременноеХранилище(ПараметрыНавигационныхСсылок, АдресНавигационныхСсылок);
	
	ВсеЗадачиВыполнены = ИндикаторыМонитора.ВсеЗадачиВыполнены;
	
	ПереключитьВРежимОжидания(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура РазместитьНовыйРяд(СчРяд)
	
	Если СчРяд <= ТекущееЧислоРядов Тогда
		// Уже создан ряд при предыдущем выполнении отчета или есть предопределенный.
		Возврат
	КонецЕсли;
	
	ИсклСвойстваГруппы = "ПутьКДаннымЗаголовка";

	Ряд = Строка(СчРяд);
	
	НовыйРяд = Элементы.Добавить(ИмяРяд() + Ряд, Тип("ГруппаФормы"), Элементы.ДанныеМонитора);
	ЗаполнитьЗначенияСвойств(НовыйРяд, Элементы.Ряд1,, ИсклСвойстваГруппы);
	
	Столбцы    = Новый Массив(3);
	Столбцы[0] = 1; // первый столбец монитора с минимум 1-ой декорацией.
	Столбцы[1] = 3; // второй столбец монитора с минимум 3-я декорациями.
	Столбцы[2] = 3; // третий столбец монитора с минимум 3-я декорациями.

	Для Сч = 0 По Столбцы.Количество() - 1 Цикл
		Столб = Строка(Сч);
		НовыйГруппаКонтейнер = Элементы.Добавить(ИмяГруппаКонтейнер() + Ряд + Столб, Тип("ГруппаФормы"), НовыйРяд);
		ЗаполнитьЗначенияСвойств(НовыйГруппаКонтейнер, Элементы[ИмяГруппаКонтейнер() + "1" + Столб],, ИсклСвойстваГруппы);
		
		НовыйКонтейнер = Элементы.Добавить(ИмяКонтейнер() + Ряд + Столб, Тип("ГруппаФормы"), НовыйГруппаКонтейнер);
		ЗаполнитьЗначенияСвойств(НовыйКонтейнер, Элементы[ИмяКонтейнер() + "1" + Столб],, ИсклСвойстваГруппы);
		
		Для СчСтрока = 0 По Столбцы[Сч] - 1 Цикл
			НомерСтроки = Строка(СчСтрока);
			НоваяСтрокаИмя = ИмяСтрока() + Ряд + Столб + НомерСтроки;
			НовыйСтрока = Элементы.Добавить(НоваяСтрокаИмя, Тип("ДекорацияФормы"), НовыйКонтейнер);
			ЗаполнитьЗначенияСвойств(НовыйСтрока, Элементы[ИмяСтрока() + "1" + Столб + НомерСтроки]);
			НовыйСтрока.Заголовок = "";
			НовыйСтрока.Видимость = Ложь;
		КонецЦикла;
	КонецЦикла;
	
	ТекущееЧислоРядов = СчРяд;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьЭлементБлока(БлокИндикатора, СчРяд, ЭтоНалог, ПараметрыСсылокНадписей = Неопределено, ПараметрыНавигационныхСсылок = Неопределено)
	
	Раздел = ?(ЭтоНалог, "1", "2");
	
	ГруппаКонтейнер = Элементы[ИмяГруппаКонтейнер() + Строка(СчРяд) + Раздел];
	ЗаполнитьЗначенияСвойств(ГруппаКонтейнер, БлокИндикатора);
	
	Для СчСтрока = 0 По БлокИндикатора.КолвоСтрок - 1 Цикл
		
		// Заполняем элементы формы.
		ИмяЭлемента = ИмяСтрока() + Строка(СчРяд) + Раздел + Строка(СчСтрока);
		ЭлементСтроки = Элементы.Найти(ИмяЭлемента);
		Если ЭлементСтроки = Неопределено Тогда
			ИмяРодителя =  ИмяКонтейнер() + Строка(СчРяд) + Раздел;
			Родитель = Элементы.Найти(ИмяРодителя);
			ЭлементСтроки = Элементы.Добавить(ИмяЭлемента, Тип("ДекорацияФормы"), Родитель);
			ЗаполнитьЗначенияСвойств(ЭлементСтроки, Элементы.Строка112);
		КонецЕсли;
		
		ЭлементСтроки.Заголовок = БлокИндикатора[ИмяСтрока() + СчСтрока];
		ЭлементСтроки.Видимость = БлокИндикатора[ИмяСтрока() + "Видимость" + СчСтрока];
		
		// Заполняем параметры ссылок.
		ПараметрыСсылки = Неопределено;
		Если БлокИндикатора.Свойство("СтрокаПараметрыСсылки" + СчСтрока, ПараметрыСсылки) И ПараметрыСсылокНадписей <> Неопределено Тогда
			ПараметрыСсылокНадписей.Вставить(ИмяЭлемента, ПараметрыСсылки);
			ЭлементСтроки.УстановитьДействие("Нажатие", "Подключаемый_СсылкаНалогОтчетНажатие");
			ЭлементСтроки.Доступность = ЕстьПравоВыполненияЗадачи;
		КонецЕсли;
		
		// Заполняем навигационные ссылки.
		Если ПараметрыНавигационныхСсылок <> Неопределено И БлокИндикатора.Свойство("ПараметрыНавигационныхСсылок") Тогда
			ПараметрыНавигационныхСсылок.Вставить(ИмяЭлемента, БлокИндикатора.ПараметрыНавигационныхСсылок);
			ЭлементСтроки.УстановитьДействие("Нажатие", "Подключаемый_СсылкаНалогОтчетНажатие");
			ЭлементСтроки.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_НавигационнаяСсылкаНажатие");
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция ПодобратьПаруКЗадаче(ВключенныеЗадачи, Задача, КодЗадачи, ПропускаемыеЗадачи)
	
	Результат = Новый Структура;
	Результат.Вставить("ВладелецОтчет", Задача);
	Результат.Вставить("ВладелецНалог", Задача);
	
	Если КодЗадачи = Обработки.МониторНалоговИОтчетности.КодЗадачиНДФЛПоУплате() Тогда
		СтрокаПары = ВключенныеЗадачи.Найти(Обработки.МониторНалоговИОтчетности.КодЗадачиНДФЛПоОтчету());
		Результат.ВладелецОтчет = ?(СтрокаПары = Неопределено, Задача, СтрокаПары.Владелец);
	ИначеЕсли КодЗадачи = Обработки.МониторНалоговИОтчетности.КодЗадачиНДФЛПоОтчету() Тогда
		СтрокаПары = ВключенныеЗадачи.Найти(Обработки.МониторНалоговИОтчетности.КодЗадачиНДФЛПоУплате());
		Результат.ВладелецНалог = ?(СтрокаПары = Неопределено, Задача, СтрокаПары.Владелец);
	КонецЕсли;
	
	Если СтрокаПары <> Неопределено Тогда
		ПропускаемыеЗадачи.Добавить(СтрокаПары.КодЗадачи);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЗаголовокНалогаОтчета(ТипБлока, ЭтоНалог, СтрокиИндикатора)
	
	Результат = Новый ФорматированнаяСтрока("");
	
	Если ТипБлока = Обработки.МониторНалоговИОтчетности.ЗеленыйИндикатор() Тогда
		
		Строка0   = ?(ЭтоНалог, Нстр("ru = 'Налоги оплачены '"), Нстр("ru = 'Отчетность сдана '"));
		Строка0   = Новый ФорматированнаяСтрока(Строка0, ШрифтЗаголовков);
		Смайлик   = Новый ФорматированнаяСтрока(БиблиотекаКартинок.РадостныйСмайлик);
		Результат = Новый ФорматированнаяСтрока(Строка0, Смайлик);
		
	ИначеЕсли ТипБлока = Обработки.МониторНалоговИОтчетности.ЖелтыйИндикатор() Тогда
		Если ЭтоНалог Тогда
			Строка0 = Нстр("ru = 'Пора оплатить %1 руб.'");
		Иначе
			
			ВсеОтчетыЕстьВБазе = Истина;
			МинПериодСобытия = МаксДата;
			Для каждого Индикатор Из СтрокиИндикатора Цикл
				Если Индикатор.ЭтоТекущаяЗадача И Не Индикатор.ТекущийОтчетЕстьВБазе Тогда
					ВсеОтчетыЕстьВБазе = Ложь;
				КонецЕсли;
				Если Индикатор.ПериодСобытия < МинПериодСобытия Тогда
					МинПериодСобытия = Индикатор.ПериодСобытия;
				КонецЕсли;
			КонецЦикла;
			
			Если ВсеОтчетыЕстьВБазе И (Не ЗначениеЗаполнено(ДатаНачалаПримененияЭДООтчетов) 
				Или ДатаНачалаПримененияЭДООтчетов >= МинПериодСобытия) Тогда
				
				Строка0 = Нстр("ru = 'Отчетность подготовлена'");
			Иначе
				Строка0 = Нстр("ru = 'Пора сдавать отчетность'");
			КонецЕсли;
			
		КонецЕсли;
		Результат = Новый ФорматированнаяСтрока(Строка0, ШрифтЗаголовков);
	ИначеЕсли ТипБлока = Обработки.МониторНалоговИОтчетности.КрасныйИндикатор() Тогда
		Строка0   = ?(ЭтоНалог, Нстр("ru = 'Мы должны %1 руб.'"), Нстр("ru = 'Отчетность просрочена'"));
		Результат = Новый ФорматированнаяСтрока(Строка0, ШрифтЗаголовков);
	ИначеЕсли ТипБлока = "Ошибка" Тогда
		ВызватьИсключение Нстр("ru = 'Непредвиденная ошибка. Попробуйте сформировать монитор ещё раз'");
	Иначе
		Строка0 = ?(ЭтоНалог, НСтр("ru = 'Налоги ещё не оплачивались'"), НСтр("ru = 'Отчетность ещё не сдавалась'"));
		Результат = Новый ФорматированнаяСтрока(Строка0, ШрифтЗаголовков);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ОписаниеСледующегоНалогаОтчета(СтрокиИндикатора, ЭтоНалог, КодЗадачи, ЭтоПерваяЗадача)
	
	Результат = "";
	Параметр2КакИмя = Ложь;
	Если ЭтоНалог Тогда
		ШаблонТекста = ?(ЭтоПерваяЗадача, НСтр("ru = 'Первый платеж не позднее %1'"), НСтр("ru = 'Следующий платеж не позднее %1'"));
	ИначеЕсли Обработки.МониторНалоговИОтчетности.ЭтоЗадачаУСН(КодЗадачи) Или Обработки.МониторНалоговИОтчетности.ЭтоЗадачаЕНВД(КодЗадачи) тогда
		ШаблонТекста = ?(ЭтоПерваяЗадача, НСтр("ru = 'Первая декларация не позднее %1'"), НСтр("ru = 'Следующая декларация не позднее %1'"));
	ИначеЕсли Обработки.МониторНалоговИОтчетности.ЭтоЗадачаСтраховыхВзносов(КодЗадачи) Тогда
		ШаблонТекста = ?(ЭтоПерваяЗадача, НСтр("ru = 'Первые отчеты в фонды не позднее %1'"), НСтр("ru = 'Следующие отчеты в фонды не позднее %1'"));
	Иначе
		ШаблонТекста = ?(ЭтоПерваяЗадача, НСтр("ru = 'Первый отчет не позднее %1'"), НСтр("ru = 'Следующий отчет не позднее %1'"));
		Параметр2КакИмя = Истина;
	КонецЕсли;
	ШаблонТекста = ШаблонТекста + Символы.ПС + "(%2)";

	Если СтрокиИндикатора.Количество() = 1 Тогда
		
		СвойстваЗадачи = СтрокиИндикатора[0].БудущаяЗадача;
		Параметр1      = Формат(СвойстваЗадачи.Срок, ФорматДата());
		Если Параметр2КакИмя Тогда
			Параметр2 =  СвойстваЗадачи.Наименование;
		Иначе
			Параметр2 = Нстр("ru = 'за '") + КалендарьБухгалтера.ПредставлениеПериодаСобытия(СвойстваЗадачи.НачалоПериодаСобытия, СвойстваЗадачи.ПериодСобытия);
		КонецЕсли;
		
		Результат = СтрШаблон(ШаблонТекста, Параметр1, Обработки.МониторНалоговИОтчетности.КапитализироватьСтроку(Параметр2, Ложь));
		
	Иначе
		
		//Сначала находим минимальные задачи по периоду события.
		МинПериодСобытия = МаксДата;
		Для каждого Индикатор Из СтрокиИндикатора Цикл
			Если НЕ ЗначениеЗаполнено(Индикатор.БудущаяЗадача.Срок) Тогда
				// Будущей задачи нет, пропускаем такие.
				Продолжить;
			КонецЕсли;
			Если Не (Индикатор.БудущаяЗадача.НачалоВыполнения > ТекущийДень И Индикатор.БудущаяЗадача.Срок < ТекущийДень) Тогда
				МинПериодСобытия = Мин(МинПериодСобытия, Индикатор.БудущаяЗадача.ПериодСобытия);
			КонецЕсли;
		КонецЦикла;
		
		ОтобранныеПоПериодуСобытия = Новый Массив;
		
		// Отбираем задачи с минимальным периодом события.
		Для каждого Индикатор Из СтрокиИндикатора Цикл
			Если МинПериодСобытия = Индикатор.БудущаяЗадача.ПериодСобытия Тогда
				ОтобранныеПоПериодуСобытия.Добавить(Индикатор);
			КонецЕсли;
		КонецЦикла;
		
		Если ОтобранныеПоПериодуСобытия.Количество() = 1 Тогда
			
			Событие = ОтобранныеПоПериодуСобытия[0];
			Результат = СтрШаблон(ШаблонТекста, Формат(Событие.БудущаяЗадача.Срок, ФорматДата()), 
				Обработки.МониторНалоговИОтчетности.КапитализироватьСтроку(Событие.БудущаяЗадача.Наименование, Ложь));
			
		Иначе
			
			// Теперь находим минимальные задачи по сроку выполнения
			МинСрок = МаксДата;
			Для каждого Событие Из ОтобранныеПоПериодуСобытия Цикл
				МинСрок = Мин(МинСрок, Событие.БудущаяЗадача.Срок);
			КонецЦикла;
			
			// Подсчитываем количество задач с минимальным сроком выполнения.
			ОтобранныеПоСроку = Новый Массив;
			Для каждого Событие Из ОтобранныеПоПериодуСобытия Цикл
				Если МинСрок = Событие.БудущаяЗадача.Срок Тогда
					ОтобранныеПоСроку.Добавить(Событие);
				КонецЕсли;
			КонецЦикла;
			
			Если ОтобранныеПоСроку.Количество() = 1 Тогда
				
				Событие = ОтобранныеПоСроку[0];
				Результат = СтрШаблон(ШаблонТекста, Формат(Событие.БудущаяЗадача.Срок, ФорматДата()),
					Обработки.МониторНалоговИОтчетности.КапитализироватьСтроку(Событие.БудущаяЗадача.Наименование, Ложь));
				
			Иначе
				
				Если ЭтоПерваяЗадача Тогда
					ШаблонТекста = ?(ЭтоНалог, НСтр("ru = 'Первые налоги не позднее %1: %2'"), 
						НСтр("ru = 'Первые отчеты не позднее %1: %2'"));
				Иначе
					ШаблонТекста = ?(ЭтоНалог, НСтр("ru = 'Следующие налоги не позднее %1: %2'"), 
						НСтр("ru = 'Следующие отчеты не позднее %1: %2'"));
				КонецЕсли;
				
				ГруппировкаДат = Новый Соответствие;
				Для каждого Событие Из ОтобранныеПоСроку Цикл
						
					СтрокаОписания = ГруппировкаДат.Получить(Событие.Срок);
					Если СтрокаОписания = Неопределено Тогда
						СтрокаОписания = "";
					КонецЕсли;
					
					СтрокаОписания = СтрокаОписания + Символы.ПС + "- " + Событие.Наименование;
					ГруппировкаДат.Вставить(Событие.БудущаяЗадача.Срок, СтрокаОписания);
						
				КонецЦикла;
				
				Для каждого КлючИЗначение Из ГруппировкаДат Цикл
					СтрокаОписания = СтрШаблон(ШаблонТекста, Формат(КлючИЗначение.Ключ, ФорматДата()), КлючИЗначение.Значение);
					Результат = Результат + ? (ПустаяСтрока(Результат), СтрокаОписания, Символы.ПС + СтрокаОписания);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ОписаниеТекущегоНалогаОтчета(СтрокиИндикатора, ЭтоНалог)
	
	ШаблонТекста = Нстр("ru = 'Не позднее %1'");

	Результат = "";
	
	Если СтрокиИндикатора.Количество() = 1 Тогда
		СвойстваЗадачи = СтрокиИндикатора[0];
		Результат = СтрШаблон(ШаблонТекста,  Формат(СвойстваЗадачи.Срок, ФорматДата()));
	ИначеЕсли СтрокиИндикатора.Количество() > 1 Тогда
		
		МинСрок = МаксДата;
		КолВоРазныхСроковТекущихЗадач = 0;
		СчетчикТекущихОтчетов = 0;
		НаименованиеЗадачиСМинСроком = "";
		Для каждого Индикатор Из СтрокиИндикатора Цикл
			Если ЭтоНалог И Индикатор.ЭтоТекущаяЗадача Тогда
				Если Индикатор.КУплатеТекущий > 0 Тогда
					МинСрок = Мин(МинСрок, Индикатор.Срок);
				КонецЕсли;
			ИначеЕсли Не ЭтоНалог И Индикатор.ЭтоТекущаяЗадача И Не Индикатор.ТекущийОтчетСдан Тогда
				СчетчикТекущихОтчетов = СчетчикТекущихОтчетов + 1;
				Если СчетчикТекущихОтчетов >= ЛимитСсылокИндикатора() Тогда
					Прервать;
				КонецЕсли;
				Если МинСрок <> Индикатор.Срок Тогда
					КолВоРазныхСроковТекущихЗадач = КолВоРазныхСроковТекущихЗадач + 1;
				КонецЕсли;
				Если МинСрок > Индикатор.Срок Тогда
					МинСрок = Мин(МинСрок, Индикатор.Срок);
					НаименованиеЗадачиСМинСроком = Индикатор.Наименование;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЭтоНалог И КолВоРазныхСроковТекущихЗадач > 1 Тогда
			ШаблонТекста = Нстр("ru = '%1 не позднее %2'");
			Результат = СтрШаблон(ШаблонТекста, НаименованиеЗадачиСМинСроком, Формат(МинСрок, ФорматДата()));
		Иначе
			Результат = СтрШаблон(ШаблонТекста, Формат(МинСрок, ФорматДата()));
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ОписаниеПросроченногоНалогаОтчета(СтрокиИндикатора, ЭтоНалог)
	
	Результат = "";
	
	Если ЭтоНалог Тогда
		
		Результат = НСтр("ru = 'Задолженность могла образоваться за один или несколько прошлых периодов'");
		
	Иначе
		
		ПоследнийСрок = МинДата;
		
		КолВоПросроченных = 0;
		
		Для каждого Индикатор Из СтрокиИндикатора Цикл
			Для каждого СтрокаОтчета Из Индикатор.ПросроченныеОтчеты Цикл
				ПоследнийСрок = Макс(ПоследнийСрок, СтрокаОтчета.Срок);
				КолВоПросроченных = КолВоПросроченных + 1;
			КонецЦикла;
		КонецЦикла;
		
		ШаблонТекста = Нстр("ru = 'С %1'");
		
		Сутки = 86400;
		Результат = СтрШаблон(ШаблонТекста, Формат(ПоследнийСрок + Сутки, ФорматДата())); 
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ОписаниеСсылкиТекущегоНалогаОтчета(СтрокаИндикатора, ЭтоНалог)
	
	НаименованиеСсылки = "";
	Если ЭтоНалог Тогда 
		НаименованиеСсылки = СтрокаИндикатора.Наименование;
	Иначе
		Если СтрокаИндикатора.ТекущийОтчетЕстьВБазе И ДатаНачалаПримененияЭДООтчетов >= СтрокаИндикатора.ПериодСобытия Тогда
			Подсказка = " " + Нстр("ru = '(Подготовлено)'");
		Иначе
			Подсказка = ?(ПустаяСтрока(СтрокаИндикатора.СтатусЭДОТекОтчета),"", " ("+СтрокаИндикатора.СтатусЭДОТекОтчета+")");
		КонецЕсли;
		НаименованиеСсылки = СтрокаИндикатора.Наименование + Подсказка;
	КонецЕсли;
	
	Возврат НаименованиеСсылки;
	
КонецФункции

&НаСервере
Функция ЗаменитьВНаименованииПериод(ИсхНаименование, НачалоПериода, КонецПериода)
	
	Результат = "";
	ВыражениеПоиска = Нстр("ru = ' за '");
	КонПоз = СтрНайти(ВРег(ИсхНаименование), ВРег(ВыражениеПоиска));
	Если КонПоз = 0 Тогда
		Результат = ИсхНаименование;
	Иначе
		Результат = Лев(ИсхНаименование, КонПоз - 1);
	КонецЕсли;
	
	Возврат Результат + ВыражениеПоиска + КалендарьБухгалтера.ПредставлениеПериодаСобытия(НачалоПериода, КонецПериода);
	
КонецФункции

&НаСервере
Функция СФормироватьПараметрыСсылки(ДанныеИндикатора, КодЗадачи, ЭтоНалог)
	
	ПараметрыКоманды                      = ВыполнениеЗадачБухгалтераКлиентСервер.НовыеПараметрыКомандЗадачи();
	ПараметрыКоманды.Задача               = ДанныеИндикатора.Владелец;
	ПараметрыКоманды.ИдентификаторЗадачи  = КодЗадачи;
	ПараметрыКоманды.Организация          = Организация;
	ПараметрыКоманды.Срок                 = ДанныеИндикатора.Срок;
	ПараметрыКоманды.Правило              = ДанныеИндикатора.Правило;
	ПараметрыКоманды.ИдентификаторПравила = ДанныеИндикатора.КодПравила;
	ПараметрыКоманды.ПериодСобытия        = ДанныеИндикатора.ПериодСобытия;
	ПараметрыКоманды.Периодичность        = ДанныеИндикатора.Периодичность;
	ПараметрыКоманды.Наименование         = ДанныеИндикатора.Наименование; 
	ПараметрыКоманды.Действие             = ?(ЭтоНалог, Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога, 
		Перечисления.ВидыДействийКалендаряБухгалтера.Отчет);
	
	ОписаниеДействия = ЗадачиБухгалтераКлиентСервер.ОписаниеДействия(ПараметрыКоманды);
	
	// Для того, чтобы помощники по УСН и ЕНВД открывались с возможностью переключить период.
	Если ОписаниеДействия.Свойство("ПараметрыФормы") И ОписаниеДействия.ПараметрыФормы.Свойство("ВызовИзСпискаЗадач") Тогда
		ОписаниеДействия.ПараметрыФормы.ВызовИзСпискаЗадач = Ложь;
	КонецЕсли;
	
	Возврат ОписаниеДействия;
	
КонецФункции 

&НаСервере
Процедура ДобавитьСтрокуССсылкой(Блок, Наименование, ПараметрыСсылки, СмещениеСч = Неопределено)
	
	Если СмещениеСч = Неопределено Тогда
		СмещениеСч = Строка(Блок.КолвоСтрок);
		Блок.КолвоСтрок = Блок.КолвоСтрок + 1;
	КонецЕсли;
	
	Блок.Вставить("Строка" + СмещениеСч, Наименование);
	Блок.Вставить("СтрокаПараметрыСсылки" + СмещениеСч, ПараметрыСсылки);
	Блок.Вставить("СтрокаВидимость" + СмещениеСч, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтроку1(Блок, Текст)
	
	Блок.Вставить("Строка1", Текст);
	Блок.Вставить("СтрокаВидимость1", Истина);
	Блок.КолвоСтрок = Блок.КолвоСтрок + 1;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСсылкиНаТекущиеНалогиОтчеты(Блок, ЭтоНалог, СтрокиИндикатора, КодЗадачи, ИмяЗадачи)
	
	Если ЭтоНалог Тогда
		
		Для каждого Индикатор Из СтрокиИндикатора Цикл
			Если Индикатор.КУплатеТекущий > 0 Тогда
				Если Обработки.МониторНалоговИОтчетности.ЭтоЗадачаЕжеквартальныхФиксированныхВзносовИП(КодЗадачи, Индикатор.КодПравила) Тогда
					Индикатор.ПериодСобытия = КонецКвартала(ТекущийДень);
				КонецЕсли;
				НаименованиеСсылки = ОписаниеСсылкиТекущегоНалогаОтчета(Индикатор, ЭтоНалог);
				ПараметрыСсылки = СФормироватьПараметрыСсылки(Индикатор, КодЗадачи, ЭтоНалог);
				ДобавитьСтрокуССсылкой(Блок, НаименованиеСсылки, ПараметрыСсылки);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		ТекущиеОтчеты = Новый Массив;
		СчетчикТекущихОтчетов = 0;
		Для каждого Индикатор Из СтрокиИндикатора Цикл
			
			Если Не Индикатор.ТекущийОтчетСдан И Индикатор.ЭтоТекущаяЗадача Тогда
				
				ПараметрыСсылки = СФормироватьПараметрыСсылки(Индикатор, КодЗадачи, ЭтоНалог);
				
				ПредставлениеСсылки = ОписаниеСсылкиТекущегоНалогаОтчета(Индикатор, ЭтоНалог);
				
				ПараметрыСсылки.Вставить("ПредставлениеСсылки", ПредставлениеСсылки);
				ПараметрыСсылки.Вставить("Срок", Индикатор.Срок);
				ПараметрыСсылки.Вставить("ИмяЗадачи", ИмяЗадачи);
				ПараметрыСсылки.Вставить("ЭтоТекущаяЗадача", Истина);
				
				Если СчетчикТекущихОтчетов < ЛимитСсылокИндикатора() Тогда
					ДобавитьСтрокуССсылкой(Блок, ПредставлениеСсылки, ПараметрыСсылки);
				Иначе
					ТекущиеОтчеты.Добавить(ПараметрыСсылки);
				КонецЕсли;
				
				СчетчикТекущихОтчетов = СчетчикТекущихОтчетов + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если ТекущиеОтчеты.Количество() > 0 Тогда
			НадписьТекущиеОтчеты = СтрШаблон(НСтр("ru = 'Еще (%1)'"), ТекущиеОтчеты.Количество());
			ДобавитьСтрокуССсылкой(Блок, НадписьТекущиеОтчеты, ТекущиеОтчеты);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#Область ФабрикаИндикаторов

&НаСервере
Функция СоздатьЭкземплярБлока(СтрокаЗадачи, СтрокиИндикатора, ЭтоНалог)
	
	Блок = Неопределено;
	Индикаторы = Новый Массив;
	Для каждого Задача Из СтрокиИндикатора Цикл
		Индикаторы.Добавить(Задача.Индикатор);
	КонецЦикла;
	Индикатор = Обработки.МониторНалоговИОтчетности.СамыйКритичныйИндикатор(Индикаторы);
	
	Если (ЭтоНалог И СтрокаЗадачи.ПоддерживаетсяНалог)
		Или Не ЭтоНалог Тогда
		
		Если Индикатор = Обработки.МониторНалоговИОтчетности.ЗеленыйИндикатор() Тогда
			Блок = ПрототипЗеленыйБлок(СтрокиИндикатора, ЭтоНалог, СтрокаЗадачи.КодЗадачи);
		ИначеЕсли Индикатор = Обработки.МониторНалоговИОтчетности.ЖелтыйИндикатор() Тогда
			Блок = ПрототипЖелтыйБлок(СтрокиИндикатора, ЭтоНалог, СтрокаЗадачи.КодЗадачи, СтрокаЗадачи.ИмяЗадачи);
		ИначеЕсли Индикатор = Обработки.МониторНалоговИОтчетности.КрасныйИндикатор() Тогда
			Блок = ПрототипКрасныйБлок(СтрокиИндикатора, ЭтоНалог, СтрокаЗадачи.КодЗадачи, СтрокаЗадачи.ИмяЗадачи);
		ИначеЕсли Индикатор = Обработки.МониторНалоговИОтчетности.Ненастроенный() Тогда
			Блок = ПрототипНенастроенныйБлок(СтрокиИндикатора, ЭтоНалог, СтрокаЗадачи);
		КонецЕсли;
		
	Иначе
		
		Если Индикатор = Обработки.МониторНалоговИОтчетности.Ненастроенный() Тогда
			Блок = ПрототипНенастроенныйБлок(СтрокиИндикатора, ЭтоНалог, СтрокаЗадачи);
		Иначе
			Блок = ПрототипСерыйБлок(СтрокаЗадачи, ЭтоНалог);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Блок;
	
КонецФункции

&НаСервере
Функция ПрототипНенастроенныйБлок(СтрокиИндикатора, ЭтоНалог, Задача)
	
	Блок = БазовыйБлок();
	Блок.ЦветФона = ЦветЖелтыйБлок;
	
	Если ЭтоНалог И Обработки.МониторНалоговИОтчетности.ЭтоЗадачаЕНВД(Задача.КодЗадачи) Тогда
		
		Блок.Строка0 = НСтр("ru = 'Не введено ни одного вида деятельности'");
		ТекстСтрока1 = Новый ФорматированнаяСтрока (Нстр("ru = 'Введите действующие '"), ШрифтСсылок);
		СсылкаСтрока1 = Новый ФорматированнаяСтрока(НСтр("ru = 'Виды деятельности'"), ШрифтСсылок,,, "e1cib/list/Справочник.ВидыДеятельностиЕНВД");
		Строка1 = Новый ФорматированнаяСтрока(ТекстСтрока1, СсылкаСтрока1);
		ДобавитьСтроку1(Блок, Строка1);
		Блок.ЦветФона = ЦветЖелтыйБлок;
		
		Отбор = Новый Структура;
		Отбор.Вставить("Владелец", Организация);
		ОписаниеДействия = Новый Структура;
		ОписаниеДействия.Вставить("ИмяФормы", "Справочник.ВидыДеятельностиЕНВД.ФормаСписка");
		ОписаниеДействия.Вставить("ПараметрыФормы", Новый Структура("Отбор", Отбор));
		Блок.Вставить("ПараметрыНавигационныхСсылок", ОписаниеДействия);
		
	ИначеЕсли ЭтоНалог И Задача.КодЗадачи = Обработки.МониторНалоговИОтчетности.КодЗадачиПатент() Тогда
		
		Блок.Строка0 = НСтр("ru = 'Не введено ни одного патента '");
		ТекстСтрока1 = Новый ФорматированнаяСтрока (Нстр("ru = 'Введите действующие '"), ШрифтСсылок);
		СсылкаСтрока1 = Новый ФорматированнаяСтрока(НСтр("ru = 'Патенты'"), ШрифтСсылок,,, "e1cib/list/Справочник.Патенты");
		Строка1 = Новый ФорматированнаяСтрока(ТекстСтрока1, СсылкаСтрока1);
		ДобавитьСтроку1(Блок, Строка1);
		
		ОписаниеДействия = Новый Структура;
		Отбор = Новый Структура;
		Отбор.Вставить("Владелец", Организация);
		ОписаниеДействия.Вставить("ИмяФормы", "Справочник.Патенты.ФормаСписка");
		ОписаниеДействия.Вставить("ПараметрыФормы",  Новый Структура("Отбор", Отбор));
		Блок.Вставить("ПараметрыНавигационныхСсылок", ОписаниеДействия);
		
	ИначеЕсли СтрокиИндикатора.Количество() > 0 Тогда
		
		ДанныеИндикатора = СтрокиИндикатора[0];
		
		Блок.Строка0 = Задача.ИмяЗадачи;
		ДобавитьСтроку1(Блок, ДанныеИндикатора.Наименование);
		
		ПараметрыСсылки = СФормироватьПараметрыСсылки(ДанныеИндикатора, Задача.КодЗадачи, ЭтоНалог);
		НадписьПросрочено = НСтр("ru = 'Выполнить задачу'");
		ДобавитьСтрокуССсылкой(Блок, НадписьПросрочено, ПараметрыСсылки);
		
	КонецЕсли;
	
	Возврат Блок;
	
КонецФункции

&НаСервере
Функция ПрототипЗеленыйБлок(СтрокиИндикатора, ЭтоНалог, КодЗадачи)
	
	Блок = БазовыйБлок();
	Блок.ЦветФона = ЦветЗеленыйБлок;
	
	Если СтрокиИндикатора.Количество() > 0 Тогда
		
		МинПериодСобытия = МаксДата;
		МинПериодичность = Перечисления.Периодичность.Год;
		ЭтоТекущаяЗадача = Ложь;
		Для каждого Индикатор Из СтрокиИндикатора Цикл
			Если Индикатор.ПериодСобытия < МинПериодСобытия Тогда
				МинПериодСобытия = Индикатор.ПериодСобытия;
				МинПериодичность = Индикатор.Периодичность;
				ЭтоТекущаяЗадача = Индикатор.ЭтоТекущаяЗадача
			КонецЕсли;
		КонецЦикла;
		
		Если ЭтоТекущаяЗадача Тогда
			ПериодПервойЗадачи = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(МинПериодичность, ДатаНачалаДеятельности);
		Иначе
			ПериодПервойЗадачи = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(МинПериодичность, ДатаНачалаДеятельности);
		КонецЕсли;
		
		ЭтоПерваяЗадача = (ПериодПервойЗадачи >= МинПериодСобытия);
		Если Не ЭтоПерваяЗадача Тогда
			Блок.Строка0 = ЗаголовокНалогаОтчета(Обработки.МониторНалоговИОтчетности.ЗеленыйИндикатор(), ЭтоНалог, СтрокиИндикатора);
		Иначе
			Блок.Строка0 = ЗаголовокНалогаОтчета(Неопределено, ЭтоНалог, СтрокиИндикатора);
		КонецЕсли;
		
		Строка1 = ОписаниеСледующегоНалогаОтчета(СтрокиИндикатора, ЭтоНалог, КодЗадачи, ЭтоПерваяЗадача);
		ДобавитьСтроку1(Блок, Строка1);
	Иначе
		Блок.Строка0 = "";
		Блок.ЦветФона = ЦветаСтиля.ЦветФонаБлоковИнформационнойПанели;
	КонецЕсли;

	Возврат Блок;
	
КонецФункции

&НаСервере
Функция ПрототипЖелтыйБлок(СтрокиИндикатора, ЭтоНалог, КодЗадачи, ИмяЗадачи)
	
	Блок = БазовыйБлок();
	Блок.ЦветФона = ЦветЖелтыйБлок;
	
	Если СтрокиИндикатора.Количество() = 0 Тогда
		Блок.Строка0 = ЗаголовокНалогаОтчета("Ошибка", ЭтоНалог, СтрокиИндикатора);
		Возврат Блок;
	КонецЕсли;
	
	Если ЭтоНалог Тогда
		
		Строка0 = ЗаголовокНалогаОтчета(Обработки.МониторНалоговИОтчетности.ЖелтыйИндикатор(), ЭтоНалог, СтрокиИндикатора);
		
		ИтогКУплатеТекущий = 0;
		Для каждого Индикатор Из СтрокиИндикатора Цикл
			ИтогКУплатеТекущий = ИтогКУплатеТекущий + Индикатор.КУплатеТекущий;
		КонецЦикла;
		
		Блок.Строка0 = ОтформатироватьСтрокуСуммы(Строка0, ИтогКУплатеТекущий);
		
		Строка1 = ОписаниеТекущегоНалогаОтчета(СтрокиИндикатора, ЭтоНалог);
		ДобавитьСтроку1(Блок, Строка1);
		
		ДобавитьСсылкиНаТекущиеНалогиОтчеты(Блок, ЭтоНалог, СтрокиИндикатора, КодЗадачи, ИмяЗадачи);
		
	Иначе
		
		Строка0 = ЗаголовокНалогаОтчета(Обработки.МониторНалоговИОтчетности.ЖелтыйИндикатор(), ЭтоНалог, СтрокиИндикатора);
		
		Блок.Строка0 = Строка0;
		
		Строка1 = ОписаниеТекущегоНалогаОтчета(СтрокиИндикатора, ЭтоНалог);
		ДобавитьСтроку1(Блок, Строка1);
		
		ДобавитьСсылкиНаТекущиеНалогиОтчеты(Блок, ЭтоНалог, СтрокиИндикатора, КодЗадачи, ИмяЗадачи);
		
	КонецЕсли;
	
	Возврат Блок;
	
КонецФункции

&НаСервере
Функция ПрототипКрасныйБлок(СтрокиИндикатора, ЭтоНалог, КодЗадачи, ИмяЗадачи)
	
	Блок = БазовыйБлок();
	Блок.ЦветФона = ЦветКрасныйБлок;
	
	Если СтрокиИндикатора.Количество() = 0 Тогда
		Блок.Строка0 = ЗаголовокНалогаОтчета("Ошибка", ЭтоНалог, СтрокиИндикатора);
		Возврат Блок;
	КонецЕсли;
	
	Если ЭтоНалог Тогда
		ИтогКУплатеТекущий = 0;
		ИтогКУплатеДолг =  0;
		
		Для каждого Индикатор Из СтрокиИндикатора Цикл
			ИтогКУплатеТекущий = ИтогКУплатеТекущий + Индикатор.КУплатеТекущий;
			ИтогКУплатеДолг = ИтогКУплатеДолг + Индикатор.КУплатеДолг;
		КонецЦикла;
		
		// Заголовок и описание.
		Если ИтогКУплатеТекущий > 0 Тогда
			Строка0 = ЗаголовокНалогаОтчета(Обработки.МониторНалоговИОтчетности.ЖелтыйИндикатор(), ЭтоНалог, СтрокиИндикатора);
			Строка0 = ОтформатироватьСтрокуСуммы(Строка0, ИтогКУплатеДолг + ИтогКУплатеТекущий);
			Строка1 = ОписаниеТекущегоНалогаОтчета(СтрокиИндикатора, ЭтоНалог);
		Иначе
			Строка0 = ЗаголовокНалогаОтчета(Обработки.МониторНалоговИОтчетности.КрасныйИндикатор(), ЭтоНалог, СтрокиИндикатора);
			Строка0 = ОтформатироватьСтрокуСуммы(Строка0, ИтогКУплатеДолг);
			Строка1 = ОписаниеПросроченногоНалогаОтчета(СтрокиИндикатора, ЭтоНалог);
		КонецЕсли;
		Блок.Строка0 = Строка0;
		ДобавитьСтроку1(Блок, Строка1);
		
		// Ссылка текущего платежа.
		Если ИтогКУплатеТекущий > 0 Тогда
			ДобавитьСсылкиНаТекущиеНалогиОтчеты(Блок, ЭтоНалог, СтрокиИндикатора, КодЗадачи, ИмяЗадачи);
		КонецЕсли;
		
		// Ссылка просроченного платежа.
		Если ИтогКУплатеТекущий = 0 Тогда
			
			ДанныеИндикатора = СтрокиИндикатора[0];
			
			Если Обработки.МониторНалоговИОтчетности.ЭтоЗадачаВзносовИП(КодЗадачи) Тогда
				КонецПериода = НачалоГода(ТекущийДень) - 1;
				НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(ДанныеИндикатора.Периодичность, КонецПериода);
			ИначеЕсли Не (ИтогКУплатеТекущий = 0 И ДанныеИндикатора.ЭтоТекущаяЗадача) Тогда
				ПериодСобытия = Мин(ТекущийДень, ДанныеИндикатора.ПериодСобытия);
				КонецПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(ДанныеИндикатора.Периодичность, ПериодСобытия) - 1;
				НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(ДанныеИндикатора.Периодичность, КонецПериода);
			Иначе
				КонецПериода  = ДанныеИндикатора.ПериодСобытия;
				НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(ДанныеИндикатора.Периодичность, КонецПериода);
			КонецЕсли;
			
			ДанныеИндикатора.ПериодСобытия = КонецПериода;
			ДанныеИндикатора.НачалоПериодаСобытия = НачалоПериода;
			
			ДанныеИндикатора.Наименование = ЗаменитьВНаименованииПериод(ДанныеИндикатора.Наименование, 
				ДанныеИндикатора.НачалоПериодаСобытия, ДанныеИндикатора.ПериодСобытия);
				
			ПараметрыСсылки = СФормироватьПараметрыСсылки(ДанныеИндикатора, КодЗадачи, ЭтоНалог);
			
			НадписьПросрочено = НСтр("ru = 'Погашение задолженности'");
			ДобавитьСтрокуССсылкой(Блок, НадписьПросрочено, ПараметрыСсылки);
			
		КонецЕсли;
		
	Иначе
		
		ЕстьТекущаяЗадача = Ложь;
		МинСрокТекущаяЗадача = МаксДата;
		Для каждого Индикатор Из СтрокиИндикатора Цикл 
			Если Индикатор.ЭтоТекущаяЗадача И Не Индикатор.ТекущийОтчетСдан Тогда
				МинСрокТекущаяЗадача = Мин(Индикатор.Срок, МинСрокТекущаяЗадача);
				ЕстьТекущаяЗадача = Истина;
			КонецЕсли;
		КонецЦикла;
		
		// Заголовок и описание.
		Если ЕстьТекущаяЗадача Тогда
			Строка0 = ЗаголовокНалогаОтчета(Обработки.МониторНалоговИОтчетности.ЖелтыйИндикатор(), ЭтоНалог, СтрокиИндикатора);
			Строка1 = ОписаниеТекущегоНалогаОтчета(СтрокиИндикатора, ЭтоНалог);
		Иначе
			Строка0 = ЗаголовокНалогаОтчета(Обработки.МониторНалоговИОтчетности.КрасныйИндикатор(), ЭтоНалог, СтрокиИндикатора);
			Строка1 = ОписаниеПросроченногоНалогаОтчета(СтрокиИндикатора, ЭтоНалог);
		КонецЕсли;
		Блок.Строка0 = Строка0;
		ДобавитьСтроку1(Блок, Строка1);
		
		// Ссылки текущих отчетов.
		ДобавитьСсылкиНаТекущиеНалогиОтчеты(Блок, ЭтоНалог, СтрокиИндикатора, КодЗадачи, ИмяЗадачи);
		
		// Ссылки просроченных отчетов.
		МассивПараметров = Новый Массив();
		Для каждого Индикатор Из СтрокиИндикатора Цикл
			Для Сч = 0 По Индикатор.ПросроченныеОтчеты.Количество() - 1 Цикл
				
				СтрокаПросрОтчета = Индикатор.ПросроченныеОтчеты[Сч];
				
				КонецПериода  = СтрокаПросрОтчета.ПериодСобытия;
				НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Индикатор.Периодичность, КонецПериода);
				ПредставлениеСсылки = ЗаменитьВНаименованииПериод(Индикатор.Наименование, НачалоПериода, КонецПериода);
					
				Если Не ПустаяСтрока(СтрокаПросрОтчета.Статус) Тогда
					ПредставлениеСсылки  = ПредставлениеСсылки +" (" + СтрокаПросрОтчета.Статус + ")";
				КонецЕсли;
				
				ДанныеИндикатора = Новый Структура;
				ДанныеИндикатора.Вставить("Владелец", Индикатор.Владелец);
				ДанныеИндикатора.Вставить("КодПравила", Индикатор.КодПравила);
				ДанныеИндикатора.Вставить("ПериодСобытия", КонецПериода);
				ДанныеИндикатора.Вставить("Наименование", ПредставлениеСсылки);
				ДанныеИндикатора.Вставить("Срок", СтрокаПросрОтчета.Срок);
				ДанныеИндикатора.Вставить("Правило", Индикатор.Правило);
				ДанныеИндикатора.Вставить("Периодичность", Индикатор.Периодичность);
				
				ПараметрыСсылки = СформироватьПараметрыСсылки(ДанныеИндикатора, КодЗадачи, ЭтоНалог);
				ПараметрыСсылки.Вставить("ПредставлениеСсылки", ПредставлениеСсылки);
				ПараметрыСсылки.Вставить("Срок", СтрокаПросрОтчета.Срок);
				ПараметрыСсылки.Вставить("ИмяЗадачи", ИмяЗадачи);
				ПараметрыСсылки.Вставить("ЭтоТекущаяЗадача", Ложь);
				МассивПараметров.Добавить(ПараметрыСсылки);
				
			КонецЦикла;
		КонецЦикла;
		
		СортироватьПоВозрастанию(МассивПараметров, "Срок");
		
		НадписьПросрочено = СтрШаблон(НСтр("ru = 'Просроченные отчеты (%1)'"), МассивПараметров.Количество());
		Если МассивПараметров.Количество() <= 2 И Не ЕстьТекущаяЗадача Тогда
			Пока МассивПараметров.Количество() > 0 Цикл
				ПоследнийПросроченный = ВытащитьИзСтека(МассивПараметров);
				ДобавитьСтрокуССсылкой(Блок, ПоследнийПросроченный.ПредставлениеСсылки, ПоследнийПросроченный);
			КонецЦикла;
		ИначеЕсли МассивПараметров.Количество() > 2 И Не ЕстьТекущаяЗадача Тогда
			ПоследнийПросроченный = МассивПараметров[МассивПараметров.ВГраница()];
			ДобавитьСтрокуССсылкой(Блок, ПоследнийПросроченный.ПредставлениеСсылки, ПоследнийПросроченный);
			ДобавитьСтрокуССсылкой(Блок, НадписьПросрочено, МассивПараметров);
		Иначе
			ДобавитьСтрокуССсылкой(Блок, НадписьПросрочено, МассивПараметров);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Блок;
	
КонецФункции

&НаСервере
Функция ПрототипСерыйБлок(СтрокаЗадачи, ЭтоНалог)
	
	Блок = БазовыйБлок();
	
	Строка0 = ?(ЭтоНалог, Нстр("ru = 'Оплата налогов'"), Нстр("ru = 'Сдача отчетности'"));
		
	Строка0 = Новый ФорматированнаяСтрока(Строка0, ШрифтСсылок);
	СтрокаСсылка = Новый ФорматированнаяСтрока(Строка0, ШрифтЗаголовков,,, "e1cib/command/ОбщаяКоманда.СписокЗадач");
	Блок.Строка0 = СтрокаСсылка;
	
	Если СтрокаЗадачи.КодЗадачи = Обработки.МониторНалоговИОтчетности.КодЗадачиПатент() Тогда
		Правила = Справочники.Патенты.ПолучитьПатентыОрганизации(Организация, ТекущийДень);
	Иначе
		Правила = ?(ЭтоНалог, СтрокаЗадачи.ПравилоНалог, СтрокаЗадачи.ПравилоОтчет);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Организация,Правило", Организация, Правила);
	ОписаниеДействия = Новый Структура;
	ОписаниеДействия.Вставить("ИмяФормы", "ОбщаяФорма.СписокЗадач");
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Блок.Вставить("ПараметрыНавигационныхСсылок", ОписаниеДействия);
	
	Возврат Блок;
	
КонецФункции

&НаСервере
Функция БазовыйБлок()
	
	Свойства = Новый Структура;
	Свойства.Вставить("Доступность", Истина);
	Свойства.Вставить("ЦветФона", ЦветСерыйБлок);
	Свойства.Вставить("Строка0", Новый ФорматированнаяСтрока(""));
	Свойства.Вставить("СтрокаВидимость0", Истина);
	Свойства.Вставить("КолвоСтрок", 1);
	
	Возврат Свойства;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ФоновоеФормирование

&НаКлиенте
Процедура ЗапуститьОбновление()
	
	Если Не ФоновыеЗаданияАктивны(ИдентификаторЗадания, ИдентификаторЗаданияАктуализации) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_НачатьФормированиеМонитора",
			БухгалтерскиеОтчетыКлиент.ИнтервалЗапускаФормированияОтчетаПриОткрытии(), Истина);
	КонецЕсли;
	
КонецПРоцедуры

&НаКлиенте
Процедура Подключаемый_НачатьФормированиеМонитора()
	НачатьФормированиеМонитора();
КонецПроцедуры

&НаКлиенте
Процедура НачатьФормированиеМонитора(ПроверитьАктуальность = Истина)
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Актуализация.Видимость = Ложь;
	
	Результат = ВыполнитьВФоне();

	ПараметрыОжидания     = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗавершитьФормированиеМонитора", ЭтотОбъект, ПроверитьАктуальность);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, ОповещениеОЗавершении, ПараметрыОжидания);

КонецПроцедуры

&НаСервере
Процедура ПереключитьВРежимОжидания(ВключитьОжидание)
	
	Элементы.Ожидание.Видимость = ВключитьОжидание;
	Элементы.ДанныеМонитора.Видимость = Не ВключитьОжидание;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Элементы.ЖдатьТекст.Заголовок = НСтр("ru = 'Пожалуйста, подождите…'");
	Иначе
		Элементы.ЖдатьТекст.Заголовок = НСтр("ru = 'Укажите организацию для формирования монитора.'");
	КонецЕсли;
	
КонецПРоцедуры

&НаСервереБезКонтекста
Функция ФоновыеЗаданияАктивны(знач ИдентификаторЗадания, знач ИдентификаторЗаданияАктуализации)
	
	ФоновоеЗаданиеМонитора = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	ФоновоеЗаданиеАктуализации = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗаданияАктуализации);
	
	Если (ФоновоеЗаданиеМонитора <> Неопределено И ФоновоеЗаданиеМонитора.Состояние = СостояниеФоновогоЗадания.Активно) 
		Или (ФоновоеЗаданиеАктуализации <> Неопределено И ФоновоеЗаданиеАктуализации.Состояние = СостояниеФоновогоЗадания.Активно)  Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ВыполнитьВФоне()
	
	ПереключитьВРежимОжидания(Истина);
	
	ТекущийДень = КонецДня(ТекущаяДатаСеанса());
	
	НаименованиеЗадания = НСтр("ru = 'Обновление монитора'");
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Организация", Организация);
	ПараметрыЗадания.Вставить("ТекущийДень", ТекущийДень);
	ПараметрыЗадания.Вставить("ОтсутствуютПатенты", ОтсутствуютПатенты);
	ПараметрыЗадания.Вставить("ОтсутствуютВидыДеятельностиЕНВД", ОтсутствуютВидыДеятельностиЕНВД);
	ПараметрыЗадания.Вставить("ДатаНачалаПримененияЭДООтчетов", ДатаНачалаПримененияЭДООтчетов);
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.ОжидатьЗавершение = 0;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("Обработки.МониторНалоговИОтчетности.СФормироватьПоказателиМонитораВФоне", 
		ПараметрыЗадания, ПараметрыВыполненияВФоне);
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьФормированиеМонитора(Результат, ПроверитьАктуальность) Экспорт
	
	АдресРезультата = Результат.АдресРезультата;
	РазместитьВИнтерфейсе();
	АдресРезультата = Неопределено;
	
	Если ПроверитьАктуальность Тогда
		ПодключитьПроверкуАктуальности();
	КонецЕсли;
	
	Если НЕ РазрешенУчетРегулярнойДеятельности И ВсеЗадачиВыполнены Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПоказатьПриглашениеПознакомитьсяСПриложением", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаАктуальности 

&НаКлиенте
Процедура ПодключитьПроверкуАктуальности()
	
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьАктуальность", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьАктуальность()
	
	ЗаданиеАктуализации = ЗакрытиеМесяцаВызовСервера.НайтиФоновоеЗаданиеАктуализацииПоОрганизации(
		Организация, ИдентификаторЗаданияАктуализации); 
	
	Если ЗаданиеАктуализации = Неопределено Или Не ЗначениеЗаполнено(ЗаданиеАктуализации.УникальныйИдентификатор) Тогда
		ПроверитьАктуальностьДанных();
	Иначе
		
		Если ИдентификаторЗаданияАктуализации <> ЗаданиеАктуализации.УникальныйИдентификатор Тогда
			// Задание запущено в другой форме
			ЗаданиеЗапущеноВДругойФорме = Истина;
			ИдентификаторЗаданияАктуализации = ЗаданиеАктуализации.УникальныйИдентификатор;
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияАктуализации);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеАктуализации",
				ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал,
				Истина);
			Элементы.ИдетАктуализация.Видимость = Истина;
		Иначе
			ЗаданиеЗапущеноВДругойФорме = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьАктуальностьДанных()
	
	Элементы.ИдетАктуализация.Видимость = Ложь;
	Элементы.ИдетПроверкаАктуальности.Видимость = Истина;
	Элементы.ТребуетсяАктуализация.Видимость    = Ложь;

	ОтключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиАктуальности");
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации");
	
	ИдентификаторЗаданияПроверкиАктуализации = Неопределено;
	ИдентификаторЗаданияАктуализации = Неопределено;
	
	УИДЗамера = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Ложь, "АктуализацияДанныхТребуетсяАктуализацияЗаПериод");
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("Организация",                  Организация);
	ПараметрыПроверки.Вставить("Период",                       ТекущийДень);
	ПараметрыПроверки.Вставить("ИдентификаторЗадания",         ИдентификаторЗаданияПроверкиАктуализации);
	ПараметрыПроверки.Вставить("УИДЗамера",                    УИДЗамера);
	ПараметрыПроверки.Вставить("УникальныйИдентификаторФормы", ЭтотОбъект.УникальныйИдентификатор);
	ПараметрыПроверки.Вставить("ПроверятьКонстантуАктуальностиДанныхУчета", Ложь);
	
	РезультатВыполнения = ЗакрытиеМесяцаВызовСервера.ПроверитьАктуальность(ПараметрыПроверки);
	
	АдресХранилищаАктуализации = РезультатВыполнения.АдресХранилища;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ИдентификаторЗаданияПроверкиАктуализации = Неопределено;
		ОбработатьРезультатПроверкиАктуальности();
	Иначе
		ИдентификаторЗаданияПроверкиАктуализации = РезультатВыполнения.ИдентификаторЗадания;
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияАктуализации);
		ПодключитьОбработчикОжидания(
			"Подключаемый_ОбработатьРезультатПроверкиАктуальности", 
			ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал,
			Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиАктуальности()
	
	Если ЗакрытиеМесяцаВызовСервера.ЗаданиеВыполнено(ИдентификаторЗаданияПроверкиАктуализации) Тогда
		ИдентификаторЗаданияПроверкиАктуализации = Неопределено;
		ОбработатьРезультатПроверкиАктуальности();
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияАктуализации);
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиАктуальности",
			ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеАктуализации()
	
	Если ЗакрытиеМесяцаВызовСервера.ЗаданиеВыполнено(ИдентификаторЗаданияАктуализации) Тогда
		ОбработатьРезультатАктуализации();
		ИдентификаторЗаданияАктуализации = Неопределено;
	Иначе
		ОбновитьПроцентПрогресса();
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияАктуализации);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации",
			ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатПроверкиАктуальности()
	
	ОтключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиАктуальности");
	
	РезультатПроверки = ПолучитьИзВременногоХранилища(АдресХранилищаАктуализации);
	
	Если РезультатПроверки.УИДЗамера <> Неопределено Тогда
		ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(РезультатПроверки.УИДЗамера);
	КонецЕсли;
	
	Если НЕ РезультатПроверки.ТребуетсяАктуализация Тогда
		ТребуетсяАктуализация = Ложь;
		// Монитор вызывает различные помощники, в которых используется собственная проверка актуальности, период  которой 
		// может не совпадать с монитором, поэтому нужно обрабатывать оповещения только из самого монитора. 
		// Для этого добавляем параметр ВызовИзМонитора.
		Оповестить("АктуализацияЗавершенаУспешно", Новый Структура("Организация, ВызовИзМонитора", Организация, Истина));
	Иначе
		ПараметрыОповещения = Новый Структура("Организация, ДатаАктуальности", 
			Организация, РезультатПроверки.ДатаАктуальности);
		Оповестить("ТребуетсяАктуализация", ПараметрыОповещения);
		ТребуетсяАктуализация = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатАктуализации()
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации");
	
	Если ЗаданиеЗапущеноВДругойФорме Тогда
		ПроверитьАктуальностьДанных();
		Возврат;
	КонецЕсли;
	
	РезультатАктуализации = ПолучитьИзВременногоХранилища(АдресХранилищаАктуализации);
	
	Если РезультатАктуализации.Выполнено Тогда
		ПараметрыОповещения = Новый Структура("Организация", Организация);
		Оповестить("АктуализацияЗавершенаУспешно", ПараметрыОповещения);
		НачатьФормированиеМонитора(Ложь);
	Иначе
		ЗакрытиеМесяцаКлиент.ПоказатьОшибкиАктуализации(ЭтотОбъект, РезультатАктуализации);
		Оповестить("АктуализацияОтменена", Новый Структура("Организация", Организация));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АктуализироватьДанные()
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации");
	
	ОтобразитьСостояниеАктуализации();
	
	ПараметрыАктуализации = ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыАктуализации();
	ПараметрыАктуализации.Организация                  = Организация;
	ПараметрыАктуализации.Период                       = ТекущийДень;
	ПараметрыАктуализации.ИдентификаторЗадания         = ИдентификаторЗаданияАктуализации;
	ПараметрыАктуализации.УникальныйИдентификаторФормы = УникальныйИдентификатор;

	РезультатВыполнения = ЗакрытиеМесяцаВызовСервера.АктуализироватьДанные(ПараметрыАктуализации);
	
	АдресХранилищаАктуализации = РезультатВыполнения.АдресХранилища;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ОбработатьРезультатАктуализации();
		ИдентификаторЗаданияАктуализации = Неопределено;
	Иначе
		ИдентификаторЗаданияАктуализации = РезультатВыполнения.ИдентификаторЗадания;
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияАктуализации);
		ПодключитьОбработчикОжидания(
			"Подключаемый_ПроверитьВыполнениеАктуализации",
			ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал,
			Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьСостояниеАктуализации(ВыполняемоеЗаданиеАктуализации = Неопределено) 
	
	ИдетАктуализация = ВыполняемоеЗаданиеАктуализации = Неопределено;
	
	Если НЕ ИдетАктуализация Тогда
		
		// Актуализация выполняется в другом отчете или другим пользователем.
		Если ПустаяСтрока(ВыполняемоеЗаданиеАктуализации.УникальныйИдентификатор) Тогда
			// Актуализация выполняется другим пользователем в файловом режиме.
			ТекстПриАктуализации = НСтр("ru = 'Актуализация данных, запущенная другим пользователем, еще не закончилась. Данные для расчета могут быть неактуальны.'");
		ИначеЕсли ВыполняемоеЗаданиеАктуализации.Пользователь <> ПользователиКлиентСервер.ТекущийПользователь() Тогда 
			// Актуализация выполняется другим пользователем в клиент-серверном режиме.
			ТекстПриАктуализации = СтрШаблон(НСтр("ru = 'Идет актуализация данных пользователем %1. Данные для расчета могут быть неактуальны.'"),
				ВыполняемоеЗаданиеАктуализации.Пользователь);
		Иначе
			// Актуализация выполняется текущим пользователем в другом отчете.
			ТекстПриАктуализации = НСтр("ru = 'Актуализация данных, запущенная в другом отчете, еще не закончилась. Данные для расчета могут быть неактуальны.'");
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ИдетАктуализация.Видимость = Истина;
	Элементы.ИдетПроверкаАктуальности.Видимость = Ложь;
	Элементы.ТребуетсяАктуализация.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если (ИмяСобытия = "АктуализацияЗавершенаУспешно"
		И Параметр.Свойство("Организация")
		И Организация = Параметр.Организация
		И Параметр.Свойство("ВызовИзМонитора")
		И Параметр.ВызовИзМонитора) Тогда
		
		ОтключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиАктуальности");
		ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации");
		Элементы.Актуализация.Видимость = Ложь;
		ДатаАктуальности = МаксДата;
		
	ИначеЕсли (ИмяСобытия = "ТребуетсяАктуализация" Или ИмяСобытия = "АктуализацияОтменена")
		И (Параметр.Свойство("Организация")
		И Организация = Параметр.Организация 
		И Параметр.Свойство("ДатаАктуальности")) Тогда
		
		ДатаАктуальности = Параметр.ДатаАктуальности;
		
		Элементы.Актуализация.Видимость     = Истина;
		Элементы.ИдетАктуализация.Видимость = Ложь;
		Элементы.ИдетПроверкаАктуальности.Видимость = Ложь;
		Элементы.ТребуетсяАктуализация.Видимость    = Истина;
		
		МассивПодстрок = Новый Массив();
		ТекстДанныеУчетаНеАктуальны = НСтр("ru='Данные учета неактуальны с '");
		МассивПодстрок.Добавить(Новый ФорматированнаяСтрока(ТекстДанныеУчетаНеАктуальны));
		МассивПодстрок.Добавить(Новый ФорматированнаяСтрока(Формат(ДатаАктуальности, "ДЛФ=D"), Новый Шрифт(,, Истина)));
		МассивПодстрок.Добавить(Новый ФорматированнаяСтрока("."));
		
		Если АктуализацияВозможна Тогда
			Элементы.Актуализировать.Видимость = ЕстьПравоНаАктуализацию;
		Иначе
			МассивПодстрок.Добавить(Новый ФорматированнаяСтрока(" " + НСтр("ru='Рекомендуется выполнить '")));
			МассивПодстрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='закрытие месяца'"),,,, "e1cib/app/Обработка.ЗакрытиеМесяца"));
			МассивПодстрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = ' и сформировать монитор повторно.'")));
			Элементы.Актуализировать.Видимость = Ложь;
		КонецЕсли;
		
		Элементы.ДекорацияАктуальность.Заголовок = Новый ФорматированнаяСтрока(МассивПодстрок);
		
	ИначеЕсли ИмяСобытия = "АктуализацияОтменена" Тогда
		
		Элементы.Актуализация.Видимость     = Истина;
		Элементы.ИдетАктуализация.Видимость = Ложь;
		Элементы.ИдетПроверкаАктуальности.Видимость = Ложь;
		Элементы.ТребуетсяАктуализация.Видимость    = Истина;
		
	ИначеЕсли ИмяСобытия = "ИзменениеУчетнойПолитики" Тогда
		
		Если Параметр = Организация Тогда
			ЗапуститьОбновление();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_Организации" Тогда
		
		Если Источник = Организация Тогда
			ОрганизацияПредставление = Организация;
			УстановитьПараметрыЗависимыеОтОрганизации();
			ЗапуститьОбновление();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПроцентПрогресса()
	
	Прогресс = ЗакрытиеМесяцаВызовСервера.ПрочитатьПрогресс(ИдентификаторЗаданияАктуализации);
	
	Если ТипЗнч(Прогресс) = Тип("Структура") И Прогресс.Свойство("Процент") Тогда
		Процент = Мин(Прогресс.Процент, 99);
		ПрогрессорАктуализации = Строка(Процент) + "%.";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСсылкуНаПереходВЗакрытиеМесяца(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ПараметрыАктуализации = ЗакрытиеМесяцаКлиентСервер.НовыйПараметрыАктуализацииОтчета();
	ПараметрыАктуализации.Организация = Организация;
	ПараметрыАктуализации.ДатаАктуальности = ДатаАктуальности;
	ПараметрыАктуализации.ДатаОкончанияАктуализации = ТекущийДень;
	
	ЗакрытиеМесяцаКлиент.ТекстПриНеобходимостиАктуализацииОбработкаНавигационнойСсылки(
		НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка, ЭтотОбъект, ПараметрыАктуализации);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеМесяцаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "СформироватьОтчет" Тогда
		
		БухгалтерскийУчетКлиентПереопределяемый.СкрытьПанельАктуализации(ЭтотОбъект);
		Активизировать();
		ЗапуститьОбновление();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьПараметрыЗависимыеОтОрганизации()
	
	АктуализацияВозможна = Обработки.ЗакрытиеМесяца.АктуализацияВозможна(Организация);
	
	// Даты начала ведения деятельности
	
	ДатаНачалаИспользованияЭДО     = ИнтерфейсыВзаимодействияБРОВызовСервера.ДатаПодключения1СОтчетности(Организация);
	ДатаНачалаПримененияЭДООтчетов = ?(ДатаНачалаИспользованияЭДО = Неопределено, Дата("29991231"), КонецМесяца(ДатаНачалаИспользованияЭДО) + 1);
	ДатаНачалаДеятельности         = КалендарьБухгалтера.ДатаНачалаДеятельности(Организация);
	
	// Настройки системы налогообложения.
	
	ОтсутствуютВидыДеятельностиЕНВД = Ложь;
	Если УчетнаяПолитика.ПлательщикЕНВД(Организация, ТекущийДень) Тогда
	
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВидыДеятельностиЕНВД.Ссылка
		|ИЗ
		|	Справочник.ВидыДеятельностиЕНВД КАК ВидыДеятельностиЕНВД
		|ГДЕ
		|	ВидыДеятельностиЕНВД.Владелец = &Владелец
		|	И (ВидыДеятельностиЕНВД.ДатаПрекращения = ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ ВидыДеятельностиЕНВД.ДатаПрекращения >= &ДатаПрекращения)
		|	И ВидыДеятельностиЕНВД.ПометкаУдаления = ЛОЖЬ");
		Запрос.УстановитьПараметр("Владелец", Организация);
		Запрос.УстановитьПараметр("ДатаПрекращения", ТекущийДень);
		
		Результат = Запрос.Выполнить();
		ОтсутствуютВидыДеятельностиЕНВД = Результат.Пустой();
		
	КонецЕсли;
	
	ОтсутствуютПатенты = Ложь;
	Если Не ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация) 
		И УчетнаяПолитика.ПрименяетсяУСНПатент(Организация, ТекущийДень) Тогда
		
		ОтсутствуютПатенты = (Справочники.Патенты.ПолучитьПатентыОрганизации(Организация, ТекущийДень).Количество() = 0);
		
	КонецЕсли;
	
	// Параметры получаемые при формировании монитора
	
	ВсеЗадачиВыполнены = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСсылкуНаНалогОтчет(Элемент, АдресХранилища)
	
	СтрокиСсылок = ПолучитьИзВременногоХранилища(АдресХранилища);
	ОписаниеДействия = СтрокиСсылок[Элемент.Имя];
	
	Если ОписаниеДействия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ОписаниеДействия) = Тип("Структура") Тогда
		ВыполнениеЗадачБухгалтераКлиент.ВыполнитьДействие(ОписаниеДействия);
	ИначеЕсли ТипЗнч(ОписаниеДействия) = Тип("Массив") Тогда
		ОткрытьФорму("Обработка.МониторНалоговИОтчетности.Форма.ФормаНесданныхОтчетов", 
			Новый Структура("ПараметрыСсылок", ОписаниеДействия), ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВытащитьИзСтека(Массив)
	
	ПоследнийЭлемент = Массив[Массив.ВГраница()];
	Массив.Удалить(Массив.ВГраница());
	
	Возврат ПоследнийЭлемент;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СортироватьПоВозрастанию(Массив, Столбец)
	// Сортируем  по алгоритму insertion sort, т.к. идеально подходит для маленьких массивов (не создает промежуточные массивы).
	Для ВнешнийСчетчик = 1 По Массив.ВГраница() Цикл
		СортируемаяСтрока = Массив[ВнешнийСчетчик];
		ВнутреннийСчетчик = ВнешнийСчетчик - 1;
		Пока ВнутреннийСчетчик >= 0 И Массив[ВнутреннийСчетчик][Столбец] > СортируемаяСтрока[Столбец] Цикл
			Массив[ВнутреннийСчетчик + 1] = Массив[ВнутреннийСчетчик];
			ВнутреннийСчетчик = ВнутреннийСчетчик - 1;
		КонецЦикла;
		Массив[ВнутреннийСчетчик + 1] = СортируемаяСтрока;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеМонитора()
	
	Если ПолучитьФункциональнуюОпцию("ИнтерфейсТаксиПростой") Тогда
		Заголовок = НСтр("ru='Налоги'");
	КонецЕсли;
	
	АдресСсылокНадписей = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	АдресНавигационныхСсылок = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	КорректныйПериод = ОбщегоНазначенияБПСобытия.КорректныйПериодВводаДокументов();
	МаксДата = ДобавитьМесяц(КорректныйПериод.КонецКорректногоПериода, 24);
	МинДата = ДобавитьМесяц(КорректныйПериод.НачалоКорректногоПериода, - 24);
	
	ЦветСерыйБлок   = ЦветаСтиля.ЦветМонитораЗадачаНеПоддерживается;
	ЦветЗеленыйБлок = ЦветаСтиля.ЦветМонитораВсеВыполнено;
	ЦветЖелтыйБлок  = ЦветаСтиля.ЦветМонитораПораВыполнятьЗадачу;
	ЦветКрасныйБлок = ЦветаСтиля.ЦветМонитораЗадачаПросрочена;
	ШрифтТекста     = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,, 11);
	ШрифтСсылок     = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,, 11);
	ШрифтЗаголовков = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,, 14);
	
	ТекущееЧислоРядов = 6;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмяРяд()
	Возврат "Ряд";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяСтрока()
	Возврат "Строка";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяГруппаКонтейнер()
	Возврат "ГруппаКонтейнер";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяКонтейнер()
	Возврат "Контейнер";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ФорматДата()
	Возврат "ДФ='d MMMM yyyy ''г.'''";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораОрганизации(Форма, ДоступныеОрганизации)
	
	Элементы = Форма.Элементы;

	ПараметрВыбораОтборПоОрганизации     = Новый ПараметрВыбора("Отбор.Ссылка", ДоступныеОрганизации);
	ПараметрыВыбораОрганизации           = Новый Массив();
	ПараметрыВыбораОрганизации.Добавить(ПараметрВыбораОтборПоОрганизации);
	Элементы.Организация.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораОрганизации);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЛимитСсылокИндикатора()
	
	Возврат 5;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОтформатироватьСтрокуСуммы(ИсходнаяСтрока, Сумма)
	
	Если Сумма = Цел(Сумма) Тогда
		ФорматСуммы  ="";
	Иначе
		ФорматСуммы = "ЧДЦ=2";
	КонецЕсли;
	
	Возврат СтрШаблон(ИсходнаяСтрока, Формат(Сумма, ФорматСуммы));
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПоказатьПриглашениеПознакомитьсяСПриложением()
	
	ОписаниеСистемыНавигации = ?(ПолучитьФункциональнуюОпциюФормы("ИнтерфейсТаксиПростой"),
		НСтр("ru='Воспользуйтесь меню в верхней части экрана.'"),
		НСтр("ru='Воспользуйтесь меню в левой части экрана.'"));
	
	ТекстПредупреждения = Новый ФорматированнаяСтрока(
		Новый ФорматированнаяСтрока(НСтр("ru='Поздравляем!'"), 
			Новый Шрифт(, 12, Истина)),
		НСтр("ru='
		|На сегодняшний день вы сдали всю отчетность и уплатили все налоги.
		|
		|Познакомьтесь в демо-режиме с другими удобными функциями приложения, например:
		| • Выпишите счет на оплату вашему покупателю;
		| • Создайте платежное поручение для вашего поставщика;
		| • Оформите накладную на товары.
		|'"),
		ОписаниеСистемыНавигации,
		Символы.ПС);
	
	ПоказатьПредупреждение(, ТекстПредупреждения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьОтключениеРекомендацииПоОбновлению()
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ВРег("МониторНалоговИОтчетности"), ВРег("РекомендацияПоОбновлению"), Ложь);
	
КонецПроцедуры

#КонецОбласти
