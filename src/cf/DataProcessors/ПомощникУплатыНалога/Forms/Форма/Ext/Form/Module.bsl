#Область ОбъявлениеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ПараметрыОбработчикаОжиданияАктуализации;

&НаКлиенте
Перем ФормаДлительнойОперации;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.Организация = Параметры.Организация;
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СообщениеТребуютсяРеквизиты = ПроверкаРеквизитовОрганизации.СтрокаСообщенияНеЗаполненыРеквизитыДляОтчетности(Объект.Организация);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры,
		"ПериодСобытия, РегистрацияВНалоговомОргане, Описание, Срок, ЕстьИнформацияНаИТС, ИдентификаторЗадачи");
	
	Если ТипЗнч(Параметры.Правило) = Тип("СправочникСсылка.Патенты") 
		ИЛИ Параметры.Правило.Действие = Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога Тогда
		Правило = Параметры.Правило;
		// Для уплаты патента особым образом определяется назначение платежа
		Если ТипЗнч(Параметры.Правило) = Тип("СправочникСсылка.Патенты") Тогда
			Описание = ОписаниеДляУплатыПатента();
		КонецЕсли;
	Иначе
		Правило = Обработки.ПомощникУплатыНалога.ПравилоУплатыПоПравилуОтчета(Параметры.Правило, Объект.Организация, ПериодСобытия);
	КонецЕсли;
	
	ПолноеИмяПравила = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПолноеИмяПравила(Правило);
	
	ПроверитьРеквизитыОрганизацииДляОтчетности();
	
	СпособОплаты = ВыполнениеЗадачБухгалтера.СпособУплатыНалогаВзноса(Объект.Организация);
	
	ЕстьПравоНаДОсКО     = ДокументооборотСКОВызовСервера.ЕстьПравоНаДОсКО(Ложь);
	АктуализацияВозможна = Обработки.ЗакрытиеМесяца.АктуализацияВозможна(Объект.Организация);
	ЭтоНулеваяОтчетность = НЕ ТарификацияБПВызовСервераПовтИсп.РазрешенУчетРегулярнойДеятельности()
		И (ИдентификаторЗадачи = "НалогНаПрибыль" ИЛИ ИдентификаторЗадачи = "НДФЛ_Предприниматель");
		
	УстановитьЗаголовокФормы();
	
	Элементы.СтраницыСобытий.ТекущаяСтраница = Элементы.СтраницаСобытийПустая;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.СтраницыСобытий.ТекущаяСтраница = Элементы.СтраницаСобытийПустая;
	
	СоставРазделов = Новый Структура("РасчетУплата, Сверка", Истина, ЕстьПравоНаДОсКО);
	Результат = ПолучитьДанныеНаСервере(СоставРазделов);
	
	Если Результат.ЗаданиеВыполнено Тогда
		ЗагрузитьРезультат();
		ПодключитьПроверкуАктуальности();
	Иначе
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища       = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания(
			"Подключаемый_ПроверитьВыполнениеЗаданияПриОткрытии", 
			ПараметрыОбработчикаОжидания.ТекущийИнтервал,
			Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если (ИмяСобытия = "АктуализацияЗавершенаУспешно"
		ИЛИ ИмяСобытия = "АктуализацияОтменена") 
		И Параметр.Свойство("Организация")
		И Объект.Организация = Параметр.Организация Тогда
		
		ОтключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиАктуальности");
		ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации");
		Элементы.Актуализация.Видимость = Ложь;
		
	ИначеЕсли ИмяСобытия = "ТребуетсяАктуализация"
		И Параметр.Свойство("Организация")
		И Объект.Организация = Параметр.Организация 
		И Параметр.Свойство("ДатаАктуальности") Тогда
		
		Элементы.Актуализация.Видимость     = Истина;
		Элементы.ИдетАктуализация.Видимость = Ложь;
		Элементы.ИдетПроверкаАктуальности.Видимость = Ложь;
		Элементы.ТребуетсяАктуализация.Видимость    = Истина;
		
		Элементы.ДекорацияАктуальность.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Данные учета неактуальны с %1.'"), Формат(Параметр.ДатаАктуальности, "ДФ=dd.MM.yyyy"));
		
	ИначеЕсли ИмяСобытия = "Запись_Организации"
		И Объект.Организация = Источник Тогда
		
		ПроверитьРеквизитыОрганизацииДляОтчетности();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ РеквизитыОрганизацииЗаполнены Тогда
		НезаполненныеРеквизиты = ПолучитьИзВременногоХранилища(АдресХранилищаНезаполненныхРеквизитов);
		ПроверкаРеквизитовОрганизации.СообщитьОбОшибкеЗаполненияРеквизитовДляОтчетности(
			Объект.Организация,
			НезаполненныеРеквизиты,
			"СообщениеТребуютсяРеквизиты",
			Отказ)
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СообщениеТребуютсяРеквизитыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ",                 Объект.Организация);
	ПараметрыФормы.Вставить("Назначение",           "ДляОтчетности");
	ПараметрыФормы.Вставить("Контекст",    Новый Структура);
	ПараметрыФормы.Контекст.Вставить("Период",           ПериодСобытия);
	ПараметрыФормы.Контекст.Вставить("ПолноеИмяПравила", ПолноеИмяПравила);
	
	ОткрытьФорму("Справочник.Организации.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьДействиеРасчетСуммы(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеВыполнениеРасчета = Новый ОписаниеОповещения("ОбработатьВыполнениеРасчета", ЭтотОбъект);
	ОткрытьФорму(ОписаниеДействияРасчет.ИмяФормы, ОписаниеДействияРасчет.ПараметрыФормы, ЭтаФорма,,,,ОповещениеВыполнениеРасчета);
	
	ВыполнениеЗадачБухгалтераКлиент.ЗарегистрироватьВЖурналеОткрытиеФормы(ОписаниеДействияРасчет.ИмяФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействиеСверка(Команда)
	
	ОповещениеВыполнениеСверки = Новый ОписаниеОповещения("ОбработатьВыполнениеСверки", ЭтотОбъект);
	ОткрытьФорму(ОписаниеДействияСверка.ИмяФормы, ОписаниеДействияСверка.ПараметрыФормы, ЭтаФорма,,,,ОповещениеВыполнениеСверки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействиеУплатаБанк(Команда)
	
	СпособОплаты = ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.БанковскийПеревод");
	Уплатить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействиеУплатаКасса(Команда)
	
	СпособОплаты = ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.НаличнымиПоКвитанции");
	Уплатить();
	
КонецПроцедуры

&НаКлиенте
Процедура Актуализировать(Команда)
	
	АктуализироватьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежныйДокументНажатие(Команда)
	
	// Команды генерируются в КопироватьЭлементСПодчиненными() и содержат числовой идентификатор,
	// совпадающий с идентификаторами строк в списке Платежи
	Идентификатор = ЗадачиБухгалтераКлиентСервер.Идентификатор(Команда.Имя);
	Если Идентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СпособОплаты) Тогда
		ОткрытьПлатежныйДокумент(Идентификатор);
	Иначе
		СтрокаПлатежа = Платежи.НайтиПоИдентификатору(Идентификатор);
		Если СтрокаПлатежа <> Неопределено
			И ЗначениеЗаполнено(СтрокаПлатежа.ПлатежноеПоручение) Тогда
			// Определим способ оплаты по платежному документу
			СпособОплаты = ?(ТипЗнч(СтрокаПлатежа.ПлатежноеПоручение) = Тип("ДокументСсылка.РасходныйКассовыйОрдер"),
				ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.НаличнымиПоКвитанции"),
				ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.БанковскийПеревод"));
			ОткрытьПлатежныйДокумент(Идентификатор);
		Иначе
			// Предложим выбрать способ оплаты
			СписокВыбора = Новый СписокЗначений;
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.БанковскийПеревод"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.НаличнымиПоКвитанции"));
			ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ВыборСпособаОплатыЗавершение",
				ЭтотОбъект, Новый Структура("Идентификатор", Идентификатор));
			НомерКонтейнера = ЗадачиБухгалтераКлиентСервер.НомерКонтейнера(Идентификатор);
			ИмяЭлемента = "ОткрытьПлатежныйДокумент" + НомерКонтейнера;
			ПоказатьВыборИзМеню(ОписаниеОповещенияОЗавершении, СписокВыбора, Элементы[ИмяЭлемента]);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодробнееНаИТС(Команда)
	
	АдресНаИТС = ЗадачиБухгалтераКлиентСервер.СсылкаНаИТС(Срок);
	ПерейтиПоНавигационнойСсылке(АдресНаИТС);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВспомогательныеПроцедурыИФункции

&НаКлиенте
Процедура ОткрытьПлатежныйДокумент(Идентификатор)
	
	ИмяФормыПлатежногоДокумента = 
		?(СпособОплаты = ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.НаличнымиПоКвитанции"),
		"Документ.РасходныйКассовыйОрдер.ФормаОбъекта", "Документ.ПлатежноеПоручение.ФормаОбъекта");
		
	ПараметрыФормыПлатежногоДокумента = ПараметрыФормыПлатежногоДокумента(Идентификатор);
	
	ОповещениеУплаты = Новый ОписаниеОповещения("ОбработатьУплату", ЭтотОбъект);
	ОткрытьФорму(ИмяФормыПлатежногоДокумента, ПараметрыФормыПлатежногоДокумента, ЭтаФорма,,,,ОповещениеУплаты);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборСпособаОплатыЗавершение(ЭлементСписка, ДополнительныеПараметры) Экспорт
	
	Если ЭлементСписка <> Неопределено Тогда
		СпособОплаты = ЭлементСписка.Значение;
		ОткрытьПлатежныйДокумент(ДополнительныеПараметры.Идентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РеквизитыПлатежногоДокумента(ДокументСсылка, Оплачено)
	
	РеквизитыПлатежногоДокумента = Новый Структура("Наименование, Сумма");
	
	НаименованиеДокумента = ДокументСсылка.Метаданные().Синоним;
	РеквизитыДокумента    = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Номер, Дата, СуммаДокумента");
	НомерДокумента        = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыДокумента.Номер, Истина, Истина);
	ДатаДокумента         = Формат(РеквизитыДокумента.Дата,"ДЛФ=D");
	СтатусОплаты          = ?(Оплачено, НСтр("ru = 'Оплачено'"), НСтр("ru = 'Подготовлено'"));
	
	ШаблонПредставления = НСтр("ru = '%1 %2 от %3 (%4)'");
	
	РеквизитыПлатежногоДокумента.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления,
		НаименованиеДокумента, НомерДокумента, ДатаДокумента, СтатусОплаты);;
	РеквизитыПлатежногоДокумента.Сумма = РеквизитыДокумента.СуммаДокумента;
	
	Возврат РеквизитыПлатежногоДокумента;
	
КонецФункции

&НаСервере
Процедура УдалитьНеиспользуемыеЭлементы(ЭлементыКУдалению)
	
	Для Каждого Элемент Из ЭлементыКУдалению Цикл
		Элементы.Удалить(Элемент);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура КопироватьЭлементСПодчиненными(Форма, Источник, Владелец, Номер)
	
	ТипИсточника = ТипЗнч(Источник);
	Приемник = Форма.Элементы.Добавить(Источник.Имя + Номер, ТипИсточника, Владелец);
	
	Если ТипИсточника = Тип("ГруппаФормы") Тогда
		Приемник.Вид = Источник.Вид;
		ЗаполнитьЗначенияСвойств(Приемник, Источник, , "Имя,ПутьКДаннымЗаголовка,ПодчиненныеЭлементы");
		Для Каждого ПодчиненныйЭлемент Из Источник.ПодчиненныеЭлементы Цикл
			КопироватьЭлементСПодчиненными(Форма, ПодчиненныйЭлемент, Приемник, Номер);
		КонецЦикла;
	ИначеЕсли ТипИсточника = Тип("КнопкаФормы") Тогда
		ИмяКоманды = Источник.ИмяКоманды + Номер;
		Если Форма.Команды.Найти(ИмяКоманды) = Неопределено Тогда
			НоваяКоманда = Форма.Команды.Добавить(ИмяКоманды);
			ЗаполнитьЗначенияСвойств(НоваяКоманда, Форма.Команды[Источник.ИмяКоманды]);
		КонецЕсли;
		Приемник.ИмяКоманды = ИмяКоманды;
		ЗаполнитьЗначенияСвойств(Приемник, Источник, , "Имя, ИмяКоманды");
	Иначе
		Приемник.Вид = Источник.Вид;
		ЗаполнитьЗначенияСвойств(Приемник, Источник, , "Имя");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыводитьОКТМО()
	
	//Удалим строки с пустым ОКТМО
	ТаблицаРасчетов = РеквизитФормыВЗначение("Расчет").Скопировать();
	Отбор = Новый Структура("ОКТМО", "");
	СтрокиКУдалению = ТаблицаРасчетов.НайтиСтроки(Отбор);
	
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаРасчетов.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	МассивОКТМО = ТаблицаРасчетов.ВыгрузитьКолонку("ОКТМО");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивОКТМО);
	
	Возврат МассивОКТМО.Количество() > 1;
	
КонецФункции

&НаСервере
Функция НовыйШрифтКурсив()
	
	Возврат Новый Шрифт(,,,Истина);
	
КонецФункции

&НаСервере
Функция ОписаниеДляУплатыПатента()
	
	ОписаниеДляУплатыПатента = "";
	
	РеквизитыПатента = Справочники.Патенты.ДанныеУплатаПатента(Правило, Срок);
	
	КБК = РеквизитыПатента.КБК;
	Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоКБК(КБК);
	ВидНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Налог, "ВидНалога");
	
	НазначениеПлатежа = Справочники.ВидыНалоговИПлатежейВБюджет.НазначениеПлатежа(
			Налог, ВидНалога, Объект.Организация);
			
	ОписаниеДляУплатыПатента = НазначениеПлатежа + РеквизитыПатента.Описание;
	
	Возврат ОписаниеДляУплатыПатента;
	
КонецФункции

&НаСервере
Процедура ПроверитьРеквизитыОрганизацииДляОтчетности()
	
	Если ЭтоАдресВременногоХранилища(АдресХранилищаНезаполненныхРеквизитов) Тогда
		УдалитьИзВременногоХранилища(АдресХранилищаНезаполненныхРеквизитов);
		АдресХранилищаНезаполненныхРеквизитов = "";
	КонецЕсли;
	
	НезаполненныеРеквизиты = Неопределено;
	
	ИмяРеглОтчета = ИнтерфейсыВзаимодействияБРО.ИмяРеглОтчета(ПолноеИмяПравила);
	
	РеквизитыОрганизацииЗаполнены = ПроверкаРеквизитовОрганизации.РеквизитыДляОтчетностиЗаполнены(
		ИмяРеглОтчета, Объект.Организация, ПериодСобытия, НезаполненныеРеквизиты);
		
	Если НЕ РеквизитыОрганизацииЗаполнены Тогда
		АдресХранилищаНезаполненныхРеквизитов = ПоместитьВоВременноеХранилище(НезаполненныеРеквизиты, УникальныйИдентификатор);
	КонецЕсли;
	
	Элементы.СообщениеТребуютсяРеквизиты.Видимость = (НЕ РасчетСуммыВыполнен И НЕ РеквизитыОрганизацииЗаполнены);
	
	УстановитьПодсветкуТекущегоБлока();
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеФормой

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	ПараметрыТекста = Новый Структура;
	ПараметрыТекста.Вставить("Описание", Описание);
	
	ИспользоватьНесколькоОрганизаций = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	Если ИспользоватьНесколькоОрганизаций Тогда 
		ШаблонТекста = НСтр("ru = '[Описание] ([Организация])'");
		НаименованиеОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "НаименованиеСокращенное");
		ПараметрыТекста.Вставить("Организация", НаименованиеОрганизации);
	Иначе
		ШаблонТекста = НСтр("ru = '[Описание]'");
	КонецЕсли;
	
	Заголовок = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонТекста, ПараметрыТекста);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	Если Элементы.СтраницыСобытий.ТекущаяСтраница = Элементы.СтраницаСобытийПустая Тогда
		Элементы.СтраницыСобытий.ТекущаяСтраница  = Элементы.СтраницаСобытийРабочая;
	КонецЕсли;
	
	//Расчет
	УправлениеФормойБлокРасчет();
	//Уплата
	УправлениеФормойБлокУплата();
	//Сверка
	УправлениеФормойБлокСверка();
	//ИТС
	УправлениеФормойБлокИТС();
	
	УстановитьПодсветкуТекущегоБлока();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойБлокРасчет()
	
	КУдалению = Новый Массив;
	
	Элементы.ДекорацияИнформацияРасчетСуммы.Заголовок = Новый ФорматированнаяСтрока(ИнформацияРасчетСуммы, НовыйШрифтКурсив());
	
	Если НЕ ТребуетсяУплата Тогда
		Элементы.ДекорацияИнформацияРасчетСуммы.Видимость = Ложь;
		Элементы.ОписаниеРасчет.Видимость                 = Ложь;
		Элементы.ОписаниеРасчетИтог.Видимость             = Ложь;
		Элементы.ДекорацияРасчетСуммы.Заголовок = НСтр("ru = 'Подготовка отчета'");
	Иначе
		КоличествоСтрокРасчета = Расчет.Количество();
		Элементы.ДекорацияНетДанныхДляРасчета.Видимость = КоличествоСтрокРасчета = 0 И НЕ ЭтоНулеваяОтчетность;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДопИнформацияРасчетСуммы) Тогда 
		Элементы.ДекорацияДопИнформацияРасчетСуммы.Заголовок = Новый ФорматированнаяСтрока(ДопИнформацияРасчетСуммы, НовыйШрифтКурсив());
		Элементы.ДекорацияДопИнформацияРасчетСуммы.Видимость = Истина;
	Иначе
		Элементы.ДекорацияДопИнформацияРасчетСуммы.Видимость = Ложь;
	КонецЕсли;
	
	Если РасчетСуммыВыполнен Тогда
		
		Элементы.СтраницаРезультатВыполненияРасчет.Видимость = Истина;
		Элементы.СтраницаВыполнитьДействиеРасчет.Видимость   = Ложь;
		Элементы.ДекорацияСсылкаНаДекларацию.Видимость       = УплатаПоДекларации;
		Элементы.ДекорацияСсылкаНаДекларацию.Заголовок       = ДекларацияНаименование;
		
		ВыводитьОКТМО = ВыводитьОКТМО();
		
		Для Каждого СтрокаРасчета Из Расчет Цикл
			НомерКонтейнера = ЗадачиБухгалтераКлиентСервер.НомерКонтейнера(СтрокаРасчета.ПолучитьИдентификатор());
			ИмяЭлемента = "ОписаниеРасчет" + ?(СтрокаРасчета.ЭтоИтоговаяСтрока,"Итог", "");
			Если Элементы.Найти(ИмяЭлемента + НомерКонтейнера) = Неопределено Тогда
				КопироватьЭлементСПодчиненными(ЭтаФорма, Элементы[ИмяЭлемента], Элементы.СтраницаРезультатВыполненияРасчет, НомерКонтейнера);
			КонецЕсли;
			ОформитьСобытиеРасчетСуммы(СтрокаРасчета, НомерКонтейнера, ВыводитьОКТМО);
			Элементы[ИмяЭлемента + НомерКонтейнера].Видимость = Истина;
		КонецЦикла;
		
	Иначе
		Элементы.СтраницаРезультатВыполненияРасчет.Видимость = Ложь;
		Элементы.СтраницаВыполнитьДействиеРасчет.Видимость   = Истина;
		Элементы.ВыполнитьДействиеРасчетСуммы.Заголовок      = ОписаниеДействияРасчет.Наименование;
		Элементы.Актуализация.Видимость = УплатаПоДекларации И АктуализацияВозможна И ТребуетсяАктуализация;
	КонецЕсли;
	
	//Удалим лишние контейнеры
	Для Каждого Контейнер Из Элементы.СтраницаРезультатВыполненияРасчет.ПодчиненныеЭлементы Цикл
		Идентификатор = ЗадачиБухгалтераКлиентСервер.Идентификатор(Контейнер.Имя);
		Если Идентификатор = Неопределено Тогда
			// Это шаблон
			Продолжить;
		КонецЕсли;
		Если Расчет.НайтиПоИдентификатору(Идентификатор) = Неопределено Тогда
			КУдалению.Добавить(Контейнер);
		КонецЕсли;
	КонецЦикла;
	УдалитьНеиспользуемыеЭлементы(КУдалению);
	
	// Уберем шаблоны
	Элементы.ОписаниеРасчет.Видимость     = Ложь;
	Элементы.ОписаниеРасчетИтог.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойБлокУплата()
	
	КУдалению    = Новый Массив;
	ИтогПоУплате = 0;
	
	Элементы.ДекорацияИнформацияУплатаНалога.Заголовок = Новый ФорматированнаяСтрока(ИнформацияУплатаНалога, НовыйШрифтКурсив());
	
	Если НЕ ТребуетсяУплата Тогда
		Элементы.СтраницыУплата.Видимость = Ложь;
	Иначе
		Если ЕстьОплата Тогда
			
			Элементы.СтраницаРезультатВыполненияУплата.Видимость = Истина;
			Элементы.СтраницаВыполнитьДействиеУплата.Видимость   = Ложь;
			
			Для Каждого Платеж Из Платежи Цикл 
				НомерКонтейнера = ЗадачиБухгалтераКлиентСервер.НомерКонтейнера(Платеж.ПолучитьИдентификатор());
				Если Элементы.Найти("ОписаниеПлатеж" + НомерКонтейнера) = Неопределено Тогда
					КопироватьЭлементСПодчиненными(ЭтаФорма, Элементы.ОписаниеПлатеж, Элементы.СтраницаРезультатВыполненияУплата, НомерКонтейнера);
				КонецЕсли;
				ОформитьСобытиеУплатаНалога(Платеж, НомерКонтейнера);
				Элементы["ОписаниеПлатеж" + НомерКонтейнера].Видимость = Истина;
			КонецЦикла;
			
		Иначе
			
			Элементы.СтраницаРезультатВыполненияУплата.Видимость = Ложь;
			Элементы.СтраницаВыполнитьДействиеУплата.Видимость   = Истина;
			
			Если Не ЗначениеЗаполнено(СпособОплаты) Тогда
				
				Элементы.ВыполнитьДействиеУплатаБанк.Видимость  = Истина;
				Элементы.ВыполнитьДействиеУплатаБанк.Заголовок  = НСтр("ru = 'Оплатить через банк'");
				
				Элементы.ВыполнитьДействиеУплатаКасса.Видимость = Истина;
				Элементы.ВыполнитьДействиеУплатаКасса.Заголовок = НСтр("ru = 'Оплатить через кассу'");
				
			ИначеЕсли СпособОплаты = Перечисления.СпособыУплатыНалогов.БанковскийПеревод Тогда
				
				//Оплата только через банк
				Элементы.ВыполнитьДействиеУплатаБанк.Видимость  = Истина;
				Элементы.ВыполнитьДействиеУплатаБанк.Заголовок  = НСтр("ru = 'Оплатить'");
				
				Элементы.ВыполнитьДействиеУплатаКасса.Видимость = Ложь;
				
			ИначеЕсли СпособОплаты = Перечисления.СпособыУплатыНалогов.НаличнымиПоКвитанции Тогда
				
				//Оплата только через кассу
				Элементы.ВыполнитьДействиеУплатаКасса.Видимость = Истина;
				Элементы.ВыполнитьДействиеУплатаКасса.Заголовок = НСтр("ru = 'Оплатить'");
				
				Элементы.ВыполнитьДействиеУплатаБанк.Видимость  = Ложь;
				
			КонецЕсли;
			
			Элементы.ПредупреждениеНулеваяОтчетность.Видимость = ЭтоНулеваяОтчетность;
			
		КонецЕсли;
	КонецЕсли;
	
	//Удалим лишние контейнеры
	Для Каждого Контейнер Из Элементы.СтраницаРезультатВыполненияУплата.ПодчиненныеЭлементы Цикл
		Идентификатор = ЗадачиБухгалтераКлиентСервер.Идентификатор(Контейнер.Имя);
		Если Идентификатор = Неопределено Тогда
			// Это шаблон
			Продолжить;
		КонецЕсли;
		Если Платежи.НайтиПоИдентификатору(Идентификатор) = Неопределено Тогда
			КУдалению.Добавить(Контейнер);
		КонецЕсли;
	КонецЦикла;
	УдалитьНеиспользуемыеЭлементы(КУдалению);
	
	//Итог по уплате
	Если Платежи.Количество() > 1 Тогда
		// Обеспечим контейнер для вывода итога, для которго установим числовой идентификатор контейнера "0"
		Если Элементы.Найти("ОписаниеПлатежИтог0") = Неопределено Тогда
			КопироватьЭлементСПодчиненными(ЭтаФорма, Элементы.ОписаниеПлатежИтог, Элементы.СтраницаРезультатВыполненияУплата, 0);
		КонецЕсли;
		Элементы.ЗначениеПлатежИтог0.Заголовок = Формат(ИтогПоУплате, "ЧЦ=15");
		Элементы.ОписаниеПлатежИтог0.Видимость = Истина;
	КонецЕсли;
	
	// Уберем шаблоны
	Элементы.ОписаниеПлатеж.Видимость     = Ложь;
	Элементы.ОписаниеПлатежИтог.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойБлокСверка()
	
	Если Не ЕстьПравоНаДОсКО Или Не МожноВыполнятьСверку Тогда
		Элементы.ГруппаСверка.Видимость = Ложь;
	Иначе
		
		Если НЕ ТребуетсяСверка Тогда
			
			Элементы.СтраницыСверка.Видимость  = Ложь;
			Элементы.ДекорацияИнформацияСверка.Заголовок = Новый ФорматированнаяСтрока(НСтр("ru = 'Сверка не требуется'"), НовыйШрифтКурсив());
			ЗаголовокСверки = НСтр("ru = 'Сверка'");
			
		Иначе
			
			Если СверкаВыполнена Тогда
				Элементы.ВыполнитьДействиеСверка.Видимость = Ложь;
				Элементы.СсылкаНаСверку.Видимость = Истина;
				Элементы.СсылкаНаСверку.Заголовок = ЗапросНаСверкуНаименование;
			Иначе
				Элементы.ВыполнитьДействиеСверка.Видимость = Истина;
				Элементы.ВыполнитьДействиеСверка.Заголовок = ОписаниеДействияСверка.Наименование;
				Элементы.СсылкаНаСверку.Видимость = Ложь;
			КонецЕсли;
			
			Если ВыполнениеЗадачБухгалтера.ЭтоСтраховыеВзносы(Правило)
				И НЕ ПлатежиВБюджетКлиентСервер.ДействуетПриказ2017_90н(ТекущаяДатаСеанса()) Тогда
				ЗаголовокСверки = НСтр("ru = 'Сверка с ПФР'");
				Элементы.ДекорацияИнформацияСверка.Заголовок = Новый ФорматированнаяСтрока(
					НСтр("ru = 'Рекомендуется провести сверку, чтобы убедиться в правильности расчетов с фондом 
						|Обычно ответ на запрос сверки приходит в течение 3-6 рабочих дней'"), НовыйШрифтКурсив());
			Иначе
				ЗаголовокСверки = НСтр("ru = 'Сверка с ФНС'");
				Элементы.ДекорацияИнформацияСверка.Заголовок = Новый ФорматированнаяСтрока(
					НСтр("ru = 'Рекомендуется провести сверку, чтобы убедиться в правильности расчетов с бюджетом 
						|Обычно ответ на запрос сверки приходит в течение 3-6 рабочих дней'"), НовыйШрифтКурсив());
			КонецЕсли;
			
		КонецЕсли;
		
		Элементы.ДекорацияСверка.Заголовок = ЗаголовокСверки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойБлокИТС()
	
	Элементы.ГруппаИТС.Видимость = ЕстьИнформацияНаИТС;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПодсветкуТекущегоБлока()
	
	Если НЕ РасчетСуммыВыполнен Тогда
		Элементы.ВыполнениеДействияУплата.ЦветФона = Новый Цвет;
		Если РеквизитыОрганизацииЗаполнены Тогда
			Элементы.ВыполнениеДействияРасчет.ЦветФона = ЦветаСтиля.БыстрыеОтборыФонГруппы;
		Иначе
			Элементы.ВыполнениеДействияРасчет.ЦветФона = Новый Цвет;
		КонецЕсли;
	ИначеЕсли НЕ ЕстьОплата Тогда
		Элементы.ВыполнениеДействияРасчет.ЦветФона = Новый Цвет;
		Элементы.ВыполнениеДействияУплата.ЦветФона = ЦветаСтиля.БыстрыеОтборыФонГруппы;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОформитьСобытиеРасчетСуммы(Событие, Номер, ВыводитьОКТМО)
	
	//Налог
	ИмяЭлемента = "НаименованиеПоказателя" + ?(Событие.ЭтоИтоговаяСтрока, "Итог", "") + Номер;
	Элемент = Элементы[ИмяЭлемента];
	Элемент.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Нстр("ru = '%1:'"), Событие.НаименованиеПоказателя);
		
	//ОКТМО
	Если ВыводитьОКТМО Тогда
		Элементы[ИмяЭлемента].РасширеннаяПодсказка.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1: %2'"),
			ПлатежиВБюджетКлиентСервер.ЗаголовокКодаТерритории(),
			Событие.ОКТМО);
	Иначе
		Элементы.НаименованиеПоказателя.РасширеннаяПодсказка.Заголовок = "";
	КонецЕсли;
	
	//Сумма налога
	ИмяЭлемента = "ЗначениеПоказателя" + ?(Событие.ЭтоИтоговаяСтрока, "Итог", "") + Номер;
	Элемент = Элементы[ИмяЭлемента];
	Элемент.Заголовок = Формат(Событие.ЗначениеПоказателя, "ЧЦ=15;ЧН=");
	
КонецПроцедуры

&НаСервере
Процедура ОформитьСобытиеУплатаНалога(Событие, Номер)
	
	Если ЗначениеЗаполнено(Событие.ПлатежноеПоручение) Тогда
		ПредставлениеПлатежногоДокумента = РеквизитыПлатежногоДокумента(Событие.ПлатежноеПоручение, Событие.Оплачено);
		ЗаголовокПлатежа = ПредставлениеПлатежногоДокумента.Наименование;
		СуммаПлатежа     = ПредставлениеПлатежногоДокумента.Сумма;
	Иначе
		ЗаголовокПлатежа = Событие.Наименование;
		СуммаПлатежа     = Событие.Сумма;
	КонецЕсли;
	
	ИтогПоУплате = ИтогПоУплате + СуммаПлатежа;
	// Платежный документ
	Элемент = Элементы["ОткрытьПлатежныйДокумент" + Номер];
	Элемент.Заголовок = ЗаголовокПлатежа;
	
	// Сумма
	Элемент = Элементы["СуммаПлатежногоДокумента" + Номер];
	Элемент.Заголовок = Формат(СуммаПлатежа, "ЧЦ=15");
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеДанных

&НаСервере
Функция ПолучитьДанныеНаСервере(СоставРазделов)
	
	ПараметрыЗадачи = Обработки.ПомощникУплатыНалога.НовыеПараметрыЗадачи();
	ЗаполнитьЗначенияСвойств(ПараметрыЗадачи, ЭтотОбъект);
	ПараметрыЗадачи.Организация      = Объект.Организация;
	ЗаполнитьЗначенияСвойств(ПараметрыЗадачи.СоставРазделов, СоставРазделов);
	ПараметрыЗадачи.Правило          = Правило;
	ПараметрыЗадачи.ПолноеИмяПравила = ПолноеИмяПравила;
	
	НаименованиеЗадания = НСтр("ru = 'Помощник уплаты налога: получение данных'");
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Обработки.ПомощникУплатыНалога.СведенияПоЗадаче", 
		ПараметрыЗадачи, 
		НаименованиеЗадания);
	
	АдресХранилища = Результат.АдресХранилища;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияПриОткрытии()
	
	Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
		ЗагрузитьРезультат();
		ПодключитьПроверкуАктуальности();
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания(
			"Подключаемый_ПроверитьВыполнениеЗаданияПриОткрытии", 
			ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
			Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
		ЗагрузитьРезультат();
		Если ФормаДлительнойОперации.Открыта()
			И ФормаДлительнойОперации.ИдентификаторЗадания = ИдентификаторЗадания Тогда
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		КонецЕсли;
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания(
			"Подключаемый_ПроверитьВыполнениеЗадания", 
			ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
			Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыполнениеРасчета(РезультатЗакрытия = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	СоставРазделов = Новый Структура("РасчетУплата, Сверка", Истина, ЕстьПравоНаДОсКО);
	Результат = ПолучитьДанныеНаСервере(СоставРазделов);
	
	Если Результат.ЗаданиеВыполнено Тогда
		ЗагрузитьРезультат();
		ПодключитьПроверкуАктуальности();
	Иначе
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища       = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания(
			"Подключаемый_ПроверитьВыполнениеЗадания",
			ПараметрыОбработчикаОжидания.ТекущийИнтервал,
			Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыполнениеСверки(РезультатЗакрытия = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	СоставРазделов = Новый Структура("РасчетУплата, Сверка", Ложь, Истина);
	Результат = ПолучитьДанныеНаСервере(СоставРазделов);
	
	Если Результат.ЗаданиеВыполнено Тогда
		ЗагрузитьРезультат();
		ПодключитьПроверкуАктуальности();
	Иначе
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища       = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания(
			"Подключаемый_ПроверитьВыполнениеЗадания",
			ПараметрыОбработчикаОжидания.ТекущийИнтервал,
			Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьУплату(РезультатЗакрытия = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	СоставРазделов = Новый Структура("РасчетУплата, Сверка", Истина, Ложь);
	Результат = ПолучитьДанныеНаСервере(СоставРазделов);
	
	Если Результат.ЗаданиеВыполнено Тогда
		ЗагрузитьРезультат();
		ПодключитьПроверкуАктуальности();
	Иначе
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища       = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания(
			"Подключаемый_ПроверитьВыполнениеЗадания",
			ПараметрыОбработчикаОжидания.ТекущийИнтервал,
			Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервере
Процедура ЗагрузитьРезультат()
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
		
	СоставРазделов = Результат.СоставРазделов;
	
	//Расчет, уплата
	Если СоставРазделов.РасчетУплата Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат.СведенияОРасчетеСуммы);
		
		Расчет.Очистить();
		ТаблицаРасчета = Результат.СведенияОРасчетеСуммы.ТаблицаРасчета;
		Если ТаблицаРасчета <> Неопределено Тогда
			Расчет.Загрузить(ТаблицаРасчета);
		КонецЕсли;
		
		Платежи.Очистить();
		ТаблицаПлатежей = Результат.СведенияОРасчетеСуммы.ТаблицаПлатежей;
		Если ТаблицаПлатежей <> Неопределено Тогда
			Платежи.Загрузить(ТаблицаПлатежей);
		КонецЕсли;
		
		СпособОплаты = ВыполнениеЗадачБухгалтера.СпособУплатыНалогаВзноса(Объект.Организация);
		
	КонецЕсли;
	
	//Сверка
	Если СоставРазделов.Сверка Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат.СведенияОСверке);
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаАктуальности 

&НаКлиенте
Процедура ПодключитьПроверкуАктуальности()
	
	Если РасчетСуммыВыполнен
		ИЛИ НЕ УплатаПоДекларации
		ИЛИ НЕ АктуализацияВозможна Тогда
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьАктуальность", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьАктуальность()
	
	ЗаданиеАктуализации = ЗакрытиеМесяцаВызовСервера.НайтиФоновоеЗаданиеАктуализацииПоОрганизации(Объект.Организация, УникальныйИдентификатор);
	
	Если ЗаданиеАктуализации = Неопределено Или Не ЗначениеЗаполнено(ЗаданиеАктуализации.УникальныйИдентификатор) Тогда
		ПроверитьАктуальностьДанных();
	Иначе
		
		Если ИдентификаторЗаданияАктуализации <> ЗаданиеАктуализации.УникальныйИдентификатор Тогда
			// Задание запущено в другой форме
			ИдентификаторЗаданияАктуализации = ЗаданиеАктуализации.УникальныйИдентификатор;
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияАктуализации);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеАктуализации",
				ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал,
				Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьАктуальностьДанных()
	
	Элементы.ИдетАктуализация.Видимость = Ложь;
	Элементы.ИдетПроверкаАктуальности.Видимость = Истина;
	Элементы.ТребуетсяАктуализация.Видимость    = Ложь;
	
	ОтключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиАктуальности");
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации");
	
	ИдентификаторЗаданияПроверкиАктуализации = Неопределено;
	ИдентификаторЗаданияАктуализации = Неопределено;
	
	УИДЗамера = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Ложь, "АктуализацияДанныхТребуетсяАктуализацияЗаПериод");
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("Организация",                  Объект.Организация);
	ПараметрыПроверки.Вставить("Период",                       ПериодСобытия);
	ПараметрыПроверки.Вставить("ИдентификаторЗадания",         ИдентификаторЗаданияПроверкиАктуализации);
	ПараметрыПроверки.Вставить("УИДЗамера",                    УИДЗамера);
	ПараметрыПроверки.Вставить("УникальныйИдентификаторФормы", ЭтотОбъект.УникальныйИдентификатор);
	
	РезультатВыполнения = ЗакрытиеМесяцаВызовСервера.ПроверитьАктуальность(ПараметрыПроверки);
	
	АдресХранилищаАктуализации = РезультатВыполнения.АдресХранилища;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ИдентификаторЗаданияПроверкиАктуализации = Неопределено;
		ОбработатьРезультатПроверкиАктуальности();
	Иначе
		ИдентификаторЗаданияПроверкиАктуализации = РезультатВыполнения.ИдентификаторЗадания;
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияАктуализации);
		ПодключитьОбработчикОжидания(
			"Подключаемый_ОбработатьРезультатПроверкиАктуальности", 
			ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал,
			Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиАктуальности()
	
	Если ЗакрытиеМесяцаВызовСервера.ЗаданиеВыполнено(ИдентификаторЗаданияПроверкиАктуализации) Тогда
		ИдентификаторЗаданияПроверкиАктуализации = Неопределено;
		ОбработатьРезультатПроверкиАктуальности();
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияАктуализации);
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиАктуальности",
			ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеАктуализации()
	
	Если ЗакрытиеМесяцаВызовСервера.ЗаданиеВыполнено(ИдентификаторЗаданияАктуализации) Тогда
		ОбработатьРезультатАктуализации();
		ИдентификаторЗаданияАктуализации = Неопределено;
	Иначе
		ОбновитьПроцентПрогресса();
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияАктуализации);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации",
			ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатПроверкиАктуальности()
	
	ОтключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиАктуальности");
	
	РезультатПроверки = ПолучитьИзВременногоХранилища(АдресХранилищаАктуализации);
	
	Если РезультатПроверки.УИДЗамера <> Неопределено Тогда
			ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(РезультатПроверки.УИДЗамера);
	КонецЕсли;
	
	Если НЕ РезультатПроверки.ТребуетсяАктуализация Тогда
		ТребуетсяАктуализация = Ложь;
		Оповестить("АктуализацияЗавершенаУспешно", Новый Структура("Организация", Объект.Организация));
	Иначе
		ПараметрыОповещения = Новый Структура("Организация, ДатаАктуальности", 
			Объект.Организация, РезультатПроверки.ДатаАктуальности);
		Оповестить("ТребуетсяАктуализация", ПараметрыОповещения);
		ТребуетсяАктуализация = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатАктуализации()
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации");
	
	РезультатАктуализации = ПолучитьИзВременногоХранилища(АдресХранилищаАктуализации);
	
	Если РезультатАктуализации.Выполнено Тогда
		ПараметрыОповещения = Новый Структура("Организация", Объект.Организация);
		Оповестить("АктуализацияЗавершенаУспешно", ПараметрыОповещения);
	Иначе
		ЗакрытиеМесяцаКлиент.ПоказатьОшибкиАктуализации(ЭтотОбъект, РезультатАктуализации);
		Оповестить("АктуализацияОтменена", Новый Структура("Организация", Объект.Организация));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АктуализироватьДанные()
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации");
	
	ОтобразитьСостояниеАктуализации();
	
	ПараметрыАктуализации = ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыАктуализации();
	ПараметрыАктуализации.Организация                  = Объект.Организация;
	ПараметрыАктуализации.Период                       = ПериодСобытия;
	ПараметрыАктуализации.ИдентификаторЗадания         = ИдентификаторЗаданияАктуализации;
	ПараметрыАктуализации.УникальныйИдентификаторФормы = УникальныйИдентификатор;

	РезультатВыполнения = ЗакрытиеМесяцаВызовСервера.АктуализироватьДанные(ПараметрыАктуализации);
	
	АдресХранилищаАктуализации = РезультатВыполнения.АдресХранилища;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ОбработатьРезультатАктуализации();
		ИдентификаторЗаданияАктуализации = Неопределено;
	Иначе
		ИдентификаторЗаданияАктуализации = РезультатВыполнения.ИдентификаторЗадания;
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияАктуализации);
		ПодключитьОбработчикОжидания(
			"Подключаемый_ПроверитьВыполнениеАктуализации",
			ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал,
			Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьСостояниеАктуализации(ВыполняемоеЗаданиеАктуализации = Неопределено) 
	
	ИдетАктуализация = ВыполняемоеЗаданиеАктуализации = Неопределено;
	
	Если НЕ ИдетАктуализация Тогда
		
		// Актуализация выполняется в другом отчете или другим пользователем.
		Если ПустаяСтрока(ВыполняемоеЗаданиеАктуализации.УникальныйИдентификатор) Тогда
			// Актуализация выполняется другим пользователем в файловом режиме.
			ТекстПриАктуализации = НСтр("ru = 'Актуализация данных, запущенная другим пользователем, еще не закончилась. Данные для расчета могут быть неактуальны.'");
		ИначеЕсли ВыполняемоеЗаданиеАктуализации.Пользователь <> ПользователиКлиентСервер.ТекущийПользователь() Тогда 
			// Актуализация выполняется другим пользователем в клиент-серверном режиме.
			ТекстПриАктуализации = СтрШаблон(НСтр("ru = 'Идет актуализация данных пользователем %1. Данные для расчета могут быть неактуальны.'"),
				ВыполняемоеЗаданиеАктуализации.Пользователь);
		Иначе
			// Актуализация выполняется текущим пользователем в другом отчете.
			ТекстПриАктуализации = НСтр("ru = 'Актуализация данных, запущенная в другом отчете, еще не закончилась. Данные для расчета могут быть неактуальны.'");
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ИдетАктуализация.Видимость = Истина;
	Элементы.ИдетПроверкаАктуальности.Видимость = Ложь;
	Элементы.ТребуетсяАктуализация.Видимость    = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПроцентПрогресса()
	
	Прогресс = ЗакрытиеМесяцаВызовСервера.ПрочитатьПрогресс(ИдентификаторЗаданияАктуализации);
	
	Если ТипЗнч(Прогресс) = Тип("Структура") И Прогресс.Свойство("Процент") Тогда
		Процент = Мин(Прогресс.Процент, 99);
		ПрогрессорАктуализации = Строка(Процент) + "%.";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеДокументовУплаты

&НаКлиенте
Процедура Уплатить()
	
	// Если платежей несколько, то создаем и проводим документы.
	Если Платежи.Количество() > 1 Тогда
		СформироватьДокументы();
		ОбработатьУплату();
		Возврат;
	Иначе
		
		ОповещениеУплаты = Новый ОписаниеОповещения("ОбработатьУплату", ЭтотОбъект);
		ИмяФормыПлатежногоДокумента = 
		?(СпособОплаты = ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.НаличнымиПоКвитанции"),
		"Документ.РасходныйКассовыйОрдер.ФормаОбъекта", "Документ.ПлатежноеПоручение.ФормаОбъекта");
		
		Если Платежи.Количество() = 0 Тогда
			ПараметрыФормыПлатежногоДокумента = ПараметрыФормыПлатежногоДокумента(Неопределено);
		Иначе
			ПараметрыФормыПлатежногоДокумента =  ПараметрыФормыПлатежногоДокумента(Платежи[0].ПолучитьИдентификатор());
		КонецЕсли;
		
		ОткрытьФорму(ИмяФормыПлатежногоДокумента, ПараметрыФормыПлатежногоДокумента, ЭтаФорма,,,,ОповещениеУплаты);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДокументы()
	
	Для каждого СтрокаПлатежа Из Платежи Цикл
		
		Если ЗначениеЗаполнено(СтрокаПлатежа.ПлатежноеПоручение) Тогда
			Продолжить;
		КонецЕсли;
		
		Результат = Неопределено;
		
		ПараметрыФормы = ПараметрыФормыПлатежногоДокументаПоСтроке(СтрокаПлатежа);
		Если СпособОплаты = Перечисления.СпособыУплатыНалогов.НаличнымиПоКвитанции Тогда
			
			ДокументОбъект = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
			ДокументОбъект.Заполнить(ПараметрыФормы.ЗначенияЗаполнения);
			
			Результат = ЗаписатьПлатежныйДокумент(ДокументОбъект, СтрокаПлатежа);
			
		Иначе
			
			ДокументОбъект = Документы.ПлатежноеПоручение.СоздатьДокумент();
			ДокументОбъект.Заполнить(ПараметрыФормы.ЗначенияЗаполнения);
			
			Результат = ЗаписатьПлатежныйДокумент(ДокументОбъект, СтрокаПлатежа);
			
		КонецЕсли;
			
		Если ЗначениеЗаполнено(Результат) Тогда
			СтрокаПлатежа.ПлатежноеПоручение = Результат;
			РегистрыСведений.ЗадачиБухгалтераНалоговыеПлатежи.ДобавитьЗаписьПравила(Объект.Организация, Результат, Правило, ПериодСобытия);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьПлатежныйДокумент(ДокументОбъект, СтрокаПлатежа)
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	Попытка
		
		// Если документ заполнен без ошибок, то проводим, предварительно записываем для привязки сообщений об ошибках
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		БезОшибок = ДокументОбъект.ПроверитьЗаполнение();
		Если БезОшибок Тогда
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		
		Возврат ДокументОбъект.Ссылка;
	Исключение
		ТекстСообщения = НСтр("ru = 'Не сформирован документ ""%1"" на %2 руб.%3'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения, МетаданныеДокумента.Синоним, СтрокаПлатежа.Сумма, Описание);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		ТекстОшибки = НСтр("ru = 'Не удалось создать документ.
			|%1'");
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстОшибки, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Помощник уплаты налога'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,
			МетаданныеДокумента,
			,
			ОписаниеОшибки);
	КонецПопытки;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ПараметрыФормыПлатежногоДокументаПоСтроке(СтрокаПлатежа)
	
	Если ЗначениеЗаполнено(СтрокаПлатежа.ПлатежноеПоручение) Тогда
		Возврат Новый Структура("Ключ", СтрокаПлатежа.ПлатежноеПоручение);
	КонецЕсли;
	
	ОписаниеПлатежа = ВыполнениеЗадачБухгалтера.НовыйОписаниеПлатежа();
	ОписаниеПлатежа.Период                     = ПериодСобытия;
	ОписаниеПлатежа.Налог                      = СтрокаПлатежа.Налог;
	ОписаниеПлатежа.ВидНалоговогоОбязательства = ?(ЗначениеЗаполнено(СтрокаПлатежа.ВидНалоговогоОбязательства),
		СтрокаПлатежа.ВидНалоговогоОбязательства,
		Перечисления.ВидыПлатежейВГосБюджет.Налог);
	ОписаниеПлатежа.Организация                = Объект.Организация;
	ОписаниеПлатежа.СпособОплаты               = СпособОплаты;
	ОписаниеПлатежа.ПоказательПериода          = ?(ЗначениеЗаполнено(СтрокаПлатежа.НалоговыйПериод), СтрокаПлатежа.НалоговыйПериод, ПоказательПериода);
	ОписаниеПлатежа.Аванс                      = СтрокаПлатежа.Аванс;
	ОписаниеПлатежа.КБК                        = СтрокаПлатежа.КБК;
	ОписаниеПлатежа.ОКАТО                      = СтрокаПлатежа.ОКАТО;
	ОписаниеПлатежа.КодНалоговогоОргана        = СтрокаПлатежа.КодНалоговогоОргана;
	ОписаниеПлатежа.Сумма                      = СтрокаПлатежа.Сумма;
	ОписаниеПлатежа.Описание                   = Описание;
	ОписаниеПлатежа.Декларация                 = Декларация;
	ОписаниеПлатежа.ДатаДекларации             = ДатаДекларации;
	
	ЗначенияЗаполнения = ВыполнениеЗадачБухгалтера.ЗначенияЗаполненияПлатежногоДокумента(ОписаниеПлатежа);
	
	Возврат Новый Структура("ЗначенияЗаполнения, ПериодСобытия, Правило", ЗначенияЗаполнения, ПериодСобытия, Правило);
	
КонецФункции

&НаСервере
Функция ПараметрыФормыПустогоПлатежногоДокумента()
	
	ОписаниеПлатежа = ВыполнениеЗадачБухгалтера.НовыйОписаниеПлатежа();
	ОписаниеПлатежа.Период                     = ПериодСобытия;
	ОписаниеПлатежа.Налог                      = Налог;
	ОписаниеПлатежа.Организация                = Объект.Организация;
	ОписаниеПлатежа.СпособОплаты               = СпособОплаты;
	ОписаниеПлатежа.ПоказательПериода          = ПоказательПериода;
	ОписаниеПлатежа.КБК                        = КБК;
	ОписаниеПлатежа.КодНалоговогоОргана        = КодНалоговогоОргана;
	ОписаниеПлатежа.Описание                   = Описание;
	ОписаниеПлатежа.Декларация                 = Декларация;
	ОписаниеПлатежа.ДатаДекларации             = ДатаДекларации;
	
	ЗначенияЗаполнения = ВыполнениеЗадачБухгалтера.ЗначенияЗаполненияПлатежногоДокумента(ОписаниеПлатежа);
	
	Возврат Новый Структура("ЗначенияЗаполнения, ПериодСобытия, Правило", ЗначенияЗаполнения, ПериодСобытия, Правило);
	
КонецФункции

&НаСервере
Функция ПараметрыФормыПлатежногоДокумента(Идентификатор)
	
	Если Идентификатор = Неопределено Тогда 
		//Получим параметры формы для пустого документа
		Возврат ПараметрыФормыПустогоПлатежногоДокумента();
	КонецЕсли;
	
	СтрокаПлатежа = Платежи.НайтиПоИдентификатору(Идентификатор);
	Если СтрокаПлатежа = Неопределено Тогда
		Возврат ПараметрыФормыПустогоПлатежногоДокумента();
	КонецЕсли;
	
	Возврат ПараметрыФормыПлатежногоДокументаПоСтроке(СтрокаПлатежа);
	
КонецФункции

#КонецОбласти

#КонецОбласти
