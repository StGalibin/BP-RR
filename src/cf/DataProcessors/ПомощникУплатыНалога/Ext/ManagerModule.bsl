#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Подготавливает сведения о расчете, уплате и состоянии сверки по задаче
//
// Параметры:
//  ПараметрыЗадачи - Структура - см. НовыеПараметрыЗадачи()
//  АдресХранилища  - Строка - адрес хранилища результата
//
Процедура СведенияПоЗадаче(ПараметрыЗадачи, АдресХранилища) Экспорт
	
	СоставРазделов  = ПараметрыЗадачи.СоставРазделов;
	
	РезультатВыполнения = Новый Структура();
	РезультатВыполнения.Вставить("СоставРазделов", СоставРазделов);
	
	Если СоставРазделов.РасчетУплата Тогда
		СведенияОРасчетеСуммы = СведенияОРасчетеСуммы(ПараметрыЗадачи);
		РезультатВыполнения.Вставить("СведенияОРасчетеСуммы", СведенияОРасчетеСуммы);
	КонецЕсли;
	
	Если СоставРазделов.Сверка Тогда
		СведенияОСверке = ВыполнениеЗадачБухгалтера.СведенияОСверке(ПараметрыЗадачи);
		РезультатВыполнения.Вставить("СведенияОСверке", СведенияОСверке);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
	
КонецПроцедуры

// Функция-конструктор структуры, описывающей параметры задачи
//
Функция НовыеПараметрыЗадачи() Экспорт
	
	ПараметрыЗадачи = Новый Структура();
	
	ПараметрыЗадачи.Вставить("Организация",                 Справочники.Организации.ПустаяСсылка());
	ПараметрыЗадачи.Вставить("Правило",                     Неопределено);
	ПараметрыЗадачи.Вставить("ПолноеИмяПравила",            "");
	ПараметрыЗадачи.Вставить("ПериодСобытия",               '00010101');
	ПараметрыЗадачи.Вставить("Срок",                        '00010101');
	ПараметрыЗадачи.Вставить("Описание",                    "");
	ПараметрыЗадачи.Вставить("РегистрацияВНалоговомОргане", Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка());
	ПараметрыЗадачи.Вставить("СоставРазделов",              Новый Структура("РасчетУплата, Сверка", Ложь, Ложь));
	ПараметрыЗадачи.Вставить("ИдентификаторЗадачи",         "");
	
	Возврат ПараметрыЗадачи;
	
КонецФункции

// Возвращает правило уплаты налога по правилу представления отчета.
//
// Параметры:
//  Правило - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов - правило представления отчета
//  Организация - СправочникСсылка.Организации - отбор правил по организации
//  ПериодСобытия - Дата - отбор правил по периоду
//
// Возвращаемое значение:
//  СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов - правило уплаты налога или правило отчета,
//  если оплата не требуется
//
Функция ПравилоУплатыПоПравилуОтчета(Правило, Организация, ПериодСобытия) Экспорт
	
	// Для отчетов по страховым взносам возвращаем правило отчета, т.к. оплата в этом случае не связана с отчетом
	Если ВыполнениеЗадачБухгалтера.ЭтоСтраховыеВзносы(Правило) Тогда
		Возврат Правило;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИмяЗадачи",     Правило.Владелец.Код);
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("ПериодСобытия", ПериодСобытия);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗадачиБухгалтера.Правило
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК ПравилаПредставленияОтчетовУплатыНалогов
	|		ПО ЗадачиБухгалтера.Правило = ПравилаПредставленияОтчетовУплатыНалогов.Ссылка
	|ГДЕ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Владелец.Код = &ИмяЗадачи
	|	И ЗадачиБухгалтера.Организация = &Организация
	|	И ЗадачиБухгалтера.ПериодСобытия = &ПериодСобытия
	|	И ПравилаПредставленияОтчетовУплатыНалогов.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.УплатаНалога)";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Правило;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	ПравилоУплаты = Выборка.Правило;
	
	Возврат ПравилоУплаты;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СведенияОРасчетеСуммы

Функция СведенияОРасчетеСуммы(ПараметрыЗадачи)
	
	СведенияОРасчете = НовыйСведенияОРасчете();
	
	СпособВыполненияЗадачи = ВыполнениеЗадачБухгалтера.СпособВыполненияЗадачи(ПараметрыЗадачи.Правило);
	
	Если СпособВыполненияЗадачи = "УплатаПатента" Тогда
		ЗаполнитьСведенияУплатаПатента(ПараметрыЗадачи, СведенияОРасчете);
	ИначеЕсли СпособВыполненияЗадачи = "УплатаНДФЛ" Тогда
		ЗаполнитьСведенияУплатаНДФЛ(ПараметрыЗадачи, СведенияОРасчете);
	ИначеЕсли СпособВыполненияЗадачи = "УплатаСтраховыхВзносов" Тогда
		ЗаполнитьСведенияУплатаСтраховыхВзносов(ПараметрыЗадачи, СведенияОРасчете);
	ИначеЕсли СпособВыполненияЗадачи = "УплатаАвансовЗемельныйТранспортныйНалог" Тогда
		ЗаполнитьСведенияУплатаАвансовПоИмущественнымНалогам(ПараметрыЗадачи, СведенияОРасчете);
	ИначеЕсли СпособВыполненияЗадачи = "УплатаТорговогоСбора" Тогда
		ЗаполнитьСведенияУплатаТорговогоСбора(ПараметрыЗадачи, СведенияОРасчете);
	ИначеЕсли СпособВыполненияЗадачи = "ОтчетностьСтраховыеВзносы" Тогда
		ЗаполнитьСведенияПодготовкаОтчета(ПараметрыЗадачи, СведенияОРасчете);
	ИначеЕсли ПараметрыЗадачи.Правило.Действие = Перечисления.ВидыДействийКалендаряБухгалтера.Отчет Тогда
		ЗаполнитьСведенияПодготовкаОтчета(ПараметрыЗадачи, СведенияОРасчете);
	Иначе
		ЗаполнитьСведенияУплатаПоДекларации(ПараметрыЗадачи, СведенияОРасчете);
	КонецЕсли;
	
	Возврат СведенияОРасчете;
	
КонецФункции

Процедура ЗаполнитьСведенияУплатаПатента(ПараметрыЗадачи, СведенияОРасчете)
	
	Организация   = ПараметрыЗадачи.Организация;
	Патент        = ПараметрыЗадачи.Правило;
	ПериодСобытия = ПараметрыЗадачи.ПериодСобытия;
	Срок          = ПараметрыЗадачи.Срок;
	
	ПериодичностьПоКлассификатору = ПлатежиВБюджетКлиентСервер.ПлатежПоКонкретнойДате();
	ПоказательПериода = ПлатежиВБюджетКлиентСервер.НалоговыйПериод(Срок, ПериодичностьПоКлассификатору);
	
	Платежи = ВыполнениеЗадачБухгалтера.НовыйТаблицаПлатежи();
	
	РеквизитыПатента = Справочники.Патенты.ДанныеУплатаПатента(Патент, Срок);
	
	КБК       = РеквизитыПатента.КБК;
	Налог     = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоКБК(КБК);
	
	СтрокаПлатежа = Платежи.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаПлатежа, РеквизитыПатента);
	СтрокаПлатежа.Налог = Налог;
	СтрокаПлатежа.Наименование = Строка(Налог);
	СтрокаПлатежа.КБК          = КБК;
	
	Если Платежи.Количество() > 0 Тогда
		ВыполнениеЗадачБухгалтера.ДополнитьНачисленияПлатежнымиДокументами(Платежи, Патент, ПериодСобытия, Организация);
	КонецЕсли;
		
	// Для уплаты Патента таблица расчета совпадает с таблицей платежей.
	ТаблицаРасчета = НовыйТаблицаРасчета();
	Расчет = ТаблицаРасчета.Добавить();
	Расчет.НаименованиеПоказателя = Платежи[0].Наименование;
	Расчет.ЗначениеПоказателя     = Платежи[0].Сумма;
	Расчет.ОКТМО                  = Платежи[0].ОКАТО;
	
	СведенияОРасчете.РасчетСуммыВыполнен   = Истина;
	СведенияОРасчете.УплатаПоДекларации    = Ложь;
	СведенияОРасчете.ИнформацияРасчетСуммы =
		НСтр("ru = 'Сумма платежа рассчитывается на основании данных справочника ""Патенты""'");
	СведенияОРасчете.ТаблицаПлатежей       = Платежи;
	СведенияОРасчете.ТаблицаРасчета        = ТаблицаРасчета;
	СведенияОРасчете.ПоказательПериода     = ПоказательПериода;
	СведенияОРасчете.ЕстьОплата            = ЕстьОплата(Платежи);
	СведенияОРасчете.Налог                 = Налог;
	СведенияОРасчете.КБК                   = КБК;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияУплатаНДФЛ(ПараметрыЗадачи, СведенияОРасчете)
	
	Организация                 = ПараметрыЗадачи.Организация;
	Правило                     = ПараметрыЗадачи.Правило;
	ПериодСобытия               = ПараметрыЗадачи.ПериодСобытия;
	РегистрацияВНалоговомОргане = ПараметрыЗадачи.РегистрацияВНалоговомОргане;
	Налог                       = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.НДФЛ);
	КБК                         = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(Налог, , ПериодСобытия);
	НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Перечисления.Периодичность.Месяц, ПериодСобытия);
	КонецПериода  = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Перечисления.Периодичность.Месяц, ПериодСобытия);
	СчетУчета     = Справочники.ВидыНалоговИПлатежейВБюджет.СчетУчета(Налог, ПериодСобытия);
	УчетВРазрезеНалоговыхОрганов = НалоговыйУчет.УчетВРазрезеНалоговыхОрганов();
	КодТерритории                = Справочники.Организации.КодТерриторииМестаРегистрации(Организация);
	ВидГосударственногоОргана = ПлатежиВБюджетПереопределяемый.ВидГосударственногоОргана(КБК);
	КодГосударственногоОргана = ДанныеГосударственныхОрганов.КодГосударственногоОрганаОрганизации(
		Организация,
		ВидГосударственногоОргана);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	Запрос.УстановитьПараметр("СчетУчета", СчетУчета);
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	НалоговыйУчетОбособленныхПодразделений.ДобавитьВидСубконтоРегистрацияВНалоговомОргане(ВидыСубконто);
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	
	ТекстЗапроса = // модифицируется при помощи СхемаЗапроса
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Счет КАК СчетУчета,
	|	ХозрасчетныйОбороты.Субконто1 КАК ВидНалоговогоОбязательства,
	|	ХозрасчетныйОбороты.Субконто2 КАК РегистрацияВНалоговомОргане,
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане).Код КАК КодНалоговогоОргана,
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане).КодПоОКТМО КАК ОКАТО,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотКт - ХозрасчетныйОбороты.СуммаОборотДт) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Регистратор,
	|			Счет = &СчетУчета,
	|			&ВидыСубконто,
	|			Организация = &Организация
	|				И Субконто1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	НЕ(ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.СписаниеСРасчетногоСчета
	|				ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.РасходныйКассовыйОрдер)
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Счет,
	|	ХозрасчетныйОбороты.Субконто1,
	|	ХозрасчетныйОбороты.Субконто2,
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане).Код,
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане).КодПоОКТМО
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетУчета,
	|	ВидНалоговогоОбязательства,
	|	ХозрасчетныйОбороты.Субконто2,
	|	Сумма";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	Если НЕ УчетВРазрезеНалоговыхОрганов Тогда
		СхемаЗапроса.ПакетЗапросов[0].Операторы[0].ВыбираемыеПоля.Удалить(2); // РегистрацияВНалоговомОргане
		СхемаЗапроса.ПакетЗапросов[0].Операторы[0].ВыбираемыеПоля.Удалить(2); // КодНалоговогоОргана
		СхемаЗапроса.ПакетЗапросов[0].Операторы[0].ВыбираемыеПоля.Удалить(2); // ОКАТО
		СхемаЗапроса.ПакетЗапросов[0].Порядок.Удалить(2);// Упорядочивание по Субконто2
	КонецЕсли;
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	
	Платежи   = ВыполнениеЗадачБухгалтера.НовыйТаблицаПлатежи();
	Пока Выборка.Следующий() Цикл
		Платеж = Платежи.Добавить();
		ЗаполнитьЗначенияСвойств(Платеж, Выборка);
		Платеж.Налог = Налог;
		Платеж.КБК   = КБК;
		Платеж.Наименование = Строка(Платеж.Налог);
		Если НЕ УчетВРазрезеНалоговыхОрганов Тогда
			Платеж.ОКАТО               = КодТерритории;
			Платеж.КодНалоговогоОргана = КодГосударственногоОргана;
		КонецЕсли;
	КонецЦикла;
	
	Если Платежи.Количество() > 0 Тогда
		ВыполнениеЗадачБухгалтера.ДополнитьНачисленияПлатежнымиДокументами(Платежи, Правило, ПериодСобытия, Организация);
	КонецЕсли;
		
	// Для уплаты НДФЛ таблица расчета совпадает с таблицей платежей.
	// Заполним таблицу расчета
	ТаблицаРасчета = НовыйТаблицаРасчета();
	Для Каждого Платеж Из Платежи Цикл
		Расчет = ТаблицаРасчета.Добавить();
		Расчет.НаименованиеПоказателя = Платеж.Наименование;
		Расчет.ЗначениеПоказателя     = Платеж.Сумма;
		Расчет.ОКТМО                  = Платеж.ОКАТО;
	КонецЦикла;
	
	Если Платежи.Количество() > 1 Тогда 
		ИтогРасчета = ТаблицаРасчета.Добавить();
		ИтогРасчета.НаименованиеПоказателя = НСтр("ru = 'Итого'");
		ИтогРасчета.ЗначениеПоказателя     = Платежи.Итог("Сумма");
		ИтогРасчета.ЭтоИтоговаяСтрока      = Истина;
		ИнформацияУплатаНалога = НСтр("ru = 'Подготовка платежных документов'");
	Иначе
		ИнформацияУплатаНалога = НСтр("ru = 'Подготовка платежного документа'");
	КонецЕсли;
	
	СведенияОРасчете.РасчетСуммыВыполнен    = Истина;
	СведенияОРасчете.ИнформацияРасчетСуммы  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Сумма платежа рассчитывается на основании данных по счету %1'"), СчетУчета);
	СведенияОРасчете.ТаблицаПлатежей        = Платежи;
	СведенияОРасчете.ТаблицаРасчета         = ТаблицаРасчета;
	СведенияОРасчете.ПоказательПериода      = ПлатежиВБюджетКлиентСервер.НалоговыйПериод(
		ПериодСобытия, ПлатежиВБюджетКлиентСервер.ПериодичностьМесяц());
	СведенияОРасчете.ЕстьОплата             = ЕстьОплата(Платежи);
	СведенияОРасчете.ИнформацияУплатаНалога = ИнформацияУплатаНалога;
	СведенияОРасчете.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.НДФЛ);
	СведенияОРасчете.КБК = КБК;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияУплатаСтраховыхВзносов(ПараметрыЗадачи, СведенияОРасчете)
	
	Организация   = ПараметрыЗадачи.Организация;
	ПериодСобытия = ПараметрыЗадачи.ПериодСобытия;
	ИмяДокумента  = ЗакрытиеМесяца.ВидДокументаНачисленияЗарплаты(Организация);
	
	// Убедимся, что выполнена регламентная операция начисления взносов.
	ДокументЗарплаты    = Неопределено;
	НесколькоДокументов = Ложь;
	ОперацияВыполнена   = ВыполнениеЗадачБухгалтера.ОперацияНачисленияВзносовВыполнена(Организация, ПериодСобытия, ДокументЗарплаты, НесколькоДокументов);
	
	Если ОперацияВыполнена Тогда
		СведенияПоУплатеСтраховыхВзносов(ПараметрыЗадачи, СведенияОРасчете);
		Возврат;
	КонецЕсли;
	
	// Операция не выполнена.
	// Предложим выполнить регламентную операцию.
	ОписаниеДействияРасчет = НовыйОписаниеДействияРасчет();
	
	Отбор = Новый Структура();
	Отбор.Вставить("Организация",       Организация);
	Отбор.Вставить("МесяцНачисления",   НачалоМесяца(ПериодСобытия));
	Отбор.Вставить("ПериодРегистрации", НачалоМесяца(ПериодСобытия));
	
	Если ИмяДокумента = "ОтражениеЗарплатыВУчете" Тогда
		// Откроем форму обработки загрузки.
		ОписаниеДействияРасчет.ИмяФормы       = "Обработка.ЗагрузкаДанныхИзЗУП.Форма";
		ОписаниеДействияРасчет.ПараметрыФормы = Отбор;
		ОписаниеДействияРасчет.Наименование   = НСтр("ru = 'Загрузить данные о зарплате и взносах'");
	Иначе
		
		Если ИмяДокумента = "НачислениеЗарплаты" Тогда
			ОписаниеДействияРасчет.Наименование = НСтр("ru = 'Начислить зарплату и взносы'");
		Иначе
			ОписаниеДействияРасчет.Наименование = НСтр("ru = 'Ввести данные о зарплате и взносах'");
		КонецЕсли;
		
		// Откроем форму документа или списка (если документов несколько).
		Если НесколькоДокументов Тогда
			ОписаниеДействияРасчет.ИмяФормы = "Документ."+ИмяДокумента+".ФормаСписка";
			ОписаниеДействияРасчет.ПараметрыФормы = Отбор;
		ИначеЕсли ЗначениеЗаполнено(ДокументЗарплаты) Тогда
			ОписаниеДействияРасчет.ИмяФормы = "Документ."+ИмяДокумента+".ФормаОбъекта";
			ОписаниеДействияРасчет.ПараметрыФормы = Новый Структура("Ключ", ДокументЗарплаты);
		Иначе
			// Документ НачислениеЗарплаты принимает месяц нового документа через специальный параметр формы.
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("МесяцНачисленияНовогоДокумента", НачалоМесяца(ПериодСобытия)); 
			ПараметрыФормы.Вставить("ЗначенияЗаполнения",             Отбор);
			
			ОписаниеДействияРасчет.ИмяФормы = "Документ."+ИмяДокумента+".ФормаОбъекта";
			ОписаниеДействияРасчет.ПараметрыФормы = ПараметрыФормы;
		КонецЕсли;
	КонецЕсли;
	
	СведенияОРасчете.ИнформацияРасчетСуммы  =
		НСтр("ru = 'Сумма платежа рассчитывается на основании данных на счетах страховых взносов'");
	СведенияОРасчете.ОписаниеДействияРасчет = ОписаниеДействияРасчет;
	СведенияОРасчете.ПоказательПериода      = ПлатежиВБюджетКлиентСервер.НалоговыйПериод(ПериодСобытия,
		ПлатежиВБюджетКлиентСервер.ПериодичностьМесяц());
	СведенияОРасчете.ИнформацияУплатаНалога = НСтр("ru = 'Подготовка платежного документа'");
	
КонецПроцедуры

Процедура СведенияПоУплатеСтраховыхВзносов(ПараметрыЗадачи, СведенияОРасчете)
	
	Платежи = ВыполнениеЗадачБухгалтера.ДанныеДляУплатыСтраховыхВзносов(
		ПараметрыЗадачи.Правило,
		ПараметрыЗадачи.Организация,
		ПараметрыЗадачи.ПериодСобытия);
		
	// Для уплаты страховых взносов таблица расчета совпадает с таблицей платежей.
	// Заполним таблицу расчета
	ТаблицаРасчета = НовыйТаблицаРасчета();
	Для каждого Платеж Из Платежи Цикл
		Расчет = ТаблицаРасчета.Добавить();
		Расчет.НаименованиеПоказателя = Платеж.Наименование;
		Расчет.ЗначениеПоказателя     = Платеж.Сумма;
		Расчет.ОКТМО                  = Платеж.ОКАТО;
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Платеж.Налог, "ВидНалога") = Перечисления.ВидыНалогов.СтраховыеВзносы_ФСС_НСиПЗ Тогда
			Платеж.НалоговыйПериод = ПлатежиВБюджетКлиентСервер.НезаполненноеЗначение();
		Иначе
			Платеж.НалоговыйПериод = ПлатежиВБюджетКлиентСервер.НалоговыйПериод(ПараметрыЗадачи.ПериодСобытия,
				ПлатежиВБюджетКлиентСервер.ПериодичностьМесяц());
		КонецЕсли;
	КонецЦикла;
	
	Если Платежи.Количество() > 1 Тогда 
		ИтогРасчета = ТаблицаРасчета.Добавить();
		ИтогРасчета.НаименованиеПоказателя = НСтр("ru = 'Итого'");
		ИтогРасчета.ЗначениеПоказателя     = Платежи.Итог("Сумма");
		ИтогРасчета.ЭтоИтоговаяСтрока      = Истина;
		ИнформацияУплатаНалога = НСтр("ru = 'Подготовка платежных документов'");
	Иначе
		ИнформацияУплатаНалога = НСтр("ru = 'Подготовка платежного документа'");
	КонецЕсли;
	
	СведенияОРасчете.РасчетСуммыВыполнен    = Истина;
	СведенияОРасчете.ИнформацияРасчетСуммы  = 
		НСтр("ru = 'Сумма платежа рассчитывается на основании данных на счетах страховых взносов'");
	СведенияОРасчете.ТаблицаПлатежей        = Платежи;
	СведенияОРасчете.ТаблицаРасчета         = ТаблицаРасчета;
	СведенияОРасчете.ЕстьОплата             = ЕстьОплата(Платежи);
	СведенияОРасчете.ИнформацияУплатаНалога = ИнформацияУплатаНалога;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияУплатаАвансовПоИмущественнымНалогам(ПараметрыЗадачи, СведенияОРасчете)
	
	Организация                 = ПараметрыЗадачи.Организация;
	Правило                     = ПараметрыЗадачи.Правило;
	ПериодСобытия               = ПараметрыЗадачи.ПериодСобытия;
	Срок                        = ПараметрыЗадачи.Срок;
	РегистрацияВНалоговомОргане = ПараметрыЗадачи.РегистрацияВНалоговомОргане;
	ИмяЗадачи     = ПараметрыЗадачи.ИдентификаторЗадачи;
	НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Правило.Периодичность, ПериодСобытия);
	КонецПериода  = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Правило.Периодичность, ПериодСобытия);
	ВидНалога     = РасчетыСБюджетом.ВидНалогаПоКодуЗадачи(ИмяЗадачи, Организация, КонецПериода);
	Налог         = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидНалога);
	КБК           = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(Налог, , КонецПериода);
	
	Платежи = ВыполнениеЗадачБухгалтера.ДанныеДляУплатыИмущественныхНалогов(
		ПараметрыЗадачи.Правило,
		ПараметрыЗадачи.Организация,
		ПараметрыЗадачи.ПериодСобытия,
		ПараметрыЗадачи.Срок,
		ПараметрыЗадачи.РегистрацияВНалоговомОргане);
	
	// Для уплаты имущественных налогов таблица расчета совпадает с таблицей платежей.
	// Заполним таблицу расчета
	ТаблицаРасчета = НовыйТаблицаРасчета();
	Для Каждого Платеж Из Платежи Цикл
		Расчет = ТаблицаРасчета.Добавить();
		Расчет.НаименованиеПоказателя = Платеж.Наименование;
		Расчет.ЗначениеПоказателя     = Платеж.Сумма;
		Расчет.ОКТМО                  = Платеж.ОКАТО;
	КонецЦикла;
	
	Если Платежи.Количество() > 1 Тогда
		ИтогРасчета = ТаблицаРасчета.Добавить();
		ИтогРасчета.НаименованиеПоказателя = НСтр("ru = 'Итого'");
		ИтогРасчета.ЗначениеПоказателя     = Платежи.Итог("Сумма");
		ИтогРасчета.ЭтоИтоговаяСтрока      = Истина;
		ИнформацияУплатаНалога = НСтр("ru = 'Подготовка платежных документов'");
	Иначе
		ИнформацияУплатаНалога = НСтр("ru = 'Подготовка платежного документа'");
	КонецЕсли;
	
	// Определим период, к которому относится платеж,
	// в соответствии с классификатором, используемым в платежных поручениях.
	НалоговыйПериодДляПлатежейВБюджет = Правило.Периодичность;
	ПериодичностьПоКлассификатору =
		ПлатежиВБюджетПереопределяемый.ПериодичностьПоКлассификатору(НалоговыйПериодДляПлатежейВБюджет);
	Если ПериодичностьПоКлассификатору = ПлатежиВБюджетКлиентСервер.ПлатежПоКонкретнойДате()
		Или НалоговыйПериодДляПлатежейВБюджет <> Правило.Периодичность Тогда
		ПоказательПериода = ПлатежиВБюджетКлиентСервер.НалоговыйПериод(Срок, ПериодичностьПоКлассификатору);
	Иначе
		ПоказательПериода = ПлатежиВБюджетКлиентСервер.НалоговыйПериод(ПериодСобытия, ПериодичностьПоКлассификатору);
	КонецЕсли;
	
	СведенияОРасчете.РасчетСуммыВыполнен    = Истина;
	СведенияОРасчете.ИнформацияРасчетСуммы  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Сумма платежа рассчитывается на основании данных регистра 
		|%1'"), 
		?(ВидНалога = Перечисления.ВидыНалогов.ТранспортныйНалог,
		НСтр("ru = '""Расчет транспортного налога""'"),
		НСтр("ru = '""Расчет земельного налога""'")));
	СведенияОРасчете.ТаблицаПлатежей        = Платежи;
	СведенияОРасчете.ТаблицаРасчета         = ТаблицаРасчета;
	СведенияОРасчете.ПоказательПериода      = ПоказательПериода;
	СведенияОРасчете.ИнформацияУплатаНалога = ИнформацияУплатаНалога;
	СведенияОРасчете.Налог                  = Налог;
	СведенияОРасчете.КБК                    = КБК;
	СведенияОРасчете.ЕстьОплата             = ЕстьОплата(Платежи);
	
КонецПроцедуры

Процедура ЗаполнитьСведенияУплатаТорговогоСбора(ПараметрыЗадачи, СведенияОРасчете)
	
	Организация   = ПараметрыЗадачи.Организация;
	Правило       = ПараметрыЗадачи.Правило;
	Срок          = ПараметрыЗадачи.Срок;
	ПериодСобытия = ПараметрыЗадачи.ПериодСобытия;
	Описание      = ПараметрыЗадачи.Описание;
	НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Правило.Периодичность, ПериодСобытия);
	КонецПериода  = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Правило.Периодичность, ПериодСобытия);
	ВидНалога     = Перечисления.ВидыНалогов.ТорговыйСбор;
	Налог         = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидНалога);
	КБК           = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(Налог, , КонецПериода);
	
	ПериодичностьПоКлассификатору = ПлатежиВБюджетПереопределяемый.ПериодичностьПоКлассификатору(Правило.Периодичность);
	Если ПериодичностьПоКлассификатору = ПлатежиВБюджетКлиентСервер.ПлатежПоКонкретнойДате() Тогда
		ПоказательПериода = ПлатежиВБюджетКлиентСервер.НалоговыйПериод(Срок, ПериодичностьПоКлассификатору);
	Иначе
		ПоказательПериода = ПлатежиВБюджетКлиентСервер.НалоговыйПериод(ПериодСобытия, ПериодичностьПоКлассификатору);
	КонецЕсли;
	
	СуммаТорговогоСбора = ТорговыйСбор.СуммаТорговогоСбора(Организация, НачалоПериода, КонецПериода);
	
	// Для торгового сбора сумма к уплате разбивается по торговым точкам.
	СуммаТорговогоСбора.Свернуть("ТорговаяТочка, КодНалоговогоОргана, ОКАТО", "Сумма");
	ТаблицаРасчета = НовыйТаблицаРасчета();
	Для каждого СтрокаСбора Из СуммаТорговогоСбора Цикл
		Расчет = ТаблицаРасчета.Добавить();
		Расчет.НаименованиеПоказателя = СтрокаСбора.ТорговаяТочка;
		Расчет.ЗначениеПоказателя     = СтрокаСбора.Сумма;
		Расчет.ОКТМО                  = СтрокаСбора.ОКАТО;
	КонецЦикла;
	Если ТаблицаРасчета.Количество() > 1 Тогда 
		ИтогРасчета = ТаблицаРасчета.Добавить();
		ИтогРасчета.НаименованиеПоказателя = НСтр("ru = 'Итого'");
		ИтогРасчета.ЗначениеПоказателя     = ТаблицаРасчета.Итог("ЗначениеПоказателя");
		ИтогРасчета.ЭтоИтоговаяСтрока      = Истина;
	КонецЕсли;
	
	// Получаем таблицу платежей
	СуммаТорговогоСбора.Свернуть("КодНалоговогоОргана, ОКАТО", "Сумма");
	Платежи = ВыполнениеЗадачБухгалтера.НовыйТаблицаПлатежи();
	Для каждого СтрокаСбора Из СуммаТорговогоСбора Цикл
		Платеж = Платежи.Добавить();
		ЗаполнитьЗначенияСвойств(Платеж, СтрокаСбора);
		Платеж.КБК          = КБК;
		Платеж.Налог        = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоКБК(Платеж.КБК);
		Платеж.Наименование = Строка(Платеж.Налог);
	КонецЦикла;
	
	Если Платежи.Количество() > 0 Тогда
		ВыполнениеЗадачБухгалтера.ДополнитьНачисленияПлатежнымиДокументами(Платежи, Правило, ПериодСобытия, Организация);
	КонецЕсли;
	
	УдалитьСтрокиБезПлатежежей(Платежи);
	
	Если Платежи.Количество() > 1 Тогда
		ИнформацияУплатаНалога = НСтр("ru = 'Подготовка платежных документов'");
	Иначе
		ИнформацияУплатаНалога = НСтр("ru = 'Подготовка платежного документа'");
	КонецЕсли;
	
	СведенияОРасчете.РасчетСуммыВыполнен    = Истина;
	СведенияОРасчете.ИнформацияРасчетСуммы  =
		НСтр("ru = 'Сумма платежа рассчитывается на основании данных регистра ""Параметры торговых точек""'");
	СведенияОРасчете.ТаблицаПлатежей        = Платежи;
	СведенияОРасчете.ТаблицаРасчета         = ТаблицаРасчета;
	СведенияОРасчете.ПоказательПериода      = ПоказательПериода;
	СведенияОРасчете.ИнформацияУплатаНалога = ИнформацияУплатаНалога;
	СведенияОРасчете.Налог                  = Налог;
	СведенияОРасчете.КБК                    = КБК;
	СведенияОРасчете.ЕстьОплата             = ЕстьОплата(Платежи);
	
КонецПроцедуры

Процедура ЗаполнитьСведенияПодготовкаОтчета(ПараметрыЗадачи, СведенияОРасчете)
	
	ОписаниеДействияДекларация = ВыполнениеЗадачБухгалтера.ОписаниеДействияДекларация(
		ПараметрыЗадачи.Правило,
		ПараметрыЗадачи.ПериодСобытия,
		ПараметрыЗадачи.Организация,
		ПараметрыЗадачи.РегистрацияВНалоговомОргане);
		
	ОписаниеДействияРасчет = НовыйОписаниеДействияРасчет();
	ЗаполнитьЗначенияСвойств(ОписаниеДействияРасчет, ОписаниеДействияДекларация);
	ОписаниеДействияРасчет.Наименование = НСтр("ru = 'Сформировать отчет'");
	Если ОписаниеДействияДекларация.ПараметрыФормы.Свойство("Ключ") Тогда
		СведенияОРасчете.РасчетСуммыВыполнен    = Истина;
		СведенияОРасчете.УплатаПоДекларации     = Истина;
		СведенияОРасчете.Декларация             = ОписаниеДействияДекларация.ПараметрыФормы.Ключ;
		СведенияОРасчете.ДекларацияНаименование = ПредставлениеДекларации(
			ОписаниеДействияДекларация.ПараметрыФормы.Ключ);
	КонецЕсли;
	
	СведенияОРасчете.УплатаПоДекларации     = Истина;
	СведенияОРасчете.ОписаниеДействияРасчет = ОписаниеДействияРасчет;
	
	Если ПараметрыЗадачи.ИдентификаторЗадачи = "БухгалтерскаяОтчетность" Тогда
		
		СведенияОРасчете.ДопИнформацияРасчетСуммы = 
			НСтр("ru = 'Сформированная отчетность заполнена и готова к сдаче в налоговую инспекцию и
			|территориальное отделение Росстата.
			|Самый удобный способ - подключить 1С-Отчетность и отправить в электронном виде. 
			|Другой способ - это распечатать 2 экземпляра для налоговой инспекции и 2 экземпляра 
			|для Росстата (для ФНС и Росстата используются разные формы). На каждом экземпляре 
			|укажите дату, подпишите отчет и отнесите в свою налоговую инспекцию и Росстат.'");
			
	ИначеЕсли ПараметрыЗадачи.ИдентификаторЗадачи = "СведенияОСреднесписочнойЧисленности" Тогда 
		
		СведенияОРасчете.ДопИнформацияРасчетСуммы = 
			НСтр("ru = 'Сформированная отчетность заполнена и готова к сдаче в налоговую инспекцию.
			|Самый удобный способ - подключить 1С-Отчетность и отправить в электронном виде.
			|Другой способ - это распечатать 2 экземпляра. На каждом экземпляре укажите дату,
			|подпишите отчет и отнесите в свою налоговую инспекцию.'");
		
	КонецЕсли;
		
	СведенияОРасчете.ИнформацияУплатаНалога = НСтр("ru = 'Уплата не требуется'");
	СведенияОРасчете.ТребуетсяУплата        = Ложь;
	СведенияОРасчете.ТребуетсяСверка        = Ложь;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияУплатаПоДекларации(ПараметрыЗадачи, СведенияОРасчете)
	
	Организация                 = ПараметрыЗадачи.Организация;
	ПериодСобытия               = ПараметрыЗадачи.ПериодСобытия;
	Правило                     = ПараметрыЗадачи.Правило;
	РегистрацияВНалоговомОргане = ПараметрыЗадачи.РегистрацияВНалоговомОргане;
	ИмяЗадачи                   = ПараметрыЗадачи.ИдентификаторЗадачи;
	
	ВидНалога = РасчетыСБюджетом.ВидНалогаПоКодуЗадачи(ИмяЗадачи, Организация, ПериодСобытия);
	Налог     = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидНалога);
	КБК       = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(Налог, , ПериодСобытия);
	
	ПоказательПериода = ВыполнениеЗадачБухгалтера.ПоказательПериодаПлатежаПоДекларации(Правило, ПериодСобытия, ПараметрыЗадачи.Срок);
	
	НачалоПериода    = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Правило.Периодичность, ПериодСобытия);
	КонецПериода     = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Правило.Периодичность, ПериодСобытия);
	Показатели       = ВыполнениеЗадачБухгалтера.ПоказателиБазовогоПериода(НачалоПериода, КонецПериода, Правило);
	ДлительностьБазовогоПериода = Показатели.ДлительностьБазовогоПериода;
	ПериодДекларации            = Показатели.КонецБазовогоПериода;
	
	ОписаниеДействияДекларация = ВыполнениеЗадачБухгалтера.ОписаниеДействияДекларация(
		ПараметрыЗадачи.Правило,
		ПериодДекларации,
		ПараметрыЗадачи.Организация,
		ПараметрыЗадачи.РегистрацияВНалоговомОргане,
		ДлительностьБазовогоПериода);
		
	ОписаниеДействияРасчет = НовыйОписаниеДействияРасчет();
	ЗаполнитьЗначенияСвойств(ОписаниеДействияРасчет, ОписаниеДействияДекларация);
	ОписаниеДействияРасчет.Наименование = НСтр("ru = 'Сформировать декларацию'");
	
	Если ПараметрыЗадачи.ИдентификаторЗадачи = "НалогНаПрибыль" 
		ИЛИ ПараметрыЗадачи.ИдентификаторЗадачи = "НДФЛ_Предприниматель" Тогда
		
		СведенияОРасчете.ДопИнформацияРасчетСуммы = 
			НСтр("ru = 'Сформированная отчетность заполнена и готова к сдаче в налоговую инспекцию.
			|Самый удобный способ - подключить 1С-Отчетность и отправить в электронном виде.
			|Другой способ - это распечатать 2 экземпляра. На каждом экземпляре укажите дату,
			|подпишите отчет и отнесите в свою налоговую инспекцию.'");
		
	КонецЕсли;
		
	Если ОписаниеДействияДекларация = Неопределено
		ИЛИ НЕ ОписаниеДействияДекларация.ПараметрыФормы.Свойство("Ключ") Тогда
		
		// Декларация не подготовлена
		СведенияОРасчете.УплатаПоДекларации     = Истина;
		СведенияОРасчете.ОписаниеДействияРасчет = ОписаниеДействияРасчет;
		СведенияОРасчете.ПоказательПериода      = ПоказательПериода;
		СведенияОРасчете.Налог                  = Налог;
		СведенияОРасчете.КБК                    = КБК;
		Возврат;
		
	КонецЕсли;
	
	ДанныеДекларации = ВыполнениеЗадачБухгалтера.ДанныеДляУплатыНалогаПоДекларации(
		Правило,
		ПараметрыЗадачи.ПолноеИмяПравила,
		Организация,
		РегистрацияВНалоговомОргане,
		ПериодСобытия,
		ПараметрыЗадачи.Срок,
		ПоказательПериода);
		
	// Заполним таблицу расчета
	ТаблицаРасчета = НовыйТаблицаРасчета();
	ИнформацияУплатаНалога = НСтр("ru = 'Подготовка платежного документа'");
	Если ДанныеДекларации.Свойство("СуммаНДСПоДекларации") Тогда
		// Платеж по декларации НДС
		// Сумма по декларации
		Расчет = ТаблицаРасчета.Добавить();
		Расчет.НаименованиеПоказателя = НСтр("ru = 'Сумма налога'");
		Расчет.ЗначениеПоказателя     = ДанныеДекларации.СуммаНДСПоДекларации;
		// Сумма платежа
		Расчет = ТаблицаРасчета.Добавить();
		Расчет.НаименованиеПоказателя = ПорядокРассчетаСуммыНДС(ДанныеДекларации);
		Расчет.ЗначениеПоказателя     = ДанныеДекларации.Платежи[0].Сумма;
		Расчет.ОКТМО                  = ДанныеДекларации.Платежи[0].ОКАТО;
		Расчет.ЭтоИтоговаяСтрока      = Истина;
	Иначе
		Для Каждого Платеж Из ДанныеДекларации.Платежи Цикл
			Расчет = ТаблицаРасчета.Добавить();
			Расчет.НаименованиеПоказателя = Платеж.Наименование;
			Расчет.ЗначениеПоказателя     = Платеж.Сумма;
			Расчет.ОКТМО                  = Платеж.ОКАТО;
		КонецЦикла;
		Если ДанныеДекларации.Платежи.Количество() > 1 Тогда
			ИтогРасчета = ТаблицаРасчета.Добавить();
			ИтогРасчета.НаименованиеПоказателя = НСтр("ru = 'Итого'");
			ИтогРасчета.ЗначениеПоказателя     = ДанныеДекларации.Платежи.Итог("Сумма");
			ИтогРасчета.ЭтоИтоговаяСтрока      = Истина;
			ИнформацияУплатаНалога = НСтр("ru = 'Подготовка платежных документов'");
		КонецЕсли;
	КонецЕсли;
	
	СведенияОРасчете.РасчетСуммыВыполнен = Истина;
	СведенияОРасчете.УплатаПоДекларации  = Истина;
	СведенияОРасчете.Декларация             = ДанныеДекларации.Ссылка;
	СведенияОРасчете.ДекларацияНаименование = ПредставлениеДекларации(ДанныеДекларации.Ссылка);
	СведенияОРасчете.ТаблицаПлатежей        = ДанныеДекларации.Платежи;
	СведенияОРасчете.ТаблицаРасчета         = ТаблицаРасчета;
	СведенияОРасчете.ОписаниеДействияРасчет = ОписаниеДействияРасчет;
	СведенияОРасчете.ПоказательПериода      = ПоказательПериода;
	СведенияОРасчете.ДатаДекларации         = ДанныеДекларации.ДатаПодписи;
	СведенияОРасчете.ИнформацияУплатаНалога = ИнформацияУплатаНалога;
	СведенияОРасчете.ЕстьОплата             = ЕстьОплата(ДанныеДекларации.Платежи);
	СведенияОРасчете.Налог                  = Налог;
	СведенияОРасчете.КБК                    = КБК;
	СведенияОРасчете.КодНалоговогоОргана    = ДанныеДекларации.КодНалоговогоОргана;
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеВспомогательныеПроцедурыИФункции

Функция ПредставлениеДекларации(ДокументСсылка)
	
	ТипДокумента = ТипЗнч(ДокументСсылка);
	
	Если ТипДокумента <> Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		Возврат "";
	КонецЕсли;
	
	СостояниеОтправки = ПолучитьСостояниеОтправки(ДокументСсылка);
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка,
		"НаименованиеОтчета, ПредставлениеПериода");
	
	ПредставлениеДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1 за %2 (%3)'"),
		РеквизитыДокумента.НаименованиеОтчета,
		РеквизитыДокумента.ПредставлениеПериода,
		СостояниеОтправки);
	
	Возврат ПредставлениеДокумента;
	
КонецФункции

Функция ПолучитьСостояниеОтправки(ДокументСсылка)
	
	СостояниеОтправки = "Не отправлено";
	
	СведенияПоВсемОтправкам = СведенияПоОтправкам.СведенияПоВсемОтправкам(ДокументСсылка);
	Если СведенияПоВсемОтправкам.Количество() > 0 Тогда
		Идентификатор      = СведенияПоВсемОтправкам[0].ИдентификаторОтправки;
		СведенияПоОтправке = СведенияПоОтправкам.СведенияПоОтправке(ДокументСсылка, Идентификатор);
		СостояниеОтправки  = Строка(СведенияПоОтправке.Статус);
	КонецЕсли;
	
	Возврат СостояниеОтправки;
	
КонецФункции

Функция НовыйСведенияОРасчете()
	
	СтруктураСведенийОРасчете = Новый Структура();
	СтруктураСведенийОРасчете.Вставить("РасчетСуммыВыполнен",    Ложь);
	СтруктураСведенийОРасчете.Вставить("ЕстьОплата",             Ложь);
	СтруктураСведенийОРасчете.Вставить("УплатаПоДекларации",     Ложь);
	СтруктураСведенийОРасчете.Вставить("ИнформацияРасчетСуммы",
		НСтр("ru = 'Сумма платежа рассчитывается на основании данных отчета'"));
	СтруктураСведенийОРасчете.Вставить("ДопИнформацияРасчетСуммы", "");
	СтруктураСведенийОРасчете.Вставить("ИнформацияУплатаНалога",
		НСтр("ru = 'Подготовка платежного документа'"));
	СтруктураСведенийОРасчете.Вставить("ТаблицаПлатежей",        Неопределено);// см. ВыполнениеЗадачБухгалтера.НовыйТаблицаПлатежи()
	СтруктураСведенийОРасчете.Вставить("ТаблицаРасчета",         Неопределено);// см. НовыйТаблицаРасчета()
	СтруктураСведенийОРасчете.Вставить("ОписаниеДействияРасчет", Неопределено);// см. НовыйОписаниеДействияРасчет()
	СтруктураСведенийОРасчете.Вставить("Декларация",             Документы.РегламентированныйОтчет.ПустаяСсылка());
	СтруктураСведенийОРасчете.Вставить("ДатаДекларации",         '00010101');
	СтруктураСведенийОРасчете.Вставить("ДекларацияНаименование", "");
	СтруктураСведенийОРасчете.Вставить("ПоказательПериода",      "");// Для платежного документа
	СтруктураСведенийОРасчете.Вставить("Налог",                  Справочники.ВидыНалоговИПлатежейВБюджет.ПустаяСсылка());
	СтруктураСведенийОРасчете.Вставить("КБК",                    "");
	СтруктураСведенийОРасчете.Вставить("КодНалоговогоОргана",    "");
	СтруктураСведенийОРасчете.Вставить("ТребуетсяУплата",        Истина);
	СтруктураСведенийОРасчете.Вставить("ТребуетсяСверка",        Истина);

	Возврат СтруктураСведенийОРасчете;
	
КонецФункции

Функция НовыйТаблицаРасчета()
	
	Расчеты = Новый ТаблицаЗначений;
	
	Расчеты.Колонки.Добавить("НаименованиеПоказателя",  Новый ОписаниеТипов("Строка"));
	Расчеты.Колонки.Добавить("ЗначениеПоказателя", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Расчеты.Колонки.Добавить("ОКТМО", Метаданные.Справочники.РегистрацииВНалоговомОргане.Реквизиты.КодПоОКТМО.Тип);
	Расчеты.Колонки.Добавить("ЭтоИтоговаяСтрока", Новый ОписаниеТипов("Булево"));
	
	Возврат Расчеты;
	
КонецФункции

Функция НовыйОписаниеДействияРасчет()
	
	ОписаниеДействияРасчет = Новый Структура;
	
	ОписаниеДействияРасчет.Вставить("ИмяФормы",       "");
	ОписаниеДействияРасчет.Вставить("ПараметрыФормы", Неопределено);
	ОписаниеДействияРасчет.Вставить("Наименование",   "");
	
	Возврат ОписаниеДействияРасчет;
	
КонецФункции

Функция ЕстьОплата(Платежи)
	
	Если Платежи.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВсеПлатежныеДокументы = Платежи.Скопировать(,"ПлатежноеПоручение");
	ВсеПлатежныеДокументы.Свернуть("ПлатежноеПоручение");
	
	Возврат ВсеПлатежныеДокументы.Количество() > 1 
		Или ВсеПлатежныеДокументы.Количество() = 1 И ЗначениеЗаполнено(ВсеПлатежныеДокументы[0].ПлатежноеПоручение);
	
КонецФункции

Функция ПорядокРассчетаСуммыНДС(ДанныеДекларации)
	
	// Существование в одной декларации сумм, предполагающих рассрочку и сумм, уплачиваемых единовременно в соответствии с п.5 ст. 173 НК,
	// считаем очень редким,в программе не автоматизирован и в помощнике не обслуживаем.
	
	ПорядокРассчета = "";
	Если ДанныеДекларации.СуммаНДСПоДекларации = 0 Тогда
		ПорядокРассчета = НСтр("ru = 'По декларации оплата не требуется'");
	ИначеЕсли ДанныеДекларации.Платежи[0].Сумма = 0 Тогда 
		// По декларации был рассчитан единовременный платеж, который был уплачен в другом налоговом периоде.
		ПорядокРассчета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Сумма платежа %1 - %1(единовременный платеж)'"), ДанныеДекларации.СуммаНДСПоДекларации);
	ИначеЕсли ДанныеДекларации.СуммаНДСПоДекларации = ДанныеДекларации.Платежи[0].Сумма Тогда
		// По декларации предполагается уплатить только единовременный платеж.
		ПорядокРассчета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Сумма платежа %1(единовременный платеж)'"), ДанныеДекларации.СуммаНДСПоДекларации);
	ИначеЕсли (ДанныеДекларации.СуммаНДСПоДекларации - ДанныеДекларации.Платежи[0].Сумма * 3) > 3
		ИЛИ (ДанныеДекларации.СуммаНДСПоДекларации - ДанныеДекларации.Платежи[0].Сумма * 3) < 0 Тогда
		// По декларации предполагается уплатить и единовременный платеж, и платеж, предполагающий рассрочку.
		ПорядокРассчета = НСтр("ru = 'Сумма платежа'");
	Иначе
		ПорядокРассчета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Сумма платежа %1/3'"), ДанныеДекларации.СуммаНДСПоДекларации);
	КонецЕсли;
	
	Возврат ПорядокРассчета;
	
КонецФункции

Процедура УдалитьСтрокиБезПлатежежей(Платежи)
	
	КоличествоСтрок = Платежи.Количество();
	// Удалим строки, по которым нет платежей
	Если КоличествоСтрок > 1 Тогда
		Для НомерСтроки = 1 По КоличествоСтрок Цикл
			Платеж = Платежи[КоличествоСтрок - НомерСтроки];
			Если Платеж.Сумма = 0 И Не ЗначениеЗаполнено(Платеж.ПлатежноеПоручение) Тогда
				Платежи.Удалить(Платеж);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
