
&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ПараметрыОбработчикаОжиданияАктуализации;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЦветПодсветки           = ЦветаСтиля.БыстрыеОтборыФонГруппы;
	
	МожноСоздаватьДекларацию      = ПравоДоступа("Изменение", Метаданные.Документы.РегламентированныйОтчет);
	МожноАктуализироватьДанные    = ПравоДоступа("Изменение", Метаданные.Документы.РегламентнаяОперация);
	МожноСоздаватьДокументыУплаты = ПравоДоступа("Изменение", Метаданные.Документы.ПлатежноеПоручение)
		И ПравоДоступа("Изменение", Метаданные.Документы.РасходныйКассовыйОрдер);
	
	Параметры.Свойство("Организация",  Объект.Организация);
	Параметры.Свойство("Правило",      Правило);
	Параметры.Свойство("Период",       Объект.Период);
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Период) Тогда
		Объект.Период = НачалоКвартала(ТекущаяДатаСеанса())-1; // Конец прошлого квартала.
	КонецЕсли;
	
	Если Параметры.ВызовИзСпискаЗадач Тогда
		
		ПолноеИмяПравила = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПолноеИмяПравила(Правило);
		
		Если Найти(ПолноеИмяПравила, "УплатаАвансов") > 0 Тогда
			ШаблонЗаголовка = НСтр("ru = 'Уплата авансового платежа за %1 %2'");
		ИначеЕсли Найти(ПолноеИмяПравила, "Декларация") > 0 Тогда
			ШаблонЗаголовка = НСтр("ru = 'Подготовка декларации по УСН за %1 %2'");
		Иначе
			ШаблонЗаголовка = НСтр("ru = 'Уплата налога за %1 %2'");
		КонецЕсли;
		
		НачалоПериода = НачалоГода(Объект.Период);
		КонецПериода  = КонецКвартала(Объект.Период);
		
		ПредставлениеПериода = КалендарьБухгалтера.ПредставлениеПериодаСобытия(НачалоПериода, КонецПериода);
		
		Заголовок = СтрШаблон(ШаблонЗаголовка, ПредставлениеПериода,
			БухгалтерскиеОтчетыВызовСервера.ПолучитьТекстОрганизация(Объект.Организация));
	Иначе
		ВыполнениеИзКомандногоМеню = Истина;
	КонецЕсли;
	
	ОрганизацияПредставление = Объект.Организация;
	ИспользоватьНесколькоОрганизацийБухгалтерскийУчет = Справочники.Организации.ИспользуетсяНесколькоОрганизаций();
	
	ЗаполнитьНачальныеПоказатели();
	ПланируетсяФоновоеЗадание    = ПустаяСтрока(СообщениеОбОшибке);
	ДанныеУчетаАктуальны         = ДеятельностьОтсутствует;
	АктуализацияДляРасчетаНалога = Истина;
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПередНачаломДлительнойОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации");
	
	Если НЕ ЗавершениеРаботы Тогда
		ЗакрытиеМесяцаВызовСервера.ОтменитьВыполнениеЗадания(ИдентификаторЗаданияАктуализации);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ РеквизитыОрганизацииЗаполнены Тогда
		НезаполненныеРеквизиты = ПолучитьИзВременногоХранилища(АдресХранилищаНезаполненныхРеквизитов);
		ПроверкаРеквизитовОрганизации.СообщитьОбОшибкеЗаполненияРеквизитовДляОтчетности(
			Объект.Организация,
			НезаполненныеРеквизиты,
			"СообщениеТребуютсяРеквизиты",
			Отказ)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Организации"
		И Объект.Организация = Источник Тогда
		
		ДанныеУчетаАктуальны = Ложь;
		ЗаполнитьНачальныеПоказатели();
		ПередНачаломДлительнойОперации();
		
	ИначеЕсли ИмяСобытия = "Запись_РегистрацияСуммыУбыткаУСН" И Параметр.РежимЗаписи = РежимЗаписиДокумента.Проведение
		И Параметр.Организация = Объект.Организация И Параметр.Год = Год(Объект.Период) Тогда
		
		Если ДанныеУчетаАктуальны Тогда
			ЗаполнитьАктуальныеПоказателиИПояснения();
		Иначе
			ЗаполнитьНачальныеПоказатели();
			ПланируетсяФоновоеЗадание = Ложь;
			УправлениеФормой(ЭтотОбъект);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_ПлатежныйДокумент_УплатаНалогов" Тогда
		
		// Записан документ ПлатежноеПоручение или РасходныйКассовыйОрдер с видом операции "Уплата налога"
		
		Налог = Неопределено;
		
		Если ДанныеУчетаАктуальны И ТипЗнч(Параметр) = Тип("Структура")
			И Параметр.Свойство("Организация") И Параметр.Организация = Объект.Организация
			И Параметр.Свойство("Налог", Налог) И ЗначениеЗаполнено(Налог) И ЭтоУплатаНалогаУСН(Налог) Тогда
			
			ЗаполнитьАктуальныеПоказателиИПояснения();
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Позиционирование в списке отчетов"
		Или ИмяСобытия = "Изменение пометки удаления объекта"
		Или ИмяСобытия = "Запись_РегламентированныйОтчет" Тогда
		
		// Записан регламентированный отчет
		
		Если ДанныеУчетаАктуальны И ТипЗнч(Параметр) = Тип("Структура")
			И Параметр.Свойство("Организация") И Параметр.Организация = Объект.Организация
			И Параметр.Свойство("Ссылка") И ЭтоРегламентированныйОтчетУСН(Параметр.Ссылка) Тогда
			
			ЗаполнитьАктуальныеПоказателиИПояснения();
			
		КонецЕсли;
		
		
	ИначеЕсли ИмяСобытия = "ОбновитьПоказателиРасчетаУСН" И Источник <> ЭтотОбъект Тогда
		
		ПередНачаломДлительнойОперации();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПредставление = Объект.Организация;
	ЗаполнитьНачальныеПоказатели();
	ПередНачаломДлительнойОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура СообщениеОбОшибкеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "УчетнаяПолитикаОрганизации" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		КлючЗаписиУчетнойПолитики = ДанныеУчетнойПолитики("НастройкиСистемыНалогообложения", Объект.Организация, Объект.Период);
		
		Если КлючЗаписиУчетнойПолитики <> Неопределено Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Ключ", КлючЗаписиУчетнойПолитики);
			
			ОткрытьФорму("РегистрСведений.НастройкиСистемыНалогообложения.ФормаЗаписи",
				ПараметрыФормы, ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		Иначе
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Отбор", Новый Структура("Владелец", Объект.Организация));
			
			ОткрытьФорму("РегистрСведений.НастройкиСистемыНалогообложения.ФормаСписка",
				ПараметрыФормы, ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоходыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НачалоПериода = НачалоГода(Объект.Период);
	КонецПериода  = КонецКвартала(Объект.Период);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",   Объект.Организация);
	ПараметрыФормы.Вставить("НачалоПериода", НачалоПериода);
	ПараметрыФормы.Вставить("КонецПериода",  КонецПериода);
	
	ОткрытьФорму("Обработка.ПомощникРасчетаНалогаУСН.Форма.РасшифровкаДоходов", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НачалоПериода = НачалоГода(Объект.Период);
	КонецПериода  = КонецКвартала(Объект.Период);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",   Объект.Организация);
	ПараметрыФормы.Вставить("НачалоПериода", НачалоПериода);
	ПараметрыФормы.Вставить("КонецПериода",  КонецПериода);
	
	ОткрытьФорму("Обработка.ПомощникРасчетаНалогаУСН.Форма.РасшифровкаРасходов", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УплаченныеСтраховыеВзносыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НачалоПериода = НачалоГода(Объект.Период);
	КонецПериода  = КонецКвартала(Объект.Период);
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Организация", Объект.Организация);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", НачалоПериода);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода", КонецПериода);
	ПользовательскиеОтборы = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	
	ПараметрыФормы = Новый Структура();
	
	ПараметрыФормы.Вставить("ВидПлатежа",                "СтраховыеВзносы");
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("РежимРасшифровки",          Истина);
	ПараметрыФормы.Вставить("ВидРасшифровки",            2);
	ПараметрыФормы.Вставить("ЕстьУплаченныеСтраховыеВзносы", (УплаченныеСтраховыеВзносы > 0));
	
	ОткрытьФорму("Отчет.РасшифровкаПлатежейВБюджет.Форма.ФормаОтчета", ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренесенныеУбыткиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(РегистрацияСуммыУбыткаУСН) Тогда
		ПоказатьЗначение(, РегистрацияСуммыУбыткаУСН);
	Иначе
		
		ЗначенияЗаполненияДокумента = Новый Структура;
		ЗначенияЗаполненияДокумента.Вставить("Организация", Объект.Организация);
		ЗначенияЗаполненияДокумента.Вставить("Дата",        КонецГода(Объект.Период));
		
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполненияДокумента);
		
		ОткрытьФорму("Документ.РегистрацияСуммыУбыткаУСН.Форма.ФормаДокумента", ПараметрыФормы, ЭтотОбъект, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНалогаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	КлючЗаписи = ДанныеУчетнойПолитики("НастройкиУчетаУСН", Объект.Организация, Объект.Период);
	
	Если КлючЗаписи = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	
	ПараметрыОткрытия.Вставить("Ключ",              КлючЗаписи);
	ПараметрыОткрытия.Вставить("ПараметрыОткрытия", Новый Структура("АктивныйЭлемент", "СтавкаНалогаУСН"));
	
	ОткрытьФорму("РегистрСведений.НастройкиУчетаУСН.ФормаЗаписи", ПараметрыОткрытия, ЭтотОбъект, "");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеУчетнойПолитики(ИмяРегистра, Организация, Период)
	
	Возврат НастройкиУчета.КлючЗаписиДействующейУчетнойПолитики(ИмяРегистра, Организация, Период);
	
КонецФункции

&НаКлиенте
Процедура АвансовыеПлатежиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НачалоПериода = НачалоГода(Объект.Период);
	КонецПериода  = КонецКвартала(ДобавитьМесяц(Объект.Период, -3));
	
	ПользовательскиеНастройки  = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Организация", Объект.Организация);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", НачалоПериода);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода", КонецПериода);

	ПользовательскиеОтборы     = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	
	ПараметрыФормы = Новый Структура();
	
	ПараметрыФормы.Вставить("ВидПлатежа",                 "АвансовыеПлатежи");
	ПараметрыФормы.Вставить("ПользовательскиеНастройки",  ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("РежимРасшифровки",           Истина);
	ПараметрыФормы.Вставить("ВидРасшифровки",             2);
	ПараметрыФормы.Вставить("УплаченныеАвансовыеПлатежи", АвансовыеПлатежи);
	
	ОткрытьФорму("Отчет.РасшифровкаПлатежейВБюджет.Форма.ФормаОтчета", ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеДекларацииНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПоказатьЗначение(, Декларация);
	
КонецПроцедуры

&НаКлиенте
Процедура Этап2ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НачалоПериода = НачалоГода(Объект.Период);
	КонецПериода  = КонецКвартала(Объект.Период);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",   Объект.Организация);
	ПараметрыФормы.Вставить("НачалоПериода", НачалоПериода);
	ПараметрыФормы.Вставить("КонецПериода",  КонецПериода);
	
	ОткрытьФорму("Обработка.ПомощникРасчетаНалогаУСН.Форма.РасшифровкаУменьшенияНалога", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументУплатыПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПоказатьЗначение(, ДокументУплаты);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьПоказатели(Команда)
	
	ЗаполнитьНачальныеПоказатели();
	ПередНачаломДлительнойОперации();
	
	// Обновление открытых форм расшифровок
	Оповестить("ОбновитьПоказателиРасчетаУСН", , ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьАнализУчетаУСН(Команда)
	
	НачалоПериода = НачалоГода(Объект.Период);
	КонецПериода  = КонецКвартала(Объект.Период);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Организация",      Объект.Организация);
	ПараметрыФормы.Вставить("НачалоПериода",    НачалоПериода);
	ПараметрыФормы.Вставить("КонецПериода",     КонецПериода);
	ПараметрыФормы.Вставить("РежимРасшифровки", Истина);
	
	ОткрытьФорму("Отчет.АнализСостоянияНалоговогоУчетаПоУСН.Форма.ФормаОтчета", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура АктуализироватьДанныеУчета(Команда)
	
	АктуализироватьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура СообщениеТребуютсяРеквизитыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ",        Объект.Организация);
	ПараметрыФормы.Вставить("Назначение",  "ДляОтчетности");
	ПараметрыФормы.Вставить("Контекст",    Новый Структура);
	ПараметрыФормы.Контекст.Вставить("Период",        Объект.Период);
	ПараметрыФормы.Контекст.Вставить("ИмяРеглОтчета", ИмяРеглОтчета());
	
	ОткрытьФорму("Справочник.Организации.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДекларацию(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = "";
	ОписанияДействий = ОписанияДействий(Объект.Организация, СпособОплаты, Объект.Период, ТекстОшибки);
	
	Если ОписанияДействий.Декларация <> Неопределено Тогда
		ВыполнениеЗадачБухгалтераКлиент.ВыполнитьДействие(ОписанияДействий.Декларация);
	ИначеЕсли Не ПустаяСтрока(ТекстОшибки) Тогда
		ПоказатьПредупреждение(, ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьКУДиР(Команда)
	
	НачалоПериода = НачалоГода(Объект.Период);
	КонецПериода  = КонецКвартала(Объект.Период);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Организация",      Объект.Организация);
	ПараметрыФормы.Вставить("НачалоПериода",    НачалоПериода);
	ПараметрыФормы.Вставить("КонецПериода",     КонецПериода);
	ПараметрыФормы.Вставить("РежимРасшифровки", Истина);
	
	ОткрытьФорму("Отчет.КнигаУчетаДоходовИРасходов.Форма.ФормаОтчета", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УплатитьНалог(Команда)
	
	СоздатьДокументУплатыНалога();
	
КонецПроцедуры

&НаКлиенте
Процедура УплатитьНалогБанк(Команда)
	
	СпособОплаты = ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.БанковскийПеревод");
	СоздатьДокументУплатыНалога();
	
КонецПроцедуры

&НаКлиенте
Процедура УплатитьНалогКасса(Команда)
	
	СпособОплаты = ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.НаличнымиПоКвитанции");
	СоздатьДокументУплатыНалога();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСверку(Команда)
	
	ОповещениеВыполнениеСверки = Новый ОписаниеОповещения("ОбработатьВыполнениеСверки", ЭтотОбъект);
	ОткрытьФорму(ОписаниеДействияСверка.ИмяФормы, ОписаниеДействияСверка.ПараметрыФормы, ЭтаФорма,,,,ОповещениеВыполнениеСверки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодробнееНаИТС(Команда)
	
	АдресНаИТС = ЗадачиБухгалтераКлиентСервер.СсылкаНаИТС(Срок);
	ПерейтиПоНавигационнойСсылке(АдресНаИТС);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяРеглОтчета()
	Возврат "РегламентированныйОтчетУСН";
КонецФункции

&НаКлиенте
Процедура ПередНачаломДлительнойОперации()
	
	СтатусФоновогоЗадания = НСтр("ru = 'Выполняется проверка данных...'");
	
	ПланируетсяФоновоеЗадание = Не ДеятельностьОтсутствует И ПустаяСтрока(СообщениеОбОшибке);
	ДанныеУчетаАктуальны = ДеятельностьОтсутствует;
	АктуализацияДляРасчетаНалога = Истина;
	
	УправлениеФормой(ЭтотОбъект);
	
	// При заведомо "нулевой" деятельности проверка актуальности данных бесполезна.
	Если НЕ ДеятельностьОтсутствует Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьАктуальностьДанных", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.ОрганизацияРасширеннаяПодсказка.Заголовок = Форма.ПодсказкаПоНалогу;
	Элементы.ОрганизацияПредставлениеРасширеннаяПодсказка.Заголовок = Форма.ПодсказкаПоНалогу;
	
	ОрганизацияЗаполнена = ЗначениеЗаполнено(Объект.Организация);
	
	Элементы.ГруппаСтатусФоновогоЗадания.Видимость  = ОрганизацияЗаполнена;
	Элементы.АктуализироватьДанныеУчета.Видимость = Форма.ПланируетсяФоновоеЗадание
		И Элементы.АктуализироватьДанныеУчета.Видимость // на время анализа не скрываем кнопку
		Или Не Форма.ДанныеУчетаАктуальны               // нужно рассчитывать
			И НЕ Форма.АктуализацияДляРасчетаНалога     // это сложный расчет
			И ПустаяСтрока(Форма.СообщениеОбОшибке);    // допустимо рассчитывать
	Элементы.АктуализироватьДанныеУчета.Доступность = ОрганизацияЗаполнена;
	
	Элементы.ГруппаШапка.Видимость            = ОрганизацияЗаполнена;
	Элементы.ГруппаПодвал.Видимость           = ОрганизацияЗаполнена;
	Элементы.ГруппаПояснениеРасчета.Видимость = ОрганизацияЗаполнена;
	
	Если Не ОрганизацияЗаполнена Тогда
		
		Элементы.ОрганизацияРасширеннаяПодсказка.Заголовок = "";
		Форма.СтатусФоновогоЗадания = "";
		Возврат;
		
	КонецЕсли;
	
	Элементы.СообщениеОбОшибке.Видимость                   = Не ПустаяСтрока(Форма.СообщениеОбОшибке);
	Элементы.ОшибкаНесоответствиеСуммДекларация.Видимость  = Не ПустаяСтрока(Форма.ОшибкаНесоответствиеСуммДекларация);
	Элементы.ОшибкаНесоответствиеСуммОплата.Видимость      = Не ПустаяСтрока(Форма.ОшибкаНесоответствиеСуммОплата);
	
	Элементы.ПредставлениеПериода.Видимость     = Форма.ВыполнениеИзКомандногоМеню;
	Элементы.Организация.Видимость              = Форма.ВыполнениеИзКомандногоМеню И Форма.ИспользоватьНесколькоОрганизацийБухгалтерскийУчет;
	Элементы.ОрганизацияПредставление.Видимость = НЕ Форма.ВыполнениеИзКомандногоМеню ИЛИ НЕ Форма.ИспользоватьНесколькоОрганизацийБухгалтерскийУчет;
	
	НужноПодготовитьДекларацию = (Форма.НомерКвартала = 4) И ПустаяСтрока(Форма.СообщениеОбОшибке);
	
	Элементы.Расходы.Видимость                   = НЕ Форма.ОбъектНалогообложенияДоходы;
	Элементы.ПеренесенныеУбытки.Видимость        = НЕ Форма.ОбъектНалогообложенияДоходы И НужноПодготовитьДекларацию;
	Элементы.УплаченныеСтраховыеВзносы.Видимость = Форма.ОбъектНалогообложенияДоходы;
	
	Элементы.АвансовыеПлатежи.Видимость = Форма.НомерКвартала <> 1;
	Элементы.АвансовыеПлатежи.Заголовок = ?(Форма.НомерКвартала = 2, НСтр("ru = 'Авансовый платеж за '"),
		НСтр("ru = 'Авансовые платежи за '")) + Форма.ПредставлениеПериодаАванса;
	
	ВыполняетсяФоновоеЗадание = Форма.ПланируетсяФоновоеЗадание
		Или ЗначениеЗаполнено(Форма.ИдентификаторЗаданияАктуализации)
		Или ЗначениеЗаполнено(Форма.ИдентификаторЗаданияПроверкиАктуализации);
		
	Элементы.ГруппаСтатусФоновогоЗадания.Видимость = ВыполняетсяФоновоеЗадание;
	Элементы.АктуализироватьДанныеУчета.Доступность = Не ВыполняетсяФоновоеЗадание;
	
	Элементы.ГруппаПояснениеРасчета.Видимость = Форма.ДанныеУчетаАктуальны И НЕ Форма.ДеятельностьОтсутствует;
	Элементы.АнализУчетаПоУСН.Видимость       = Не Форма.ДеятельностьОтсутствует;
	
	Элементы.НалогКУплатеОтсутствует.Видимость = Форма.ДеятельностьОтсутствует;
	
	Элементы.ГруппаПодвал.Видимость           = Форма.ДанныеУчетаАктуальны;
	
	НадоВыбратьСпособОплаты = НЕ ЗначениеЗаполнено(Форма.СпособОплаты);
	
	Элементы.СообщениеТребуютсяРеквизиты.Видимость = НужноПодготовитьДекларацию И НЕ Форма.РеквизитыОрганизацииЗаполнены;
	
	Если Форма.ДанныеУчетаАктуальны Тогда
		
		Элементы.ДекларацияПояснение.Видимость     = НужноПодготовитьДекларацию;
		Элементы.ДекларацияПредставление.Видимость = НужноПодготовитьДекларацию И Форма.ЕстьДекларация;
		Элементы.СформироватьДекларацию.Видимость  = НужноПодготовитьДекларацию И НЕ Форма.ЕстьДекларация;
		Элементы.ГиперссылкаКУДиР.Видимость        = НужноПодготовитьДекларацию;
		
		Элементы.УплатитьНалог.Видимость        = Не Форма.ДеятельностьОтсутствует И НЕ Форма.ЕстьДокументУплаты И НЕ НадоВыбратьСпособОплаты;
		Элементы.УплатитьНалогПодменю.Видимость = Не Форма.ДеятельностьОтсутствует И НЕ Форма.ЕстьДокументУплаты И НадоВыбратьСпособОплаты;
		
		Элементы.ДокументУплатыПредставление.Видимость = Не Форма.ДеятельностьОтсутствует И Форма.ЕстьДокументУплаты;
		
		Элементы.ГруппаПодсветкаФона.ЦветФона = Новый Цвет;
		
		Если НужноПодготовитьДекларацию Тогда
			Элементы.ГруппаКоманднаяПанельОплатаПодсветка.ЦветФона = Новый Цвет;
			Если НЕ Форма.РеквизитыОрганизацииЗаполнены Тогда
				Элементы.ГруппаКоманднаяПанельДекларацияПодсветка.ЦветФона = Новый Цвет;
			ИначеЕсли НЕ Форма.ЕстьДекларация Тогда
				Элементы.ГруппаКоманднаяПанельДекларацияПодсветка.ЦветФона = Форма.ЦветПодсветки;
			КонецЕсли;
		Иначе
			Элементы.ГруппаКоманднаяПанельДекларацияПодсветка.ЦветФона = Новый Цвет;
			Элементы.ГруппаКоманднаяПанельОплатаПодсветка.ЦветФона     = Форма.ЦветПодсветки;
		КонецЕсли;
	Иначе
		Элементы.ГруппаПодсветкаФона.ЦветФона = Форма.ЦветПодсветки;
	КонецЕсли;
	
	Если НЕ Форма.МожноСоздаватьДокументыУплаты Тогда
		Элементы.УплатитьНалог.Доступность = Ложь;
		Элементы.УплатитьНалогПодменю.Доступность = Ложь;
	КонецЕсли;
	
	Если НЕ Форма.МожноСоздаватьДекларацию Тогда
		Элементы.СформироватьДекларацию.Доступность = Ложь;
	КонецЕсли;
	
	Если НЕ Форма.МожноАктуализироватьДанные Тогда
		Элементы.АктуализироватьДанныеУчета.Доступность = Ложь;
	КонецЕсли;
	
	Если Форма.СверкаВыполнена Тогда
		Элементы.ВыполнитьСверкуСсылка.Заголовок = Форма.ЗапросНаСверкуНаименование;
		Элементы.ВыполнитьСверкуСсылка.Видимость = Истина;
		Элементы.ВыполнитьСверку.Видимость       = Ложь;
	Иначе
		Элементы.ВыполнитьСверкуСсылка.Видимость = Ложь;
		Элементы.ВыполнитьСверку.Видимость       = Истина;
	КонецЕсли;
	
	ДоступнаСверка = ЗначениеЗаполнено(Форма.Срок)
		И ЗначениеЗаполнено(Форма.Правило);
	Элементы.ВыполнитьСверку.Доступность = ДоступнаСверка;
	Элементы.ПодробнееНаИТС.Видимость = ЗначениеЗаполнено(Объект.Период);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеПоказатели()
	
	СпособОплаты = ВыполнениеЗадачБухгалтера.СпособУплатыНалогаВзноса(Объект.Организация);
	
	Показатели = Обработки.ПомощникРасчетаНалогаУСН.НачальныеПоказатели(Объект.Организация, Объект.Период, СпособОплаты);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Показатели);
	
	ЗаполнитьПравилоИСрокЗадачи();
	
	ПроверитьРеквизитыОрганизацииДляОтчетности();
	
	ПроверитьВедениеДеятельности();
	
	ПолучитьСведенияОСверке();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАктуальныеПоказателиИПояснения()
	
	Результат = Обработки.ПомощникРасчетаНалогаУСН.АктуальныеПоказателиРасчетаСПояснениями(
					Объект.Организация, Объект.Период, СпособОплаты);
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат.Показатели,,
		"УплаченныеСтраховыеВзносы"); // Взносы берутся не из актуальных показателей.
	
	ЗагрузитьПоясненияКРасчету(Результат.Пояснения);
	
	ПланируетсяФоновоеЗадание = Ложь;
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументУплатыНалога()
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = "";
	ОписанияДействий = ОписанияДействий(Объект.Организация, СпособОплаты, Объект.Период, ТекстОшибки);
	ОписаниеДействияПлатеж = ОписанияДействий.Платеж;
	
	Если ОписаниеДействияПлатеж <> Неопределено Тогда
		
		Если ОписаниеДействияПлатеж.Свойство("ИмяФормы") Тогда
			Если ОписаниеДействияПлатеж.ПараметрыФормы.Свойство("ЗначенияЗаполнения") Тогда
				ОписаниеДействияПлатеж.ПараметрыФормы.ЗначенияЗаполнения.Вставить("СуммаДокумента", НалогКУплате);
			КонецЕсли;
		ИначеЕсли ОписаниеДействияПлатеж.Свойство("Вопрос") Тогда
			ОписаниеДействияПлатеж.ДействиеНет.ПараметрыФормы.ЗначенияЗаполнения.Вставить("СуммаДокумента", НалогКУплате);
		КонецЕсли;
		
		ВыполнениеЗадачБухгалтераКлиент.ВыполнитьДействие(ОписаниеДействияПлатеж);
		
	ИначеЕсли Не ПустаяСтрока(ТекстОшибки) Тогда
		ПоказатьПредупреждение(, ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОписанияДействий(Знач Организация, Знач СпособОплаты, Знач Период, ТекстОшибки = "")
	
	ОписанияДействий = УчетУСН.ОписанияДействийПомощника(Организация, СпособОплаты, Период, ТекстОшибки);
	
	Возврат ОписанияДействий;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПоясненияКРасчету(Пояснения)
	
	Для НомерЭтапа = 1 По Пояснения.Количество() Цикл
		
		Этап = Пояснения[НомерЭтапа-1];
		
		Элементы["ГруппаЭтап" + НомерЭтапа].Видимость = Истина;
		
		Элементы["Этап" + НомерЭтапа].Заголовок              = Этап.Пояснение;
		Элементы["Этап" + НомерЭтапа + "Значение"].Заголовок = Этап.Значение;
		
	КонецЦикла;
	
	Для НомерЭтапа = Пояснения.Количество()+1 По 5 Цикл
		
		Элементы["ГруппаЭтап" + НомерЭтапа].Видимость = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПравилоИСрокЗадачи()
	
	Если Не ЗначениеЗаполнено(Объект.Организация)
		ИЛИ Не ЗначениеЗаполнено(Объект.Период) Тогда 
		Срок = '00010101';
		СверкаВыполнена = Ложь;
		Возврат
	КонецЕсли;
	
	// Определяем по статусу задачи срок и правило, необходимые для перехода на статью ИТС и для сверки.
	
	Если ОбъектНалогообложенияДоходы Тогда
		ВидНалога = Перечисления.ВидыНалогов.УСН_Доходы;
	Иначе
		ВидНалога = Перечисления.ВидыНалогов.УСН_ДоходыМинусРасходы;
	КонецЕсли;
	
	ПорядокУплаты = РегистрыСведений.ЗадачиБухгалтера.ПорядокУплатыНалогаЗаПериод(
		Объект.Организация, ВидНалога, КонецКвартала(Объект.Период));
		
	Если ПорядокУплаты <> Неопределено Тогда
		Срок    = ПорядокУплаты.Срок;
		Правило = ПорядокУплаты.Правило;
	Иначе
		Срок    = '00010101';
		Правило = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПустаяСсылка();
		СверкаВыполнена = Ложь;
	КонецЕсли;
	
	ПодсказкаПоНалогу = Обработки.ПомощникРасчетаНалогаУСН.ПодсказкаПоНалогу(НомерКвартала, Срок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьРеквизитыОрганизацииДляОтчетности()
	
	Если ЭтоАдресВременногоХранилища(АдресХранилищаНезаполненныхРеквизитов) Тогда
		УдалитьИзВременногоХранилища(АдресХранилищаНезаполненныхРеквизитов);
		АдресХранилищаНезаполненныхРеквизитов = "";
	КонецЕсли;
	
	Если НомерКвартала <> 4 Тогда
		// Если не нужна декларация, проверять реквизиты не требуется.
		РеквизитыОрганизацииЗаполнены = Истина;
		Возврат;
	КонецЕсли;
	
	НезаполненныеРеквизиты = Неопределено;
	
	РеквизитыОрганизацииЗаполнены = ПроверкаРеквизитовОрганизации.РеквизитыДляОтчетностиЗаполнены(
		ИмяРеглОтчета(), Объект.Организация, Объект.Период, НезаполненныеРеквизиты);
		
	Если НЕ РеквизитыОрганизацииЗаполнены Тогда
		АдресХранилищаНезаполненныхРеквизитов = ПоместитьВоВременноеХранилище(НезаполненныеРеквизиты, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВедениеДеятельности()
	
	ДеятельностьОтсутствует = (Доходы = 0 И АвансовыеПлатежи = 0)
		И Обработки.ПомощникРасчетаНалогаУСН.СведенияОДоходахАктуальны(Объект.Организация, Объект.Период);
	
	Если ДеятельностьОтсутствует Тогда
		ДанныеУчетаАктуальны = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоРегламентированныйОтчетУСН(Знач Ссылка)
	
	Если Не ЗначениеЗаполнено(Ссылка) Или ТипЗнч(Ссылка) <> Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИсточникОтчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ИсточникОтчета");
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоУплатаНалогаУСН(Налог)
	
	ВидыНалогаУСН = Новый Массив;
	ВидыНалогаУСН.Добавить(Перечисления.ВидыНалогов.УСН_Доходы);
	ВидыНалогаУСН.Добавить(Перечисления.ВидыНалогов.УСН_ДоходыМинусРасходы);
	ВидыНалогаУСН.Добавить(Перечисления.ВидыНалогов.УСН_МинимальныйНалог);
	
	Возврат ВидыНалогаУСН.Найти(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Налог, "ВидНалога")) <> Неопределено;
	
КонецФункции

&НаКлиенте
Функция ОбновитьСтатусФоновогоЗадания()
	
	Если ЗначениеЗаполнено(ИдентификаторЗаданияАктуализации) Тогда

		Прогресс = ЗакрытиеМесяцаВызовСервера.ПрочитатьПрогресс(ИдентификаторЗаданияАктуализации);
		Если ТипЗнч(Прогресс) = Тип("Структура") И Прогресс.Свойство("Процент") Тогда
			ПроцентВыполнения = Формат(Мин(Прогресс.Процент, 99), "ЧЦ=2; ЧДЦ=; ЧВН=; ЧГ=0") + "%";
		ИначеЕсли Прав(СтатусФоновогоЗадания, 1) = "%" Тогда
			ПроцентВыполнения = Прав(СтатусФоновогоЗадания, 3);
		Иначе
			ПроцентВыполнения = "";
		КонецЕсли;
		
		СтатусФоновогоЗадания = НСтр("ru = 'Выполняется расчет налога...'") + ПроцентВыполнения;
		
	ИначеЕсли ПланируетсяФоновоеЗадание Или ЗначениеЗаполнено(ИдентификаторЗаданияПроверкиАктуализации) Тогда
		
		СтатусФоновогоЗадания = НСтр("ru = 'Выполняется проверка данных...'");
		
	Иначе
		
		СтатусФоновогоЗадания = "";
		
	КонецЕсли;
	
	ПланируетсяФоновоеЗадание = Ложь;
	УправлениеФормой(ЭтотОбъект);
	
КонецФункции

#Область ВыборПериода

&НаКлиенте
Процедура ПредставлениеПериодаПриИзменении(Элемент)
	
	ЗаполнитьНачальныеПоказатели();
	
	ПередНачаломДлительнойОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НачалоПериода = НачалоГода(Объект.Период);
	КонецПериода  = КонецКвартала(Объект.Период);
	
	ПараметрыВыбора = Новый Структура;
	
	ПараметрыВыбора.Вставить("НачалоПериода", НачалоПериода);
	ПараметрыВыбора.Вставить("КонецПериода",  КонецПериода);
	ПараметрыВыбора.Вставить("НарастающимИтогом", Истина);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериодаКвартал",
		ПараметрыВыбора, Элементы.ПредставлениеПериода, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Период = РезультатВыбора.КонецПериода;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаАктуальностиДанных

&НаКлиенте
Процедура Подключаемый_ПроверитьАктуальностьДанных()
	
	Если Не ПустаяСтрока(СообщениеОбОшибке) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаданиеАктуализации = ЗакрытиеМесяцаВызовСервера.НайтиФоновоеЗаданиеАктуализацииПоОрганизации(Объект.Организация, УникальныйИдентификатор);
	
	Если ЗаданиеАктуализации = Неопределено Или Не ЗначениеЗаполнено(ЗаданиеАктуализации.УникальныйИдентификатор) Тогда
		ПроверитьАктуальностьДанных();
	Иначе
		
		ДанныеУчетаАктуальны = Ложь;
		АктуализацияДляРасчетаНалога = Истина;
		
		Если ИдентификаторЗаданияАктуализации <> ЗаданиеАктуализации.УникальныйИдентификатор Тогда
			// Задание запущено в другой форме
			ЗаданиеЗапущеноВДругойФорме = Истина;
			ИдентификаторЗаданияАктуализации = ЗаданиеАктуализации.УникальныйИдентификатор;
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияАктуализации);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации",
				ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал, Истина);
		Иначе
			ЗаданиеЗапущеноВДругойФорме = Ложь;
		КонецЕсли;
		
		ОбновитьСтатусФоновогоЗадания();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеПроверкиАктуальности()
	
	Если ЗакрытиеМесяцаВызовСервера.ЗаданиеВыполнено(ИдентификаторЗаданияПроверкиАктуализации) Тогда
		ИдентификаторЗаданияПроверкиАктуализации = Неопределено;
		ОбработатьРезультатПроверкиАктуальности();
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияАктуализации);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеПроверкиАктуальности",
			ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал, Истина);
	КонецЕсли;
	
	ОбновитьСтатусФоновогоЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьАктуальностьДанных()
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеПроверкиАктуальности");
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации");
	
	ИдентификаторЗаданияПроверкиАктуализации = Неопределено;
	ИдентификаторЗаданияАктуализации = Неопределено;
	
	УИДЗамера = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Ложь, "АктуализацияДанныхТребуетсяАктуализацияЗаПериод");
	
	ПараметрыПроверки = Новый Структура;
	
	ПараметрыПроверки.Вставить("Организация",                               Объект.Организация);
	ПараметрыПроверки.Вставить("Период",                                    КонецКвартала(Объект.Период));
	ПараметрыПроверки.Вставить("ИдентификаторЗадания",                      ИдентификаторЗаданияПроверкиАктуализации);
	ПараметрыПроверки.Вставить("УникальныйИдентификаторФормы",              ЭтотОбъект.УникальныйИдентификатор);
	ПараметрыПроверки.Вставить("УИДЗамера",                                 УИДЗамера);
	ПараметрыПроверки.Вставить("ПроверятьКонстантуАктуальностиДанныхУчета", Ложь);
	ПараметрыПроверки.Вставить("АктуализироватьВесьПериод",                 Истина);
	
	РезультатВыполнения = ЗакрытиеМесяцаВызовСервера.ПроверитьАктуальность(ПараметрыПроверки);
	
	АдресХранилищаАктуализации = РезультатВыполнения.АдресХранилища;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ИдентификаторЗаданияПроверкиАктуализации = Неопределено;
		ОбработатьРезультатПроверкиАктуальности();
	Иначе
		ИдентификаторЗаданияПроверкиАктуализации = РезультатВыполнения.ИдентификаторЗадания;
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияАктуализации);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеПроверкиАктуальности",
			ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал, Истина);
	КонецЕсли;
	
	ОбновитьСтатусФоновогоЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатПроверкиАктуальности()
	
	ОтключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПроверкиАктуальности");
	
	РезультатПроверки = ПолучитьИзВременногоХранилища(АдресХранилищаАктуализации);
	
	Если РезультатПроверки.УИДЗамера <> Неопределено Тогда
		ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(РезультатПроверки.УИДЗамера);
	КонецЕсли;
	
	ДанныеУчетаАктуальны = Не РезультатПроверки.ТребуетсяАктуализация;
	
	Если ДанныеУчетаАктуальны Тогда
		
		ЗаполнитьАктуальныеПоказателиИПояснения();
		
	ИначеЕсли АктуализацияДляРасчетаНалога
	   И Не ЗаданиеЗапущеноВДругойФорме
	   И ЗначениеЗаполнено(Объект.Организация)
	   И ЗначениеЗаполнено(Объект.Период)
	   И ПустаяСтрока(СообщениеОбОшибке) Тогда
	   
		АктуализироватьДанные();
		
	Иначе
		
		ПланируетсяФоновоеЗадание = Ложь;
		УправлениеФормой(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область АктуализацияДанных

&НаКлиенте
Процедура АктуализироватьДанные()
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеПроверкиАктуальности");
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации");
	
	ИдентификаторЗаданияПроверкиАктуализации = Неопределено;
	ИдентификаторЗаданияАктуализации = Неопределено;
	
	ПараметрыАктуализации = ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыАктуализации();
	ПараметрыАктуализации.Организация                  = Объект.Организация;
	ПараметрыАктуализации.Период                       = КонецКвартала(Объект.Период);
	ПараметрыАктуализации.ИдентификаторЗадания         = ИдентификаторЗаданияАктуализации;
	ПараметрыАктуализации.УникальныйИдентификаторФормы = УникальныйИдентификатор;
	ПараметрыАктуализации.АктуализацияДляРасчетаНалога = АктуализацияДляРасчетаНалога;
	ПараметрыАктуализации.АктуализироватьВесьПериод    = Истина;
	
	РезультатВыполнения = ЗакрытиеМесяцаВызовСервера.АктуализироватьДанные(ПараметрыАктуализации);
	
	АдресХранилищаАктуализации = РезультатВыполнения.АдресХранилища;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ИдентификаторЗаданияАктуализации = Неопределено;
		ОбработатьРезультатАктуализации();
	Иначе
		ИдентификаторЗаданияАктуализации = РезультатВыполнения.ИдентификаторЗадания;
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияАктуализации);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации",
			ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал, Истина);
	КонецЕсли;
	
	ОбновитьСтатусФоновогоЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеАктуализации()
	
	Если ЗакрытиеМесяцаВызовСервера.ЗаданиеВыполнено(ИдентификаторЗаданияАктуализации) Тогда
		ИдентификаторЗаданияАктуализации = Неопределено;
		ОбработатьРезультатАктуализации();
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияАктуализации);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации",
			ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал, Истина);
	КонецЕсли;
	
	ОбновитьСтатусФоновогоЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатАктуализации()
	
	Если ЗаданиеЗапущеноВДругойФорме Тогда
		ПроверитьАктуальностьДанных();
		Возврат;
	КонецЕсли;
	
	РезультатАктуализации = ПолучитьИзВременногоХранилища(АдресХранилищаАктуализации);
	
	Если ТипЗнч(РезультатАктуализации) <> Тип("Структура")
	 Или Не РезультатАктуализации.Свойство("Выполнено") Тогда
		ПроведенАнализВариантаАктуализации = Ложь;
		РезультатАктуализации = ЗакрытиеМесяцаКлиентСервер.НовыйРезультатАктуализации();
	Иначе
		ПроведенАнализВариантаАктуализации = АктуализацияДляРасчетаНалога
			И Не РезультатАктуализации.АктуализацияДляРасчетаНалога;
		АктуализацияДляРасчетаНалога = РезультатАктуализации.АктуализацияДляРасчетаНалога;
	КонецЕсли;
	
	ДанныеУчетаАктуальны = РезультатАктуализации.Выполнено;
	
	Если ДанныеУчетаАктуальны Тогда
		
		ЗаполнитьАктуальныеПоказателиИПояснения();
		Оповестить("АктуализацияЗавершенаУспешно", Новый Структура("Организация", Объект.Организация));
		
	Иначе
		
		Если Не ПроведенАнализВариантаАктуализации Тогда
			// При запуске актуализации мы уже знали, полная она или частичная.
			ЗакрытиеМесяцаКлиент.ПоказатьОшибкиАктуализации(ЭтотОбъект, РезультатАктуализации);
		КонецЕсли;
		
		Оповестить("АктуализацияОтменена", Новый Структура("Организация", Объект.Организация));
		ПланируетсяФоновоеЗадание = Ложь;
		УправлениеФормой(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Сверка

&НаКлиенте
Процедура ОбработатьВыполнениеСверки(РезультатЗакрытия = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПолучитьСведенияОСверке();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСведенияОСверке()
	
	Если Не ЗначениеЗаполнено(Объект.Организация)
		ИЛИ Не ЗначениеЗаполнено(Правило)
		ИЛИ Не ЗначениеЗаполнено(Срок) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыДляСверки       = ПараметрыДляСверки();
	СтруктураСведенийОСверке = ВыполнениеЗадачБухгалтера.СведенияОСверке(ПараметрыДляСверки);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураСведенийОСверке,
		"СверкаВыполнена, ОписаниеДействияСверка, ЗапросНаСверкуНаименование");
	
КонецПроцедуры

&НаСервере
Функция ПараметрыДляСверки()
	
	ПараметрыДляСверки = ВыполнениеЗадачБухгалтера.НовыйПараметрыЗадачиДляСверки();
	ПараметрыДляСверки.Организация = Объект.Организация;
	ПараметрыДляСверки.РегистрацияВНалоговомОргане = РегистрацияВНалоговомОргане;
	ПараметрыДляСверки.Правило = Правило;
	ПараметрыДляСверки.ИдентификаторЗадачи = Правило.Владелец.Код;
	ПараметрыДляСверки.ПериодСобытия =  Объект.Период;
	ПараметрыДляСверки.Срок          = Срок;
	
	Возврат ПараметрыДляСверки;
	
КонецФункции

#КонецОбласти

#КонецОбласти
