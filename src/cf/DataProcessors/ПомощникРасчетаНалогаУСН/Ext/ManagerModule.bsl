#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает структуру с показателями для расчета налога УСН.
// Используется когда данные учета неактуальны (не закрыт квартал)
//
//  Параметры:
//   Организация  - СправочникСсылка.Организации - Организация, для которого нужны показатели.
//   Период       - Дата - Квартал, для которого нужны показатели.
//   СпособОплаты - ПеречислениеСсылка.СпособыУплатыНалогов
//
//  Возвращаемое значение:
//   Показатели - Структура - Поля описаны в функции НовыйПоказатели()
//
Функция НачальныеПоказатели(Организация, Период, СпособОплаты) Экспорт
	
	Показатели = НовыйПоказатели(Организация, Период, СпособОплаты);
	
	Если НЕ ЗначениеЗаполнено(Показатели.СообщениеОбОшибке) Тогда
		
		ЗаполнитьНачальныеПоказатели(Показатели);
		ОпределитьПорядокДействий(Показатели);
		
	КонецЕсли;
	
	
	Возврат Показатели;
	
КонецФункции

// Возвращает структуру с показателями для расчета налога УСН.
// Используется когда данные учета неактуальны (не закрыт квартал)
//
//  Параметры:
//   Организация  - СправочникСсылка.Организации - Организация, для которого нужны показатели.
//   Период       - Дата - Квартал, для которого нужны показатели.
//   СпособОплаты - ПеречислениеСсылка.СпособыУплатыНалогов
//
//  Возвращаемое значение:
//   Результат - Структура, с полями:
//    * Показатели - Структура - Поля описаны в функции НовыйПоказатели()
//    * Пояснения - ТаблицаЗначений - Поля описаны в функции НовыйПоясненияРасчета()
//
Функция АктуальныеПоказателиРасчетаСПояснениями(Организация, Период, СпособОплаты) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Показатели", АктуальныеПоказатели(Организация, Период, СпособОплаты));
	Результат.Вставить("Пояснения",  НовыйПоясненияРасчета());
	
	ЗаполнитьПоясненияКРасчету(Результат.Пояснения, Результат.Показатели);
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру с показателями для расчета налога УСН.
// Используется когда данные учета актуальны (закрыт квартал)
//
//  Параметры:
//   Организация  - СправочникСсылка.Организации - Организация, для которого нужны показатели.
//   Период       - Дата - Квартал, для которого нужны показатели.
//   СпособОплаты - ПеречислениеСсылка.СпособыУплатыНалогов, по умолчанию БанковскийПеревод.
//
//  Возвращаемое значение:
//   Показатели - Структура - Поля описаны в функции НовыйПоказатели()
//
Функция АктуальныеПоказатели(Организация, Период, СпособОплаты = Неопределено) Экспорт
	
	Если СпособОплаты = Неопределено Тогда
		СпособОплаты = Перечисления.СпособыУплатыНалогов.БанковскийПеревод;
	КонецЕсли;
	
	Показатели = НовыйПоказатели(Организация, Период, СпособОплаты);
	
	ЗаполнитьАктуальныеПоказатели(Показатели);
	ОпределитьПорядокДействий(Показатели);
	
	Возврат Показатели;
	
КонецФункции

Функция СведенияОДоходахАктуальны(Организация, Период) Экспорт
	
	Если НЕ УчетнаяПолитика.ПрименяетсяУСН(Организация, Период) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Проверяем весь отчетный период, даже если конец квартала находится "в будущем" относительно текущей даты.
	// Чувствительные к последовательности операции могут быть отражены будущими датами.
	КонецПроверяемогоПериода = КонецКвартала(Период);
	
	ГраницаАктуальности = РаботаСПоследовательностями.МоментНачалаПерепроведенияСУчетомИсключенныхМесяцевИОтложенныхРасчетов(
		Организация, КонецПроверяемогоПериода);
	
	Если ГраницаАктуальности <> Неопределено И ГраницаАктуальности.Дата < КонецПроверяемогоПериода Тогда
		Возврат УчетУСН.ДоходыЗаПериодНеЗависятОтПоследовательности(Организация,
			ГраницаАктуальности.Дата, КонецПроверяемогоПериода);
	Иначе
		Возврат Истина; // Данные периода полностью актуальны.
	КонецЕсли;
	
КонецФункции

Функция ПодсказкаПоНалогу(НомерКвартала, СрокУплаты) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СрокУплаты) Тогда
		Возврат "";
	КонецЕсли;
	
	СодержимоеСтроки = Новый Массив;
	
	Если НомерКвартала <> 4 Тогда
		
		СодержимоеСтроки.Добавить(НСтр("ru = 'Авансовый платеж требуется уплатить '"));
		
	Иначе
		
		СодержимоеСтроки.Добавить(НСтр("ru = 'Подать декларацию и уплатить налог требуется '"));
		
	КонецЕсли;
	
	СодержимоеСтроки.Добавить(СтрШаблон(НСтр("ru = 'не позднее %1'"), Формат(СрокУплаты, "ДЛФ=DD")));
	
	Если НомерКвартала > 1 Тогда
		
		СодержимоеСтроки.Добавить(Символы.ПС + СтрШаблон(НСтр("ru = 'Налог уплачивается за вычетом авансовых платежей за %1.'"),
			ПредставлениеПериодаДляПояснения(НомерКвартала-1)));
		
	КонецЕсли;
	
	Если НомерКвартала <> 4 Тогда
		
		СодержимоеСтроки.Добавить(Символы.ПС + НСтр("ru = 'Декларация по УСН подается только по итогам года.'"));
		
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(СодержимоеСтроки);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПоясненияКРасчету(Пояснения, Показатели)
	
	Если Показатели.ОбъектНалогообложенияДоходы Тогда
		ЗаполнитьПоясненияКРасчетуОбъектДоходы(Пояснения, Показатели);
	Иначе
		ЗаполнитьПоясненияКРасчетуОбъектДоходыМинусРасходы(Пояснения, Показатели);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоясненияКРасчетуОбъектДоходы(ТаблицаЭтапы, Показатели)
	
	ЕстьНаемныеРаботники = Показатели.ПроцентУменьшенияНалога = 50;
	
	ФорматЧиселВПояснении = "ЧДЦ=2; ЧН=0,00; ЧГ=3,0";
	
	НомерКвартала                 = Показатели.НомерКвартала;
	ПредставлениеПериодаПояснение = Показатели.ПредставлениеПериодаПояснение;
	ПредставлениеПериодаАванса    = Показатели.ПредставлениеПериодаАванса;
	СтавкаНалога                  = Строка(Показатели.СтавкаНалога) + "%";
	Доходы                        = Формат(Показатели.Доходы,                  ФорматЧиселВПояснении);
	НалогВсего                    = Формат(Показатели.НалогВсего,              ФорматЧиселВПояснении);
	УменьшениеНалогаФакт          = Формат(Показатели.УменьшениеНалогаФакт,    ФорматЧиселВПояснении);
	РасходыУменьшающиеНалог       = Формат(Показатели.РасходыУменьшающиеНалог, ФорматЧиселВПояснении);
	НалогИсчисленныйВсего         = Формат(Показатели.НалогИсчисленныйВсего,   ФорматЧиселВПояснении);
	АвансовыеПлатежи              = Формат(Показатели.АвансовыеПлатежи,        ФорматЧиселВПояснении);
	НалогКУплате                  = Формат(Показатели.НалогКУплате,            ФорматЧиселВПояснении);
	
	// Этап №1
	Этап = ТаблицаЭтапы.Добавить();
	
	ОсновнойТекст       = СтрШаблон(НСтр("ru = 'Налог за %1 = Доходы * Ставка налога'"), Показатели.ПредставлениеПериода);
	ДополнительныйТекст = СтрШаблон("%1 * %2", Доходы, СтавкаНалога);
	
	Этап.Пояснение = ПояснениеЭтапа(1, ОсновнойТекст, ДополнительныйТекст);
	Этап.Значение  = НалогВсего;
	
	// Этап №2
	Этап = ТаблицаЭтапы.Добавить();
	
	СодержимоеСтроки = Новый Массив;
	СодержимоеСтроки.Добавить(НСтр("ru = 'Налоговый вычет'"));
	
	ДополнительныйТекст = Новый ФорматированнаяСтрока(НСтр("ru = 'расходы, уменьшающие сумму налога'"),,,, "ДоходыЭтап2");
	
	Этап.Пояснение = ПояснениеЭтапа(2, Новый ФорматированнаяСтрока(СодержимоеСтроки), ДополнительныйТекст);
	Этап.Значение  = ?(ЕстьНаемныеРаботники, РасходыУменьшающиеНалог, УменьшениеНалогаФакт);
	
	НомерЭтапа = 3;
	
	Если ЕстьНаемныеРаботники Тогда
	
		// Этап №3 (Необязательный)
		Этап = ТаблицаЭтапы.Добавить();
	
		ПоловинаНалогаСумма = Окр(Показатели.НалогВсего / 2, 2);
		ПоловинаНалога      = Формат(ПоловинаНалогаСумма, ФорматЧиселВПояснении);
		
		ЗнакСравнения = " = ";
		ЗнакСравнения = ?(Показатели.РасходыУменьшающиеНалог < ПоловинаНалогаСумма, " < ", " > ");
		
		ОсновнойТекст       = СтрШаблон(НСтр("ru = 'Сумма к вычету (Налоговый вычет, но не более 50%% от налога за %1)'"), ПредставлениеПериодаПояснение);
		ДополнительныйТекст = РасходыУменьшающиеНалог + ЗнакСравнения + ПоловинаНалога;
		
		Этап.Пояснение = ПояснениеЭтапа(НомерЭтапа, ОсновнойТекст, ДополнительныйТекст);
		Этап.Значение  = УменьшениеНалогаФакт;
		
		НомерЭтапа = 4;
	КонецЕсли;
	
	// Этап №4
	Этап = ТаблицаЭтапы.Добавить();
	
	ОсновнойТекст       = СтрШаблон(НСтр("ru = 'Налог исчисленный = Налог за %1 - Налоговый вычет'"), ПредставлениеПериодаПояснение);
	ДополнительныйТекст = НалогВсего + " - " + УменьшениеНалогаФакт;
	
	Этап.Пояснение = ПояснениеЭтапа(НомерЭтапа, ОсновнойТекст, ДополнительныйТекст);
	Этап.Значение  = НалогИсчисленныйВсего;
	
	НомерЭтапа = НомерЭтапа + 1;
	
	// Этап №5
	Этап = ТаблицаЭтапы.Добавить();
	
	СодержимоеСтроки = Новый Массив;
	СодержимоеСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Налог к уплате'"), Новый Шрифт(,,Истина)));
	
	Если НомерКвартала > 1 Тогда
		
		ТекстАванс = ?(НомерКвартала = 2, НСтр("ru = 'Авансовый платеж'"), НСтр("ru = 'Авансовые платежи'"));
		
		Если НомерКвартала = 4 Тогда
			СодержимоеСтроки.Добавить(СтрШаблон(НСтр("ru = ' = Налог исчисленный - %1 за %2'"), ТекстАванс, ПредставлениеПериодаАванса));
		Иначе
			СодержимоеСтроки.Добавить(СтрШаблон(НСтр("ru = ' = Налог за %1 - %2 за %3'"), ПредставлениеПериодаПояснение, ТекстАванс, ПредставлениеПериодаАванса));
		КонецЕсли;
		
		ДополнительныйТекст = НалогИсчисленныйВсего + " - " + АвансовыеПлатежи;
	Иначе
		ДополнительныйТекст = Неопределено;
	КонецЕсли;
	
	Этап.Пояснение = ПояснениеЭтапа(НомерЭтапа, Новый ФорматированнаяСтрока(СодержимоеСтроки), ДополнительныйТекст);
	Этап.Значение  = Новый ФорматированнаяСтрока(НалогКУплате, Новый Шрифт(,,Истина));
	
КонецПроцедуры

Процедура ЗаполнитьПоясненияКРасчетуОбъектДоходыМинусРасходы(ТаблицаЭтапы, Показатели)
	
	ФорматЧиселВПояснении = "ЧДЦ=2; ЧН=0,00; ЧГ=3,0";
	
	НомерКвартала                 = Показатели.НомерКвартала;
	ПредставлениеПериодаПояснение = Показатели.ПредставлениеПериодаПояснение;
	ПредставлениеПериодаАванса    = Показатели.ПредставлениеПериодаАванса;
	СтавкаНалога                  = "" + Показатели.СтавкаНалога + "%";
	Доходы                        = Формат(Показатели.Доходы,                ФорматЧиселВПояснении);
	Расходы                       = Формат(Показатели.Расходы,               ФорматЧиселВПояснении);
	ПеренесенныеУбытки            = Формат(Показатели.ПеренесенныеУбытки,    ФорматЧиселВПояснении);
	НалоговаяБаза                 = Формат(Показатели.НалоговаяБаза,         ФорматЧиселВПояснении);
	НалогВсего                    = Формат(Показатели.НалогВсего,            ФорматЧиселВПояснении);
	МинимальныйНалог              = Формат(Показатели.МинимальныйНалог,      ФорматЧиселВПояснении);
	НалогИсчисленныйВсего         = Формат(Показатели.НалогИсчисленныйВсего, ФорматЧиселВПояснении);
	АвансовыеПлатежи              = Формат(Показатели.АвансовыеПлатежи,      ФорматЧиселВПояснении);
	НалогКУплате                  = Формат(Показатели.НалогКУплате,          ФорматЧиселВПояснении);
	
	// Этап № 1
	Этап = ТаблицаЭтапы.Добавить();
	
	Если НомерКвартала = 4 Тогда
		ОсновнойТекст       = СтрШаблон(НСтр("ru = 'Налоговая база = Доходы - Расходы - Убытки прошлых лет'"));
		ДополнительныйТекст = Доходы + " - " + Расходы + " - " + ПеренесенныеУбытки;
	Иначе
		ОсновнойТекст       = СтрШаблон(НСтр("ru = 'Налоговая база = Доходы - Расходы'"));
		ДополнительныйТекст = Доходы + " - " + Расходы;
	КонецЕсли;
	
	Этап.Пояснение = ПояснениеЭтапа(1, ОсновнойТекст, ДополнительныйТекст);
	Этап.Значение  = НалоговаяБаза;
	
	// Этап № 2
	Этап = ТаблицаЭтапы.Добавить();
	
	ОсновнойТекст       = СтрШаблон(НСтр("ru = 'Налог за %1 = Налоговая база * Ставка налога'"), ПредставлениеПериодаПояснение);;
	ДополнительныйТекст = НалоговаяБаза + " * " + СтавкаНалога;
	
	Этап.Пояснение = ПояснениеЭтапа(2, ОсновнойТекст, ДополнительныйТекст);
	Этап.Значение  = НалогВсего;
	
	НомерЭтапа = 3;
	
	Если НомерКвартала = 4 Тогда
		
		// Этап № 3 (Необязательный)
		Этап = ТаблицаЭтапы.Добавить();
		
		ОсновнойТекст       = НСтр("ru = 'Минимальный налог = Доходы * 1%'");
		ДополнительныйТекст = Доходы + " * 1%";
		
		Этап.Пояснение = ПояснениеЭтапа(3, ОсновнойТекст, ДополнительныйТекст);
		Этап.Значение  = МинимальныйНалог;
		
		// Этап № 4 (Необязательный)
		Этап = ТаблицаЭтапы.Добавить();
		
		ЗнакСравнения = " = ";
		ЗнакСравнения = ?(Показатели.НалогИсчисленныйВсего < Показатели.МинимальныйНалог, " < ", " > ");
		
		ОсновнойТекст       = НСтр("ru = 'Налог исчисленный (наибольшее значение из Налога за год и Минимального налога)'");
		ДополнительныйТекст = НалогИсчисленныйВсего + ЗнакСравнения + МинимальныйНалог;
		
		Этап.Пояснение = ПояснениеЭтапа(4, ОсновнойТекст, ДополнительныйТекст);
		Этап.Значение  = Формат(Макс(Показатели.НалогИсчисленныйВсего, Показатели.МинимальныйНалог), ФорматЧиселВПояснении);
		
		НомерЭтапа = 5;
	КонецЕсли;
	
	// Этап № 5
	Этап = ТаблицаЭтапы.Добавить();
	
	СодержимоеСтроки = Новый Массив;
	СодержимоеСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Налог к уплате'"), Новый Шрифт(,,Истина)));
	
	Если НомерКвартала > 1 Тогда
		
		ТекстАванс = ?(НомерКвартала = 2, НСтр("ru = 'Авансовый платеж'"), НСтр("ru = 'Авансовые платежи'"));
		
		НалогКУплатеВсего = НалогИсчисленныйВсего;
		
		Если НомерКвартала = 4 Тогда
			СодержимоеСтроки.Добавить(СтрШаблон(НСтр("ru = ' = Налог исчисленный - %1 за %2'"), ТекстАванс, ПредставлениеПериодаАванса));
			
			Если Показатели.НалогИсчисленныйВсего < Показатели.МинимальныйНалог Тогда
				НалогКУплатеВсего = МинимальныйНалог;
			КонецЕсли;
		Иначе
			СодержимоеСтроки.Добавить(СтрШаблон(НСтр("ru = ' = Налог за %1 - %2 за %3'"), ПредставлениеПериодаПояснение, ТекстАванс, ПредставлениеПериодаАванса));
		КонецЕсли;
		
		ДополнительныйТекст = НалогКУплатеВсего + " - " + АвансовыеПлатежи;
	Иначе
		ДополнительныйТекст = Неопределено;
	КонецЕсли;
	
	Этап.Пояснение = ПояснениеЭтапа(НомерЭтапа, Новый ФорматированнаяСтрока(СодержимоеСтроки), ДополнительныйТекст);
	Этап.Значение  = Новый ФорматированнаяСтрока(НалогКУплате, Новый Шрифт(,,Истина));
	
КонецПроцедуры

Процедура ЗаполнитьАктуальныеПоказатели(Показатели)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",   Показатели.Организация);
	Запрос.УстановитьПараметр("НачалоПериода", Показатели.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  Показатели.КонецПериода);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасчетНалогаУСН.ПериодРасчета,
	|	РасчетНалогаУСН.Организация,
	|	РасчетНалогаУСН.ОбъектНалогообложения,
	|	РасчетНалогаУСН.Доходы,
	|	РасчетНалогаУСН.Расходы,
	|	РасчетНалогаУСН.ПеренесенныеУбытки,
	|	РасчетНалогаУСН.НалоговаяБаза,
	|	РасчетНалогаУСН.НалогВсего,
	|	РасчетНалогаУСН.РасходыУменьшающиеНалог,
	|	РасчетНалогаУСН.ПроцентУменьшенияНалога,
	|	РасчетНалогаУСН.УменьшениеНалогаФакт,
	|	РасчетНалогаУСН.НалогИсчисленныйВсего,
	|	РасчетНалогаУСН.МинимальныйНалог,
	|	РасчетНалогаУСН.АвансовыеПлатежи,
	|	ВЫБОР
	|		КОГДА РасчетНалогаУСН.НалогКУплате < 0
	|			ТОГДА 0
	|		ИНАЧЕ РасчетНалогаУСН.НалогКУплате
	|	КОНЕЦ КАК НалогКУплате
	|ИЗ
	|	РегистрСведений.РасчетНалогаУСН КАК РасчетНалогаУСН
	|ГДЕ
	|	РасчетНалогаУСН.Организация = &Организация
	|	И РасчетНалогаУСН.ПериодРасчета МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РасчетНалогаУСН.Активность
	|
	|УПОРЯДОЧИТЬ ПО
	|	РасчетНалогаУСН.ПериодРасчета УБЫВ";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(Показатели, Выборка);
		
		Если НЕ Показатели.ОбъектНалогообложенияДоходы Тогда
			
			Если Показатели.НомерКвартала = 4 Тогда
				Показатели.Расходы             = Показатели.Расходы - Показатели.УбытокОтУплатыМинимальногоНалога;
				Показатели.ПеренесенныеУбытки  = Показатели.ПеренесенныеУбытки + Показатели.УбытокОтУплатыМинимальногоНалога;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Показатели.ОбъектНалогообложенияДоходы И Показатели.НомерКвартала = 4 Тогда
		
		Убытки = УчетУСН.ПеренесенныеУбыткиПрошлыхЛет(Показатели.Организация, Показатели.НачалоПериода, Показатели.КонецПериода);
		
		Показатели.РегистрацияСуммыУбыткаУСН = Убытки.Ссылка;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОпределитьПорядокДействий(Показатели)
	
	ОписанияДействий = УчетУСН.ОписанияДействийПомощника(Показатели.Организация, Показатели.СпособОплаты, Показатели.КонецПериода);
	
	ОписаниеДействияДекларация = ОписанияДействий.Декларация;
	ОписаниеДействияПлатеж     = ОписанияДействий.Платеж;
	
	Показатели.ЕстьДекларация = ЗначениеЗаполнено(ОписаниеДействияДекларация)
		И ОписаниеДействияДекларация.Свойство("ИмяФормы")
		И ОписаниеДействияДекларация.Свойство("ПараметрыФормы")
		И ОписаниеДействияДекларация.ПараметрыФормы.Свойство("Ключ", Показатели.Декларация);
	
	Показатели.ЕстьДокументУплаты = ЗначениеЗаполнено(ОписаниеДействияПлатеж)
		И ОписаниеДействияПлатеж.Свойство("ИмяФормы")
		И ОписаниеДействияПлатеж.Свойство("ПараметрыФормы")
		И ОписаниеДействияПлатеж.ПараметрыФормы.Свойство("Ключ", Показатели.ДокументУплаты);
	
	ПроверитьСоответствиеСумм(Показатели.НалогКУплате, Показатели.Декларация, Показатели.ДокументУплаты,
		Показатели.ОшибкаНесоответствиеСуммДекларация, Показатели.ОшибкаНесоответствиеСуммОплата, Показатели.НомерКвартала = 4);
	
	Если ЗначениеЗаполнено(Показатели.Декларация) Тогда
		
		СвойстваДекларации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Показатели.Декларация,
			"НаименованиеОтчета, ПредставлениеПериода");
		
		Показатели.ДекларацияПредставление = СтрШаблон(НСтр("ru = '%1 за %2 %3'"),
			СвойстваДекларации.НаименованиеОтчета,
			СвойстваДекларации.ПредставлениеПериода);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Показатели.ДокументУплаты) Тогда
		
		СвойстваДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Показатели.ДокументУплаты, "Номер, Дата");
		
		Показатели.ДокументУплатыПредставление = СтрШаблон(НСтр("ru = '%1 %2 от %3 %4'"),
			Показатели.ДокументУплаты.Метаданные().Синоним,
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(СвойстваДокумента.Номер, Истина, Ложь),
			Формат(СвойстваДокумента.Дата, "ДЛФ=D"));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНачальныеПоказатели(Показатели)
	
	Организация   = Показатели.Организация;
	НомерКвартала = Показатели.НомерКвартала;
	НачалоПериода = Показатели.НачалоПериода;
	КонецПериода  = Показатели.КонецПериода;
	
	Если Показатели.ОбъектНалогообложенияДоходы Тогда
		
		Показатели.УплаченныеСтраховыеВзносы = УплаченныеСтраховыеВзносы(Организация, НачалоПериода, КонецПериода);
		
	ИначеЕсли НомерКвартала = 4 Тогда // Подготовка декларации
		
		Убытки = УчетУСН.ПеренесенныеУбыткиПрошлыхЛет(Организация, НачалоПериода, КонецПериода);
		
		Показатели.УбытокОтУплатыМинимальногоНалога = Убытки.УбытокОтУплатыМинимальногоНалога;
		Показатели.РегистрацияСуммыУбыткаУСН        = Убытки.Ссылка;
		Показатели.ПеренесенныеУбытки               = Убытки.ПеренесенныеУбытки + Убытки.УбытокОтУплатыМинимальногоНалога;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  Новый Граница(КонецПериода, ВидГраницы.Включая));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КнигаУчетаДоходовИРасходовОбороты.Графа5Оборот КАК Доходы,
	|	КнигаУчетаДоходовИРасходовОбороты.Графа7Оборот КАК Расходы
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачалоПериода, &КонецПериода, , Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОбороты";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Показатели.Доходы  = Выборка.Доходы;
		Показатели.Расходы = Выборка.Расходы;
	Иначе
		Показатели.Доходы  = 0;
		Показатели.Расходы = 0;
	КонецЕсли;
	
	//Предыдущие авансовые платежи
	Если НомерКвартала > 1 Тогда
		Показатели.АвансовыеПлатежи = ПредыдущиеАвансовыеПлатежи(Организация, НачалоПериода, КонецПериода);
	Иначе
		Показатели.АвансовыеПлатежи = 0;
	КонецЕсли;
	
КонецПроцедуры

Функция УплаченныеСтраховыеВзносы(Организация, НачалоПериода, КонецПериода)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СчетаСтраховыхВзносов", УчетРасходовУменьшающихОтдельныеНалоги.СчетаСтраховыхВзносовУменьшающихНалог());
	Запрос.УстановитьПараметр("Организация",           Организация);
	Запрос.УстановитьПараметр("НачалоПериода",         НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",          КонецПериода);
	Запрос.УстановитьПараметр("ВидыПлатежей",          Перечисления.ВидыПлатежейВГосБюджет.ВидыНалоговыхПлатежей());
	
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизации); // 50.01
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);   // 51
	
	УсловияОтбора = БухгалтерскийУчет.НовыеУсловияОтбораСубсчетов();
	УсловияОтбора.Забалансовый = Ложь;
	
	Запрос.УстановитьПараметр("СчетаУчетаДС", БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(МассивСчетов, УсловияОтбора));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(ХозрасчетныйОборотыДтКт.СуммаОборот) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Регистратор,
	|			СчетДт В (&СчетаСтраховыхВзносов),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
	|			СчетКт В (&СчетаУчетаДС),
	|			,
	|			Организация = &Организация
	|				И СубконтоДт1 В (&ВидыПлатежей)) КАК ХозрасчетныйОборотыДтКт";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Сумма, 0);
	
КонецФункции

Функция ПредыдущиеАвансовыеПлатежи(Организация, НачалоПериода, КонецПериода)
	
	СчетОтраженияНалога  = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД; // Дт 99.01.1
	СчетНачисленияНалога = ПланыСчетов.Хозрасчетный.ЕНприУСН;             // Кт 68.12
	
	ГраницаПредыдущегоКвартала = Новый Граница(КонецКвартала(ДобавитьМесяц(КонецПериода, -3)), ВидГраницы.Включая);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",              Организация);
	Запрос.УстановитьПараметр("НачалоПериода",            Новый Граница(НачалоПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КонецПредыдущегоКвартала", ГраницаПредыдущегоКвартала);
	Запрос.УстановитьПараметр("СчетНачисленияНалога",     СчетНачисленияНалога);
	Запрос.УстановитьПараметр("СчетОтраженияНалога",      СчетОтраженияНалога);
	Запрос.УстановитьПараметр("ВидыПлатежей",             Перечисления.ВидыПлатежейВГосБюджет.ВидыНалоговыхПлатежей());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(ХозрасчетныйОборотыДтКт.СуммаОборот, 0)) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачалоПериода,
	|			&КонецПредыдущегоКвартала,
	|			,
	|			СчетДт = &СчетОтраженияНалога,
	|			,
	|			СчетКт = &СчетНачисленияНалога,
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
	|			Организация = &Организация
	|				И СубконтоКт1 В (&ВидыПлатежей)) КАК ХозрасчетныйОборотыДтКт";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Сумма, 0);
	
КонецФункции

Функция ПояснениеЭтапа(НомерЭтапа, ОсновнойТекст, ДополнительныйТекст = Неопределено)
	
	СодержимоеСтроки = Новый Массив;
	
	СодержимоеСтроки.Добавить(Строка(НомерЭтапа) + ". ");
	СодержимоеСтроки.Добавить(ОсновнойТекст);
	
	Если ДополнительныйТекст <> Неопределено Тогда
		СодержимоеСтроки.Добавить(Символы.ПС + "    (");
		СодержимоеСтроки.Добавить(ДополнительныйТекст);
		СодержимоеСтроки.Добавить(")");
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(СодержимоеСтроки);
	
КонецФункции

Процедура ПроверитьСоответствиеСумм(НалогКУплате, Декларация,
	ДокументУплаты, ТекстОшибкиДекларация, ТекстОшибкиОплата, ПроверятьСуммуДекларации)
	
	ФорматЧисел = "ЧДЦ=2; ЧН=0,00; ЧГ=3,0";
	
	Если ЗначениеЗаполнено(ДокументУплаты) Тогда
		
		СуммаВДокументе = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументУплаты, "СуммаДокумента");
		
		Если СуммаВДокументе <> НалогКУплате Тогда
			Шаблон = НСтр("ru = 'Сумма в документе (%1) отличается от рассчитанной'");
			ТекстОшибкиОплата = СтрШаблон(Шаблон, Формат(СуммаВДокументе, ФорматЧисел));
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Декларация) И ПроверятьСуммуДекларации Тогда
		
		ДанныеДекларации = Отчеты.РегламентированныйОтчетУСН.ДанныеРеглОтчета(Декларация);
		
		Если ТипЗнч(ДанныеДекларации) = Тип("ТаблицаЗначений") И ДанныеДекларации.Колонки.Найти("Сумма") <> Неопределено Тогда
			
			СуммаВДекларации = ДанныеДекларации.Итог("Сумма");
			
			Если СуммаВДекларации <> НалогКУплате Тогда
				Шаблон = НСтр("ru = 'Сумма в декларации (%1) отличается от рассчитанной'");
				ТекстОшибкиДекларация = СтрШаблон(Шаблон, Формат(СуммаВДекларации, ФорматЧисел));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ОрганизацияПлательщикУСН(Организация, Период)
	
	ПлательщикУСН = УчетнаяПолитика.ПрименяетсяУСН(Организация, Период);
	
	Если ЗначениеЗаполнено(Организация) И Не ПлательщикУСН Тогда
		СообщениеОбОшибке = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Организация не применяет УСН.'"),
			" ",
			НСтр("ru = 'Измените настройки'"),
			" ",
			Новый ФорматированнаяСтрока(НСтр("ru = 'системы налогообложения'"), , , , "УчетнаяПолитикаОрганизации"), ".");
	Иначе
		СообщениеОбОшибке = "";
	КонецЕсли;
	
	Возврат СообщениеОбОшибке;
	
КонецФункции

Функция СообщениеТребуютсяРеквизиты(Организация, НомерКвартала)
	
	Если НЕ ЗначениеЗаполнено(Организация)
			ИЛИ НомерКвартала <> 4 Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат ПроверкаРеквизитовОрганизации.СтрокаСообщенияНеЗаполненыРеквизитыДляОтчетности(Организация);
	
КонецФункции

Функция ПредставлениеПериодаДляПояснения(НомерКвартала)
	
	ПредставлениеПериодаДляПояснения = "";
	
	Если НомерКвартала = 1 Тогда
		ПредставлениеПериодаДляПояснения = НСтр("ru = '1 квартал'");
	ИначеЕсли НомерКвартала = 2 Тогда
		ПредставлениеПериодаДляПояснения = НСтр("ru = '1 полугодие'");
	ИначеЕсли НомерКвартала = 3 Тогда
		ПредставлениеПериодаДляПояснения = НСтр("ru = '9 месяцев'");
	ИначеЕсли НомерКвартала = 4 Тогда
		ПредставлениеПериодаДляПояснения = НСтр("ru = 'год'");
	КонецЕсли;
	
	Возврат ПредставлениеПериодаДляПояснения;
	
КонецФункции

#Область Конструкторы

Функция НовыйПоказатели(Организация, Период, СпособОплаты)
	
	Показатели = Новый Структура;
	
	// Параметры
	Показатели.Вставить("Организация",   Организация);
	Показатели.Вставить("СпособОплаты",  СпособОплаты);
	Показатели.Вставить("НачалоПериода", НачалоГода(Период));
	Показатели.Вставить("КонецПериода",  КонецКвартала(Период));
	Показатели.Вставить("НомерКвартала", Месяц(КонецКвартала(Период))/3);
	
	// Ошибки
	Показатели.Вставить("СообщениеОбОшибке",                   ОрганизацияПлательщикУСН(Организация, Период));
	
	Показатели.Вставить("ОшибкаНесоответствиеСуммДекларация",  "");
	Показатели.Вставить("ОшибкаНесоответствиеСуммОплата",      "");
	
	Показатели.Вставить("СообщениеТребуютсяРеквизиты", СообщениеТребуютсяРеквизиты(Организация, Показатели.НомерКвартала));
	
	// Учетная политика
	Показатели.Вставить("СтавкаНалога",                УчетнаяПолитика.СтавкаНалогаУСН(Организация, Период));
	Показатели.Вставить("СтавкаНалогаПредставление",   "" + Формат(Показатели.СтавкаНалога, "ЧН=0; БЛ=") + "%"
		+ ?(УчетнаяПолитика.НалоговыеКаникулыУСН(Организация, Период), " " + НСтр("ru = '(налоговые каникулы)'"), ""));
	Показатели.Вставить("ОбъектНалогообложенияДоходы", УчетнаяПолитика.ПрименяетсяУСНДоходы(Организация, Период));
	
	// Представление периода
	Показатели.Вставить("ПредставлениеПериодаПояснение", ПредставлениеПериодаДляПояснения(Показатели.НомерКвартала));
	Показатели.Вставить("ПредставлениеПериодаАванса",    ПредставлениеПериодаДляПояснения(Показатели.НомерКвартала - 1));
	Показатели.Вставить("ПредставлениеПериода",
		БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(Показатели.НачалоПериода, Показатели.КонецПериода, Истина));
	Показатели.Вставить("ПодсказкаПоНалогу",             "");
	
	// Действия помощника
	Показатели.Вставить("ЕстьДекларация",              Ложь);
	Показатели.Вставить("ЕстьДокументУплаты",          Ложь);
	Показатели.Вставить("Декларация",                  Документы.РегламентированныйОтчет.ПустаяСсылка());
	Показатели.Вставить("ДекларацияПредставление",     "");
	Показатели.Вставить("ДокументУплаты",              Неопределено);
	Показатели.Вставить("ДокументУплатыПредставление", "");
	Показатели.Вставить("РегистрацияСуммыУбыткаУСН",   Документы.РегистрацияСуммыУбыткаУСН.ПустаяСсылка());
	
	// Суммы
	Показатели.Вставить("Доходы",                           0);
	Показатели.Вставить("Расходы",                          0);
	Показатели.Вставить("НалоговаяБаза",                    0);
	Показатели.Вставить("НалогВсего",                       0);
	Показатели.Вставить("НалогКУплате",                     0);
	Показатели.Вставить("РасходыУменьшающиеНалог",          0);
	Показатели.Вставить("ПроцентУменьшенияНалога",          0);
	Показатели.Вставить("УменьшениеНалогаФакт",             0);
	Показатели.Вставить("НалогИсчисленныйВсего",            0);
	Показатели.Вставить("МинимальныйНалог",                 0);
	Показатели.Вставить("ПеренесенныеУбытки",               0);
	Показатели.Вставить("АвансовыеПлатежи",                 0);
	Показатели.Вставить("УплаченныеСтраховыеВзносы",        0);
	Показатели.Вставить("УбытокОтУплатыМинимальногоНалога", 0);
	
	Возврат Показатели;
	
КонецФункции

Функция НовыйПоясненияРасчета()
	
	Пояснения = Новый ТаблицаЗначений;
	
	Пояснения.Колонки.Добавить("Пояснение");
	Пояснения.Колонки.Добавить("Значение");
	
	Возврат Пояснения;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли