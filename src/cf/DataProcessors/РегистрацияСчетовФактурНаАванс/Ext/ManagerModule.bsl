#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// ПРОЦЕДУРЫ ЗАПОЛНЕНИЯ

// Возвращает структуру параметров, которые используются при заполнении
//
Функция ПараметрыЗаполнения() Экспорт

	Результат = Новый Структура();
	Результат.Вставить("Организация", 	Справочники.Организации.ПустаяСсылка());
	Результат.Вставить("НачалоПериода", '0001-01-01');
	Результат.Вставить("КонецПериода", 	'0001-01-01');
		
	Возврат Результат;

КонецФункции

Процедура ПодготовитьДанныеДляЗаполнения(СтруктураПараметров, АдресХранилища) Экспорт

	ДанныеДляЗаполнения = Новый Структура;

	Список = ЗаполнитьСтроки(СтруктураПараметров);
	ДанныеДляЗаполнения.Вставить("Список", Список);

	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);

КонецПроцедуры

Функция ТипыДокументовАванса() Экспорт

	Структура_ТипыДокументовАванса = Новый Структура;
	Структура_ТипыДокументовАванса.Вставить("ВозвратТоваровОтПокупателя",    Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"));
	Структура_ТипыДокументовАванса.Вставить("ДокументРасчетовСКонтрагентом", Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") );
	Структура_ТипыДокументовАванса.Вставить("КорректировкаДолга",    		 Тип("ДокументСсылка.КорректировкаДолга"));
	Структура_ТипыДокументовАванса.Вставить("КорректировкаРеализации",       Тип("ДокументСсылка.КорректировкаРеализации"));
	Структура_ТипыДокументовАванса.Вставить("ПоступлениеНаРасчетныйСчет",    Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет"));
	Структура_ТипыДокументовАванса.Вставить("ПриходныйКассовыйОрдер",     	 Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
	Структура_ТипыДокументовАванса.Вставить("ОплатаПлатежнойКартой",     	 Тип("ДокументСсылка.ОплатаПлатежнойКартой"));
	Структура_ТипыДокументовАванса.Вставить("ОтчетОРозничныхПродажах",		 Тип("ДокументСсылка.ОтчетОРозничныхПродажах"));
	
	ТипДокументаАвизо = Новый Массив;
	УчетОбособленныхПодразделений.ДобавитьТипДокументаОбособленныхПодразделений(ТипДокументаАвизо, "АвизоРасчетыВходящее");
	Если ТипДокументаАвизо.Количество() <> 0 Тогда
		Структура_ТипыДокументовАванса.Вставить("АвизоРасчетыВходящее", ТипДокументаАвизо[0]);
	КонецЕсли; 
	
	Возврат Структура_ТипыДокументовАванса;

КонецФункции

// Возвращает таблицу значений, колонки которой совпадают с колонками табличной части обработки.
//
// Параметры:
//	СтруктураПараметров - Структура - Содержит значения параметров для заполнения.
//										см. ПараметрыЗаполнения()
//
Функция ЗаполнитьСтроки(СтруктураПараметров) Экспорт

	ОбработкаОбъект = Обработки.РегистрацияСчетовФактурНаАванс.Создать();
	ТаблицаРезультатов = ОбработкаОбъект.Список.Выгрузить();

	ПорядокРегистрацииСчетовФактурНаАванс = УчетнаяПолитика.ПорядокРегистрацииСчетовФактурНаАванс(
		СтруктураПараметров.Организация, СтруктураПараметров.КонецПериода);

	СоответствиеСтавок = Новый Соответствие();
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10, Перечисления.СтавкиНДС.НДС10_110);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18, Перечисления.СтавкиНДС.НДС18_118);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20, Перечисления.СтавкиНДС.НДС20_120);

	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

	Структура_ТипыДокументовАванса = ТипыДокументовАванса();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("ТекущийПорядокРегистрацииСчетовФактурНаАванс", ПорядокРегистрацииСчетовФактурНаАванс);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);

	МассивСчетовАвансов = Новый Массив();
	МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным); // 62.02
	МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымВал); // 62.22
	МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымУЕ); // 62.32
	// Движения по курсовым разницам не должны вызывать регистрации аванса
	Запрос.УстановитьПараметр("МассивСчетовАвансов", МассивСчетовАвансов);

	СубконтоСчРасчетов_ЕстьДР = Новый Массив();
	СубконтоСчРасчетов_ЕстьДР.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	СубконтоСчРасчетов_ЕстьДР.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	СубконтоСчРасчетов_ЕстьДР.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	Запрос.УстановитьПараметр("СубконтоСчРасчетов_ЕстьДР", СубконтоСчРасчетов_ЕстьДР);

	Запрос.УстановитьПараметр("КонецПериода", Новый Граница(КонецДня(СтруктураПараметров.КонецПериода), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(СтруктураПараметров.НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериодаДата", КонецДня(СтруктураПараметров.КонецПериода));

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ УсловиеСчета
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&МассивСчетовАвансов)
	|	И Хозрасчетный.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСконтрагентами)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиУчетаНДС.Период КАК ПериодДействияС,
	|	НастройкиУчетаНДС.ПорядокРегистрацииСчетовФактурНаАванс,
	|	МИНИМУМ(ЕСТЬNULL(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НастройкиУчетаНДС1.Период, ДЕНЬ, -1), ДЕНЬ), КОНЕЦПЕРИОДА(&КонецПериодаДата, ГОД))) КАК ПериодДействияПо
	|ПОМЕСТИТЬ УчетнаяПолитикаПериоды
	|ИЗ
	|	РегистрСведений.НастройкиУчетаНДС КАК НастройкиУчетаНДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаНДС КАК НастройкиУчетаНДС1
	|		ПО НастройкиУчетаНДС.Период < НастройкиУчетаНДС1.Период
	|			И (НастройкиУчетаНДС1.Организация = &Организация)
	|			И (НастройкиУчетаНДС1.Период <= &КонецПериодаДата)
	|ГДЕ
	|	НастройкиУчетаНДС.Организация = &Организация
	|	И НастройкиУчетаНДС.Период <= &КонецПериодаДата
	|
	|СГРУППИРОВАТЬ ПО
	|	НастройкиУчетаНДС.ПорядокРегистрацииСчетовФактурНаАванс,
	|	НастройкиУчетаНДС.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстаткиИОбороты.Период КАК Период,
	|	ХозрасчетныйОстаткиИОбороты.Организация,
	|	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Контрагент,
	|	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК ДоговорКонтрагента,
	|	ХозрасчетныйОстаткиИОбороты.Субконто3 КАК ДокументОснование,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстаткиИОбороты.Счет.Валютный
	|				И НЕ ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаКонечныйОстаток ЕСТЬ NULL 
	|			ТОГДА ХозрасчетныйОстаткиИОбороты.Валюта
	|		ИНАЧЕ &ВалютаРегламентированногоУчета
	|	КОНЕЦ КАК ВалютаРасчетов,
	|	-1 * ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстаток КАК КонечныйОстаток,
	|	-1 * ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстаток КАК НачальныйОстаток,
	|	-1 * ВЫБОР
	|		КОГДА ХозрасчетныйОстаткиИОбороты.Счет.Валютный
	|				И ЕСТЬNULL(ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаНачальныйОстаток, 0) <> 0
	|			ТОГДА ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаНачальныйОстаток
	|		ИНАЧЕ ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстаток
	|	КОНЕЦ КАК ВалютныйНачальныйОстаток,
	|	-1 * ВЫБОР
	|		КОГДА ХозрасчетныйОстаткиИОбороты.Счет.Валютный
	|				И ЕСТЬNULL(ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаКонечныйОстаток, 0) <> 0
	|			ТОГДА ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаКонечныйОстаток
	|		ИНАЧЕ ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстаток
	|	КОНЕЦ КАК ВалютныйКонечныйОстаток,
	|	ВЫРАЗИТЬ(ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Справочник.ДоговорыКонтрагентов).РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах
	|ПОМЕСТИТЬ ХозрасчетныйОстатки
	|ИЗ
	|	УсловиеСчета КАК УсловиеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, День, , , &СубконтоСчРасчетов_ЕстьДР, Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
	|		ПО УсловиеСчета.Ссылка = ХозрасчетныйОстаткиИОбороты.Счет
	|ГДЕ
	|	(ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстаток < 0
	|			ИЛИ ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстаток < 0)
	|ИНДЕКСИРОВАТЬ ПО
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АвансыПоДоговорамКомиссии.Период,
	|	АвансыПоДоговорамКомиссии.ДатаСобытия КАК ДатаСобытия,
	|	АвансыПоДоговорамКомиссии.Организация,
	|	АвансыПоДоговорамКомиссии.Покупатель КАК Контрагент,
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК ДоговорКонтрагента,
	|	АвансыПоДоговорамКомиссии.СтавкаНДС КАК СтавкаНДС,
	|	АвансыПоДоговорамКомиссии.СчетФактура КАК ДокументОснование,
	|	&ВалютаРегламентированногоУчета КАК ВалютаРасчетов,
	|	АвансыПоДоговорамКомиссии.СуммаБезНДСКонечныйОстаток + АвансыПоДоговорамКомиссии.НДСКонечныйОстаток КАК КонечныйОстаток,
	|	АвансыПоДоговорамКомиссии.СуммаБезНДСНачальныйОстаток + АвансыПоДоговорамКомиссии.НДСНачальныйОстаток КАК НачальныйОстаток,
	|	АвансыПоДоговорамКомиссии.СуммаБезНДСНачальныйОстаток + АвансыПоДоговорамКомиссии.НДСНачальныйОстаток КАК ВалютныйНачальныйОстаток,
	|	АвансыПоДоговорамКомиссии.СуммаБезНДСКонечныйОстаток + АвансыПоДоговорамКомиссии.НДСКонечныйОстаток КАК ВалютныйКонечныйОстаток,
	|	ЛОЖЬ КАК РасчетыВУсловныхЕдиницах,
	|	&ТекущийПорядокРегистрацииСчетовФактурНаАванс КАК ПорядокРегистрацииСчетовФактурНаАванс
	|ПОМЕСТИТЬ ВТРасчеты
	|ИЗ
	|	РегистрНакопления.НДСАвансыПоДоговорамКомиссии.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, День, , Организация = &Организация) КАК АвансыПоДоговорамКомиссии
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Период,
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	ХозрасчетныйОстатки.Организация,
	|	ХозрасчетныйОстатки.Контрагент,
	|	ХозрасчетныйОстатки.ДоговорКонтрагента,
	|	NULL,
	|	ХозрасчетныйОстатки.ДокументОснование,
	|	ХозрасчетныйОстатки.ВалютаРасчетов,
	|	ХозрасчетныйОстатки.КонечныйОстаток,
	|	ХозрасчетныйОстатки.НачальныйОстаток,
	|	ХозрасчетныйОстатки.ВалютныйНачальныйОстаток,
	|	ХозрасчетныйОстатки.ВалютныйКонечныйОстаток,
	|	ХозрасчетныйОстатки.РасчетыВУсловныхЕдиницах,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.ДоговорКонтрагента.ПорядокРегистрацииСчетовФактурНаАвансПоДоговору = ЗНАЧЕНИЕ(Перечисление.ПорядокРегистрацииСчетовФактурНаАванс.ПустаяСсылка)
	|				ИЛИ ХозрасчетныйОстатки.ДоговорКонтрагента.ПорядокРегистрацииСчетовФактурНаАвансПоДоговору ЕСТЬ NULL 
	|			ТОГДА ЕСТЬNULL(УчетнаяПолитикаПериоды.ПорядокРегистрацииСчетовФактурНаАванс, &ТекущийПорядокРегистрацииСчетовФактурНаАванс)
	|		ИНАЧЕ ХозрасчетныйОстатки.ДоговорКонтрагента.ПорядокРегистрацииСчетовФактурНаАвансПоДоговору
	|	КОНЕЦ
	|ИЗ
	|	ХозрасчетныйОстатки КАК ХозрасчетныйОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ УчетнаяПолитикаПериоды КАК УчетнаяПолитикаПериоды
	|		ПО (УчетнаяПолитикаПериоды.ПериодДействияС <= ХозрасчетныйОстатки.Период)
	|			И (УчетнаяПолитикаПериоды.ПериодДействияПо >= ХозрасчетныйОстатки.Период)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АвансыПоДоговорамКомиссии.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Расчеты.Период КАК Период,
	|	Расчеты.Организация,
	|	Расчеты.Контрагент,
	|	Расчеты.ДоговорКонтрагента,
	|	Расчеты.ДокументОснование,
	|	Расчеты.ВалютаРасчетов,
	|	0 КАК СуммаАванса,
	|	0 КАК ВалютнаяСуммаАванса,
	|	Расчеты.КонечныйОстаток,
	|	Расчеты.НачальныйОстаток,
	|	Расчеты.ВалютныйКонечныйОстаток,
	|	Расчеты.ВалютныйНачальныйОстаток,
	|	Расчеты.РасчетыВУсловныхЕдиницах,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаВыписки,
	|	Расчеты.ПорядокРегистрацииСчетовФактурНаАванс,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК КонецНалоговогоПериода,
	|	Расчеты.ДатаСобытия,
	|	Расчеты.СтавкаНДС,
	|	ЕСТЬNULL(РеквизитыДокументовОплаты.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК ДокументАвансаДата
	|ИЗ
	|	ВТРасчеты КАК Расчеты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументовОплаты
	|		ПО (РеквизитыДокументовОплаты.Организация = &Организация)
	|			И Расчеты.ДокументОснование = РеквизитыДокументовОплаты.Документ
	|ГДЕ
	|	ВЫБОР
	|			КОГДА Расчеты.ПорядокРегистрацииСчетовФактурНаАванс = ЗНАЧЕНИЕ(Перечисление.ПорядокРегистрацииСчетовФактурНаАванс.НеРегистрироватьСчетаФактурыНаАвансы)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";

	Если Структура_ТипыДокументовАванса.Количество() > 0 Тогда
		
		ОграничениеТиповДокументов = "";

		Для Каждого ТипДокументовАванса Из Структура_ТипыДокументовАванса Цикл
			ОграничениеТиповДокументов = ОграничениеТиповДокументов + ?(ПустаяСтрока(ОграничениеТиповДокументов),
				" И ( ", " ИЛИ ") + "Субконто3 ССЫЛКА Документ." + ТипДокументовАванса.Ключ;
		КонецЦикла;

		ОграничениеТиповДокументов = ОграничениеТиповДокументов+") ";

		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			", Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты", 
			", Организация = &Организация " + ОграничениеТиповДокументов + ") КАК ХозрасчетныйОстаткиИОбороты");
			
	КонецЕсли;
	
	ТаблицаАвансовТекущая = Запрос.Выполнить().Выгрузить();
	
	Авансы = ТаблицаАвансовТекущая.Скопировать(, "ДокументОснование, Контрагент, ДатаСобытия, СтавкаНДС, ДоговорКонтрагента");
	Авансы.Свернуть("ДокументОснование, Контрагент, ДатаСобытия, СтавкаНДС, ДоговорКонтрагента");
	
	ТаблицаАвансовТекущая.Колонки.Добавить("СчетФактура", Новый ОписаниеТипов("ДокументСсылка.СчетФактураВыданный"));
	ОпределитьРанееВыписанныеСчетаФактуры(ТаблицаАвансовТекущая);

	ТаблицаАвансовТекущая.Индексы.Добавить("ДокументОснование, Контрагент, ДатаСобытия, СтавкаНДС");
	ТаблицаАвансов = ТаблицаАвансовТекущая.СкопироватьКолонки();

	ПоискПартии = Новый Структура("ДокументОснование, Контрагент, ДатаСобытия, СтавкаНДС, ДоговорКонтрагента");

	Для	Каждого Аванс Из Авансы Цикл

		ЗаполнитьЗначенияСвойств(ПоискПартии, Аванс);
		Таблица = ТаблицаАвансовТекущая.НайтиСтроки(ПоискПартии);

		ПорядокРегистрацииСчетовФактурНаАванс = Таблица[0].ПорядокРегистрацииСчетовФактурНаАванс;
		
		Для	Каждого Строка Из Таблица Цикл
			
			Если ТипЗнч(Строка.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
				ДатаПоступленияАванса = Строка.ДатаСобытия;
			Иначе	
				ДатаПоступленияАванса = Строка.ДокументАвансаДата;
			КонецЕсли;	
			
			// Вычислим крайнюю дату зачета аванса
			Если ПорядокРегистрацииСчетовФактурНаАванс = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.КромеЗачтенныхВТечениеПятиДней Тогда
				Если КонецДня(ДатаПоступленияАванса + 345600) > КонецКвартала(ДатаПоступленияАванса) Тогда
					ДатаЗачетаАванса = КонецКвартала(ДатаПоступленияАванса);
				Иначе
					ДатаЗачетаАванса = КонецДня(ДатаПоступленияАванса + 345600);
				КонецЕсли;
			ИначеЕсли ПорядокРегистрацииСчетовФактурНаАванс = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.КромеЗачтенныхВТечениеМесяца Тогда
				ДатаЗачетаАванса = КонецМесяца(ДатаПоступленияАванса);
			ИначеЕсли ПорядокРегистрацииСчетовФактурНаАванс = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.КромеЗачтенныхВТечениеНалоговогоПериода Тогда
				ДатаЗачетаАванса = КонецКвартала(ДатаПоступленияАванса);
			ИначеЕсли ПорядокРегистрацииСчетовФактурНаАванс = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.НаВсеАвансы Тогда
				ДатаЗачетаАванса = КонецДня(ДатаПоступленияАванса);
			Иначе
				ДатаЗачетаАванса = КонецДня(ДатаПоступленияАванса);
			КонецЕсли;				
			
			Если ДатаЗачетаАванса < СтруктураПараметров.НачалоПериода Тогда
				ДатаЗачетаАванса = СтруктураПараметров.НачалоПериода;
			КонецЕсли;
			
			Если ДатаЗачетаАванса > КонецДня(Строка.Период) Тогда
				Продолжить;
			ИначеЕсли КонецДня(ДатаЗачетаАванса) = КонецДня(Строка.Период) И Строка.КонечныйОстаток = 0 Тогда
				Продолжить;
			Иначе
				Если КонецДня(ДатаЗачетаАванса) = КонецДня(Строка.Период)
					ИЛИ ТипЗнч(Строка.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
					СуммаАванса = Строка.КонечныйОстаток;
					ВалютнаяСуммаАванса = Строка.ВалютныйКонечныйОстаток;
				Иначе
					СуммаАванса = Строка.НачальныйОстаток;
					ВалютнаяСуммаАванса = Строка.ВалютныйНачальныйОстаток;
				КонецЕсли;
				Если СуммаАванса <> 0 Тогда

					Если Строка.ДатаВыписки = '00010101' Тогда
						Если ДатаЗачетаАванса > Строка.Период Тогда
							Строка.ДатаВыписки = Строка.Период;
						Иначе
							Строка.ДатаВыписки = ДатаЗачетаАванса;
						КонецЕсли;
					КонецЕсли;
					Строка.КонецНалоговогоПериода = КонецКвартала(Строка.ДокументАвансаДата);

					Если НЕ ЗначениеЗаполнено(Строка.СчетФактура)
						ИЛИ НачалоДня(Строка.ДатаВыписки) >= НачалоДня(СтруктураПараметров.НачалоПериода) Тогда
						
						НоваяСтрока = ТаблицаАвансов.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
						НоваяСтрока.СуммаАванса = СуммаАванса;
						НоваяСтрока.ВалютнаяСуммаАванса = ВалютнаяСуммаАванса;
						
					КонецЕсли;

					Прервать;

				КонецЕсли;
			КонецЕсли
		КонецЦикла;

	КонецЦикла;

	Если ТаблицаАвансов <> Неопределено
		И ТаблицаАвансов.Количество() <> 0 Тогда

		ТаблицаАвансов.Сортировать("ДатаВыписки");

		ОчередностьРаспределения = Новый Массив;
		ОчередностьРаспределения.Добавить(Перечисления.СпособыПогашенияЗадолженности.НеПогашать);
		ОчередностьРаспределения.Добавить(Перечисления.СпособыПогашенияЗадолженности.Автоматически);
		ОчередностьРаспределения.Добавить(Перечисления.СпособыПогашенияЗадолженности.ПоДокументу);
		ОчередностьРаспределения.Добавить(Перечисления.СпособыПогашенияЗадолженности.ПустаяСсылка());
		ОтборСтрокПлатежа = Новый Структура("СпособПогашенияЗадолженности");
		
		Для Каждого Выборка Из ТаблицаАвансов Цикл

			ДокАванса = Выборка.ДокументОснование;
			ДокАвансаМетаданные = ДокАванса.Метаданные();

			Если НЕ ЗначениеЗаполнено(Выборка.ДоговорКонтрагента)
				И ТипЗнч(Выборка.ДокументОснование) <> Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
				ВалютаДокумента = ВалютаРегламентированногоУчета;
			ИначеЕсли НЕ ЗначениеЗаполнено(Выборка.ВалютаРасчетов) ИЛИ Выборка.РасчетыВУсловныхЕдиницах Тогда
				// Незаполненное значение приравнивается к валюте регл. учета
				ВалютаДокумента = ВалютаРегламентированногоУчета;
			Иначе
				ВалютаДокумента = Выборка.ВалютаРасчетов;
			КонецЕсли;

			Если ЗначениеЗаполнено(ДокАванса)
				И (ДокАвансаМетаданные.ТабличныеЧасти.Найти("РасшифровкаПлатежа") <> Неопределено
				ИЛИ ТипЗнч(ДокАванса) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")) Тогда

				ТаблицаПоСтавкам = Новый ТаблицаЗначений();
				ТаблицаПоСтавкам.Колонки.Добавить("СтавкаНДС",Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
				ТаблицаПоСтавкам.Колонки.Добавить("Сумма", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
				ТаблицаПоСтавкам.Колонки.Добавить("ВалютнаяСумма",
					ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
				ТаблицаПоСтавкам.Колонки.Добавить("СчетНаОплату",
					Новый ОписаниеТипов("ДокументСсылка.СчетНаОплатуПокупателю"));
				ТаблицаПоСтавкам.Колонки.Добавить("СпособПогашенияЗадолженности",
					Новый ОписаниеТипов("ПеречислениеСсылка.СпособыПогашенияЗадолженности"));

				Если ТипЗнч(ДокАванса) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда

					ЕстьСчетНаОплату = Ложь;
					
					СтрокаПоСтавке = ТаблицаПоСтавкам.Добавить();
					СтрокаПоСтавке.СтавкаНДС = Выборка.СтавкаНДС;
					СтрокаПоСтавке.Сумма = Выборка.СуммаАванса;
					СтрокаПоСтавке.ВалютнаяСумма = Выборка.СуммаАванса;

				Иначе

					ЕстьСчетНаОплату =
						ДокАвансаМетаданные.ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты.Найти("СчетНаОплату") <> Неопределено;

					Для Каждого СтрПлатежа Из ДокАванса.РасшифровкаПлатежа Цикл
						Если СтрПлатежа.ДоговорКонтрагента = Выборка.ДоговорКонтрагента Тогда

							Если СоответствиеСтавок[СтрПлатежа.СтавкаНДС] = Неопределено Тогда
								ТекСтавкаНДС = СтрПлатежа.СтавкаНДС;
							Иначе
								ТекСтавкаНДС = СоответствиеСтавок[СтрПлатежа.СтавкаНДС];
							КонецЕсли;
							СтрокаПоСтавке 				 = ТаблицаПоСтавкам.Добавить();
							СтрокаПоСтавке.СтавкаНДС 	 = ТекСтавкаНДС;
							СтрокаПоСтавке.Сумма 		 = СтрПлатежа.СуммаПлатежа;
							СтрокаПоСтавке.ВалютнаяСумма = СтрПлатежа.СуммаПлатежа;
							Если ЕстьСчетНаОплату Тогда
								СтрокаПоСтавке.СчетНаОплату = СтрПлатежа.СчетНаОплату;
							КонецЕсли;
							СтрокаПоСтавке.СпособПогашенияЗадолженности = СтрПлатежа.СпособПогашенияЗадолженности;

						КонецЕсли;
					КонецЦикла;

				КонецЕсли;

				ТаблицаПоСтавкам.Свернуть("СпособПогашенияЗадолженности,СтавкаНДС,СчетНаОплату", "Сумма,ВалютнаяСумма");
				ТаблицаПоСтавкам.Индексы.Добавить("СпособПогашенияЗадолженности");
				
				ТаблицаПоСтавкамСРаспределением = ТаблицаПоСтавкам.СкопироватьКолонки();
				
				НераспределеннаяСумма    = Выборка.СуммаАванса;
				НераспределеннаяСуммаВал = Выборка.ВалютнаяСуммаАванса;
				РаспределятьСуммуВал = ВалютаДокумента <> ВалютаРегламентированногоУчета 
					И ЗначениеЗаполнено(НераспределеннаяСуммаВал);
				Если ТаблицаПоСтавкам.Итог("Сумма") < НераспределеннаяСумма Тогда
					ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(НераспределеннаяСумма, ТаблицаПоСтавкам, "Сумма");
				КонецЕсли;
				Для каждого СпособПогашения Из ОчередностьРаспределения Цикл
					Если НераспределеннаяСумма <= 0 Тогда
						Прервать;
					КонецЕсли;
					ОтборСтрокПлатежа.СпособПогашенияЗадолженности = СпособПогашения;
					ТаблицаПоСпособуПогашения = ТаблицаПоСтавкам.Скопировать(ОтборСтрокПлатежа);
					Если ТаблицаПоСпособуПогашения.Количество() > 0 Тогда
						РаспределяемаяСумма = Мин(НераспределеннаяСумма, ТаблицаПоСпособуПогашения.Итог("Сумма"));
						ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
							РаспределяемаяСумма, ТаблицаПоСпособуПогашения, "Сумма");
						НераспределеннаяСумма = НераспределеннаяСумма - РаспределяемаяСумма;
						Если РаспределятьСуммуВал Тогда
							РаспределяемаяСуммаВал = Мин(НераспределеннаяСуммаВал, ТаблицаПоСпособуПогашения.Итог("ВалютнаяСумма"));
							ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
								РаспределяемаяСуммаВал, ТаблицаПоСпособуПогашения, "ВалютнаяСумма");
							НераспределеннаяСуммаВал = НераспределеннаяСуммаВал - РаспределяемаяСуммаВал;
						Иначе
							ТаблицаПоСпособуПогашения.ЗагрузитьКолонку(
								ТаблицаПоСпособуПогашения.ВыгрузитьКолонку("Сумма"), "ВалютнаяСумма");
						КонецЕсли;
						ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(
							ТаблицаПоСпособуПогашения, ТаблицаПоСтавкамСРаспределением);
					КонецЕсли;
				КонецЦикла;
				ТаблицаПоСтавкамСРаспределением.Свернуть("СтавкаНДС,СчетНаОплату", "Сумма,ВалютнаяСумма");
				
				Для Каждого СтрокаПоСтавке Из ТаблицаПоСтавкамСРаспределением Цикл

					Если СтрокаПоСтавке.СтавкаНДС = Перечисления.СтавкиНДС.НДС0
						ИЛИ СтрокаПоСтавке.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
						Продолжить;
					КонецЕсли;

					СтрокаТП = ТаблицаРезультатов.Добавить();
					
					Если ТипЗнч(Выборка.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
						СтрокаТП.ДатаДокументаОснования	= Выборка.ДатаСобытия;
						СтрокаТП.Дата = Выборка.ДатаСобытия;
					Иначе
						СтрокаТП.ДатаДокументаОснования	= Выборка.ДокументАвансаДата;
						СтрокаТП.Дата = Выборка.ДатаВыписки;
					КонецЕсли;
					
					СтрокаТП.Контрагент         = Выборка.Контрагент;
					СтрокаТП.ДоговорКонтрагента = Выборка.ДоговорКонтрагента;
					СтрокаТП.ДокументОснование  = Выборка.ДокументОснование;
					СтрокаТП.СчетНаОплату       = СтрокаПоСтавке.СчетНаОплату;
					СтрокаТП.ВалютаДокумента    = ВалютаДокумента;
					СтрокаТП.Сумма              = СтрокаПоСтавке.Сумма;
					СтрокаТП.ВалютнаяСумма      = СтрокаПоСтавке.ВалютнаяСумма;
					СтрокаТП.СтавкаНДС          = СтрокаПоСтавке.СтавкаНДС;
					СтрокаТП.СчетФактура        = Выборка.СчетФактура;
					СтрокаТП.СуммаНДС           = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
						СтрокаТП.Сумма, Истина, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТП.СтавкаНДС));
					СтрокаТП.ПорядокРегистрацииСчетовФактурНаАванс = Выборка.ПорядокРегистрацииСчетовФактурНаАванс;

				КонецЦикла;

			Иначе

				СтрокаТП                        = ТаблицаРезультатов.Добавить();
				СтрокаТП.Дата                   = Выборка.ДатаВыписки;
				СтрокаТП.ДатаДокументаОснования = Выборка.ДокументАвансаДата;
				СтрокаТП.Контрагент             = Выборка.Контрагент;
				СтрокаТП.ДоговорКонтрагента     = Выборка.ДоговорКонтрагента;
				СтрокаТП.ДокументОснование      = Выборка.ДокументОснование;
				СтрокаТП.ВалютаДокумента        = ВалютаДокумента;
				СтрокаТП.Сумма                  = Выборка.СуммаАванса;
				СтрокаТП.СтавкаНДС              = Перечисления.СтавкиНДС.НДС18_118;

				Если НЕ ЗначениеЗаполнено(Выборка.ВалютнаяСуммаАванса) 
					ИЛИ ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
					СтрокаТП.ВалютнаяСумма = СтрокаТП.Сумма;
				Иначе
					СтрокаТП.ВалютнаяСумма = Выборка.ВалютнаяСуммаАванса;
				КонецЕсли;
				СтрокаТП.СчетФактура = Выборка.СчетФактура;
				СтрокаТП.ПорядокРегистрацииСчетовФактурНаАванс = Выборка.ПорядокРегистрацииСчетовФактурНаАванс;
				СтрокаТП.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
					СтрокаТП.Сумма, Истина, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТП.СтавкаНДС));
			КонецЕсли;

		КонецЦикла;
	КонецЕсли;

	Возврат ТаблицаРезультатов;

КонецФункции

Процедура ОпределитьРанееВыписанныеСчетаФактуры(ТаблицаАвансов)
	
	Если ТаблицаАвансов.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетФактураВыданный.Ссылка КАК СчетФактура,
		|	НАЧАЛОПЕРИОДА(СчетФактураВыданный.Ссылка.Дата, ДЕНЬ) КАК ДатаСобытия,
		|	СчетФактураВыданный.Ссылка.ДоговорКонтрагента,
		|	СчетФактураВыданный.ДокументОснование,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(СчетФактураВыданный.ДокументОснование КАК Документ.ОтчетКомиссионераОПродажах).ВыписыватьСчетаФактурыСводно, ЛОЖЬ) КАК ВыписыватьСчетаФактурыСводно,
		|	СчетФактураВыданный.Ссылка.Контрагент КАК Контрагент
		|ИЗ
		|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданный
		|ГДЕ
		|	СчетФактураВыданный.ДокументОснование В(&ДокументыОснования)
		|	И СчетФактураВыданный.Ссылка.ВидСчетаФактуры В (ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАванс), ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАвансКомитента))
		|	И СчетФактураВыданный.Ссылка.ПометкаУдаления = ЛОЖЬ";
		
		Запрос.УстановитьПараметр("ДокументыОснования", ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(ТаблицаАвансов.ВыгрузитьКолонку("ДокументОснование"), Истина));
		
		СФПоДокументам = Запрос.Выполнить().Выгрузить();
		
		Если СФПоДокументам.Количество() > 0 Тогда
			
			СтруктураОтбора       = Новый Структура("ДокументОснование, Контрагент, ДатаСобытия");
			СтруктураОтбораСводно = Новый Структура("ДокументОснование, ДатаСобытия");
			
			Для Каждого СФ Из СФПоДокументам Цикл
				
				Если СФ.ВыписыватьСчетаФактурыСводно Тогда
					ЗаполнитьЗначенияСвойств(СтруктураОтбораСводно, СФ);
					СтрокиОтбора = ТаблицаАвансов.НайтиСтроки(СтруктураОтбораСводно);
					Для Каждого СтрокаОтбора Из СтрокиОтбора Цикл
						СтрокаОтбора.СчетФактура = СФ.СчетФактура;
						СтрокаОтбора.ДатаВыписки = СФ.ДатаСобытия;
					КонецЦикла;
				Иначе
					Если ЗначениеЗаполнено(СФ.ДоговорКонтрагента) Тогда
						СтруктураОтбора.Вставить("ДоговорКонтрагента");
					Иначе
						Если СтруктураОтбора.Свойство("ДоговорКонтрагента") Тогда
							СтруктураОтбора.Удалить("ДоговорКонтрагента");
						КонецЕсли;
					КонецЕсли;
					ЗаполнитьЗначенияСвойств(СтруктураОтбора, СФ);
					СтрокиОтбора = ТаблицаАвансов.НайтиСтроки(СтруктураОтбора);
					Для Каждого СтрокаОтбора Из СтрокиОтбора Цикл
						Если ЗначениеЗаполнено(СФ.ДоговорКонтрагента)
							И СтрокаОтбора.ДоговорКонтрагента <> СФ.ДоговорКонтрагента Тогда
							Продолжить;
						КонецЕсли;
						СтрокаОтбора.СчетФактура = СФ.СчетФактура;
						СтрокаОтбора.ДатаВыписки = СФ.ДатаСобытия;
					КонецЦикла;
					
					СтруктураОтбора.ДатаСобытия = '00010101';
					СтрокиОтбора = ТаблицаАвансов.НайтиСтроки(СтруктураОтбора);
					Для Каждого СтрокаОтбора Из СтрокиОтбора Цикл
						Если ЗначениеЗаполнено(СФ.ДоговорКонтрагента)
							И СтрокаОтбора.ДоговорКонтрагента <> СФ.ДоговорКонтрагента Тогда
							Продолжить;
						КонецЕсли;
						СтрокаОтбора.СчетФактура = СФ.СчетФактура;
						СтрокаОтбора.ДатаВыписки = СФ.ДатаСобытия;
					КонецЦикла;
				КонецЕсли;
				
			КонецЦикла;
						
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


// ПРОЦЕДУРЫ СОЗДАНИЯ СЧЕТОВ-ФАКТУР

Процедура СформироватьСчетаФактуры(СтруктураПараметров, АдресХранилища) Экспорт

	Список = СтруктураПараметров.ТаблицыСчетовФактур.Список;
	НеиспользуемыеСчетаФактуры = СтруктураПараметров.ТаблицыСчетовФактур.НеиспользуемыеСчетаФактуры;

	ЕстьОшибки = ВыполнитьФормированиеСчетовФактурНаАванс(СтруктураПараметров, Список, НеиспользуемыеСчетаФактуры);

	Если Не ЕстьОшибки Тогда
		РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.ЗафиксироватьФактВыполненияРегламентнойОперации(
					НачалоКвартала(СтруктураПараметров.НачалоПериода),
					СтруктураПараметров.Организация, Неопределено, Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНаАванс, НЕ ЕстьОшибки);	
	КонецЕсли; 
	
	ДанныеДляЗаполнения = Новый Структура;
	ДанныеДляЗаполнения.Вставить("Список", Список);

	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);

КонецПроцедуры

Функция ВыполнитьФормированиеСчетовФактурНаАванс(СтруктураПараметров, Список, НеиспользуемыеСчетаФактуры)

	Если СтруктураПараметров.Свойство("ОчиститьСписокНеиспользуемыхСчетовФактур")
		И СтруктураПараметров.ОчиститьСписокНеиспользуемыхСчетовФактур Тогда
		НеиспользуемыеСчетаФактуры.Очистить();
	КонецЕсли;

	Если СтруктураПараметров.Свойство("УстановитьПометкиУдаления")
		И СтруктураПараметров.УстановитьПометкиУдаления Тогда
		УстановитьПометкиУдаления(НеиспользуемыеСчетаФактуры);
	КонецЕсли;

	ЕстьОшибки = Ложь;
	ИспользуетсяГособоронзаказ = ПолучитьФункциональнуюОпцию("ИспользуетсяГособоронзаказ");
	
	ИспользоватьРанееОбнаруженныеДокументы = (НеиспользуемыеСчетаФактуры.Количество()>0);

	ПустаяСсылкаСФ = Новый(Тип("ДокументСсылка.СчетФактураВыданный"));
	////////////////////////////////////////////////////////////////////////////
	// Предварительная установка пометки на удаление для СФ, выбранных в таблице
	
	КолонкаСчетФактура = Список.ВыгрузитьКолонку("СчетФактура");
	СписокСФ = ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(КолонкаСчетФактура , Истина);
	Для Каждого СчФ Из СписокСФ Цикл
		Если СчФ = ПустаяСсылкаСФ Тогда
			Продолжить;
		Иначе
			СчФ = СчФ.Ссылка.ПолучитьОбъект();
			СчФ.УстановитьПометкуУдаления(Истина);
		КонецЕсли;
	КонецЦикла;
	
	// Предварительная установка пометки на удаление для СФ, выбранных в таблице
	////////////////////////////////////////////////////////////////////////////
	
	ТаблицаОснований = Список.Скопировать(, "Дата, ДокументОснование");
	ТаблицаОснований.Свернуть("Дата, ДокументОснование");
	ТаблицаОснований.Колонки.Добавить("КонтрагентСводно", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаОснований.Колонки.Добавить("ВыписыватьСчетаФактурыСводно", Новый ОписаниеТипов("Булево"));
	ОтчетыКомиссионера = Новый Массив;
	Для каждого СтрокаТаблицы Из ТаблицаОснований Цикл
		Если ТипЗнч(СтрокаТаблицы.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
			ОтчетыКомиссионера.Добавить(СтрокаТаблицы.ДокументОснование);
		КонецЕсли;
	КонецЦикла;
	ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОтчетыКомиссионера);
	РеквизитыДокументов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ОтчетыКомиссионера, 
		"Контрагент,ВыписыватьСчетаФактурыСводно");
	Для каждого СтрокаТаблицы Из ТаблицаОснований Цикл
		РеквизитыДокумента = РеквизитыДокументов[СтрокаТаблицы.ДокументОснование];
		Если РеквизитыДокумента <> Неопределено Тогда
			СтрокаТаблицы.КонтрагентСводно = РеквизитыДокумента.Контрагент;
			СтрокаТаблицы.ВыписыватьСчетаФактурыСводно = РеквизитыДокумента.ВыписыватьСчетаФактурыСводно;
		КонецЕсли;
	КонецЦикла;
	
	КлючевыеПоля       = "ДокументОснование,Контрагент,Дата";
	КлючевыеПоляСводно = "ДокументОснование,Дата";
	
	СтруктураОтбора       = Новый Структура("ДокументОснование,Контрагент,Дата");
	СтруктураОтбораСводно = Новый Структура("ДокументОснование,Дата");
	
	Ответственный = Пользователи.ТекущийПользователь();
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(СтруктураПараметров.Организация, СтруктураПараметров.КонецПериода);
	УчетПо84ФЗ    = УчетНДС.ВедетсяУчетНДСНеплательщиковПоФЗ84(СтруктураПараметров.КонецПериода);
	Если Не ПлательщикНДС И УчетПо84ФЗ Тогда
		ВидСчетФактурыНаАванс = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента;
	Иначе
		ВидСчетФактурыНаАванс = Перечисления.ВидСчетаФактурыВыставленного.НаАванс;
	КонецЕсли;
	
	Для каждого СтрокаДокумента Из ТаблицаОснований Цикл
		
		КлючевыеПоляДокумента = ?(СтрокаДокумента.ВыписыватьСчетаФактурыСводно, КлючевыеПоляСводно, КлючевыеПоля);
		СтруктураОтбораСФ     = ?(СтрокаДокумента.ВыписыватьСчетаФактурыСводно, СтруктураОтбораСводно, СтруктураОтбора);
		
		// Для общего документа-основания 
		// на каждого контрагента и дату аванса выписывается отдельный счет-фактура.
		// По отчету комиссионера может выписываться сводный счет-фактура на каждую дату аванса по всем контрагентам.
		ТаблицаКлючевыхПолей = Список.Скопировать(Новый Структура("Дата, ДокументОснование", СтрокаДокумента.Дата, СтрокаДокумента.ДокументОснование),
			КлючевыеПоляДокумента);
		
		ТаблицаКлючевыхПолей.Свернуть(КлючевыеПоляДокумента);
		
		Для каждого СтрокаКлючевыхПолей Из ТаблицаКлючевыхПолей Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураОтбораСФ, СтрокаКлючевыхПолей);
			
			СтрокиСФ = Список.НайтиСтроки(СтруктураОтбораСФ);
			
			ТЧАвансыСтарые = Новый Соответствие;
			
			СчФ = Неопределено;
			ТЧАвансыСтарые.Очистить();
			
			ОшибкаФормирования = Ложь;
			
			ДоговорКонтрагентаПоСчетуФактуре = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			Для каждого СтрокаСФ Из СтрокиСФ Цикл
				
				Если СчФ = Неопределено
					ИЛИ ЗначениеЗаполнено(ДоговорКонтрагентаПоСчетуФактуре)
					И ЗначениеЗаполнено(СтрокаСФ.СчетФактура)
					И СчФ.Ссылка <> СтрокаСФ.СчетФактура Тогда
					
					Если ЗначениеЗаполнено(ДоговорКонтрагентаПоСчетуФактуре)
						И ЗначениеЗаполнено(СтрокаСФ.СчетФактура)
						И СчФ.Ссылка <> СтрокаСФ.СчетФактура Тогда
						ЗаписатьСчетФактуру(ДоговорКонтрагентаПоСчетуФактуре, СтрокиСФ, СчФ, ЕстьОшибки);
					КонецЕсли;
					
					// Создать/использовать Счет-фактуру
					Если НЕ СтрокаСФ.СчетФактура = ПустаяСсылкаСФ Тогда
						СчФ = СтрокаСФ.СчетФактура.ПолучитьОбъект();
						ДоговорКонтрагентаПоСчетуФактуре = СчФ.ДоговорКонтрагента;
						// Если счет-фактура выписан по договору и договор счета-фактуры не совпадает с договором из табличной части обработки, 
						// то пропускаем такой счет-фактуру.
						Если ЗначениеЗаполнено(ДоговорКонтрагентаПоСчетуФактуре)
							И СчФ.ДоговорКонтрагента <> СтрокаСФ.ДоговорКонтрагента Тогда 
							Продолжить;
						КонецЕсли;
						
						Если ТЧАвансыСтарые[СчФ] = Неопределено Тогда
							ТЧАвансыСтарые.Вставить(СчФ, СчФ.Авансы.Выгрузить());
						КонецЕсли;
					ИначеЕсли ИспользоватьРанееОбнаруженныеДокументы Тогда
						СчФ = НеиспользуемыеСчетаФактуры.Найти(Ложь,"Использован");
						Если СчФ = Неопределено Тогда
							ИспользоватьРанееОбнаруженныеДокументы = Ложь;
							СчФ = Документы.СчетФактураВыданный.СоздатьДокумент();
							СчФ.Ответственный = Ответственный;
							ДоговорКонтрагентаПоСчетуФактуре = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
						Иначе
							СчФ.Использован = Истина;
							СчФ = СчФ.Ссылка.ПолучитьОбъект();
							ДоговорКонтрагентаПоСчетуФактуре = СчФ.ДоговорКонтрагента;
						КонецЕсли;
					Иначе
						СчФ = Документы.СчетФактураВыданный.СоздатьДокумент();
						СчФ.Ответственный = Ответственный;
						ДоговорКонтрагентаПоСчетуФактуре = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
					КонецЕсли;
					// Если в счете-фактуре заполнен договор, то перезаполняем его из табличной части обработки, 
					// иначе оставляем пустым
					ИсключаемыеСвойства = ?(ЗначениеЗаполнено(ДоговорКонтрагентаПоСчетуФактуре), "", "ДоговорКонтрагента");
					ЗаполнитьЗначенияСвойств(СчФ, СтрокаСФ,,ИсключаемыеСвойства);
					Если СтрокаДокумента.ВыписыватьСчетаФактурыСводно Тогда
						СчФ.Контрагент        = СтрокаДокумента.КонтрагентСводно;
						СчФ.ДоговорКонтрагента = Неопределено;
					КонецЕсли;
					СчФ.Организация = СтруктураПараметров.Организация;
					СчФ.СводныйКомиссионный = СтрокаДокумента.ВыписыватьСчетаФактурыСводно;
					
					Если СчФ.ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАванс
						И СчФ.ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
						СчФ.ВидСчетаФактуры = ВидСчетФактурыНаАванс;
					КонецЕсли;
					
					СчФ.Под0 = Ложь;
					СчФ.СформированПриВводеНачальныхОстатковНДС = Ложь;
					
					СчФ.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
					
					Если УчетНДСПереопределяемый.ИспользуетсяПостановлениеНДС1137(СчФ.Дата) Тогда
						Если СчФ.СводныйКомиссионный Тогда
							СчФ.КодВидаОперации = "28";
						ИначеЕсли СчФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
							СчФ.КодВидаОперации = "05";
						ИначеЕсли ТипЗнч(СчФ.ДокументОснование) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
							СчФ.КодВидаОперации = "26";
						Иначе
							СчФ.КодВидаОперации = "02";
						КонецЕсли;
						СчФ.КодСпособаВыставления = 1;
					КонецЕсли;	
					
					ПараметрыЗаполнения = Новый Структура("СчетФактураНеВыставляется, ДокументОснование, ВидСчетаФактуры, Дата");
					ЗаполнитьЗначенияСвойств(ПараметрыЗаполнения, СчФ);
					
					ПараметрыВыставления = Документы.СчетФактураВыданный.ОпределитьПорядокВыставленияСчетаФактуры(ПараметрыЗаполнения);
					ЗаполнитьЗначенияСвойств(СчФ, ПараметрыВыставления);
					
					СчФ.ДокументыОснования.Очистить();
					СчФ.ДокументыОснования.Добавить().ДокументОснование = СтрокаСФ.ДокументОснование;
					
					СчФ.СуммаДокумента = СтрокаСФ.ВалютнаяСумма;
					
					СчФ.Авансы.Очистить();
					
					СчФ.ПометкаУдаления = Ложь;
					
					СчФ.Дата = КонецДня(СчФ.Дата);
					
					ТипОснования = ТипЗнч(СтрокаСФ.ДокументОснование);
					
					СчФ.ПлатежноРасчетныеДокументы.Очистить();
					
					Если ТипОснования = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет") Тогда
						
						СписокРеквизитов = "НомерВходящегоДокумента,ДатаВходящегоДокумента";
						
						ВедетсяУчетНДСПоФЗ56 = УчетНДС.ВедетсяУчетНДСПоФЗ56(СчФ.Дата);
						ЗаполнятьИдентификаторГосонтракта = ВедетсяУчетНДСПоФЗ56
							И ИспользуетсяГособоронзаказ
							И НЕ ЗначениеЗаполнено(СчФ.ИдентификаторГосКонтракта);
							
						Если ЗаполнятьИдентификаторГосонтракта Тогда 
							СписокРеквизитов = СписокРеквизитов + ",СчетОрганизации.ГосударственныйКонтракт";
						КонецЕсли;
						
						РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СчФ.ДокументОснование, СписокРеквизитов);
						СчФ.НомерПлатежноРасчетногоДокумента = РеквизитыДокумента.НомерВходящегоДокумента;
						СчФ.ДатаПлатежноРасчетногоДокумента = РеквизитыДокумента.ДатаВходящегоДокумента;
						Если ЗаполнятьИдентификаторГосонтракта Тогда 
							ГосКонтракт = РеквизитыДокумента.СчетОрганизацииГосударственныйКонтракт;
							Если ЗначениеЗаполнено(ГосКонтракт) Тогда 
								ИдентификаторГосКонтракта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГосКонтракт, "Код");
								СчФ.ИдентификаторГосКонтракта = ИдентификаторГосКонтракта;
							КонецЕсли;
						КонецЕсли;
						
					ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
						РеквизитыПРД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СчФ.ДокументОснование, 
							"Номер,Дата");
						СчФ.НомерПлатежноРасчетногоДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
							РеквизитыПРД.Номер, Истина, Истина);
						СчФ.ДатаПлатежноРасчетногоДокумента = РеквизитыПРД.Дата;
					Иначе
						СчФ.НомерПлатежноРасчетногоДокумента = "";
						СчФ.ДатаПлатежноРасчетногоДокумента  = Неопределено;
					КонецЕсли;
					
					СтрокаПРД = СчФ.ПлатежноРасчетныеДокументы.Добавить();
					СтрокаПРД.ДатаДокумента	= СчФ.ДатаПлатежноРасчетногоДокумента;
					СтрокаПРД.НомерДокумента = СчФ.НомерПлатежноРасчетногоДокумента;
					
				Иначе
					СчФ.Сумма 		   = СчФ.Сумма + СтрокаСФ.Сумма;
					СчФ.СуммаНДС 	   = СчФ.СуммаНДС + СтрокаСФ.СуммаНДС;
					СчФ.СуммаДокумента = СчФ.СуммаДокумента + СтрокаСФ.ВалютнаяСумма;
				КонецЕсли;
				
				СуммаПоСтроке 	  = СтрокаСФ.Сумма;
				СуммаНДСПоСтроке  = СтрокаСФ.СуммаНДС;
				СтавкаНДСПоСтроке = СтрокаСФ.СтавкаНДС;
				
				Если ЗначениеЗаполнено(СтрокаСФ.СчетНаОплату) Тогда
					ТаблицаАвансов = ПолучитьНоменклатуруСчетаНаОплату(
						СтрокаСФ.СчетНаОплату, СтрокаСФ, СчФ.Авансы.ВыгрузитьКолонки());
					ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаАвансов, СчФ.Авансы);
					РазницаВСумме    = СчФ.Сумма - СчФ.Авансы.Итог("Сумма");
					РазницаВСуммеНДС = СчФ.СуммаНДС - СчФ.Авансы.Итог("СуммаНДС");
					Если (РазницаВСумме <> 0 ИЛИ РазницаВСуммеНДС <> 0) И СчФ.Авансы.Количество() > 0 Тогда
						СтрокаСМаксимальнойСуммой = СчФ.Авансы[0];
						Для НомерСтроки = 1 По СчФ.Авансы.Количество() - 1 Цикл
							Если СчФ.Авансы[НомерСтроки].Сумма > СтрокаСМаксимальнойСуммой.Сумма Тогда
								СтрокаСМаксимальнойСуммой = СчФ.Авансы[НомерСтроки];
							КонецЕсли;
						КонецЦикла;
						СтрокаСМаксимальнойСуммой.Сумма    = СтрокаСМаксимальнойСуммой.Сумма + РазницаВСумме;
						СтрокаСМаксимальнойСуммой.СуммаНДС = СтрокаСМаксимальнойСуммой.СуммаНДС + РазницаВСуммеНДС;
					КонецЕсли;
				Иначе
					Если ТЧАвансыСтарые[СчФ] <> Неопределено Тогда
						Для Каждого СтрокаСтарая Из ТЧАвансыСтарые[СчФ] Цикл
							Если СуммаПоСтроке = 0 Тогда
								Прервать;
							КонецЕсли;
							Если СтрокаСтарая.Сумма = 0 Тогда
								Продолжить;
							КонецЕсли;
							Если СтрокаСФ.СтавкаНДС = СтрокаСтарая.СтавкаНДС Тогда
								НоваяСтрокаПоСуммам 			 = СчФ.Авансы.Добавить();
								НоваяСтрокаПоСуммам.Номенклатура = СтрокаСтарая.Номенклатура;
								НоваяСтрокаПоСуммам.Содержание 	 = СтрокаСтарая.Содержание;
								НоваяСтрокаПоСуммам.Сумма 		 = Мин(СуммаПоСтроке, СтрокаСтарая.Сумма);
								НоваяСтрокаПоСуммам.СуммаНДС 	 = Мин(СуммаНДСПоСтроке, СтрокаСтарая.СуммаНДС);
								НоваяСтрокаПоСуммам.СтавкаНДС 	 = СтрокаСФ.СтавкаНДС;
								СуммаПоСтроке 					 = СуммаПоСтроке - НоваяСтрокаПоСуммам.Сумма;
								СуммаНДСПоСтроке 				 = СуммаНДСПоСтроке - НоваяСтрокаПоСуммам.СуммаНДС;
								СтрокаСтарая.Сумма 				 = СтрокаСтарая.Сумма - НоваяСтрокаПоСуммам.Сумма;
								СтрокаСтарая.СуммаНДС 			 = СтрокаСтарая.СуммаНДС - НоваяСтрокаПоСуммам.СуммаНДС;
								Если СтрокаДокумента.ВыписыватьСчетаФактурыСводно Тогда
									НоваяСтрокаПоСуммам.Контрагент = СтрокаСФ.Контрагент;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						Если СуммаПоСтроке <> 0 Тогда
							НоваяСтрокаПоСуммам 			 = СчФ.Авансы.Добавить();
							НоваяСтрокаПоСуммам.Сумма 		 = СуммаПоСтроке;
							НоваяСтрокаПоСуммам.СуммаНДС 	 = СуммаНДСПоСтроке;
							НоваяСтрокаПоСуммам.СтавкаНДС 	 = СтрокаСФ.СтавкаНДС;
							НоваяСтрокаПоСуммам.Номенклатура = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
								СтрокаСФ.ДоговорКонтрагента, "НаименованиеДляСчетаФактурыНаАванс");
							Если СтрокаДокумента.ВыписыватьСчетаФактурыСводно Тогда
								НоваяСтрокаПоСуммам.Контрагент = СтрокаСФ.Контрагент;
							КонецЕсли;
						КонецЕсли;
					Иначе
						НоваяСтрокаПоСуммам = СчФ.Авансы.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаПоСуммам, СтрокаСФ);
						НоваяСтрокаПоСуммам.Номенклатура = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
							СтрокаСФ.ДоговорКонтрагента, "НаименованиеДляСчетаФактурыНаАванс");
						Если СтрокаДокумента.ВыписыватьСчетаФактурыСводно Тогда
							НоваяСтрокаПоСуммам.Контрагент = СтрокаСФ.Контрагент;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если СчФ.ЭтоНовый() Тогда
				ОтветственныеЛицаБП.УстановитьОтветственныхЛиц(СчФ);
			КонецЕсли;
			
			ЗаписатьСчетФактуру(ДоговорКонтрагентаПоСчетуФактуре, СтрокиСФ, СчФ, ЕстьОшибки);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ЕстьОшибки;

КонецФункции

Процедура ЗаписатьСчетФактуру(ДоговорКонтрагентаПоСчетуФактуре, СтрокиСФ, СчФ, ЕстьОшибки)
	
	Попытка
		СчФ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		
		Для каждого СтрокаСФ Из СтрокиСФ Цикл
			Если ЗначениеЗаполнено(ДоговорКонтрагентаПоСчетуФактуре) 
				И СтрокаСФ.ДоговорКонтрагента <> ДоговорКонтрагентаПоСчетуФактуре Тогда 
				Продолжить;
			КонецЕсли;
			СтрокаСФ.СФсформирован = Истина;
			СтрокаСФ.СчетФактура   = СчФ.Ссылка;
		КонецЦикла;
		
	Исключение
		
		Для каждого СтрокаСФ Из СтрокиСФ Цикл
			Если ЗначениеЗаполнено(ДоговорКонтрагентаПоСчетуФактуре) 
				И СтрокаСФ.ДоговорКонтрагента <> ДоговорКонтрагентаПоСчетуФактуре Тогда 
				Продолжить;
			КонецЕсли;
			СтрокаСФ.СФсформирован = Ложь;
			СтрокаСФ.СчетФактура   = Неопределено;
		КонецЦикла;
		ЕстьОшибки = Истина;
		
	КонецПопытки;

КонецПроцедуры

Процедура УстановитьПометкиУдаления(НеиспользуемыеСчетаФактуры)

	Для Каждого Документ Из НеиспользуемыеСчетаФактуры Цикл
		Если НЕ Документ.ПометкаУдаления Тогда
			ДокументОбъект = Документ.Ссылка.ПолучитьОбъект();
			ДокументОбъект.УстановитьПометкуУдаления(Истина);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьНоменклатуруСчетаНаОплату(СчетНаОплату, СтрокаОтбора, ТаблицаРезультата)

	Сумма    = СтрокаОтбора.Сумма;
	СуммаНДС = СтрокаОтбора.СуммаНДС;
	
	НаименованиеДляСчетаФактурыНаАванс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаОтбора.ДоговорКонтрагента, "НаименованиеДляСчетаФактурыНаАванс");
	ДокументОснованиеДата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаОтбора.ДокументОснование, "Дата");
	
	СоответствиеСтавок = Новый Соответствие;
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10_110, Перечисления.СтавкиНДС.НДС10);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18_118, Перечисления.СтавкиНДС.НДС18);

	СтавкиНДС = Новый СписокЗначений;
	СтавкиНДС.Добавить(СтрокаОтбора.СтавкаНДС);
	СтавкиНДС.Добавить(СоответствиеСтавок[СтрокаОтбора.СтавкаНДС]);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтавкиНДС", СтавкиНДС);
	Запрос.УстановитьПараметр("СчетНаОплату", СчетНаОплату);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетНаОплатуПокупателюТовары.Номенклатура КАК Номенклатура,
	|	СчетНаОплатуПокупателюТовары.Содержание КАК Содержание,
	|	СчетНаОплатуПокупателюТовары.СтавкаНДС КАК СтавкаНДС,
	|	СчетНаОплатуПокупателюТовары.СуммаНДС КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА СчетНаОплатуПокупателюТовары.Ссылка.СуммаВключаетНДС
	|			ТОГДА СчетНаОплатуПокупателюТовары.Сумма - СчетНаОплатуПокупателюТовары.СуммаСкидки
	|		ИНАЧЕ СчетНаОплатуПокупателюТовары.Сумма + СчетНаОплатуПокупателюТовары.СуммаНДС - СчетНаОплатуПокупателюТовары.СуммаСкидки
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА СчетНаОплатуПокупателюТовары.Ссылка.СуммаВключаетНДС
	|			ТОГДА СчетНаОплатуПокупателюТовары.Сумма - СчетНаОплатуПокупателюТовары.СуммаНДС - СчетНаОплатуПокупателюТовары.СуммаСкидки
	|		ИНАЧЕ СчетНаОплатуПокупателюТовары.Сумма - СчетНаОплатуПокупателюТовары.СуммаСкидки
	|	КОНЕЦ КАК СуммаБезНДС,
	|	СчетНаОплатуПокупателюТовары.НомерСтроки КАК НомерСтроки,
	|	СчетНаОплатуПокупателюТовары.Ссылка.ВалютаДокумента
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуПокупателюТовары
	|ГДЕ
	|	СчетНаОплатуПокупателюТовары.Ссылка = &СчетНаОплату
	|	И СчетНаОплатуПокупателюТовары.СтавкаНДС В(&СтавкиНДС)
	|	И СчетНаОплатуПокупателюТовары.СуммаНДС > 0
	|	И СчетНаОплатуПокупателюТовары.Сумма > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() И Сумма > 0 Тогда
		
		ТаблицаПоСчетуНаОплату = Результат.Выгрузить();
		ТаблицаПоСчетуНаОплату.Колонки.Добавить("СуммаРаспределение", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
		ТаблицаПоСчетуНаОплату.ЗагрузитьКолонку(
			ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
				Сумма, ТаблицаПоСчетуНаОплату.ВыгрузитьКолонку("Сумма")), "СуммаРаспределение");
				
		МассивРаспределения = Новый Массив;

		Для Каждого СтрокаСчетаНаОплату Из ТаблицаПоСчетуНаОплату Цикл

			СтруктураКурсов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтрокаСчетаНаОплату.ВалютаДокумента, ДокументОснованиеДата);

			Если СтрокаСчетаНаОплату.ВалютаДокумента <> Константы.ВалютаРегламентированногоУчета.Получить() Тогда
				
				СтрокаСчетаНаОплату.Сумма = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
					СтрокаСчетаНаОплату.Сумма,
					СтрокаСчетаНаОплату.ВалютаДокумента, 
					Константы.ВалютаРегламентированногоУчета.Получить(),
					СтруктураКурсов.Курс, 1,
					СтруктураКурсов.Кратность, 1);
					
				СтрокаСчетаНаОплату.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
					СтрокаСчетаНаОплату.Сумма, 
					Истина, 
					УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаСчетаНаОплату.СтавкаНДС));
					
				СтрокаСчетаНаОплату.СуммаБезНДС = СтрокаСчетаНаОплату.Сумма - СтрокаСчетаНаОплату.СуммаНДС;
				
			КонецЕсли;

			МассивРаспределения.Очистить();
			МассивРаспределения.Добавить(СтрокаСчетаНаОплату.СуммаБезНДС);
			МассивРаспределения.Добавить(СтрокаСчетаНаОплату.СуммаНДС);

			РезультатРаспределения = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СтрокаСчетаНаОплату.СуммаРаспределение, МассивРаспределения);

			Если РезультатРаспределения <> Неопределено Тогда

				СтрокаСчетаНаОплату.СуммаНДС    = Мин(СтрокаСчетаНаОплату.СуммаНДС, РезультатРаспределения[1]);
				СтрокаСчетаНаОплату.СуммаБезНДС = Мин(СтрокаСчетаНаОплату.СуммаБезНДС, РезультатРаспределения[0]);
				СтрокаСчетаНаОплату.Сумма       = СтрокаСчетаНаОплату.СуммаБезНДС + СтрокаСчетаНаОплату.СуммаНДС;

				ДобавитьСтрокуАвансы(
					ТаблицаРезультата, 
					СтрокаСчетаНаОплату.Номенклатура, 
					СтрокаСчетаНаОплату.Содержание, 
					СтрокаСчетаНаОплату.Сумма, 
					СтрокаСчетаНаОплату.СуммаНДС, 
					СтрокаСчетаНаОплату.СтавкаНДС);

				Сумма    = Сумма - СтрокаСчетаНаОплату.Сумма;
				СуммаНДС = СуммаНДС - СтрокаСчетаНаОплату.СуммаНДС;

			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если Сумма <> 0 Тогда
		ДобавитьСтрокуАвансы(
			ТаблицаРезультата, 
			НаименованиеДляСчетаФактурыНаАванс,
			, 
			Сумма, 
			СуммаНДС, 
			СтрокаОтбора.СтавкаНДС);
	КонецЕсли;

	ТаблицаРезультата.Свернуть("Номенклатура, Содержание, СтавкаНДС", "Сумма, СуммаНДС");

	Возврат ТаблицаРезультата;

КонецФункции

Процедура ДобавитьСтрокуАвансы(ТаблицаРезультата, Номенклатура, Содержание = "", Сумма, СуммаНДС, СтавкаНДС)

	СоответствиеСтавок = Новый Соответствие;
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10_110, Перечисления.СтавкиНДС.НДС10_110);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18_118, Перечисления.СтавкиНДС.НДС18_118);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20_120, Перечисления.СтавкиНДС.НДС20_120);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10, Перечисления.СтавкиНДС.НДС10_110);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18, Перечисления.СтавкиНДС.НДС18_118);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20, Перечисления.СтавкиНДС.НДС20_120);

	НоваяСтрока = ТаблицаРезультата.Добавить();
	НоваяСтрока.Номенклатура = Номенклатура;
	НоваяСтрока.Содержание = Содержание;

	Если ПустаяСтрока(НоваяСтрока.Содержание)
		И ЗначениеЗаполнено(НоваяСтрока.Номенклатура)
		И НоваяСтрока.Номенклатура.Услуга Тогда
			НоваяСтрока.Содержание = НоваяСтрока.Номенклатура.НаименованиеПолное;
	КонецЕсли;

	НоваяСтрока.Сумма     = Сумма;
	НоваяСтрока.СуммаНДС  = СуммаНДС;
	НоваяСтрока.СтавкаНДС = СоответствиеСтавок[СтавкаНДС];

КонецПроцедуры

#КонецЕсли