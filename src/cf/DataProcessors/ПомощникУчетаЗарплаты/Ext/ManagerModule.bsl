#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура ПодготовитьДанные(ПараметрыОбработки, АдресХранилища) Экспорт
	
	Организация        = ПараметрыОбработки.Организация;
	СводРасчетов       = ПараметрыОбработки.СводРасчетов;
	РасчетныеДокументы = ПараметрыОбработки.РасчетныеДокументы;
	Ведомости          = ПараметрыОбработки.Ведомости;
	Платежи_НДФЛ       = ПараметрыОбработки.Платежи_НДФЛ;
	Платежи_Взносы     = ПараметрыОбработки.Платежи_Взносы;
	Правило_НДФЛ       = ПараметрыОбработки.Правило_НДФЛ;
	Правило_Взносы     = ПараметрыОбработки.Правило_Взносы;
	ПериодРегистрации  = ПараметрыОбработки.ПериодРегистрации;
	Пересчитать        = ПараметрыОбработки.Пересчитать;
	СтруктураРазделов  = ПараметрыОбработки.СтруктураРазделов;
	
	РезультатВыполнения = Новый Структура();
	РезультатВыполнения.Вставить("СтруктураРазделов", СтруктураРазделов);
	
	Если НЕ СтруктураРазделов.Аванс Тогда
		Если СтруктураРазделов.РасчетныеДокументы Тогда
			ПодготовитьСведенияОНачисленииЗаработнойПлаты(Организация, ПериодРегистрации, РасчетныеДокументы, Пересчитать);
			РезультатВыполнения.Вставить("РасчетныеДокументы", РасчетныеДокументы);
		КонецЕсли;
		
		Если СтруктураРазделов.СводРасчетов Тогда
			ПодготовитьСводРасчетов(Организация, ПериодРегистрации, СводРасчетов);
			РезультатВыполнения.Вставить("СводРасчетов", СводРасчетов);
		КонецЕсли;
		
		Если СтруктураРазделов.Платежи_НДФЛ Тогда
			ПодготовитьСведенияПоНДФЛ(Организация, ПериодРегистрации, Правило_НДФЛ, Платежи_НДФЛ);
			РезультатВыполнения.Вставить("Платежи_НДФЛ", Платежи_НДФЛ);
		КонецЕсли;
		
		Если СтруктураРазделов.Платежи_Взносы Тогда
			ПодготовитьСведенияПоВзносам(Организация, ПериодРегистрации, Правило_Взносы, Платежи_Взносы);
			РезультатВыполнения.Вставить("Платежи_Взносы", Платежи_Взносы);
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураРазделов.Ведомости Тогда
		ПодготовитьСведенияОВыплатеЗаработнойПлаты(Организация, ПериодРегистрации, Ведомости, СтруктураРазделов.Аванс);
		РезультатВыполнения.Вставить("Ведомости", Ведомости);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
	
КонецПроцедуры

Процедура ПодготовитьСводРасчетов(Организация, ПериодРегистрации, СводРасчетов)
	
	СводРасчетов.Очистить();
	
	ПараметрыСтраховыхВзносов = ВыполнениеЗадачБухгалтера.ПараметрыСтраховыхВзносов(ПериодРегистрации);
	СчетаСтраховыхВзносов = ПараметрыСтраховыхВзносов.ВыгрузитьКолонку("СчетУчета");
	
	ЗначенияСубконто = Новый Массив;
	ЗначенияСубконто.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Налог);
	ЗначенияСубконто.Добавить(Перечисления.ВидыПлатежейВГосБюджет.ВзносыБезСпецоценки);
	
	ПериодРегистрацииНачало = НачалоМесяца(ПериодРегистрации);
	ПериодРегистрацииКонец  = КонецМесяца(ПериодРегистрации);
	ПериодОстатков          = ДобавитьМесяц(?(ПериодРегистрации < ТекущаяДатаСеанса(), ТекущаяДатаСеанса(),ПериодРегистрации),1);
	НачалоСледующегоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Перечисления.Периодичность.Месяц, КонецМесяца(ПериодРегистрации)+1);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",             Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации",       ПериодРегистрации);
	Запрос.УстановитьПараметр("ПериодРегистрацииНачало", ПериодРегистрацииНачало);
	Запрос.УстановитьПараметр("ПериодРегистрацииКонец",  ПериодРегистрацииКонец);
	Запрос.УстановитьПараметр("ПериодОстатков",          ПериодОстатков);
	Запрос.УстановитьПараметр("НачалоСледующегоПериода", НачалоСледующегоПериода);
	Запрос.УстановитьПараметр("СчетаСтраховыхВзносов",   СчетаСтраховыхВзносов);
	Запрос.УстановитьПараметр("ВидСубконто",             ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	Запрос.УстановитьПараметр("ЗначенияСубконто",        ЗначенияСубконто);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	""НДФЛ"" КАК Показатель,
	|	СУММА(ВЫБОР
	|			КОГДА НачисленияУдержанияПоСотрудникам.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛ)
	|				ТОГДА НачисленияУдержанияПоСотрудникам.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Сумма
	|ПОМЕСТИТЬ ВТ_НачисленияУдержания
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
	|ГДЕ
	|	НачисленияУдержанияПоСотрудникам.Период МЕЖДУ &ПериодРегистрацииНачало И &ПериодРегистрацииКонец
	|	И НачисленияУдержанияПоСотрудникам.Организация = &Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Показатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Зарплата к выплате"" КАК Показатель,
	|	СУММА(ВЫБОР
	|			КОГДА ЗарплатаКВыплатеОстатки.СуммаКВыплатеОстаток < 0
	|				ТОГДА 0
	|			ИНАЧЕ ЗарплатаКВыплатеОстатки.СуммаКВыплатеОстаток
	|		КОНЕЦ) КАК Сумма
	|ПОМЕСТИТЬ ВТ_Остатки
	|ИЗ
	|	РегистрНакопления.ЗарплатаКВыплате.Остатки(
	|			&ПериодОстатков,
	|			Организация = &Организация
	|				И ПериодВзаиморасчетов <= &ПериодРегистрации) КАК ЗарплатаКВыплатеОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Показатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Страховые взносы"" КАК Показатель,
	|	СУММА(ХозрасчетныйОстатки.СуммаОстатокКт) КАК Сумма
	|ПОМЕСТИТЬ ВТ_Взносы
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&НачалоСледующегоПериода,
	|			Счет В (&СчетаСтраховыхВзносов),
	|			&ВидСубконто,
	|			Организация = &Организация
	|				И Субконто1 В (&ЗначенияСубконто)) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_НачисленияУдержания.Показатель КАК Показатель,
	|	ВТ_НачисленияУдержания.Сумма КАК Сумма,
	|	2 КАК Порядок
	|ИЗ
	|	ВТ_НачисленияУдержания КАК ВТ_НачисленияУдержания
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Остатки.Показатель,
	|	ВТ_Остатки.Сумма,
	|	1
	|ИЗ
	|	ВТ_Остатки КАК ВТ_Остатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Взносы.Показатель,
	|	ВТ_Взносы.Сумма,
	|	3
	|ИЗ
	|	ВТ_Взносы КАК ВТ_Взносы
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	
	СводРасчетов = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

Процедура ПодготовитьСведенияОВыплатеЗаработнойПлаты(Организация, ПериодРегистрации, Ведомости, Аванс)
	
	Ведомости.Очистить();
	
	ПериодРегистрации = НачалоМесяца(ПериодРегистрации);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("СпособВыплаты", Справочники.СпособыВыплатыЗарплаты.ПоУмолчанию());
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВедомостьНаВыплатуЗарплатыВБанк.Ссылка,
	|	ВедомостьНаВыплатуЗарплатыВБанк.СуммаПоДокументу,
	|	ВедомостьНаВыплатуЗарплатыВБанк.ЗарплатныйПроект,
	|	ВедомостьНаВыплатуЗарплатыВБанк.ВерсияДанных
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВБанк КАК ВедомостьНаВыплатуЗарплатыВБанк
	|ГДЕ
	|	ВедомостьНаВыплатуЗарплатыВБанк.Организация = &Организация
	|	И ВедомостьНаВыплатуЗарплатыВБанк.Проведен
	|	И ВедомостьНаВыплатуЗарплатыВБанк.СуммаПоДокументу <> 0
	|	И НАЧАЛОПЕРИОДА(ВедомостьНаВыплатуЗарплатыВБанк.ПериодРегистрации, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|	И ВедомостьНаВыплатуЗарплатыВБанк.СпособВыплаты = &СпособВыплаты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВедомостьНаВыплатуЗарплатыВКассу.Ссылка,
	|	ВедомостьНаВыплатуЗарплатыВКассу.СуммаПоДокументу,
	|	НЕОПРЕДЕЛЕНО,
	|	ВедомостьНаВыплатуЗарплатыВКассу.ВерсияДанных
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВКассу КАК ВедомостьНаВыплатуЗарплатыВКассу
	|ГДЕ
	|	ВедомостьНаВыплатуЗарплатыВКассу.Организация = &Организация
	|	И ВедомостьНаВыплатуЗарплатыВКассу.Проведен
	|	И ВедомостьНаВыплатуЗарплатыВКассу.СуммаПоДокументу <> 0
	|	И НАЧАЛОПЕРИОДА(ВедомостьНаВыплатуЗарплатыВКассу.ПериодРегистрации, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|	И ВедомостьНаВыплатуЗарплатыВКассу.СпособВыплаты = &СпособВыплаты";
	
	Если Аванс Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ".СпособВыплаты = &СпособВыплаты", ".СпособВыплаты <> &СпособВыплаты");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		НоваяСтрока = Ведомости.Добавить();
		НоваяСтрока.Ведомость              = Результат.Ссылка;
		НоваяСтрока.ВедомостьПредставление = ПредставлениеВедомости(Результат.Ссылка);
		НоваяСтрока.Сумма                  = Результат.СуммаПоДокументу;
		НоваяСтрока.ЗарплатныйПроект       = Результат.ЗарплатныйПроект;
		НоваяСтрока.ВедомостьВерсияДанных  = Результат.ВерсияДанных;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("Ведомости", Ведомости.ВыгрузитьКолонку("Ведомость"));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПлатежноеПоручение.ДокументОснование КАК Ведомость,
	|	ПлатежноеПоручение.Ссылка КАК ПлатежныйДокумент,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СостоянияБанковскихДокументов.Состояние, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.СостоянияБанковскихДокументов.Оплачено)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Оплачено,
	|	ПлатежноеПоручение.ВерсияДанных КАК ВерсияДанных
	|ПОМЕСТИТЬ ВТ_ПлатежныеДокументы
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияБанковскихДокументов КАК СостоянияБанковскихДокументов
	|		ПО ПлатежноеПоручение.Ссылка = СостоянияБанковскихДокументов.СсылкаНаОбъект
	|ГДЕ
	|	ПлатежноеПоручение.ДокументОснование В(&Ведомости)
	|	И ПлатежноеПоручение.Организация = &Организация
	|	И НЕ ПлатежноеПоручение.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПлатежноеПоручение.ПлатежнаяВедомость,
	|	ПлатежноеПоручение.Ссылка,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СостоянияБанковскихДокументов.Состояние, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.СостоянияБанковскихДокументов.Оплачено)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ПлатежноеПоручение.ВерсияДанных
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияБанковскихДокументов КАК СостоянияБанковскихДокументов
	|		ПО ПлатежноеПоручение.Ссылка = СостоянияБанковскихДокументов.СсылкаНаОбъект
	|ГДЕ
	|	ПлатежноеПоручение.ПлатежнаяВедомость В(&Ведомости)
	|	И ПлатежноеПоручение.Организация = &Организация
	|	И НЕ ПлатежноеПоручение.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.ПлатежнаяВедомость,
	|	РасходныйКассовыйОрдер.Ссылка,
	|	ИСТИНА,
	|	РасходныйКассовыйОрдер.ВерсияДанных
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.ПлатежнаяВедомость В(&Ведомости)
	|	И РасходныйКассовыйОрдер.Организация = &Организация
	|	И НЕ РасходныйКассовыйОрдер.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость,
	|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка,
	|	ИСТИНА,
	|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка.ВерсияДанных
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК РасходныйКассовыйОрдерВыплатаЗаработнойПлаты
	|ГДЕ
	|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость В(&Ведомости)
	|	И РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка.Организация = &Организация
	|	И НЕ РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПлатежныеДокументы.Ведомость,
	|	ВТ_ПлатежныеДокументы.ПлатежныйДокумент,
	|	ВТ_ПлатежныеДокументы.Оплачено,
	|	ВТ_ПлатежныеДокументы.ВерсияДанных
	|ИЗ
	|	ВТ_ПлатежныеДокументы КАК ВТ_ПлатежныеДокументы
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ПлатежныеДокументы.Ведомость,
	|	ВТ_ПлатежныеДокументы.ПлатежныйДокумент,
	|	ВТ_ПлатежныеДокументы.Оплачено,
	|	ВТ_ПлатежныеДокументы.ВерсияДанных";
	
	СуществующиеДокументы = Запрос.Выполнить().Выгрузить();
	ОтборВедомость = Новый Структура("Ведомость");
	Для Каждого СтрокаТаблицы Из Ведомости Цикл
		ОтборВедомость.Ведомость = СтрокаТаблицы.Ведомость;
		МассивДокументов = СуществующиеДокументы.НайтиСтроки(ОтборВедомость);
		Если МассивДокументов.Количество() = 0 Тогда
			Продолжить;
		ИначеЕсли МассивДокументов.Количество() = 1 Тогда
			СтрокаТаблицы.ПлатежныеДокументы              = МассивДокументов[0].ПлатежныйДокумент;
			СтрокаТаблицы.Оплачено                        = МассивДокументов[0].Оплачено;
			СтрокаТаблицы.ПлатежныеДокументыПредставление = ПредставлениеПлатежногоДокумента(МассивДокументов[0].ПлатежныйДокумент, МассивДокументов[0].Оплачено);
			СтрокаТаблицы.ПлатежныеДокументыВерсияДанных  = МассивДокументов[0].ВерсияДанных;
		Иначе
			Оплачено = Истина;
			СписокДокументов = Новый СписокЗначений;
			Оплачены = 0;
			Для Каждого ЗначениеМассива ИЗ МассивДокументов Цикл
				СписокДокументов.Добавить(ЗначениеМассива.ПлатежныйДокумент, ЗначениеМассива.ВерсияДанных);
				Если НЕ ЗначениеМассива.Оплачено Тогда
					Оплачено = Ложь;
				Иначе
					Оплачены = Оплачены + 1;
				КонецЕсли;
			КонецЦикла;
			СтрокаТаблицы.ПлатежныеДокументы              = СписокДокументов;
			Если Оплачены > 0 И МассивДокументов.Количество() = Оплачены Тогда
				СтрокаТаблицы.ПлатежныеДокументыПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Платежные поручения %1 (оплачены)'"),
					МассивДокументов.Количество());
			Иначе
				СтрокаТаблицы.ПлатежныеДокументыПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Платежные поручения %1 (оплачено %2)'"),
					МассивДокументов.Количество(), Оплачены);
			КонецЕсли;
			СтрокаТаблицы.Оплачено                        = Оплачено;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПредставлениеПлатежногоДокумента(ДокументСсылка, Оплачено) Экспорт
	
	ДокументОбъект         = ДокументСсылка.ПолучитьОбъект();
	ПредставлениеДокумента = ДокументОбъект.Метаданные().Синоним;
	НомерДокумента         = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДокументОбъект.Номер, Истина, Истина);
	ДатаДокумента          = Формат(ДокументОбъект.Дата,"ДЛФ=D");
	СтатусОплаты           = ?(Оплачено, НСтр("ru = 'оплачено'"), НСтр("ru = 'подготовлено'"));
	
	ШаблонПредставления = НСтр("ru = '%1 %2 от %3 (%4)'");
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления,
		ПредставлениеДокумента, НомерДокумента, ДатаДокумента, СтатусОплаты);

КонецФункции

Функция ПредставлениеВедомости(ДокументСсылка)
	
	ДокументОбъект         = ДокументСсылка.ПолучитьОбъект();
	ПредставлениеДокумента = ДокументОбъект.Метаданные().Синоним;
	НомерДокумента         = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДокументОбъект.Номер, Истина, Истина);
	ДатаДокумента          = Формат(ДокументОбъект.Дата,"ДЛФ=D");
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ВедомостьНаВыплатуЗарплатыВКассу") Тогда
		ПредставлениеДокумента = НСтр("ru = 'Платежная ведомость'");
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ВедомостьНаВыплатуЗарплатыВБанк") Тогда
		ПредставлениеДокумента = НСтр("ru = 'Реестр перечислений'");
	КонецЕсли;
	
	ШаблонПредставления = НСтр("ru = '%1 %2 от %3'");
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления,
		ПредставлениеДокумента, НомерДокумента, ДатаДокумента);

КонецФункции

Процедура ПодготовитьСведенияОНачисленииЗаработнойПлаты(Организация, ПериодРегистрации, РасчетныеДокументы, Пересчитать = Ложь)
	
	ПериодРегистрации = НачалоМесяца(ПериодРегистрации);
	
	ПредставлениеПериодаРегистрации = ВыборПериодаКлиентСервер.ПолучитьПредставлениеПериодаОтчета(
		Перечисления.ДоступныеПериодыОтчета.Месяц, НачалоМесяца(ПериодРегистрации), КонецМесяца(ПериодРегистрации));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачислениеЗарплатыНачисления.Ссылка КАК Документ,
	|	НачислениеЗарплатыНачисления.Ссылка.МесяцНачисления КАК ПериодРегистрации,
	|	СУММА(НачислениеЗарплатыНачисления.Результат) КАК Сумма,
	|	NULL КАК Сотрудник,
	|	""Зарплата и налоги"" КАК ДокументПредставление,
	|	3 КАК Порядок,
	|	NULL КАК ДатаНачала,
	|	NULL КАК ДатаОкончания,
	|	NULL КАК ФизическоеЛицо,
	|	НачислениеЗарплатыНачисления.Ссылка.ВерсияДанных КАК ВерсияДанных
	|ПОМЕСТИТЬ ВТ_Начисления
	|ИЗ
	|	Документ.НачислениеЗарплаты.Начисления КАК НачислениеЗарплатыНачисления
	|ГДЕ
	|	НачислениеЗарплатыНачисления.Ссылка.Проведен
	|	И НАЧАЛОПЕРИОДА(НачислениеЗарплатыНачисления.Ссылка.МесяцНачисления, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|	И НачислениеЗарплатыНачисления.Ссылка.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	НачислениеЗарплатыНачисления.Ссылка,
	|	НачислениеЗарплатыНачисления.Ссылка.МесяцНачисления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БольничныйЛистНачисления.Ссылка,
	|	БольничныйЛистНачисления.Ссылка.ПериодРегистрации,
	|	СУММА(БольничныйЛистНачисления.Результат),
	|	БольничныйЛистНачисления.Сотрудник,
	|	ВЫБОР
	|		КОГДА БольничныйЛистНачисления.Ссылка.ЯвляетсяПродолжениемБолезни
	|			ТОГДА ""Больничный лист (продолжение)""
	|		ИНАЧЕ ""Больничный лист""
	|	КОНЕЦ,
	|	1,
	|	БольничныйЛистНачисления.Ссылка.ДатаНачала,
	|	БольничныйЛистНачисления.Ссылка.ДатаОкончания,
	|	БольничныйЛистНачисления.Ссылка.ФизическоеЛицо,
	|	БольничныйЛистНачисления.Ссылка.ВерсияДанных
	|ИЗ
	|	Документ.БольничныйЛист.Начисления КАК БольничныйЛистНачисления
	|ГДЕ
	|	БольничныйЛистНачисления.Ссылка.Проведен
	|	И НАЧАЛОПЕРИОДА(БольничныйЛистНачисления.Ссылка.ПериодРегистрации, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|	И БольничныйЛистНачисления.Ссылка.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	БольничныйЛистНачисления.Ссылка,
	|	БольничныйЛистНачисления.Ссылка.ПериодРегистрации,
	|	БольничныйЛистНачисления.Сотрудник,
	|	ВЫБОР
	|		КОГДА БольничныйЛистНачисления.Ссылка.ЯвляетсяПродолжениемБолезни
	|			ТОГДА ""Больничный лист (продолжение)""
	|		ИНАЧЕ ""Больничный лист""
	|	КОНЕЦ,
	|	БольничныйЛистНачисления.Ссылка.ДатаНачала,
	|	БольничныйЛистНачисления.Ссылка.ДатаОкончания,
	|	БольничныйЛистНачисления.Ссылка.ФизическоеЛицо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтпускНачисления.Ссылка,
	|	ОтпускНачисления.Ссылка.ПериодРегистрации,
	|	СУММА(ОтпускНачисления.Результат),
	|	ОтпускНачисления.Сотрудник,
	|	""Отпуск"",
	|	2,
	|	ОтпускНачисления.Ссылка.ДатаНачалаОсновногоОтпуска,
	|	ОтпускНачисления.Ссылка.ДатаОкончанияОсновногоОтпуска,
	|	ОтпускНачисления.Ссылка.ФизическоеЛицо,
	|	ОтпускНачисления.Ссылка.ВерсияДанных
	|ИЗ
	|	Документ.Отпуск.Начисления КАК ОтпускНачисления
	|ГДЕ
	|	ОтпускНачисления.Ссылка.Проведен
	|	И НАЧАЛОПЕРИОДА(ОтпускНачисления.Ссылка.ПериодРегистрации, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|	И ОтпускНачисления.Ссылка.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтпускНачисления.Ссылка,
	|	ОтпускНачисления.Ссылка.ПериодРегистрации,
	|	ОтпускНачисления.Сотрудник,
	|	ОтпускНачисления.Ссылка.ДатаНачалаОсновногоОтпуска,
	|	ОтпускНачисления.Ссылка.ДатаОкончанияОсновногоОтпуска,
	|	ОтпускНачисления.Ссылка.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Начисления.Документ КАК Документ,
	|	ВТ_Начисления.ПериодРегистрации,
	|	ВТ_Начисления.Сумма,
	|	ВТ_Начисления.Сотрудник,
	|	ВТ_Начисления.ДокументПредставление,
	|	ВТ_Начисления.Порядок КАК Порядок,
	|	ВТ_Начисления.ДатаНачала,
	|	ВТ_Начисления.ДатаОкончания,
	|	ВТ_Начисления.ФизическоеЛицо,
	|	ВТ_Начисления.ВерсияДанных
	|ИЗ
	|	ВТ_Начисления КАК ВТ_Начисления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок УБЫВ,
	|	Документ";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Пересчитать Тогда
		Пересчитать = Результат.Количество() <> РасчетныеДокументы.Количество()
			ИЛИ Результат.Итог("Сумма") <> РасчетныеДокументы.Итог("Сумма");
	КонецЕсли;
		
	РасчетныеДокументы.Очистить();
	
	ЕстьНачислениеЗарплаты = Ложь;
	Для Каждого СтрокаТаблицы ИЗ Результат Цикл
		НоваяСтрока = РасчетныеДокументы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		Если ЗначениеЗаполнено(НоваяСтрока.Сотрудник) Тогда
			ДанныеФизическогоЛица = УчетЗарплаты.ДанныеФизическихЛиц(,СтрокаТаблицы.ФизическоеЛицо, ПериодРегистрации);
			НоваяСтрока.ДокументПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 (%2, с %3 по %4)'"), 
				НоваяСтрока.ДокументПредставление, ДанныеФизическогоЛица.Представление, Формат(СтрокаТаблицы.ДатаНачала, "ДФ=dd.MM.yyyy"), Формат(СтрокаТаблицы.ДатаОкончания, "ДФ=dd.MM.yyyy"));
		Иначе
			НоваяСтрока.ДокументПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 за %2 г.'"), 
				НоваяСтрока.ДокументПредставление, ПредставлениеПериодаРегистрации);
			ЕстьНачислениеЗарплаты = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьНачислениеЗарплаты И Пересчитать Тогда
		ДокументНачисленияСсылка = УчетЗарплаты.ПолучитьДокументНачисленияЗарплаты(НачалоМесяца(ПериодРегистрации), Организация);
		ДокументНачисленияОбъект = ДокументНачисленияСсылка.ПолучитьОбъект();
		ДокументНачисленияОбъект.ПометкаУдаления = Ложь;
		ДокументНачисленияОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		МассивДокументов = РасчетныеДокументы.НайтиСтроки(Новый Структура("Документ", ДокументНачисленияСсылка));
		МассивДокументов[0].Сумма = ДокументНачисленияОбъект.Начислено;
	ИначеЕсли НЕ ЕстьНачислениеЗарплаты Тогда
		ДокументНачисленияСсылка = УчетЗарплаты.ПолучитьДокументНачисленияЗарплаты(НачалоМесяца(ПериодРегистрации), Организация);
		ДокументНачисленияОбъект = ДокументНачисленияСсылка.ПолучитьОбъект();
		ДокументНачисленияОбъект.Дата            = КонецМесяца(ПериодРегистрации);
		ДокументНачисленияОбъект.ПометкаУдаления = Ложь;
		ДокументНачисленияОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		НоваяСтрока = РасчетныеДокументы.Добавить();
		НоваяСтрока.Документ              = ДокументНачисленияСсылка;
		НоваяСтрока.Сумма                 = ДокументНачисленияСсылка.Начисления.Итог("Результат");
		НоваяСтрока.ДокументПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Зарплата и налоги за %1 г.'"), ПредставлениеПериодаРегистрации);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьСведенияПоНДФЛ(Организация, ПериодСобытия, Правило, Платежи)
	
	Платежи.Очистить();
	
	Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.НДФЛ);
	
	СчетУчета = Справочники.ВидыНалоговИПлатежейВБюджет.СчетУчета(Налог, ПериодСобытия);
	Если НЕ ЗначениеЗаполнено(СчетУчета) Тогда
		Возврат;
	КонецЕсли;
	
	НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Перечисления.Периодичность.Месяц, ПериодСобытия);
	КонецПериода  = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Перечисления.Периодичность.Месяц, ПериодСобытия);
	
	КБК = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(Налог, , ПериодСобытия);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	Запрос.УстановитьПараметр("Налог",         Налог);
	Запрос.УстановитьПараметр("СчетУчета",     СчетУчета);
	Запрос.УстановитьПараметр("КБК",           КБК);
	Запрос.УстановитьПараметр("ВидНалоговогоОбязательства", Перечисления.ВидыПлатежейВГосБюджет.Налог);
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	
	Если ПолучитьФункциональнуюОпцию("РасчетЗарплатыПоПодразделениямДляНебольшихОрганизаций") Тогда
	
		Запрос.УстановитьПараметр("МесяцНалоговогоПериода",  НачалоДня(КонецПериода));
		Запрос.Текст =
		"ВЫБРАТЬ
		|	&СчетУчета КАК СчетУчета,
		|	&КБК КАК КБК,
		|	&Налог КАК Налог,
		|	&ВидНалоговогоОбязательства КАК ВидНалоговогоОбязательства,
		|	РасчетыПоНДФЛ.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
		|	РасчетыПоНДФЛ.РегистрацияВНалоговомОргане.Код КАК КодНалоговогоОргана,
		|	РасчетыПоНДФЛ.РегистрацияВНалоговомОргане.КПП КАК КПП,
		|	РасчетыПоНДФЛ.РегистрацияВНалоговомОргане.КодПоОКТМО КАК КодПоОКТМО,
		|	СУММА(РасчетыПоНДФЛ.СуммаПриход) КАК Сумма
		|ИЗ
		|	РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			Организация = &Организация
		|				И МесяцНалоговогоПериода = &МесяцНалоговогоПериода) КАК РасчетыПоНДФЛ
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетыПоНДФЛ.РегистрацияВНалоговомОргане,
		|	РасчетыПоНДФЛ.РегистрацияВНалоговомОргане.Код,
		|	РасчетыПоНДФЛ.РегистрацияВНалоговомОргане.КПП,
		|	РасчетыПоНДФЛ.РегистрацияВНалоговомОргане.КодПоОКТМО
		|
		|УПОРЯДОЧИТЬ ПО
		|	КодПоОКТМО,
		|	КПП,
		|	КодНалоговогоОргана,
		|	РегистрацияВНалоговомОргане";
		
	ИначеЕсли НалоговыйУчет.УчетВРазрезеНалоговыхОрганов() Тогда
		
		НалоговыйУчетОбособленныхПодразделений.ДобавитьВидСубконтоРегистрацияВНалоговомОргане(ВидыСубконто);
		Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	&СчетУчета КАК СчетУчета,
		|	&КБК КАК КБК,
		|	&Налог КАК Налог,
		|	&ВидНалоговогоОбязательства КАК ВидНалоговогоОбязательства,
		|	ХозрасчетныйОбороты.Субконто2 КАК РегистрацияВНалоговомОргане,
		|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане).Код КАК КодНалоговогоОргана,
		|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане).КПП КАК КПП,
		|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане).КодПоОКТМО КАК КодПоОКТМО,
		|	СУММА(ХозрасчетныйОбороты.СуммаОборотКт - ХозрасчетныйОбороты.СуммаОборотДт) КАК Сумма
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Регистратор,
		|			Счет = &СчетУчета,
		|			&ВидыСубконто,
		|			Организация = &Организация
		|				И Субконто1 = &ВидНалоговогоОбязательства,
		|			,
		|			) КАК ХозрасчетныйОбороты
		|ГДЕ
		|	НЕ(ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.СписаниеСРасчетногоСчета
		|				ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.РасходныйКассовыйОрдер)
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОбороты.Субконто2,
		|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане).Код,
		|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане).КПП,
		|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.РегистрацииВНалоговомОргане).КодПоОКТМО
		|
		|УПОРЯДОЧИТЬ ПО
		|	КодПоОКТМО,
		|	КПП,
		|	КодНалоговогоОргана,
		|	РегистрацияВНалоговомОргане";
		
	Иначе
		
		Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	&СчетУчета КАК СчетУчета,
		|	&КБК КАК КБК,
		|	&Налог КАК Налог,
		|	&ВидНалоговогоОбязательства КАК ВидНалоговогоОбязательства,
		|	ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка) КАК РегистрацияВНалоговомОргане,
		|	"""" КАК КодНалоговогоОргана,
		|	"""" КАК КПП,
		|	"""" КАК КодПоОКТМО,
		|	СУММА(ХозрасчетныйОбороты.СуммаОборотКт - ХозрасчетныйОбороты.СуммаОборотДт) КАК Сумма
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Регистратор,
		|			Счет = &СчетУчета,
		|			&ВидыСубконто,
		|			Организация = &Организация
		|				И Субконто1 = &ВидНалоговогоОбязательства,
		|			,
		|			) КАК ХозрасчетныйОбороты
		|ГДЕ
		|	НЕ(ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.СписаниеСРасчетногоСчета
		|				ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.РасходныйКассовыйОрдер)";
		
	КонецЕсли;
	
	ТаблицаНалоговВзносов = Запрос.Выполнить().Выгрузить();
	
	КодТерритории       = Справочники.Организации.КодТерриторииМестаРегистрации(Организация);
	КППОрганизации      = Справочники.Организации.КППНаДату(Организация, КонецПериода);
	КодНалоговогоОргана = ДанныеГосударственныхОрганов.КодГосударственногоОрганаОрганизации(
		Организация, Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган);
	
	Для Каждого СтрокаТаблицы Из ТаблицаНалоговВзносов Цикл
		
		СтрокаНалога = Платежи.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНалога, СтрокаТаблицы);
		
		СтрокаНалога.ОКАТО = ?(ЗначениеЗаполнено(СтрокаТаблицы.КодПоОКТМО), СтрокаТаблицы.КодПоОКТМО, КодТерритории);
		Если НЕ ЗначениеЗаполнено(СтрокаНалога.КПП) Тогда
			СтрокаНалога.КПП = КППОрганизации;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаНалога.КодНалоговогоОргана) Тогда
			СтрокаНалога.КодНалоговогоОргана = КодНалоговогоОргана;
		КонецЕсли;
		
	КонецЦикла;
	
	ДополнитьНачисленияПлатежнымиДокументами(Правило, Платежи, ПериодСобытия, Организация);
	
КонецПроцедуры

Процедура ПодготовитьСведенияПоВзносам(Организация, ПериодСобытия, Правило, Платежи)
	
	Платежи.Очистить();
	
	НачалоСледующегоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Перечисления.Периодичность.Месяц, КонецМесяца(ПериодСобытия)+1);
	КонецТекущегоПериода    = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Перечисления.Периодичность.Месяц, ПериодСобытия);
	
	ПараметрыСтраховыхВзносов = ВыполнениеЗадачБухгалтера.ПараметрыСтраховыхВзносов(ПериодСобытия);
	
	СчетаСтраховыхВзносов = ПараметрыСтраховыхВзносов.ВыгрузитьКолонку("СчетУчета");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоСледующегоПериода);
	
	ЗначенияСубконто = Новый Массив;
	ЗначенияСубконто.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Налог);
	ЗначенияСубконто.Добавить(Перечисления.ВидыПлатежейВГосБюджет.ВзносыБезСпецоценки);
	
	// Для получения остатков.
	Запрос.УстановитьПараметр("СчетаСтраховыхВзносов", СчетаСтраховыхВзносов);
	Запрос.УстановитьПараметр("ВидСубконто",      ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	Запрос.УстановитьПараметр("ЗначенияСубконто", ЗначенияСубконто);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет КАК СчетУчета,
	|	ХозрасчетныйОстатки.Субконто1 КАК ВидНалоговогоОбязательства,
	|	ХозрасчетныйОстатки.СуммаОстатокКт КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&НачалоПериода,
	|			Счет В (&СчетаСтраховыхВзносов),
	|			&ВидСубконто,
	|			Организация = &Организация
	|				И Субконто1 В (&ЗначенияСубконто)) КАК ХозрасчетныйОстатки";
	
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	
	КодТерритории = Справочники.Организации.КодТерриторииМестаРегистрации(Организация);
	КППОрганизации      = Справочники.Организации.КППНаДату(Организация, КонецТекущегоПериода);
	КодыГосударственныхОрганов = Новый Соответствие; // Кешируем в функции
	
	Пока Выборка.Следующий() Цикл
		Платеж = Платежи.Добавить();
		ЗаполнитьЗначенияСвойств(Платеж, Выборка);
		Платеж.Организация = Организация;
		Платеж.ОКАТО       = КодТерритории;
		Платеж.КПП         = КППОрганизации;
		СтруктураПоиска = Новый Структура("СчетУчета, ВидНалоговогоОбязательства");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
		РеквизитыПоСчету = ПараметрыСтраховыхВзносов.НайтиСтроки(СтруктураПоиска);
		Если РеквизитыПоСчету.Количество() <> 0 Тогда
			ЗаполнитьЗначенияСвойств(Платеж, РеквизитыПоСчету[0], "КБК, Налог");
		КонецЕсли;
		
		ШаблонНаименования    = НСтр("ru = '%1%2:'");
		НаименованиеНалога    = Строка(Платеж.Налог);
		УточнениеНаименования = "";
		Если Выборка.ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.ВзносыБезСпецоценки Тогда
			УточнениеНаименования = НСтр("ru = ' (без спецоценки)'");
		КонецЕсли;
		Платеж.Наименование = СтрШаблон(ШаблонНаименования, НаименованиеНалога, УточнениеНаименования);
		
		ВидГосударственногоОргана = ПлатежиВБюджетПереопределяемый.ВидГосударственногоОргана(Платеж.КБК);
		КодГосударственногоОргана = КодыГосударственныхОрганов[ВидГосударственногоОргана];
		Если КодГосударственногоОргана = Неопределено Тогда
			КодГосударственногоОргана =
				ДанныеГосударственныхОрганов.КодГосударственногоОрганаОрганизации(Организация, ВидГосударственногоОргана);
			КодыГосударственныхОрганов.Вставить(ВидГосударственногоОргана, КодГосударственногоОргана);
		КонецЕсли;
		Платеж.КодНалоговогоОргана = КодГосударственногоОргана;
	КонецЦикла;
	
	ДополнитьНачисленияПлатежнымиДокументами(Правило, Платежи, ПериодСобытия, Организация);
	
КонецПроцедуры

#Область ГенераторКомплектовДокументов

Процедура СформироватьДокументы(ПараметрыОбработки, АдресХранилища) Экспорт
	
	СформироватьДокументыНаВыплатуЗарплаты(ПараметрыОбработки);
	
	Если НЕ ПараметрыОбработки.Аванс Тогда
		Если ПараметрыОбработки.Платежи_НДФЛ.Количество() > 0 Тогда
			СформироватьДокументыНаУплатуНДФЛ(ПараметрыОбработки);
		КонецЕсли;
		Если ПараметрыОбработки.Платежи_Взносы.Количество() > 0 Тогда
			СформироватьДокументыНаУплатуВзносов(ПараметрыОбработки);
		КонецЕсли;
	КонецЕсли;
	
	ПодготовитьДанные(ПараметрыОбработки, АдресХранилища);
	
КонецПроцедуры

Процедура СформироватьДокументыНаВыплатуЗарплаты(ПараметрыОбработки)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", ПараметрыОбработки.Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗарплатныеПроекты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ЗарплатныеПроекты КАК ЗарплатныеПроекты
	|ГДЕ
	|	ЗарплатныеПроекты.Организация = &Организация
	|	И НЕ ЗарплатныеПроекты.ПометкаУдаления";
	
	ЗарплатныеПроекты = Запрос.Выполнить().Выгрузить();
	
	ВидыМестВыплаты = Перечисления.ВидыМестВыплатыЗарплаты.ВсеЗначения();
	
	СтатьяДвиженияДенежныхСредств = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатьиДвиженияДенежныхСредств.ОплатаТруда");
	
	Для Каждого ВидМестаВыплаты ИЗ ВидыМестВыплаты Цикл
		
		Если ВидМестаВыплаты = Перечисления.ВидыМестВыплатыЗарплаты.ЗарплатныйПроект Тогда
			// Для зарплатных проектов
			Для Каждого ЗарплатныйПроект ИЗ ЗарплатныеПроекты Цикл
				ДобавитьВедомость(ВидМестаВыплаты, ЗарплатныйПроект.Ссылка, ПараметрыОбработки);
			КонецЦикла;
			// Для личных счетов
			ДобавитьВедомость(ВидМестаВыплаты, , ПараметрыОбработки);
		Иначе
			ДобавитьВедомость(ВидМестаВыплаты, , ПараметрыОбработки);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ПараметрыВедомости ИЗ ПараметрыОбработки.Ведомости Цикл
		
		Если ЗначениеЗаполнено(ПараметрыВедомости.ПлатежныеДокументы) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ПараметрыВедомости.Ведомость) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу") Тогда
			МассивДокументовКасса = Новый Массив;
			МассивДокументовКасса.Добавить(ПараметрыВедомости.Ведомость);
			
			ДокументВыплаты = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
			ДокументВыплаты.Заполнить(МассивДокументовКасса);
			ДокументВыплаты.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
			ДокументВыплаты.Записать(РежимЗаписиДокумента.Проведение);
			
		ИначеЕсли ТипЗнч(ПараметрыВедомости.Ведомость) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк") Тогда
			Если ЗначениеЗаполнено(ПараметрыВедомости.ЗарплатныйПроект) Тогда
				
				ДокументВыплаты = Документы.ПлатежноеПоручение.СоздатьДокумент();
				ДокументВыплаты.Заполнить(ПараметрыВедомости.Ведомость);
				ДокументВыплаты.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
				ДокументВыплаты.Записать(РежимЗаписиДокумента.Проведение);
				
			Иначе
				
				ОбработкаОбъект = Новый Структура();
				ОбработкаОбъект.Вставить("Организация",                   ПараметрыОбработки.Организация);
				ОбработкаОбъект.Вставить("СчетОрганизации",               ПараметрыОбработки.СчетОрганизации);
				ОбработкаОбъект.Вставить("ПлатежнаяВедомость",            ПараметрыВедомости.Ведомость);
				ОбработкаОбъект.Вставить("СтатьяДвиженияДенежныхСредств", СтатьяДвиженияДенежныхСредств);
				ОбработкаОбъект.Вставить("ДатаПлатежныхПоручений",        ТекущаяДатаСеанса());
				ОбработкаОбъект.Вставить("ПлатежныеПоручения",            Новый ТаблицаЗначений);
				ПараметрыДопОбработки = Новый Структура("Объект", ОбработкаОбъект);
				АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
				Обработки.ВыплатаЗарплатыПлатежнымиПоручениями.Автозаполнение(ПараметрыДопОбработки, АдресХранилища);
				ПараметрыДопОбработки = ПолучитьИзВременногоХранилища(АдресХранилища);
				Обработки.ВыплатаЗарплатыПлатежнымиПоручениями.СоздатьПлатежныеПоручения(ПараметрыДопОбработки, АдресХранилища);
				ПараметрыДопОбработки = ПолучитьИзВременногоХранилища(АдресХранилища);
				Обработки.ВыплатаЗарплатыПлатежнымиПоручениями.ПровестиПлатежныеПоручения(ПараметрыДопОбработки, АдресХранилища);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьВедомость(ВидМестаВыплаты, ЗарплатныйПроект = Неопределено, ПараметрыОбработки)
	
	ДокументМенеджер = ВзаиморасчетыССотрудниками.МенеджерДокументаВедомостьПоВидуМестаВыплаты(ВидМестаВыплаты);
	Если ДокументМенеджер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Ведомость = ДокументМенеджер.СоздатьДокумент();
	
	ДанныеЗаполнения = ВзаиморасчетыССотрудниками.ДанныеЗаполненияВедомости();
	ДанныеЗаполнения.Шапка.Организация       = ПараметрыОбработки.Организация;
	ДанныеЗаполнения.Шапка.Дата              = ТекущаяДатаСеанса();
	ДанныеЗаполнения.Шапка.ПериодРегистрации = ПараметрыОбработки.ПериодРегистрации;
	Если НЕ ПараметрыОбработки.Аванс Тогда
		ДанныеЗаполнения.Шапка.СпособВыплаты     = Справочники.СпособыВыплатыЗарплаты.ПоУмолчанию();
	Иначе
		ДанныеЗаполнения.Шапка.СпособВыплаты     = Справочники.СпособыВыплатыЗарплаты.Аванс();
	КонецЕсли;
	ДанныеЗаполнения.Шапка.Округление        = Справочники.СпособыОкругленияПриРасчетеЗарплаты.ПоУмолчанию();
	
	Ведомость.Заполнить(ДанныеЗаполнения);
	Если ЗарплатныйПроект <> Неопределено Тогда
		Ведомость.ЗарплатныйПроект = ЗарплатныйПроект;
	КонецЕсли;
	
	Ведомость.ЗаполнитьЗарплату();
	Ведомость.Записать(РежимЗаписиДокумента.Проведение);
	
	Если Ведомость.Зарплата.Количество() <> 0 Тогда
		
		НоваяСтрока = ПараметрыОбработки.Ведомости.Добавить();
		НоваяСтрока.Ведомость = Ведомость.Ссылка;
		НоваяСтрока.Сумма     = Ведомость.СуммаПоДокументу;
		Если ЗарплатныйПроект <> Неопределено Тогда
			НоваяСтрока.ЗарплатныйПроект = ЗарплатныйПроект;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДокументыНаУплатуНДФЛ(ПараметрыОбработки)
	
	Для каждого СтрокаПлатежа Из ПараметрыОбработки.Платежи_НДФЛ Цикл
		
		Если ЗначениеЗаполнено(СтрокаПлатежа.ПлатежноеПоручение) Тогда
			Продолжить;
		КонецЕсли;
		
		Результат = Неопределено;
		
		ПараметрыФормы = ПараметрыФормыПлатежногоДокументаПоСтроке(
			СтрокаПлатежа,
			ПараметрыОбработки.Правило_НДФЛ,
			Ложь,
			ПараметрыОбработки.ЭтоПредприниматель,
			ПараметрыОбработки.Организация,
			ПараметрыОбработки.ПериодРегистрации);
		
		Если ПараметрыОбработки.ЭтоПредприниматель
				И НЕ ЗначениеЗаполнено(ПараметрыОбработки.СчетОрганизации) Тогда
			
			ДокументОбъект = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
			ДокументОбъект.Заполнить(ПараметрыФормы.ЗначенияЗаполнения);
			
			Результат = ЗаписатьПлатежныйДокумент(ДокументОбъект, СтрокаПлатежа);
			
		Иначе
			
			ДокументОбъект = Документы.ПлатежноеПоручение.СоздатьДокумент();
			ДокументОбъект.Заполнить(ПараметрыФормы.ЗначенияЗаполнения);
			
			Результат = ЗаписатьПлатежныйДокумент(ДокументОбъект, СтрокаПлатежа);
			
		КонецЕсли;
			
		Если ЗначениеЗаполнено(Результат) Тогда
			СтрокаПлатежа.ПлатежноеПоручение = Результат;
			РегистрыСведений.ЗадачиБухгалтераНалоговыеПлатежи.ДобавитьЗаписьПравила(
				ПараметрыОбработки.Организация,
				Результат,
				ПараметрыОбработки.Правило_НДФЛ,
				ПараметрыОбработки.ПериодРегистрации);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьДокументыНаУплатуВзносов(ПараметрыОбработки)
	
	Для каждого СтрокаПлатежа Из ПараметрыОбработки.Платежи_Взносы Цикл
		
		Если ЗначениеЗаполнено(СтрокаПлатежа.ПлатежноеПоручение) Тогда
			Продолжить;
		КонецЕсли;
		
		Результат = Неопределено;
		
		ПараметрыФормы = ПараметрыФормыПлатежногоДокументаПоСтроке(
			СтрокаПлатежа,
			ПараметрыОбработки.Правило_Взносы,
			Ложь,
			ПараметрыОбработки.ЭтоПредприниматель,
			ПараметрыОбработки.Организация,
			ПараметрыОбработки.ПериодРегистрации);
		
		Если ПараметрыОбработки.ЭтоПредприниматель
			И НЕ ЗначениеЗаполнено(ПараметрыОбработки.СчетОрганизации) Тогда
			
			ДокументОбъект = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
			ДокументОбъект.Заполнить(ПараметрыФормы.ЗначенияЗаполнения);
			
			Результат = ЗаписатьПлатежныйДокумент(ДокументОбъект, СтрокаПлатежа);
			
		Иначе
			
			ДокументОбъект = Документы.ПлатежноеПоручение.СоздатьДокумент();
			ДокументОбъект.Заполнить(ПараметрыФормы.ЗначенияЗаполнения);
			
			Результат = ЗаписатьПлатежныйДокумент(ДокументОбъект, СтрокаПлатежа);
			
		КонецЕсли;
			
		Если ЗначениеЗаполнено(Результат) Тогда
			СтрокаПлатежа.ПлатежноеПоручение = Результат;
			РегистрыСведений.ЗадачиБухгалтераНалоговыеПлатежи.ДобавитьЗаписьПравила(
				ПараметрыОбработки.Организация,
				Результат,
				ПараметрыОбработки.Правило_Взносы,
				ПараметрыОбработки.ПериодРегистрации);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаписатьПлатежныйДокумент(ДокументОбъект, СтрокаПлатежа)
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	Попытка
		
		// Если документ заполнен без ошибок, то проводим, предварительно записываем для привязки сообщений об ошибках
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		БезОшибок = ДокументОбъект.ПроверитьЗаполнение();
		Если БезОшибок Тогда
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		
		Возврат ДокументОбъект.Ссылка;
	Исключение
		ТекстСообщения = НСтр("ru = 'Не сформирован документ ""%1"" на %2 руб.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения, МетаданныеДокумента.Синоним, СтрокаПлатежа.Сумма);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		ТекстОшибки = НСтр("ru = 'Не удалось создать документ.
			|%1'");
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстОшибки, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Помощник уплаты налога'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,
			МетаданныеДокумента,
			,
			ОписаниеОшибки);
	КонецПопытки;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПараметрыФормыПлатежногоДокументаПоСтроке(СтрокаПлатежа, Правило, УплатаНаличными, ЭтоПредприниматель, Организация, ПериодРегистрации) Экспорт
	
	Если ЗначениеЗаполнено(СтрокаПлатежа.ПлатежноеПоручение) Тогда
		Возврат Новый Структура("Ключ, ВерсияДанных", СтрокаПлатежа.ПлатежноеПоручение, СтрокаПлатежа.ВерсияДанных);
	КонецЕсли;
	
	Если ЭтоПредприниматель Тогда
		Если НЕ УплатаНаличными Тогда
			Если Справочники.БанковскиеСчета.ПолучитьКоличествоПодчиненныхЭлементовПоВладельцу(Организация) = 0 Тогда
				УплатаНаличными = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	СпособОплаты = ?(УплатаНаличными,
						Перечисления.СпособыУплатыНалогов.НаличнымиПоКвитанции,
						Перечисления.СпособыУплатыНалогов.БанковскийПеревод);
	
	// Параметры формы для заполнения нового платежного документа
	
	ОписаниеПлатежа = ВыполнениеЗадачБухгалтера.НовыйОписаниеПлатежа(); // Передаем параметры в структуре, потому что их много
	ОписаниеПлатежа.Период              = ПериодРегистрации;
	ОписаниеПлатежа.Налог               = СтрокаПлатежа.Налог;
	ОписаниеПлатежа.ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.Налог;
	ОписаниеПлатежа.Организация         = Организация;
	ОписаниеПлатежа.СпособОплаты        = СпособОплаты;
	ОписаниеПлатежа.ПоказательПериода   = ПлатежиВБюджетКлиентСервер.НалоговыйПериод(ПериодРегистрации, "МС");
	ОписаниеПлатежа.Аванс               = Ложь;
	ОписаниеПлатежа.КБК                 = СтрокаПлатежа.КБК;
	ОписаниеПлатежа.ОКАТО               = СтрокаПлатежа.ОКАТО;
	ОписаниеПлатежа.КПППлательщика      = СтрокаПлатежа.КПП;
	ОписаниеПлатежа.КодНалоговогоОргана = СтрокаПлатежа.КодНалоговогоОргана;
	ОписаниеПлатежа.Сумма               = СтрокаПлатежа.Сумма;
	ОписаниеПлатежа.Описание            = СтрокаПлатежа.НазначениеПлатежа;
	ОписаниеПлатежа.Декларация          = Неопределено;
	ОписаниеПлатежа.ДатаДекларации      = "";
	
	ЗначенияЗаполнения = ВыполнениеЗадачБухгалтера.ЗначенияЗаполненияПлатежногоДокумента(ОписаниеПлатежа);
	
	ПараметрыФормыПлатежногоДокумента = Новый Структура();
	ПараметрыФормыПлатежногоДокумента.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ПараметрыФормыПлатежногоДокумента.Вставить("ПериодСобытия",      ПериодРегистрации);
	ПараметрыФормыПлатежногоДокумента.Вставить("Правило",            Правило);
	ПараметрыФормыПлатежногоДокумента.Вставить("УплатаНаличными",    УплатаНаличными);
	
	Возврат ПараметрыФормыПлатежногоДокумента;
	
КонецФункции

#КонецОбласти


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДополнитьНачисленияПлатежнымиДокументами(Правило, Платежи, ПоказательПериода, Организация)
	
	ТаблицаПлатежей = Платежи.Скопировать();
	ТаблицаПлатежей.Колонки.Добавить("ИндексПлатежа", Новый ОписаниеТипов("Число"));
	Для Каждого СтрокаПлатежа Из ТаблицаПлатежей Цикл
		СтрокаПлатежа.ИндексПлатежа = ТаблицаПлатежей.Индекс(СтрокаПлатежа);
	КонецЦикла;
	
	Платежи.Очистить();
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Платежи.КБК КАК КБК,
	|	Платежи.ОКАТО КАК ОКАТО,
	|	Платежи.ИндексПлатежа КАК ИндексПлатежа,
	|	Платежи.КПП КАК КПП
	|ПОМЕСТИТЬ ОтборТекущиеПлатежи
	|ИЗ
	|	&Платежи КАК Платежи
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КБК,
	|	ОКАТО,
	|	КПП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиБухгалтераНалоговыеПлатежи.ПлатежноеПоручение КАК Ссылка
	|ПОМЕСТИТЬ ОтборПравило
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтераНалоговыеПлатежи КАК ЗадачиБухгалтераНалоговыеПлатежи
	|ГДЕ
	|	ЗадачиБухгалтераНалоговыеПлатежи.Организация = &Организация
	|	И ЗадачиБухгалтераНалоговыеПлатежи.Правило = &Правило
	|	И НАЧАЛОПЕРИОДА(ЗадачиБухгалтераНалоговыеПлатежи.ПериодСобытия, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&ПериодСобытия, МЕСЯЦ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПлатежноеПоручение.Ссылка,
	|	ПлатежноеПоручение.Дата,
	|	ПлатежноеПоручение.КодБК,
	|	ПлатежноеПоручение.КодОКАТО,
	|	ПлатежноеПоручение.СуммаДокумента,
	|	ПлатежноеПоручение.КПППлательщика,
	|	ПлатежноеПоручение.ВерсияДанных
	|ПОМЕСТИТЬ ВТПлатежныеПоручения
	|ИЗ
	|	ОтборПравило КАК Отбор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|		ПО Отбор.Ссылка = ПлатежноеПоручение.Ссылка
	|ГДЕ
	|	ПлатежноеПоручение.Организация = &Организация
	|	И НЕ ПлатежноеПоручение.ПометкаУдаления
	|	И ПлатежноеПоручение.ПеречислениеВБюджет
	|	И ПлатежноеПоручение.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Ссылка,
	|	РасходныйКассовыйОрдер.Дата,
	|	РасходныйКассовыйОрдер.КодБК КАК КБК,
	|	РасходныйКассовыйОрдер.КодОКАТО КАК ОКАТО,
	|	РасходныйКассовыйОрдер.СуммаДокумента КАК Сумма,
	|	ИСТИНА КАК Оплачено,
	|	"""" КАК КПП,
	|	РасходныйКассовыйОрдер.ВерсияДанных КАК ВерсияДанных
	|ПОМЕСТИТЬ ПлатежиПоПравилу
	|ИЗ
	|	ОтборПравило КАК Отбор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|		ПО Отбор.Ссылка = РасходныйКассовыйОрдер.Ссылка
	|ГДЕ
	|	РасходныйКассовыйОрдер.Организация = &Организация
	|	И НЕ РасходныйКассовыйОрдер.ПометкаУдаления
	|	И РасходныйКассовыйОрдер.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.УплатаНалога)
	|	И РасходныйКассовыйОрдер.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТПлатежныеПоручения.Ссылка,
	|	ВТПлатежныеПоручения.Дата,
	|	ВТПлатежныеПоручения.КодБК,
	|	ВТПлатежныеПоручения.КодОКАТО,
	|	ВТПлатежныеПоручения.СуммаДокумента,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СостоянияБанковскихДокументов.Состояние, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.СостоянияБанковскихДокументов.Оплачено)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВТПлатежныеПоручения.КПППлательщика,
	|	ВТПлатежныеПоручения.ВерсияДанных
	|ИЗ
	|	ВТПлатежныеПоручения КАК ВТПлатежныеПоручения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияБанковскихДокументов КАК СостоянияБанковскихДокументов
	|		ПО ВТПлатежныеПоручения.Ссылка = СостоянияБанковскихДокументов.СсылкаНаОбъект
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КБК,
	|	ОКАТО,
	|	КПП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Платежи.ИндексПлатежа КАК ИндексПлатежа,
	|	ПлатежиПоПравилу.Ссылка КАК ПлатежноеПоручение,
	|	ПлатежиПоПравилу.Оплачено,
	|	ПлатежиПоПравилу.Сумма,
	|	ПлатежиПоПравилу.Дата КАК Дата,
	|	ПлатежиПоПравилу.ВерсияДанных
	|ИЗ
	|	ПлатежиПоПравилу КАК ПлатежиПоПравилу
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборТекущиеПлатежи КАК Платежи
	|		ПО ПлатежиПоПравилу.КБК = Платежи.КБК
	|			И ПлатежиПоПравилу.ОКАТО = Платежи.ОКАТО
	|			И ПлатежиПоПравилу.КПП = Платежи.КПП
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата
	|ИТОГИ ПО
	|	ИндексПлатежа";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("Правило",       Правило);
	Запрос.УстановитьПараметр("Платежи",       ТаблицаПлатежей);
	Запрос.УстановитьПараметр("ПериодСобытия", ПоказательПериода);
	Запрос.Текст = ТекстЗапроса;
	
	ДатаСегодня = ТекущаяДатаСеанса();
	
	ВыборкаПоИндексам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоИндексам.Следующий() Цикл
		Выборка = ВыборкаПоИндексам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выборка.Следующий() Цикл
			Платеж = ТаблицаПлатежей[Выборка.ИндексПлатежа];
			Платеж.Сумма = Платеж.Сумма - Выборка.Сумма;
			
			НоваяСтрока = Платежи.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Платеж);
			НоваяСтрока.ПлатежноеПоручение              = Выборка.ПлатежноеПоручение;
			НоваяСтрока.Оплачено                        = Выборка.Оплачено;
			НоваяСтрока.ПлатежноеПоручениеПредставление = ПредставлениеПлатежногоДокумента(Выборка.ПлатежноеПоручение, Выборка.Оплачено);
			НоваяСтрока.Сумма                           = Выборка.Сумма;
			НоваяСтрока.Дата                            = Выборка.Дата;
			НоваяСтрока.ВерсияДанных                    = Выборка.ВерсияДанных;
		КонецЦикла;
		Если Платеж.Сумма > 0 Тогда
			НоваяСтрока = Платежи.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Платеж);
			НоваяСтрока.ПлатежноеПоручение              = "";
			НоваяСтрока.Оплачено                        = Ложь;
			НоваяСтрока.ПлатежноеПоручениеПредставление = "";
			НоваяСтрока.Сумма                           = Платеж.Сумма;
			Платеж.Сумма                                = 0;
			НоваяСтрока.Дата                            = КонецГода(ДатаСегодня)+1;
			НоваяСтрока.ВерсияДанных                    = "";
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Платеж ИЗ ТаблицаПлатежей Цикл
		Если Платеж.Сумма > 0 Тогда
			НоваяСтрока = Платежи.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Платеж);
			НоваяСтрока.Дата                            = КонецГода(ДатаСегодня)+1;
		КонецЕсли;
	КонецЦикла;
	
	Платежи.Сортировать("Дата");
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
