#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПроверкиНаОтключениеФлага

Функция ТекстЗапросаИспользуетсяСправочник(ИмяСправочника)
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИскомыйСправочник.Ссылка
	|ИЗ
	|	Справочник.%1 КАК ИскомыйСправочник";
	
	ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, ИмяСправочника);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаИспользуетсяДокумент(ИмяДокумента, ОтборПоВидуОперации = Ложь, ТолькоПроверка = Истина)
	
	Если ТолькоПроверка Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИскомыйДокумент.Ссылка
		|ИЗ
		|	Документ.%1 КАК ИскомыйДокумент
		|ГДЕ
		|	ИскомыйДокумент.ПометкаУдаления = Ложь";
		Если ОтборПоВидуОперации Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	
			|	И ИскомыйДокумент.ВидОперации В (&ВидыОпераций)";
		КонецЕсли;
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ИскомыйДокумент.Ссылка КАК Ссылка,
		|	ИскомыйДокумент.Дата КАК Дата,
		|	ИскомыйДокумент.Ссылка КАК Представление
		|ИЗ
		|	Документ.%1 КАК ИскомыйДокумент
		|ГДЕ
		|	ИскомыйДокумент.ПометкаУдаления = ЛОЖЬ";
		Если ОтборПоВидуОперации Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	
			|	И ИскомыйДокумент.ВидОперации В (&ВидыОпераций)";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	Ссылка";
	КонецЕсли;
	
	ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, ИмяДокумента);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаИспользоватьВалютныйУчет()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка
	|ПОМЕСТИТЬ ВТ_СчетаССубконтоБанковскиеСчета
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Валютный = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Хозрасчетный.Регистратор КАК Ссылка
	|ИЗ
	|	ВТ_СчетаССубконтоБанковскиеСчета КАК ВТ_СчетаССубконтоБанковскиеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|		ПО ВТ_СчетаССубконтоБанковскиеСчета.Ссылка = Хозрасчетный.СчетДт
	|ГДЕ
	|	Хозрасчетный.ВалютнаяСуммаДт <> 0
	|	И Хозрасчетный.Активность = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Хозрасчетный.Регистратор
	|ИЗ
	|	ВТ_СчетаССубконтоБанковскиеСчета КАК ВТ_СчетаССубконтоБанковскиеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|		ПО ВТ_СчетаССубконтоБанковскиеСчета.Ссылка = Хозрасчетный.СчетКт
	|ГДЕ
	|	Хозрасчетный.ВалютнаяСуммаКт <> 0
	|	И Хозрасчетный.Активность = ИСТИНА";
	
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаИсполняютсяОбязанностиНалоговогоАгентаПоНДС()
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.УчетАгентскогоНДС";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВедетсяДеятельностьПоДоговорамКомиссии(ТолькоПроверка = Истина)
	
	Если ТолькоПроверка Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДоговорыКонтрагентов.Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.ВидДоговора В(&ВидыДоговоров)";
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Ссылка КАК Договор,
		|	ДоговорыКонтрагентов.Владелец КАК Контрагент,
		|	ДоговорыКонтрагентов.Владелец КАК СсылкаКонтрагент
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.ВидДоговора В(&ВидыДоговоров)";
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаУправлениеЗачетомАвансовРеализацияОтгруженныхТоваров(ТолькоПроверка)
	
	// В реализации отгруженных товаров для расчетов в условных единицах 
	// по документам отгрузки "Реализация товаров и услуг" зачет авансов не выполняется.

	Если ТолькоПроверка Тогда
	
		ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РеализацияОтгруженныхТоваров.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.РеализацияОтгруженныхТоваров КАК РеализацияОтгруженныхТоваров
		|ГДЕ
		|	РеализацияОтгруженныхТоваров.СпособЗачетаАвансов <> ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.Автоматически)
		|	И РеализацияОтгруженныхТоваров.ПометкаУдаления = ЛОЖЬ
		|	И НЕ(ТИПЗНАЧЕНИЯ(РеализацияОтгруженныхТоваров.ДокументОтгрузки) = ТИП(Документ.РеализацияТоваровУслуг)
		|				И РеализацияОтгруженныхТоваров.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах)";

	Иначе
	
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РеализацияОтгруженныхТоваров.Ссылка КАК Ссылка,
		|	РеализацияОтгруженныхТоваров.Дата КАК Дата,
		|	ПРЕДСТАВЛЕНИЕ(РеализацияОтгруженныхТоваров.Ссылка) КАК Представление
		|ИЗ
		|	Документ.РеализацияОтгруженныхТоваров КАК РеализацияОтгруженныхТоваров
		|ГДЕ
		|	РеализацияОтгруженныхТоваров.СпособЗачетаАвансов <> ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.Автоматически)
		|	И РеализацияОтгруженныхТоваров.ПометкаУдаления = ЛОЖЬ
		|	И НЕ(ТИПЗНАЧЕНИЯ(РеализацияОтгруженныхТоваров.ДокументОтгрузки) = ТИП(Документ.РеализацияТоваровУслуг)
		|				И РеализацияОтгруженныхТоваров.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	Ссылка";
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ИспользуетсяСинхронизацияДанных()
	
	Возврат Константы.ИспользоватьСинхронизациюДанных.Получить() И НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено();
	
КонецФункции 

Функция ОтказСнятьИспользоватьДенежныеДокументы()
	
	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ВыдачаДенежныхДокументов");

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ПоступлениеДенежныхДокументов");
	
	Запрос = Новый Запрос;

	УстановитьПривилегированныйРежим(Истина);

	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ОтказСнять = Ложь;
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ОтказСнять = Истина;
				
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьИспользоватьОплатуПоПлатежнымКартам()
	
	Если ИспользуетсяСинхронизацияДанных() Тогда
		ОтказСнять = Истина;
		Возврат ОтказСнять;
	КонецЕсли;
	
	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ОплатаПлатежнойКартой", , Истина);

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаОплатаВОтчетахОРозничныхПродажах(Истина);
	
	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ОтказСнять = Ложь;
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ОтказСнять = Истина;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьИспользоватьПлатежныеТребования()
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаИспользуетсяДокумент("ПлатежноеТребование");
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОтказСнять = НЕ РезультатЗапроса.Пустой();
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьИспользоватьВалютныйУчет()
	
	Если ИспользуетсяСинхронизацияДанных() Тогда
		ОтказСнять = Истина;
		Возврат ОтказСнять;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаИспользоватьВалютныйУчет();
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОтказСнять = НЕ РезультатЗапроса.Пустой();
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьВедетсяУчетВозвратнойТары()
	
	Если ИспользуетсяСинхронизацияДанных() Тогда
		ОтказСнять = Истина;
		Возврат ОтказСнять;
	КонецЕсли;
	
	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("АвансовыйОтчет", Истина);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("ВозвратТоваровОтПокупателя", Истина);

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("ВозвратТоваровПоставщику", Истина);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("ПередачаТоваров", Истина);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("ПеремещениеТоваров", Истина);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("ПоступлениеИзПереработки", Истина);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("ПоступлениеТоваровУслуг", Истина);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("РеализацияТоваровУслуг", Истина);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("СписаниеТоваров", Истина);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("СчетНаОплатуПокупателю", Истина);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("СчетНаОплатуПоставщика", Истина);
	
	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ОтказСнять = Ложь;
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ОтказСнять = Истина;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОтказСнять;

КонецФункции

Функция ОтказСнятьВедетсяУчетИмпортныхТоваров()
	
	Если ИспользуетсяСинхронизацияДанных() Тогда
		ОтказСнять = Истина;
		Возврат ОтказСнять;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаИспользуетсяСправочник("НомераГТД");
	
	УстановитьПривилегированныйРежим(Истина);

	РезультатЗапроса = Запрос.Выполнить();
	
	ОтказСнять = НЕ РезультатЗапроса.Пустой();
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьИспользоватьКомплектациюНоменклатуры()
	
	Если ИспользуетсяСинхронизацияДанных() Тогда
		ОтказСнять = Истина;
		Возврат ОтказСнять;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаИспользуетсяДокумент("КомплектацияНоменклатуры");
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОтказСнять = НЕ РезультатЗапроса.Пустой();
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьВедетсяУчетОсновныхСредств()
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаИспользуетсяСправочник("ОсновныеСредства");
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОтказСнять = НЕ РезультатЗапроса.Пустой();
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьВедетсяУчетНМА()
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаИспользуетсяСправочник("НематериальныеАктивы");
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОтказСнять = НЕ РезультатЗапроса.Пустой();
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьВедетсяОтгрузкаБезПереходаПраваСобственности()
	
	Если ИспользуетсяСинхронизацияДанных() Тогда
		ОтказСнять = Истина;
		Возврат ОтказСнять;
	КонецЕсли;
	
	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ВидыОпераций");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("РеализацияТоваровУслуг", Истина);
	НоваяСтрока.ВидыОпераций = Новый Массив;
	НоваяСтрока.ВидыОпераций.Добавить(Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности);

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("РеализацияОтгруженныхТоваров");
	
	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		Запрос.УстановитьПараметр("ВидыОпераций", СтрокаТЗ.ВидыОпераций);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ОтказСнять = Ложь;
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ОтказСнять = Истина;
				
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьИспользоватьПакетноеВыставлениеАктов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаИспользуетсяДокумент("ОказаниеУслуг");
	
	УстановитьПривилегированныйРежим(Истина);

	РезультатЗапроса = Запрос.Выполнить();
	
	ОтказСнять = НЕ РезультатЗапроса.Пустой();
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьВедетсяПроизводственнаяДеятельность()
	
	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ВидыОпераций");

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("АктОбОказанииПроизводственныхУслуг");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ОтчетПроизводстваЗаСмену");

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ИнвентаризацияНЗП");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ПоступлениеИзПереработки");

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ПередачаТоваров", Истина);
	НоваяСтрока.ВидыОпераций = Новый Массив;
	НоваяСтрока.ВидыОпераций.Добавить(Перечисления.ВидыОперацийПередачаТоваров.ВПереработку);
	НоваяСтрока.ВидыОпераций.Добавить(Перечисления.ВидыОперацийПередачаТоваров.ИзПереработки);

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ПоступлениеТоваровУслуг", Истина);
	НоваяСтрока.ВидыОпераций = Новый Массив;
	НоваяСтрока.ВидыОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку);

	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		Запрос.УстановитьПараметр("ВидыОпераций", СтрокаТЗ.ВидыОпераций);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ОтказСнять = Ложь;
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ОтказСнять = Истина;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьВедетсяУчетСпецодеждыСпецоснастки()
	
	Если ИспользуетсяСинхронизацияДанных() Тогда
		ОтказСнять = Истина;
		Возврат ОтказСнять;
	КонецЕсли;

	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ВидыОпераций");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ВыработкаМатериалов");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("СписаниеМатериаловИзЭксплуатации");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ВозвратМатериаловИзЭксплуатации");

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ПередачаМатериаловВЭксплуатацию");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("РегламентнаяОперация", Истина);
	НоваяСтрока.ВидыОпераций = Новый Массив;
	НоваяСтрока.ВидыОпераций.Добавить(Перечисления.ВидыРегламентныхОпераций.ПогашениеСтоимостиСпецодеждыИспецоснасткиВэксплуатации);
	
	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		Запрос.УстановитьПараметр("ВидыОпераций", СтрокаТЗ.ВидыОпераций);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ОтказСнять = Ложь;
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ОтказСнять = Истина;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьОсуществляетсяЗакупкаТоваровУслугДляКомитентов()
	
	Если ИспользуетсяСинхронизацияДанных() Тогда
		ОтказСнять = Истина;
		Возврат ОтказСнять;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаВедетсяДеятельностьПоДоговорамКомиссии();
	
	МассивВидовДоговоровКомиссииНаЗакупку = Новый Массив;
	МассивВидовДоговоровКомиссииНаЗакупку.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);
	Запрос.УстановитьПараметр("ВидыДоговоров", МассивВидовДоговоровКомиссииНаЗакупку);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОтказСнять = НЕ РезультатЗапроса.Пустой();
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьИсполняютсяОбязанностиНалоговогоАгентаПоНДС()
	
	Если ИспользуетсяСинхронизацияДанных() Тогда
		ОтказСнять = Истина;
		Возврат ОтказСнять;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаИсполняютсяОбязанностиНалоговогоАгентаПоНДС();
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОтказСнять = НЕ РезультатЗапроса.Пустой();
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьОсуществляетсяЗакупкаТоваровУслугЧерезКомиссионеров()
	
	Если ИспользуетсяСинхронизацияДанных() Тогда
		ОтказСнять = Истина;
		Возврат ОтказСнять;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаВедетсяДеятельностьПоДоговорамКомиссии();
	
	МассивВидовДоговоровКомиссииНаЗакупку = Новый Массив;
	МассивВидовДоговоровКомиссииНаЗакупку.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
	Запрос.УстановитьПараметр("ВидыДоговоров", МассивВидовДоговоровКомиссииНаЗакупку);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОтказСнять = НЕ РезультатЗапроса.Пустой();
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьОсуществляетсяРеализацияТоваровУслугКомитентов()
	
	Если ИспользуетсяСинхронизацияДанных() Тогда
		ОтказСнять = Истина;
		Возврат ОтказСнять;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаВедетсяДеятельностьПоДоговорамКомиссии();
	
	МассивВидовДоговоровКомиссииНаПродажу = Новый Массив;
	МассивВидовДоговоровКомиссииНаПродажу.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	Запрос.УстановитьПараметр("ВидыДоговоров", МассивВидовДоговоровКомиссииНаПродажу);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОтказСнять = НЕ РезультатЗапроса.Пустой();
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьОсуществляетсяРеализацияТоваровУслугЧерезКомиссионеров()
	
	Если ИспользуетсяСинхронизацияДанных() Тогда
		ОтказСнять = Истина;
		Возврат ОтказСнять;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаВедетсяДеятельностьПоДоговорамКомиссии();
	
	МассивВидовДоговоровКомиссииНаПродажу = Новый Массив;
	МассивВидовДоговоровКомиссииНаПродажу.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	Запрос.УстановитьПараметр("ВидыДоговоров", МассивВидовДоговоровКомиссииНаПродажу);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОтказСнять = НЕ РезультатЗапроса.Пустой();
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьВедетсяРозничнаяТорговля()
	
	Если ИспользуетсяСинхронизацияДанных() Тогда
		ОтказСнять = Истина;
		Возврат ОтказСнять;
	КонецЕсли;
	
	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ВидыОпераций");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ОтчетОРозничныхПродажах");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("РозничнаяПродажа");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ПриходныйКассовыйОрдер", Истина);
	НоваяСтрока.ВидыОпераций = Новый Массив;
	НоваяСтрока.ВидыОпераций.Добавить(Перечисления.ВидыОперацийПКО.РозничнаяВыручка);

	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		Запрос.УстановитьПараметр("ВидыОпераций", СтрокаТЗ.ВидыОпераций);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ОтказСнять = Ложь;
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ОтказСнять = Истина;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьИспользоватьУведомленияОКонтролируемыхСделках()
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаИспользуетсяДокумент("УведомлениеОКонтролируемыхСделках");
	
	УстановитьПривилегированныйРежим(Истина);

	РезультатЗапроса = Запрос.Выполнить();
	
	ОтказСнять = НЕ РезультатЗапроса.Пустой();
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьВедетсяУчетРозничнойПродажиАлкогольнойПродукцииПива()
	
	Если ИспользуетсяСинхронизацияДанных() Тогда
		ОтказСнять = Истина;
		Возврат ОтказСнять;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СведенияОбАлкогольнойПродукции.Номенклатура
	|ИЗ
	|	РегистрСведений.СведенияОбАлкогольнойПродукции КАК СведенияОбАлкогольнойПродукции";
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОтказСнять = НЕ РезультатЗапроса.Пустой();
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьИспользуютсяПодарочныеСертификаты()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыОплатОрганизаций.Ссылка
	|ИЗ
	|	Справочник.ВидыОплатОрганизаций КАК ВидыОплатОрганизаций
	|ГДЕ
	|	ВидыОплатОрганизаций.ТипОплаты В (ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПодарочныйСертификатСобственный), ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПодарочныйСертификатСторонний))"
	;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОтказСнять = НЕ РезультатЗапроса.Пустой();
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьИспользоватьКорректировочныеДокументы()

	Если ИспользуетсяСинхронизацияДанных() Тогда
		ОтказСнять = Истина;
		Возврат ОтказСнять;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	ДокументыДляПроверки = Новый Массив;
	ДокументыДляПроверки.Добавить("КорректировкаПоступления");
	ДокументыДляПроверки.Добавить("КорректировкаРеализации");
	
	ОтказСнять = Ложь;
	
	Для каждого ДокументДляПроверки Из ДокументыДляПроверки Цикл
	
		Запрос.Текст = ТекстЗапросаИспользуетсяДокумент(ДокументДляПроверки);
		
		ОтказСнять = НЕ Запрос.Выполнить().Пустой();
		
		Если ОтказСнять Тогда
			Прервать;
		КонецЕсли; 
		
	КонецЦикла; 
	
	Возврат ОтказСнять;

КонецФункции 

Функция ОтказСнятьИспользоватьФискальныйРегистратор()

	Если ИспользуетсяСинхронизацияДанных() Тогда
		ОтказСнять = Истина;
		Возврат ОтказСнять;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПодключаемоеОборудование.Ссылка
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ФискальныйРегистратор)";
	
	ОтказСнять = НЕ Запрос.Выполнить().Пустой();
	
	Возврат ОтказСнять;

КонецФункции

Функция ОтказСнятьИспользоватьИнкассацию()
	
	Если ИспользуетсяСинхронизацияДанных() Тогда
		ОтказСнять = Истина;
		Возврат ОтказСнять;
	КонецЕсли;
	
	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ИмяДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ВидыОпераций");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "РасходныйКассовыйОрдер";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("РасходныйКассовыйОрдер", Истина, Ложь);
	НоваяСтрока.ВидыОпераций = Новый Массив;
	НоваяСтрока.ВидыОпераций.Добавить(Перечисления.ВидыОперацийРКО.Инкассация);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПоступлениеНаРасчетныйСчет";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ПоступлениеНаРасчетныйСчет", Истина, Ложь);
	НоваяСтрока.ВидыОпераций = Новый Массив;
	НоваяСтрока.ВидыОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация);
	
	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		Запрос.УстановитьПараметр("ВидыОпераций", СтрокаТЗ.ВидыОпераций);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ОтказСнять = Ложь;
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ОтказСнять = Истина;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьИспользоватьДоставкуАвтотранспортом()
	
	Если ИспользуетсяСинхронизацияДанных() Тогда
		ОтказСнять = Истина;
		Возврат ОтказСнять;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РеализацияТоваровУслуг.Ссылка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	(РеализацияТоваровУслуг.Перевозчик <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ИЛИ РеализацияТоваровУслуг.МаркаАвтомобиля <> """"
	|			ИЛИ РеализацияТоваровУслуг.РегистрационныйЗнакАвтомобиля <> """"
	|			ИЛИ РеализацияТоваровУслуг.Водитель <> """"
	|			ИЛИ РеализацияТоваровУслуг.КраткоеНаименованиеГруза <> """"
	|			ИЛИ РеализацияТоваровУслуг.СопроводительныеДокументы <> """")";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОтказСнять = НЕ РезультатЗапроса.Пустой();
	
	Возврат ОтказСнять;

КонецФункции 

Функция ОтказСнятьВедетсяУчетТаможенныхДекларацийЭкспорт()
	
	Если ИспользуетсяСинхронизацияДанных() Тогда
		ОтказСнять = Истина;
		Возврат ОтказСнять;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаИспользуетсяДокумент("ТаможеннаяДекларацияЭкспорт");
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОтказСнять = НЕ РезультатЗапроса.Пустой();
	
	Возврат ОтказСнять;

КонецФункции

Функция ОтказСнятьВестиУчетМаркировкиПродукцииВГИСМ()
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаИспользуетсяСправочник("КонтрольныеЗнакиГИСМ");
	
	УстановитьПривилегированныйРежим(Истина);

	РезультатЗапроса = Запрос.Выполнить();
	
	ОтказСнять = НЕ РезультатЗапроса.Пустой();
	
	Возврат ОтказСнять;
	
КонецФункции

#Область УправлениеЗачетомАвансовПогашениемЗадолженности

Функция ОтказСнятьУправлениеЗачетомАвансовПогашениемЗадолженности()
	
	Если ИспользуетсяСинхронизацияДанных() Тогда
		ОтказСнять = Истина;
		Возврат ОтказСнять;
	КонецЕсли;
	
	ТаблицаЗапросов = ТаблицаЗапросовУправлениеЗачетомАвансовПогашениемЗадолженности(Истина);
	
	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		Запрос.УстановитьПараметр("ВидыОперацийОплатаИВозврат", СтрокаТЗ.ВидыОперацийОплатаИВозврат);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ОтказСнять = Ложь;
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ОтказСнять = Истина;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ТаблицаЗапросовУправлениеЗачетомАвансовПогашениемЗадолженности(ТолькоПроверка)

	// Начинаем поиск с документов, в которых наиболее вероятно 
	// используется зачет авансов (погашение задолженности) по документам.
	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ИмяДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ВидыОперацийОплатаИВозврат");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПоступлениеНаРасчетныйСчет";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаУправлениеПогашениемЗадолженностиКассаБанк("ПоступлениеНаРасчетныйСчет", ТолькоПроверка);
	НоваяСтрока.ВидыОперацийОплатаИВозврат = Новый Массив;
	НоваяСтрока.ВидыОперацийОплатаИВозврат.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя);
	НоваяСтрока.ВидыОперацийОплатаИВозврат.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "СписаниеСРасчетногоСчета";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаУправлениеПогашениемЗадолженностиКассаБанк("СписаниеСРасчетногоСчета", ТолькоПроверка);
	НоваяСтрока.ВидыОперацийОплатаИВозврат = Новый Массив;
	НоваяСтрока.ВидыОперацийОплатаИВозврат.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику);
	НоваяСтрока.ВидыОперацийОплатаИВозврат.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПриходныйКассовыйОрдер";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаУправлениеПогашениемЗадолженностиКассаБанк("ПриходныйКассовыйОрдер", ТолькоПроверка);
	НоваяСтрока.ВидыОперацийОплатаИВозврат = Новый Массив;
	НоваяСтрока.ВидыОперацийОплатаИВозврат.Добавить(Перечисления.ВидыОперацийПКО.ОплатаПокупателя);
	НоваяСтрока.ВидыОперацийОплатаИВозврат.Добавить(Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "РасходныйКассовыйОрдер";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаУправлениеПогашениемЗадолженностиКассаБанк("РасходныйКассовыйОрдер", ТолькоПроверка);
	НоваяСтрока.ВидыОперацийОплатаИВозврат = Новый Массив;
	НоваяСтрока.ВидыОперацийОплатаИВозврат.Добавить(Перечисления.ВидыОперацийРКО.ОплатаПоставщику);
	НоваяСтрока.ВидыОперацийОплатаИВозврат.Добавить(Перечисления.ВидыОперацийРКО.ВозвратПокупателю);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ОплатаПлатежнойКартой";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаУправлениеПогашениемЗадолженностиКассаБанк("ОплатаПлатежнойКартой", ТолькоПроверка);
	НоваяСтрока.ВидыОперацийОплатаИВозврат = Новый Массив;
	НоваяСтрока.ВидыОперацийОплатаИВозврат.Добавить(Перечисления.ВидыОперацийОплатаПлатежнойКартой.ОплатаПокупателя);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "РеализацияТоваровУслуг";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаУправлениеЗачетомАвансовРеализацияТоваровУслуг(ТолькоПроверка);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "РеализацияОтгруженныхТоваров";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаУправлениеЗачетомАвансовРеализацияОтгруженныхТоваров(ТолькоПроверка);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПоступлениеТоваровУслуг";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаУправлениеЗачетомАвансовПоступлениеТоваровУслуг(ТолькоПроверка);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПоступлениеДопРасходов";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаУправлениеЗачетомАвансовПоступлениеРеализация("ПоступлениеДопРасходов", ТолькоПроверка);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "АвансовыйОтчет";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаУправлениеПогашениемЗадолженностиАвансовыйОтчет(ТолькоПроверка);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "АктОбОказанииПроизводственныхУслуг";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаУправлениеЗачетомАвансовПоступлениеРеализация("АктОбОказанииПроизводственныхУслуг", ТолькоПроверка);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ОтчетКомиссионераОПродажах";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаУправлениеЗачетомАвансовПоступлениеРеализация("ОтчетКомиссионераОПродажах", ТолькоПроверка);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПередачаОС";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаУправлениеЗачетомАвансовПоступлениеРеализация("ПередачаОС", ТолькоПроверка);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПередачаНМА";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаУправлениеЗачетомАвансовПоступлениеРеализация("ПередачаНМА", ТолькоПроверка);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПоступлениеНМА";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаУправлениеЗачетомАвансовПоступлениеРеализация("ПоступлениеНМА", ТолькоПроверка);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПоступлениеИзПереработки";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаУправлениеЗачетомАвансовПоступлениеРеализация("ПоступлениеИзПереработки", ТолькоПроверка);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "РеализацияУслугПоПереработке";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаУправлениеЗачетомАвансовПоступлениеРеализация("РеализацияУслугПоПереработке", ТолькоПроверка);

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "КорректировкаДолга";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаУправлениеКорректировкаДолга(ТолькоПроверка);

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ГТДИмпорт";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаУправлениеЗачетомАвансовПоступлениеРеализация("ГТДИмпорт", ТолькоПроверка);
	
	Возврат ТаблицаЗапросов;

КонецФункции

Функция ДокументыПрепятствующиеОтключениюУправлениеЗачетомАвансовПогашениемЗадолженности()

	ТаблицаРезультатовЗапросов = ПустаяТаблицаДокументовПрепятствующиеОтключениюОпции();

	ТаблицаЗапросов = ТаблицаЗапросовУправлениеЗачетомАвансовПогашениемЗадолженности(Ложь);

	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		Запрос.УстановитьПараметр("ВидыОперацийОплатаИВозврат", СтрокаТЗ.ВидыОперацийОплатаИВозврат);
		
		СтрокаТаблицыДокументов = ТаблицаРезультатовЗапросов.Добавить();
		СтрокаТаблицыДокументов.ИмяДокумента = СтрокаТЗ.ИмяДокумента;
		МетаданныеДокумента = Метаданные.Документы.Найти(СтрокаТЗ.ИмяДокумента);
		СтрокаТаблицыДокументов.СинонимДокумента = МетаданныеДокумента.Синоним;
		СтрокаТаблицыДокументов.РезультатЗапроса = Запрос.Выполнить();
		
	КонецЦикла;
	
	// Отсортируем по алфавиту
	ТаблицаРезультатовЗапросов.Сортировать("СинонимДокумента");
	
	Возврат ТаблицаРезультатовЗапросов;
	
КонецФункции

Функция ТекстЗапросаУправлениеЗачетомАвансовРеализацияТоваровУслуг(ТолькоПроверка)
	
	// В реализации товаров и услуг для вида операции "Отгрузка без перехода права собственности"
	// и при передачи товаров комиссионеру на реализацию зачет авансов не выполняется.

	Если ТолькоПроверка Тогда
	
		ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДокументРТУ.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК ДокументРТУ
		|ГДЕ
		|	ДокументРТУ.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности)
		|	И ДокументРТУ.ДоговорКонтрагента.ВидДоговора <> ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером)
		|	И ДокументРТУ.СпособЗачетаАвансов <> ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.Автоматически)
		|	И ДокументРТУ.ПометкаУдаления = ЛОЖЬ";

	Иначе
	
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ДокументРТУ.Ссылка КАК Ссылка,
		|	ДокументРТУ.Дата КАК Дата,
		|	ПРЕДСТАВЛЕНИЕ(ДокументРТУ.Ссылка) КАК Представление
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК ДокументРТУ
		|ГДЕ
		|	ДокументРТУ.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности)
		|	И ДокументРТУ.ДоговорКонтрагента.ВидДоговора <> ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером)
		|	И ДокументРТУ.СпособЗачетаАвансов <> ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.Автоматически)
		|	И ДокументРТУ.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	Ссылка";
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаУправлениеЗачетомАвансовПоступлениеТоваровУслуг(ТолькоПроверка)
	
	// В поступлении товаров и услуг для вида операции "В переработку"
	// и при получения товаров от комитента на реализацию зачет авансов не выполняется.
	
	Если ТолькоПроверка Тогда
	
		ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДокументПТУ.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ДокументПТУ
		|ГДЕ
		|	ДокументПТУ.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку)
		|	И ДокументПТУ.ДоговорКонтрагента.ВидДоговора <> ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомитентом)
		|	И ДокументПТУ.СпособЗачетаАвансов <> ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.Автоматически)
		|	И ДокументПТУ.ПометкаУдаления = ЛОЖЬ";
	
	Иначе

		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ДокументПТУ.Ссылка КАК Ссылка,
		|	ДокументПТУ.Дата КАК Дата,
		|	ПРЕДСТАВЛЕНИЕ(ДокументПТУ.Ссылка) КАК Представление
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ДокументПТУ
		|ГДЕ
		|	ДокументПТУ.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку)
		|	И ДокументПТУ.ДоговорКонтрагента.ВидДоговора <> ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомитентом)
		|	И ДокументПТУ.СпособЗачетаАвансов <> ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.Автоматически)
		|	И ДокументПТУ.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	Ссылка";
	
	КонецЕсли;
		
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаУправлениеЗачетомАвансовПоступлениеРеализация(ИмяДокумента, ТолькоПроверка)
	
	Если ТолькоПроверка Тогда

		ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДокументПоступленияРеализации.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.АктОбОказанииПроизводственныхУслуг КАК ДокументПоступленияРеализации
		|ГДЕ
		|	ДокументПоступленияРеализации.СпособЗачетаАвансов <> ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.Автоматически)
		|	И ДокументПоступленияРеализации.ПометкаУдаления = ЛОЖЬ";
		
	Иначе

		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ДокументПоступленияРеализации.Ссылка КАК Ссылка,
		|	ДокументПоступленияРеализации.Дата КАК Дата,
		|	ПРЕДСТАВЛЕНИЕ(ДокументПоступленияРеализации.Ссылка) КАК Представление
		|ИЗ
		|	Документ.АктОбОказанииПроизводственныхУслуг КАК ДокументПоступленияРеализации
		|ГДЕ
		|	ДокументПоступленияРеализации.СпособЗачетаАвансов <> ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.Автоматически)
		|	И ДокументПоступленияРеализации.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	Ссылка";
	
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "АктОбОказанииПроизводственныхУслуг", ИмяДокумента);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаУправлениеПогашениемЗадолженностиКассаБанк(ИмяДокумента, ТолькоПроверка)
	
	Если ТолькоПроверка Тогда

		ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДокументКассаБанк.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПоступлениеНаРасчетныйСчет.РасшифровкаПлатежа КАК ДокументКассаБанк
		|ГДЕ
		|	ДокументКассаБанк.СпособПогашенияЗадолженности <> ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияЗадолженности.Автоматически)
		|	И ДокументКассаБанк.Ссылка.ВидОперации В (&ВидыОперацийОплатаИВозврат)
		|	И ДокументКассаБанк.Ссылка.ПометкаУдаления = ЛОЖЬ";
		
	Иначе

		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокументКассаБанк.Ссылка КАК Ссылка,
		|	ДокументКассаБанк.Ссылка.Дата КАК Дата,
		|	ПРЕДСТАВЛЕНИЕ(ДокументКассаБанк.Ссылка) КАК Представление
		|ИЗ
		|	Документ.ПоступлениеНаРасчетныйСчет.РасшифровкаПлатежа КАК ДокументКассаБанк
		|ГДЕ
		|	ДокументКассаБанк.СпособПогашенияЗадолженности <> ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияЗадолженности.Автоматически)
		|	И ДокументКассаБанк.Ссылка.ВидОперации В (&ВидыОперацийОплатаИВозврат)
		|	И ДокументКассаБанк.Ссылка.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	Ссылка";
	
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПоступлениеНаРасчетныйСчет", ИмяДокумента);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаУправлениеПогашениемЗадолженностиАвансовыйОтчет(ТолькоПроверка)
	
	Если ТолькоПроверка Тогда
	
		ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	АвансовыйОтчет.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.АвансовыйОтчет.ОплатаПоставщикам КАК АвансовыйОтчет
		|ГДЕ
		|	АвансовыйОтчет.СпособПогашенияЗадолженности <> ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияЗадолженности.Автоматически)
		|	И АвансовыйОтчет.Ссылка.ПометкаУдаления = ЛОЖЬ";
		
	Иначе

		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	АвансовыйОтчет.Ссылка КАК Ссылка,
		|	АвансовыйОтчет.Ссылка.Дата КАК Дата,
		|	ПРЕДСТАВЛЕНИЕ(АвансовыйОтчет.Ссылка) КАК Представление
		|ИЗ
		|	Документ.АвансовыйОтчет.ОплатаПоставщикам КАК АвансовыйОтчет
		|ГДЕ
		|	АвансовыйОтчет.СпособПогашенияЗадолженности <> ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияЗадолженности.Автоматически)
		|	И АвансовыйОтчет.Ссылка.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	Ссылка";
	
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаУправлениеКорректировкаДолга(ТолькоПроверка)
	
	Если ТолькоПроверка Тогда
	
		ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КорректировкаДолга.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.КорректировкаДолга КАК КорректировкаДолга
		|ГДЕ
		|	КорректировкаДолга.ПометкаУдаления = ЛОЖЬ";
		
	Иначе

		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	КорректировкаДолга.Ссылка КАК Ссылка,
		|	КорректировкаДолга.Дата КАК Дата,
		|	ПРЕДСТАВЛЕНИЕ(КорректировкаДолга.Ссылка) КАК Представление
		|ИЗ
		|	Документ.КорректировкаДолга КАК КорректировкаДолга
		|ГДЕ
		|	КорректировкаДолга.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	Ссылка";
	
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ИспользованиеВозвратнойТары

Функция ТекстЗапросаВедетсяУчетВозвратнойТары(ИмяДокумента, ТолькоПроверка)
	
	Если ТолькоПроверка Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ Первые 1
		|	ДокументСВозвратнойТарой.Ссылка
		|ИЗ
		|	Документ.%1.ВозвратнаяТара КАК ДокументСВозвратнойТарой
		|ГДЕ 
		|	ДокументСВозвратнойТарой.Ссылка.ПометкаУдаления = Ложь";
	Иначе
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокументСВозвратнойТарой.Ссылка КАК Ссылка,
		|	ДокументСВозвратнойТарой.Ссылка.Дата КАК Дата,
		|	ПРЕДСТАВЛЕНИЕ(ДокументСВозвратнойТарой.Ссылка) КАК Представление
		|ИЗ
		|	Документ.%1.ВозвратнаяТара КАК ДокументСВозвратнойТарой
		|ГДЕ
		|	ДокументСВозвратнойТарой.Ссылка.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	Ссылка";
		
	КонецЕсли;
	
	ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, ИмяДокумента);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТаблицаЗапросовВедетсяУчетВозвратнойТары()

	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ИмяДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "АвансовыйОтчет";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("АвансовыйОтчет", Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ВозвратТоваровОтПокупателя";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("ВозвратТоваровОтПокупателя", Ложь);

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ВозвратТоваровПоставщику";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("ВозвратТоваровПоставщику", Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПередачаТоваров";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("ПередачаТоваров", Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПеремещениеТоваров";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("ПеремещениеТоваров", Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПоступлениеИзПереработки";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("ПоступлениеИзПереработки", Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПоступлениеТоваровУслуг";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("ПоступлениеТоваровУслуг", Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "РеализацияТоваровУслуг";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("РеализацияТоваровУслуг", Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "СписаниеТоваров";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("СписаниеТоваров", Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "СчетНаОплатуПокупателю";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("СчетНаОплатуПокупателю", Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "СчетНаОплатуПоставщика";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("СчетНаОплатуПоставщика", Ложь);
	
	Возврат ТаблицаЗапросов;
	
КонецФункции 

Функция ДокументыПрепятствующиеОтключениюВозвратойТары()

	ТаблицаРезультатовЗапросов = ПустаяТаблицаДокументовПрепятствующиеОтключениюОпции();

	ТаблицаЗапросов = ТаблицаЗапросовВедетсяУчетВозвратнойТары();

	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		
		СтрокаТаблицыДокументов = ТаблицаРезультатовЗапросов.Добавить();
		СтрокаТаблицыДокументов.ИмяДокумента = СтрокаТЗ.ИмяДокумента;
		МетаданныеДокумента = Метаданные.Документы.Найти(СтрокаТЗ.ИмяДокумента);
		СтрокаТаблицыДокументов.СинонимДокумента = МетаданныеДокумента.Синоним;
		СтрокаТаблицыДокументов.РезультатЗапроса = Запрос.Выполнить();
		
	КонецЦикла;
	
	// Отсортируем по алфавиту
	ТаблицаРезультатовЗапросов.Сортировать("СинонимДокумента");
	
	Возврат ТаблицаРезультатовЗапросов;
	
КонецФункции

#КонецОбласти

#Область ОтгрузкаБезПереходаПраваСобственности

Функция ТаблицаЗапросовВедетсяОтгрузкаБезПереходаПраваСобственности()

	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ИмяДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ВидыОпераций");

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "РеализацияТоваровУслуг";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("РеализацияТоваровУслуг", Истина, Ложь);
	НоваяСтрока.ВидыОпераций = Новый Массив;
	НоваяСтрока.ВидыОпераций.Добавить(Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности);

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "РеализацияОтгруженныхТоваров";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("РеализацияОтгруженныхТоваров",, Ложь);
	
	Возврат ТаблицаЗапросов;
	
КонецФункции 

Функция ДокументыПрепятствующиеОтключениюОтгрузкаБезПереходаПраваСобственности()

	ТаблицаРезультатовЗапросов = ПустаяТаблицаДокументовПрепятствующиеОтключениюОпции();

	ТаблицаЗапросов = ТаблицаЗапросовВедетсяОтгрузкаБезПереходаПраваСобственности();

	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		Запрос.УстановитьПараметр("ВидыОпераций", СтрокаТЗ.ВидыОпераций);
		
		СтрокаТаблицыДокументов = ТаблицаРезультатовЗапросов.Добавить();
		СтрокаТаблицыДокументов.ИмяДокумента = СтрокаТЗ.ИмяДокумента;
		МетаданныеДокумента = Метаданные.Документы.Найти(СтрокаТЗ.ИмяДокумента);
		СтрокаТаблицыДокументов.СинонимДокумента = МетаданныеДокумента.Синоним;
		СтрокаТаблицыДокументов.РезультатЗапроса = Запрос.Выполнить();
		
	КонецЦикла;
	
	// Отсортируем по алфавиту
	ТаблицаРезультатовЗапросов.Сортировать("СинонимДокумента");
	
	Возврат ТаблицаРезультатовЗапросов;
	
КонецФункции 

#КонецОбласти

#Область ВедетсяУчетДенежныхДокументов

Функция ТаблицаЗапросовВедетсяУчетДенежныхДокументов()

	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ИмяДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПоступлениеДенежныхДокументов";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ПоступлениеДенежныхДокументов", Ложь, Ложь);

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ВыдачаДенежныхДокументов";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ВыдачаДенежныхДокументов", Ложь, Ложь);
	
	Возврат ТаблицаЗапросов;
	
КонецФункции 

Функция ДокументыПрепятствующиеОтключениюВедетсяУчетДенежныхДокументов()
	
	ТаблицаРезультатовЗапросов = ПустаяТаблицаДокументовПрепятствующиеОтключениюОпции();
	
	ТаблицаЗапросов = ТаблицаЗапросовВедетсяУчетДенежныхДокументов();
	
	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		
		СтрокаТаблицыДокументов = ТаблицаРезультатовЗапросов.Добавить();
		СтрокаТаблицыДокументов.ИмяДокумента = СтрокаТЗ.ИмяДокумента;
		МетаданныеДокумента = Метаданные.Документы.Найти(СтрокаТЗ.ИмяДокумента);
		СтрокаТаблицыДокументов.СинонимДокумента = МетаданныеДокумента.Синоним;
		СтрокаТаблицыДокументов.РезультатЗапроса = Запрос.Выполнить();
		
	КонецЦикла;
	
	// Отсортируем по алфавиту
	ТаблицаРезультатовЗапросов.Сортировать("СинонимДокумента");
	
	Возврат ТаблицаРезультатовЗапросов;
	
КонецФункции 

#КонецОбласти

#Область ВедетсяРозничнаяТорговля

Функция ТаблицаЗапросовВедетсяРозничнаяТорговля()

	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ИмяДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ВидыОпераций");

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ОтчетОРозничныхПродажах";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ОтчетОРозничныхПродажах",,Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "РозничнаяПродажа";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("РозничнаяПродажа",,Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПриходныйКассовыйОрдер";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ПриходныйКассовыйОрдер", Истина, Ложь);
	НоваяСтрока.ВидыОпераций = Новый Массив;
	НоваяСтрока.ВидыОпераций.Добавить(Перечисления.ВидыОперацийПКО.РозничнаяВыручка);
	
	Возврат ТаблицаЗапросов;
	
КонецФункции

Функция ДокументыПрепятствующиеОтключениюВедетсяРозничнаяТорговля()

	ТаблицаРезультатовЗапросов = ПустаяТаблицаДокументовПрепятствующиеОтключениюОпции();

	ТаблицаЗапросов = ТаблицаЗапросовВедетсяРозничнаяТорговля();

	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		Запрос.УстановитьПараметр("ВидыОпераций", СтрокаТЗ.ВидыОпераций);
		
		СтрокаТаблицыДокументов = ТаблицаРезультатовЗапросов.Добавить();
		СтрокаТаблицыДокументов.ИмяДокумента = СтрокаТЗ.ИмяДокумента;
		МетаданныеДокумента = Метаданные.Документы.Найти(СтрокаТЗ.ИмяДокумента);
		СтрокаТаблицыДокументов.СинонимДокумента = МетаданныеДокумента.Синоним;
		СтрокаТаблицыДокументов.РезультатЗапроса = Запрос.Выполнить();
		
	КонецЦикла;
	
	// Отсортируем по алфавиту
	ТаблицаРезультатовЗапросов.Сортировать("СинонимДокумента");
	
	Возврат ТаблицаРезультатовЗапросов;
	
КонецФункции 

#КонецОбласти

#Область ВедетсяПроизводственнаяДеятельность

Функция ТаблицаЗапросовВедетсяПроизводственнаяДеятельность()

	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ИмяДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ВидыОпераций");

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "АктОбОказанииПроизводственныхУслуг";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("АктОбОказанииПроизводственныхУслуг",,Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ОтчетПроизводстваЗаСмену";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ОтчетПроизводстваЗаСмену",,Ложь);

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ИнвентаризацияНЗП";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ИнвентаризацияНЗП",,Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПоступлениеИзПереработки";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ПоступлениеИзПереработки",,Ложь);

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПередачаТоваров";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ПередачаТоваров", Истина, Ложь);
	НоваяСтрока.ВидыОпераций = Новый Массив;
	НоваяСтрока.ВидыОпераций.Добавить(Перечисления.ВидыОперацийПередачаТоваров.ВПереработку);
	НоваяСтрока.ВидыОпераций.Добавить(Перечисления.ВидыОперацийПередачаТоваров.ИзПереработки);

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПоступлениеТоваровУслуг";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ПоступлениеТоваровУслуг", Истина, Ложь);
	НоваяСтрока.ВидыОпераций = Новый Массив;
	НоваяСтрока.ВидыОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку);
	
	Возврат ТаблицаЗапросов;
	
КонецФункции

Функция ДокументыПрепятствующиеОтключениюВедетсяПроизводственнаяДеятельность()

	ТаблицаРезультатовЗапросов = ПустаяТаблицаДокументовПрепятствующиеОтключениюОпции();

	ТаблицаЗапросов = ТаблицаЗапросовВедетсяПроизводственнаяДеятельность();

	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		Запрос.УстановитьПараметр("ВидыОпераций", СтрокаТЗ.ВидыОпераций);
		
		СтрокаТаблицыДокументов = ТаблицаРезультатовЗапросов.Добавить();
		СтрокаТаблицыДокументов.ИмяДокумента = СтрокаТЗ.ИмяДокумента;
		МетаданныеДокумента = Метаданные.Документы.Найти(СтрокаТЗ.ИмяДокумента);
		СтрокаТаблицыДокументов.СинонимДокумента = МетаданныеДокумента.Синоним;
		СтрокаТаблицыДокументов.РезультатЗапроса = Запрос.Выполнить();
		
	КонецЦикла;
	
	// Отсортируем по алфавиту
	ТаблицаРезультатовЗапросов.Сортировать("СинонимДокумента");
	
	Возврат ТаблицаРезультатовЗапросов;
	
КонецФункции 

#КонецОбласти

#Область ВедетсяУчетСпецодеждыСпецоснастки

Функция ТаблицаЗапросовВедетсяУчетСпецодеждыСпецоснастки()

	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ИмяДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ВидыОпераций");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ВыработкаМатериалов";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ВыработкаМатериалов",, Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "СписаниеМатериаловИзЭксплуатации";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("СписаниеМатериаловИзЭксплуатации",,Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ВозвратМатериаловИзЭксплуатации";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ВозвратМатериаловИзЭксплуатации", ,Ложь);

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПередачаМатериаловВЭксплуатацию";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ПередачаМатериаловВЭксплуатацию",,Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "РегламентнаяОперация";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("РегламентнаяОперация", Истина, Ложь);
	НоваяСтрока.ВидыОпераций = Новый Массив;
	НоваяСтрока.ВидыОпераций.Добавить(Перечисления.ВидыРегламентныхОпераций.ПогашениеСтоимостиСпецодеждыИспецоснасткиВэксплуатации);

	
	Возврат ТаблицаЗапросов;
	
КонецФункции 

Функция ДокументыПрепятствующиеОтключениюВедетсяУчетСпецодеждыСпецоснастки()

	ТаблицаРезультатовЗапросов = ПустаяТаблицаДокументовПрепятствующиеОтключениюОпции();

	ТаблицаЗапросов = ТаблицаЗапросовВедетсяУчетСпецодеждыСпецоснастки();

	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		Запрос.УстановитьПараметр("ВидыОпераций", СтрокаТЗ.ВидыОпераций);
		
		СтрокаТаблицыДокументов = ТаблицаРезультатовЗапросов.Добавить();
		СтрокаТаблицыДокументов.ИмяДокумента = СтрокаТЗ.ИмяДокумента;
		МетаданныеДокумента = Метаданные.Документы.Найти(СтрокаТЗ.ИмяДокумента);
		СтрокаТаблицыДокументов.СинонимДокумента = МетаданныеДокумента.Синоним;
		СтрокаТаблицыДокументов.РезультатЗапроса = Запрос.Выполнить();
		
	КонецЦикла;
	
	// Отсортируем по алфавиту
	ТаблицаРезультатовЗапросов.Сортировать("СинонимДокумента");
	
	Возврат ТаблицаРезультатовЗапросов;
	
КонецФункции 

#КонецОбласти

#Область ИспользуетсяОплатаПоПлатежнымКартам

Функция ТекстЗапросаОплатаВОтчетахОРозничныхПродажах(ТолькоПроверка = Истина)
	
	Если ТолькоПроверка Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОплатаВОтчетеОРозничныхПродажах.Ссылка
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах.Оплата КАК ОплатаВОтчетеОРозничныхПродажах
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыОплатОрганизаций КАК ВидыОплатОрганизаций
		|		ПО ОплатаВОтчетеОРозничныхПродажах.ВидОплаты = ВидыОплатОрганизаций.Ссылка
		|ГДЕ
		|	ОплатаВОтчетеОРозничныхПродажах.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И ВидыОплатОрганизаций.ТипОплаты В (ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПлатежнаяКарта), ЗНАЧЕНИЕ(Перечисление.ТипыОплат.БанковскийКредит))";
	Иначе
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОплатаВОтчетеОРозничныхПродажах.Ссылка КАК Ссылка,
		|	ОплатаВОтчетеОРозничныхПродажах.Ссылка.Дата КАК Дата,
		|	ПРЕДСТАВЛЕНИЕ(ОплатаВОтчетеОРозничныхПродажах.Ссылка) КАК Представление
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах.Оплата КАК ОплатаВОтчетеОРозничныхПродажах
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыОплатОрганизаций КАК ВидыОплатОрганизаций
		|		ПО ОплатаВОтчетеОРозничныхПродажах.ВидОплаты = ВидыОплатОрганизаций.Ссылка
		|ГДЕ
		|	ОплатаВОтчетеОРозничныхПродажах.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И ВидыОплатОрганизаций.ТипОплаты В (ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПлатежнаяКарта), ЗНАЧЕНИЕ(Перечисление.ТипыОплат.БанковскийКредит))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	Ссылка";
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТаблицаЗапросовИспользуетсяОплатаПоПлатежнымКартам()

	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ИмяДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ОплатаПлатежнойКартой";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ОплатаПлатежнойКартой",, Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ОтчетОРозничныхПродажах";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаОплатаВОтчетахОРозничныхПродажах(Ложь);
	
	Возврат ТаблицаЗапросов;
	
КонецФункции 

Функция ДокументыПрепятствующиеОтключениюИспользуетсяОплатаПоПлатежнымКартам()

	ТаблицаРезультатовЗапросов = ПустаяТаблицаДокументовПрепятствующиеОтключениюОпции();

	ТаблицаЗапросов = ТаблицаЗапросовИспользуетсяОплатаПоПлатежнымКартам();

	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		
		СтрокаТаблицыДокументов = ТаблицаРезультатовЗапросов.Добавить();
		СтрокаТаблицыДокументов.ИмяДокумента = СтрокаТЗ.ИмяДокумента;
		МетаданныеДокумента = Метаданные.Документы.Найти(СтрокаТЗ.ИмяДокумента);
		СтрокаТаблицыДокументов.СинонимДокумента = МетаданныеДокумента.Синоним;
		СтрокаТаблицыДокументов.РезультатЗапроса = Запрос.Выполнить();
		
	КонецЦикла;
	
	// Отсортируем по алфавиту
	ТаблицаРезультатовЗапросов.Сортировать("СинонимДокумента");
	
	Возврат ТаблицаРезультатовЗапросов;
	
КонецФункции

Функция ТаблицаЗапросовИспользуютсяКорректировочныеДокументы()

	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ИмяДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "КорректировкаПоступления";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("КорректировкаПоступления",, Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "КорректировкаРеализации";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("КорректировкаРеализации",, Ложь);
	
	Возврат ТаблицаЗапросов;

КонецФункции

Функция ДокументыПрепятствующиеОтключениюИспользуютсяКорректировочныеДокументы()

	ТаблицаРезультатовЗапросов = ПустаяТаблицаДокументовПрепятствующиеОтключениюОпции();

	ТаблицаЗапросов = ТаблицаЗапросовИспользуютсяКорректировочныеДокументы();

	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		
		СтрокаТаблицыДокументов = ТаблицаРезультатовЗапросов.Добавить();
		СтрокаТаблицыДокументов.ИмяДокумента = СтрокаТЗ.ИмяДокумента;
		МетаданныеДокумента = Метаданные.Документы.Найти(СтрокаТЗ.ИмяДокумента);
		СтрокаТаблицыДокументов.СинонимДокумента = МетаданныеДокумента.Синоним;
		СтрокаТаблицыДокументов.РезультатЗапроса = Запрос.Выполнить();
		
	КонецЦикла;
	
	// Отсортируем по алфавиту
	ТаблицаРезультатовЗапросов.Сортировать("СинонимДокумента");
	
	Возврат ТаблицаРезультатовЗапросов;

КонецФункции

#КонецОбласти

#Область ВестиУчетПоДоговорам

Функция РезультатыЗапросовВестиУчетПоДоговорам(ТолькоПроверка = Истина)
	
	ЗапросВестиУчетПоДоговорам = Новый Запрос;
	ЗапросВестиУчетПоДоговорам.Текст = ТекстЗапросаВестиУчетПоДоговорам();
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	ЗапросВестиУчетПоДоговорам.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	
	ЗапросИспользуютсяДоговораКомиссии = Новый Запрос;
	ЗапросИспользуютсяДоговораКомиссии.Текст = ТекстЗапросаВедетсяДеятельностьПоДоговорамКомиссии(ТолькоПроверка);
	МассивВидовДоговоровКомиссии = Новый Массив;
	МассивВидовДоговоровКомиссии.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	МассивВидовДоговоровКомиссии.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
	МассивВидовДоговоровКомиссии.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	МассивВидовДоговоровКомиссии.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);
	ЗапросИспользуютсяДоговораКомиссии.УстановитьПараметр("ВидыДоговоров", МассивВидовДоговоровКомиссии);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросыВестиУчетПоДоговорам = Новый Структура;
	ЗапросыВестиУчетПоДоговорам.Вставить("УчетПоДоговорам",  ЗапросВестиУчетПоДоговорам.Выполнить());
	ЗапросыВестиУчетПоДоговорам.Вставить("ДоговораКомиссии", ЗапросИспользуютсяДоговораКомиссии.Выполнить());
	
	Возврат ЗапросыВестиУчетПоДоговорам;

КонецФункции

Функция ОтказСнятьВестиУчетПоДоговорам()
	
	РезультатыЗапросовВестиУчетПоДоговорам = РезультатыЗапросовВестиУчетПоДоговорам();
	ОтказСнять = (НЕ РезультатыЗапросовВестиУчетПоДоговорам.УчетПоДоговорам.Пустой() ИЛИ НЕ РезультатыЗапросовВестиУчетПоДоговорам.ДоговораКомиссии.Пустой());
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ТекстЗапросаВестиУчетПоДоговорам()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОсновныеДоговорыКонтрагента.Договор,
	|	ОсновныеДоговорыКонтрагента.Контрагент,
	|	ОсновныеДоговорыКонтрагента.Организация
	|ПОМЕСТИТЬ ОсновныеДоговора
	|ИЗ
	|	РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК Контрагент,
	|	ХозрасчетныйОстатки.Субконто1 КАК СсылкаКонтрагент,
	|	ХозрасчетныйОстатки.Субконто2 КАК Договор,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.СуммаОстаток < 0
	|			ТОГДА -ХозрасчетныйОстатки.СуммаОстаток
	|		ИНАЧЕ ХозрасчетныйОстатки.СуммаОстаток
	|	КОНЕЦ КАК Остаток
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			,
	|			,
	|			&ВидыСубконто,
	|			НЕ Субконто2 В
	|					(ВЫБРАТЬ
	|						ОсновныеДоговора.Договор
	|					ИЗ
	|						ОсновныеДоговора)) КАК ХозрасчетныйОстатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Контрагент";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ИспользуетсяГособоронзаказ

Функция ОтказСнятьИспользуетсяГособоронзаказ()
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаИспользуетсяСправочник("ГосКонтракты");
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОтказСнять = НЕ РезультатЗапроса.Пустой();
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьИспользуетсяГособоронзаказТолькоВСчетахФактурах()
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаИспользуетсяГособоронзаказТолькоВСчетахФактурах();
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОтказСнять = НЕ РезультатЗапроса.Пустой();
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ТекстЗапросаИспользуетсяГособоронзаказТолькоВСчетахФактурах()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СчетФактураВыданный.Ссылка
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.ИдентификаторГосКонтракта <> """"
	|	И НЕ СчетФактураВыданный.ПометкаУдаления";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СписокДокументовПрепятствующихОтключению

Процедура СформироватьСписокОбъектовПрепятствующихОтключениюУчетПоДоговорам(Параметры, АдресХранилища) Экспорт

	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("ТабличныйДокумент");
	СтруктураРезультата.Вставить("ДополнительныеПараметры", Новый Структура);
	СтруктураРезультата.ДополнительныеПараметры.Вставить("ЗаголовокФормы", "Остатки по договорам");
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ФункциональностьПрограммы.СписокДокументов");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	РезультатыЗапросовВестиУчетПоДоговорам = РезультатыЗапросовВестиУчетПоДоговорам(Ложь);
	
	УчетПоДоговорам = РезультатыЗапросовВестиУчетПоДоговорам.УчетПоДоговорам.Выгрузить();
	
	Если УчетПоДоговорам.Количество() > 0 Тогда
		ОбластьШапка  = Макет.ПолучитьОбласть("ШапкаОбъекты");
		ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаОбъекты");
		ОбластьШапка.Параметры.Заголовок = НСтр("ru = 'Остатки по договорам'");
		ОбластьШапка.Параметры.Пояснение =  
			НСтр("ru = 'Для отключения учета по договорам перенесите задолженность на один договор 
			|и установите его ""Основным"" (по кнопке ""Использовать как основной"")'");
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		НомерПП = 0;
		Для Каждого СтрокаТаблицы Из УчетПоДоговорам Цикл
			НомерПП = НомерПП + 1;
			ОбластьСтрока.Параметры.Заполнить(СтрокаТаблицы);
			ОбластьСтрока.Параметры.НомерПП = НомерПП;
			ТабличныйДокумент.Вывести(ОбластьСтрока);
		КонецЦикла;
	КонецЕсли;
	
	ДоговораКомиссии = РезультатыЗапросовВестиУчетПоДоговорам.ДоговораКомиссии.Выгрузить();
	
	Если ДоговораКомиссии.Количество() > 0 Тогда
		ОбластьШапка  = Макет.ПолучитьОбласть("ШапкаКомиссия");
		ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаКомиссия");
		ОбластьШапка.Параметры.Заголовок = НСтр("ru = 'Договора комиссии'");
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		НомерПП = 0;
		Для Каждого СтрокаТаблицы Из ДоговораКомиссии Цикл
			НомерПП = НомерПП + 1;
			ОбластьСтрока.Параметры.Заполнить(СтрокаТаблицы);
			ОбластьСтрока.Параметры.НомерПП = НомерПП;
			ТабличныйДокумент.Вывести(ОбластьСтрока);
		КонецЦикла;
	КонецЕсли;
	
	СтруктураРезультата.ТабличныйДокумент = ТабличныйДокумент;
	ПоместитьВоВременноеХранилище(СтруктураРезультата, АдресХранилища);
	
КонецПроцедуры

Процедура СформироватьСписокДокументовПрепятствующихОтключениюОпции(Параметры, АдресХранилища) Экспорт

	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ФункциональностьПрограммы.СписокДокументов");
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("ТабличныйДокумент");
	СтруктураРезультата.Вставить("ДополнительныеПараметры", Новый Структура);
	ОбластьШапка 		= Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока		= Макет.ПолучитьОбласть("Строка");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Если Параметры.Свойство("УправлениеЗачетомАвансовПогашениемЗадолженности") Тогда
		ТаблицаРезультатовЗапросов = ДокументыПрепятствующиеОтключениюУправлениеЗачетомАвансовПогашениемЗадолженности();
		ОбластьШапка.Параметры.Заголовок = НСтр("ru = 'Управление зачетом авансов и погашением задолженности'");
	ИначеЕсли Параметры.Свойство("ВедетсяУчетВозвратнойТары") Тогда
		ТаблицаРезультатовЗапросов = ДокументыПрепятствующиеОтключениюВозвратойТары();
		ОбластьШапка.Параметры.Заголовок = НСтр("ru = 'Возвратная тара'");
	ИначеЕсли Параметры.Свойство("ОтгрузкаБезПереходаПраваСобственности") Тогда
		ТаблицаРезультатовЗапросов = ДокументыПрепятствующиеОтключениюОтгрузкаБезПереходаПраваСобственности();
		ОбластьШапка.Параметры.Заголовок = НСтр("ru = 'Отгрузка без перехода права собственности'");
	ИначеЕсли Параметры.Свойство("ВедетсяРозничнаяТорговля") Тогда
		ТаблицаРезультатовЗапросов = ДокументыПрепятствующиеОтключениюВедетсяРозничнаяТорговля();
		ОбластьШапка.Параметры.Заголовок = НСтр("ru = 'Розничная торговля'");
	ИначеЕсли Параметры.Свойство("ВедетсяУчетСпецодеждыСпецоснастки") Тогда
		ТаблицаРезультатовЗапросов = ДокументыПрепятствующиеОтключениюВедетсяУчетСпецодеждыСпецоснастки();
		ОбластьШапка.Параметры.Заголовок = НСтр("ru = 'Спецодежда и спецоснастка'");
	ИначеЕсли Параметры.Свойство("ВедетсяУчетДенежныхДокументов") Тогда
		ТаблицаРезультатовЗапросов = ДокументыПрепятствующиеОтключениюВедетсяУчетДенежныхДокументов();
		ОбластьШапка.Параметры.Заголовок = НСтр("ru = 'Денежные документы'");
	ИначеЕсли Параметры.Свойство("ВедетсяПроизводственнаяДеятельность") Тогда
		ТаблицаРезультатовЗапросов = ДокументыПрепятствующиеОтключениюВедетсяПроизводственнаяДеятельность();
		ОбластьШапка.Параметры.Заголовок = НСтр("ru = 'Производство'");
	ИначеЕсли Параметры.Свойство("ИспользоватьОплатуПоПлатежнымКартам") Тогда
		ТаблицаРезультатовЗапросов = ДокументыПрепятствующиеОтключениюИспользуетсяОплатаПоПлатежнымКартам();
		ОбластьШапка.Параметры.Заголовок = НСтр("ru = 'Платежные карты'");
	ИначеЕсли Параметры.Свойство("ИспользоватьКорректировочныеДокументы") Тогда
		ТаблицаРезультатовЗапросов = ДокументыПрепятствующиеОтключениюИспользуютсяКорректировочныеДокументы();
		ОбластьШапка.Параметры.Заголовок = НСтр("ru = 'Исправительные и корректировочные документы'");
	ИначеЕсли Параметры.Свойство("ИспользоватьДоставкуАвтотранспортом") Тогда
		ТаблицаРезультатовЗапросов = ДокументыПрепятствующиеОтключениюИспользуетсяДоставкаАвтотранспортом();
		ОбластьШапка.Параметры.Заголовок = НСтр("ru = 'Доставка товаров автотранспортом'");
	ИначеЕсли Параметры.Свойство("ИспользоватьИнкассацию") Тогда
		ТаблицаРезультатовЗапросов = ДокументыПрепятствующиеОтключениюИспользоватьИнкассацию();
		ОбластьШапка.Параметры.Заголовок = НСтр("ru = 'Документы по инкассации'");
	ИначеЕсли Параметры.Свойство("ВедетсяУчетТаможенныхДекларацийЭкспорт") Тогда 
		ТаблицаРезультатовЗапросов = ДокументыПрепятствующиеОтключениюУчетаДекларацийЭкспорт();
		ОбластьШапка.Параметры.Заголовок = НСтр("ru = 'Таможенные декларации (экспорт)'");
	КонецЕсли;

	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	НомерПП = 0;
	
	Для Каждого СтрокаТаблицыДокументов Из ТаблицаРезультатовЗапросов Цикл
		
		Выборка = СтрокаТаблицыДокументов.РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
		
			НомерПП = НомерПП + 1;
		
			ОбластьСтрока.Параметры.Заполнить(Выборка);
			ОбластьСтрока.Параметры.НомерПП = НомерПП;
			
			ТабличныйДокумент.Вывести(ОбластьСтрока);
		
		КонецЦикла;
	
	КонецЦикла;
	
	СтруктураРезультата.ТабличныйДокумент = ТабличныйДокумент;
	ПоместитьВоВременноеХранилище(СтруктураРезультата, АдресХранилища);
	
КонецПроцедуры

Функция ПустаяТаблицаДокументовПрепятствующиеОтключениюОпции()

	ТаблицаДокументов = Новый ТаблицаЗначений;
	ТаблицаДокументов.Колонки.Добавить("ИмяДокумента",     ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаДокументов.Колонки.Добавить("СинонимДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаДокументов.Колонки.Добавить("РезультатЗапроса");
	
	Возврат ТаблицаДокументов;

КонецФункции

#КонецОбласти

#Область ОбработчикОбновленияИнформационнойБазыБП

Процедура ЗаполнитьКонстантыУправленияФункциональностью() Экспорт
	
	МассивИменКонстант = Новый Массив;
	МассивИменКонстант.Добавить("ВедетсяУчетНМА");
	МассивИменКонстант.Добавить("ВедетсяУчетОсновныхСредств");
	МассивИменКонстант.Добавить("ВедетсяУчетСпецодеждыСпецоснастки");
	МассивИменКонстант.Добавить("ВедетсяОтгрузкаБезПереходаПраваСобственности");
	МассивИменКонстант.Добавить("ИспользоватьКомплектациюНоменклатуры");
	МассивИменКонстант.Добавить("ИспользоватьОплатуПоПлатежнымКартам");
	МассивИменКонстант.Добавить("ВедетсяУчетДенежныхДокументов");
	МассивИменКонстант.Добавить("ИспользоватьПакетноеВыставлениеАктов");
	МассивИменКонстант.Добавить("ИспользоватьПлатежныеТребования");
	МассивИменКонстант.Добавить("УправлениеЗачетомАвансовПогашениемЗадолженности");
	
	Для Каждого ИмяКонстанты Из МассивИменКонстант Цикл
		МенеджерКонстанты = Константы[ИмяКонстанты].СоздатьМенеджерЗначения();
		МенеджерКонстанты.Значение = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерКонстанты);
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьПолнуюФункциональность() Экспорт
	
	МассивИменКонстант = МассивИменКонстантФункциональности();
	ИменаКонстант = СтрСоединить(МассивИменКонстант, ",");
	
	НаборКонстантФункциональности = Константы.СоздатьНабор(ИменаКонстант);
	НаборКонстантФункциональности.Прочитать();

	Для Каждого ИмяКонстанты Из МассивИменКонстант Цикл
		НаборКонстантФункциональности[ИмяКонстанты] = Истина;
	КонецЦикла;
	
	НаборКонстантФункциональности.Записать();
	
КонецПроцедуры

Процедура ЗаполнитьКонстантуАлкогольнаяПродукция() Экспорт
	
	ВедетсяРозничнаяТорговля = Константы.ВедетсяРозничнаяТорговля.Получить();
	
	МенеджерКонстанты = Константы.ВедетсяУчетРозничнойПродажиАлкогольнойПродукцииПива.СоздатьМенеджерЗначения();
	МенеджерКонстанты.Значение = ВедетсяРозничнаяТорговля;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерКонстанты);
	
КонецПроцедуры

Процедура ЗаполнитьКонстантуКорректировочныеДокументы() Экспорт

	ИспользоватьКорректировочныеДокументы = Константы.ИспользоватьКорректировочныеДокументы.СоздатьМенеджерЗначения();
	ИспользоватьКорректировочныеДокументы.Значение = Истина;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ИспользоватьКорректировочныеДокументы);

КонецПроцедуры

Процедура ЗаполнитьКонстантуФискальныйРегистратор() Экспорт

	ИспользоватьФискальныйРегистратор = Константы.ИспользоватьФискальныйРегистратор.СоздатьМенеджерЗначения();
	ИспользоватьФискальныйРегистратор.Значение = Истина;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ИспользоватьФискальныйРегистратор);

КонецПроцедуры

Процедура ЗаполнитьКонстантуПередачаПрав() Экспорт

	ЭтоБазоваяВерсияКонфигурации = СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации();
	
	ИспользоватьПередачуПрав = Константы.ИспользоватьПередачуПрав.СоздатьМенеджерЗначения();
	ИспользоватьПередачуПрав.Значение = НЕ ЭтоБазоваяВерсияКонфигурации;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ИспользоватьПередачуПрав);

КонецПроцедуры

Процедура ЗаполнитьКонстантуИспользуютсяПодарочныеСертификаты() Экспорт

	ЭтоБазоваяВерсияКонфигурации = СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации();
	ВедетсяРозничнаяТорговля     = Константы.ВедетсяРозничнаяТорговля.Получить();
	
	ИспользуютсяПодарочныеСертификаты = Константы.ИспользуютсяПодарочныеСертификаты.СоздатьМенеджерЗначения();
	ИспользуютсяПодарочныеСертификаты.Значение = ВедетсяРозничнаяТорговля И Не ЭтоБазоваяВерсияКонфигурации;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ИспользуютсяПодарочныеСертификаты);

КонецПроцедуры

Процедура УстановитьКонстантуИспользуетсяГособоронзаказ() Экспорт
	
	МенеджерКонстанты = Константы.ИспользуетсяГособоронзаказ.СоздатьМенеджерЗначения();
	МенеджерКонстанты.Значение = Истина;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерКонстанты);
	
КонецПроцедуры

Процедура УстановитьКонстантуВестиУчетПоДоговорам() Экспорт
	
	МенеджерКонстанты = Константы.ВестиУчетПоДоговорам.СоздатьМенеджерЗначения();
	МенеджерКонстанты.Значение = Истина;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерКонстанты);
	
КонецПроцедуры

Процедура УстановитьКонстантуИспользоватьПланированиеПлатежейПоставщикам() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерКонстанты = Константы.ИспользоватьПланированиеПлатежейПоставщикам.СоздатьМенеджерЗначения();
	
	Если ОбщегоНазначенияБП.ЭтоВерсияСОсновнойФункциональностью() Тогда
		
		МенеджерКонстанты.Значение = Ложь;
		
	Иначе
		
		МенеджерКонстанты.Значение = Истина;
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерКонстанты);
	
КонецПроцедуры

Процедура УстановитьКонстантуИспользоватьПланированиеПлатежейОтПокупателей() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерКонстанты = Константы.ИспользоватьПланированиеПлатежейОтПокупателей.СоздатьМенеджерЗначения();
	
	Если ОбщегоНазначенияБП.ЭтоВерсияСОсновнойФункциональностью() Тогда
		
		МенеджерКонстанты.Значение = Ложь;
		
	Иначе
		
		МенеджерКонстанты.Значение = Истина;
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерКонстанты);
	
КонецПроцедуры

Процедура УстановитьКонстантуИсполняютсяОбязанностиНалоговогоАгентаПоНДС() Экспорт
	
	МенеджерКонстанты = Константы.ИсполняютсяОбязанностиНалоговогоАгентаПоНДС.СоздатьМенеджерЗначения();
	МенеджерКонстанты.Значение = Истина;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерКонстанты);
	
КонецПроцедуры

Процедура ЗаполнитьКонстантуИнкассация() Экспорт
	
	ИнкассацияИспользуется = НЕ ОтказСнятьИспользоватьИнкассацию();
	ЭтоБазоваяВерсияКонфигурации = СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации();
	
	ИспользоватьИнкассацию = Константы.ИспользоватьИнкассацию.СоздатьМенеджерЗначения();
	ИспользоватьИнкассацию.Значение = ИнкассацияИспользуется ИЛИ НЕ ЭтоБазоваяВерсияКонфигурации;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ИспользоватьИнкассацию);
	
КонецПроцедуры

#КонецОбласти

#Область ВернутьМассивИменКонстант

// Формирует массив имен констант используемых для управления функциональностью
//
Функция МассивИменКонстантФункциональности() Экспорт
	
	МассивИменКонстант = Новый Массив;
	МассивИменКонстант.Добавить("ВедетсяУчетНМА");
	МассивИменКонстант.Добавить("ВедетсяУчетОсновныхСредств");
	МассивИменКонстант.Добавить("ВедетсяУчетСпецодеждыСпецоснастки");
	МассивИменКонстант.Добавить("ВедетсяОтгрузкаБезПереходаПраваСобственности");
	МассивИменКонстант.Добавить("ИспользоватьКомплектациюНоменклатуры");
	МассивИменКонстант.Добавить("ИспользоватьОплатуПоПлатежнымКартам");
	МассивИменКонстант.Добавить("ВедетсяУчетДенежныхДокументов");
	МассивИменКонстант.Добавить("ВедетсяПроизводственнаяДеятельность");
	МассивИменКонстант.Добавить("ОсуществляетсяРеализацияТоваровУслугКомитентов");
	МассивИменКонстант.Добавить("ОсуществляетсяРеализацияТоваровУслугЧерезКомиссионеров");
	МассивИменКонстант.Добавить("ОсуществляетсяЗакупкаТоваровУслугДляКомитентов");
	МассивИменКонстант.Добавить("ОсуществляетсяЗакупкаТоваровУслугЧерезКомиссионеров");
	МассивИменКонстант.Добавить("ВедетсяРозничнаяТорговля");
	МассивИменКонстант.Добавить("ВедетсяУчетВозвратнойТары");
	МассивИменКонстант.Добавить("ВедетсяУчетИмпортныхТоваров");
	МассивИменКонстант.Добавить("ИспользоватьВалютныйУчет");
	МассивИменКонстант.Добавить("ИспользоватьПакетноеВыставлениеАктов");
	МассивИменКонстант.Добавить("ИспользоватьПлатежныеТребования");
	МассивИменКонстант.Добавить("УправлениеЗачетомАвансовПогашениемЗадолженности");
	МассивИменКонстант.Добавить("ВедетсяУчетРозничнойПродажиАлкогольнойПродукцииПива");
	МассивИменКонстант.Добавить("ИспользоватьКорректировочныеДокументы");
	МассивИменКонстант.Добавить("ИспользоватьФискальныйРегистратор");
	МассивИменКонстант.Добавить("ИспользоватьПередачуПрав");
	МассивИменКонстант.Добавить("ИспользуютсяПодарочныеСертификаты");
	МассивИменКонстант.Добавить("ИспользоватьИнкассацию");
	МассивИменКонстант.Добавить("ИспользоватьДоставкуАвтотранспортом");
	МассивИменКонстант.Добавить("ВестиУчетПоДоговорам");
	МассивИменКонстант.Добавить("ИсполняютсяОбязанностиНалоговогоАгентаПоНДС");
	МассивИменКонстант.Добавить("ИспользоватьПланированиеПлатежейПоставщикам");
	МассивИменКонстант.Добавить("ИспользоватьПланированиеПлатежейОтПокупателей");
	МассивИменКонстант.Добавить("ВедетсяУчетТаможенныхДекларацийЭкспорт");
	МассивИменКонстант.Добавить("ЗагрузкаДанныхИзТиС");
	МассивИменКонстант.Добавить("ВестиУчетМаркировкиПродукцииВГИСМ");
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПодразделениям") Тогда
		МассивИменКонстант.Добавить("ИспользоватьУведомленияОКонтролируемыхСделках");
		МассивИменКонстант.Добавить("ИспользуетсяГособоронзаказ");
	Иначе
		МассивИменКонстант.Добавить("ИспользуетсяГособоронзаказТолькоВСчетахФактурах");
	КонецЕсли;
	
	Возврат МассивИменКонстант;
	
КонецФункции

// Возвращает имена констант из переданного массива, у которых значение Истина
Функция МассивИспользуемыхКонстант(МассивИменКонстант)
	
	СтрокаИменКонстант = СтрСоединить(МассивИменКонстант, ",");
	
	НаборКонстант = Константы.СоздатьНабор(СтрокаИменКонстант);
	НаборКонстант.Прочитать();
	
	МассивИспользуемыхКонстант = Новый Массив;
	
	Для Каждого ИмяКонстанты Из МассивИменКонстант Цикл
		Если НаборКонстант[ИмяКонстанты] = Истина Тогда
			МассивИспользуемыхКонстант.Добавить(ИмяКонстанты);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивИспользуемыхКонстант;
	
КонецФункции

// Возвращает имена констант, участвующие в обменах
Функция МассивИменКонстантФункциональностиДляОбменов();
	
	МассивИменКонстант = Новый Массив;
	МассивИменКонстант.Добавить("ВедетсяУчетСпецодеждыСпецоснастки");
	МассивИменКонстант.Добавить("ВедетсяОтгрузкаБезПереходаПраваСобственности");
	МассивИменКонстант.Добавить("ИспользоватьКомплектациюНоменклатуры");
	МассивИменКонстант.Добавить("ОсуществляетсяРеализацияТоваровУслугКомитентов");
	МассивИменКонстант.Добавить("ОсуществляетсяРеализацияТоваровУслугЧерезКомиссионеров");
	МассивИменКонстант.Добавить("ОсуществляетсяЗакупкаТоваровУслугДляКомитентов");
	МассивИменКонстант.Добавить("ОсуществляетсяЗакупкаТоваровУслугЧерезКомиссионеров");
	МассивИменКонстант.Добавить("ВедетсяРозничнаяТорговля");
	МассивИменКонстант.Добавить("ВедетсяУчетВозвратнойТары");
	МассивИменКонстант.Добавить("ВедетсяУчетИмпортныхТоваров");
	МассивИменКонстант.Добавить("ИспользоватьВалютныйУчет");
	МассивИменКонстант.Добавить("УправлениеЗачетомАвансовПогашениемЗадолженности");
	МассивИменКонстант.Добавить("ИспользоватьОплатуПоПлатежнымКартам");
	МассивИменКонстант.Добавить("ВестиУчетПоДоговорам");
	МассивИменКонстант.Добавить("ИсполняютсяОбязанностиНалоговогоАгентаПоНДС");
	МассивИменКонстант.Добавить("ВедетсяУчетРозничнойПродажиАлкогольнойПродукцииПива");
	
	Возврат МассивИменКонстант;
	
КонецФункции

// Возвращает имена констант, зависимых от переданной
Функция МассивИменЗависимыхКонстант(ИмяКонстанты) Экспорт;
	
	МассивИменКонстант = Новый Массив;
	
	Если ИмяКонстанты = "ВедетсяРозничнаяТорговля" Тогда
		
		МассивИменКонстант.Добавить("ВедетсяУчетРозничнойПродажиАлкогольнойПродукцииПива");
		МассивИменКонстант.Добавить("ИспользуютсяПодарочныеСертификаты");
		
	ИначеЕсли ИмяКонстанты = "ВестиУчетПоДоговорам" Тогда
		
		МассивИменКонстант.Добавить("ИспользоватьВалютныйУчет");
		МассивИменКонстант.Добавить("ИсполняютсяОбязанностиНалоговогоАгентаПоНДС");
		
	КонецЕсли;
	
	Возврат МассивИменКонстант;
	
КонецФункции

#КонецОбласти

#Область ПодпискаНаСобытиеИзменениеКонстантыСинхронизацияДанных

// При установке флага Синхронизация Данных, включаем зависимые функциональные возможности
Процедура УстановитьКонстантыЗависимыеОтОбменов() Экспорт
	
	Если Константы.ИспользоватьСинхронизациюДанных.Получить() Тогда
		
		МассивИменКонстант = МассивИменКонстантФункциональностиДляОбменов();
		СтрокаИменКонстант = СтрСоединить(МассивИменКонстант, ",");
		
		НаборКонстант = Константы.СоздатьНабор(СтрокаИменКонстант);
		НаборКонстант.Прочитать();
		Для Каждого ИмяКонстанты Из МассивИменКонстант Цикл
			НаборКонстант[ИмяКонстанты] = Истина;
		КонецЦикла;
		НаборКонстант.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыЗапускаПроверокКонстантНаВозможностьОтключения

Процедура МассивКонстантПроверкаНеПройденаВФоне(СтруктураПараметров, АдресХранилища) Экспорт
	
	ДанныеДляЗаполнения = Новый Структура();
	МассивКонстантПроверкаНеПройдена = Новый Массив;
	МассивКонстантПроверкаПройдена = Новый Массив;
	МассивПроверяемыхКонстант = МассивИспользуемыхКонстант(МассивИменКонстантФункциональности());
	
	Если ИспользуетсяСинхронизацияДанных() Тогда
		МассивКонстантПроверкаНеПройдена.Добавить("ИспользуетсяСинхронизацияДанных");
		МассивКонстантУчавствующихВОбмене = МассивИменКонстантФункциональностиДляОбменов();
		// Не проверям константы, которые учавствуют в обмене
		МассивПроверяемыхКонстант = ОбщегоНазначенияКлиентСервер.СократитьМассив(МассивПроверяемыхКонстант, МассивКонстантУчавствующихВОбмене);
	КонецЕсли;
	
	Для Каждого ИмяКонстанты Из МассивПроверяемыхКонстант Цикл
		
		ОтказСнять = ОтказСнятьИспользованиеКонстанты(ИмяКонстанты);
		
		Если ОтказСнять Тогда
			МассивКонстантПроверкаНеПройдена.Добавить(ИмяКонстанты);
		Иначе
			МассивКонстантПроверкаПройдена.Добавить(ИмяКонстанты);
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьИнтерфейс = Ложь;
	
	// Обработаем константы, у которых есть зависимые константы
	ОбработатьЗависимыеКонстанты(МассивКонстантПроверкаПройдена, МассивКонстантПроверкаНеПройдена);
	
	// Снимем флаги с констант, которые прошли проверку
	Если МассивКонстантПроверкаПройдена.Количество() > 0 Тогда
		
		СтрокаИменКонстант = СтрСоединить(МассивКонстантПроверкаПройдена, ",");
		НаборКонстант = Константы.СоздатьНабор(СтрокаИменКонстант);
		Для Каждого ИмяКонстанты Из МассивКонстантПроверкаПройдена Цикл
			НаборКонстант[ИмяКонстанты] = Ложь;
		КонецЦикла;
		НаборКонстант.Записать();
		ОбновитьИнтерфейс = Истина;
		
	КонецЕсли;
	
	ДанныеДляЗаполнения.Вставить("Массив", МассивКонстантПроверкаНеПройдена);
	ДанныеДляЗаполнения.Вставить("ОбновитьИнтерфейс", ОбновитьИнтерфейс);
	
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
	
КонецПроцедуры

Функция МассивКонстантПроверкаНеПройдена(МассивИменКонстант) Экспорт
	
	МассивПроверяемыхКонстант = МассивИспользуемыхКонстант(МассивИменКонстант);
	МассивКонстантПроверкаНеПройдена = Новый Массив;
	
	Для Каждого ИмяКонстанты Из МассивПроверяемыхКонстант Цикл
		
		ОтказСнять = ОтказСнятьИспользованиеКонстанты(ИмяКонстанты);
		
		Если ОтказСнять Тогда
			МассивКонстантПроверкаНеПройдена.Добавить(ИмяКонстанты);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивКонстантПроверкаНеПройдена;
	
КонецФункции

Функция ОтказСнятьИспользованиеКонстанты(ИмяКонстанты)
	
	ОтказСнять = Истина;
	
	Если ИмяКонстанты = "ВедетсяУчетНМА" Тогда
		ОтказСнять = ОтказСнятьВедетсяУчетНМА();
	ИначеЕсли ИмяКонстанты = "ВедетсяУчетОсновныхСредств" Тогда
		ОтказСнять = ОтказСнятьВедетсяУчетОсновныхСредств();
	ИначеЕсли ИмяКонстанты = "ВедетсяУчетСпецодеждыСпецоснастки" Тогда
		ОтказСнять = ОтказСнятьВедетсяУчетСпецодеждыСпецоснастки()
	ИначеЕсли ИмяКонстанты = "ВедетсяОтгрузкаБезПереходаПраваСобственности" Тогда
		ОтказСнять = ОтказСнятьВедетсяОтгрузкаБезПереходаПраваСобственности()
	ИначеЕсли ИмяКонстанты = "ИспользоватьКомплектациюНоменклатуры" Тогда
		ОтказСнять = ОтказСнятьИспользоватьКомплектациюНоменклатуры()
	ИначеЕсли ИмяКонстанты = "ИспользоватьОплатуПоПлатежнымКартам" Тогда
		ОтказСнять = ОтказСнятьИспользоватьОплатуПоПлатежнымКартам()
	ИначеЕсли ИмяКонстанты = "ВедетсяУчетДенежныхДокументов" Тогда
		ОтказСнять = ОтказСнятьИспользоватьДенежныеДокументы()
	ИначеЕсли ИмяКонстанты = "ВедетсяПроизводственнаяДеятельность" Тогда
		ОтказСнять = ОтказСнятьВедетсяПроизводственнаяДеятельность()
	ИначеЕсли ИмяКонстанты = "ОсуществляетсяРеализацияТоваровУслугКомитентов" Тогда
		ОтказСнять = ОтказСнятьОсуществляетсяРеализацияТоваровУслугКомитентов()
	ИначеЕсли ИмяКонстанты = "ОсуществляетсяРеализацияТоваровУслугЧерезКомиссионеров" Тогда
		ОтказСнять = ОтказСнятьОсуществляетсяРеализацияТоваровУслугЧерезКомиссионеров()	
	ИначеЕсли ИмяКонстанты = "ОсуществляетсяЗакупкаТоваровУслугДляКомитентов" Тогда
		ОтказСнять = ОтказСнятьОсуществляетсяЗакупкаТоваровУслугДляКомитентов()
	ИначеЕсли ИмяКонстанты = "ОсуществляетсяЗакупкаТоваровУслугЧерезКомиссионеров" Тогда
		ОтказСнять = ОтказСнятьОсуществляетсяЗакупкаТоваровУслугЧерезКомиссионеров()
	ИначеЕсли ИмяКонстанты = "ВедетсяРозничнаяТорговля" Тогда
		ОтказСнять = ОтказСнятьВедетсяРозничнаяТорговля()
	ИначеЕсли ИмяКонстанты = "ВедетсяУчетВозвратнойТары" Тогда
		ОтказСнять = ОтказСнятьВедетсяУчетВозвратнойТары()
	ИначеЕсли ИмяКонстанты = "ВедетсяУчетИмпортныхТоваров" Тогда
		ОтказСнять = ОтказСнятьВедетсяУчетИмпортныхТоваров()
	ИначеЕсли ИмяКонстанты = "ИспользоватьВалютныйУчет" Тогда
		ОтказСнять = ОтказСнятьИспользоватьВалютныйУчет()
	ИначеЕсли ИмяКонстанты = "ИспользоватьПакетноеВыставлениеАктов" Тогда
		ОтказСнять = ОтказСнятьИспользоватьПакетноеВыставлениеАктов()
	ИначеЕсли ИмяКонстанты = "ИспользоватьПлатежныеТребования" Тогда
		ОтказСнять = ОтказСнятьИспользоватьПлатежныеТребования()
	ИначеЕсли ИмяКонстанты = "УправлениеЗачетомАвансовПогашениемЗадолженности" Тогда
		ОтказСнять = ОтказСнятьУправлениеЗачетомАвансовПогашениемЗадолженности()
	ИначеЕсли ИмяКонстанты = "ИспользоватьУведомленияОКонтролируемыхСделках" Тогда
		ОтказСнять = ОтказСнятьИспользоватьУведомленияОКонтролируемыхСделках()
	ИначеЕсли ИмяКонстанты = "ИспользуетсяГособоронзаказ" Тогда
		ОтказСнять = ОтказСнятьИспользуетсяГособоронзаказ();
	ИначеЕсли ИмяКонстанты = "ИспользуетсяГособоронзаказТолькоВСчетахФактурах" Тогда
		ОтказСнять = ОтказСнятьИспользуетсяГособоронзаказТолькоВСчетахФактурах();	
	ИначеЕсли ИмяКонстанты = "ВедетсяУчетРозничнойПродажиАлкогольнойПродукцииПива" Тогда
		ОтказСнять = ОтказСнятьВедетсяУчетРозничнойПродажиАлкогольнойПродукцииПива()
	ИначеЕсли ИмяКонстанты = "ИспользоватьКорректировочныеДокументы" Тогда
		ОтказСнять = ОтказСнятьИспользоватьКорректировочныеДокументы();
	ИначеЕсли ИмяКонстанты = "ИспользоватьФискальныйРегистратор" Тогда
		ОтказСнять = ОтказСнятьИспользоватьФискальныйРегистратор();
	ИначеЕсли ИмяКонстанты = "ИспользоватьПередачуПрав" Тогда
		ОтказСнять = Ложь;
	ИначеЕсли ИмяКонстанты = "ИспользуютсяПодарочныеСертификаты" Тогда
		ОтказСнять = ОтказСнятьИспользуютсяПодарочныеСертификаты();
	ИначеЕсли ИмяКонстанты = "ИспользоватьИнкассацию" Тогда
		ОтказСнять = ОтказСнятьИспользоватьИнкассацию();
	ИначеЕсли ИмяКонстанты = "ИспользоватьДоставкуАвтотранспортом" Тогда
		ОтказСнять = ОтказСнятьИспользоватьДоставкуАвтотранспортом();
	ИначеЕсли ИмяКонстанты = "ИспользоватьПланированиеПлатежейПоставщикам" Тогда
		ОтказСнять = Ложь;
	ИначеЕсли ИмяКонстанты = "ИспользоватьПланированиеПлатежейОтПокупателей" Тогда
		ОтказСнять = Ложь;
	ИначеЕсли ИмяКонстанты = "ВестиУчетПоДоговорам" Тогда
		ОтказСнять = ОтказСнятьВестиУчетПоДоговорам();
	ИначеЕсли ИмяКонстанты = "ИсполняютсяОбязанностиНалоговогоАгентаПоНДС" Тогда
		ОтказСнять = ОтказСнятьИсполняютсяОбязанностиНалоговогоАгентаПоНДС();
	ИначеЕсли ИмяКонстанты = "ВедетсяУчетТаможенныхДекларацийЭкспорт" Тогда
		ОтказСнять = ОтказСнятьВедетсяУчетТаможенныхДекларацийЭкспорт();
	ИначеЕсли ИмяКонстанты = "ВестиУчетМаркировкиПродукцииВГИСМ" Тогда
		ОтказСнять = ОтказСнятьВестиУчетМаркировкиПродукцииВГИСМ();
	ИначеЕсли ИмяКонстанты = "ЗагрузкаДанныхИзТиС" Тогда
		ОтказСнять = Ложь;
	КонецЕсли;
	
	Возврат ОтказСнять;
	
КонецФункции

Процедура ОбработатьЗависимыеКонстанты(МассивКонстантПроверкаПройдена, МассивКонстантПроверкаНеПройдена)
	
	МассивКонстантУдалитьИзПроверкаПройдена = Новый Массив;
	
	Для Каждого ИмяПровереннойКонстанты ИЗ МассивКонстантПроверкаПройдена Цикл
		
		МассивИменЗависимыхКонстант = МассивИменЗависимыхКонстант(ИмяПровереннойКонстанты);
		
		ПроверкаЗависимойКонстантыНеПройдена = Ложь;
		// Проверим, пройдена ли проверка для подчиненных элементов
		Для Каждого ИмяЗависимойКонстанты Из МассивИменЗависимыхКонстант Цикл
			ПроверкаЗависимойКонстантыНеПройдена = МассивКонстантПроверкаНеПройдена.Найти(ИмяЗависимойКонстанты) <> Неопределено;
			Если ПроверкаЗависимойКонстантыНеПройдена Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ПроверкаЗависимойКонстантыНеПройдена Тогда
			МассивКонстантУдалитьИзПроверкаПройдена.Добавить(ИмяПровереннойКонстанты);
		КонецЕсли;
		
	КонецЦикла;
	
	МассивКонстантПроверкаПройдена = ОбщегоНазначенияКлиентСервер.СократитьМассив(МассивКонстантПроверкаПройдена, МассивКонстантУдалитьИзПроверкаПройдена);
	
КонецПроцедуры

#КонецОбласти

#Область ИспользуетсяИнкассация

Функция ТаблицаЗапросовИспользоватьИнкассацию()
	
	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ИмяДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ВидыОпераций");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "РасходныйКассовыйОрдер";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("РасходныйКассовыйОрдер", Истина, Ложь);
	НоваяСтрока.ВидыОпераций = Новый Массив;
	НоваяСтрока.ВидыОпераций.Добавить(Перечисления.ВидыОперацийРКО.Инкассация);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПоступлениеНаРасчетныйСчет";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ПоступлениеНаРасчетныйСчет", Истина, Ложь);
	НоваяСтрока.ВидыОпераций = Новый Массив;
	НоваяСтрока.ВидыОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация);
	
	Возврат ТаблицаЗапросов;
	
КонецФункции

Функция ДокументыПрепятствующиеОтключениюИспользоватьИнкассацию()
	
	ТаблицаРезультатовЗапросов = ПустаяТаблицаДокументовПрепятствующиеОтключениюОпции();
	
	ТаблицаЗапросов = ТаблицаЗапросовИспользоватьИнкассацию();
	
	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		Запрос.УстановитьПараметр("ВидыОпераций", СтрокаТЗ.ВидыОпераций);
		
		СтрокаТаблицыДокументов = ТаблицаРезультатовЗапросов.Добавить();
		СтрокаТаблицыДокументов.ИмяДокумента = СтрокаТЗ.ИмяДокумента;
		МетаданныеДокумента = Метаданные.Документы.Найти(СтрокаТЗ.ИмяДокумента);
		СтрокаТаблицыДокументов.СинонимДокумента = МетаданныеДокумента.Синоним;
		СтрокаТаблицыДокументов.РезультатЗапроса = Запрос.Выполнить();
		
	КонецЦикла;
	
	// Отсортируем по алфавиту
	ТаблицаРезультатовЗапросов.Сортировать("СинонимДокумента");
	
	Возврат ТаблицаРезультатовЗапросов;
	
КонецФункции

#КонецОбласти

#Область ИспользуетсяДоставкаАвтотранспортом

Функция ДокументыПрепятствующиеОтключениюИспользуетсяДоставкаАвтотранспортом()

	ТаблицаРезультатовЗапросов = ПустаяТаблицаДокументовПрепятствующиеОтключениюОпции();

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	|	РеализацияТоваровУслуг.Дата КАК Дата,
	|	РеализацияТоваровУслуг.Ссылка КАК Представление
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	(РеализацияТоваровУслуг.Перевозчик <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ИЛИ РеализацияТоваровУслуг.МаркаАвтомобиля <> """"
	|			ИЛИ РеализацияТоваровУслуг.РегистрационныйЗнакАвтомобиля <> """"
	|			ИЛИ РеализацияТоваровУслуг.Водитель <> """"
	|			ИЛИ РеализацияТоваровУслуг.КраткоеНаименованиеГруза <> """"
	|			ИЛИ РеализацияТоваровУслуг.СопроводительныеДокументы <> """")
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Ссылка";
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтрокаТаблицыДокументов = ТаблицаРезультатовЗапросов.Добавить();
	СтрокаТаблицыДокументов.ИмяДокумента = Метаданные.Документы.РеализацияТоваровУслуг.Имя;
	СтрокаТаблицыДокументов.СинонимДокумента = Метаданные.Документы.РеализацияТоваровУслуг.Синоним;
	СтрокаТаблицыДокументов.РезультатЗапроса = Запрос.Выполнить();
	
	// Отсортируем по алфавиту
	ТаблицаРезультатовЗапросов.Сортировать("СинонимДокумента");
	
	Возврат ТаблицаРезультатовЗапросов;

КонецФункции

Процедура ЗаполнитьКонстантуДоставкаАвтотранспортом() Экспорт
	
	ЭтоБазоваяВерсияКонфигурации = СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации();
	
	ИспользоватьДоставкуАвтотранспортом = Константы.ИспользоватьДоставкуАвтотранспортом.СоздатьМенеджерЗначения();
	ИспользоватьДоставкуАвтотранспортом.Значение = НЕ ЭтоБазоваяВерсияКонфигурации;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ИспользоватьДоставкуАвтотранспортом);
	
КонецПроцедуры

#КонецОбласти

#Область ВедетсяУчетТаможенныхДекларацийЭкспорт

Функция ТаблицаЗапросовВедетсяУчетДекларацийЭкспорт()
	
	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ИмяДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ВидыОпераций");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ТаможеннаяДекларацияЭкспорт";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ТаможеннаяДекларацияЭкспорт", Ложь, Ложь);
	
	Возврат ТаблицаЗапросов;
	
КонецФункции

Функция ДокументыПрепятствующиеОтключениюУчетаДекларацийЭкспорт()
	
	ТаблицаРезультатовЗапросов = ПустаяТаблицаДокументовПрепятствующиеОтключениюОпции();
	
	ТаблицаЗапросов = ТаблицаЗапросовВедетсяУчетДекларацийЭкспорт();
	
	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		
		СтрокаТаблицыДокументов = ТаблицаРезультатовЗапросов.Добавить();
		СтрокаТаблицыДокументов.ИмяДокумента = СтрокаТЗ.ИмяДокумента;
		МетаданныеДокумента = Метаданные.Документы.Найти(СтрокаТЗ.ИмяДокумента);
		СтрокаТаблицыДокументов.СинонимДокумента = МетаданныеДокумента.Синоним;
		СтрокаТаблицыДокументов.РезультатЗапроса = Запрос.Выполнить();
		
	КонецЦикла;
	
	Возврат ТаблицаРезультатовЗапросов;
	
КонецФункции

#КонецОбласти

#КонецЕсли

