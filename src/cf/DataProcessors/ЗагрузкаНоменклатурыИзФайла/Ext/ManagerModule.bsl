
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура ОбработатьДанныеИзФайла(ПараметрыЗадания, АдресХранилища) Экспорт
	
	СписокКолонок = Новый Массив;
	СписокКолонок.Добавить("Уникальный идентификатор номенклатуры");
	СписокКолонок.Добавить("Наименование");
	СписокКолонок.Добавить("Артикул");
	СписокКолонок.Добавить("Единица измерения");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТипыЦенНоменклатуры.Наименование КАК ТекстЗаголовка,
	|	ТипыЦенНоменклатуры.Ссылка КАК ТипЦен,
	|	ТипыЦенНоменклатуры.ВалютаЦены КАК Валюта,
	|	""Цена, "" + ТипыЦенНоменклатуры.Наименование КАК ИмяКолонки
	|ИЗ
	|	Справочник.ТипыЦенНоменклатуры КАК ТипыЦенНоменклатуры
	|ГДЕ
	|	НЕ ТипыЦенНоменклатуры.ПометкаУдаления";
	СписокКолонокЦены = Запрос.Выполнить().Выгрузить();
		
	ДвоичныеДанные = ПараметрыЗадания.ХранилищеДанных.Получить();
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(ПараметрыЗадания.РасширениеФайла);
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	МакетЗаголовка = ПолучитьМакет("МакетЗаголовка");
	ДанныеФайла = Новый ТабличныйДокумент;
	ДанныеФайла.Прочитать(ИмяВременногоФайла);
	УдалитьФайлы(ИмяВременногоФайла);
	Область = ДанныеФайла.Область();
	Область.Разъединить();
	
	// Убираем из табличного документа пустые колонки
	ВысотаТаблицы = ДанныеФайла.ВысотаТаблицы;
	ШиринаТаблицы = ДанныеФайла.ШиринаТаблицы;
	РезультатОбработки = Новый ТабличныйДокумент;
	СоответствиеКолонок = Новый Соответствие;
	Для НомерСтроки = 1 По ВысотаТаблицы Цикл
		
		Для НомерКолонки = 1 По ШиринаТаблицы Цикл
			
			Ячейка = ДанныеФайла.Область(НомерСтроки, НомерКолонки);
			Если Не ПустаяСтрока(Ячейка.Текст) Тогда
				
				НомерКолонкиРезультатОбработки = СоответствиеКолонок.Получить(НомерКолонки);
				Если НомерКолонкиРезультатОбработки = Неопределено Тогда
					
					НомерКолонкиРезультатОбработки = СоответствиеКолонок.Количество() + 1;
					СоответствиеКолонок.Вставить(НомерКолонки, НомерКолонкиРезультатОбработки);
					
				КонецЕсли;
				РезультатОбработки.Область(НомерСтроки, НомерКолонкиРезультатОбработки).Текст = СокрЛП(Ячейка.Текст);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ВысотаТаблицы = РезультатОбработки.ВысотаТаблицы;
	ШиринаТаблицы = РезультатОбработки.ШиринаТаблицы;
	
	// Если веб-клиент, то заполняем пробелами пустые ячейки для прорисовки границ ячеек
	Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		
		Для НомерСтроки = 1 По ВысотаТаблицы Цикл
			
			Для НомерКолонки = 1 По ШиринаТаблицы Цикл
				
				Ячейка = РезультатОбработки.Область(НомерСтроки, НомерКолонки);
				Если ПустаяСтрока(Ячейка.Текст) Тогда
					
					Ячейка.Текст = " ";
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла; 
		
	КонецЕсли;
	
	// Оформляем полученный табличный документ
	Область = РезультатОбработки.Область(1, 1, ВысотаТаблицы, ШиринаТаблицы);
	Область.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Обрезать;
	Область.ШиринаКолонки	 = 20;
	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
	Область.ГраницаСверху	 = Линия;
	Область.ГраницаСнизу	 = Линия;
	Область.ГраницаСлева	 = Линия;
	Область.ГраницаСправа	 = Линия;
	Область.Отступ			 = 1;
	
	// Выводим заголовок табличного документа (гиперссылки для указания названия реквизитов
	ДанныеФайла.Очистить();
	Заголовок = МакетЗаголовка.ПолучитьОбласть("Заголовок");

	ВсеПоляОпределены = Ложь;
	НайденоЦен = 0;
	ТипЦен = Неопределено;
	Валюта = Неопределено;
	Цвета = Новый Структура;
	Цвета.Вставить("Красный", ЦветаСтиля.НезаполненныйРеквизит);
	Цвета.Вставить("Синий", ЦветаСтиля.ГиперссылкаТабличнойЧасти);

	Для НомерКолонки = 1 По ШиринаТаблицы Цикл
		
		ТекОбласть = РезультатОбработки.Область(1, НомерКолонки);
		
		ТекстЗаголовка = "";
		ЦветТекста = Цвета.Синий;
		
		НайденнаяКолонка = СписокКолонок.Найти(ТекОбласть.Текст);
		Если НайденнаяКолонка <> Неопределено Тогда
			ТекстЗаголовка = ТекОбласть.Текст;
			СписокКолонок.Удалить(НайденнаяКолонка);
		Иначе
			КолонкаЦена = СписокКолонокЦены.Найти(ТекОбласть.Текст, "ТекстЗаголовка");
			Если КолонкаЦена <> Неопределено Тогда
				Если НайденоЦен = 0 Тогда
					// Тип цен установим по первой найденной цене
					ТекстЗаголовка = КолонкаЦена.ИмяКолонки;
					ТипЦен = КолонкаЦена.ТипЦен;
					Валюта = КолонкаЦена.Валюта;
				КонецЕсли;
				НайденоЦен = НайденоЦен + 1;
			КонецЕсли;
		КонецЕсли;
		
		Если ТекстЗаголовка = "" Тогда
			ТекстЗаголовка = "Укажите реквизит";
			ЦветТекста = Цвета.Красный;
		КонецЕсли;
		
		ИмяПараметра = "ИмяРеквизита" + НомерКолонки;
		Заголовок.ТекущаяОбласть.Параметр = ИмяПараметра;
		Заголовок.Параметры[ИмяПараметра] = ТекстЗаголовка;
		Заголовок.ТекущаяОбласть.ЦветТекста	 = ЦветТекста;
		
		Если НомерКолонки = 1 Тогда
			
			ДанныеФайла.Вывести(Заголовок);
			
		Иначе
			
			ДанныеФайла.Присоединить(Заголовок);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СписокКолонок.Количество() = 0 И НайденоЦен = 1 Тогда
		// Структура колонок полностью соответствует стандарту обработки "Выгрузка номенклатуры и цен"
		ТекОбласть = РезультатОбработки.Область("R1:R2");
		РезультатОбработки.УдалитьОбласть(ТекОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЕсли;
	
	ДанныеФайла.Вывести(РезультатОбработки);
	ДанныеФайла.ФиксацияСверху = 1;
	ДанныеФайла.ФиксацияСлева = 0;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ДанныеФайла", Новый ХранилищеЗначения(ДанныеФайла, Новый СжатиеДанных(9)));
	СтруктураВозврата.Вставить("ТипЦен", ТипЦен);
	СтруктураВозврата.Вставить("Валюта", Валюта);
	
	ПоместитьВоВременноеХранилище(СтруктураВозврата, АдресХранилища);

КонецПроцедуры

Процедура ПолучитьТаблицуДанныхТоваров(ПараметрыЗадания, АдресХранилища) Экспорт

	// Получаем соответствие номера колонки и его заголовка
	ДанныеФайла			 = ПараметрыЗадания.ХранилищеДанных.Получить();
	ШиринаТаблицы		 = ДанныеФайла.ШиринаТаблицы;
	ЕдиницаИзмерения	 = ПараметрыЗадания.ЕдиницаИзмерения;
	СтавкаНДС			 = ПараметрыЗадания.СтавкаНДС;
	
	СоответствиеКолонок = Новый Соответствие;
	Для НомерКолонки = 1 По ШиринаТаблицы Цикл
		
		Ячейка = ДанныеФайла.Область(1, НомерКолонки);
		ТекстЯчейки = Ячейка.Текст;
		Если СтрНайти(ТекстЯчейки, "Цена") > 0 Тогда
			ТекстЯчейки = "Цена";
		КонецЕсли;
		СоответствиеКолонок.Вставить(ТекстЯчейки, НомерКолонки);
		
	КонецЦикла;
	
	ЕстьКолонкаСтавкаНДС = 			СоответствиеКолонок.Получить(НСтр("ru = 'Ставка НДС'")) <> Неопределено;
	ЕстьКолонкаЕдиницаИзмерения = 	СоответствиеКолонок.Получить(НСтр("ru = 'Единица измерения'")) <> Неопределено;
	
	// Производим сериализацию данных, поиск номенклатуры, заполняем таб. часть.
	ВысотаТаблицы = ДанныеФайла.ВысотаТаблицы;
	РеквизитыОбработки = Метаданные.Обработки.ЗагрузкаНоменклатурыИзФайла.ТабличныеЧасти.Товары.Реквизиты;
	Товары = Новый ТаблицаЗначений;
	Товары.Колонки.Добавить("Номенклатура",			 РеквизитыОбработки.Номенклатура.Тип);
	Товары.Колонки.Добавить("Цена",					 РеквизитыОбработки.Цена.Тип);
	Товары.Колонки.Добавить("ЕдиницаИзмерения",		 РеквизитыОбработки.ЕдиницаИзмерения.Тип);
	Товары.Колонки.Добавить("СтавкаНДС",			 РеквизитыОбработки.СтавкаНДС.Тип);
	Товары.Колонки.Добавить("НомерСтроки",			 ОбщегоНазначения.ОписаниеТипаЧисло(15, 0, ДопустимыйЗнак.Неотрицательный));
	Товары.Колонки.Добавить("Статус",				 РеквизитыОбработки.Статус.Тип);
	Товары.Колонки.Добавить("Наименование",			 РеквизитыОбработки.Наименование.Тип);
	Товары.Колонки.Добавить("Артикул",				 РеквизитыОбработки.Артикул.Тип);
	Товары.Колонки.Добавить("Представление",		 РеквизитыОбработки.Представление.Тип);
	Товары.Колонки.Добавить("НаименованиеПолное",	 РеквизитыОбработки.НаименованиеПолное.Тип);
	Товары.Колонки.Добавить("СписокНоменклатуры",	 Новый ОписаниеТипов("СписокЗначений"));
	Товары.Индексы.Добавить("НомерСтроки");
	Счетчик = 0;
	СоответствиеЕдиницИзмерения = Новый Соответствие;
	Для НомерСтроки = 2 По ВысотаТаблицы Цикл
		
		// Наименование
		Наименование = СокрЛП(ДанныеФайла.Область(НомерСтроки, СоответствиеКолонок.Получить("Наименование")).Текст);
		Если ПустаяСтрока(Наименование) Тогда
			
			Продолжить; // пропускаем строки с пустым наименованием номенклатуры
			
		КонецЕсли;
		СтрокаТаблицы = Товары.Добавить();
		Счетчик = Счетчик + 1;
		СтрокаТаблицы.НомерСтроки = Счетчик;
		СтрокаТаблицы.Наименование = Наименование;
		СтрокаТаблицы.НаименованиеПолное = Наименование;
		
		// УИД
		Если СоответствиеКолонок.Получить("УИД") <> Неопределено Тогда
			
			СтрокаТаблицы.УИД = СокрЛП(ДанныеФайла.Область(НомерСтроки, СоответствиеКолонок.Получить("УИД")).Текст);
			Попытка
				УИДНоменклатуры = Новый УникальныйИдентификатор(СтрокаТаблицы.УИД);
				НоменкалтураПоУИД = Справочники.Номенклатура.ПолучитьСсылку(УИДНоменклатуры);
				Если ЗначениеЗаполнено(НоменкалтураПоУИД) Тогда
					СтрокаТаблицы.Номенклатура = НоменкалтураПоУИД;
				КонецЕсли;
			Исключение
			КонецПопытки
			
		КонецЕсли;
		
		// Артикул
		Если СоответствиеКолонок.Получить("Артикул") <> Неопределено Тогда
			
			СтрокаТаблицы.Артикул = СокрЛП(ДанныеФайла.Область(НомерСтроки, СоответствиеКолонок.Получить("Артикул")).Текст);
		
		КонецЕсли;
		
		// Единица измерения
		Если СоответствиеКолонок.Получить("Единица измерения") <> Неопределено Тогда
			
			СтрЕдиницаИзмерения = СокрЛП(ДанныеФайла.Область(НомерСтроки, СоответствиеКолонок.Получить("Единица измерения")).Текст);
			Если Не ПустаяСтрока(СтрЕдиницаИзмерения) Тогда
				
				СтрокаТаблицы.ЕдиницаИзмерения = ПолучитьЕдиницуИзмерения(СтрЕдиницаИзмерения, СоответствиеЕдиницИзмерения);
				
			КонецЕсли;
			СтрокаТаблицы.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(СтрокаТаблицы.ЕдиницаИзмерения), СтрокаТаблицы.ЕдиницаИзмерения, ЕдиницаИзмерения);
			
		КонецЕсли;
		
		// Ставка НДС    -
		Если СоответствиеКолонок.Получить("Ставка НДС") <> Неопределено Тогда
			
			СтрСтавкаНДС = СокрЛП(ДанныеФайла.Область(НомерСтроки, СоответствиеКолонок.Получить("Ставка НДС")).Текст);
			Если Не ПустаяСтрока(СтрСтавкаНДС) Тогда
				
				СтрокаТаблицы.СтавкаНДС = ПолучитьСтавкуНДСПеречислением(СтрСтавкаНДС);
				
			КонецЕсли;
			СтрокаТаблицы.СтавкаНДС = ?(ЗначениеЗаполнено(СтрокаТаблицы.СтавкаНДС), СтрокаТаблицы.СтавкаНДС, СтавкаНДС);
		
		КонецЕсли;
		
		// Цена
		Если СоответствиеКолонок.Получить("Цена") <> Неопределено Тогда
			
			СтрЦена = СокрЛП(ДанныеФайла.Область(НомерСтроки, СоответствиеКолонок.Получить("Цена")).Текст);
			Если Не ПустаяСтрока(СтрЦена) Тогда
				
				СтрокаТаблицы.Цена = ПолучитьЦенуИзСтроки(СтрЦена);
				
			КонецЕсли;
		
		КонецЕсли;
		
		СтрокаТаблицы.Статус = СтатусНовые();
		СтрокаТаблицы.Представление = НСтр("ru = 'Новый: '") + СтрокаТаблицы.Наименование + ", " + СтрокаТаблицы.Артикул;
		
	КонецЦикла;
	КоличествоСтрокТаблицы = Товары.Количество();
	ПроизвестиПоискНоменклатуры(Товары, ЕстьКолонкаЕдиницаИзмерения);
	
	Результат = Новый Структура;
	Результат.Вставить("КоличествоСтрокТаблицы", КоличествоСтрокТаблицы);
	Результат.Вставить("ЕстьКолонкаСтавкаНДС", ЕстьКолонкаСтавкаНДС);
	Результат.Вставить("ЕстьКолонкаЕдиницаИзмерения", ЕстьКолонкаЕдиницаИзмерения);
	Результат.Вставить("Товары", Товары);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Процедура ЗагрузитьДанныеФайла(ПараметрыЗадания, АдресХранилища) Экспорт
	
	Родитель					 = ПараметрыЗадания.Родитель;
	ВидНоменклатуры				 = ПараметрыЗадания.ВидНоменклатуры;
	ЭтоУслуга					 = ?(ЗначениеЗаполнено(ВидНоменклатуры),
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидНоменклатуры, "Услуга"),
		Ложь);
	НоменклатурнаяГруппа		 = ПараметрыЗадания.НоменклатурнаяГруппа;
	ЕдиницаИзмерения			 = ПараметрыЗадания.ЕдиницаИзмерения;
	СтавкаНДС					 = ПараметрыЗадания.СтавкаНДС;
	ТипЦен						 = ПараметрыЗадания.ТипЦен;
	ДатаУстановкиЦен			 = ПараметрыЗадания.ДатаУстановкиЦен;
	Валюта						 = ПараметрыЗадания.Валюта;
	Товары						 = ПараметрыЗадания.Товары;
	ЕстьКолонкаЕдиницаИзмерения	 = ПараметрыЗадания.ЕстьКолонкаЕдиницаИзмерения;
	ЕстьКолонкаСтавкаНДС		 = ПараметрыЗадания.ЕстьКолонкаСтавкаНДС;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Таблица.Номенклатура,
	               |	Таблица.Артикул,
	               |	Таблица.Наименование,
	               |	Таблица.Цена,
	               |	Таблица.Статус,
	               |	Таблица.ЕдиницаИзмерения,
	               |	Таблица.СтавкаНДС,
	               |	Таблица.НаименованиеПолное
	               |ПОМЕСТИТЬ Таблица
	               |ИЗ
	               |	&Таблица КАК Таблица
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЦеныНоменклатуры.Регистратор,
	               |	ЦеныНоменклатуры.Номенклатура КАК Номенклатура
	               |ПОМЕСТИТЬ ЦеныНоменклатуры
	               |ИЗ
	               |	РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
	               |ГДЕ
	               |	ЦеныНоменклатуры.ТипЦен = &ТипЦен
	               |	И ЦеныНоменклатуры.Период = &Период
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЦеныНоменклатуры.Регистратор КАК Регистратор,
	               |	Таблица.Номенклатура,
	               |	Таблица.Артикул,
	               |	Таблица.Наименование,
	               |	Таблица.Цена,
	               |	Таблица.Статус,
	               |	Таблица.ЕдиницаИзмерения,
	               |	Таблица.СтавкаНДС,
	               |	Таблица.НаименованиеПолное
	               |ИЗ
	               |	Таблица КАК Таблица
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныНоменклатуры КАК ЦеныНоменклатуры
	               |		ПО Таблица.Номенклатура = ЦеныНоменклатуры.Номенклатура
	               |ИТОГИ ПО
	               |	Регистратор";
	Запрос.УстановитьПараметр("Период", ДатаУстановкиЦен);
	Запрос.УстановитьПараметр("ТипЦен", ТипЦен);
	Запрос.УстановитьПараметр("Таблица", Товары);
	ВыборкаРегистратор = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Ошибки = Неопределено;
	Пока ВыборкаРегистратор.Следующий() Цикл
		
		ИскатьНоменклатуру = Истина;
		Если ЗначениеЗаполнено(ВыборкаРегистратор.Регистратор) Тогда
			
			Документ = ВыборкаРегистратор.Регистратор.ПолучитьОбъект();
			
		Иначе
			
			Документ = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
			Документ.Дата								 = ДатаУстановкиЦен;
			Документ.НеПроводитьНулевыеЗначения			 = Истина;
			Документ.ТипЦен								 = ТипЦен;
			Документ.Комментарий						 = НСтр("ru = '#Загружен из файла.'");
			Документ.Ответственный						 = Пользователи.ТекущийПользователь();
			ИскатьНоменклатуру = Ложь;
			
		КонецЕсли;
		ВыборкаНоменклатура = ВыборкаРегистратор.Выбрать();
		Пока ВыборкаНоменклатура.Следующий() Цикл
			
			Если ЗначениеЗаполнено(ВыборкаНоменклатура.Номенклатура) Тогда
				
				Номенклатура = ВыборкаНоменклатура.Номенклатура;
				
			Иначе
				
				НоменклатураОбъект							 = Справочники.Номенклатура.СоздатьЭлемент();
				НоменклатураОбъект.Наименование				 = ВыборкаНоменклатура.Наименование;
				НоменклатураОбъект.НаименованиеПолное		 = ВыборкаНоменклатура.НаименованиеПолное;
				НоменклатураОбъект.Артикул					 = ВыборкаНоменклатура.Артикул;
				НоменклатураОбъект.ВидНоменклатуры			 = ВидНоменклатуры;
				НоменклатураОбъект.Родитель					 = Родитель;
				НоменклатураОбъект.НоменклатурнаяГруппа		 = НоменклатурнаяГруппа;
				НоменклатураОбъект.СтавкаНДС				 = ?(ЕстьКолонкаСтавкаНДС, ВыборкаНоменклатура.СтавкаНДС, СтавкаНДС);
				НоменклатураОбъект.ЕдиницаИзмерения			 = ?(ЕстьКолонкаЕдиницаИзмерения, ВыборкаНоменклатура.ЕдиницаИзмерения, ЕдиницаИзмерения);
				НоменклатураОбъект.Услуга 					 = ЭтоУслуга;
				
				Попытка
				
					НоменклатураОбъект.Записать();
					
				Исключение
					
					ШаблонСообщения = НСтр("ru = 'Не удалось записать номенклатуру ""%1""
                                            |%2'");
				
					ТекстСообщения = СтрШаблон(
						ШаблонСообщения, 
						ВыборкаНоменклатура.Наименование,
						КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "", ТекстСообщения,"");
					
					ТекстСообщения = СтрШаблон(
						ШаблонСообщения, 
						ВыборкаНоменклатура.Наименование,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
					ОписаниеОшибки = ИнформацияОбОшибке();
					ЗаписьЖурналаРегистрации(
						НСтр("ru = 'Создание номенклатуры'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
						УровеньЖурналаРегистрации.Ошибка,
						Метаданные.Справочники.Номенклатура,, 
						ОписаниеОшибки.Описание);
					
					Прервать;
					
				КонецПопытки;
				Номенклатура = НоменклатураОбъект.Ссылка;
				ИскатьНоменклатуру = Ложь;
				
			КонецЕсли;
			Если ИскатьНоменклатуру Тогда
				
				СтрокаТаблицы = Документ.Товары.Найти(Номенклатура, "Номенклатура");
				Если СтрокаТаблицы = Неопределено Тогда
					
					СтрокаТаблицы = Документ.Товары.Добавить();
					
				КонецЕсли;
				
			Иначе
				
				СтрокаТаблицы = Документ.Товары.Добавить();
				
			КонецЕсли;
			СтрокаТаблицы.Номенклатура = Номенклатура;
			СтрокаТаблицы.Валюта = Валюта;
			СтрокаТаблицы.Цена = ВыборкаНоменклатура.Цена;
			
		КонецЦикла;
		
		Попытка
			
			Документ.Записать(РежимЗаписиДокумента.Проведение);
			
		Исключение
			
			ТекстСообщения = "";
			Если ДатыЗапретаИзменения.ИзменениеЗапрещено(Документ,, ТекстСообщения) Тогда
				
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "", ТекстСообщения, "");
				
			Иначе
			
				ШаблонСообщения = НСтр("ru = 'Не удалось %1 документ для установки цен типа ""%2""
					|%3'");
				
				ТекстСообщения = СтрШаблон(
					ШаблонСообщения,
					?(ЗначениеЗаполнено(ВыборкаРегистратор.Регистратор), "записать", "создать"),
					ТипЦен, 
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "", ТекстСообщения, "");
				
				ОписаниеОшибки = ИнформацияОбОшибке();
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Установка цен номенклатуры'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Документы.УстановкаЦенНоменклатуры,
					?(ЗначениеЗаполнено(ВыборкаРегистратор.Регистратор), ВыборкаРегистратор.Регистратор, ""), 
					ОписаниеОшибки.Описание);
					
			КонецЕсли;
			
			Прервать;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибки", Ошибки);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Процедура УдалитьВсеНенужныеСтрокиТаблицы(ПараметрыЗадания, АдресХранилища) Экспорт
	
	ТабДокумент = ПараметрыЗадания.ХранилищеДанных.Получить();
	НайденыНенужныеСтроки = ПараметрыЗадания.НайденыНенужныеСтроки;
	
	ИнформацияОТаблице = АнализДанных(ТабДокумент);
	ИнформацияОЯчейках = ИнформацияОТаблице.ИнформацияОЯчейках;
	ИнформацияОЯчейкахКЗагрузке = ИнформацияОТаблице.ИнформацияОЯчейкахКЗагрузке;
	ВГраница = ИнформацияОЯчейках.ВГраница();
	ШиринаТаблицы = ТабДокумент.ШиринаТаблицы;
	Для Н = 0 По ВГраница Цикл
		
		Индекс = ВГраница - Н;
		ЭлементМассива = ИнформацияОЯчейках[Индекс];
		Если ИнформацияОЯчейкахКЗагрузке.Найти(ЭлементМассива) = Неопределено Тогда
			
			НомерСтроки = Индекс + 2;
			Область = ТабДокумент.Область(НомерСтроки,, НомерСтроки);
			ТабДокумент.УдалитьОбласть(Область, ТипСмещенияТабличногоДокумента.ПоВертикали);
			НайденыНенужныеСтроки = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НайденыНенужныеСтроки Тогда
		
		УдалитьПустыеКолонки(ТабДокумент);
		
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("НайденыНенужныеСтроки", НайденыНенужныеСтроки);
	Результат.Вставить("ХранилищеДанных", Новый ХранилищеЗначения(ТабДокумент, Новый СжатиеДанных(9)));
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыФункции

Процедура ПроизвестиПоискНоменклатуры(Таблица, ЕстьКолонкаЕдиницаИзмерения)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.Номенклатура КАК НоменклатураПоУИД,
	|	Таблица.Наименование,
	|	Таблица.НаименованиеПолное,
	|	Таблица.Артикул,
	|	Таблица.ЕдиницаИзмерения,
	|	Таблица.НомерСтроки
	|ПОМЕСТИТЬ ТаблицаДляПроверки
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.НоменклатураПоУИД,
	|	Таблица.Наименование,
	|	Таблица.НаименованиеПолное,
	|	Таблица.Артикул,
	|	Таблица.ЕдиницаИзмерения,
	|	Таблица.НомерСтроки,
	|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПоУИД,
	|	СправочникНоменклатура.СтавкаНДС КАК СтавкаНДСПоУИД,
	|	ВЫБОР
	|		КОГДА СправочникНоменклатура.Наименование = Таблица.Наименование
	|				И СправочникНоменклатура.НаименованиеПолное = Таблица.НаименованиеПолное
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НайденоПоУИД
	|ПОМЕСТИТЬ Таблица
	|ИЗ
	|	ТаблицаДляПроверки КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО (СправочникНоменклатура.Ссылка = Таблица.НоменклатураПоУИД)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НайденоПоУИД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	ЕСТЬNULL(НоменклатураПолноеНаименование.Ссылка, НоменклатураКраткоеНаименование.Ссылка) КАК Номенклатура,
	|	ЕСТЬNULL(НоменклатураПолноеНаименование.ЕдиницаИзмерения, НоменклатураКраткоеНаименование.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(НоменклатураПолноеНаименование.СтавкаНДС, НоменклатураКраткоеНаименование.СтавкаНДС) КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НоменклатураКраткоеНаименование.НаименованиеПолное, """") = ЕСТЬNULL(НоменклатураПолноеНаименование.НаименованиеПолное, """")
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА Таблица.Артикул = ЕСТЬNULL(НоменклатураПолноеНаименование.Артикул, НоменклатураКраткоеНаименование.Артикул)
	|			ТОГДА 2
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА Таблица.ЕдиницаИзмерения = ЕСТЬNULL(НоменклатураПолноеНаименование.ЕдиницаИзмерения, НоменклатураКраткоеНаименование.ЕдиницаИзмерения)
	|			ТОГДА 2
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВесВыборки
	|ИЗ
	|	Таблица КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураКраткоеНаименование
	|		ПО Таблица.Наименование = НоменклатураКраткоеНаименование.Наименование
	|			И (НЕ НоменклатураКраткоеНаименование.ЭтоГруппа)
	|			И (НЕ НоменклатураКраткоеНаименование.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураПолноеНаименование
	|		ПО Таблица.НаименованиеПолное = НоменклатураПолноеНаименование.НаименованиеПолное
	|			И (НЕ НоменклатураПолноеНаименование.ЭтоГруппа)
	|			И (НЕ НоменклатураПолноеНаименование.ПометкаУдаления)
	|ГДЕ
	|	Таблица.НайденоПоУИД = ЛОЖЬ
	|	И (НЕ НоменклатураКраткоеНаименование.Ссылка ЕСТЬ NULL 
	|			ИЛИ НЕ НоменклатураПолноеНаименование.Ссылка ЕСТЬ NULL )
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.НомерСтроки,
	|	Таблица.НоменклатураПоУИД,
	|	Таблица.ЕдиницаИзмеренияПоУИД,
	|	Таблица.СтавкаНДСПоУИД,
	|	0
	|ИЗ
	|	Таблица КАК Таблица
	|ГДЕ
	|	Таблица.НайденоПоУИД = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	ВесВыборки УБЫВ
	|ИТОГИ ПО
	|	НомерСтроки,
	|	ВесВыборки";
	
	Запрос.УстановитьПараметр("Таблица", Таблица);
	Запрос.УстановитьПараметр("СтатусНовые", СтатусНовые());
	
	ВыборкаНомерСтроки = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаНомерСтроки.Следующий() Цикл
		
		ВыборкаВесСтроки = ВыборкаНомерСтроки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ВыборкаВесСтроки.Следующий();
		ВыборкаНоменклатура = ВыборкаВесСтроки.Выбрать();
		
		СтрокаТаблицы = Таблица[ВыборкаНомерСтроки.НомерСтроки - 1];
		ОбработкаВыборкиНоменклатуры(СтрокаТаблицы, ВыборкаНоменклатура);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаВыборкиНоменклатуры(СтрокаТаблицы, ВыборкаНоменклатура)

	ВыборкаКоличество = ВыборкаНоменклатура.Количество();
	Если ВыборкаКоличество = 1 Тогда // найдено 1 значение
		
		СтрокаТаблицы.Статус = СтатусНайденные();
		ВыборкаНоменклатура.Следующий();
		СтрокаТаблицы.Номенклатура = ВыборкаНоменклатура.Номенклатура;
		РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТаблицы.Номенклатура, "СтавкаНДС, ЕдиницаИзмерения");
		СтрокаТаблицы.ЕдиницаИзмерения = РеквизитыНоменклатуры.ЕдиницаИзмерения;
		СтрокаТаблицы.СтавкаНДС = РеквизитыНоменклатуры.СтавкаНДС;
		
	Иначе // дубли
		
		СтрокаТаблицы.Статус = СтатусДубли();
		Пока ВыборкаНоменклатура.Следующий() Цикл
			
			СтрокаТаблицы.СписокНоменклатуры.Добавить(ВыборкаНоменклатура.Номенклатура);
			СтрокаТаблицы.Представление = НСтр("ru = 'Найдено '") + ВыборкаКоличество + ": "
				+ СтрокаТаблицы.Наименование + ", " + СтрокаТаблицы.Артикул;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры 

Функция ПолучитьСтавкуНДСПеречислением(ПредставлениеСтавкиНДС)
	
	ЗначениеНДС = Неопределено;
	
	Если СтрНайти(ВРЕГ(ПредставлениеСтавкиНДС), "БЕЗ НДС") > 0 Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.БезНДС;
		
	ИначеЕсли ПредставлениеСтавкиНДС = "0" ИЛИ ПредставлениеСтавкиНДС = "0%" Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.НДС0;
		
	ИначеЕсли СтрНайти(ПредставлениеСтавкиНДС, "10") > 0 Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.НДС10;
		
	ИначеЕсли СтрНайти(ПредставлениеСтавкиНДС, "20") > 0 Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.НДС20;
		
	ИначеЕсли СтрНайти(ПредставлениеСтавкиНДС, "18") > 0 Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.НДС18;
	
	КонецЕсли;
	
	Возврат ЗначениеНДС;
	
КонецФункции

Функция ПолучитьЕдиницуИзмерения(ПредставлениеЕдиницыИзмерения, СоответствиеЕдиницИзмерения)
	
	ЗначениеЕдиницы = СоответствиеЕдиницИзмерения.Получить(ПредставлениеЕдиницыИзмерения);
	Если ЗначениеЕдиницы = Неопределено Тогда
	
		НаименованиеЕдиницы = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими(",.", ПредставлениеЕдиницыИзмерения, "");
		ЗначениеЕдиницы = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(НаименованиеЕдиницы, Истина);
		Если ЗначениеЗаполнено(ЗначениеЕдиницы) Тогда
			
			СоответствиеЕдиницИзмерения.Вставить(ПредставлениеЕдиницыИзмерения, ЗначениеЕдиницы);
			Возврат ЗначениеЕдиницы;
			
		КонецЕсли;
		
		// Если не находим по наименованию, подбираем по классификатору.
		МакетКлассификатора = Справочники.КлассификаторЕдиницИзмерения.ПолучитьМакет("КлассификаторЕдиницИзмерения");
		КолонкаЧисловогоКода = МакетКлассификатора.Области.КодЧисловой.Лево;
		Результат = МакетКлассификатора.НайтиТекст(НаименованиеЕдиницы,, МакетКлассификатора.Области.НаименованиеКраткое, Истина, Истина, Истина, Истина);
		Если Результат <> Неопределено Тогда
			
			НомерСтроки = Результат.Верх;
			КодЕдиницыИзмерения = МакетКлассификатора.Область(НомерСтроки, КолонкаЧисловогоКода).Текст;
			ЗначениеЕдиницы = Справочники.КлассификаторЕдиницИзмерения.ЕдиницаИзмеренияПоКоду(КодЕдиницыИзмерения);
			СоответствиеЕдиницИзмерения.Вставить(ПредставлениеЕдиницыИзмерения, ЗначениеЕдиницы);
			
			Возврат ЗначениеЕдиницы;
			
		КонецЕсли;
		
	Иначе
		
		Возврат ЗначениеЕдиницы;
		
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции

// Для преобразования строки в число, выделяем цифры из строки
Функция ПолучитьЦенуИзСтроки(СтрЦена)
	
	СтрЦена = НРег(СтрЦена);
	ДлинаСтроки = СтрДлина(СтрЦена);
	СтрРезультат = "";	
	Для Н = 1 По ДлинаСтроки Цикл
		
		СимволСтроки = Сред(СтрЦена, Н, 1);
		Если (КодСимвола(СимволСтроки) >= 48 И КодСимвола(СимволСтроки) <= 57)
			ИЛИ СимволСтроки = "." ИЛИ СимволСтроки = "," Тогда
			
			СтрРезультат = СтрРезультат + СимволСтроки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Убираем лишние символы перед числом
	Пока (СтрНачинаетсяС(СтрРезультат, ",") ИЛИ СтрНачинаетсяС(СтрРезультат, "."))
		И СтрДлина(СтрРезультат) > 1 Цикл
		
		СтрРезультат = Сред(СтрРезультат, 2);
		
	КонецЦикла;
	
	// Убираем лишние символы после числа
	Пока (СтрЗаканчиваетсяНа(СтрРезультат, ",") ИЛИ СтрЗаканчиваетсяНа(СтрРезультат, "."))
		И СтрДлина(СтрРезультат) > 1 Цикл
		
		СтрРезультат = Лев(СтрРезультат, СтрДлина(СтрРезультат) - 1);
		
	КонецЦикла;
	
	Возврат СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрРезультат);

КонецФункции

Функция СтатусНовые()

	Возврат 2;

КонецФункции

Функция СтатусДубли()

	Возврат 1;

КонецФункции

Функция СтатусНайденные()

	Возврат 0;

КонецФункции

Функция АнализДанных(ТабДокумент)
	
	ВысотаТаблицы = ТабДокумент.ВысотаТаблицы;
	ШиринаТаблицы = ТабДокумент.ШиринаТаблицы;
	
	// Получаем массив информации о заполненности ячеек
	// 0 - ячейка пустая, 1 - ячейка заполнена
	ТаблицаАнализа = Новый ТаблицаЗначений;
	ТаблицаАнализа.Колонки.Добавить("СтрокаИнформации", Новый ОписаниеТипов("Строка"));
	ТаблицаАнализа.Колонки.Добавить("КоличествоПохожих", ОбщегоНазначения.ОписаниеТипаЧисло(15, 0, ДопустимыйЗнак.Неотрицательный));
	Для НомерСтроки = 2 По ВысотаТаблицы Цикл // пропускаем первую строку (заголовки колонок)
		
		СтрокаИнформации = "";
		Для НомерКолонки = 1 По ШиринаТаблицы Цикл
			
			Ячейка = ТабДокумент.Область(НомерСтроки, НомерКолонки);
			СтрокаИнформации = СтрокаИнформации + ?(ПустаяСтрока(Ячейка.Текст), "0", "1");
			
		КонецЦикла;
		СтрокаТаблицы = ТаблицаАнализа.Добавить();
		СтрокаТаблицы.СтрокаИнформации = СтрокаИнформации;
		СтрокаТаблицы.КоличествоПохожих = 1;
		
	КонецЦикла;
	ИнформацияОЯчейках = ТаблицаАнализа.ВыгрузитьКолонку("СтрокаИнформации");
	ТаблицаАнализа.Свернуть("СтрокаИнформации", "КоличествоПохожих");
	ТаблицаАнализа.Сортировать("КоличествоПохожих УБЫВ");
	
	// Получаем массив строк, содержащих информацию к загрузке
	ИнформацияОЯчейкахКЗагрузке = Новый Массив;
	МинКолОдинаковыхСтруктур = 3;
	МинЧислоЗаполненныхЯчеек = 2;
	Для Каждого СтрокаТаблицы Из ТаблицаАнализа Цикл
		
		Если СтрокаТаблицы.КоличествоПохожих < МинКолОдинаковыхСтруктур Тогда
			
			Продолжить;
			
		ИначеЕсли СтрЧислоВхождений(СтрокаТаблицы.СтрокаИнформации, "1") < МинЧислоЗаполненныхЯчеек Тогда
			
			Продолжить;
			
		КонецЕсли;
		ИнформацияОЯчейкахКЗагрузке.Добавить(СтрокаТаблицы.СтрокаИнформации);
		
	КонецЦикла;
	
	ИнформацияОТаблице = Новый Структура;
	ИнформацияОТаблице.Вставить("ИнформацияОЯчейках", ИнформацияОЯчейках);
	ИнформацияОТаблице.Вставить("ИнформацияОЯчейкахКЗагрузке", ИнформацияОЯчейкахКЗагрузке);
	
	Возврат ИнформацияОТаблице;
	
КонецФункции

Процедура УдалитьПустыеКолонки(ТабДокумент)
	
	ВысотаТаблицы = ТабДокумент.ВысотаТаблицы;
	ШиринаТаблицы = ТабДокумент.ШиринаТаблицы;
	МассивНеПустыхКолонок = Новый Массив;
	Для НомерКолонки = 1 По ШиринаТаблицы Цикл
		
		МассивНеПустыхКолонок.Добавить(0);
		
	КонецЦикла;
	
	Для НомерКолонки = 1 По ШиринаТаблицы Цикл
		
		ЕстьЗаполненнаяЯчейка = Ложь;
		Для НомерСтроки = 2 по ВысотаТаблицы Цикл
			
			Ячейка = ТабДокумент.Область(НомерСтроки, НомерКолонки);
			Если Не ПустаяСтрока(Ячейка.Текст) Тогда
				
				МассивНеПустыхКолонок[НомерКолонки - 1] = 1;
				ЕстьЗаполненнаяЯчейка = Истина;
				
				Прервать;
				
			КонецЕсли;
				
		КонецЦикла;
		
	КонецЦикла;
	
	ВГраница = МассивНеПустыхКолонок.ВГраница();
	Для Н = 0 по ВГраница Цикл
		
		Индекс = ВГраница - Н;
		Если МассивНеПустыхКолонок[Индекс] = 0 Тогда
			
			НомерКолонки = Индекс + 1;
			Область = ТабДокумент.Область(, НомерКолонки,, НомерКолонки);
			ТабДокумент.УдалитьОбласть(Область, ТипСмещенияТабличногоДокумента.ПоВертикали);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли