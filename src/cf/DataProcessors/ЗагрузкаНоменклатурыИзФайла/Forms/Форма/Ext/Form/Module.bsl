&НаКлиенте
Перем ПараметрыОбработчикаОжидания, ФормаДлительнойОперации;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Цвета = Новый Структура;
	Цвета.Вставить("Красный", ЦветаСтиля.НезаполненныйРеквизит);
	Цвета.Вставить("Синий", ЦветаСтиля.ГиперссылкаТабличнойЧасти);
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ЗначениеЗаполнено(АдресФайла) Тогда
		
		Отказ = Истина;
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран файл для загрузки. Откройте обработку из формы списка номенклатуры 
			|с помощью команды ""Номенклатуры и цены""-""Загрузить..."".'"));
		Возврат;
		
	КонецЕсли;
	
	ТабличнаяЧастьИзменена = Ложь;
	ПодключитьОбработчикОжидания("Подключаемый_ПодготовитьТабличныйДокумент", 0.1, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ОтборТаблицы = 0;
	Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("Статус", Неопределено);
	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		
		Если ЕстьКолонкаЕдиницаИзмерения Тогда
			
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.ЕдиницаИзмерения) Тогда
				
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", "Единица");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", СтрокаТаблицы.НомерСтроки, "ЕдиницаИзмерения"),, Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЕстьКолонкаСтавкаНДС Тогда
			
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.СтавкаНДС) Тогда
				
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", "% НДС");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", СтрокаТаблицы.НомерСтроки, "СтавкаНДС"),, Отказ);
			
			КонецЕсли;
			
		КонецЕсли;
				
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) И ПустаяСтрока(СтрокаТаблицы.Наименование) Тогда
			
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", "Номенклатура");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", СтрокаТаблицы.НомерСтроки, "Номенклатура"),, Отказ);
			
		КонецЕсли;
		
		Если СтрокаТаблицы.Статус = СтатусДубли() Тогда // обнаружены дубли
			
			ТекстСообщения = НСтр("ru = 'Найдено несколько позиций номенклатуры с совпадающими реквизитами. Двойным кликом выберите одну из списка.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", СтрокаТаблицы.НомерСтроки, "НомерСтроки"),, Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Таблица.Номенклатура,
	               |	Таблица.НомерСтроки
	               |ПОМЕСТИТЬ Таблица
	               |ИЗ
	               |	&Таблица КАК Таблица
	               |ГДЕ
	               |	Таблица.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Таблица.Номенклатура,
	               |	МАКСИМУМ(Таблица.НомерСтроки) КАК НомерСтрокиМакс,
	               |	ПРЕДСТАВЛЕНИЕ(Таблица.Номенклатура) КАК НоменклатураПредставление,
	               |	СУММА(1) КАК Количество,
	               |	МИНИМУМ(Таблица.НомерСтроки) КАК НомерСтрокиМин
	               |ПОМЕСТИТЬ ТаблицаОбработанная
	               |ИЗ
	               |	Таблица КАК Таблица
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Таблица.Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаОбработанная.НоменклатураПредставление,
	               |	ТаблицаОбработанная.Количество,
	               |	ТаблицаОбработанная.НомерСтрокиМакс,
	               |	ТаблицаОбработанная.НомерСтрокиМин
	               |ИЗ
	               |	ТаблицаОбработанная КАК ТаблицаОбработанная
	               |ГДЕ
	               |	ТаблицаОбработанная.Количество > 1";
	Запрос.УстановитьПараметр("Таблица", Объект.Товары.Выгрузить());
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ШаблонСообщения = НСтр("ru = 'Строка с номенклатурой ""%1"" уже существует в строке %2.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(ШаблонСообщения, Выборка.НоменклатураПредставление, Выборка.НомерСтрокиМин),,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", Выборка.НомерСтрокиМакс, "Номенклатура"),, Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ЗагрузкаНоменклатурыИзФайла.Форма.ФормаВыбораНоменклатуры" Тогда
		
		ТекДанные = Элементы.Товары.ТекущиеДанные;
		ТекДанные.Номенклатура = ВыбранноеЗначение;
		ТекДанные.Статус = СтатусНайденные(); 
		ЗаполнитьЗначенияСвойств(ТекДанные, ПолучитьДанныеНоменклатуры(ТекДанные.Номенклатура));
		ИзменитьТекстПереключателяОтбора();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ТипЦенПриИзменении(Элемент)
	
	ПолучитьВалютуИзТипаЦен();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСсылкиУстановкиРеквизитовНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияФормыУстановкиЗначенийРеквизитов", ЭтотОбъект);
	
	ЗначенияРеквизитов = Новый Структура;
	ЗначенияРеквизитов.Вставить("Родитель", Родитель);
	ЗначенияРеквизитов.Вставить("ВидНоменклатуры", ВидНоменклатуры);
	ЗначенияРеквизитов.Вставить("НоменклатурнаяГруппа", НоменклатурнаяГруппа);
	ЗначенияРеквизитов.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначенияРеквизитов.Вставить("СтавкаНДС", СтавкаНДС);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЕстьКолонкаЕдиницаИзмерения", ЕстьКолонкаЕдиницаИзмерения);
	ПараметрыФормы.Вставить("ЕстьКолонкаСтавкаНДС", ЕстьКолонкаСтавкаНДС);
	ПараметрыФормы.Вставить("ЗначенияРеквизитов", ЗначенияРеквизитов);
	
	ОткрытьФорму("ОбщаяФорма.ФормаУстановкиЗначенийРеквизитовНоменклатуры", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыУстановкиЗначенийРеквизитов(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено ИЛИ РезультатЗакрытия = КодВозвратаДиалога.Отмена Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, РезультатЗакрытия);
	ЗаголовокСсылкиУстановкиРеквизитов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТабличногоДокумента

&НаКлиенте
Процедура ДанныеФайлаВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если Область.Верх = 1 И Область.Лево <= ДанныеФайла.ШиринаТаблицы Тогда
		
		ДопПараметрОповещения = Новый Структура("ТекОбласть", Область);
		ОписаниеОповещения = Новый ОписаниеОповещения("ДанныеФайлаВыборЗавершение", ЭтотОбъект, ДопПараметрОповещения);
		
		ПараметрыФормы = Новый Структура("ТекущаяОбласть, АдресСпискаТипыЦен", Область.Текст, АдресСпискаТипыЦен);
		ОткрытьФорму("Обработка.ЗагрузкаНоменклатурыИзФайла.Форма.ФормаВыбораЗаголовкаКолонки", ПараметрыФормы,
			ЭтотОбъект,,,, ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеФайлаВыборЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия = Неопределено Или РезультатЗакрытия = КодВозвратаДиалога.Отмена Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ШиринаТаблицы = ДанныеФайла.ШиринаТаблицы;
	ЭтоКолонкаЦена = СтрНайти(РезультатЗакрытия.ИмяРеквизита, "Цена") > 0;
	Для Н = 1 по ШиринаТаблицы Цикл
		
		Область = ДанныеФайла.Область("R1C" + Н);
		Если Область.Текст = РезультатЗакрытия.ИмяРеквизита 
			ИЛИ (ЭтоКолонкаЦена И СтрНайти(Область.Текст, "Цена") > 0) Тогда
			
			Область.Текст = НСтр("ru = 'Укажите реквизит'");
			
		КонецЕсли;
		Если Область.Текст <> НСтр("ru = 'Укажите реквизит'") Тогда
			ОБласть.ЦветТекста = Цвета.Синий;
		Иначе
			Область.ЦветТекста = Цвета.Красный;
		КонецЕсли;
		
	КонецЦикла;
	
	ДополнительныеПараметры.ТекОбласть.Текст      = РезультатЗакрытия.ИмяРеквизита;
	ДополнительныеПараметры.ТекОбласть.ЦветТекста = Цвета.Синий;
	
	Если РезультатЗакрытия.Свойство("ЗначениеТипаЦен") Тогда
		ТипЦен = РезультатЗакрытия.ЗначениеТипаЦен;
		ПолучитьВалютуИзТипаЦен();
	КонецЕсли

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТабличнойЧасти

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ТабличнаяЧастьИзменена = Истина;
	Если КоличествоСтрокТаблицы <> Объект.Товары.Количество() Тогда
		
		КоличествоСтрокТаблицы = Объект.Товары.Количество();
		ИзменитьТекстПереключателяОтбора();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекДанные.Номенклатура) Тогда
		
		ЗаполнитьЗначенияСвойств(ТекДанные, ПолучитьДанныеНоменклатуры(ТекДанные.Номенклатура));
		ТекДанные.Статус = СтатусНайденные(); 
		ИзменитьТекстПереключателяОтбора();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекДанные.Статус = СтатусНовые() Тогда // будет создана новая номенклатура
		
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Новый СписокЗначений;
		ТекстПодбора = НСтр("ru = 'Создать: '") + ТекДанные.Наименование 
			+ ?(ПустаяСтрока(ТекДанные.Артикул), "", ", " + ТекДанные.Артикул)
			+ ?(ЕстьКолонкаЕдиницаИзмерения, 
			?(ПустаяСтрока(ТекДанные.ЕдиницаИзмерения), "", ", " + ТекДанные.ЕдиницаИзмерения), ", " + ЕдиницаИзмерения);
		ДанныеВыбора.Добавить(ТекстПодбора);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") И СтрНайти(ВыбранноеЗначение, НСтр("ru = 'Создать:'")) > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		ТекДанные = Элементы.Товары.ТекущиеДанные;
		
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("НаименованиеПолное",		 ТекДанные.НаименованиеПолное);
		ДанныеЗаполнения.Вставить("Артикул",				 ТекДанные.Артикул);
		ДанныеЗаполнения.Вставить("ВидНоменклатуры",		 ВидНоменклатуры);
		ДанныеЗаполнения.Вставить("Родитель",				 Родитель);
		ДанныеЗаполнения.Вставить("НоменклатурнаяГруппа",	 НоменклатурнаяГруппа);
		ДанныеЗаполнения.Вставить("СтавкаНДС",				 ?(ЕстьКолонкаСтавкаНДС, ТекДанные.СтавкаНДС, СтавкаНДС));
		ДанныеЗаполнения.Вставить("ЕдиницаИзмерения",		 ?(ЕстьКолонкаЕдиницаИзмерения, ТекДанные.ЕдиницаИзмерения, ЕдиницаИзмерения));
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("ТекстЗаполнения", ТекДанные.Наименование);
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ДанныеЗаполнения);
		
		ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекДанные.Статус = СтатусДубли() 
		И (Элемент.ТекущийЭлемент.Имя = "ТоварыНоменклатура" ИЛИ Элемент.ТекущийЭлемент.Имя = "ТоварыКартинка") Тогда
		
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ОтборДублей", ТекДанные.СписокНоменклатуры);
		ОткрытьФорму("Обработка.ЗагрузкаНоменклатурыИзФайла.Форма.ФормаВыбораНоменклатуры", ПараметрыФормы, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	Верх	 = ДанныеФайла.ТекущаяОбласть.Верх;
	Низ		 = ДанныеФайла.ТекущаяОбласть.Низ;
	Лево	 = ДанныеФайла.ТекущаяОбласть.Лево;
	
	Если Верх = 1 И Низ = 1 Тогда
		
		Возврат; // выделена первая строка (строка заголовка)
		
	КонецЕсли;
	
	УдалитьСтрокиНаСервере(Верх, Низ);
	Элементы.ДанныеФайла.ТекущаяОбласть = ДанныеФайла.Область(Верх, Лево);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьКолонку(Команда)
	
	Лево	 = ДанныеФайла.ТекущаяОбласть.Лево;
	Право	 = ДанныеФайла.ТекущаяОбласть.Право;
	Верх	 = ДанныеФайла.ТекущаяОбласть.Верх;
	
	УдалитьКолонкиНаСервере(Лево, Право);
	Элементы.ДанныеФайла.ТекущаяОбласть = ДанныеФайла.Область(Верх, Лево);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЛишнее(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьЛишнееПослеЗакрытияВопроса", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Найти и удалить строки и колонки, не содержащие информацию для загрузки?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЛишнееПослеЗакрытияВопроса(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		НайденыНенужныеСтроки = Ложь;
		Элементы.ДанныеФайла.ОтображениеСостояния.Картинка = БиблиотекаКартинок.ДлительнаяОперация48;
		Элементы.ДанныеФайла.ОтображениеСостояния.Видимость = Истина;
		Элементы.ДанныеФайла.ОтображениеСостояния.Текст = НСтр("ru = 'Пожалуйста, подождите...'");
		Элементы.ДанныеФайла.ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;		
		
		ОчиститьСообщения();
		Результат = УдалитьЛишнееСервер();
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища       = Результат.АдресХранилища;
		Если Не Результат.ЗаданиеВыполнено Тогда
			
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ОжиданиеУдаленияЛишнего", 1, Истина);
			
		Иначе	
			
			РезультатУдаленияЛишнихСтрок();
			Если НЕ НайденыНенужныеСтроки Тогда
				
				ТекстСообщения = НСтр("ru = 'Строк и колонок, не содержащих информацию для загрузки, не обнаружено.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
			Иначе	
				
				ТекстСообщения = НСтр("ru = 'Удаление завершено.'");
				ТекстПояснения = НСтр("ru = 'Удаление строк и колонок, не содержащих информацию для загрузки завершено.'");
				ПоказатьОповещениеПользователя(ТекстСообщения,, ТекстПояснения);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	
	ОчиститьСообщения();
	Если НЕ ПроверитьЗаголовкиКолонок() Тогда
		
		Возврат;
		
	КонецЕсли;
	Элементы.Загрузить.КнопкаПоУмолчанию		 = Истина;
	ОтборТаблицы								 = 0;
	Элементы.Товары.ОтборСтрок = Неопределено;
	
	Результат = ПодготовитьТаблицуТоваровСервер();
	ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	АдресХранилища       = Результат.АдресХранилища;
	Если Не Результат.ЗаданиеВыполнено Тогда
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ОжиданиеПодготовкиТаблицыТоваров", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания);
				
	Иначе	
		
		ЗаполнитьТаблицуТоваров();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	Если ТабличнаяЧастьИзменена Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаОПереходеНаПервыйШаг", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Все изменения, произведенные вами в таблице, будут потеряны. 
                             |
                             |Вернуться на предыдущий шаг?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		ТабличнаяЧастьИзменена = Ложь;
		
	Иначе
		
		ПерейтиНаПервыйШаг();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОПереходеНаПервыйШаг(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ПерейтиНаПервыйШаг();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Загрузить(Команда)
	
	Результат = ЗагрузитьНаСервере();
	Если Результат = Неопределено Тогда
		
		Возврат; // найдены незаполненные обязательные реквизиты
		
	КонецЕсли;
	ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	АдресХранилища       = Результат.АдресХранилища;
	Если Не Результат.ЗаданиеВыполнено Тогда
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ОжиданиеЗагрузкиДанных", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания);
		
	Иначе
		
		Ошибки = ОшибкиПослеЗагрузки(АдресХранилища);
		Если Ошибки <> Неопределено Тогда
			
			ТекстПредупреждения = НСтр("ru = 'При загрузке данных произошли ошибки.'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
			ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);

		Иначе
			
			ПоказатьОповещениеПользователя(НСтр("ru = 'Загрузка номенклатуры и цен произведена.'"));
			ОповеститьОбИзменении(Тип("СправочникСсылка.Номенклатура"));
			Закрыть();
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборТаблицыПриИзменении(Элемент)
	
	ЗначениеОтбора = 0;
	Если ОтборТаблицы = 0 Тогда
		
		ЗначениеОтбора = Неопределено; // показываем все
		
	ИначеЕсли ОтборТаблицы = 1 Тогда
		
		ЗначениеОтбора = СтатусНайденные(); // показываем все найденные
		
	ИначеЕсли ОтборТаблицы = 2 Тогда
		
		ЗначениеОтбора = СтатусНовые(); // показываем новые
		
	Иначе
		
		ЗначениеОтбора = СтатусДубли(); // показываем дубли 
		
	КонецЕсли;
	Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("Статус", ЗначениеОтбора);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	АдресФайла = Параметры.АдресФайла;
	РасширениеФайла = Параметры.РасширениеФайла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТипыЦенНоменклатуры.Наименование КАК Имя,
	|	""Цена"" КАК ИмяРодителя,
	|	ТипыЦенНоменклатуры.Ссылка КАК Значение
	|ИЗ
	|	Справочник.ТипыЦенНоменклатуры КАК ТипыЦенНоменклатуры
	|ГДЕ
	|	НЕ ТипыЦенНоменклатуры.ПометкаУдаления";
	АдресСпискаТипыЦен = ПоместитьВоВременноеХранилище(Запрос.Выполнить().Выгрузить(), УникальныйИдентификатор);
	
	// Установка значений реквизитов для новой номенклатуры по умолчанию
	СтавкаНДС					 = ?(ЗначениеЗаполнено(СтавкаНДС), СтавкаНДС, Перечисления.СтавкиНДС.НДС18);
	ЕдиницаИзмерения			 = ?(ЗначениеЗаполнено(ЕдиницаИзмерения), ЕдиницаИзмерения,
		Справочники.КлассификаторЕдиницИзмерения.ЕдиницаИзмеренияПоКоду("796")); // единица измерения по умолчанию - штука
	ВидНоменклатуры				 = ?(ЗначениеЗаполнено(ВидНоменклатуры), ВидНоменклатуры, Справочники.ВидыНоменклатуры.НайтиСоздатьЭлементыТовар());
	НоменклатурнаяГруппа		 = ?(ЗначениеЗаполнено(НоменклатурнаяГруппа), НоменклатурнаяГруппа,
		БухгалтерскийУчетВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа());
	ДатаУстановкиЦен			 = ТекущаяДатаСеанса();
	
	УстановитьУсловноеОформление();

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПодготовитьТабличныйДокумент()

	Результат = ПодготовитьТабличныйДокументСервер(АдресФайла, РасширениеФайла, УникальныйИдентификатор);
	ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	АдресХранилища       = Результат.АдресХранилища;
	Если Не Результат.ЗаданиеВыполнено Тогда
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ОжиданиеОбработкиТаблицы", 0.1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания);
				
	Иначе	
		
		ЗаполнитьТабличныйДокументСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодготовитьТабличныйДокументСервер(Знач АдресФайла, Знач РасширениеФайла, Знач ИдентификаторФормы)
	
	ПараметрыЗадания = Новый Структура;
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайла);
	ХранилищеДанных = Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9));
	УдалитьИзВременногоХранилища(АдресФайла);
	ПараметрыЗадания.Вставить("РасширениеФайла", РасширениеФайла);
	ПараметрыЗадания.Вставить("ХранилищеДанных", ХранилищеДанных);
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(ИдентификаторФормы,
		"Обработки.ЗагрузкаНоменклатурыИзФайла.ОбработатьДанныеИзФайла", 
		ПараметрыЗадания, НСтр("ru = 'Подготовка табличного документа к загрузке номенклатуры.'"));
		
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТабличныйДокументСервер()

	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресХранилища);
	ДанныеФайла = ЗагруженныеДанные.ДанныеФайла.Получить();
	ТипЦен = ЗагруженныеДанные.ТипЦен;
	Валюта = ЗагруженныеДанные.Валюта;
	УдалитьИзВременногоХранилища(АдресХранилища);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОжиданиеОбработкиТаблицы()
	
	Попытка
		
		Если ЭлектронноеВзаимодействиеБПВызовСервера.ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			
			ЗаполнитьТабличныйДокументСервер();
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			
		Иначе
			
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ОжиданиеОбработкиТаблицы", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
				
			КонецЕсли;
			
	Исключение
		
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		Закрыть();
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокиНаСервере(Верх, Низ)
	
	Если Верх = 1 Тогда
		
		Верх = 2; // чтобы не удалить заголовки колонок
		
	КонецЕсли;
	Область = ДанныеФайла.Область(Верх,, Низ);
	ДанныеФайла.УдалитьОбласть(Область, ТипСмещенияТабличногоДокумента.ПоВертикали);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьКолонкиНаСервере(Лево, Право)
	
	Область = ДанныеФайла.Область(, Лево,, Право);
	ДанныеФайла.УдалитьОбласть(Область, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	
КонецПроцедуры

&НаСервере
Функция УдалитьЛишнееСервер()
	
	ПараметрыЗадания = Новый Структура;
	ХранилищеДанных = Новый ХранилищеЗначения(ДанныеФайла, Новый СжатиеДанных(9));
	ПараметрыЗадания.Вставить("ХранилищеДанных", ХранилищеДанных);
	ПараметрыЗадания.Вставить("НайденыНенужныеСтроки", НайденыНенужныеСтроки);
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(УникальныйИдентификатор,
		"Обработки.ЗагрузкаНоменклатурыИзФайла.УдалитьВсеНенужныеСтрокиТаблицы", 
		ПараметрыЗадания, НСтр("ru = 'Удаление незначимых строк табличного документа.'"));
		
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура РезультатУдаленияЛишнихСтрок()
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	НайденыНенужныеСтроки = Результат.НайденыНенужныеСтроки;
	Если НайденыНенужныеСтроки Тогда
		
		ДанныеФайла = Результат.ХранилищеДанных.Получить();
		
	КонецЕсли;
	Элементы.ДанныеФайла.ОтображениеСостояния.Видимость = Ложь;
	Элементы.ДанныеФайла.ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОжиданиеУдаленияЛишнего()

	Попытка
		
		Если ЭлектронноеВзаимодействиеБПВызовСервера.ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			
			РезультатУдаленияЛишнихСтрок();
			Если НЕ НайденыНенужныеСтроки Тогда
				
				ТекстСообщения = НСтр("ru = 'Незначимых строк для удаления не найдено.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
			Иначе	
				
				ТекстСообщения = НСтр("ru = 'Удаление незначимых строк завершено.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Символы.ПС);
				ПоказатьОповещениеПользователя(ТекстСообщения);
				
			КонецЕсли; 
			
		Иначе
			
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ОжиданиеУдаленияЛишнего",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал,
				Истина);
				
			КонецЕсли;
			
	Исключение
		
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаголовкиКолонок()
	
	ОшибокНет = Истина;
	ШиринаТаблицы = ДанныеФайла.ШиринаТаблицы;
	ЕстьНезаполненныйЗаголовок = Ложь;
	НеУказаноНаименование = Истина;
	Для Н = 1 по ШиринаТаблицы Цикл
		
		Ячейка = ДанныеФайла.Область("R1C" + Н);
		Если Ячейка.Текст = НСтр("ru = 'Укажите реквизит'") Тогда
			
			ЕстьНезаполненныйЗаголовок = Истина;
			
		КонецЕсли;
		Если Ячейка.Текст = НСтр("ru = 'Наименование'") Тогда
			
			НеУказаноНаименование = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	Если ЕстьНезаполненныйЗаголовок Тогда
		
		ТекстСообщения = НСтр("ru = 'Укажите названия реквизитов в заголовках колонок. Если колонку не требуется загружать, удалите ее.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ДанныеФайла");
		
		ОшибокНет = Ложь;
		
	КонецЕсли;
	Если НеУказаноНаименование Тогда
		
		ТекстСообщения = НСтр("ru = 'Не указана колонка с наименованием номенклатуры.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ДанныеФайла");
		
		ОшибокНет = Ложь;
		
	КонецЕсли;
	
	Возврат ОшибокНет;
	
КонецФункции

&НаСервере
Функция ПодготовитьТаблицуТоваровСервер()
	
	ПараметрыЗадания = Новый Структура;
	ХранилищеДанных = Новый ХранилищеЗначения(ДанныеФайла, Новый СжатиеДанных(9));
	ПараметрыЗадания.Вставить("ХранилищеДанных", ХранилищеДанных);
	ПараметрыЗадания.Вставить("СтавкаНДС", СтавкаНДС);
	ПараметрыЗадания.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(УникальныйИдентификатор,
		"Обработки.ЗагрузкаНоменклатурыИзФайла.ПолучитьТаблицуДанныхТоваров", 
		ПараметрыЗадания, НСтр("ru = 'Подготовка таблицы товаров при загрузке номенклатуры.'"));
		
	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура Подключаемый_ОжиданиеПодготовкиТаблицыТоваров()

	Попытка
		
		Если ЭлектронноеВзаимодействиеБПВызовСервера.ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			ЗаполнитьТаблицуТоваров();
			
		Иначе
			
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ОжиданиеПодготовкиТаблицыТоваров",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал,
				Истина);
				
			КонецЕсли;
			
	Исключение
		
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуТоваров()
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	ЕстьКолонкаЕдиницаИзмерения		 = Результат.ЕстьКолонкаЕдиницаИзмерения;
	ЕстьКолонкаСтавкаНДС			 = Результат.ЕстьКолонкаСтавкаНДС;
	КоличествоСтрокТаблицы			 = Результат.КоличествоСтрокТаблицы;
	
	Элементы.ТоварыЕдиницаИзмерения.Видимость	 = ЕстьКолонкаЕдиницаИзмерения;
	Элементы.ТоварыСтавкаНДС.Видимость			 = ЕстьКолонкаСтавкаНДС;
	
	Объект.Товары.Загрузить(Результат.Товары);
	
	Элементы.ГруппаШаг1.Видимость = Ложь;
	Элементы.ГруппаШаг2.Видимость = Истина;
	
	ЗаголовокСсылкиУстановкиРеквизитов();
	ИзменитьТекстПереключателяОтбора();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатуры(Знач Номенклатура)
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, "ЕдиницаИзмерения, СтавкаНДС");
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Серый текст для новой номенклатуры
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыНоменклатура");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.Номенклатура", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.Статус", ВидСравненияКомпоновкиДанных.Равно, СтатусНовые());
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ТемноСерый);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.Товары.Представление"));
	
	// Красный текст для дублей
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыНоменклатура");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.Номенклатура", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.Статус", ВидСравненияКомпоновкиДанных.Равно, СтатусДубли());
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Кирпичный);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.Товары.Представление"));
	
	// Устанавливаем отметку незаполненного, если не заполнены номенклатура и наименование
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыНоменклатура");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.Номенклатура", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.Статус", ВидСравненияКомпоновкиДанных.Равно, СтатусНайденные());
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// Блокируем для редактирования ставку ндс и единицу измерения, если номенклатура заполнена
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыЕдиницаИзмерения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтавкаНДС");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.Номенклатура", ВидСравненияКомпоновкиДанных.Заполнено);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьНаСервере()

	Если Не ПроверитьЗаполнение() Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Товары", Объект.Товары.Выгрузить());
	ПараметрыЗадания.Вставить("ЕстьКолонкаЕдиницаИзмерения", ЕстьКолонкаЕдиницаИзмерения);
	ПараметрыЗадания.Вставить("ЕстьКолонкаСтавкаНДС", ЕстьКолонкаСтавкаНДС);
	ПараметрыЗадания.Вставить("Валюта", Валюта);
	ПараметрыЗадания.Вставить("СтавкаНДС", СтавкаНДС);
	ПараметрыЗадания.Вставить("НоменклатурнаяГруппа", НоменклатурнаяГруппа);
	ПараметрыЗадания.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ПараметрыЗадания.Вставить("Родитель", Родитель);
	ПараметрыЗадания.Вставить("ВидНоменклатуры", ВидНоменклатуры);
	ПараметрыЗадания.Вставить("ТипЦен", ТипЦен);
	ПараметрыЗадания.Вставить("ДатаУстановкиЦен", ДатаУстановкиЦен);
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(УникальныйИдентификатор,
		"Обработки.ЗагрузкаНоменклатурыИзФайла.ЗагрузитьДанныеФайла", 
		ПараметрыЗадания, НСтр("ru = 'Загрузка данных файла.'"));
		
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ОжиданиеЗагрузкиДанных()

	Попытка
		
		Если ЭлектронноеВзаимодействиеБПВызовСервера.ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			Ошибки = ОшибкиПослеЗагрузки(АдресХранилища);
			Если Ошибки <> Неопределено Тогда
				
				ТекстПредупреждения = НСтр("ru = 'При загрузке данных произошли ошибки.'");
				ПоказатьПредупреждение(, ТекстПредупреждения);
				ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
				
			Иначе
				
				ТекстПояснения = НСтр("ru = 'Загрузка номенклатуры и цен на нее произведена.'");
				ПоказатьОповещениеПользователя(НСтр("ru = 'Загрузка произведена.'"),, ТекстПояснения);
				ОповеститьОбИзменении(Тип("СправочникСсылка.Номенклатура"));
				Закрыть();
				
			КонецЕсли;
			
		Иначе
			
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ОжиданиеЗагрузкиДанных",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал,
				Истина);
				
			КонецЕсли;
			
	Исключение
		
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ОшибкиПослеЗагрузки(АдресХранилища)

	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	Возврат Результат.Ошибки;

КонецФункции

&НаСервере
Процедура ЗаголовокСсылкиУстановкиРеквизитов()
	
	СписокРеквизитов = "Родитель,ВидНоменклатуры,НоменклатурнаяГруппа"
		+ ?(ЕстьКолонкаЕдиницаИзмерения, "", ",ЕдиницаИзмерения") + ?(ЕстьКолонкаСтавкаНДС, "", ",СтавкаНДС");
	МассивРеквизитов = СтрРазделить(СписокРеквизитов, ",", Ложь);
	МассивЗначений = Новый Массив;
	Для Каждого ЭлементМассива Из МассивРеквизитов Цикл
		
		ЗначениеРеквизитаСтр = Строка(ЭтотОбъект[ЭлементМассива]);
		Если Не ПустаяСтрока(ЗначениеРеквизитаСтр) Тогда
			
			Если ЭлементМассива = "СтавкаНДС" Тогда
				
				МассивЗначений.Добавить("НДС " + Строка(ЗначениеРеквизитаСтр));
				
			Иначе
			
				МассивЗначений.Добавить(Строка(ЗначениеРеквизитаСтр));
			
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	ЗаголовокСсылки = НСтр("ru = 'Реквизиты новой номенклатуры: '");
	ПерваяИтерация = Истина;
	Для Каждого ЭлементМассива Из МассивЗначений Цикл
		
		ЗаголовокСсылки = ЗаголовокСсылки + ?(ПерваяИтерация, "", ", ") + ЭлементМассива;
		ПерваяИтерация = Ложь;
		
	КонецЦикла;
	НадписьСсылкиУстановкиРеквизитов = ЗаголовокСсылки;

КонецПроцедуры

&НаСервере
Процедура ИзменитьТекстПереключателяОтбора()
	
	КолНайденные		 = 0;
	КолНовые			 = 0;
	КолДубли			 = 0;
	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		
		Если СтрокаТаблицы.Статус = СтатусНайденные() Тогда
			
			КолНайденные = КолНайденные + 1;
			
		ИначеЕсли СтрокаТаблицы.Статус = СтатусДубли() Тогда
			
			КолДубли = КолДубли + 1;
			
		ИначеЕсли СтрокаТаблицы.Статус = СтатусНовые() Тогда
			
			КолНовые = КолНовые + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	ТекстВсе			 = НСтр("ru = 'Все %1'");
	ТекстНайденные		 = НСтр("ru = 'Найденные %1'");
	ТекстНовые			 = НСтр("ru = 'Новые %1'");
	ТекстДубли			 = НСтр("ru = 'Дубли %1'");
	КолСтрок = Объект.Товары.Количество();
	СписокВыбора = Элементы.ОтборТаблицы.СписокВыбора;
	СписокВыбора[0].Представление = ?(КолСтрок = 0, СтрШаблон(ТекстВсе, ""), СтрШаблон(ТекстВсе, "(" + КолСтрок + ")"));
	СписокВыбора[1].Представление = ?(КолНайденные = 0, СтрШаблон(ТекстНайденные, ""), СтрШаблон(ТекстНайденные, "(" + КолНайденные + ")"));
	СписокВыбора[2].Представление = ?(КолНовые = 0, СтрШаблон(ТекстНовые, ""), СтрШаблон(ТекстНовые, "(" + КолНовые + ")"));
	СписокВыбора[3].Представление = ?(КолДубли = 0, СтрШаблон(ТекстДубли, ""), СтрШаблон(ТекстДубли, "(" + КолДубли + ")"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаПервыйШаг()
	
	Элементы.ГруппаШаг1.Видимость = Истина;
	Элементы.ГруппаШаг2.Видимость = Ложь;
	
	Элементы.Далее.КнопкаПоУмолчанию = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВалютуИзТипаЦен()
	
	Валюта = ?(ЗначениеЗаполнено(ТипЦен), ПолучитьВалютуИзТипаЦенСервер(ТипЦен), Неопределено);
	Элементы.Валюта.Видимость = Не ЗначениеЗаполнено(Валюта);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВалютуИзТипаЦенСервер(Знач ТипЦен)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТипЦен, "ВалютаЦены");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатусНовые()

	Возврат 2;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатусДубли()

	Возврат 1;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатусНайденные()

	Возврат 0;

КонецФункции

#КонецОбласти
