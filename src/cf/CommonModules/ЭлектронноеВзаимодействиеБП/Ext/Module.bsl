////////////////////////////////////////////////////////////////////////////////
// ЭлектронноеВзаимодействиеБП: вспомогательные процедуры и функции БЭД
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область КонвертацияФорматированногоДокументаВФорматRTF

// Преобразует форматированный документ 1С в документ формата RTF
Процедура КонвертироватьВФорматRTF(ФорматированныйДокумент, ИмяФайла) Экспорт
	
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.ANSI);
	
	СоответствиеТегов = ПолучитьСоответствиеТегов(ФорматированныйДокумент);
	ЗаписьТекста.ЗаписатьСтроку(НачалоRTF(СоответствиеТегов));
	НомерСписка = 0;
	Для Каждого Параграф Из ФорматированныйДокумент.Элементы Цикл
		
		Если Параграф.ТипПараграфа = ТипПараграфа.НумерованныйСписок Тогда
			
			НомерСписка = НомерСписка + 1;
			
		Иначе
			
			НомерСписка = 0;
			
		КонецЕсли;
		ПараграфRTF = ОбработатьПараграф(Параграф, СоответствиеТегов, НомерСписка);
		ЗаписьТекста.ЗаписатьСтроку(ПараграфRTF);
		
	КонецЦикла;
	ЗаписьТекста.ЗаписатьСтроку(КонецRTF());
	
	ЗаписьТекста.Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область ЭлектронноеВзаимодействие

// Заполняет структуру данными ФИО
//
// Параметры:
//  СтруктураПриемник	 - Структура	 - структура, которую нужно заполнить
//  ИсточникДанных		 - Структура	 - структура, содержащее ФИО
//  Должность			 - Строка	 - должность
//
Процедура ЗаполнитьФИОИДолжность(СтруктураПриемник, ИсточникДанных, Должность = Неопределено) Экспорт
	
	ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ИсточникДанных);
	
	СтруктураПриемник.Вставить("Фамилия", ФИО.Фамилия);
	СтруктураПриемник.Вставить("Имя", ФИО.Имя);
	СтруктураПриемник.Вставить("Отчество", ФИО.Отчество);
	Если Должность <> Неопределено Тогда
		СтруктураПриемник.Вставить("Должность", Должность);
	КонецЕсли;
	
КонецПроцедуры

// Ищет ссылку на номенклатуру поставщика по идентификатору
//
// Параметры:
//  Идентификатор			 - Строка	 - идентификатор номенклатуры поставщика
//  Контрагент				 - СправочникСсылка.Контрагенты	 - ссылка на поставщика
//  ТипВозвращаемогоЗначения - Строка	 - возможные значения: "Номенклатура", "НоменклатураПоставщика"
// 
// Возвращаемое значение:
//  СправочникСсылка.Номенклатура, СправочникСсылка.НоменклатураПоставщика - ссылка на справочник
//
Функция НайтиСсылкуНаНоменклатуруПоставщикаПоИдентификатору(Идентификатор, Контрагент, ТипВозвращаемогоЗначения = "Номенклатура") Экспорт
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СпрНоменклатура.Номенклатура КАК Номенклатура,
	               |	СпрНоменклатура.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.НоменклатураПоставщиков КАК СпрНоменклатура
	               |ГДЕ
	               |	СпрНоменклатура.Идентификатор = &Идентификатор
	               |	И СпрНоменклатура.Владелец = &Контрагент";
	
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если ТипВозвращаемогоЗначения = "Номенклатура" Тогда
			Результат = Выборка.Номенклатура;
		Иначе
			Результат = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьКИПоПредставлению(КонтрагентОбъект, Представление, ВидКИ) Экспорт
	
	НоваяСтрока               = КонтрагентОбъект.КонтактнаяИнформация.Добавить();
	НоваяСтрока.Тип           = ВидКИ.Тип;
	НоваяСтрока.Вид           = ВидКИ;
	НоваяСтрока.Представление = Представление;
	
КонецПроцедуры

Функция ПолучитьЗначениеРеквизитаДерева(СтрокаДерева, ИмяРеквизита, ВключатьПодчиненные = Ложь, ДеревоРазбора = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Если СтрокаДерева.Строки.Количество()>0 Тогда
		НайденнаяСтрока = СтрокаДерева.Строки.Найти(ИмяРеквизита, "Реквизит", ВключатьПодчиненные);
	Иначе
		НайденнаяСтрока = СтрокаДерева;
	КонецЕсли;
	
	Если НайденнаяСтрока <> Неопределено Тогда
		Результат = НайденнаяСтрока.ЗначениеРеквизита;
		// Если реквизит ссылочного типа (передали реквизит ДеревоРазбора),
		// тогда был найден всего лишь индекс строки
		Если ЗначениеЗаполнено(ДеревоРазбора) Тогда 
			НайденнаяСтрока = ДеревоРазбора.Строки.Найти(Результат, "ИндексСтроки", Истина);
			Если НайденнаяСтрока <> Неопределено Тогда
				Результат = НайденнаяСтрока.СсылкаНаОбъект;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьНомерТДИСтрануПроисхождения(СтрокаТаблицы, Данные, ЭтоКорректировка = Ложь) Экспорт
	
	Если Данные.Свойство("НомерТД") Тогда
		
		СтрокаТаблицы.НомерГТД = НомерТДПолучитьСсылку(Данные.НомерТД);
		
	КонецЕсли;
	
	Если Данные.Свойство("КодСтраныПроисхождения") Тогда
		
		СтрокаТаблицы.СтранаПроисхождения = СтранаПроисхожденияПолучитьСсылку(Данные.КодСтраныПроисхождения);
		
	КонецЕсли;
	
	Если ЭтоКорректировка И Данные.Свойство("НомерТДДоИзменения") Тогда
		
		СтрокаТаблицы.НомерГТДДоИзменения = НомерТДПолучитьСсылку(Данные.НомерТДДоИзменения);
		
	КонецЕсли;
	
	Если ЭтоКорректировка И Данные.Свойство("КодСтраныПроисхожденияДоИзменения") Тогда
		
		СтрокаТаблицы.СтранаПроисхожденияДоИзменения = СтранаПроисхожденияПолучитьСсылку(Данные.КодСтраныПроисхожденияДоИзменения);
		
	КонецЕсли; 

КонецПроцедуры

Функция ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаДерева, ПутьКРеквизиту) Экспорт
	
	ПозТочки = Найти(ПутьКРеквизиту, ".");
	Если ПозТочки > 0 Тогда
		ИмяГлавногоРеквизита     = Лев(ПутьКРеквизиту, ПозТочки - 1);
		ИмяПодчиненногоРеквизита = Прав(ПутьКРеквизиту, СтрДлина(ПутьКРеквизиту) - ПозТочки);
	Иначе
		ИмяГлавногоРеквизита     = ПутьКРеквизиту;
		ИмяПодчиненногоРеквизита = "";
	КонецЕсли;
	
	ГлавныйРеквизит = СтрокаДерева.Строки.Найти(ИмяГлавногоРеквизита, "Реквизит");
	
	Если ГлавныйРеквизит <> Неопределено Тогда
		ЗначениеГлавногоРеквизита = ГлавныйРеквизит.ЗначениеРеквизита;
		Если ИмяПодчиненногоРеквизита <> "" Тогда
			СтрокаПоСсылке = Неопределено;
			Если ЭтоСсылочноеЗначениеДереваРазбора(ДеревоРазбора, ЗначениеГлавногоРеквизита, СтрокаПоСсылке) Тогда
				Возврат ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаПоСсылке, ИмяПодчиненногоРеквизита);
			КонецЕсли;
			
			// Нет возможности получить значение подчиненного реквизита.
			Возврат Неопределено;
		Иначе
			// Не требуется получать значение подчиненного реквизита.
			Возврат ЗначениеГлавногоРеквизита
		КонецЕсли;
	Иначе
		// Нет такого реквизита.
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПолноеИмяФайлаЭД(СтруктураОбмена) Экспорт
	
	// Формируем ЭД в формате xml, в случае если это:
	// - торг-12 в формате ФНС;
	// - Акт в формате ФНС;
	// - торг-12 в старом формате;
	// - обмен через оператора ЭДО счетом-фактурой.
	Если СтруктураОбмена.СтруктураЭД.Свойство("ПрофильНастроекЭДО") Тогда
		СпособОбменаЭД = СтруктураОбмена.СтруктураЭД.ПрофильНастроекЭДО.СпособОбменаЭД;
	Иначе
		// Осталось для обмена с банками.
		СпособОбменаЭД = СтруктураОбмена.СтруктураЭД.СоглашениеЭД.СпособОбменаЭД;
	КонецЕсли;
	
	Если (СтруктураОбмена.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
			ИЛИ СтруктураОбмена.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
			ИЛИ СтруктураОбмена.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
			ИЛИ СтруктураОбмена.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
			ИЛИ СтруктураОбмена.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
			ИЛИ СтруктураОбмена.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель
			ИЛИ СтруктураОбмена.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПлатежноеПоручение
			ИЛИ СтруктураОбмена.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПлатежноеТребование)
		ИЛИ (СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
			ИЛИ СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО)
		И (СтруктураОбмена.ВидЭД = Перечисления.ВидыЭД.СчетФактура
			ИЛИ СтруктураОбмена.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура
			ИЛИ СтруктураОбмена.ВидЭД = Перечисления.ВидыЭД.ТОРГ12)
		ИЛИ СтруктураОбмена.СтруктураЭД.ПрофильНастроекЭДО.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.БыстрыйОбмен Тогда
		
		ПолноеИмяФайла = СтруктураОбмена.ПолноеИмяФайла;
		
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СоглашенияОбИспользованииЭДФорматыФайловОбмена.ФорматФайла
		|ИЗ
		|	Справочник.СоглашенияОбИспользованииЭД.ФорматыФайловОбмена КАК СоглашенияОбИспользованииЭДФорматыФайловОбмена
		|ГДЕ
		|	СоглашенияОбИспользованииЭДФорматыФайловОбмена.Ссылка = &СоглашениеЭД
		|	И СоглашенияОбИспользованииЭДФорматыФайловОбмена.Использовать";
		Запрос.УстановитьПараметр("СоглашениеЭД", СтруктураОбмена.СтруктураЭД.СоглашениеЭД);
		
		ИспользуемыеФорматы = Запрос.Выполнить().Выгрузить();
		
		Если СтруктураОбмена.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав
			И ИспользуемыеФорматы.Найти(Перечисления.ФорматыФайловОбменаЭД.PDF, "ФорматФайла") = Неопределено Тогда
			НоваяСтр = ИспользуемыеФорматы.Добавить();
			НоваяСтр.ФорматФайла = Перечисления.ФорматыФайловОбменаЭД.PDF;
		КонецЕсли;
		
		МассивФайловДляОтправки = Новый Массив;
		
		Для Каждого ИспользуемаяСтрока Из ИспользуемыеФорматы Цикл
			Если ИспользуемаяСтрока.ФорматФайла = Перечисления.ФорматыФайловОбменаЭД.XML
				ИЛИ ИспользуемаяСтрока.ФорматФайла = Перечисления.ФорматыФайловОбменаЭД.СоставнойФормат Тогда
				ИмяФайла = СтруктураОбмена.ПолноеИмяФайла;
			Иначе
				ИмяФайла = СформироватьДопДокумент(СтруктураОбмена, ИспользуемаяСтрока.ФорматФайла);
				Если ИмяФайла = Неопределено Тогда
					ТекстСообщения = НСтр("ru = 'Ошибка формирования табличного документа в формате %1.'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИспользуемаяСтрока.ФорматФайла);
					ВидОперации = НСтр("ru = 'формирования табличного документа'");
					ЭлектронноеВзаимодействиеБПВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ТекстСообщения);
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			МассивФайловДляОтправки.Добавить(ИмяФайла);
		КонецЦикла;
		ПолноеИмяФайла = СформироватьЗипАрхивФайлов(СтруктураОбмена.ПолноеИмяФайла, МассивФайловДляОтправки);
	КонецЕсли;
	
	Возврат ПолноеИмяФайла;
	
КонецФункции

Функция СформироватьДопДокумент(СтруктураОбмена, ОписаниеФормата) Экспорт
	
	ФайлИсходногоДокумента = Новый Файл(СтруктураОбмена.ПолноеИмяФайла);
	ИмяИсходногоДокумента = ФайлИсходногоДокумента.ИмяБезРасширения;
	
	ПолноеИмяДопФайла = Неопределено;
	СтруктураОбмена.Свойство("ПолноеИмяДопФайла", ПолноеИмяДопФайла);

	ТабличныйДокумент = ОбменСКонтрагентамиВнутренний.СформироватьПечатнуюФормуЭД(
		СтруктураОбмена.ПолноеИмяФайла,
		СтруктураОбмена.СтруктураЭД.НаправлениеЭД,
		Новый Структура("ИмяФайлаДопДанных", ПолноеИмяДопФайла));
		
	Если ТабличныйДокумент <> Неопределено Тогда
		СтруктураОбработкиДопФайла = ОпределитьТипСохраненияПоПеречислению(ОписаниеФормата);
		
		ФайлСохранения = ФайлИсходногоДокумента.Путь + ИмяИсходногоДокумента +"."
			+ СтруктураОбработкиДопФайла.ПредставлениеРасширения;
		
		ТабличныйДокумент.Записать(ФайлСохранения,СтруктураОбработкиДопФайла.ПредставлениеТипаСохранения);
	Иначе
		ТекстСообщения = НСтр("ru = 'Не удалось сформировать табличный документ (подробности см. в Журнале регистрации).'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ФайлСохранения = Неопределено;
	КонецЕсли;
	
	Возврат ФайлСохранения;
	
КонецФункции

// Возвращает временный рабочий каталог для работы с файлами ЭДО.
// Каталог создается в каталоге временных файлов системы или ином предопределенном каталоге.
//
// Параметры:
//  Подкаталог - Строка - Вложенный каталог первого уровня.
//  КлючУникальности - Строка - Вложенный каталог второго уровня.
//
Функция РабочийКаталог(Знач Подкаталог = "", КлючУникальности = "") Экспорт
	
	ИмяКаталога = КаталогВременныхФайлов() 
		+ ?(ПустаяСтрока(Подкаталог + КлючУникальности), "", "v8_")
		+ ?(ПустаяСтрока(Подкаталог), "", Подкаталог + "_")
		+ КлючУникальности
		+ ?(ПустаяСтрока(Подкаталог + КлючУникальности), "", ПолучитьРазделительПути());
					
	КаталогНаДиске = Новый Файл(ИмяКаталога);
	
	Если КаталогНаДиске.Существует() И Не ПустаяСтрока(КлючУникальности) Тогда
		// Если структура существует, очистим файлы
		УдалитьФайлы(КаталогНаДиске, "*");
	Иначе
		СоздатьКаталог(ИмяКаталога);
	КонецЕсли;
	
	Возврат ИмяКаталога;
	
КонецФункции

// Определяет возможно ли без ошибки извлечь файлы из архива.
// Проверяется максимальная длина полного имени файла в 255 символов.
// 
// Параметры:
//  ZipЧтение - ЧтениеZIPФайла - открытий zip архив.
//  ПапкаРаспаковки - Строка - папка, в которую будут извлечены данные.
//  ИмяСоздаваемогоФайла - Строка - имя файла, который не может быть извлечен.
//
// Возвращаемое значение:
//  Булево
//
Функция ВозможноИзвлечьФайлы(ZipЧтение, ПапкаРаспаковки, ИмяСоздаваемогоФайла="") Экспорт
	
	ДлинаПутиПапки = СтрДлина(ПапкаРаспаковки);
	
	Для Каждого Элемент Из ZipЧтение.Элементы Цикл
		ИмяФайла = Элемент.ПолноеИмя;
		ДлинаИмениФайла = СтрДлина(ИмяФайла);
		ПолнаяДлина = ДлинаПутиПапки + ДлинаИмениФайла + 1;
		Если ПолнаяДлина > 255 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьСтавкуНДСПеречислением(СтавкаНДС, ОбратнаяСтавка = Ложь) Экспорт
	
	ЗначениеНДС = Неопределено;
	
	Если ТипЗнч(СтавкаНДС) = Тип("Строка") Тогда
		ПредставлениеСтавкиНДС = СтавкаНДС;
	ИначеЕсли ТипЗнч(СтавкаНДС) = Тип("Число") Тогда 
		ПредставлениеСтавкиНДС = Строка(СтавкаНДС);
	Иначе // неправильный тип
		ПредставлениеСтавкиНДС = Неопределено;
	КонецЕсли;
	
	Если ПредставлениеСтавкиНДС = Неопределено ИЛИ ВРЕГ(ПредставлениеСтавкиНДС) = "БЕЗ НДС" Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.БезНДС;
		
	ИначеЕсли ПредставлениеСтавкиНДС = "0" ИЛИ ПредставлениеСтавкиНДС = "0%" Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.НДС0;
		
	ИначеЕсли Найти("10#0.1#0,1#0.10#0,10#10%", ПредставлениеСтавкиНДС) > 0 Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.НДС10;
		
	ИначеЕсли Найти("20#0.2#0,2#0.20#0,20#20%", ПредставлениеСтавкиНДС) > 0 Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.НДС20;
		
	ИначеЕсли Найти("18#0.18#0,18#0.18#0,18#18%", ПредставлениеСтавкиНДС) > 0 Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.НДС18;
		
	ИначеЕсли Найти("10/110#10% / 110%#10%/110%", ПредставлениеСтавкиНДС) > 0 Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.НДС10_110;
		
	ИначеЕсли Найти("18/118#18% / 118%#18%/118%", ПредставлениеСтавкиНДС) > 0 Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.НДС18_118;
		
	ИначеЕсли Найти("20/120#20% / 120%#20%/120%", ПредставлениеСтавкиНДС) > 0 Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.НДС20_120;
		
	КонецЕсли;
	
	Возврат ЗначениеНДС;
	
КонецФункции

Функция СобытиеЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = 'Загрузка электронных документов'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

// Подготавливает структуру данных контрагента к отправке в составе ЭД, оставляет в структуре данных только простые типы.
//
// Параметры:
//  Контрагент	 - СправочникСсылка.Контрагенты - контрагент, по данные которого нужно подготовить
//  ДатаСведений - Дата - дата на которую нужно получить данные
// 
// Возвращаемое значение:
//  Структура - структура данных контрагента, подготовленный к отправке
//
Функция ДанныеКонтрагентаСтруктурой(Контрагент, ДатаСведений = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ДанныеКонтрагента = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Контрагент, ДатаСведений);
	Результат = Новый Структура;
	Если ДанныеКонтрагента.Свойство("ЮридическоеФизическоеЛицо")
		И ДанныеКонтрагента.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		
		Результат.Вставить("ЮридическоеФизическоеЛицо", "ФЛ");
	Иначе
		Результат.Вставить("ЮридическоеФизическоеЛицо", "ЮЛ");
	КонецЕсли;
	
	Если ДанныеКонтрагента.Свойство("СтранаРегистрации")
		И ЗначениеЗаполнено(ДанныеКонтрагента.СтранаРегистрации) Тогда
		
		Результат.Вставить("КодСтраныРегистрации",
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеКонтрагента.СтранаРегистрации, "Код"));
			
	КонецЕсли;
	
	// оставим только простые типы к передаче в составе ЭД
	Для Каждого ЭлементСтруктуры Из ДанныеКонтрагента Цикл
		Если ТипЗнч(ЭлементСтруктуры.Значение) = Тип("Строка")
			ИЛИ ТипЗнч(ЭлементСтруктуры.Значение) = Тип("Число")
			ИЛИ ТипЗнч(ЭлементСтруктуры.Значение) = Тип("Булево")
			ИЛИ ТипЗнч(ЭлементСтруктуры.Значение) = Тип("Дата") Тогда
			
			Результат.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Производит поиск контрагента по ИНН и КПП. Создает нового контрагента, если не находит.
//
// Параметры:
//  ДанныеКонтрагента	 - Структура - данные контрагента
// 
// Возвращаемое значение:
//  СправочникСсылка.Контрагенты - ссылка на найденного или созданного контрагента
//
Функция ПолучитьСоздатьКонтрагента(ДанныеКонтрагента)
	
	Если ТипЗнч(ДанныеКонтрагента) <> Тип("Структура") Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ИНН = ПолучитьСвойствоСтруктуры(ДанныеКонтрагента, "ИНН");
	КПП = ПолучитьСвойствоСтруктуры(ДанныеКонтрагента, "КПП");
	
	КонтрагентСсылка = СсылкаНаОбъектПоИННКПП("Контрагенты", ИНН, КПП);
	Если ЗначениеЗаполнено(КонтрагентСсылка) Тогда // если в ИБ уже есть такой контрагент, не создаем новый и не редактируем существующий
		
		Возврат КонтрагентСсылка;
		
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
	
		КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
		Если ПолучитьСвойствоСтруктуры(ДанныеКонтрагента, "ЮридическоеФизическоеЛицо") = "ФЛ" Тогда
			КонтрагентОбъект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		Иначе
			КонтрагентОбъект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		КонецЕсли;
		
		КонтрагентОбъект.Наименование			 = ПолучитьСвойствоСтруктуры(ДанныеКонтрагента, "СокращенноеНаименование");
		КонтрагентОбъект.НаименованиеПолное		 = ПолучитьСвойствоСтруктуры(ДанныеКонтрагента, "ПолноеНаименование");
		КонтрагентОбъект.ИНН					 = ИНН;
		КонтрагентОбъект.КПП					 = КПП;
		КонтрагентОбъект.РегистрационныйНомер	 = ПолучитьСвойствоСтруктуры(ДанныеКонтрагента, "ОГРН");
		
		// ИП
		КонтрагентОбъект.СвидетельствоСерияНомер		 = ПолучитьСвойствоСтруктуры(ДанныеКонтрагента, "СвидетельствоСерияНомер");
		КонтрагентОбъект.СвидетельствоДатаВыдачи		 = ПолучитьСвойствоСтруктуры(ДанныеКонтрагента, "СвидетельствоДатаВыдачи");
		КонтрагентОбъект.ДокументУдостоверяющийЛичность = ПолучитьСвойствоСтруктуры(ДанныеКонтрагента, "ДокументУдостоверяющийЛичность");
		
		// Страна регистрации
		КодСтраныРегистрации = ПолучитьСвойствоСтруктуры(ДанныеКонтрагента, "КодСтраныРегистрации");
		Если ЗначениеЗаполнено(КодСтраныРегистрации) Тогда
			
			КонтрагентОбъект.СтранаРегистрации = Справочники.СтраныМира.СсылкаПоДаннымКлассификатора(
				Новый Структура("Код", КодСтраныРегистрации));
			
		КонецЕсли;
		
		// Контактная информация
		ЮрАдрес			 = ПолучитьСвойствоСтруктуры(ДанныеКонтрагента, "ЗначенияПолейЮридическийАдрес");
		ФактАдрес		 = ПолучитьСвойствоСтруктуры(ДанныеКонтрагента, "ЗначенияПолейЮридическийАдрес");
		ПочтовыйАдрес	 = ПолучитьСвойствоСтруктуры(ДанныеКонтрагента, "ЗначенияПолейЮридическийАдрес");
		Телефон			 = ПолучитьСвойствоСтруктуры(ДанныеКонтрагента, "Телефоны");
		АдресЭП			 = ПолучитьСвойствоСтруктуры(ДанныеКонтрагента, "Email");
		Если ЗначениеЗаполнено(ЮрАдрес) Тогда
			
			СтрокаКИ = КонтрагентОбъект.КонтактнаяИнформация.Добавить();
			СтрокаКИ.Тип			 = Перечисления.ТипыКонтактнойИнформации.Адрес;
			СтрокаКИ.Вид			 = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
			СтрокаКИ.ЗначенияПолей	 = ЮрАдрес;
			СтрокаКИ.Представление	 = ПолучитьСвойствоСтруктуры(ДанныеКонтрагента, "ЮридическийАдрес");
			
		КонецЕсли;
		Если ЗначениеЗаполнено(ФактАдрес) Тогда
			
			СтрокаКИ = КонтрагентОбъект.КонтактнаяИнформация.Добавить();
			СтрокаКИ.Тип			 = Перечисления.ТипыКонтактнойИнформации.Адрес;
			СтрокаКИ.Вид			 = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
			СтрокаКИ.ЗначенияПолей	 = ФактАдрес;
			СтрокаКИ.Представление	 = ПолучитьСвойствоСтруктуры(ДанныеКонтрагента, "ФактическийАдрес");
			
		КонецЕсли;
		Если ЗначениеЗаполнено(ПочтовыйАдрес) Тогда
			
			СтрокаКИ = КонтрагентОбъект.КонтактнаяИнформация.Добавить();
			СтрокаКИ.Тип			 = Перечисления.ТипыКонтактнойИнформации.Адрес;
			СтрокаКИ.Вид			 = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента;
			СтрокаКИ.ЗначенияПолей	 = ПочтовыйАдрес;
			СтрокаКИ.Представление	 = ПолучитьСвойствоСтруктуры(ДанныеКонтрагента, "ПочтовыйАдрес");
			
		КонецЕсли;
		Если ЗначениеЗаполнено(Телефон) Тогда
			
			СтрокаКИ = КонтрагентОбъект.КонтактнаяИнформация.Добавить();
			СтрокаКИ.Тип			 = Перечисления.ТипыКонтактнойИнформации.Телефон;
			СтрокаКИ.Вид			 = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
			СтрокаКИ.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(
				Телефон, СтрокаКИ.Вид);
			СтрокаКИ.Представление	 = Телефон;
			
		КонецЕсли;
		Если ЗначениеЗаполнено(АдресЭП) Тогда
			
			СтрокаКИ = КонтрагентОбъект.КонтактнаяИнформация.Добавить();
			СтрокаКИ.Тип			 = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
			СтрокаКИ.Вид			 = Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты;
			СтрокаКИ.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(
				АдресЭП, СтрокаКИ.Вид);
			СтрокаКИ.Представление = АдресЭП;
			
		КонецЕсли;
		
		// Банковский счет
		БИК				 = ПолучитьСвойствоСтруктуры(ДанныеКонтрагента, "БИК");
		НомерСчета		 = ПолучитьСвойствоСтруктуры(ДанныеКонтрагента, "НомерСчета");
		БанковскийСчет	 = Неопределено;
		Если ЗначениеЗаполнено(НомерСчета) И ЗначениеЗаполнено(БИК) Тогда
			
			Банк = Справочники.Банки.СсылкаНаБанк(БИК);
			Если Не ЗначениеЗаполнено(Банк) Тогда
				
				БанкИзКлассификатора = РаботаСБанкамиБП.СсылкаПоКлассификатору(БИК);
				Если ЗначениеЗаполнено(БанкИзКлассификатора) Тогда
					
					РаботаСБанкамиБП.ПодобратьБанкИзКлассификатора(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(БанкИзКлассификатора));
					
					// РаботаСБанкамиБП.ПодобратьБанкИзКлассификатора() возвращает массив, содержащий кроме ссылок на банк группы банков,
					// поэтому проще использовать Справочники.Банки.СсылкаНаБанк()
					Банк = Справочники.Банки.СсылкаНаБанк(БИК);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Банк) Тогда
				
				КонтрагентОбъект.ОсновнойБанковскийСчет = Справочники.БанковскиеСчета.ПолучитьСсылку();
				БанковскийСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
				БанковскийСчет.УстановитьСсылкуНового(КонтрагентОбъект.ОсновнойБанковскийСчет);
				БанковскийСчет.Банк			 = Банк;
				БанковскийСчет.НомерСчета	 = НомерСчета;
				БанковскийСчет.Наименование	 = БанковскиеСчетаФормыКлиентСервер.НаименованиеБанковскогоСчета(БанковскийСчет, 
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Банк, "Наименование"));
				Если БанковскиеПравила.ЭтоРублевыйСчет(НомерСчета) Тогда
					
					БанковскийСчет.ВалютаДенежныхСредств = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
					БанковскийСчет.Валютный = Ложь;
					
				Иначе
					
					КодВалюты = БанковскиеПравила.КодВалютыБанковскогоСчета(НомерСчета);
					БанковскийСчет.ВалютаДенежныхСредств = БанковскиеСчетаВызовСервера.ПолучитьВалютуПоКоду(КодВалюты);
					БанковскийСчет.Валютный = Истина;
					
				КонецЕсли;

			КонецЕсли;
			
		КонецЕсли;
		
		КонтрагентОбъект.Записать();
		КонтрагентСсылка = КонтрагентОбъект.Ссылка;
		Если БанковскийСчет <> Неопределено Тогда
			
			БанковскийСчет.Владелец = КонтрагентСсылка;
			БанковскийСчет.Записать();
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
		Возврат КонтрагентСсылка;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ТекстСообщения);
		
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаЭД

Функция ПолучитьКонтрагентаИДанныеДокумента(АдресаФайловXML, ИдентификаторФормы) Экспорт
	
	ТаблицаДанных = Документы.РеализацияТоваровУслуг.РазобратьРеализациюТоваровИУслугВXML(АдресаФайловXML);
	ДанныеДокумента = Неопределено;
	ФайлДанных = Неопределено;
	Если ТаблицаДанных.Количество() > 0 Тогда
		
		ТекстОшибки = ТаблицаДанных[0].ТекстОшибки;
		Если Не ПустаяСтрока(ТекстОшибки) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Возврат Неопределено;
			
		КонецЕсли;		
		ДанныеДокумента = ТаблицаДанных[0].ДанныеДокумента;
		ФайлДанных = ПоместитьВоВременноеХранилище(ТаблицаДанных[0].ФайлДанных, ИдентификаторФормы);		
		
	КонецЕсли;		
	Если ДанныеДокумента = Неопределено Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;       	
	СтруктураЭД = ПолучитьСтруктуруЭД(ДанныеДокумента, ИдентификаторФормы, ФайлДанных);
	
	Возврат СтруктураЭД;
	
КонецФункции 

Функция СоздатьДокументИзЭД(СтруктураЭД) Экспорт
		
	Попытка
				
		ДокументПоступления = СоздатьОбъектИБ(СтруктураЭД.ДанныеДокумента, СтруктураЭД.Контрагент);
		
		Если СтруктураЭД.Свойство("ДанныеСФ") Тогда
			
			СчетФактура = СоздатьОбъектИБ(СтруктураЭД.ДанныеСФ,, ДокументПоступления);
			Если СчетФактура.КодСпособаПолучения <> 1 Тогда // КодСпособаПолучения 1 - в бумажном виде, 2 - электронно
				
				СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
				СчетФактураОбъект.КодСпособаПолучения = 1;
				СчетФактураОбъект.Записать();
				
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат ДокументПоступления;				
				
	Исключение   			
			
		ШаблонСообщения = НСтр("ru='%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			ИнформацияОбОшибке().Описание);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат Неопределено;
			
	КонецПопытки;	

КонецФункции 

Функция ПолучитьСтруктуруЭД(ДанныеДокумента, ИдентификаторФормы, ФайлДанных, НаименованиеКонтрагента = "") Экспорт
	
	ДеревоРазбора = ДанныеДокумента.ДеревоРазбора;
	НайденныеСтроки = ДеревоРазбора.Строки.Найти("ОбменСКонтрагентами","ТипОбъекта");
	СтрокаОбъекта = НайденныеСтроки.Строки[0];
	СсылкаКонтрагента = ПолучитьЗначениеРеквизитаДерева(СтрокаОбъекта, "Контрагент", Истина, ДеревоРазбора);	
	Если СсылкаКонтрагента = Неопределено Или СсылкаКонтрагента.Пустая() Тогда
		
		ИндексСтрокиКонтрагента = ПолучитьЗначениеРеквизитаДерева(СтрокаОбъекта, "Контрагент", Истина);	
		СтрокаКонтрагента = ДеревоРазбора.Строки.Найти(ИндексСтрокиКонтрагента, "ИндексСтроки", Истина);
		ИНН = ПолучитьЗначениеРеквизитаДерева(СтрокаКонтрагента, "ИНН", Истина, ДеревоРазбора);
		КПП = ПолучитьЗначениеРеквизитаДерева(СтрокаКонтрагента, "КПП", Истина, ДеревоРазбора);
		СсылкаКонтрагента = СсылкаНаОбъектПоИННКПП("Контрагенты", ИНН, КПП);
		Если СсылкаКонтрагента = Неопределено Тогда
			
			СсылкаКонтрагента = СсылкаНаОбъектПоИННКПП("Контрагенты", ИНН); // если не найден по ИНН и КПП, ищем только по ИНН
			
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СсылкаКонтрагента) Тогда
			
			СсылкаКонтрагента = НовыйКонтрагент(СтрокаКонтрагента, ДеревоРазбора, Неопределено, НаименованиеКонтрагента); // если не находим по ИНН, создаем нового контрагента
			
		КонецЕсли;
		СтрокаКонтрагента.СсылкаНаОбъект = СсылкаКонтрагента;
		
	КонецЕсли;
	ДанныеДокумента.СтрокаОбъекта = СтрокаОбъекта;
	
	АдресДанныхДокумента = ПоместитьВоВременноеХранилище(ДанныеДокумента, ИдентификаторФормы);
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВидЭД", СтрокаОбъекта.ВидЭД);
	СтруктураЭД.Вставить("СпособОбменаЭД", Перечисления.СпособыОбменаЭД.БыстрыйОбмен);
	СтруктураЭД.Вставить("ДанныеФайлаРазбора", ФайлДанных);
	СтруктураЭД.Вставить("Контрагент"    , СсылкаКонтрагента);                                        
	СтруктураЭД.Вставить("НаправлениеЭД" , Перечисления.НаправленияЭД.Входящий);
	СтруктураЭД.Вставить("ВладелецФайла" , Неопределено);  
	СтруктураЭД.Вставить("ДанныеДокумента" , АдресДанныхДокумента);
	
	Возврат СтруктураЭД;  
	
КонецФункции

Функция НовыйКонтрагент(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, НаименованиеКонтрагента = "") Экспорт
	
	ИНН = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ИНН", Истина, ДеревоРазбора);
	КПП = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "КПП", Истина, ДеревоРазбора);
	
	ОфициальноеНаименование = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ОфициальноеНаименование", Истина, ДеревоРазбора);	
	
	Если СсылкаНаВладельца = Неопределено Тогда
		Контрагент= Справочники.Контрагенты.СоздатьЭлемент();		
	Иначе
		Контрагент= СсылкаНаВладельца.ПолучитьОбъект();
	КонецЕсли;

	ДанныеКонтрагента       = СтрокаДляЗагрузки;
	ПолноеНаименование      = ДанныеКонтрагента.Строки.Найти("ПолноеНаименование", "Реквизит", Истина);
	ЮрФизЛицо               = ДанныеКонтрагента.Строки.Найти("ЮрФизЛицо", "Реквизит", Истина);	
	ЮрАдресСтруктурой       = ДанныеКонтрагента.Строки.Найти("АдресСтруктурой", "Реквизит", Истина);
	Телефон       			= ДанныеКонтрагента.Строки.Найти("Телефоны", "Реквизит", Истина);
	Контакты                = ДанныеКонтрагента.Строки.Найти("Контакты", "Реквизит", Истина); 	
	Если ЗначениеЗаполнено(НаименованиеКонтрагента) Тогда
		
		Контрагент.Наименование = НаименованиеКонтрагента;
		
	Иначе
		
		Контрагент.Наименование = ?(ПустаяСтрока(ОфициальноеНаименование), ПолноеНаименование.ЗначениеРеквизита, ОфициальноеНаименование);
		
	КонецЕсли;
	Контрагент.НаименованиеПолное = ?(ПустаяСтрока(ОфициальноеНаименование), ПолноеНаименование.ЗначениеРеквизита, ОфициальноеНаименование);
	Контрагент.ИНН = ИНН;
	Контрагент.КПП = КПП; 		
	Контрагент.ЮридическоеФизическоеЛицо = ?(ЮрФизЛицо = Неопределено, Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, ЮрФизЛицо.ЗначениеРеквизита);
	
	ТаблицаКИ = Новый ТаблицаЗначений;
	ТаблицаКИ.Колонки.Добавить("Приемник");
	ТаблицаКИ.Колонки.Добавить("ВидКИ");
	ТаблицаКИ.Колонки.Добавить("СтруктураКИ");
	ТаблицаКИ.Колонки.Добавить("КлючСтроки");   
	
	// Контактная информация 
	Если ЮрАдресСтруктурой <> Неопределено Тогда
		
		СтрокаКИ = ТаблицаКИ.Добавить();
		СтрокаКИ.Приемник = Контрагент;
		СтрокаКИ.ВидКИ = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
		СтрокаКИ.СтруктураКИ = ЮрАдресСтруктурой.ЗначениеРеквизита;
		
		СтрокаКИ = ТаблицаКИ.Добавить();
		СтрокаКИ.Приемник = Контрагент;
		СтрокаКИ.ВидКИ = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
		СтрокаКИ.СтруктураКИ = ЮрАдресСтруктурой.ЗначениеРеквизита;
			
	КонецЕсли;	
	Если Телефон <> Неопределено Тогда
		
		СтрокаКИ = ТаблицаКИ.Добавить();
		СтрокаКИ.Приемник = Контрагент;
		СтрокаКИ.ВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
		СтрокаКИ.СтруктураКИ = Новый Структура("НомерТелефона", Телефон.ЗначениеРеквизита);		
		                                                  
	КонецЕсли;
	УправлениеКонтактнойИнформацией.ЗаполнитьКонтактнуюИнформациюОбъектов(ТаблицаКИ);	
	
	Если Контакты <> Неопределено Тогда
		
		Для Каждого СтрокаДанных Из Контакты.ЗначениеРеквизита Цикл
			
			ЗаполнитьКИПоПредставлению(Контрагент, СтрокаДанных.Представление, СтрокаДанных.Вид);
			
		КонецЦикла;		
		
	КонецЕсли;

	Контрагент.Записать();
	
	// Банковский счет
	НайденныеСтроки = ДеревоРазбора.Строки.Найти("ОбменСКонтрагентами","ТипОбъекта");
	СтрокаОбъекта = НайденныеСтроки.Строки[0];
	ИДБанковскогоСчета = ПолучитьЗначениеРеквизитаДерева(СтрокаОбъекта, "БанковскийСчетКонтрагента", Истина);
	НайденныеСтроки = ДеревоРазбора.Строки.Найти(ИДБанковскогоСчета, "ИндексСтроки", Истина);
	Если НайденныеСтроки <> Неопределено Тогда
				
		НомерСчета = ПолучитьЗначениеРеквизитаДерева(НайденныеСтроки, "НомерСчета", Истина);
		Если ЗначениеЗаполнено(НомерСчета) Тогда	
		
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("Владелец", Контрагент.Ссылка);
			
			БанковскийСчет = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("БанковскиеСчетаОрганизаций", НомерСчета, ДопПараметры);
			Если БанковскийСчет = Неопределено Тогда
				БанковскийСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
				БанковскийСчет.Владелец = Контрагент.Ссылка;
				БанковскийСчет.НомерСчета = НомерСчета;
			Иначе
				БанковскийСчет = БанковскийСчет.Получитьобъект();
				БанковскийСчет.Владелец = Контрагент.Ссылка;
			КонецЕсли;
					
			Если Не ЗначениеЗаполнено(БанковскийСчет.Банк) Тогда
				
				ДанныеБанка = ПолучитьЗначениеРеквизитаДерева(НайденныеСтроки, "Банк", Истина, ДеревоРазбора);
				Если ДанныеБанка <> Неопределено Тогда
					
					БанкБИК = ДанныеБанка.Код;
					Если ЗначениеЗаполнено(БанкБИК) Тогда
						
						Банк = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Банки", БанкБИК);
						Если Не ЗначениеЗаполнено(Банк) Тогда
							
							МассивБанковИзКлассификатора = Новый Массив;
							МассивБанковИзКлассификатора.Добавить(РаботаСБанкамиБП.СсылкаПоКлассификатору(БанкБИК));
							РаботаСБанкамиБП.ПодобратьБанкИзКлассификатора(МассивБанковИзКлассификатора);
							Банк = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Банки", БанкБИК);
							
						КонецЕсли;						
						БанковскийСчет.Банк = Банк;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			БанковскийСчет.ВалютаДенежныхСредств = Справочники.Валюты.НайтиПоКоду("643"); 
			БанковскийСчет.Наименование = Строка(Банк) + " (" + БанковскийСчет.НомерСчета  + ", руб.)";
			БанковскийСчет.Записать();
			                 
		КонецЕсли;
		
	КонецЕсли;		
	Контрагент.Записать();
	
	Возврат Контрагент.Ссылка;
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаДанныхИзXLS

Процедура ПолучитьДанныеВФорматеБЭД(ПараметрыВызоваСервера, АдресХранилища) Экспорт
		
	ИмяВременногоФайла = ПараметрыВызоваСервера.ИмяВременногоФайла;
	Результат = Новый Структура;
	ДанныеФайла = ЗагрузитьФайлВТаблицу(ИмяВременногоФайла);
	ДанныеДокумента = ПолучитьДанныеДокумента(ДанныеФайла.Лист1);
	Если ДанныеДокумента.Свойство("ТекстОшибки") Тогда
		
		Результат.Вставить("ТекстОшибки", ДанныеДокумента.ТекстОшибки);
		
	Иначе
		
		Если ДанныеДокумента.Свойство("НомерСчФ") Тогда
		
			Результат.Вставить("НомерСчФ", ДанныеДокумента.НомерСчФ);
			Результат.Вставить("ДатаСчФ", ДанныеДокумента.ДатаСчФ);
		
		КонецЕсли;			
		ФайлЭД = ЗаписатьДанныеВXML(ДанныеДокумента);
		Если ФайлЭД = Неопределено Тогда
			
			Результат.Вставить("ТекстОшибки", НСтр("ru = 'Не удалось получить данные из файла. Подробности см. в журнале регистрации.'"));
			
		Иначе
			
			ДвоичныеДанные = Новый ДвоичныеДанные(ФайлЭД);
			Результат.Вставить("ДвоичныеДанные", ДвоичныеДанные);		
			Результат.Вставить("ВидДокумента", ДанныеДокумента.ВидДокумента);		
			УдалитьФайлы(ФайлЭД);
			
		КонецЕсли;
		
	КонецЕсли;	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);	
	УдалитьФайлы(ИмяВременногоФайла);
	
КонецПроцедуры

// Формирует пакеты электронных документов для быстрого обмена.
//
// Параметры:
//  СериализуемыеОбъекты - Массив - ссылки на сериализуемые документы.
//
// Возвращаемое значение:
//  Массив - пакеты электронных документов.
//
Функция СериализоватьОбъекты(СериализуемыеОбъекты) Экспорт
	
	ПакетыЭД = Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(СериализуемыеОбъекты)
		ИЛИ ТипЗнч(СериализуемыеОбъекты) <> Тип("Массив") Тогда
		
		Возврат ПакетыЭД;
		
	КонецЕсли;
	
	// объекты всегда будут одного типа
	ТипСериализуемыхОбъектов = ТипЗнч(СериализуемыеОбъекты[0]);
	
	Если ТипСериализуемыхОбъектов = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ВидЭД = Перечисления.ВидыЭД.ТОРГ12;
		ПакетыЭД = Документы.РеализацияТоваровУслуг.СформироватьРеализациюТоваровИУслугВXML(СериализуемыеОбъекты);
	КонецЕсли;
	
	Если ТипСериализуемыхОбъектов = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.СчетНаОплату;
		Попытка
			
			ПакетыЭД = Документы.СчетНаОплатуПокупателю.СформироватьСчетаНаОплатуПокупателюВXML(СериализуемыеОбъекты);
			
		Исключение
			
			ИмяСобытия = НСтр("ru = 'Отправка документов по электронной почте'");
			ТекстОшибки = НСтр("ru = 'Произошли ошибки при формировании электронного документа. Электронный документ для счета на оплату не создан'");
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.СчетНаОплатуПокупателю,, ТекстОшибки);
			
		КонецПопытки;
		
	КонецЕсли;
	
	Если ТипСериализуемыхОбъектов = Тип("СправочникСсылка.Организации") Тогда
		ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД;
		ПакетыЭД = Справочники.Организации.СформироватьКарточкиОрганизацииВXML(СериализуемыеОбъекты);
	КонецЕсли;
	
	Возврат ПакетыЭД;
	
КонецФункции

#КонецОбласти

#Область ОбменСКонтрагентами

Процедура ЗаписатьДокумент(ДокументОбъект, РежимЗаписи) Экспорт
	
	// Документ записывается дважды:
	// Первый раз запись происходит с установкой признака ОбменДанными.Загрузка = Истина
	// Второй раз запись выполняется без установленного признака ОбменДанными.Загрузка
	
	Попытка
		
		ДокументОбъект.ДополнительныеСвойства.Вставить("ЕстьСоглашение", Истина);
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
		
	Исключение
		
		ЭлектронноеВзаимодействиеБПВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
						НСтр("ru = 'Запись документа ИБ'"), 
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	Попытка
		
		ДокументОбъект.ОбменДанными.Загрузка = Ложь;
		ДокументОбъект.Записать(РежимЗаписи);
		
	Исключение
		
		ЭлектронноеВзаимодействиеБПВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
						НСтр("ru = 'Запись документа ИБ'"), 
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеФизическогоЛица(ДеревоДанных, ТипЛица, СтруктураФИО, НаименованиеДолжности = "") Экспорт
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ТипЛица + ".Фамилия", СтруктураФИО.Фамилия);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ТипЛица + ".Имя", СтруктураФИО.Имя);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ТипЛица + ".Отчество", СтруктураФИО.Отчество);
	Если ЗначениеЗаполнено(НаименованиеДолжности) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ТипЛица + ".Должность", НаименованиеДолжности);
	КонецЕсли;
	
КонецПроцедуры

Функция ИтоговыеСуммыДокумента() Экспорт
	
	Структура = Новый Структура;
	
	// Инициализация итогов по документу.
	Структура.Вставить("ИтогоМест", 0);
	Структура.Вставить("ИтогоСуммаСНДС", 0);
	Структура.Вставить("ИтогоСуммаБезНДС", 0);
	Структура.Вставить("ИтогоНДС", 0);
	Структура.Вставить("ИтогоСуммаСНДСДоКорректировки", 0);
	Структура.Вставить("ИтогоСуммаДоКорректировки", 0);
	Структура.Вставить("ИтогоНДСДоКорректировки", 0);
	Структура.Вставить("ИтогоМассаБрутто", 0);
	Структура.Вставить("ИтогоМассаНетто", 0);
	
	Структура.Вставить("КоличествоПорядковыхНомеровЗаписей", 0);
	Структура.Вставить("СуммаПрописью", "");
	
	Возврат Структура;
	
КонецФункции

Функция ПолучитьИДНоменклатуры(Номенклатура, Характеристика, Упаковка) Экспорт
	
	ИДТовара = Номенклатура.УникальныйИдентификатор();
	ИДХарактеристики = ?(ЗначениеЗаполнено(Характеристика), Характеристика.УникальныйИдентификатор(), "");
	ИДУпаковки = ?(ЗначениеЗаполнено(Упаковка), Упаковка.УникальныйИдентификатор(), "");
	
	Возврат Строка(ИДТовара) + "#" + Строка(ИДХарактеристики) + "#" + Строка(ИДУпаковки);
	
КонецФункции

Функция ПолучитьКорректныйКодСтраны(КодСтраны) Экспорт
	
	Если КодСтраны = NULL Тогда
		Возврат "";
	КонецЕсли;
	
	Для К=1 По СтрДлина(КодСтраны) Цикл
		
		СимволКода = Сред(КодСтраны, К, 1);
		Если Найти("0123456789", СимволКода)=0 Тогда
			//Код страны в электронном документе должен содеражать только цифры
			Возврат "";
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КодСтраны;
	
КонецФункции

Функция ПолучитьНаименованиеНоменклатуры(Наименование, БазоваяЕдиницаНаименование) Экспорт
	
	Возврат Наименование
			+ ?(ЗначениеЗаполнено(БазоваяЕдиницаНаименование), "  (", "")
			+ ?(ЗначениеЗаполнено(БазоваяЕдиницаНаименование), БазоваяЕдиницаНаименование, "")
			+ ?(ЗначениеЗаполнено(БазоваяЕдиницаНаименование), ")", "");
	
КонецФункции

Функция ТаможеннаяДекларация() Экспорт
	
	ТаможеннаяДекларация = Новый ТаблицаЗначений;
	ТаможеннаяДекларация.Колонки.Добавить("КодСтраныПроисхождения");
	ТаможеннаяДекларация.Колонки.Добавить("НомерТаможеннойДекларации");
	Возврат ТаможеннаяДекларация;
	
КонецФункции

Функция СведенияОТаможеннойДекларации() Экспорт
	
	ТаможеннаяДекларация = Новый ТаблицаЗначений;
	ТаможеннаяДекларация.Колонки.Добавить("СтранаПроисхожденияКод");
	ТаможеннаяДекларация.Колонки.Добавить("ТаможеннаяДекларацияНомер");
	Возврат ТаможеннаяДекларация;
	
КонецФункции

Функция СуществуютТовары(Документ) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Документ", Документ);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РеализацияТоваровУслугТовары.Ссылка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &Документ
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РеализацияТоваровУслугВозвратнаяТара.Ссылка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК РеализацияТоваровУслугВозвратнаяТара
	|ГДЕ
	|	РеализацияТоваровУслугВозвратнаяТара.Ссылка = &Документ";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Функция СсылкаНаОбъектПоИННКПП(ТипОбъекта, ИНН, КПП = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник." + ТипОбъекта + " КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН";
	Если ЗначениеЗаполнено(КПП) И КПП <> "0" Тогда
		ТекстЗапроса = ТекстЗапроса
			+ " И
			|	Контрагенты.КПП = &КПП";
		Запрос.УстановитьПараметр("КПП", КПП);
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ИНН", ИНН);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ВидЭлектронногоДокумента

Функция ЭтоКорректировочныйДокумент(СсылкаНаОбъект) Экспорт
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		Возврат СсылкаНаОбъект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		Возврат СсылкаНаОбъект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ВидЭлектронногоДокументаРеализации(Источник) Экспорт
	
	Если ТипЗнч(Источник) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ВидЭлектронногоДокумента");
		Если Не ЗначениеЗаполнено(ВидЭД) Тогда
			ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец;
		КонецЕсли;
		Возврат ВидЭД;
	Иначе
		Возврат Источник.ВидЭлектронногоДокумента;
	КонецЕсли;
	
КонецФункции

Функция ВидЭлектронногоДокументаКорректировки(Источник) Экспорт
	
	ИсходныйИсправляемыйДокумент = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументРеализации(Источник.ДокументРеализации, Истина);
	ИсправляемыйДокумент = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументРеализации(Источник.ДокументРеализации);
	
	Если Источник.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение
		 ИЛИ (ТипЗнч(ИсправляемыйДокумент) = Тип("ДокументСсылка.КорректировкаРеализации") 
		     И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсправляемыйДокумент, "ВидОперации") = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение) Тогда
		 
		// Выполняется согласованное изменение или исправление согласованного изменения
		Возврат Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель;
		
	ИначеЕсли ТипЗнч(ИсходныйИсправляемыйДокумент) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		Возврат ВидЭлектронногоДокументаРеализации(ИсходныйИсправляемыйДокумент);
		
	КонецЕсли;
	
	Возврат Перечисления.ВидыЭД.ПустаяСсылка();
	
КонецФункции

Функция ИсправляемыйСчетФактураВыданный(СчетФактура) Экспорт
	
	ДокументОснованиеСчетаФактуры = ДокументОснованиеСчетаФактурыВыданного(СчетФактура);
	
	Если ЗначениеЗаполнено(ДокументОснованиеСчетаФактуры) Тогда
		Если ТипЗнч(ДокументОснованиеСчетаФактуры) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			ОснованиеДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснованиеСчетаФактуры, "ДокументРеализации");
			Если ЗначениеЗаполнено(ОснованиеДокумента) Тогда
				Возврат УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(ОснованиеДокумента);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ЕдиныйДокумент

Процедура ПроверитьВозможностьФормированияЕдиногоДокумента(Документ, Отказ) Экспорт
	
	ЭтоРеализация = ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг");
	ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ,
		"Организация, Контрагент, ДоговорКонтрагента" + ?(ЭтоРеализация, ", ВидЭлектронногоДокумента", ""));
	Если ЭтоРеализация И Не ЗначениеЗаполнено(ДанныеДокумента.ВидЭлектронногоДокумента) Тогда
		
		СообщениеОбОшибке = НСтр("ru = 'Перед формированием электронного документа заполните поле ""Вид ЭД"" в документе %1.'");
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							СообщениеОбОшибке, Документ);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке, , , , Отказ);
		
	КонецЕсли;
	ИспользоватьУПД = ОбменСКонтрагентами.ИспользованиеУниверсальногоПередаточногоДокумента(
		ДанныеДокумента.Организация, ДанныеДокумента.Контрагент, ДанныеДокумента.ДоговорКонтрагента);
		
	ИспользоватьУКД = ОбменСКонтрагентами.ИспользованиеУниверсальногоКорректировочногоДокумента(
		ДанныеДокумента.Организация, ДанныеДокумента.Контрагент, ДанныеДокумента.ДоговорКонтрагента);

	Если ИспользоватьУПД И ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			
		// Если в реализации указан вид документа - УПД, то формировать его можно только в том случае,
		// если выписан счет-фактура и на основании этого счета-фактуры также будет формироваться УПД.
		СчетФактура = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(Документ);
		
		ВидДоговора =  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ДоговорКонтрагента.ВидДоговора");
		
		Если ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером И НЕ ЗначениеЗаполнено(СчетФактура) Тогда
			СообщениеОбОшибке = НСтр("ru='Для формирования УПД для %1 нужно выписать счет-фактуру.'");
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, Документ);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке, , , , Отказ);
			Возврат;
		КонецЕсли;
		
		АктуальныйЭД = АктуальныйЭлектронныйДокумент(СчетФактура);
		Если ЗначениеЗаполнено(АктуальныйЭД) 
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(АктуальныйЭД, "ТипЭлементаВерсииЭД") <> Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД Тогда
			СообщениеОбОшибке = НСтр("ru='Формирование УПД на основании %1 невозможно, т.к. для счета-фактуры %2
			|уже сформирован электронный документ %3.'");
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							СообщениеОбОшибке, Документ, СчетФактура, АктуальныйЭД);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке, , , , Отказ);
		КонецЕсли;
		
	ИначеЕсли ИспользоватьУКД И ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		
		// Если для исходного документа корректировки реализации указан вид документа - УПД/УКД, 
		// то формировать его можно только в том случае, если для него выписан счет-фактура.
		СчетФактура = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(Документ);
		
		Если НЕ ЗначениеЗаполнено(СчетФактура) Тогда
			СообщениеОбОшибке = НСтр("ru='Для формирования УПД для %1 нужно выписать счет-фактуру.'");
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, Документ);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке, , , , Отказ);
			Возврат;
		КонецЕсли;
		
		АктуальныйЭД = АктуальныйЭлектронныйДокумент(СчетФактура);
		Если ЗначениеЗаполнено(АктуальныйЭД)
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(АктуальныйЭД, "ТипЭлементаВерсииЭД") <> Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД Тогда
			СообщениеОбОшибке = НСтр("ru='Формирование УПД на основании %1 невозможно, т.к. для счета-фактуры %2
			|уже сформирован электронный документ %3.'");
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							СообщениеОбОшибке, Документ, СчетФактура, АктуальныйЭД);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке, , , , Отказ);
		КонецЕсли;
		
	ИначеЕсли (ИспользоватьУКД ИЛИ ИспользоватьУПД) И ТипЗнч(Документ) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		
		// УПД на основании счета-фактуры можно формировать только в том случае,
		// если для документов-оснований еще не созданы электронные документы
		// УКД на основании счета-фактуры можно формировать только в том случае,
		// если для документов-оснований еще не созданы электронные документы
		
		РезультатЗапроса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ДокументыОснования");
		ДокументыОснования = РезультатЗапроса.Выбрать();
		Пока ДокументыОснования.Следующий() Цикл
			
			Основание = ДокументыОснования.ДокументОснование;
			ТипДокумента = ТипЗнч(Основание);
			Если (ТипДокумента = Тип("ДокументСсылка.РеализацияТоваровУслуг") И ИспользоватьУПД)
				ИЛИ (ТипДокумента = Тип("ДокументСсылка.КорректировкаРеализации") И ИспользоватьУКД) Тогда
				
				АктуальныйЭД = АктуальныйЭлектронныйДокумент(Основание);
				Если ЗначениеЗаполнено(АктуальныйЭД) 
					И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(АктуальныйЭД, "ТипЭлементаВерсииЭД") <> Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
					И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(АктуальныйЭД, "ТипЭлементаВерсииЭД") <> Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД  Тогда
					
					СообщениеОбОшибке = НСтр("ru='Формирование УКД на основании %1 не возможно, т.к. для документа-основания %2
					|уже сформирован электронный документ %3.'");
					СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									СообщениеОбОшибке, Документ, Основание, АктуальныйЭД);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке, , , , Отказ);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПризнакТовараЕдиногоДокумента(Товар) Экспорт
	
	Если ТипЗнч(Товар) = Тип("СправочникСсылка.Номенклатура") Тогда
		Если ЗначениеЗаполнено(Товар)
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Товар, "Услуга") Тогда
			Возврат "3"; // Услуга
		Иначе
			Возврат "1"; // Имущество
		КонецЕсли;
	ИначеЕсли ТипЗнч(Товар) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
		Возврат "1"; // Имущество
	ИначеЕсли ТипЗнч(Товар) = Тип("СправочникСсылка.НематериальныеАктивы") Тогда
		Возврат "4"; // Имущественные права;
	Иначе
		Возврат "5"; // Иное
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДанныеСчетаФактурыУПД(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных) Экспорт
	
	ЗаполнитьДеревоДанныхУПД(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПервичногоДокументаУПД(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных) Экспорт
	
	ДанныеШапки = ДанныеДляФормированияЭД.ДанныеШапки;
	
	Если ДанныеШапки.Исправление Тогда
		ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Исправление;
	ИначеЕсли СтруктураЭД.Свойство("ВидОперацииЭД") Тогда
		ВидОперацииЭД = СтруктураЭД.ВидОперацииЭД;
	Иначе
		ВидОперацииЭД = Перечисления.ВидыОперацийЭД.ПродажаКомиссия;
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВидОперации", ВидОперацииЭД);
	
	ЕстьТовары = Ложь;
	ЕстьУслуги = Ложь;
	Для Каждого Строка Из ДанныеДляФормированияЭД.ТаблицаДокумента Цикл
		ПризнакТовара = ЭлектронноеВзаимодействиеБП.ПризнакТовараЕдиногоДокумента(Строка.Товар);
		Если ПризнакТовара = "1" Тогда
			ЕстьТовары = Истина;
		Иначе
			ЕстьУслуги = Истина;
		КонецЕсли;
	КонецЦикла;
	
	СоставСодержания = Новый Массив;
	Если ЕстьТовары Тогда
		СоставСодержания.Добавить(НСтр("ru = 'Товары переданы.'"));
	КонецЕсли;
	Если ЕстьУслуги Тогда
		СоставСодержания.Добавить(НСтр("ru = 'Услуги оказаны в полном объеме.'"));
	КонецЕсли;
	СодержаниеОперации = СтрСоединить(СоставСодержания, " ");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации", СодержаниеОперации);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаОтгрузкиТоваров", ДанныеШапки.Дата);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияДокументаОтгрузки", ДанныеДляФормированияЭД.ДокументыОснования);
	
	ОснованиеОтгрузкиТоваров = Новый ТаблицаЗначений;
	ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументНаименование");
	ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументНомер");
	ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументДата");
	ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументДопСведения");
	
	Если ЗначениеЗаполнено(ДанныеШапки.ОснованиеДата)
		ИЛИ ЗначениеЗаполнено(ДанныеШапки.ОснованиеНомер) Тогда
		НоваяСтрока = ОснованиеОтгрузкиТоваров.Добавить();
		НоваяСтрока.ДокументНаименование = НСтр("ru = 'Договор'");
		НоваяСтрока.ДокументНомер = ДанныеШапки.ОснованиеНомер;
		НоваяСтрока.ДокументДата = НачалоДня(ДанныеШапки.ОснованиеДата);
	КонецЕсли;
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ОснованиеОтгрузкиТоваров, "ОснованиеОтгрузкиТоваров");
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОТранспортировке", ДанныеШапки.ДанныеТранспортнаяНакладная);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ИныеСведенияОбОтгрузке", ДанныеШапки.СопроводительныеДокументы);
	
	ТранспортнаяНакладная = Новый ТаблицаЗначений;
	ТранспортнаяНакладная.Колонки.Добавить("ТранспортнаяНакладнаяНомер");
	ТранспортнаяНакладная.Колонки.Добавить("ТранспортнаяНакладнаяДата");
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТранспортнаяНакладная, "ТранспортнаяНакладная");
	
	Если ЗначениеЗаполнено(ДанныеШапки.Перевозчик) Тогда
		СведенияОПеревозчике = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ДанныеШапки.Перевозчик);
		ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОПеревозчике, "СведенияОПеревозчике",,, ДанныеШапки.Дата);
	КонецЕсли;
	
	//ДанныеШапки.ДолжностьКладовщика = ?(ЗначениеЗаполнено(ДанныеШапки.ДолжностьКладовщика),
	//	ДанныеШапки.ДолжностьКладовщика, "_");
	Если ЗначениеЗаполнено(ДанныеШапки.ДолжностьКладовщика)
		И ЗначениеЗаполнено(ДанныеШапки.Кладовщик) Тогда
		
		// Кладовщик работает в организации
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Должность", Строка(ДанныеШапки.ДолжностьКладовщика));
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Фамилия", ДанныеШапки.КладовщикФИО.Фамилия);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Имя", ДанныеШапки.КладовщикФИО.Имя);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Отчество", ДанныеШапки.КладовщикФИО.Отчество);
			
	ИначеЕсли ЗначениеЗаполнено(ДанныеШапки.Кладовщик) Тогда
		// Кладовщик не работает в организации
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Фамилия", ДанныеШапки.КладовщикФИО.Фамилия);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Имя", ДанныеШапки.КладовщикФИО.Имя);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Отчество", ДанныеШапки.КладовщикФИО.Отчество);
	КонецЕсли;
	
	Если ДанныеШапки.ОснованиеВид = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		
		ТекстоваяИнформация = Новый ТаблицаЗначений;
		ТекстоваяИнформация.Колонки.Добавить("Идентификатор");
		ТекстоваяИнформация.Колонки.Добавить("Значение");
		
		НоваяСтрока = ТекстоваяИнформация.Добавить();
		НоваяСтрока.Идентификатор = "ПередачаТовараКомитентом";
		НоваяСтрока.Значение = "Истина";
		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТекстоваяИнформация, "ДопДанныеДокументаОтгрузки.ТекстоваяИнформация");
		
	КонецЕсли;
	
	Если СтруктураЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД // УПД первичка
		ИЛИ ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Комиссия Тогда // передача товаров комиссионеру
		
		ЗаполнитьДеревоДанныхУПД(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДеревоДанныхУПД(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных)
	
	ДанныеШапки = ДанныеДляФормированияЭД.ДанныеШапки;
	СчетФактураНаАванс = ДанныеДляФормированияЭД.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс;
	ВидОперацииЭД = Неопределено;
	СтруктураЭД.Свойство("ВидОперацииЭД", ВидОперацииЭД);
	
	Если СчетФактураНаАванс ИЛИ СтруктураЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД Тогда // УПД СФ + первичка
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СсылкаСчетаФактуры", ДанныеДляФормированияЭД.СчетФактура);
		
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента", ДанныеШапки.Номер);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента",  ДанныеШапки.Дата);
	Если ДанныеШапки.Исправление Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления", ДанныеШапки.НомерИсправления);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления",  ДанныеШапки.ДатаИсправления);
	КонецЕсли;
	
	Если СчетФактураНаАванс ИЛИ СтруктураЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД Тогда // УПД СФ + первичка
		
		Если ДанныеДляФормированияЭД.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
			ИЛИ ДанныеДляФормированияЭД.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента
			ИЛИ ДанныеДляФормированияЭД.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВидСчетаФактуры", "Авансовый");
		Иначе
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВидСчетаФактуры", "Реализация");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Комиссия Тогда
		
		СведенияОПокупателе = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ДанныеШапки.Грузополучатель, ДанныеШапки.Дата);
		СведенияОПоставщике  = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ДанныеШапки.Грузоотправитель, ДанныеШапки.Дата);
		
	Иначе
		
		СведенияОПокупателе = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ДанныеШапки.Покупатель, ДанныеШапки.Дата);
		СведенияОПоставщике  = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ДанныеШапки.Поставщик, ДанныеШапки.Дата);
		СведенияОПокупателе.ИНН = ДанныеШапки.ИННпокупателя;
		СведенияОПокупателе.КПП = ДанныеШапки.КППпокупателя;
		СведенияОПоставщике.ИНН = ДанныеШапки.ИННпоставщика;
		СведенияОПоставщике.КПП = ДанныеШапки.КППпоставщика;
		
	КонецЕсли;
	
	ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОПоставщике, "СведенияОПродавце", "Юр",, ДанныеШапки.Дата);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СоставительДокументаНаименование", СведенияОПоставщике.ПолноеНаименование);
	
	ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОПокупателе, "СведенияОПокупателе", "Юр",, ДанныеШапки.Дата);
	
	Если ДанныеШапки.Свойство("Комиссионер")
		И ЗначениеЗаполнено(ДанныеШапки.Комиссионер) Тогда
		
		СведенияОКомиссионере = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(
									ДанныеШапки.Комиссионер, ДанныеШапки.Дата);
		
		ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОКомиссионере, "СведенияОКомиссионере", "Юр",, ДанныеШапки.Дата);
		
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод", ДанныеШапки.ВалютаКод);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ВалютаНаименование", ДанныеШапки.ВалютаНаименованиеПолное);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ВалютаКурс", ДанныеШапки.ВалютаКурс);
	
	Если ЗначениеЗаполнено(ДанныеШапки.ИдентификаторГосКонтракта) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ДополнительныеСведенияОбУчастниках.ИдентификаторГосКонтракта", ДанныеШапки.ИдентификаторГосКонтракта);
	КонецЕсли;
	
	ДокументыОснования = Новый Массив;
	Для Каждого ДокументОснование Из ДанныеДляФормированияЭД.ДокументыОснования Цикл
		ДокументыОснования.Добавить(ДокументОснование);
	КонецЦикла;
	
	Если ДанныеШапки.Исправление
		И ЗначениеЗаполнено(ДанныеДляФормированияЭД.СчетФактура) Тогда
		
		ИсправляемыйСчетФактура = ЭлектронноеВзаимодействиеБП.ИсправляемыйСчетФактураВыданный(ДанныеДляФормированияЭД.СчетФактура);
		Если ЗначениеЗаполнено(ИсправляемыйСчетФактура) Тогда
			ДокументыОснования.Добавить(ИсправляемыйСчетФактура);
		КонецЕсли;
		
	КонецЕсли;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры", ДокументыОснования);
	
	ПлатежныеДокументы = Новый ТаблицаЗначений();
	ПлатежныеДокументы.Колонки.Добавить("ДатаПРД");
	ПлатежныеДокументы.Колонки.Добавить("НомерПРД");
	
	Если ДанныеШапки.ТаблицаПлатежныхДокументов <> Неопределено Тогда
		Для Каждого ПлатежныйДокумент ИЗ ДанныеШапки.ТаблицаПлатежныхДокументов Цикл
			НовыйПлатежныйДокумент = ПлатежныеДокументы.Добавить();
			НовыйПлатежныйДокумент.ДатаПРД  = ПлатежныйДокумент.ДатаДокумента;
			НовыйПлатежныйДокумент.НомерПРД = ПлатежныйДокумент.НомерДокумента;
		КонецЦикла;
	КонецЕсли;
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ПлатежныеДокументы, "ПлатежноРасчетныеДокументы");
	
	Если СчетФактураНаАванс Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации", 
			НСтр("ru = 'Регистрация счет-фактуры на аванс'"));
		
	КонецЕсли;
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки");
	ТаблицаТоваров.Колонки.Добавить("ТоварНаименование");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
	ТаблицаТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("ЦенаЗаЕдиницуИзмерения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровБезНалога", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("НалоговаяСтавка");
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровСНалогом", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаАкциза", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНалога", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СведенияОТаможеннойДекларации", Новый ОписаниеТипов("ТаблицаЗначений"));
	ТаблицаТоваров.Колонки.Добавить("СтранаПроисхожденияНаименование", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
	ТаблицаТоваров.Колонки.Добавить("Признак", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1)));
	ТаблицаТоваров.Колонки.Добавить("ТоварКод", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
	ТаблицаТоваров.Колонки.Добавить("ТоварИдентификатор", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
	
	НомерСтроки = 1;
	ТолькоУслуги = Истина;
	
	Для каждого Строка Из ДанныеДляФормированияЭД.ТаблицаДокумента Цикл
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		
		НоваяСтрока.НомерСтроки         = НомерСтроки;
		НоваяСтрока.ТоварНаименование   = Строка.ТоварНаименование;
		
		Если ПустаяСтрока(Строка.ЕдиницаИзмеренияКод) Тогда
			ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Товар, "ЕдиницаИзмерения");
			Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда // берем значение ед. измерения из карточки номенклатуры
				РеквизитыЕдиницыИзмерения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЕдиницаИзмерения, "Наименование, Код");
				НоваяСтрока.ЕдиницаИзмеренияКод          = СокрЛП(РеквизитыЕдиницыИзмерения.Код);
				НоваяСтрока.ЕдиницаИзмеренияНаименование = СокрЛП(РеквизитыЕдиницыИзмерения.Наименование);
			КонецЕсли;
		Иначе
			НоваяСтрока.ЕдиницаИзмеренияКод          = СокрЛП(Строка.ЕдиницаИзмеренияКод);
			НоваяСтрока.ЕдиницаИзмеренияНаименование = СокрЛП(Строка.ЕдиницаИзмеренияНаименование);
		КонецЕсли; 
		
		НоваяСтрока.Количество                = Строка.Количество;
		НоваяСтрока.ЦенаЗаЕдиницуИзмерения    = Строка.Цена;
		НоваяСтрока.СтоимостьТоваровБезНалога = Строка.Стоимость;
		НоваяСтрока.НалоговаяСтавка           = Строка.СтавкаНДС;
		НоваяСтрока.СуммаНалога               = Строка.СуммаНДС;
		НоваяСтрока.СтоимостьТоваровСНалогом  = Строка.Всего;
		
		Если ЗначениеЗаполнено(Строка.НомерГТД) Тогда
			НоваяСтрока.СведенияОТаможеннойДекларации = ЭлектронноеВзаимодействиеБП.СведенияОТаможеннойДекларации();
			Декларация = НоваяСтрока.СведенияОТаможеннойДекларации.Добавить();
			Декларация.СтранаПроисхожденияКод    = ПолучитьКорректныйКодСтраны(Строка.СтранаПроисхожденияКод);
			Декларация.ТаможеннаяДекларацияНомер = ?(ЗначениеЗаполнено(Строка.НомерГТД), СокрЛП(Строка.НомерГТД), "");
			НоваяСтрока.СтранаПроисхожденияНаименование = Строка.СтранаПроисхождения;
		КонецЕсли;
		
		НоваяСтрока.Признак = ЭлектронноеВзаимодействиеБП.ПризнакТовараЕдиногоДокумента(Строка.Товар);
		НоваяСтрока.ТоварКод           = Строка.ТоварКод;
		НоваяСтрока.ТоварИдентификатор = Строка.Товар.УникальныйИдентификатор();
		
		Если ТолькоУслуги
			И НоваяСтрока.Признак = "1" Тогда
			ТолькоУслуги = Ложь;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоКОплате.ВсегоСтоимостьТоваровБезНалога", ТаблицаТоваров.Итог("СтоимостьТоваровБезНалога"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоКОплате.ВсегоСтоимостьТоваровСНалогом", ТаблицаТоваров.Итог("СтоимостьТоваровСНалогом"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоКОплате.ВсегоСуммаНалога", ТаблицаТоваров.Итог("СуммаНалога"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоКОплате.ВсегоКоличество", ТаблицаТоваров.Итог("Количество"));
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "СведенияОТоварах");
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ТолькоУслуги", ТолькоУслуги);
	
	// Не выводим данные Грузоотправителя и Грузополучателя, если в документе только услуги.
	Если Не ТолькоУслуги Тогда
		
		Если НЕ ЗначениеЗаполнено(ДанныеШапки.Грузоотправитель)ИЛИ (ДанныеШапки.Грузоотправитель = "он же") Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОГрузоотправителе.ОнЖе", Истина);
		Иначе
			СведенияОГрузоотправителе = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ДанныеШапки.Грузоотправитель, ДанныеШапки.Дата);
			ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОГрузоотправителе, "СведенияОГрузоотправителе.Грузоотправитель", "Факт",, ДанныеШапки.Дата);
		КонецЕсли;
		
		Грузополучатель = ?(НЕ ЗначениеЗаполнено(ДанныеШапки.Грузополучатель) ИЛИ (ДанныеШапки.Грузополучатель = "он же"),
			СтруктураЭД.Контрагент, ДанныеШапки.Грузополучатель);
		СведенияОГрузополучателе = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(Грузополучатель, ДанныеШапки.Дата);
		ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОГрузополучателе, "СведенияОГрузополучателе", "Факт",, ДанныеШапки.Дата);
		
	КонецЕсли;
	
	// Передача данных об авансах
	Если СчетФактураНаАванс И ДанныеДляФормированияЭД.ТаблицаДокумента.Количество() > 0 Тогда
		
		// добавление доп. данных
		ТаблицаДопДанных = Новый ТаблицаЗначений;
		ТаблицаДопДанных.Колонки.Добавить("Идентификатор");
		ТаблицаДопДанных.Колонки.Добавить("Значение");
		
		ТаблицаАвансы = Новый ТаблицаЗначений;
		ТаблицаАвансы.Колонки.Добавить("Сумма");
		ТаблицаАвансы.Колонки.Добавить("СуммаНДС");
		ТаблицаАвансы.Колонки.Добавить("СтавкаНДС");
		
		Для Каждого СтрокаДанных Из ДанныеДляФормированияЭД.ТаблицаДокумента Цикл
			
			СтрокаАвансы = ТаблицаАвансы.Добавить();
			СтрокаАвансы.Сумма = СтрокаДанных.Всего;
			СтрокаАвансы.СуммаНДС = СтрокаДанных.СуммаНДС;
			СтрокаАвансы.СтавкаНДС = СтрокаДанных.СтавкаНДС;
			
		КонецЦикла;
		
		СтрокаТаблицы = ТаблицаДопДанных.Добавить();
		СтрокаТаблицы.Идентификатор = "Авансы";
		СтрокаТаблицы.Значение = ОбщегоНазначения.ЗначениеВСтрокуXML(ТаблицаАвансы);
		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаДопДанных, "ДопДанныеСчетаФактуры.ТекстоваяИнформация");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеКорректировочногоСчетаФактурыУКД(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных) Экспорт
	
	ЗаполнитьДеревоДанныхУКД(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПервичногоДокументаУКД(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных) Экспорт
	
	ДанныеШапки = ДанныеДляФормированияЭД.ДанныеШапки;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации", "Предлагаю изменить стоимость");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаНаправленияНаСогласование", ДанныеШапки.Дата);
	
	ОснованиеКорректировки = Новый ТаблицаЗначений;
	ОснованиеКорректировки.Колонки.Добавить("ДокументНаименование");
	ОснованиеКорректировки.Колонки.Добавить("ДокументНомер");
	ОснованиеКорректировки.Колонки.Добавить("ДокументДата");
	ОснованиеКорректировки.Колонки.Добавить("ДокументДопСведения");
	
	Если ЗначениеЗаполнено(ДанныеШапки.ОснованиеДата)
		ИЛИ ЗначениеЗаполнено(ДанныеШапки.ОснованиеНомер) Тогда
		НоваяСтрока = ОснованиеКорректировки.Добавить();
		НоваяСтрока.ДокументНаименование = НСтр("ru = 'Договор'");
		НоваяСтрока.ДокументНомер = ДанныеШапки.ОснованиеНомер;
		НоваяСтрока.ДокументДата = НачалоДня(ДанныеШапки.ОснованиеДата);
	КонецЕсли;
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ОснованиеКорректировки, "ОснованиеКорректировки");
	
	МассивОснований = Новый Массив;
	
	Для Каждого Основание ИЗ ДанныеШапки.ТаблицаРеквизитовОснований Цикл
		Если Основание.УчитыватьИсправлениеИсходногоДокумента Тогда
			ОписаниеОснования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = '№ %1 от %2, с учетом исправления № %3 от %4'"),
									Основание.НомерСчетаФактуры, Формат(Основание.ДатаСчетаФактуры, "ДЛФ=D"),
									Основание.НомерИсправления, Формат(Основание.ДатаИсправления, "ДЛФ=D"));
		Иначе
			ОписаниеОснования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = '№ %1 от %2'"),
									Основание.НомерСчетаФактуры, Формат(Основание.ДатаСчетаФактуры, "ДЛФ=D"));
		КонецЕсли;
		МассивОснований.Добавить(ОписаниеОснования);
	КонецЦикла;
	
	Если МассивОснований.Количество() > 0 Тогда
		ОписаниеОснований = СтрСоединить(МассивОснований, ", ");
		ОписаниеОснований = НСтр("ru = 'Универсальный передаточный документ'") + " " + ОписаниеОснований;
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПередаточныхДокументов",
																	ОписаниеОснований);
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ИныеСведенияОбИзмененииСтоимости",
																	ДанныеШапки.ИныеСведения);

	Если СтруктураЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД Тогда
		
		ЗаполнитьДеревоДанныхУКД(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДеревоДанныхУКД(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных)
	
	ДанныеШапки = ДанныеДляФормированияЭД.ДанныеШапки;
	
	Если СтруктураЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
		ИЛИ СтруктураЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СсылкаКорректировочногоСчетаФактуры", ДанныеДляФормированияЭД.СчетФактура);
		
	КонецЕсли;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента", ДанныеШапки.Номер);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента",  ДанныеШапки.Дата);
	Если ДанныеШапки.Исправление И СтруктураЭД.ТипЭлементаВерсииЭД <> Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления",
			ДанныеШапки.НомерИсправленияКорректировочного);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления",
			ДанныеШапки.ДатаИсправленияКорректировочного);
	КонецЕсли;
	
	Если ДанныеШапки.ТаблицаРеквизитовОснований.Количество() > 0 Тогда
		Основание = ДанныеШапки.ТаблицаРеквизитовОснований[0];
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсходногоДокумента", Основание.НомерСчетаФактуры);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсходногоДокумента", Основание.ДатаСчетаФактуры);
		Если Основание.УчитыватьИсправлениеИсходногоДокумента Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправленияИсходногоДокумента",
				Основание.НомерИсправления);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправленияИсходногоДокумента",
				Основание.ДатаИсправления);
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД Тогда
	
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсходногоДокумента", "-");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсходногоДокумента", ДанныеШапки.Дата);
		
	КонецЕсли;
	
	СведенияОПокупателе = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ДанныеШапки.Покупатель, ДанныеШапки.Дата);
	СведенияОПоставщике  = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ДанныеШапки.Поставщик, ДанныеШапки.Дата);
	СведенияОПокупателе.ИНН = ДанныеШапки.ИННпокупателя;
	СведенияОПокупателе.КПП = ДанныеШапки.КППпокупателя;
	СведенияОПоставщике.ИНН = ДанныеШапки.ИННпродавца;
	СведенияОПоставщике.КПП = ДанныеШапки.КППпродавца;
	
	ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОПоставщике, "СведенияОПродавце", "Юр",, ДанныеШапки.Дата);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СоставительДокументаНаименование", СведенияОПоставщике.ПолноеНаименование);
		
	ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОПокупателе,      "СведенияОПокупателе", "Юр",, ДанныеШапки.Дата);
	ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОПокупателе,      "СведенияОКомиссионере", "Юр",, ДанныеШапки.Дата);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод", ДанныеШапки.ВалютаКод);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ВалютаНаименование", ДанныеШапки.ВалютаНаименованиеПолное);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ВалютаКурс", ДанныеШапки.ВалютаКурс);
	
	Если ЗначениеЗаполнено(ДанныеШапки.ИдентификаторГосКонтракта) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ДополнительныеСведенияОбУчастниках.ИдентификаторГосКонтракта", ДанныеШапки.ИдентификаторГосКонтракта);
	КонецЕсли;
	
	ДокументыОснования = Новый Массив;
	Для Каждого ДокументОснование Из ДанныеДляФормированияЭД.ДокументыОснования Цикл
		ДокументыОснования.Добавить(ДокументОснование);
	КонецЦикла;
	
	Если СтруктураЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
		ИЛИ СтруктураЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД Тогда
		
		ИсправляемыйСчетФактура = ЭлектронноеВзаимодействиеБП.ИсправляемыйСчетФактураВыданный(ДанныеДляФормированияЭД.СчетФактура);
		Если ЗначениеЗаполнено(ИсправляемыйСчетФактура) Тогда
			ДокументыОснования.Добавить(ИсправляемыйСчетФактура);
		КонецЕсли;
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры", ДокументыОснования);
		
	Иначе
		
		ДокументРеализации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеДляФормированияЭД.Ссылка, "ДокументРеализации");
		Если ЗначениеЗаполнено(ДокументРеализации) Тогда
			
			ДокументыОснования.Добавить(ДокументРеализации);
			
		КонецЕсли;
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры", ДокументыОснования);
		
	КонецЕсли;
	
	Если СтруктураЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД Тогда // УКД СФ без первичного документа
		
		ОснованиеКорректировки = Новый ТаблицаЗначений;
		ОснованиеКорректировки.Колонки.Добавить("ДокументНаименование");
		ОснованиеКорректировки.Колонки.Добавить("ДокументНомер");
		ОснованиеКорректировки.Колонки.Добавить("ДокументДата");
		ОснованиеКорректировки.Колонки.Добавить("ДокументДопСведения");
		
		Если ЗначениеЗаполнено(ДанныеШапки.ОснованиеДата)
			ИЛИ ЗначениеЗаполнено(ДанныеШапки.ОснованиеНомер) Тогда
			НоваяСтрока = ОснованиеКорректировки.Добавить();
			НоваяСтрока.ДокументНаименование = НСтр("ru = 'Договор'");
			НоваяСтрока.ДокументНомер = ДанныеШапки.ОснованиеНомер;
			НоваяСтрока.ДокументДата = НачалоДня(ДанныеШапки.ОснованиеДата);
		КонецЕсли;
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ОснованиеКорректировки, "ОснованиеКорректировки");
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации", "Предлагаю изменить стоимость");
		
	КонецЕсли;
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки");
	ТаблицаТоваров.Колонки.Добавить("ТоварНаименование");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКодДоКорректировки");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТаблицаТоваров.Колонки.Добавить("КоличествоДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("ЦенаЗаЕдиницуИзмеренияДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("ЦенаЗаЕдиницуИзмерения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровБезНалогаДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровБезНалога", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровБезНалогаУвеличение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровБезНалогаУменьшение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("НалоговаяСтавкаДоКорректировки");
	ТаблицаТоваров.Колонки.Добавить("НалоговаяСтавка");
	ТаблицаТоваров.Колонки.Добавить("СуммаНалогаДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНалога", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНалогаУвеличение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНалогаУменьшение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаАкцизаДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаАкциза", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаАкцизаУвеличение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаАкцизаУменьшение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровСНалогомДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровСНалогом", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровСНалогомУвеличение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровСНалогомУменьшение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("ТоварИдентификатор", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
	
	НомерСтроки = 1;
	ТолькоУслуги = Ложь;
	Для Каждого Строка Из ДанныеДляФормированияЭД.ТаблицаДокумента Цикл
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		
		НоваяСтрока.НомерСтроки              = НомерСтроки;
		НоваяСтрока.ТоварНаименование        = Строка.НаименованиеНоменклатуры;
		НоваяСтрока.ЕдиницаИзмеренияКодДоКорректировки = СокрЛП(Строка.ЕдиницаИзмеренияКод);
		НоваяСтрока.ЕдиницаИзмеренияКод                = СокрЛП(Строка.ЕдиницаИзмеренияКод);
		НоваяСтрока.КоличествоДоКорректировки = Строка.КоличествоДоИзменения;
		НоваяСтрока.Количество                = Строка.КоличествоПослеИзменения;
		НоваяСтрока.ЦенаЗаЕдиницуИзмеренияДоКорректировки    = Строка.ЦенаДоИзменения;
		НоваяСтрока.ЦенаЗаЕдиницуИзмерения                   = Строка.ЦенаПослеИзменения;
		НоваяСтрока.СтоимостьТоваровБезНалогаДоКорректировки = Строка.СтоимостьБезНДСДоИзменения;
		НоваяСтрока.СтоимостьТоваровБезНалога                = Строка.СтоимостьБезНДСПослеИзменения;
		НоваяСтрока.СтоимостьТоваровБезНалогаУвеличение      = Строка.РазницаБезНДСУвеличение;
		НоваяСтрока.СтоимостьТоваровБезНалогаУменьшение      = Строка.РазницаБезНДСУменьшение;
		НоваяСтрока.НалоговаяСтавкаДоКорректировки = Строка.СтавкаНДС;
		НоваяСтрока.НалоговаяСтавка                = Строка.СтавкаНДС;
		НоваяСтрока.СуммаНалогаДоКорректировки = Строка.СуммаНДСДоИзменения;
		НоваяСтрока.СуммаНалога                = Строка.СуммаНДСПослеИзменения;
		НоваяСтрока.СуммаНалогаУвеличение      = Строка.РазницаНДСУвеличение;
		НоваяСтрока.СуммаНалогаУменьшение      = Строка.РазницаНДСУменьшение;
		НоваяСтрока.СтоимостьТоваровСНалогомДоКорректировки = Строка.СтоимостьСНДСДоИзменения;
		НоваяСтрока.СтоимостьТоваровСНалогом                = Строка.СтоимостьСНДСПослеИзменения;
		НоваяСтрока.СтоимостьТоваровСНалогомУвеличение      = Строка.РазницаСНДСУвеличение;
		НоваяСтрока.СтоимостьТоваровСНалогомУменьшение      = Строка.РазницаСНДСУменьшение;
		НоваяСтрока.ТоварИдентификатор = Строка.Товар.УникальныйИдентификатор();
		
		Если ТолькоУслуги
			И ЭлектронноеВзаимодействиеБП.ПризнакТовараЕдиногоДокумента(НоваяСтрока.Товар) = "1" Тогда
			ТолькоУслуги = Ложь;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровБезНалогаУвеличение", ТаблицаТоваров.Итог("СтоимостьТоваровБезНалогаУвеличение"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровСНалогомУвеличение", ТаблицаТоваров.Итог("СтоимостьТоваровСНалогомУвеличение"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСуммаНалогаУвеличение", ТаблицаТоваров.Итог("СуммаНалогаУвеличение"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровБезНалогаУменьшение", ТаблицаТоваров.Итог("СтоимостьТоваровБезНалогаУменьшение"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровСНалогомУменьшение", ТаблицаТоваров.Итог("СтоимостьТоваровСНалогомУменьшение"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСуммаНалогаУменьшение", ТаблицаТоваров.Итог("СуммаНалогаУменьшение"));
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "СведенияОТоварах");
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ТолькоУслуги", ТолькоУслуги);
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеДокументовИнформационнойБазы

Функция НайтиСоздатьСчетНаОплатуПоставщика(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляСчетаНаОплатуПоставщика(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда 
		ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	КонецЕсли;
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
		Если ДокументОбъект.Проведен Тогда
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		КонецЕсли;
	Иначе // создаем новый 
		ДокументОбъект = Документы.СчетНаОплатуПоставщика.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		
		ЗаполнениеДокументов.Заполнить(ДокументОбъект, ДанныеЗаполнения);
		
		СписокВидовДоговоров = Новый СписокЗначений;
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
		ОтборПоВалюте       = Новый Структура("ЗначениеОтбора", ДокументОбъект.ВалютаДокумента);
		СтруктураПараметров = Новый Структура("ВалютаВзаиморасчетов", ОтборПоВалюте);
		
		РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(ДокументОбъект.ДоговорКонтрагента,
						ДокументОбъект.Контрагент, ДокументОбъект.Организация, СписокВидовДоговоров, СтруктураПараметров);

	КонецЕсли;
	
	// вручную переопределим, если требуется
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
	
	ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
	
	ЭлектронноеВзаимодействиеБП.ЗаписатьДокумент(ДокументОбъект, РежимЗаписи);
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции

Функция НайтиСоздатьПоступлениеТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВидОперации = ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "ВидОперации", Истина, ДеревоРазбора);	
	Если ВидОперации = Перечисления.ВидыОперацийЭД.Исправление Тогда
		
		ДанныеДляЗагрузки = ПодготовитьСтруктуруДляКорректировкиПоступления(СтрокаДляЗагрузки, ДеревоРазбора);
		
		Документ = СсылкаНаВладельца;
		ЗаполнитьДокументКорректировкиПоступления(Документ, ДанныеДляЗагрузки);
		
	Иначе
		
		ДанныеДляЗагрузки = ПодготовитьСтруктуруДляПоступленияТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора);
		
		
		Документ = СсылкаНаВладельца;
		ЗаполнитьДокументПоступленияТоваровУслуг(Документ, ДанныеДляЗагрузки);
		
	КонецЕсли;
	
	Возврат Документ;
	
КонецФункции

Процедура НайтиСоздатьПоступлениеТоваровУслугДляЕдиногоДокумента(ДеревоДанных, СсылкаНаВладельца = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеУПД = ПодготовитьСтруктуруДляПоступленияТоваровУслугУПД(ДеревоДанных);
	
	Если ДанныеУПД.Шапка.Исправление Тогда
		ЗаполнитьДокументКорректировкиПоступления(СсылкаНаВладельца, ДанныеУПД);
	Иначе
		ЗаполнитьДокументПоступленияТоваровУслуг(СсылкаНаВладельца, ДанныеУПД);
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиСоздатьКорректировкуПоступления(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляКорректировкиПоступления(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Документ = СсылкаНаВладельца;
	ЗаполнитьДокументКорректировкиПоступления(Документ, ДанныеДляЗагрузки);
	
	Возврат Документ;
	
КонецФункции

Процедура НайтиСоздатьКорректировкуПоступленияДляЕдиногоДокумента(ДеревоДанных, СсылкаНаВладельца = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеУКД = ПодготовитьСтруктуруДляКорректировкиПоступленияУКД(ДеревоДанных);
	
	ЗаполнитьДокументКорректировкиПоступления(СсылкаНаВладельца, ДанныеУКД);
	
КонецПроцедуры

Функция НайтиСоздатьСчетФактуру(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляСчетФактуры(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Документ = СсылкаНаВладельца;
	ЗаполнитьДокументСчетФактураПолученный(Документ, ДанныеДляЗагрузки);
	
	Возврат Документ;
	
КонецФункции

Процедура НайтиСоздатьСчетФактуруДляЕдиногоДокумента(ДеревоДанных, СсылкаНаВладельца) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеУПД = ПодготовитьСтруктуруДляСчетаФактурыУПД(ДеревоДанных);
	
	ЗаполнитьДокументСчетФактураПолученный(СсылкаНаВладельца, ДанныеУПД);
	
КонецПроцедуры

Процедура НайтиСоздатьКорректировочныйСчетФактуруДляЕдиногоДокумента(ДеревоДанных, СсылкаНаВладельца) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеУКД = ПодготовитьСтруктуруДляСчетаФактурыУКД(ДеревоДанных);
	
	ЗаполнитьДокументСчетФактураПолученный(СсылкаНаВладельца, ДанныеУКД);
	
КонецПроцедуры

Функция НайтиСоздатьОтчетКомиссионера(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Текст = "";
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляОтчетаКомиссионера(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда 
		ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	КонецЕсли; 
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru = 'Операция возможна только для непроведенных документов!'");
		КонецЕсли;
	Иначе  // создаем новый
		
		ДокументОбъект = Документы.ОтчетКомиссионераОПродажах.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ЗаполнениеДокументов.Заполнить(ДокументОбъект, ДанныеЗаполнения);
		
		СписокВидовДоговоров = Новый СписокЗначений;
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
		ОтборПоВалюте			= Новый Структура("ЗначениеОтбора", ДокументОбъект.ВалютаДокумента);
		СтруктураПараметров		= Новый Структура("ВалютаВзаиморасчетов", ОтборПоВалюте);
		
		РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(ДокументОбъект.ДоговорКонтрагента,
						ДокументОбъект.Контрагент, ДокументОбъект.Организация, СписокВидовДоговоров, СтруктураПараметров);		
		// Заполнение реквизитов, специфичных для документа:		
		Документы.ОтчетКомиссионераОПродажах.ЗаполнитьСчетаУчетаРасчетов(,, ДокументОбъект);	
		
		Если ЗначениеЗаполнено(ДокументОбъект.ДоговорКонтрагента) Тогда
			
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект.ДоговорКонтрагента, "СпособРасчетаКомиссионногоВознаграждения, ПроцентКомиссионногоВознаграждения");
			ДокументОбъект.СпособРасчетаКомиссионногоВознаграждения = ЗначенияРеквизитов.СпособРасчетаКомиссионногоВознаграждения;
			ДокументОбъект.ПроцентКомиссионногоВознаграждения = ЗначенияРеквизитов.ПроцентКомиссионногоВознаграждения;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// установка счета и статей затрат
	Если Не ЗначениеЗаполнено(ДокументОбъект.СчетУчетаЗатрат) Тогда
		
		ДокументОбъект.СчетУчетаЗатрат = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("ПланСчетов.Хозрасчетный.ИздержкиОбращения");
		СвойстваСчетаЗатрат = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ДокументОбъект.СчетУчетаЗатрат);
		СтатьяЗатрат = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатьиЗатрат.УслугиКомиссионеров");
		Для Индекс = 1 По СвойстваСчетаЗатрат.КоличествоСубконто Цикл
			Если СвойстваСчетаЗатрат["ВидСубконто" + Индекс] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат Тогда
				Если НЕ ЗначениеЗаполнено(ДокументОбъект["Субконто" + Индекс]) Тогда
					ДокументОбъект["Субконто" + Индекс] = СтатьяЗатрат;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла; 
	
	КонецЕсли;	
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	
	// вручную переопределим, если требуется
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
	
	ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
	ДокументОбъект.Услуги.Загрузить(ДанныеДляЗагрузки.Услуги);
	ДокументОбъект.Покупатели.Загрузить(ДанныеДляЗагрузки.Покупатели);
	ДокументОбъект.ДенежныеСредства.Загрузить(ДанныеДляЗагрузки.ДенежныеСредства);
	Документы.ОтчетКомиссионераОПродажах.ЗаполнитьСчетаУчетаВТабличнойЧасти(ДокументОбъект, "Товары");
	Документы.ОтчетКомиссионераОПродажах.ЗаполнитьСчетаУчетаВТабличнойЧасти(ДокументОбъект, "Услуги");
	
	ЭлектронноеВзаимодействиеБП.ЗаписатьДокумент(ДокументОбъект, РежимЗаписи);
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции

Процедура НайтиСоздатьПоступлениеТоваровУслугДляПередачаТоваров(ДеревоДанных, СсылкаНаВладельца = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеОбъекта = ПодготовитьСтруктуруДляПоступленияТоваровУслугПоПередачеТоваров(ДеревоДанных);
	
	Если ДанныеОбъекта.Шапка.Исправление Тогда
		ЗаполнитьДокументКорректировкиПоступления(СсылкаНаВладельца, ДанныеОбъекта);
	Иначе
		ЗаполнитьДокументПоступленияТоваровУслуг(СсылкаНаВладельца, ДанныеОбъекта);
	КонецЕсли;
	
КонецПроцедуры

Процедура НайтиСоздатьПоступлениеТоваровУслугДляПередачаРабот(ДеревоДанных, СсылкаНаВладельца = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеОбъекта = ПодготовитьСтруктуруДляПоступленияТоваровУслугПоПередачаРабот(ДеревоДанных);
	
	Если ДанныеОбъекта.Шапка.Исправление Тогда
		ЗаполнитьДокументКорректировкиПоступления(СсылкаНаВладельца, ДанныеОбъекта);
	Иначе
		ЗаполнитьДокументПоступленияТоваровУслуг(СсылкаНаВладельца, ДанныеОбъекта);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбменСБанками

Функция СостояниеБанковскогоДокументаСтрокой(СостояниеЭД) Экспорт
	
	Если СостояниеЭД = Перечисления.СостоянияОбменСБанками.НаУтверждении
		ИЛИ СостояниеЭД = Перечисления.СостоянияОбменСБанками.НеСформирован
		ИЛИ СостояниеЭД = Перечисления.СостоянияОбменСБанками.ТребуетсяОтправка Тогда
		
		Возврат "Подготовлено";
		
	ИначеЕсли СостояниеЭД = Перечисления.СостоянияОбменСБанками.НаПодписи Тогда
		
		Возврат "НаПодписи";
		
	ИначеЕсли СостояниеЭД = Перечисления.СостоянияОбменСБанками.Отклонен
		ИЛИ СостояниеЭД = Перечисления.СостоянияОбменСБанками.Аннулирован
		ИЛИ СостояниеЭД = Перечисления.СостоянияОбменСБанками.ОшибкаПередачи Тогда
		
		Возврат "Отклонено";
		
	ИначеЕсли СостояниеЭД = Перечисления.СостоянияОбменСБанками.ОжидаетсяВыписка
		ИЛИ СостояниеЭД = Перечисления.СостоянияОбменСБанками.ОжидаетсяИзвещениеОПолучении
		ИЛИ СостояниеЭД = Перечисления.СостоянияОбменСБанками.ОжидаетсяИсполнение Тогда
		
		Возврат "Отправлено";
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Функция - Проверяет наличие действующего прямого обмена для банковских счетов организации
//
// Параметры:
//  Организация	 - СправочникСсылка.Организации - организации, банковские счета которого нужно проверить
// 
// Возвращаемое значение:
//  Булево - Истина, если есть действующая настройка обмена
//
Функция ИспользуетсяПрямойОбменСБанком(Организация = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбменСБанками") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		Возврат ОбменСБанками.НастройкаОбмена(Организация) <> Неопределено;
		
	Иначе
		
		СписокОрганизаций = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Ложь);
		Для Каждого ОрганизацияИзСписка Из СписокОрганизаций Цикл
			
			Если ОбменСБанками.НастройкаОбмена(ОрганизацияИзСписка) <> Неопределено Тогда
				
				Возврат Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ПроверкаИспользованияЭП

// Функция - проверяет ФО и наличие действующих настроек обмена с контрагентами
// 
// Возвращаемое значение:
//  Булево - Истина, если есть настройки и включена ФО
//
Функция НастроенОбменЭДО() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	// проверяем количество действующих настроек обмена с контрагентами через ЭДО
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СоглашенияОбИспользованииЭД.Ссылка
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
	|ГДЕ
	|	НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления";
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

// Функция - проверяет ФО и наличие действующих настроек обмена с банками
// 
// Возвращаемое значение:
//  Булево - Истина, если есть настройки и включена ФО
//
Функция НастроенОбменДиректБанк() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбменСБанками") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	// проверяем количество действующих настроек обмена с банками через ДиректБанк
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиОбменСБанками.Ссылка
	|ИЗ
	|	Справочник.НастройкиОбменСБанками КАК НастройкиОбменСБанками
	|ГДЕ
	|	НЕ НастройкиОбменСБанками.ПометкаУдаления
	|	И НЕ НастройкиОбменСБанками.Недействительна";
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область КонвертацияФорматированногоДокументаВФорматRTF

Функция ПолучитьСоответствиеТегов(ФорматированныйДокумент)
	
	СоответствиеWebЦветов = Новый Соответствие;
	ЦветаWeb = ПолучитьОбщийМакет("WebЦветаRGB");
	ВысотаТаблицы = ЦветаWeb.ВысотаТаблицы;
	Для Н = 2 По ВысотаТаблицы Цикл
		
		Ключ = НРег(СокрЛП(ЦветаWeb.Область(Н, 1).Текст));
		Значение = СокрЛП(ЦветаWeb.Область(Н, 2).Текст);
		СоответствиеWebЦветов.Вставить(Ключ, Значение);
		
	КонецЦикла;
	
	СоответствиеТегов = Новый Соответствие;
	СоответствиеЦветовRGB = Новый Соответствие;
	
	// Получаем шрифты и цвета, используемые в документе
	СоответствиеТегов.Вставить("Arial", "\f0");
	СчетчикШрифтов = 1;
	СчетчикЦветов = 0;
	ТаблицаШрифтов = "{\f0\fnil\fcharset0 Arial;}{\f1\fnil\fcharset2 Symbol;}";
	ТаблицаЦветов = "";
	Для Каждого Параграф Из ФорматированныйДокумент.Элементы Цикл
		
		Для Каждого Элемент Из Параграф.Элементы Цикл
			
			Если ТипЗнч(Элемент) = Тип("ТекстФорматированногоДокумента") Тогда
				
				Шрифт = Элемент.Шрифт;
				Если ЗначениеЗаполнено(Шрифт.Имя) Тогда
					
					Если СоответствиеТегов[Шрифт.Имя] = Неопределено Тогда
						
						СчетчикШрифтов = СчетчикШрифтов + 1;
						Ключ = Шрифт.Имя;
						Значение = "\f" + Формат(СчетчикШрифтов, "ЧГ=0");
						СоответствиеТегов.Вставить(Ключ, Значение);
						ТаблицаШрифтов = ТаблицаШрифтов + "{" + Значение + "\fnil\fcharset0 " + Ключ + ";}";
						
					КонецЕсли;
					
				КонецЕсли;
				
				ЦветТекста = Элемент.ЦветТекста;
				Если ЦветТекста.Вид = ВидЦвета.WebЦвет 
					ИЛИ ЦветТекста.Вид = ВидЦвета.ЭлементСтиля 
					ИЛИ ЦветТекста.Вид = ВидЦвета.Абсолютный Тогда
					
					Если СоответствиеТегов[ЦветТекста] = Неопределено Тогда
						
						ЦветRGB = ПолучитьЦветRGB(СоответствиеWebЦветов, ЦветТекста);
						ТегЦвета = СоответствиеЦветовRGB[ЦветRGB];
						Если ТегЦвета = Неопределено Тогда
							
							СчетчикЦветов = СчетчикЦветов + 1;
							ТегЦвета = Формат(СчетчикЦветов, "ЧГ=0");
							СоответствиеЦветовRGB.Вставить(ЦветRGB, ТегЦвета);
							ТаблицаЦветов = ТаблицаЦветов + ЦветRGB;
							
						КонецЕсли;
						СоответствиеТегов.Вставить(ЦветТекста, ТегЦвета);
						
					КонецЕсли;
					
				КонецЕсли;
				
				ЦветФона = Элемент.ЦветФона;
				Если ЦветФона.Вид = ВидЦвета.WebЦвет 
					ИЛИ ЦветФона.Вид = ВидЦвета.ЭлементСтиля 
					ИЛИ ЦветФона.Вид = ВидЦвета.Абсолютный Тогда
					
					Если СоответствиеТегов[ЦветФона] = Неопределено Тогда
						
						ЦветRGB = ПолучитьЦветRGB(СоответствиеWebЦветов, ЦветФона);
						Если ЗначениеЗаполнено(ЦветRGB) Тогда
							
							ТегЦвета = СоответствиеЦветовRGB[ЦветRGB];
							Если ТегЦвета = Неопределено Тогда
								
								СчетчикЦветов = СчетчикЦветов + 1;
								ТегЦвета = Формат(СчетчикЦветов, "ЧГ=0");
								СоответствиеЦветовRGB.Вставить(ЦветRGB, ТегЦвета);
								ТаблицаЦветов = ТаблицаЦветов + ЦветRGB;
								
							КонецЕсли;
							СоответствиеТегов.Вставить(ЦветФона, ТегЦвета);
						
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	СоответствиеТегов.Вставить("ТаблицаШрифтов", ТаблицаШрифтов);
	СоответствиеТегов.Вставить("ТаблицаЦветов", ТаблицаЦветов);
	
	// Положение текста
	СоответствиеТегов.Вставить(ГоризонтальноеПоложение.Лево,	 "\ql");
	СоответствиеТегов.Вставить(ГоризонтальноеПоложение.Право,	 "\qr");
	СоответствиеТегов.Вставить(ГоризонтальноеПоложение.Центр,	 "\qc");
	СоответствиеТегов.Вставить(ГоризонтальноеПоложение.ПоШирине, "\qj");
	
	Возврат СоответствиеТегов;
	
КонецФункции

Функция ПолучитьЦветRGB(СоответствиеWebЦветов, Цвет)
	
	ЭтоВебЦвет = Цвет.Вид = ВидЦвета.WebЦвет;
	НазваниеЦвета = "";
	
	Если Цвет.Вид = ВидЦвета.ЭлементСтиля Тогда
		
		ФорматированныйДокумент = Новый ФорматированныйДокумент;
		ЭлементДокумента = ФорматированныйДокумент.Добавить("Цвет");
		ЭлементДокумента.ЦветТекста = Цвет;
		ТекстHTML = "";
		ВложенияHTML = Неопределено;
		ФорматированныйДокумент.ПолучитьHTML(ТекстHTML, ВложенияHTML);
		НачПозицияЗначенияЦвета = СтрНайти(ТекстHTML, "color:");
		Если НачПозицияЗначенияЦвета > 0 Тогда
			
			КонПозицияЗначенияЦвета = СтрНайти(ТекстHTML, ";",, НачПозицияЗначенияЦвета);
			СтрЦвета = Сред(ТекстHTML, НачПозицияЗначенияЦвета, КонПозицияЗначенияЦвета - НачПозицияЗначенияЦвета);
			
			Если СтрНайти(СтрЦвета, "#") > 0 Тогда
				
				Массив = СтрРазделить(СтрЦвета, "#", Ложь);
				Цвет16 = СокрЛП(Массив[1]);
				Красный = HexToDec(Лев(Цвет16, 2));
				Зеленый = HexToDec(Сред(Цвет16, 3, 2));
				Синий  = HexToDec(Сред(Цвет16, 5, 2));
				Результат = "\red" + Красный + "\green" + Зеленый + "\blue" + Синий + ";";
				
				Возврат Результат;
				
			Иначе
				
				Массив = СтрРазделить(СтрЦвета, "#", Ложь);
				НазваниеЦвета = СокрЛП(Массив[1]);
				
			КонецЕсли;
			
		Иначе
			
			Возврат "";
			
		КонецЕсли;
		
	ИначеЕсли Цвет.Вид = ВидЦвета.Абсолютный Тогда
		
		Результат = "\red" + Цвет.Красный + "\green" + Цвет.Зеленый + "\blue" + Цвет.Синий + ";";
		
		Возврат Результат;
		
	КонецЕсли;
		
	Если ЭтоВебЦвет Тогда
		
		Если Не ЗначениеЗаполнено(НазваниеЦвета) Тогда
			
			НазваниеЦвета = НРег(СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("()",
				СтрРазделить(Строка(Цвет), "(")[1], ""));
				
		КонецЕсли;
		ЦветRGB = СоответствиеWebЦветов[НазваниеЦвета];
		Если ЦветRGB = Неопределено Тогда
			
			Возврат "";
			
		Иначе
			
			МассивRGB = СтрРазделить(ЦветRGB, " ", Ложь);
			Результат = "\red" + СокрЛП(МассивRGB[0]) + "\green" + СокрЛП(МассивRGB[1]) + "\blue" + СокрЛП(МассивRGB[2]) + ";";
			Возврат Результат;
			
		КонецЕсли;
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;

КонецФункции

// Преобразуем шестнадцатеричное число в десятичное
Функция HexToDec(СтрокаHex)
	
	ДлинаСтроки = СтрДлина(СтрокаHex);
	ЧислоDec = 0;
	Для Н = 0 По ДлинаСтроки - 1 Цикл
		
		Множитель = Pow(16 , Н);
		СимволСтроки = НРег(Сред(СтрокаHex, ДлинаСтроки - Н, 1));
		Если СимволСтроки = "a" Тогда
			
			ЧислоDec = ЧислоDec + 10 * Множитель;
			
		ИначеЕсли СимволСтроки = "b" Тогда
			
			ЧислоDec = ЧислоDec + 11 * Множитель;
			
		ИначеЕсли СимволСтроки = "c" Тогда
			
			ЧислоDec = ЧислоDec + 12 * Множитель;
			
		ИначеЕсли СимволСтроки = "d" Тогда
			
			ЧислоDec = ЧислоDec + 13 * Множитель;
			
		ИначеЕсли СимволСтроки = "e" Тогда
			
			ЧислоDec = ЧислоDec + 14 * Множитель;
			
		ИначеЕсли СимволСтроки = "f" Тогда
			
			ЧислоDec = ЧислоDec + 15 * Множитель;
			
		Иначе
			
			ЧислоDec = ЧислоDec + СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СимволСтроки) * Множитель;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЧислоDec;
	
КонецФункции

Функция НачалоRTF(СоответствиеТегов)
	
	Значение = "{\rtf1\ansi\ansicpg1251\deff0{\fonttbl" + СоответствиеТегов["ТаблицаШрифтов"] 
		+ "}" + Символы.ПС;
	
	ТаблицаЦветов = СоответствиеТегов["ТаблицаЦветов"];
	Если ЗначениеЗаполнено(ТаблицаЦветов) Тогда
		
		Значение = Значение + "{\colortbl;" + ТаблицаЦветов + "}" + Символы.ПС;
		
	КонецЕсли;
	
	Значение = Значение + "\viewkind4\uc1\sa200\lang9\paperw11906\paperh16838";
	
	Возврат Значение;
	
КонецФункции

Функция КонецRTF()
	
	Возврат "}";
	
КонецФункции

Функция ОбработатьПараграф(Параграф, СоответствиеТегов, НомерСписка)
	
	Отступ = ?(Параграф.Отступ = 0, "", "\li" + Формат(Параграф.Отступ * 20, "ЧГ=0"));
	Если Параграф.ТипПараграфа = ТипПараграфа.МаркированныйСписок Тогда
		
		ВидСписка = "{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent200{\pntxtb\'B7}}";
		Если Не ЗначениеЗаполнено(Отступ) Тогда
			
			ВидСписка = ВидСписка + "\li400";
			
		КонецЕсли;
		
	ИначеЕсли Параграф.ТипПараграфа = ТипПараграфа.НумерованныйСписок Тогда
		
		ВидСписка = "{\pntext\f0 " + Формат(НомерСписка, "ЧГ=0") +".\tab}"
			+ "{\*\pn\pnlvlbody\pnf0\pnindent300\pnstart1\pndec{\pntxta.}}";
			
		Если Не ЗначениеЗаполнено(Отступ) Тогда
			
			ВидСписка = ВидСписка + "\li400";
			
		КонецЕсли;
			
	Иначе
		
		ВидСписка = "";
		
	КонецЕсли;
	
	Данные = "\pard"
		+ СоответствиеТегов[Параграф.ГоризонтальноеПоложение]
		+ "\sl" + Формат(Параграф.МеждустрочныйИнтервал * 240, "ЧГ=0") + "\slmult1"
		+ Отступ
		+ ВидСписка;
		
	КоличествоЭлементов = Параграф.Элементы.Количество();
	Счетчик = 0;
	Для Каждого Элемент Из Параграф.Элементы Цикл
		
		Счетчик = Счетчик + 1;
		Если ТипЗнч(Элемент) = Тип("ТекстФорматированногоДокумента") Тогда
			
			Данные = Данные + ОбработатьТекст(Элемент, СоответствиеТегов);
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("ПереводСтрокиФорматированногоДокумента") Тогда
			
			Если Счетчик < КоличествоЭлементов Тогда
				
				Данные = Данные + "\line";
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Данные = Данные + "\par";
		
	Возврат Данные;
	
КонецФункции

Функция ОбработатьТекст(ЭлементТекст, СоответствиеТегов)

	Данные = ШрифтТекста(ЭлементТекст, СоответствиеТегов) + " ";
		
	Текст = ЭлементТекст.Текст;
	ДлинаСтроки = СтрДлина(Текст);
	Для Н = 1 По ДлинаСтроки Цикл
		
		Код = Формат(КодСимвола(Текст, Н), "ЧВН=; ЧГ=0");
		Данные = Данные + "\u" + Код + "?"; // символ в Unicode, если символ не распознан - вывод знака вопроса
		
	КонецЦикла;
	Данные = Данные + ШрифтТекста(ЭлементТекст, СоответствиеТегов, Истина);
	
	Возврат Данные;

КонецФункции

Функция ШрифтТекста(ЭлементТекста, СоответствиеТегов, ЗакрывающийТег = Ложь)
	
	Значение		 = "";
	Шрифт			 = ЭлементТекста.Шрифт;
	ЦветТекста		 = ЭлементТекста.ЦветТекста;
	ЦветФона		 = ЭлементТекста.ЦветФона;
	Если Не ЗакрывающийТег Тогда
		
		Если ЗначениеЗаполнено(Шрифт.Имя) Тогда
			
			ТегШрифта = СоответствиеТегов[Шрифт.Имя];
			Значение = Значение + ?(ТегШрифта = Неопределено, "", ТегШрифта); // определяем шрифт
			
		Иначе
			
			Значение = Значение + "\f0"; // шрифт по умолчанию
			
		КонецЕсли;
		Если Шрифт.Размер <> Неопределено Тогда
			
			Значение = Значение + ?(Шрифт.Размер = -1 ИЛИ Шрифт.Размер = 0, "\fs20", "\fs" + Формат(Шрифт.Размер * 2, "ЧГ=0"));
			
		КонецЕсли;
		
	КонецЕсли;
	Если Шрифт.Жирный <> Неопределено Тогда 
		
		Значение = Значение + ?(Шрифт.Жирный, ?(ЗакрывающийТег, "\b0", "\b"), "");
		
	КонецЕсли;
	Если Шрифт.Наклонный <> Неопределено Тогда
		
		Значение = Значение + ?(Шрифт.Наклонный, ?(ЗакрывающийТег, "\i0", "\i"), "");
		
	КонецЕсли;
	Если Шрифт.Подчеркивание <> Неопределено Тогда
		
		Значение = Значение + ?(Шрифт.Подчеркивание, ?(ЗакрывающийТег, "\ulnone", "\ul"), "");
		
	КонецЕсли;
	Если Шрифт.Зачеркивание <> Неопределено Тогда
		
		Значение = Значение + ?(Шрифт.Зачеркивание, ?(ЗакрывающийТег, "\strike0", "\strike"), "");
		
	КонецЕсли;
	Если ЦветТекста.Вид = ВидЦвета.Абсолютный
		ИЛИ ЦветТекста.Вид = ВидЦвета.WebЦвет
		ИЛИ ЦветТекста.Вид = ВидЦвета.ЭлементСтиля Тогда
		
		НомерЦвета = СоответствиеТегов[ЦветТекста];
		Если ЗначениеЗаполнено(НомерЦвета) Тогда
			
			Значение = Значение + ?(ЗакрывающийТег, "\cf0", "\cf" + НомерЦвета);
			
		КонецЕсли;
		
	КонецЕсли;
	Если ЦветФона.Вид = ВидЦвета.Абсолютный
		ИЛИ ЦветФона.Вид = ВидЦвета.WebЦвет
		ИЛИ ЦветФона.Вид = ВидЦвета.ЭлементСтиля Тогда
		
		НомерЦвета = СоответствиеТегов[ЦветФона];
		Если ЗначениеЗаполнено(НомерЦвета) Тогда
			
			Значение = Значение + ?(ЗакрывающийТег, "\highlight0", "\highlight" + НомерЦвета);
			
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат Значение;
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаЭД

Функция СоздатьОбъектИБ(ДанныеДокумента, Контрагент = Неопределено, ДокументПоступления = Неопределено)
		
	СтруктураРазбора = ПолучитьИзВременногоХранилища(ДанныеДокумента);
	ДеревоРазбора = СтруктураРазбора.ДеревоРазбора;	
	СтрокаОбъекта = СтруктураРазбора.СтрокаОбъекта;
	Если ТипЗнч(СтрокаОбъекта) <> Тип("СтрокаДереваЗначений") Тогда
		
		НайденныеСтроки = ДеревоРазбора.Строки.Найти("ОбменСКонтрагентами","ТипОбъекта");
		СтрокаОбъекта = НайденныеСтроки.Строки[0];
		
	КонецЕсли;	
	Если СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
		
		ОписаниеРаботИзДерева = ДеревоРазбора.Строки.Найти("СписокОписаний","ТипОбъекта");
		ОписаниеРаботИзСтрокиОбъекта = СтрокаОбъекта.Строки.Найти("СписокОписаний","Реквизит");
		ОписаниеРаботИзСтрокиОбъекта.ЗначениеРеквизита = ОписаниеРаботИзДерева;
		
	КонецЕсли; 
	Если СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец Или СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
		
		ЗаполнитьНоменклатуру(ДеревоРазбора, Контрагент);
		
	КонецЕсли;	
	Если СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.СчетФактура Тогда
		
		НоваяСтрока = СтрокаОбъекта.Строки.Добавить();
		НоваяСтрока.Реквизит = "ДокументыОснования";
		ДокументыОснования = НоваяСтрока.Строки.Добавить();
		ДокументыОснования.СсылкаНаОбъект = ДокументПоступления;
		
	КонецЕсли; 
	СсылкаНаОбъект = ОбменСКонтрагентамиПереопределяемый.СохранитьДанныеОбъектаВБД(СтрокаОбъекта,
			ДеревоРазбора,
			Неопределено);	 
			
	Возврат СсылкаНаОбъект;
	
КонецФункции

Процедура ЗаполнитьНоменклатуру(ДеревоРазбора, Владелец)

	СписокНоменклатуры = ДеревоРазбора.Строки.Найти("Номенклатура", "ТипОбъекта", Истина);
	Если СписокНоменклатуры = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;	
	МассивИдентификаторов = Новый Массив;
	Для Каждого СтрокаСписка Из СписокНоменклатуры.Строки Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаСписка.СсылкаНаОбъект) Тогда
			
			МассивИдентификаторов.Добавить(СтрокаСписка.ИД);
			
		КонецЕсли;
		
	КонецЦикла;	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	НоменклатураПоставщиков.Идентификатор,
	                      |	НоменклатураПоставщиков.Номенклатура
	                      |ИЗ
	                      |	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
	                      |ГДЕ
	                      |	НоменклатураПоставщиков.Владелец = &Владелец
	                      |	И НоменклатураПоставщиков.Идентификатор В(&СписокИдентификаторов)");
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("СписокИдентификаторов", МассивИдентификаторов);
	Выборка = Запрос.Выполнить().Выбрать();
	ИдНоменклатура = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		
		ИдНоменклатура.Вставить(Выборка.Идентификатор, Выборка.Номенклатура);
		
	КонецЦикла;
	СписокНоменклатуры = ДеревоРазбора.Строки.Найти("Номенклатура", "ТипОбъекта", Истина);						  
	Если СписокНоменклатуры = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	Для Каждого СтрокаСписка Из СписокНоменклатуры.Строки Цикл
		
		Если ЗначениеЗаполнено(СтрокаСписка.СсылкаНаОбъект) Тогда
			
			Продолжить;
			
		КонецЕсли;		
		СтрокаСписка.СсылкаНаОбъект = ИдНоменклатура[СтрокаСписка.ИД];
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ЧтениеФайловMXL

Процедура ЗагрузитьВТаблицуMXL(ПутьКФайлу, РезультатВыполнения)

	ТаблицаДанных = Новый ТаблицаЗначений;
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.Прочитать(ПутьКФайлу);
	КоличествоКолонок = ТабДок.ШиринаТаблицы;
	КоличествоСтрок = ТабДок.ВысотаТаблицы;
	
	// Исключаем колонки справа с пустыми ячейками
	Для Н = 0 По КоличествоКолонок - 1 Цикл
		
		ЯчейкаЗаполнена = Ложь;
		НомерКолонки = КоличествоКолонок - Н;
		Для НомерСтроки = 1 По КоличествоСтрок Цикл
			
			АдресЯчейки = "R" + Формат(НомерСтроки, "ЧН=0; ЧГ=0") + "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0");
			Ячейка = ТабДок.Область(АдресЯчейки);
			Если Не ПустаяСтрока(Ячейка.Текст) Тогда
				
				ЯчейкаЗаполнена = Истина;
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		Если ЯчейкаЗаполнена Тогда
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	КоличествоКолонок = НомерКолонки;
	
	Для НомерКолонки = 1 По КоличествоКолонок Цикл
		
		ТаблицаДанных.Колонки.Добавить("К" + НомерКолонки);
		
	КонецЦикла;	
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		
		СтрокаТаблицы = ТаблицаДанных.Добавить();
		Для НомерКолонки = 1 По КоличествоКолонок Цикл
			
			АдресЯчейки = "R" + Формат(НомерСтроки, "ЧН=0; ЧГ=0") + "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0");
			Ячейка = ТабДок.Область(АдресЯчейки);
			ЗначениеЯчейки = ?(ПустаяСтрока(Ячейка.Текст), Неопределено, Ячейка.Текст);
			СтрокаТаблицы[НомерКолонки - 1] = ЗначениеЯчейки;
			
		КонецЦикла;		
		
	КонецЦикла;
		
	РезультатВыполнения.Вставить("Лист1", ТаблицаДанных);
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаДанныхИзXLS

Функция ПолучитьДанныеДокумента(ТаблицаДанных)
	
	// Выясняем вид печатной формы
	МаксИндексКолонок = ТаблицаДанных.Колонки.Количество() - 1;
	КоличествоСтрок = ТаблицаДанных.Количество();
	ВидДокумента = "";	
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
		
		Для Н = 0 По МаксИндексКолонок Цикл
			
			ЗначениеЯчейки = УдалитьПереносыСтроки(СтрокаДанных[Н]);
			Если ТипЗнч(ЗначениеЯчейки) <> Тип("Строка") Или ПустаяСтрока(ЗначениеЯчейки) Тогда
				
				Продолжить;				
				
			КонецЕсли;
			ПодготовленноеЗначение = ПодготовитьСтроку(ЗначениеЯчейки);
			Если СтрНайти(ПодготовленноеЗначение, "унифицированнаяформаторг12") > 0 Тогда
				
				ВидДокумента = "ТОРГ12";
				Прервать;
				
			ИначеЕсли СтрНайти(ПодготовленноеЗначение, "универсальныйпередаточныйдокумент") > 0 Тогда
				
				ВидДокумента = "УПД";
				Прервать;	
				
			КонецЕсли;			
			
		КонецЦикла;
		Если Не ПустаяСтрока(ВидДокумента) Тогда
				
			Прервать;
				
		КонецЕсли;				
		
	КонецЦикла;
	
	// Получаем данные о товарах в соответствии с видом печатной формы		
	ДанныеДокумента = Неопределено;	
	Если Не ПустаяСтрока(ВидДокумента) Тогда	
	
		ДанныеДокумента = ПолучитьДанные(ТаблицаДанных, МаксИндексКолонок, КоличествоСтрок, ВидДокумента);
		
	Иначе
		
		ТекстОшибки = НСтр("ru = 'Выбранный файл не содержит данных в формате ТОРГ-12 или УПД. Укажите корректный файл.'");
		Возврат Новый Структура("ТекстОшибки", ТекстОшибки);
		
	КонецЕсли;	
	
	Возврат ДанныеДокумента;
	
КонецФункции

// ТОРГ12

Функция ПолучитьДанныеПоставщикаТОРГ12(СтрокаДанных, МаксИндексКолонок)
		
	ДанныеПоставщика = Новый Структура;
	ИскатьДанныеПоставщика = Ложь;	
	Для Н = 0 По МаксИндексКолонок Цикл
		
		ЗначениеЯчейки = УдалитьПереносыСтроки(СтрокаДанных[Н]);
		Если ТипЗнч(ЗначениеЯчейки) <> Тип("Строка") Или ПустаяСтрока(ЗначениеЯчейки) Тогда
			
			Продолжить;
			
		КонецЕсли;		
		ПодготовленноеЗначение = ПодготовитьСтроку(ЗначениеЯчейки);
		Если ИскатьДанныеПоставщика И СтрНайти(ПодготовленноеЗначение, "инн") > 0 Тогда			
						
			Пока Не ПустаяСтрока(ЗначениеЯчейки) Цикл
				
				Если Не ДанныеПоставщика.Свойство("ЮридическийАдрес") Тогда				
					
					// выделяем адрес из строки
					Адрес = ЗначениеЯчейки;
					Адрес = Сред(Адрес, СтрНайти(НРег(Адрес), "инн"));
					Адрес = Сред(Адрес, СтрНайти(Адрес, ",") + 1);
					ПозицияКонцаАдреса = СтрНайти(НРег(Адрес), "тел.:") - 1;
					Если ПозицияКонцаАдреса <= 0 Тогда 
						
						ПозицияКонцаАдреса = СтрНайти(НРег(Адрес), "факс:") - 1;
						
					КонецЕсли;
					Если ПозицияКонцаАдреса <= 0 Тогда 
						
						ПозицияКонцаАдреса = СтрНайти(НРег(Адрес), "р/с") - 1;
						
					КонецЕсли;	
					Если ПозицияКонцаАдреса <= 0 Тогда						
						
						ДанныеПоставщика.Вставить("ЮридическийАдрес", СокрЛП(Адрес));					
					
					Иначе 
						
						Адрес = СокрЛП(Лев(Адрес, ПозицияКонцаАдреса));
						Если Прав(Адрес, 1) = "," Тогда
							
							Адрес = Лев(Адрес, СтрДлина(Адрес) - 1);
							
						КонецЕсли;
						ДанныеПоставщика.Вставить("ЮридическийАдрес", СокрЛП(Адрес));
						
					КонецЕсли;	
				
				КонецЕсли;
				
				ПозицияЗапятой = СтрНайти(ЗначениеЯчейки, ",");				
				Если ПозицияЗапятой = 0 Тогда
					
					ЧастьСтроки = ЗначениеЯчейки;
					ЗначениеЯчейки = "";
					
				Иначе	
					
					ЧастьСтроки = Лев(ЗначениеЯчейки, ПозицияЗапятой - 1);
					ЗначениеЯчейки = Сред(ЗначениеЯчейки, ПозицияЗапятой + 1);
					
				КонецЕсли;				
				
				// заполняем наименование исходя из предположения, что название поставщика находиться в начале строки
				Если Не ДанныеПоставщика.Свойство("НаименованиеПолное") Тогда
					
					ДанныеПоставщика.Вставить("НаименованиеПолное", СокрЛП(ЧастьСтроки));
					
				ИначеЕсли Не ДанныеПоставщика.Свойство("ИНН") И СтрНайти(НРег(ЧастьСтроки), "инн") > 0 Тогда	
					
					ПолучитьИзСтрокиДанныеИННКПП(ДанныеПоставщика, ЧастьСтроки);
					
				ИначеЕсли Не ДанныеПоставщика.Свойство("Телефон") И СтрНайти(НРег(ЧастьСтроки), "тел.:") > 0 Тогда		
					
					ЧастьСтроки = НРег(ЧастьСтроки);
					ЧастьСтроки = СтрЗаменить(ЧастьСтроки, "тел.:", "");
					ДанныеПоставщика.Вставить("Телефон", СокрЛП(ЧастьСтроки));
					
				ИначеЕсли Не ДанныеПоставщика.Свойство("Факс") И СтрНайти(НРег(ЧастьСтроки), "факс:") > 0 Тогда		
					
					ЧастьСтроки = НРег(ЧастьСтроки);
					ЧастьСтроки = СтрЗаменить(ЧастьСтроки, "факс:", "");
					ДанныеПоставщика.Вставить("Факс", СокрЛП(ЧастьСтроки));	
					
				ИначеЕсли Не ДанныеПоставщика.Свойство("РасчетныйСчет") И СтрНайти(НРег(ЧастьСтроки), "р/с") > 0 Тогда	
					
					ДанныеПоставщика.Вставить("РасчетныйСчет", ЦифрыИзСтроки(ЧастьСтроки));	
					
				ИначеЕсли Не ДанныеПоставщика.Свойство("БИК") И СтрНайти(НРег(ЧастьСтроки), "бик") > 0 Тогда	
					
					ДанныеПоставщика.Вставить("БИК", ЦифрыИзСтроки(ЧастьСтроки));		
					
				КонецЕсли;
				
			КонецЦикла;
				
		ИначеЕсли ПодготовленноеЗначение = "поставщик" Тогда 
		
			ИскатьДанныеПоставщика = Истина;
		
		КонецЕсли;			
		
	КонецЦикла; 
	
	Возврат ДанныеПоставщика;

КонецФункции // ПолучитьДанныеПоставщика(СтрокаДанных, МаксИндекКолонок)()

Функция ПолучитьДанныеКонтрагентаТОРГ12(СтрокаДанных, МаксИндексКолонок, КлючевоеСлово)
	
	ДанныеКонтрагента = Новый Структура;
	ИскатьДанныеКонтрагента = Ложь;		
	Для Н = 0 По МаксИндексКолонок Цикл
		
		ЗначениеЯчейки = УдалитьПереносыСтроки(СтрокаДанных[Н]);
		Если ТипЗнч(ЗначениеЯчейки) <> Тип("Строка") Или ПустаяСтрока(ЗначениеЯчейки) Тогда
			
			Продолжить;
			
		КонецЕсли;		
		ПодготовленноеЗначение = ПодготовитьСтроку(ЗначениеЯчейки);
		Если ИскатьДанныеКонтрагента И СтрНайти(НРег(ЗначениеЯчейки), "инн") > 0 Тогда	

			Пока Не ПустаяСтрока(ЗначениеЯчейки) Цикл
				
				ПозицияЗапятой = СтрНайти(ЗначениеЯчейки, ",");				
				Если ПозицияЗапятой = 0 Тогда
					
					ЧастьСтроки = ЗначениеЯчейки;
					ЗначениеЯчейки = "";
					
				Иначе	
					
					ЧастьСтроки = Лев(ЗначениеЯчейки, ПозицияЗапятой - 1);
					ЗначениеЯчейки = Сред(ЗначениеЯчейки, ПозицияЗапятой + 1);
					
				КонецЕсли;				
				
				// заполняем наименование исходя из предположения, что название поставщика находиться в начале строки
				Если Не ДанныеКонтрагента.Свойство("НаименованиеПолное") Тогда
					
					ДанныеКонтрагента.Вставить("НаименованиеПолное", СокрЛП(ЧастьСтроки));
					
				ИначеЕсли Не ДанныеКонтрагента.Свойство("ИНН") И СтрНайти(НРег(ЧастьСтроки), "инн") > 0 Тогда	
					
					ПолучитьИзСтрокиДанныеИННКПП(ДанныеКонтрагента, ЧастьСтроки);
					
				КонецЕсли;
				
			КонецЦикла;
				
		ИначеЕсли ПодготовленноеЗначение = НРег(КлючевоеСлово) Тогда 
		
			ИскатьДанныеКонтрагента = Истина;
		
		КонецЕсли;				
		
	КонецЦикла;
	
	Возврат ДанныеКонтрагента;
	
КонецФункции

Процедура ПолучитьИзСтрокиДанныеИННКПП(ДанныеКонтрагента, СтрокаИННКПП)

	Разделитель = "/";
	Если СтрНайти(СтрокаИННКПП, "\") > 0 Тогда
		
		Разделитель = "\";
		
	КонецЕсли;
	ИННКПП = СтрРазделить(СтрокаИННКПП, Разделитель);
	ДанныеКонтрагента.Вставить("ИНН", ЦифрыИзСтроки(ИННКПП[0]));
	Если ИННКПП.Количество() > 1 Тогда
		
		ДанныеКонтрагента.Вставить("КПП", ЦифрыИзСтроки(ИННКПП[1]));
		
	КонецЕсли;

КонецПроцедуры

Процедура ПолучитьНомерДатуДокументаТОРГ12(СтрокаДанных, МаксИндексКолонок, ТаблицаДанных, ДанныеДокумента)
		
	НомерНайден = Ложь;
	ДатаНайдена = Ложь;
	Для Н = 0 По МаксИндексКолонок Цикл
		
		ЗначениеЯчейки = УдалитьПереносыСтроки(СтрокаДанных[Н]);
		Если ТипЗнч(ЗначениеЯчейки) <> Тип("Строка") Или ПустаяСтрока(ЗначениеЯчейки) Тогда
			
			Продолжить;
			
		КонецЕсли;		
		ПодготовленноеЗначение = ПодготовитьСтроку(ЗначениеЯчейки);
		Если Не НомерНайден И СтрНайти(ПодготовленноеЗначение, "номердокумента") > 0 Тогда
			
			ИндексСтроки = ТаблицаДанных.Индекс(СтрокаДанных);
			НомТН = УдалитьПереносыСтроки(ТаблицаДанных[ИндексСтроки + 1][Н]);
			Если ЗначениеЗаполнено(НомТН) Тогда
				
				ДанныеДокумента.Вставить("НомТН", Строка(НомТН));
				
			Иначе
				
				// Ищем номер ТН до колонки с датой составления
				Для НомерСтолбца = Н + 1 По МаксИндексКолонок Цикл
					
					НазваниеЯчейки = ПодготовитьСтроку(СтрокаДанных[НомерСтолбца]);
					Если ТипЗнч(НазваниеЯчейки) = Тип("Строка") И СтрНайти(НазваниеЯчейки, "датасоставления") > 0 Тогда
						
						Прервать;
						
					КонецЕсли;
					НомТН = УдалитьПереносыСтроки(ТаблицаДанных[ИндексСтроки + 1][НомерСтолбца]);
					Если ЗначениеЗаполнено(НомТН) Тогда
						
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				ДанныеДокумента.Вставить("НомТН", ?(ЗначениеЗаполнено(НомТН), НомТН, "0"));
				
			КонецЕсли;
			НомерНайден = Истина;
			
		ИначеЕсли Не ДатаНайдена И СтрНайти(ПодготовленноеЗначение, "датасоставления") > 0 Тогда
			
			ИндексСтроки = ТаблицаДанных.Индекс(СтрокаДанных);
			ДатаТН = УдалитьПереносыСтроки(ТаблицаДанных[ИндексСтроки + 1][Н]);
			Если ЗначениеЗаполнено(ДатаТН) Тогда
				
				ДанныеДокумента.Вставить("ДатаТН", Строка(ДатаТН));
				
			Иначе	
				
				ДанныеДокумента.Вставить("ДатаТН", "");
				
			КонецЕсли;	
			ДатаНайдена = Истина;
					
		КонецЕсли;						
		Если НомерНайден И ДатаНайдена Тогда
			
			Прервать;
			
		КонецЕсли; 
		
	КонецЦикла; 	

КонецПроцедуры // ПолучитьНомерДатуДокумента()

Процедура ДобавитьСтрокиВТаблицуЗаголовковТОРГ12(ТаблицаЗаголовков)
	
	// номер по порядку
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "НомТов";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "номер";	
	НоваяСтрокаЗаголовков.НомерКолонки		= "1";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	// товар 
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "НаимТов";
	НоваяСтрокаЗаголовков.СтрокаПоиска		= "товар";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "2";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";
	
	// единица измерения
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "НаимЕдИзм";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "единицаизмерения";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "4";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";
	
	// количество
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "Нетто";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "количествомассанетто";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "10";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";   
	
	// сумма без ндс
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "СумБезНДС";
	НоваяСтрокаЗаголовков.СтрокаПоиска		= "суммабезучетандс";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "12";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	// сумма с ндс
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "СумУчНДС";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "суммасучетомндс";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "15";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	// цена
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "Цена";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "цена";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "11";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	// ставка ндс
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "СтавкаНДС";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "ндс";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "13";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	// артикул
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "Артикул";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "код";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "3";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 2;
	НоваяСтрокаЗаголовков.ТипДанных	 		= "Строка";

	// код единицы измерения
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "ОКЕИ_Тов";
	НоваяСтрокаЗаголовков.СтрокаПоиска	 	= "кодпоокеи";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "5";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 2;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";   	
	
КонецПроцедуры

// УПД

Процедура НомерДатаСФ(СтрокаДанных, МаксИндексКолонок, ДанныеДокумента)
	
	// Ищем номер счета-фактуры
	ИскатьНомер = Ложь;
	НомерКолонки = 0;
	Для Н = 0 По МаксИндексКолонок Цикл
		
		ЗначениеЯчейки = УдалитьПереносыСтроки(СтрокаДанных[Н]);
		Если Не ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
			
			Продолжить;
			
		КонецЕсли;		
		Если ИскатьНомер Тогда
			
			ДанныеДокумента.Вставить("НомерСчФ", ЗначениеЯчейки);
			НомерКолонки = Н + 1;
			Прервать;
			
		Иначе
			
			ПодготовленноеЗначение = ПодготовитьСтроку(ЗначениеЯчейки);
			Если СтрНайти(ПодготовленноеЗначение, "счетфактура") > 0 Тогда
				
				ИскатьНомер = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Ищем дату счета фактуры
	Если Не ДанныеДокумента.Свойство("НомерСчФ") Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	ИскатьДату = Ложь;
	Для Н = НомерКолонки По МаксИндексКолонок Цикл
		
		ЗначениеЯчейки = УдалитьПереносыСтроки(СтрокаДанных[Н]);
		Если Не ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
			
			Продолжить;
			
		КонецЕсли;						
		Если ИскатьДату Тогда
			
			ДеньСтр = Лев(ЗначениеЯчейки, СтрНайти(ЗначениеЯчейки, " ") - 1);
			День = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ДеньСтр);
			ЗначениеЯчейки = Сред(ЗначениеЯчейки, СтрНайти(ЗначениеЯчейки, " ") + 1);
			МесяцСтр = НРег(Лев(ЗначениеЯчейки, СтрНайти(ЗначениеЯчейки, " ") - 1));				
			Если СтрНайти(МесяцСтр, "январ") > 0 Тогда
				
				Месяц = 1;
				
			ИначеЕсли СтрНайти(МесяцСтр, "феврал") > 0 Тогда
				
				Месяц = 2;
				
			ИначеЕсли СтрНайти(МесяцСтр, "март") > 0 Тогда
				
				Месяц = 3;
				
			ИначеЕсли СтрНайти(МесяцСтр, "апрел") > 0 Тогда
				
				Месяц = 4;
				
			ИначеЕсли СтрНайти(МесяцСтр, "ма") > 0 Тогда
				
				Месяц = 5;
				
			ИначеЕсли СтрНайти(МесяцСтр, "июн") > 0 Тогда
				
				Месяц = 6;
				
			ИначеЕсли СтрНайти(МесяцСтр, "июл") > 0 Тогда
				
				Месяц = 7;
				
			ИначеЕсли СтрНайти(МесяцСтр, "август") > 0 Тогда
				
				Месяц = 8;
				
			ИначеЕсли СтрНайти(МесяцСтр, "сентябр") > 0 Тогда
				
				Месяц = 9;
				
			ИначеЕсли СтрНайти(МесяцСтр, "октябр") > 0 Тогда
				
				Месяц = 10;
				
			ИначеЕсли СтрНайти(МесяцСтр, "ноябр") > 0 Тогда
				
				Месяц = 11;
				
			ИначеЕсли СтрНайти(МесяцСтр, "декабр") > 0 Тогда
				
				Месяц = 12;
				
			Иначе
				
				ДанныеДокумента.Вставить("ДатаСчФ", СтроковыеФункцииКлиентСервер.СтрокаВДату(ЗначениеЯчейки));
				Прервать;
				
			КонецЕсли;	
			
			ЗначениеЯчейки = Сред(ЗначениеЯчейки, СтрНайти(ЗначениеЯчейки, " ") + 1); 			
			ГодСтр = ЦифрыИзСтроки(ЗначениеЯчейки);
			Год = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ГодСтр);
			Если День <> Неопределено И Месяц <> 0 И Год <> Неопределено Тогда
				
				Дата = Дата(Год, Месяц, День);
				
			Иначе
				
				Дата = Дата(1, 1, 1);
				
			КонецЕсли;			
			ДанныеДокумента.Вставить("ДатаСчФ", Дата);
			Прервать;
			
		Иначе
			
			ПодготовленноеЗначение = ПодготовитьСтроку(ЗначениеЯчейки);
			Если СтрНайти(ПодготовленноеЗначение, "от") > 0 Тогда
				
				ИскатьДату = Истина;
				
			КонецЕсли;
			
		КонецЕсли;		
		
	КонецЦикла;	    	
	ДанныеДокумента.Вставить("НомТН", ДанныеДокумента.НомерСчФ);
	ДанныеДокумента.Вставить("ДатаТН", Формат(ДанныеДокумента.ДатаСчФ, "ДФ=dd.MM.yyyy"));
			
КонецПроцедуры

Функция ПолучитьДанныеКонтрагентаУПД(СтрокаДанных, МаксИндексКолонок, ТаблицаДанных, КлючевоеСлово)
	
	ДанныеКонтрагента = Новый Структура;
	ИскатьНаименование = Ложь;
	КлючевоеСлово = НРег(КлючевоеСлово);
	Для Н = 0 По МаксИндексКолонок Цикл
		
		ЗначениеЯчейки = УдалитьПереносыСтроки(СтрокаДанных[Н]);
		Если ТипЗнч(ЗначениеЯчейки) <> Тип("Строка") Или ПустаяСтрока(ЗначениеЯчейки) Тогда
				
			Продолжить;
				
		КонецЕсли;
		Если ИскатьНаименование Тогда		
				
			ДанныеКонтрагента.Вставить("НаименованиеПолное", ЗначениеЯчейки);
			Прервать;	
			
		Иначе			
			
			ПодготовленноеЗначение = ПодготовитьСтроку(ЗначениеЯчейки);
			Если СтрНайти(ПодготовленноеЗначение, КлючевоеСлово) > 0 Тогда
				
				ИскатьНаименование = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла; 		
	Если Не ДанныеКонтрагента.Свойство("НаименованиеПолное") Тогда
		
		Возврат ДанныеКонтрагента;
		
	КонецЕсли;
	
	// Ищем остальные реквизиты контрагента
	НомерСтроки = ТаблицаДанных.Индекс(СтрокаДанных) + 1;		
	КоличествоСтрок = ТаблицаДанных.Количество();
	ИскатьАдрес = Ложь;
	ИскатьИНН = Ложь;
	Пока НомерСтроки < КоличествоСтрок Цикл
		
		СтрокаДанных = ТаблицаДанных[НомерСтроки];		
		Если Не ДанныеКонтрагента.Свойство("ЮридическийАдрес") Тогда
			
			Для Н = 0 По МаксИндексКолонок Цикл
				
				ЗначениеЯчейки = УдалитьПереносыСтроки(СтрокаДанных[Н]);
				Если ТипЗнч(ЗначениеЯчейки) <> Тип("Строка") Или ПустаяСтрока(ЗначениеЯчейки) Тогда
					
					Продолжить;
					
				КонецЕсли;				
				Если ИскатьАдрес Тогда				
						
					ДанныеКонтрагента.ЮридическийАдрес = ЗначениеЯчейки;
					Прервать;					
					
				Иначе
					
					ПодготовленноеЗначение = ПодготовитьСтроку(ЗначениеЯчейки);				
					Если СтрНайти(ПодготовленноеЗначение, "адрес") > 0 Тогда
						
						ИскатьАдрес = Истина;
						ДанныеКонтрагента.Вставить("ЮридическийАдрес", "");
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;		
						
		ИначеЕсли Не ДанныеКонтрагента.Свойство("ИНН") Тогда
			
				
			Для Н = 0 По МаксИндексКолонок Цикл
			
				ЗначениеЯчейки = УдалитьПереносыСтроки(СтрокаДанных[Н]);
				Если ТипЗнч(ЗначениеЯчейки) <> Тип("Строка") Или ПустаяСтрока(ЗначениеЯчейки) Тогда
					
					Продолжить;
					
				КонецЕсли;				
				Если ИскатьИНН Тогда				
						
					ПозицияСлэша = СтрНайти(ЗначениеЯчейки, "/");
					ПозицияСлэша = ?(ПозицияСлэша = 0, СтрНайти(ЗначениеЯчейки, "\"), ПозицияСлэша);
					ДанныеКонтрагента.ИНН = СокрЛП(?(ПозицияСлэша = 0, ЗначениеЯчейки, 
						Лев(ЗначениеЯчейки, ПозицияСлэша - 1)));
					ДанныеКонтрагента.Вставить("КПП", СокрЛП(?(ПозицияСлэша = 0, "", Сред(ЗначениеЯчейки, ПозицияСлэша + 1))));
					Прервать;				
					
				Иначе
					
					ПодготовленноеЗначение = ПодготовитьСтроку(ЗначениеЯчейки);				
					Если СтрНайти(ПодготовленноеЗначение, ?(КлючевоеСлово = "продавец", "иннкпппродавца", "иннкпппокупателя")) > 0 Тогда
						
						ИскатьИНН = Истина;
						ДанныеКонтрагента.Вставить("ИНН", "");
						
					КонецЕсли;
					
				КонецЕсли;
			
			КонецЦикла;	
				
		КонецЕсли;		
		Если ДанныеКонтрагента.Свойство("ИНН") И ДанныеКонтрагента.Свойство("ЮридическийАдрес") Тогда
			
			Прервать;
			
		КонецЕсли;
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	Возврат ДанныеКонтрагента;
	
КонецФункции

Процедура ДобавитьСтрокиВТаблицуЗаголовковУПД(ТаблицаЗаголовков)
	
	// номер по порядку
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "НомТов";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "пп";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "а";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	// товар 
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "НаимТов";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "наименованиетовара";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "1";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";
	
	// единица измерения
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "НаимЕдИзм";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "условноеобозначение";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "2а";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 2;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";
	
	// количество
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "Нетто";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "количество";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "3";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";   
	
	// сумма без ндс
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "СумБезНДС";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "стоимостьтоваровработуслугимущественныхправбезналога";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "5";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	// сумма с ндс
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "СумУчНДС";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "стоимостьтоваровработуслугимущественныхправсналогом";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "9";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	// цена
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "Цена";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "цена";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "4";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	// ставка ндс
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "СтавкаНДС";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "налоговаяставка";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "7";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Число";
	
	// артикул
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "Артикул";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "кодтовара";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "б";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";

	// код единицы измерения
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "ОКЕИ_Тов";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "код";	
	НоваяСтрокаЗаголовков.НомерКолонки 		= "2";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 2;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";  	
	
	// код страны происхождения
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "КодСтраны";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "цифровойкод";
	НоваяСтрокаЗаголовков.НомерКолонки 		= "10";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 2;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";
	
	// страна происхождения
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "НазваниеСтраны";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "краткоенаименование";
	НоваяСтрокаЗаголовков.НомерКолонки 		= "10а";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 2;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";
	
	// страна происхождения
	НоваяСтрокаЗаголовков = ТаблицаЗаголовков.Добавить();
	НоваяСтрокаЗаголовков.НазваниеКолонки 	= "НомерТД";
	НоваяСтрокаЗаголовков.СтрокаПоиска 		= "номертаможеннойдекларации";
	НоваяСтрокаЗаголовков.НомерКолонки 		= "11";
	НоваяСтрокаЗаголовков.СтрокаЗаголовка 	= 1;
	НоваяСтрокаЗаголовков.ТипДанных 		= "Строка";
	
КонецПроцедуры

// Общие

Функция ПолучитьДанные(ТаблицаДанных, МаксИндексКолонок, КоличествоСтрок, ВидДокумента)
		
	ДанныеДокумента = Новый Структура;
	ДанныеДокумента.Вставить("ВидДокумента", ВидДокумента);
	ТаблицаТоваров = ПодготовитьТаблицуТоваров();		
	
	КоличествоСовпаденийЗаголовков = 5;
	КоличествоСовпаденийВторойСтрокиЗаголовков = 1;
	КоличествоСовпаденийНумерацииКолонок = 5;
	
	НайденаСтрокаЗаголовкаТаблицы			 = Ложь;
	НайденаВтораяСтрокаЗаголовкаТаблицы		 = Ложь;
	НайденаСтрокаНумерацииКолонокТаблицы	 = Ложь;		
	
	СчетчикСтрок = 0;
	НомерСтрокиТовара = 1;
	ДанныеШапкиПолучены = Ложь;
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл							
		
		Если Не ДанныеШапкиПолучены Тогда
			
			Если ВидДокумента = "ТОРГ12" Тогда
			
				Если Не ДанныеДокумента.Свойство("Грузополучатель") Тогда	
				
					ДанныеКонтрагента = ПолучитьДанныеКонтрагентаТОРГ12(СтрокаДанных, МаксИндексКолонок, "Грузополучатель");
					Если ДанныеКонтрагента.Количество() > 0 Тогда
						
						ДанныеДокумента.Вставить("Грузополучатель", ДанныеКонтрагента);
						
					КонецЕсли;
				
				ИначеЕсли Не ДанныеДокумента.Свойство("Поставщик") Тогда	
				
					ДанныеКонтрагента = ПолучитьДанныеПоставщикаТОРГ12(СтрокаДанных, МаксИндексКолонок);
					Если ДанныеКонтрагента.Количество() > 0 Тогда
						
						ДанныеДокумента.Вставить("Поставщик", ДанныеКонтрагента);
						
					КонецЕсли;
					
				ИначеЕсли Не ДанныеДокумента.Свойство("Плательщик") Тогда	
				
					ДанныеКонтрагента = ПолучитьДанныеКонтрагентаТОРГ12(СтрокаДанных, МаксИндексКолонок, "Плательщик");
					Если ДанныеКонтрагента.Количество() > 0 Тогда
						
						ДанныеДокумента.Вставить("Плательщик", ДанныеКонтрагента);
						
					КонецЕсли;
					
				ИначеЕсли Не ДанныеДокумента.Свойство("НомТН") Тогда	
				
					ПолучитьНомерДатуДокументаТОРГ12(СтрокаДанных, МаксИндексКолонок, ТаблицаДанных, ДанныеДокумента);			
					Если ДанныеДокумента.Свойство("НомТН") Тогда
						
						ДанныеШапкиПолучены = Истина;
						
					КонецЕсли;
					
				КонецЕсли;	
			
			Иначе // УПД
				
				Если Не ДанныеДокумента.Свойство("НомерСчФ") Тогда
					
					НомерДатаСФ(СтрокаДанных, МаксИндексКолонок, ДанныеДокумента);	
					
				ИначеЕсли Не ДанныеДокумента.Свойство("Поставщик") Тогда	
					
					ДанныеКонтрагента = ПолучитьДанныеКонтрагентаУПД(СтрокаДанных, МаксИндексКолонок, ТаблицаДанных, "Продавец");
					Если ДанныеКонтрагента.Количество() > 0 Тогда
						
						ДанныеДокумента.Вставить("Поставщик", ДанныеКонтрагента);
						
					КонецЕсли;
					
				ИначеЕсли Не ДанныеДокумента.Свойство("Грузополучатель") Тогда	
					
					ДанныеКонтрагента = ПолучитьДанныеКонтрагентаУПД(СтрокаДанных, МаксИндексКолонок, ТаблицаДанных, "Покупатель");
					Если ДанныеКонтрагента.Количество() > 0 Тогда
						
						ДанныеДокумента.Вставить("Грузополучатель", ДанныеКонтрагента);
						ДанныеДокумента.Вставить("Плательщик", ДанныеКонтрагента);
						ДанныеШапкиПолучены = Истина;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе	
			
			// поиск данных табличной части
			Если НЕ НайденаСтрокаЗаголовкаТаблицы Тогда			
				
				ТаблицаЗаголовков = ПодготовитьТаблицуЗаголовковТабличнойЧасти(СтрокаДанных, МаксИндексКолонок, ВидДокумента);
				Если ТаблицаЗаголовков <> Неопределено Тогда
					
					МассивЗаголовков = ТаблицаЗаголовков.НайтиСтроки(Новый Структура("КолонкаНайдена, СтрокаЗаголовка", Истина, 1));
					Если МассивЗаголовков.Количество() >= КоличествоСовпаденийЗаголовков Тогда
						
						НайденаСтрокаЗаголовкаТаблицы = Истина;					
						
					КонецЕсли;					
				
				КонецЕсли;			
				
			ИначеЕсли Не НайденаВтораяСтрокаЗаголовкаТаблицы Тогда	
				
				НайтиВторуюСтрокуЗаголовкаТабличнойЧасти(СтрокаДанных, ТаблицаЗаголовков, МаксИндексКолонок, ВидДокумента);
				Если ТаблицаЗаголовков <> Неопределено Тогда
					
					
					МассивЗаголовков = ТаблицаЗаголовков.НайтиСтроки(Новый Структура("КолонкаНайдена, СтрокаЗаголовка", Истина, 2));
					Если МассивЗаголовков.Количество() >= КоличествоСовпаденийВторойСтрокиЗаголовков Тогда
						
						НайденаВтораяСтрокаЗаголовкаТаблицы = Истина;					
						
					КонецЕсли;					
				
				КонецЕсли;
				
			// поиск нумерации колонок таблицы товаров	
			ИначеЕсли НЕ НайденаСтрокаНумерацииКолонокТаблицы Тогда
				
				ПроверитьНумерациюКолонокТабличнойЧасти(СтрокаДанных, ТаблицаЗаголовков);
				МассивЗаголовков = ТаблицаЗаголовков.НайтиСтроки(Новый Структура("НумерацияКолонкиНайдена", Истина));
				Если МассивЗаголовков.Количество() >= КоличествоСовпаденийНумерацииКолонок Тогда
					
					НайденаСтрокаНумерацииКолонокТаблицы = Истина;
					
				КонецЕсли;
				
				// поиск товаров	
			ИначеЕсли НайденаСтрокаЗаголовкаТаблицы И НайденаВтораяСтрокаЗаголовкаТаблицы И НайденаСтрокаНумерацииКолонокТаблицы Тогда	
				
				РазобратьСтрокуТабличнойЧасти(СтрокаДанных, ТаблицаЗаголовков, НомерСтрокиТовара, ТаблицаТоваров);		
				
			КонецЕсли;	
			
		КонецЕсли;	
		СчетчикСтрок = СчетчикСтрок + 1;	
		
	КонецЦикла;		
	ДанныеДокумента.Вставить("ТаблицаТоваров", ТаблицаТоваров);
		
	ТекстОшибки = "";
	Если 	ДанныеДокумента.ВидДокумента = "ТОРГ12" 
			И ДанныеДокумента.Свойство("Грузополучатель") 
			И ДанныеДокумента.Свойство("Поставщик") 
			И ДанныеДокумента.Свойство("Плательщик") 
			И ДанныеДокумента.Свойство("НомТН") Тогда 				
			
		ПроверитьДанныеПолучателя(ДанныеДокумента);	
			
		ИНН = "";	
		Если ДанныеДокумента.Грузополучатель.Свойство("ИНН", ИНН) Тогда
			
			Если ЗначениеЗаполнено(ИНН) Тогда
				
				СсылкаНаОрганизацию = СсылкаНаОбъектПоИННКПП("Организации", ИНН);
				Если Не ЗначениеЗаполнено(СсылкаНаОрганизацию) Тогда
					
					ТекстОшибки = НСтр("ru = 'Не удалось загрузить файл. Не найдена организация-грузополучатель.'");
					
				КонецЕсли;
				
			Иначе
				
				ТекстОшибки = НСтр("ru = 'Не удалось загрузить файл. Не заполнен ИНН грузополучателя.'");
				
			КонецЕсли;	
			
		КонецЕсли;			
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			
			Возврат Новый Структура("ТекстОшибки", ТекстОшибки);		
			
		КонецЕсли;
			
		Возврат ДанныеДокумента;		
		
	ИначеЕсли 	ДанныеДокумента.ВидДокумента = "УПД" 
		        И ДанныеДокумента.Свойство("НомерСчФ")
				И ДанныеДокумента.Свойство("Грузополучатель")
				И ДанныеДокумента.Свойство("Плательщик")
				И ДанныеДокумента.Свойство("Поставщик") Тогда
				
		Если ПустаяСтрока(ДанныеДокумента.Поставщик.ИНН) Тогда
						
			ТекстОшибки = НСтр("ru = 'Не удалось загрузить файл. Возможно нет данных поставщика или не указан его ИНН.'");									
			
		КонецЕсли;  
		
		ПроверитьДанныеПолучателя(ДанныеДокумента);
		
		ИНН = "";	
		Если ДанныеДокумента.Грузополучатель.Свойство("ИНН", ИНН) Тогда
			
			Если ЗначениеЗаполнено(ИНН) Тогда
				
				СсылкаНаОрганизацию = СсылкаНаОбъектПоИННКПП("Организации", ИНН);
				Если Не ЗначениеЗаполнено(СсылкаНаОрганизацию) Тогда
					
					ТекстОшибки = НСтр("ru = 'Не удалось загрузить файл. Не найдена организация-грузополучатель.'");
					
				КонецЕсли;
				
			Иначе
				
				ТекстОшибки = НСтр("ru = 'Не удалось загрузить файл. Не заполнен ИНН грузополучателя.'");
				
			КонецЕсли;	
			
		КонецЕсли;			
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			
			Возврат Новый Структура("ТекстОшибки", ТекстОшибки);		
			
		КонецЕсли;
		
		Возврат ДанныеДокумента;			
		
	Иначе		
		
		Если Не ДанныеДокумента.Свойство("Грузополучатель") Тогда
			
			ТекстОшибки = НСтр("ru = 'Не удалось загрузить файл. Нет данных грузополучателя или не указан его ИНН'");
		
		ИначеЕсли Не ДанныеДокумента.Свойство("Поставщик") Тогда
			
			ТекстОшибки = НСтр("ru = 'Не удалось загрузить файл. Возможно нет данных поставщика или не указан его ИНН.'");
			
		ИначеЕсли Не ДанныеДокумента.Свойство("Плательщик") Тогда
			
			ТекстОшибки = НСтр("ru = 'Не удалось загрузить файл. Возможно нет данных плательщика или не указан его ИНН.'");
			
		Иначе
			
			ТекстОшибки = НСтр("ru = 'Не удалось загрузить файл.'");
			
		КонецЕсли;
		
		Возврат Новый Структура("ТекстОшибки", ТекстОшибки);
		
	КонецЕсли;
	
КонецФункции

Процедура ПроверитьДанныеПолучателя(ДанныеДокумента)
	
	Грузополучатель = ДанныеДокумента.Грузополучатель;
	Плательщик = ДанныеДокумента.Плательщик;
	ИННГрузополучателя = "";
	Если Не Грузополучатель.Свойство("ИНН", ИННГрузополучателя) Тогда
		
		Грузополучатель.Вставить("ИНН");
		
	КонецЕсли;
	ИННПлательщика = "";
	Если Не Плательщик.Свойство("ИНН", ИННПлательщика) Тогда
		
		Плательщик.Вставить("ИНН");
		
	КонецЕсли;
	Если ПустаяСтрока(Грузополучатель.ИНН) Тогда
		
		Грузополучатель.ИНН = ИННПлательщика;
		
	КонецЕсли;
	Если ПустаяСтрока(Плательщик.ИНН) Тогда
		
		Плательщик.ИНН = ИННГрузополучателя;
		
	КонецЕсли;	

КонецПроцедуры 

Функция УдалитьПереносыСтроки(Знач Стр)

	Если ТипЗнч(Стр) <> Тип("Строка") Тогда
		
		Возврат Стр;
		
	КонецЕсли;
		
	ДлинаСтроки = СтрДлина(Стр);
	СтрРезультат = "";	
	Для Н = 1 По ДлинаСтроки Цикл
		
		СимволСтроки = Сред(Стр, Н, 1);
		Если СимволСтроки = Символы.ПС
			ИЛИ СимволСтроки = Символы.ВК Тогда 
				
			СимволСтроки = ?(СимволСтроки = Символы.ПС, " ", "");
			
		КонецЕсли;
		СтрРезультат = СтрРезультат + СимволСтроки;
		
	КонецЦикла;
	
	Возврат СокрЛП(СтрРезультат); 

КонецФункции// УдалитьПереносСтроки()

// Перевод текста в нижний регистр и удаление из нее пробелов и других спец. символов.
Функция ПодготовитьСтроку(Знач Стр)
	
	Если ТипЗнч(Стр) <> Тип("Строка") Тогда
		
		Возврат Стр;
		
	КонецЕсли;
	
	Стр = НРег(Стр);
	ДлинаСтроки = СтрДлина(Стр);
	СтрРезультат = "";	
	Для Н = 1 По ДлинаСтроки Цикл
		
		СимволСтроки = Сред(Стр, Н, 1);
		Если 	СимволСтроки = " " 
				ИЛИ СимволСтроки = "-" 
				ИЛИ СимволСтроки = "№" 
				ИЛИ СимволСтроки = """"
				ИЛИ СимволСтроки = ","
				ИЛИ СимволСтроки = "."				
				ИЛИ СимволСтроки = ":"				
				ИЛИ СимволСтроки = ";"								
				ИЛИ СимволСтроки = Символы.ПС
				ИЛИ СимволСтроки = Символы.ВК
				ИЛИ СимволСтроки = "/"
				ИЛИ СимволСтроки = "("
				ИЛИ СимволСтроки = ")"
				ИЛИ СимволСтроки = "\"
				ИЛИ СимволСтроки = "|" Тогда 
				
			Продолжить;
			
		КонецЕсли;
		СтрРезультат = СтрРезультат + СимволСтроки;
		
	КонецЦикла;
	
	Возврат СтрРезультат;
	
КонецФункции

Функция ЦифрыИзСтроки(Знач Стр)

	Если ТипЗнч(Стр) <> Тип("Строка") Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Стр = НРег(Стр);
	ДлинаСтроки = СтрДлина(Стр);
	СтрРезультат = "";	
	Для Н = 1 По ДлинаСтроки Цикл
		
		СимволСтроки = Сред(Стр, Н, 1);
		Если КодСимвола(СимволСтроки) < 48 ИЛИ КодСимвола(СимволСтроки) > 57 Тогда
			
			Продолжить;
			
		КонецЕсли;
		СтрРезультат = СтрРезультат + СимволСтроки;
		
	КонецЦикла;
	
	Возврат СтрРезультат;   

КонецФункции // ЦифрыИзСтроки()

Функция ПодготовитьТаблицуТоваров()
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("НомТов");
	ТаблицаТоваров.Колонки.Добавить("НаимТов");
	ТаблицаТоваров.Колонки.Добавить("Артикул");	
	ТаблицаТоваров.Колонки.Добавить("НаимЕдИзм");
	ТаблицаТоваров.Колонки.Добавить("ОКЕИ_Тов");
	ТаблицаТоваров.Колонки.Добавить("Нетто", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТаблицаТоваров.Колонки.Добавить("СумБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("СумУчНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0)));
	ТаблицаТоваров.Колонки.Добавить("КодСтраны");
	ТаблицаТоваров.Колонки.Добавить("НазваниеСтраны");
	ТаблицаТоваров.Колонки.Добавить("НомерТД");
	
	Возврат ТаблицаТоваров;
	
КонецФункции

Функция ПодготовитьТаблицуЗаголовковТабличнойЧасти(СтрокаДанных, МаксИндексКолонок, ВидДокумента)

	ИскатьЗаголовки = Ложь;
	Для Н = 0 По МаксИндексКолонок Цикл
		
		ЗначениеЯчейки = УдалитьПереносыСтроки(СтрокаДанных[Н]);
		Если ТипЗнч(ЗначениеЯчейки) <> Тип("Строка") Или ПустаяСтрока(ЗначениеЯчейки) Тогда
			
			Продолжить;
			
		КонецЕсли;
		ПодготовленноеЗначение = ПодготовитьСтроку(ЗначениеЯчейки);
		Если ВидДокумента = "ТОРГ12" Тогда
			
			Если СтрНайти(ПодготовленноеЗначение, "номерпопорядку") > 0 ИЛИ СтрНайти(ПодготовленноеЗначение, "единицаизмерения") > 0 Тогда
			
				ИскатьЗаголовки = Истина;
				Прервать;
			
			КонецЕсли;	
		
		Иначе
			
			Если СтрНайти(ПодготовленноеЗначение, "наименованиетовара") > 0 ИЛИ СтрНайти(ПодготовленноеЗначение, "единицаизмерения") > 0 Тогда
			
				ИскатьЗаголовки = Истина;
				Прервать;
			
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЦикла;
	Если Не ИскатьЗаголовки Тогда
		
		Возврат Неопределено;
		
	КонецЕсли; 
	
	ТаблицаЗаголовков = Новый ТаблицаЗначений;
	ТаблицаЗаголовков.Колонки.Добавить("НазваниеКолонки", Новый ОписаниеТипов("Строка"));
	ТаблицаЗаголовков.Колонки.Добавить("СтрокаПоиска", Новый ОписаниеТипов("Строка"));
	ТаблицаЗаголовков.Колонки.Добавить("КолонкаНайдена", Новый ОписаниеТипов("Булево"));
	ТаблицаЗаголовков.Колонки.Добавить("НумерацияКолонкиНайдена", Новый ОписаниеТипов("Булево"));
	ТаблицаЗаголовков.Колонки.Добавить("ТипДанных", Новый ОписаниеТипов("Строка"));
	ТаблицаЗаголовков.Колонки.Добавить("ИндексКолонки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаЗаголовков.Колонки.Добавить("НомерКолонки", Новый ОписаниеТипов("Строка"));
	ТаблицаЗаголовков.Колонки.Добавить("СтрокаЗаголовка", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	
	Если ВидДокумента = "ТОРГ12" Тогда
		
		ДобавитьСтрокиВТаблицуЗаголовковТОРГ12(ТаблицаЗаголовков);
		
	Иначе
		
		ДобавитьСтрокиВТаблицуЗаголовковУПД(ТаблицаЗаголовков)
		
	КонецЕсли;
	
	// индексы для поиска
	ТаблицаЗаголовков.Индексы.Добавить("НазваниеКолонки, КолонкаНайдена, НумерацияКолонкиНайдена, СтрокаЗаголовка");
			
	ТаблицаЗаголовков.ЗаполнитьЗначения(Ложь, "КолонкаНайдена");
	ТаблицаЗаголовков.ЗаполнитьЗначения(Ложь, "НумерацияКолонкиНайдена");
	ТаблицаЗаголовков.ЗаполнитьЗначения(0, "ИндексКолонки");		
	
	Для Н = 0 По МаксИндексКолонок Цикл
		
		ЗначениеЯчейки = СтрокаДанных[Н];
		Если ТипЗнч(ЗначениеЯчейки) <> Тип("Строка") Тогда
			
			Продолжить;
			
		КонецЕсли;
		ПодготовленноеЗначение = ПодготовитьСтроку(ЗначениеЯчейки);
		МассивЗаголовков = ТаблицаЗаголовков.НайтиСтроки(Новый Структура("КолонкаНайдена, СтрокаЗаголовка", Ложь, 1));
		Для Каждого ЭлементМассива Из МассивЗаголовков Цикл			
			
			Если СтрНайти(ПодготовленноеЗначение, ЭлементМассива.СтрокаПоиска) > 0 Тогда
				
				Если ВидДокумента = "ТОРГ12" И ЭлементМассива.НазваниеКолонки = "СтавкаНДС" Тогда
					
					Если ПодготовленноеЗначение = "ндс" Тогда // исключаю строки "СуммаСНДС" и "СуммаБезНДС"
						
						ЭлементМассива.ИндексКолонки = Н;
						ЭлементМассива.КолонкаНайдена = Истина;
						
					КонецЕсли;
					
				Иначе
				
					ЭлементМассива.ИндексКолонки = Н;
					ЭлементМассива.КолонкаНайдена = Истина;
					
				КонецЕсли;	
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаЗаголовков;	

КонецФункции // ПодготовитьТаблицуПоиска()

Процедура НайтиВторуюСтрокуЗаголовкаТабличнойЧасти(СтрокаДанных, ТаблицаЗаголовков, МаксИндексКолонок, ВидДокумента)
	
	ИскатьЗаголовки = Ложь;
	Для Н = 0 По МаксИндексКолонок Цикл
		
		ЗначениеЯчейки = УдалитьПереносыСтроки(СтрокаДанных[Н]);
		Если ТипЗнч(ЗначениеЯчейки) <> Тип("Строка") Или ПустаяСтрока(ЗначениеЯчейки) Тогда
			
			Продолжить;
			
		КонецЕсли;
		ПодготовленноеЗначение = ПодготовитьСтроку(ЗначениеЯчейки);
		Если ПодготовленноеЗначение = "код" ИЛИ СтрНайти(ПодготовленноеЗначение, "кодпоокеи") > 0 Тогда
		
			ИскатьЗаголовки = Истина;
		
		КонецЕсли;	
		
	КонецЦикла;
	Если Не ИскатьЗаголовки Тогда
		
		Возврат;
		
	КонецЕсли; 	
	
	Для Н = 0 По МаксИндексКолонок Цикл
		
		ЗначениеЯчейки = УдалитьПереносыСтроки(СтрокаДанных[Н]);
		Если ТипЗнч(ЗначениеЯчейки) <> Тип("Строка") Или ПустаяСтрока(ЗначениеЯчейки) Тогда
			
			Продолжить;
			
		КонецЕсли;
		ПодготовленноеЗначение = ПодготовитьСтроку(ЗначениеЯчейки);
		МассивЗаголовков = ТаблицаЗаголовков.НайтиСтроки(Новый Структура("КолонкаНайдена, СтрокаЗаголовка", Ложь, 2));
		Для Каждого ЭлементМассива Из МассивЗаголовков Цикл			
			
			Если СтрНайти(ПодготовленноеЗначение, ЭлементМассива.СтрокаПоиска) > 0 Тогда

				Если ВидДокумента = "ТОРГ12" И ЭлементМассива.НазваниеКолонки = "Артикул" Тогда
					
					Если ПодготовленноеЗначение = "код" Тогда 
						
						ЭлементМассива.ИндексКолонки = Н;
						ЭлементМассива.КолонкаНайдена = Истина;
						
					КонецЕсли;
					
				Иначе
				
					ЭлементМассива.ИндексКолонки = Н;
					ЭлементМассива.КолонкаНайдена = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПроверитьНумерациюКолонокТабличнойЧасти(СтрокаДанных, ТаблицаЗаголовков)

	Для Каждого СтрокаЗаголовков Из ТаблицаЗаголовков Цикл
		
		ЗначениеЯчейки = УдалитьПереносыСтроки(Строка(СтрокаДанных[СтрокаЗаголовков.ИндексКолонки]));
		Если Не ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
			
			Продолжить;
			
		КонецЕсли;	
		ПодготовленноеЗначение = ПодготовитьСтроку(ЗначениеЯчейки);		
		Если СтрокаЗаголовков.НомерКолонки = ПодготовленноеЗначение Тогда
			
			СтрокаЗаголовков.НумерацияКолонкиНайдена = Истина;	
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура РазобратьСтрокуТабличнойЧасти(СтрокаДанных, ТаблицаЗаголовков, НомерСтрокиТовара, ТаблицаТоваров)

	ЗаголовокНомерПоПорядку = ТаблицаЗаголовков.Найти("НомТов", "НазваниеКолонки");
	ЗначениеЯчейки = УдалитьПереносыСтроки(СтрокаДанных[ЗаголовокНомерПоПорядку.ИндексКолонки]);
	ПодготовленноеЗначение = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЗначениеЯчейки);
	Если ПодготовленноеЗначение <> НомерСтрокиТовара Тогда
		
		Возврат;
		
	КонецЕсли;	
	НоваяСтрокаТовара = ТаблицаТоваров.Добавить();	
	МассивЗаголовков = ТаблицаЗаголовков.НайтиСтроки(Новый Структура("КолонкаНайдена", Истина));
	Для Каждого ЭлементЗаголовка Из МассивЗаголовков Цикл
		
		ЗначениеЯчейки = УдалитьПереносыСтроки(СтрокаДанных[ЭлементЗаголовка.ИндексКолонки]);		
		Если ЭлементЗаголовка.ТипДанных = "Число" Тогда
			
			Если ЭлементЗаголовка.НазваниеКолонки = "СтавкаНДС" Тогда
				
				ЗначениеЯчейки = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЦифрыИзСтроки(ЗначениеЯчейки));	
				
			Иначе	
				
				ЗначениеЯчейки = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЗначениеЯчейки);
				
			КонецЕсли;
			
		ИначеЕсли ЭлементЗаголовка.ТипДанных = "Строка" Тогда
			
			ЗначениеЯчейки = Строка(ЗначениеЯчейки);
			Если ЭлементЗаголовка.НазваниеКолонки = "НаимЕдИзм" Тогда
				
				ЗначениеЯчейки = "";
				
			КонецЕсли;
			
		КонецЕсли;
			
		НоваяСтрокаТовара[ЭлементЗаголовка.НазваниеКолонки] = ЗначениеЯчейки;
		
	КонецЦикла;
    НомерСтрокиТовара = НомерСтрокиТовара + 1;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаписьДанныхДокументаВXML

Функция ЗаписатьДанныеВXML(ДанныеДокумента)
	
	ВременныйКаталог = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор()) + ПолучитьРазделительПути();
	СоздатьКаталог(ВременныйКаталог);	
	УдалитьФайлы(ВременныйКаталог, "*");
	Ид = Строка(Новый УникальныйИдентификатор());
	ТекстОшибки = "";
	
	СформироватьXMLДокумента(ДанныеДокумента, ВременныйКаталог, ТекстОшибки);	
	СформироватьТранспортнуюИнформациюXML(ВременныйКаталог, Ид);
	СформироватьКарточкуXML(ВременныйКаталог, Ид, ДанныеДокумента);
	
	ФайлАрхива = ПолучитьИмяВременногоФайла("zip");
	ЗипКонтейнер = Новый ЗаписьZipФайла();	
	ЗипКонтейнер.Открыть(ФайлАрхива);	
	ОбъектыДобавляемыеВАрхив = ВременныйКаталог + "*";
	ЗипКонтейнер.Добавить(ОбъектыДобавляемыеВАрхив);
	ЗипКонтейнер.Записать();	
	
	УдалитьФайлы(ВременныйКаталог);
	
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		Возврат ФайлАрхива;
		
	КонецЕсли;
	
КонецФункции

Процедура СформироватьXMLДокумента(ДанныеДокумента, ВременныйКаталог, ТекстОшибки)
	
	Попытка
		
		ДанныеПоставщика = ДанныеДокумента.Поставщик;
		ДанныеГрузополучателя = ДанныеДокумента.Грузополучатель;
		ДатаСеанса = Формат(ТекущаяДатаСеанса(), "ДФ=dd.MM.yyyy"); 
		
		ДатаТН = Формат(СтроковыеФункцииКлиентСервер.СтрокаВДату(ДанныеДокумента.ДатаТН), "ДФ=dd.MM.yyyy");
		
		СтруктураФайла = Новый Структура("Префикс, ИДПолучателя, ИДОтправителя, ГГГГММДД, УникальныйИдентификатор");
		СтруктураФайла.Префикс = "DP_OTORG12";
		СтруктураФайла.ИДПолучателя = ДанныеГрузополучателя.ИНН + ?(ДанныеГрузополучателя.Свойство("КПП"),
			"_" + ДанныеГрузополучателя.КПП, "");
		СтруктураФайла.ИДОтправителя = ДанныеПоставщика.ИНН + ?(ДанныеПоставщика.Свойство("КПП"),
			"_" + ДанныеПоставщика.КПП, "");
		СтруктураФайла.ГГГГММДД = ДатаСеанса;
		СтруктураФайла.УникальныйИдентификатор = Строка(Новый УникальныйИдентификатор());
		ИдФайла = ОбменСКонтрагентамиСлужебный.ФНСИмяФайла(СтруктураФайла);
			
		ПространствоИменСхемы = "OTORG_5_01_02";
		Файл = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл", ПространствоИменСхемы);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Файл, "ИдФайл",   ИдФайла,   Истина, ТекстОшибки);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", "1С:Предприятие 8", , ТекстОшибки);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", "5.01", Истина, ТекстОшибки);				
		
		СвУчДокОбор = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.СвУчДокОбор", ПространствоИменСхемы);
		КС = Новый КвалификаторыСтроки(46, ДопустимаяДлина.Фиксированная);
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ОписаниеТиповСтрока46 = Новый ОписаниеТипов(Массив, , КС);
		
		ИдОтпр = ОписаниеТиповСтрока46.ПривестиЗначение(СтруктураФайла.ИдОтправителя);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдОтпр", ИдОтпр, Истина, ТекстОшибки);
		ИдПок = ОписаниеТиповСтрока46.ПривестиЗначение(СтруктураФайла.ИдПолучателя);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдПок", ИдПок, Истина, ТекстОшибки);
		
		СвОЭДОтпр = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.СвУчДокОбор.СвОЭДОтпрСФ", ПространствоИменСхемы);
		НаимОрг = """ООО Такском""";
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "НаимОрг", НаимОрг, Истина, ТекстОшибки);
		ИННЮЛ = "7704211201";
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИННЮЛ", ИННЮЛ, Истина, ТекстОшибки);
		ИдЭДО = "2AL";
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИдЭДОСФ", ИдЭДО, Истина, ТекстОшибки);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвУчДокОбор, "СвОЭДОтпрСФ",СвОЭДОтпр, , ТекстОшибки);	
		
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СвУчДокОбор, Истина, ТекстОшибки);
		
		Документ = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИменСхемы);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Документ, "КНД", "1175004", Истина, ТекстОшибки);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Документ, "ДатаДок", ДатаТН, Истина, ТекстОшибки);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Документ, "ВремДок", Формат(ТекущаяДатаСеанса(), "ДФ=ЧЧ.мм.сс"), Истина, ТекстОшибки);
		
		СвТНО = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СвТНО", ПространствоИменСхемы);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвТНО, "НаимПервДок", "Товарная накладная", Истина, ТекстОшибки);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвТНО, "ОКУДПервДок", "0330212", Истина, ТекстОшибки);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвТНО, "НомФорм", "ТОРГ-12", Истина, ТекстОшибки);
		
		// поставщик	
		Поставщик = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);
		ИдСв = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("УчастникТип.ИдСв", ПространствоИменСхемы);
		ПодготовитьДанныеУчастника(ДанныеПоставщика, ПространствоИменСхемы, ИдСв, ТекстОшибки);
	    ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Поставщик, "ИдСв",  ИдСв, , ТекстОшибки);		
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвТНО, "Поставщик",  Поставщик, , ТекстОшибки);	
		
		// грузополучатель	
		Грузополучатель = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);
		ИдСв = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("УчастникТип.ИдСв", ПространствоИменСхемы);
		ПодготовитьДанныеУчастника(ДанныеГрузополучателя, ПространствоИменСхемы, ИдСв, ТекстОшибки);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Грузополучатель, "ИдСв",  ИдСв, , ТекстОшибки);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвТНО, "ГрузПолуч",  Грузополучатель, , ТекстОшибки);	
		
		// плательщик
		ДанныеПлательщика = ДанныеДокумента.Плательщик;
		Плательщик = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);
		ИдСв = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("УчастникТип.ИдСв", ПространствоИменСхемы);
		ПодготовитьДанныеУчастника(ДанныеПлательщика, ПространствоИменСхемы, ИдСв, ТекстОшибки);
	    ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Плательщик, "ИдСв",  ИдСв, , ТекстОшибки);		
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвТНО, "Плательщик",  Плательщик, , ТекстОшибки);	
		
		// тн
		ТН = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ТН", ПространствоИменСхемы);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ТН, "НомТН", ДанныеДокумента.НомТН, Истина, ТекстОшибки);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ТН, "ДатаТН", ДатаТН, Истина, ТекстОшибки);
		
		// таблица товаров
		Таблица = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ТН.Таблица", ПространствоИменСхемы);	 
		СуммаБезНДСВсего = 0;
		СуммаСНДСВсего = 0;
		Для Каждого Товар Из ДанныеДокумента.ТаблицаТоваров Цикл		
			
			СведТов = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ТН.Таблица.СвТов", ПространствоИменСхемы);		
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СведТов, "НомТов", Товар.НомТов, Истина, ТекстОшибки);		
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СведТов, "НаимЕдИзм", ?(ПустаяСтрока(Товар.НаимЕдИзм), "шт", Товар.НаимЕдИзм), Истина, ТекстОшибки);		
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СведТов, "Нетто", Товар.Нетто, Истина, ТекстОшибки);		
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СведТов, "НаимТов", Товар.НаимТов, , ТекстОшибки);				
			Если СтрДлина(Товар.ОКЕИ_Тов) = 3 Тогда
				
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СведТов, "ОКЕИ_Тов", Товар.ОКЕИ_Тов, , ТекстОшибки);
				
			КонецЕсли;  						
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СведТов, "Цена", Товар.Цена, , ТекстОшибки);				
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СведТов, "СумБезНДС", Товар.СумБезНДС, , ТекстОшибки);				
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СведТов, "СтавкаНДС", Товар.СтавкаНДС, , ТекстОшибки);		
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СведТов, "СумНДС", Товар.СумУчНДС - Товар.СумБезНДС, , ТекстОшибки);		
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СведТов, "СумУчНДС", Товар.СумУчНДС, Истина, ТекстОшибки);
			
			ДопДанные = "";
			ШаблонДопДанных = "<Реквизит Имя=""%1"" Значение=""%2""/>";
			Если ЗначениеЗаполнено(Товар.НомерТД)
				И ЗначениеЗаполнено(СтрЗаменить(Товар.НомерТД, "-", "")) Тогда
				
				ДопДанные = ДопДанные + СтрШаблон(ШаблонДопДанных, "НомерТД", Товар.НомерТД);
				
			КонецЕсли;
			Если ЗначениеЗаполнено(Товар.КодСтраны)
				И ЗначениеЗаполнено(СтрЗаменить(Товар.КодСтраны, "-", "")) Тогда
				
				ДопДанные = ДопДанные + СтрШаблон(ШаблонДопДанных, "КодСтраныПроисхождения", Товар.КодСтраны);
				
			КонецЕсли;
			Если Не ПустаяСтрока(ДопДанные) Тогда
				
				ДопДанные = "<Данные>" + ДопДанные + "</Данные>";
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СведТов, "ИнфПолСтр", ДопДанные,, ТекстОшибки);
				
			КонецЕсли;
			
			СуммаБезНДСВсего = СуммаБезНДСВсего + Товар.СумБезНДС;
			СуммаСНДСВсего = СуммаСНДСВсего + Товар.СумУчНДС; 
			
			Таблица.СвТов.Добавить(СведТов);
			
		КонецЦикла;
		
		// итого по таблице товаров
		ВсегоНакл = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ТН.Таблица.ВсегоНакл", ПространствоИменСхемы);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ВсегоНакл, "СумБезНДСВс", СуммаБезНДСВсего, , ТекстОшибки);	
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ВсегоНакл, "СумНДСВс", СуммаСНДСВсего - СуммаБезНДСВсего, , ТекстОшибки);	
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ВсегоНакл, "СумУчНДСВс", СуммаСНДСВсего, , ТекстОшибки);	
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Таблица, "ВсегоНакл", ВсегоНакл, , ТекстОшибки);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ТН, "Таблица", Таблица, Истина, ТекстОшибки);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвТНО, "ТН", ТН, Истина, ТекстОшибки);	
		
		ИнфПол = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ИнфПол", ПространствоИменСхемы);
		СтрокаИнфПол = "<Данные><Реквизит Имя=""ЗагрузкаИзФайлаExcel"" Значение=""Истина""/></Данные>";
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ИнфПол, "ТекстИнф", СтрокаИнфПол, , ТекстОшибки);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвТНО, "ИнфПол", ИнфПол, Истина, ТекстОшибки);	
		
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Документ, "СвТНО", СвТНО, Истина, ТекстОшибки);
		Подписант = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Документ, "Подписант", Подписант, Истина, ТекстОшибки);

		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, ТекстОшибки);
		Файл.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
		ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДвФайл(Файл, ВременныйКаталог + "doc.xml", Ложь, "windows-1251");  	
		
	Исключение
		
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
		ЭлектронноеВзаимодействиеБПВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
																					
		Если ПустаяСтрока(ТекстОшибки) Тогда
			
			ТекстОшибки = ТекстСообщения;	
			
		КонецЕсли;
		
	КонецПопытки;
	
КонецПроцедуры // ЗаписатьДанныеВXML()

Процедура ПодготовитьДанныеУчастника(ДанныеУчастника, ПространствоИменСхемы, ИдСв, ТекстОшибки)
	
	Если СтрДлина(ДанныеУчастника.ИНН) > 10 Тогда
		
		ФИО = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);
		СвФЛ = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвФЛ", ПространствоИменСхемы);		
		ДанныеИП = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ДанныеУчастника.НаименованиеПолное, " ", Истина, Истина);
		Для Н = 0 По ДанныеИП.ВГраница() Цикл
			
			Если Н = 0 Тогда
				
				ФИО.Фамилия = ДанныеИП[Н];
				
			ИначеЕсли  Н = 1 Тогда
				
				ФИО.Имя = ДанныеИП[Н];
				
			ИначеЕсли  Н = 2 Тогда
				
				ФИО.Отчество = ДанныеИП[Н];
				
			КонецЕсли;
			
		КонецЦикла;  
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвФЛ, "ФИОИП", ФИО, , ТекстОшибки);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвФЛ, "ИННФЛ", ДанныеУчастника.ИНН, , ТекстОшибки);			
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ИдСв, "СвФЛ",  СвФЛ, , ТекстОшибки);			
		
	Иначе
		
		СвЮЛ = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвЮЛ", ПространствоИменСхемы);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвЮЛ, "НаимОрг", ДанныеУчастника.НаименованиеПолное, , ТекстОшибки);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвЮЛ, "ИННЮЛ", ДанныеУчастника.ИНН, , ТекстОшибки);
		Если ДанныеУчастника.Свойство("КПП") Тогда
			
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СвЮЛ, "КПП", ДанныеУчастника.КПП, , ТекстОшибки);
			
		КонецЕсли;
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ИдСв, "СвЮЛ",  СвЮЛ, , ТекстОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьТранспортнуюИнформациюXML(ВременныйКаталог, Ид)
	
	ТекстОшибки = "";
	ПутьКОписанию = "{http://api-invoice.taxcom.ru/meta}.ContainerDescription";	
	Попытка
		
		ОписаниеКонтейнера = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML(ПутьКОписанию);
		
		Документооборот = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML(ПутьКОписанию + ".DocFlow");
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Документооборот, "ID", Ид, , ТекстОшибки);
		
		ДокументыСхемы  = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML(ПутьКОписанию + ".DocFlow.Documents");
		Документ     = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML(ПутьКОписанию + ".DocFlow.Documents.Document"); 		
		
		Файлы = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML(ПутьКОписанию + ".DocFlow.Documents.Document.Files");
		ФайлДанных = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML(ПутьКОписанию + ".DocFlow.Documents.Document.Files.MainImage");
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФайлДанных, "Path", "doc.xml", Истина, ТекстОшибки);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Файлы, "MainImage", ФайлДанных, , ТекстОшибки);				
			
		ФайлКарточки = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML(ПутьКОписанию + ".DocFlow.Documents.Document.Files.ExternalCard");
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФайлКарточки, "Path", "card.xml", , ТекстОшибки);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Файлы, "ExternalCard", ФайлКарточки, , ТекстОшибки);
		
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Документ, "Files", Файлы, , ТекстОшибки);
		ДокументыСхемы.Document.Добавить(Документ);
		
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Документооборот, "Documents", ДокументыСхемы, , ТекстОшибки);
		ОписаниеКонтейнера.DocFlow.Добавить(Документооборот);
		
		ОписаниеКонтейнера.Проверить();		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
		ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДвФайл(ОписаниеКонтейнера, ВременныйКаталог + "meta.xml", Ложь);		
		
	Исключение
		
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
		ЭлектронноеВзаимодействиеБПВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование транспортной информации'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);                                   		
																					
	КонецПопытки; 

КонецПроцедуры

Процедура СформироватьКарточкуXML(ВременныйКаталог, Ид, ДанныеДокумента)

	ПутьКОписанию = "{http://api-invoice.taxcom.ru/card}.Card";
	ТекстОшибки = "";
	ДанныеПоставщика = ДанныеДокумента.Поставщик;
	ДанныеГрузополучателя = ДанныеДокумента.Грузополучатель;	
	Попытка
		
		Карточка = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML(ПутьКОписанию);
		
		АбонентОтправитель = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML(ПутьКОписанию + ".Sender.Abonent");
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(АбонентОтправитель, "Id", ДанныеПоставщика.ИНН, , ТекстОшибки);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(АбонентОтправитель, "Name", ДанныеПоставщика.НаименованиеПолное, , ТекстОшибки);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(АбонентОтправитель, "Inn", ДанныеПоставщика.ИНН, , ТекстОшибки);				
		Отправитель = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML(ПутьКОписанию + ".Sender");
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Отправитель, "Abonent", АбонентОтправитель, , ТекстОшибки);
	
		АбонентПолучатель  = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML(ПутьКОписанию + ".Receiver.Abonent");								
		Получатель  = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML(ПутьКОписанию + ".Receiver");
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Получатель, "Abonent", АбонентПолучатель, , ТекстОшибки);
		
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Карточка, "Sender", Отправитель, , ТекстОшибки);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Карточка, "Receiver", Получатель, , ТекстОшибки);
		
		Идентификаторы = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML(ПутьКОписанию + ".Identifiers");
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Идентификаторы, "ExternalIdentifier", Ид, , ТекстОшибки);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Карточка, "Identifiers", Идентификаторы, , ТекстОшибки);
		
		Тип = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML(ПутьКОписанию + ".Type");
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Тип, "Name", "Consignment", , ТекстОшибки);		
			
		Описание = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML(ПутьКОписанию + ".Description");
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Описание, "Title", "ТОРГ-12 (титул продавца)", , ТекстОшибки);				
				
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Карточка, "Type", Тип, , ТекстОшибки);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Карточка, "Description", Описание, , ТекстОшибки);
		
		Карточка.Проверить();		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
		ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДвФайл(Карточка, ВременныйКаталог + "card.xml", Ложь);
	
	Исключение
		
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронноеВзаимодействиеБПВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование карточки такском'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);		
	
	КонецПопытки;	

КонецПроцедуры  

#КонецОбласти

#Область ЭлектронноеВзаимодействие

Функция ЗагрузитьФайлВТаблицу(ИмяВременногоФайла)
	
	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("ЕстьОшибки", Ложь);	
	ЗагрузитьВТаблицуMXL(ИмяВременногоФайла, РезультатВыполнения);
	
	Возврат РезультатВыполнения;
	
КонецФункции

Функция НомерТДПолучитьСсылку(НомерТД)
	
	НомерТД = СокрЛП(НомерТД);
	Если ПустаяСтрока(НомерТД) Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	НомерТДСсылка = Справочники.НомераГТД.НайтиПоКоду(НомерТД);
	Если Не ЗначениеЗаполнено(НомерТДСсылка) Тогда
		
		НомерТДОбъект = Справочники.НомераГТД.СоздатьЭлемент();
		НомерТДОбъект.Код = НомерТД;
		НомерТДОбъект.Записать();
		НомерТДСсылка = НомерТДОбъект.Ссылка;
		
	КонецЕсли; 
	
	Возврат НомерТДСсылка;
	
КонецФункции

Функция СтранаПроисхожденияПолучитьСсылку(КодСтраныПроисхождения)

	Попытка
		
		СтранаПроисхожденияСсылка = Справочники.СтраныМира.СсылкаПоДаннымКлассификатора(Новый Структура("Код", СокрЛП(КодСтраныПроисхождения)));
		
	Исключение
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось найти страну происхождения в классификаторе стран мира.");
		
		Возврат Неопределено;
		
	КонецПопытки;
	Если ЗначениеЗаполнено(СтранаПроисхожденияСсылка) Тогда
		
		Возврат СтранаПроисхожденияСсылка;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;

КонецФункции // СтранаПроисхожденияПолучитьСсылку()

Функция ЭтоСсылочноеЗначениеДереваРазбора(ДеревоРазбора, Значение, СтрокаПоСсылке = Неопределено)
	
	ЗначениеСтрокой = Строка(Значение);
	
	Если Найти(ЗначениеСтрокой, "_") > 0 Тогда
		СтрокаПоСсылке =  ДеревоРазбора.Строки.Найти(ЗначениеСтрокой, "ИндексСтроки", Истина);
	КонецЕсли;
	
	Возврат ?(СтрокаПоСсылке = Неопределено, Ложь, Истина);
	
КонецФункции

Процедура ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ОписаниеСобытия,
														КодСобытия = 0,
														УровеньВажности = Неопределено,
														ОбъектМетаданных = Неопределено,
														ДанныеСсылка = Неопределено,
														РежимТранзакции = Неопределено) Экспорт
	
	Уровень = "Общая подсистема";
	Если КодСобытия = 1 Тогда
		Уровень = "Обмен с банками";
	ИначеЕсли КодСобытия = 2 Тогда
		Уровень = "Обмен с контрагентами";
	ИначеЕсли КодСобытия = 3 Тогда
		Уровень = "Обмен с сайтами";
	ИначеЕсли КодСобытия = 4 Тогда
		Уровень = "Регламентные задания";
	КонецЕсли;
	УровеньВажностиСобытия = ?(ТипЗнч(УровеньВажности) = Тип("УровеньЖурналаРегистрации"),
		УровеньВажности, УровеньЖурналаРегистрации.Ошибка);
	Шаблон = НСтр("ru = 'Электронное взаимодействие.%1'");
	ИмяСобытия = СтрЗаменить(Шаблон, "%1", Уровень);
	ЗаписьЖурналаРегистрации(ИмяСобытия,
		УровеньВажностиСобытия, ОбъектМетаданных, ДанныеСсылка, ОписаниеСобытия, РежимТранзакции);
	
КонецПроцедуры

Функция СформироватьЗипАрхивФайлов(ИмяОсновногоФайла, МассивФайлов)
	
	Попытка
		Файл = Новый Файл(ИмяОсновногоФайла);
		ФайлЗипАрхива = СтрЗаменить(ИмяОсновногоФайла, Файл.Расширение, ".zip");
		ЗаписьЗип = Новый ЗаписьZIPФайла(ФайлЗипАрхива);
		Для Каждого ИмяФайла Из МассивФайлов Цикл
			ЗаписьЗип.Добавить(ИмяФайла);
		КонецЦикла;
		ЗаписьЗип.Записать();
		Возврат ФайлЗипАрхива;
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
			+ НСтр("ru = ' (подробности см. в Журнале регистрации).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + Символы.ПС
			+ НСтр("ru = 'Проверьте поддержку русского языка в региональных настройках ОС для non-Unicode programs
			|и наличие доступа к каталогу временных файлов.'");
		ЭлектронноеВзаимодействиеБПВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'запись файла архива на диск'"),
																					ТекстОшибки,
																					ТекстСообщения);
		
		Возврат "";
	КонецПопытки;
	
КонецФункции

Функция ОпределитьТипСохраненияПоПеречислению(ТипСохранения)
	
	СтруктураВозврата = Новый Структура("ПредставлениеРасширения, ПредставлениеТипаСохранения");
	Если ТипСохранения = Перечисления.ФорматыФайловОбменаЭД.DOCX Тогда
		СтруктураВозврата.ПредставлениеРасширения = "docx";
		СтруктураВозврата.ПредставлениеТипаСохранения = ТипФайлаТабличногоДокумента.DOCX;
	ИначеЕсли ТипСохранения = Перечисления.ФорматыФайловОбменаЭД.HTML Тогда
		СтруктураВозврата.ПредставлениеРасширения = "html";
		СтруктураВозврата.ПредставлениеТипаСохранения = ТипФайлаТабличногоДокумента.HTML;
	ИначеЕсли ТипСохранения = Перечисления.ФорматыФайловОбменаЭД.XLS Тогда
		СтруктураВозврата.ПредставлениеРасширения = "xls";
		СтруктураВозврата.ПредставлениеТипаСохранения = ТипФайлаТабличногоДокумента.XLS;
	ИначеЕсли ТипСохранения = Перечисления.ФорматыФайловОбменаЭД.MXL Тогда
		СтруктураВозврата.ПредставлениеРасширения = "mxl";
		СтруктураВозврата.ПредставлениеТипаСохранения = ТипФайлаТабличногоДокумента.MXL;
	ИначеЕсли ТипСохранения = Перечисления.ФорматыФайловОбменаЭД.ODS Тогда
		СтруктураВозврата.ПредставлениеРасширения = "ods";
		СтруктураВозврата.ПредставлениеТипаСохранения = ТипФайлаТабличногоДокумента.ODS;
	ИначеЕсли ТипСохранения = Перечисления.ФорматыФайловОбменаЭД.PDF Тогда
		СтруктураВозврата.ПредставлениеРасширения = "pdf";
		СтруктураВозврата.ПредставлениеТипаСохранения = ТипФайлаТабличногоДокумента.PDF;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ОрганизацияПоДаннымЭД(ДеревоДанных, ВидУчастника)
	
	Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Организации.Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.ИНН = &ИНН
			|	И Организации.КПП = &КПП
			|	И Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)";
		Запрос.УстановитьПараметр("ИНН", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН"));
		Запрос.УстановитьПараметр("КПП", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП"));
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
		
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Организации.Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.ИНН = &ИНН
			|	И Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)";
		Запрос.УстановитьПараметр("ИНН", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН"));
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
		
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ФЛ" Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Организации.Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.ИНН = &ИНН
			|	И Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)";
		Запрос.УстановитьПараметр("ИНН", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.ИНН"));
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Справочники.Организации.ПустаяСсылка();
	
КонецФункции

Функция КонтрагентПоДаннымЭД(ДеревоДанных, ВидУчастника)
	
	Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Контрагенты.Ссылка
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.ИНН = &ИНН
			|	И Контрагенты.КПП = &КПП
			|	И Контрагенты.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)";
		Запрос.УстановитьПараметр("ИНН", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН"));
		Запрос.УстановитьПараметр("КПП", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП"));
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
		
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Контрагенты.Ссылка
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.ИНН = &ИНН
			|	И Контрагенты.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)";
		Запрос.УстановитьПараметр("ИНН", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН"));
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
		
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ФЛ"  Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Контрагенты.Ссылка
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.ИНН = &ИНН
			|	И Контрагенты.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)";
		Запрос.УстановитьПараметр("ИНН", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.ИНН"));
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
		
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИЛ" Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Контрагенты.Ссылка
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.НаименованиеПолное = &НаименованиеПолное";
		Запрос.УстановитьПараметр("НаименованиеПолное",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации"));
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Справочники.Контрагенты.ПустаяСсылка();
	
КонецФункции

Функция НоменклатураКонтрагента(Контрагент, Идентификатор, Наименование)
	
	Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		// Заполним номенклатуру поставщика
		РеквизитыНоменклатурыПоставщика = Новый Структура;
		РеквизитыНоменклатурыПоставщика.Вставить("Владелец", Контрагент);
		РеквизитыНоменклатурыПоставщика.Вставить("Идентификатор", Идентификатор);
		НоменклатураПоставщикаСсылка = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("НоменклатураПоставщиков", ,
			РеквизитыНоменклатурыПоставщика);
		Если ЗначениеЗаполнено(НоменклатураПоставщикаСсылка) Тогда
			Номенклатура = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоменклатураПоставщикаСсылка, "Номенклатура");
		Иначе
			НоменклатураПоставщика = Справочники.НоменклатураПоставщиков.СоздатьЭлемент();
			НоменклатураПоставщика.Идентификатор = Идентификатор;
			НоменклатураПоставщика.Владелец     = Контрагент;
			НоменклатураПоставщика.Наименование = Наименование;
			
			НоменклатураПоставщика.Записать();
			Номенклатура = НоменклатураПоставщика.Номенклатура;
		КонецЕсли;
		
		
	КонецЕсли;
	
	Возврат Номенклатура;
	
КонецФункции

#КонецОбласти

#Область ВидЭлектронногоДокумента

Функция АктуальныйЭлектронныйДокумент(Ссылка)
	
	МассивСсылок = Новый Массив();
	МассивСсылок.Добавить(Ссылка);
	СоответствиеСсылок = ОбменСКонтрагентамиСлужебныйВызовСервера.ВладельцыИЭлектронныеДокументы(МассивСсылок);
	ЭД = СоответствиеСсылок.Получить(Ссылка);
	
	Возврат ЭД;
	
КонецФункции

Функция ДокументОснованиеСчетаФактурыВыданного(СчетФактура)
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("СчетФактура", СчетФактура);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СчетФактураВыданныйДокументыОснования.ДокументОснование
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|ГДЕ
	|	СчетФактураВыданныйДокументыОснования.Ссылка = &СчетФактура
	|	И СчетФактураВыданныйДокументыОснования.НомерСтроки = 1";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ДокументОснование;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ДокументОснованиеСчетаФактурыПолученного(СчетФактура)
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("СчетФактура", СчетФактура);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СчетФактураПолученныйДокументыОснования.ДокументОснование
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
	|ГДЕ
	|	СчетФактураПолученныйДокументыОснования.Ссылка = &СчетФактура
	|	И СчетФактураПолученныйДокументыОснования.НомерСтроки = 1";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ДокументОснование;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область СозданиеДокументовИнформационнойБазы

Функция ПодготовитьСтруктуруДляСчетаНаОплатуПоставщика(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	
	Товары = Документы.СчетНаОплатуПоставщика.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	
	ЦенаВключаетНДС = ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "ЦенаВключаетНДС", Истина, ДеревоРазбора);
	Если ЦенаВключаетНДС = Неопределено Тогда
		ЦенаВключаетНДС = Ложь;
	КонецЕсли;
	
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		
		Если СтрокаРеквизита.Строки.Количество() = 0 Тогда
			
			Реквизит = ПолучитьЗначениеРеквизита(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			Если ЗначениеЗаполнено(Реквизит) Тогда
				ДанныеЗаполненияШапки.Вставить(СтрокаРеквизита.Реквизит, Реквизит);
			КонецЕсли;
			
		Иначе
			
			ДанныеДляЗаполненияСтрокиТЧ = ПолучитьДанныеСтрокиТЧ(СтрокаРеквизита.Строки, ДеревоРазбора, ЦенаВключаетНДС);			
			ЗаполнитьЗначенияСвойств(Товары.Добавить(), ДанныеДляЗаполненияСтрокиТЧ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СкопироватьЗначениеСтруктуры(ДанныеЗаполненияШапки, "Валюта", "ВалютаДокумента");
	СкопироватьЗначениеСтруктуры(ДанныеЗаполненияШапки, "Курс", "КурсВзаиморасчетов");
	
	СкопироватьЗначениеСтруктуры(ДанныеЗаполненияШапки, "ЦенаВключаетНДС", "СуммаВключаетНДС");
	
	Если НЕ ДанныеЗаполненияШапки.Свойство("КратностьВзаиморасчетов") Тогда
		ДанныеЗаполненияШапки.Вставить("КратностьВзаиморасчетов", 1);
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("НомерВходящегоДокумента",ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "Номер"));
	ДанныеЗаполненияШапки.Вставить("ДатаВходящегоДокумента", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "Дата"));
	
	ДанныеДляОбъекта.Вставить("Шапка", ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", Товары);	
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляПоступленияТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	
	Товары = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	Услуги = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка().Услуги.ВыгрузитьКолонки();
	ВозвратнаяТара = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка().ВозвратнаяТара.ВыгрузитьКолонки();
	
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		Если СтрокаРеквизита.Реквизит = "СписокОписаний" Тогда
			СтрокаРеквизитаОписанийРабот = ПолучитьЗначениеРеквизита(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			Для Каждого СтрокаРеквизитаОписания Из СтрокаРеквизитаОписанийРабот.Строки Цикл
				Если СтрокаРеквизитаОписания.Строки.Количество() = 0 Тогда
					Реквизит = ПолучитьЗначениеРеквизита(СтрокаРеквизитаОписания, СтрокаРеквизитаОписания.Реквизит, Истина, ДеревоРазбора);
					Если ЗначениеЗаполнено(Реквизит) Тогда
						ДанныеЗаполненияШапки.Вставить(СтрокаРеквизитаОписания.Реквизит, Реквизит);
					КонецЕсли;
				Иначе
					ДанныеДляЗаполненияСтрокиТЧ = ПолучитьДанныеСтрокиТЧ(СтрокаРеквизитаОписания.Строки, ДеревоРазбора);
					ЗаполнитьЗначенияСвойств(Услуги.Добавить(), ДанныеДляЗаполненияСтрокиТЧ);
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если СтрокаРеквизита.Строки.Количество() = 0 Тогда
				Реквизит = ПолучитьЗначениеРеквизита(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
				Если ЗначениеЗаполнено(Реквизит) Тогда
					ДанныеЗаполненияШапки.Вставить(СтрокаРеквизита.Реквизит, Реквизит);
				КонецЕсли;
			Иначе
				ДанныеДляЗаполненияСтрокиТЧ = ПолучитьДанныеСтрокиТЧ(СтрокаРеквизита.Строки, ДеревоРазбора);
				Если ДанныеДляЗаполненияСтрокиТЧ.Свойство("Услуга")
					И ДанныеДляЗаполненияСтрокиТЧ.Услуга = Истина Тогда
					СтрокаТаблицы = Услуги.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеДляЗаполненияСтрокиТЧ);
					Если Не ЗначениеЗаполнено(ДанныеДляЗаполненияСтрокиТЧ.Количество)
							И ЗначениеЗаполнено(ДанныеДляЗаполненияСтрокиТЧ.МассаНетто)
							И ДанныеДляЗаполненияСтрокиТЧ.МассаНетто > 0 Тогда
							
							СтрокаТаблицы.Количество = ДанныеДляЗаполненияСтрокиТЧ.МассаНетто;
							
					КонецЕсли;
				Иначе
					
					Если ДанныеДляЗаполненияСтрокиТЧ.Свойство("ТаблицаДокумента")
						И ДанныеДляЗаполненияСтрокиТЧ.ТаблицаДокумента = "ВозвратнаяТара" Тогда
						
						СтрокаТаблицы = ВозвратнаяТара.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеДляЗаполненияСтрокиТЧ);
						
					Иначе
						
						СтрокаТаблицы = Товары.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеДляЗаполненияСтрокиТЧ);
						ЭлектронноеВзаимодействиеБП.ЗаполнитьНомерТДИСтрануПроисхождения(СтрокаТаблицы, ДанныеДляЗаполненияСтрокиТЧ);
						Если Не ЗначениеЗаполнено(ДанныеДляЗаполненияСтрокиТЧ.Количество)
							И ЗначениеЗаполнено(ДанныеДляЗаполненияСтрокиТЧ.МассаНетто)
							И ДанныеДляЗаполненияСтрокиТЧ.МассаНетто > 0 Тогда
							
							СтрокаТаблицы.Количество = ДанныеДляЗаполненияСтрокиТЧ.МассаНетто;
							
						КонецЕсли;
						
					КонецЕсли;
						
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СкопироватьЗначениеСтруктуры(ДанныеЗаполненияШапки, "Валюта", "ВалютаДокумента");
	СкопироватьЗначениеСтруктуры(ДанныеЗаполненияШапки, "Курс", "КурсВзаиморасчетов");
	Если НЕ ДанныеЗаполненияШапки.Свойство("КратностьВзаиморасчетов") Тогда
		ДанныеЗаполненияШапки.Вставить("КратностьВзаиморасчетов", 1);
	КонецЕсли;
	
	Организация = ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "Организация", Истина, ДеревоРазбора);
	Если Организация = Неопределено Тогда
		
		ИндексСтроки = ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "Организация", Истина);
		НайденнаяСтрока = ДеревоРазбора.Строки.Найти(ИндексСтроки, "ИндексСтроки", Истина);
		ИННОрганизации = ПолучитьЗначениеРеквизита(НайденнаяСтрока, "ИНН", Истина);
		КППОрганизации = ПолучитьЗначениеРеквизита(НайденнаяСтрока, "КПП", Истина);
		
		Если ИННОрганизации <> Неопределено Тогда
			
			Организация = СсылкаНаОбъектПоИННКПП("Организации", ИННОрганизации, КППОрганизации);
			Если Организация = Неопределено Тогда
				
				Организация = СсылкаНаОбъектПоИННКПП("Организации", ИННОрганизации);
				
			КонецЕсли;
			Если Организация <> Неопределено Тогда
				
				ДанныеЗаполненияШапки.Вставить("Организация", Организация);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("СчетНаОплатуПоставщика",  ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "Основание", Истина, ДеревоРазбора));
	
	ДанныеЗаполненияШапки.Вставить("НомерВходящегоДокумента", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "Номер"));
	ДанныеЗаполненияШапки.Вставить("ДатаВходящегоДокумента",  ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "Дата"));
	
	НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ПередачаТовараКомитентом", Истина);
	Если НайденноеЗначение <> Неопределено Тогда
		ДанныеЗаполненияШапки.Вставить("ПередачаТовараКомитентом", Булево(НайденноеЗначение));
	Иначе
		ДанныеЗаполненияШапки.Вставить("ПередачаТовараКомитентом", Ложь);
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Удалить("ВидОперации");
	ДанныеЗаполненияШапки.Вставить("СуммаВключаетНДС", Ложь);
	
	ДанныеДляОбъекта.Вставить("Шапка", ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", Товары);
	ДанныеДляОбъекта.Вставить("Услуги", Услуги);
	ДанныеДляОбъекта.Вставить("ВозвратнаяТара", ВозвратнаяТара);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляПоступленияТоваровУслугУПД(ДеревоДанных)
	
	ДанныеОбъекта = Новый Структура;
	
	Товары         = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	Услуги         = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка().Услуги.ВыгрузитьКолонки();
	ВозвратнаяТара = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка().ВозвратнаяТара.ВыгрузитьКолонки();
	
	Валюта = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(
				"Валюты", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод"));
	ДанныеОбъекта.Вставить("ВалютаДокумента", Валюта);
	КурсВзаиморасчетов = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДополнительныеСведенияОбУчастниках.ВалютаКурс");
	ДанныеОбъекта.Вставить("КурсВзаиморасчетов", ?(ЗначениеЗаполнено(КурсВзаиморасчетов), КурсВзаиморасчетов, 1));
	ДанныеОбъекта.Вставить("КратностьВзаиморасчетов", 1);
	
	ДанныеОбъекта.Вставить("ВидОперацииЭД", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВидОперации"));
	
	ДанныеОбъекта.Вставить("СуммаВключаетНДС", Ложь);
	ДанныеОбъекта.Вставить("Корректировка",    Ложь);
	
	ДанныеОбъекта.Вставить("НомерВходящегоДокумента", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента"));
	ДанныеОбъекта.Вставить("ДатаВходящегоДокумента",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента"));
	
	Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления")) Тогда
		ДанныеОбъекта.Вставить("Исправление", Истина);
		ДанныеОбъекта.Вставить("НомерИсправления", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления"));
		ДанныеОбъекта.Вставить("ДатаИсправления",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления"));
	Иначе
		ДанныеОбъекта.Вставить("Исправление", Ложь);
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("УчитыватьИсправлениеИсходногоДокумента", Ложь);
	
	ДанныеОбъекта.Вставить("Организация", ОрганизацияПоДаннымЭД(ДеревоДанных, "СведенияОПокупателе"));
	ДанныеОбъекта.Вставить("Контрагент",  КонтрагентПоДаннымЭД(ДеревоДанных, "СведенияОПродавце"));
	
	ДанныеОбъекта.Вставить("ПередачаТовараКомитентом", Ложь);
	
	ОснованиеСчетаФактуры = Неопределено;
	ДокументыОснованияСчетаФактуры = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры");
	Если Тип(ДокументыОснованияСчетаФактуры) = Тип("Массив") Тогда
		Для Каждого ДокументОснование Из ДокументыОснованияСчетаФактуры Цикл
			Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
				ОснованиеСчетаФактуры = ДокументОснование;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли Тип(ДокументыОснованияСчетаФактуры) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		ОснованиеСчетаФактуры = ДокументыОснованияСчетаФактуры;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОснованиеСчетаФактуры) Тогда
		ДокументОснованиеСчетаФактуры = ДокументОснованиеСчетаФактурыПолученного(ОснованиеСчетаФактуры);
		Если ЗначениеЗаполнено(ДокументОснованиеСчетаФактуры) Тогда
			ДанныеОбъекта.Вставить("Основание", ДокументОснованиеСчетаФактуры);
		КонецЕсли;
	КонецЕсли;
	
	ТекстоваяИнформация = ДеревоДанных.Строки.Найти("ДопДанныеДокументаОтгрузки.ТекстоваяИнформация", "ПолныйПуть", Истина);
	Если ТекстоваяИнформация <> Неопределено Тогда
		Для Каждого СтрокаТекстовойИнформации Из ТекстоваяИнформация.Строки Цикл
			Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаТекстовойИнформации, 
						"ДопДанныеДокументаОтгрузки.ТекстоваяИнформация.НомерСтроки.Идентификатор") = "ПередачаТовараКомитентом" Тогда
				ДанныеОбъекта.ПередачаТовараКомитентом = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаТекстовойИнформации,
						"ДопДанныеДокументаОтгрузки.ТекстоваяИнформация.НомерСтроки.Значение") = "Истина";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СведенияОТоварах = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
		
		Признак = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.Признак");
		Если Признак = "1" Тогда
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.ЕдиницаИзмерения = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения",
				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ЕдиницаИзмеренияКод"));
		Иначе
			НоваяСтрока = Услуги.Добавить();
			НоваяСтрока.Содержание = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ТоварНаименование");
		КонецЕсли;
		
		// Обязательные реквизиты:
		НоваяСтрока.СтавкаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.НалоговаяСтавка");
		НоваяСтрока.СуммаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СуммаНалога");
		
		// Необязательные реквизиты:
		НоваяСтрока.Количество = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.Количество");
		НоваяСтрока.Цена = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмерения");
		НоваяСтрока.Сумма = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалога");
		
		ИдентификаторНоменклатуры = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ИдТовараУКонтрагента");
		НаименованиеНоменклатуры  = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.ТоварНаименование");
		НоваяСтрока.Номенклатура = НоменклатураКонтрагента(ДанныеОбъекта.Контрагент, ИдентификаторНоменклатуры, НаименованиеНоменклатуры);
		
		Если Признак = "1" Тогда
		
			СведенияОТаможеннойДекларации = СведенияОТоваре.Строки.Найти(
											"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации", "ПолныйПуть", Истина);
			
			Если СведенияОТаможеннойДекларации <> Неопределено
				И СведенияОТаможеннойДекларации.Строки.Количество() > 0 Тогда
				
				НомерТД = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТаможеннойДекларации.Строки[0],
								"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации.НомерСтроки.ТаможеннаяДекларацияНомер");
				
				КодСтраныТД = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТаможеннойДекларации.Строки[0],
								"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации.НомерСтроки.СтранаПроисхожденияКод");
				
				Если ЗначениеЗаполнено(НомерТД) Тогда
					ТаможеннаяДекларация = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("НомерТД", НомерТД);
					Если НЕ ЗначениеЗаполнено(ТаможеннаяДекларация) Тогда
						ТаможеннаяДекларацияОбъект = Справочники.НомераГТД.СоздатьЭлемент();
						ТаможеннаяДекларацияОбъект.Код = НомерТД;
						ТаможеннаяДекларацияОбъект.Записать();
						ТаможеннаяДекларация = ТаможеннаяДекларацияОбъект.Ссылка;
					КонецЕсли;
					НоваяСтрока.НомерГТД = ТаможеннаяДекларация;
					НоваяСтрока.СтранаПроисхождения = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("СтраныМира", КодСтраныТД)
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеДляЗаполнения = Новый Структура();
	ДанныеДляЗаполнения.Вставить("Шапка", ДанныеОбъекта);
	ДанныеДляЗаполнения.Вставить("Товары", Товары);
	ДанныеДляЗаполнения.Вставить("Услуги", Услуги);
	ДанныеДляЗаполнения.Вставить("ВозвратнаяТара", ВозвратнаяТара);
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

Функция ПодготовитьСтруктуруДляКорректировкиПоступления(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта      = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	
	Товары = Документы.КорректировкаПоступления.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	Услуги = Документы.КорректировкаПоступления.ПустаяСсылка().Услуги.ВыгрузитьКолонки();
	
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		
		Если СтрокаРеквизита.Реквизит = "СписокОписаний" Тогда
			 
			СтрокаРеквизитаОписанийРабот = ПолучитьЗначениеРеквизита(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			
			Для Каждого СтрокаРеквизитаОписания Из СтрокаРеквизитаОписанийРабот.Строки Цикл
				
				Если СтрокаРеквизитаОписания.Строки.Количество() = 0 Тогда
					ЗначениеРеквизита = ПолучитьЗначениеРеквизита(СтрокаРеквизитаОписания, СтрокаРеквизитаОписания.Реквизит, Истина, ДеревоРазбора);
					Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
						ДанныеЗаполненияШапки.Вставить(СтрокаРеквизитаОписания.Реквизит, ЗначениеРеквизита);
					КонецЕсли;
				Иначе
					ДанныеДляЗаполненияСтрокиТЧ = ПолучитьДанныеСтрокиТЧ(СтрокаРеквизитаОписания.Строки, ДеревоРазбора);
					ЗаполнитьЗначенияСвойств(Услуги.Добавить(), ДанныеДляЗаполненияСтрокиТЧ);
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			Если СтрокаРеквизита.Строки.Количество() = 0 Тогда 
				
				// Заполним реквизит шапки
				ЗначениеРеквизита = ПолучитьЗначениеРеквизита(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
				
				Если СтрокаРеквизита.Реквизит = "ДатаПоДаннымКлиента" Тогда
					ИмяРеквизита = "ДатаПоДаннымПокупателя";
				ИначеЕсли СтрокаРеквизита.Реквизит = "НомерПоДаннымКлиента" Тогда
					ИмяРеквизита = "НомерПоДаннымПокупателя";
				ИначеЕсли СтрокаРеквизита.Реквизит = "Валюта" Тогда
					ИмяРеквизита = "ВалютаДокумента";
				ИначеЕсли СтрокаРеквизита.Реквизит = "ДокументОснования" Тогда
					ИмяРеквизита = "ДокументПоступления";
				Иначе
					ИмяРеквизита = СтрокаРеквизита.Реквизит;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
					ДанныеЗаполненияШапки.Вставить(ИмяРеквизита, ЗначениеРеквизита);
				КонецЕсли;
				
			Иначе 
				
				// Добавим строку табличной части
				ДанныеДляЗаполненияСтрокиТЧ = ПолучитьДанныеСтрокиТЧ(СтрокаРеквизита.Строки, ДеревоРазбора);
				
				Если ДанныеДляЗаполненияСтрокиТЧ.Свойство("Услуга")
					И ДанныеДляЗаполненияСтрокиТЧ.Услуга = Истина Тогда
					ЗаполнитьЗначенияСвойств(Услуги.Добавить(), ДанныеДляЗаполненияСтрокиТЧ);
					
				Иначе
					СтрокаТаблицы = Товары.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеДляЗаполненияСтрокиТЧ);
					ЭлектронноеВзаимодействиеБП.ЗаполнитьНомерТДИСтрануПроисхождения(СтрокаТаблицы, ДанныеДляЗаполненияСтрокиТЧ, Истина);
					Если Не ЗначениеЗаполнено(ДанныеДляЗаполненияСтрокиТЧ.Количество)
							И ЗначениеЗаполнено(ДанныеДляЗаполненияСтрокиТЧ.МассаНетто)
							И ДанныеДляЗаполненияСтрокиТЧ.МассаНетто > 0 Тогда
							
							СтрокаТаблицы.Количество = ДанныеДляЗаполненияСтрокиТЧ.МассаНетто;
							
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеЗаполненияШапки.Вставить("ВидОперацииЭД", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "ВидОперации", Истина, ДеревоРазбора));
	
	// спец. значения 
	Если ЗначениеЗаполнено(ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "НомерСчетаФактуры")) Тогда // указана счет-фактура
		ДанныеЗаполненияШапки.Вставить("НомерСчетаФактуры",ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "НомерСчетаФактуры"));
		ДанныеЗаполненияШапки.Вставить("ДатаСчетаФактуры", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "ДатаСчетаФактуры"));
	КонецЕсли;
	
	Если ДанныеЗаполненияШапки.ВидОперации = Перечисления.ВидыОперацийЭД.Исправление Тогда
		ДанныеЗаполненияШапки.Вставить("НомерИсправления",ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "НомерИсправления"));
		ДанныеЗаполненияШапки.Вставить("ДатаИсправления", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "ДатаИсправления"));
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("НомерИсходногоДокумента",ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "НомерИсходногоДокумента"));
	ДанныеЗаполненияШапки.Вставить("ДатаИсходногоДокумента", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "ДатаИсходногоДокумента"));
	Если ЗначениеЗаполнено(ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "НомерИсправленияИсходногоДокумента")) Тогда
		ДанныеЗаполненияШапки.Вставить("УчитыватьИсправлениеИсходногоДокумента", Истина);
		ДанныеЗаполненияШапки.Вставить("НомерИсправленияИсходногоДокумента",ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "НомерИсправленияИсходногоДокумента"));
		ДанныеЗаполненияШапки.Вставить("ДатаИсправленияИсходногоДокумента", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "ДатаИсправленияИсходногоДокумента"));
	Иначе
		ДанныеЗаполненияШапки.Вставить("УчитыватьИсправлениеИсходногоДокумента", Ложь);
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("НомерВходящегоДокумента",ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "Номер"));
	ДанныеЗаполненияШапки.Вставить("ДатаВходящегоДокумента", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "Дата"));
	
	ДанныеДляОбъекта.Вставить("Шапка",  ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", Товары);
	ДанныеДляОбъекта.Вставить("Услуги", Услуги);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляКорректировкиПоступленияУКД(ДеревоДанных)
	
	ДанныеОбъекта = Новый Структура;
	
	Товары         = Документы.КорректировкаПоступления.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	Услуги         = Документы.КорректировкаПоступления.ПустаяСсылка().Услуги.ВыгрузитьКолонки();
	
	Валюта = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(
				"Валюты", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод"));
	ДанныеОбъекта.Вставить("ВалютаДокумента", Валюта);
	КурсВзаиморасчетов = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДополнительныеСведенияОбУчастниках.ВалютаКурс");
	ДанныеОбъекта.Вставить("КурсВзаиморасчетов", ?(ЗначениеЗаполнено(КурсВзаиморасчетов), КурсВзаиморасчетов, 1));
	ДанныеОбъекта.Вставить("КратностьВзаиморасчетов", 1);
	
	ДанныеОбъекта.Вставить("СуммаВключаетНДС", Ложь);
	
	ДанныеОбъекта.Вставить("НомерВходящегоДокумента", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента"));
	ДанныеОбъекта.Вставить("ДатаВходящегоДокумента",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента"));
	
	ДанныеОбъекта.Вставить("НомерИсходногоДокумента", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсходногоДокумента"));
	ДанныеОбъекта.Вставить("ДатаИсходногоДокумента",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсходногоДокумента"));
	
	Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправленияИсходногоДокумента")) Тогда
		ДанныеОбъекта.Вставить("УчитыватьИсправлениеИсходногоДокумента", Истина);
		ДанныеОбъекта.Вставить("НомерИсправленияИсходногоДокумента", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправленияИсходногоДокумента"));
		ДанныеОбъекта.Вставить("ДатаИсправленияИсходногоДокумента",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправленияИсходногоДокумента"));
	Иначе
		ДанныеОбъекта.Вставить("УчитыватьИсправлениеИсходногоДокумента", Ложь);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления")) Тогда
		ДанныеОбъекта.Вставить("ВидОперацииЭД", Перечисления.ВидыОперацийЭД.Исправление);
		ДанныеОбъекта.Вставить("Исправление", Истина);
		ДанныеОбъекта.Вставить("НомерИсправления", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления"));
		ДанныеОбъекта.Вставить("ДатаИсправления",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления"));
	Иначе
		ДанныеОбъекта.Вставить("ВидОперацииЭД", Перечисления.ВидыОперацийЭД.Корректировка);
		ДанныеОбъекта.Вставить("Исправление", Ложь);
	КонецЕсли;
	
	ДокументОснование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры");
	Если Тип(ДокументОснование) = Тип("Массив") И ДокументОснование.Количество() > 0 Тогда
		ДокументОснование = ДокументОснование[0];
	КонецЕсли;
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ДокументОснование");
	КонецЕсли;
	ДанныеОбъекта.Вставить("Основание", ДокументОснование);
	
	ДанныеОбъекта.Вставить("Организация", ОрганизацияПоДаннымЭД(ДеревоДанных, "СведенияОПокупателе"));
	ДанныеОбъекта.Вставить("Контрагент",  КонтрагентПоДаннымЭД(ДеревоДанных, "СведенияОПродавце"));
	
	СведенияОТоварах = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
		
		ИдентификаторНоменклатуры = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ИдТовараУКонтрагента");
		НаименованиеНоменклатуры  = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.ТоварНаименование");
		Номенклатура = НоменклатураКонтрагента(ДанныеОбъекта.Контрагент, ИдентификаторНоменклатуры, НаименованиеНоменклатуры);
		
		Если ЗначениеЗаполнено(Номенклатура)
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "Услуга") Тогда
			НоваяСтрока = Услуги.Добавить();
			НоваяСтрока.СодержаниеДоИзменения = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ТоварНаименование");
			НоваяСтрока.Содержание            = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ТоварНаименование");
		Иначе
			НоваяСтрока = Товары.Добавить();
		КонецЕсли;
		
		НоваяСтрока.Номенклатура = Номенклатура;
		
		НоваяСтрока.СтавкаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.НалоговаяСтавка");
		НоваяСтрока.СуммаНДСДоКорректировки = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СуммаНалогаДоКорректировки");
		НоваяСтрока.СуммаНДС                = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СуммаНалога");
		
		НоваяСтрока.КоличествоДоКорректировки = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.КоличествоДоКорректировки");
		НоваяСтрока.Количество = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.Количество");
		НоваяСтрока.ЦенаДоКорректировки = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмеренияДоКорректировки");
		НоваяСтрока.Цена = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмерения");
		НоваяСтрока.СуммаДоКорректировки = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалогаДоКорректировки");
		НоваяСтрока.Сумма = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалога");
		
	КонецЦикла;
	
	ДанныеДляЗаполнения = Новый Структура();
	ДанныеДляЗаполнения.Вставить("Шапка", ДанныеОбъекта);
	ДанныеДляЗаполнения.Вставить("Товары", Товары);
	ДанныеДляЗаполнения.Вставить("Услуги", Услуги);
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

Функция ПодготовитьСтруктуруДляСчетФактуры(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	ДанныеЗаполненияШапки.Вставить("НомерВходящегоДокумента", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "Номер"));
	ДанныеЗаполненияШапки.Вставить("ДатаВходящегоДокумента", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "Дата"));
	
	ДанныеЗаполненияШапки.Вставить("НомерИсходногоДокумента", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "НомерСчетаФактуры"));
	ДанныеЗаполненияШапки.Вставить("ДатаИсходногоДокумента", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "ДатаСчетаФактуры"));
	
	Если СтрокаДляЗагрузки.ОписаниеОбъекта = "Корректировочный" Тогда
		ДанныеЗаполненияШапки.Вставить("ВидСчетаФактуры",Перечисления.ВидСчетаФактурыПолученного.Корректировочный);
		Если ЗначениеЗаполнено (ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "НомерИсправления")) Тогда
			ДанныеЗаполненияШапки.Вставить("Исправление", Истина);
			ДанныеЗаполненияШапки.Вставить("НомерИсправления", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "НомерИсправления"));
			ДанныеЗаполненияШапки.Вставить("ДатаИсправления", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "ДатаИсправления"));
		КонецЕсли;
		Если ЗначениеЗаполнено(ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "НомерИсправленияСчетаФактуры")) Тогда
			ДанныеЗаполненияШапки.Вставить("УчитыватьИсправлениеИсходногоДокумента", Истина);
			ДанныеЗаполненияШапки.Вставить("НомерИсправленияИсходногоДокумента", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "НомерИсправленияСчетаФактуры"));
			ДанныеЗаполненияШапки.Вставить("ДатаИсправленияИсходногоДокумента", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "ДатаИсправленияСчетаФактуры"));
		КонецЕсли;
	Иначе
		
		// Если счет-фактура на аванс.
		СчетФактураНаАванс = ПолучитьЗначениеРеквизитаДерева(ДеревоРазбора, "СчетФактураНаАванс", Истина);
		Если ЗначениеЗаполнено(СчетФактураНаАванс) И Булево(СчетФактураНаАванс) Тогда
			
			ДанныеЗаполненияШапки.Вставить("ВидСчетаФактуры",Перечисления.ВидСчетаФактурыПолученного.НаАванс);
			КодВидаОперации = "02";
			
		Иначе
			
			ДанныеЗаполненияШапки.Вставить("ВидСчетаФактуры",Перечисления.ВидСчетаФактурыПолученного.НаПоступление);
			
		КонецЕсли;
			
		Если ЗначениеЗаполнено (ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "НомерИсправления")) Тогда
			ДанныеЗаполненияШапки.Вставить("Исправление", Истина);
			ДанныеЗаполненияШапки.Вставить("НомерИсправления", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "НомерИсправления"));
			ДанныеЗаполненияШапки.Вставить("ДатаИсправления", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "ДатаИсправления"));
		КонецЕсли;
	КонецЕсли;	
	ДанныеЗаполненияШапки.Вставить("КодВидаОперации", КодВидаОперации);
	
	//Заполняем документы-основания
	МассивДокументовОснований = Новый Массив();
	НайденнаяСтрока = СтрокаДляЗагрузки.Строки.Найти("ДокументыОснования", "Реквизит");
	Если НайденнаяСтрока <> Неопределено Тогда 
		Для Каждого Строка Из НайденнаяСтрока.Строки Цикл
			МассивДокументовОснований.Добавить(Строка.СсылкаНаОбъект);
		КонецЦикла;
	КонецЕсли;
	ДанныеЗаполненияШапки.Вставить("ДокументыОснования", МассивДокументовОснований);
	
	ВалКод = ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "ВалКод");
	Если НЕ  ВалКод="643" Тогда
		ДанныеЗаполненияШапки.Вставить("ВалютаДокумента", ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Валюты", ВалКод));
	Иначе
		ДанныеЗаполненияШапки.Вставить("ВалютаДокумента", Константы.ВалютаРегламентированногоУчета.Получить());
	КонецЕсли;
	
	// Cчет-фактура на поступление
	ДанныеЗаполненияШапки.Вставить("Организация", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Организация", Истина, ДеревоРазбора));
	Контрагент = ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "Контрагент", Истина, ДеревоРазбора);
	ДанныеЗаполненияШапки.Вставить("Контрагент", Контрагент); 
	
	ДанныеЗаполненияШапки.Вставить("СуммаДокумента",ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "СтТовУчНал"));
	ДанныеЗаполненияШапки.Вставить("СуммаНДСДокумента",ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "СумНДС"));
	
	ДанныеЗаполненияШапки.Вставить("СуммаУменьшение",ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "СтТовУчНалВсегоУм"));
	ДанныеЗаполненияШапки.Вставить("СуммаНДСУменьшение",ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "СумНДСУм"));
	
	ДанныеЗаполненияШапки.Вставить("СуммаУвеличение",ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "СтТовУчНалВсегоУвел"));
	ДанныеЗаполненияШапки.Вставить("СуммаНДСУвеличение",ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "СумНДСУвел"));
	
	Возврат ДанныеЗаполненияШапки;
	
КонецФункции

Функция ПодготовитьСтруктуруДляСчетаФактурыУКД(ДеревоДанных)
	
	ДанныеОбъекта = Новый Структура;
	ДанныеОбъекта.Вставить("НомерВходящегоДокумента", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента"));
	ДанныеОбъекта.Вставить("ДатаВходящегоДокумента",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента"));
	
	НомерИсправления = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления");
	ДатаИсправления  = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления");
	
	Если ЗначениеЗаполнено(НомерИсправления) Тогда
		ДанныеОбъекта.Вставить("Исправление", Истина);
		ДанныеОбъекта.Вставить("НомерИсправления", НомерИсправления);
		ДанныеОбъекта.Вставить("ДатаИсправления",  ДатаИсправления);
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("НомерИсходногоДокумента", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсходногоДокумента"));
	ДанныеОбъекта.Вставить("ДатаИсходногоДокумента",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсходногоДокумента"));
	
	НомерИсправленияИсходногоДокумента = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправленияИсходногоДокумента");
	ДатаИсправленияИсходногоДокумента  = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправленияИсходногоДокумента");
	
	Если ЗначениеЗаполнено(НомерИсправленияИсходногоДокумента) Тогда
		ДанныеОбъекта.Вставить("УчитыватьИсправлениеИсходногоДокумента", Истина);
		ДанныеОбъекта.Вставить("НомерИсправленияИсходногоДокумента", НомерИсправленияИсходногоДокумента);
		ДанныеОбъекта.Вставить("ДатаИсправленияИсходногоДокумента",  ДатаИсправленияИсходногоДокумента);
	Иначе
		ДанныеОбъекта.Вставить("УчитыватьИсправлениеИсходногоДокумента", Ложь);
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("Организация", ОрганизацияПоДаннымЭД(ДеревоДанных, "СведенияОПокупателе"));
	ДанныеОбъекта.Вставить("Контрагент",  КонтрагентПоДаннымЭД(ДеревоДанных, "СведенияОПродавце"));
	ДанныеОбъекта.Вставить("Комиссионер", Справочники.Контрагенты.ПустаяСсылка());
	
	// Если счет-фактура на аванс.
	ДанныеОбъекта.Вставить("ВидСчетаФактуры",Перечисления.ВидСчетаФактурыПолученного.Корректировочный);
	ДанныеОбъекта.Вставить("КодВидаОперации", "01");
	
	//Заполняем документы-основания
	МассивДокументовОснований = Новый Массив();
	НайденнаяСтрока = ДеревоДанных.Строки.Найти("ДокументыОснованияСчетаФактуры", "ПолныйПуть");
	Если НайденнаяСтрока <> Неопределено Тогда 
		МассивДокументовОснований = НайденнаяСтрока.Значение;
	КонецЕсли;
	ДанныеОбъекта.Вставить("ДокументыОснования", МассивДокументовОснований);
	
	КодВалюты = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод");
	ДанныеОбъекта.Вставить("ВалютаДокумента", ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Валюты", КодВалюты));
	
	ДанныеОбъекта.Вставить("СуммаДокумента",    0);
	ДанныеОбъекта.Вставить("СуммаНДСДокумента", 0);
	
	ДанныеОбъекта.Вставить("СуммаУменьшение",    ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровСНалогомУменьшение"));
	ДанныеОбъекта.Вставить("СуммаНДСУменьшение", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоИзмененияСтоимости.ВсегоСуммаНалогаУменьшение"));
	ДанныеОбъекта.Вставить("СуммаУвеличение",    ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровСНалогомУвеличение"));
	ДанныеОбъекта.Вставить("СуммаНДСУвеличение", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоИзмененияСтоимости.ВсегоСуммаНалогаУвеличение"));
	
	Возврат ДанныеОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляСчетаФактурыУПД(ДеревоДанных)
	
	ДанныеОбъекта = Новый Структура;
	ДанныеОбъекта.Вставить("НомерВходящегоДокумента", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента"));
	ДанныеОбъекта.Вставить("ДатаВходящегоДокумента",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента"));
	
	ДанныеОбъекта.Вставить("НомерИсходногоДокумента", "");
	ДанныеОбъекта.Вставить("ДатаИсходногоДокумента",  '00010101');
	
	ДанныеОбъекта.Вставить("Организация", ОрганизацияПоДаннымЭД(ДеревоДанных, "СведенияОПокупателе"));
	ДанныеОбъекта.Вставить("Контрагент",  КонтрагентПоДаннымЭД(ДеревоДанных, "СведенияОПродавце"));
	ДанныеОбъекта.Вставить("Комиссионер", ОрганизацияПоДаннымЭД(ДеревоДанных, "СведенияОКомиссионере"));
	
	
	ТаблицаДопДанных = ДанныеТаблицыДерева(ДеревоДанных, "ДопДанныеСчетаФактуры.ТекстоваяИнформация");
	Для Каждого СтрокаТаблицы Из ТаблицаДопДанных Цикл
		
		Если СтрокаТаблицы.Идентификатор = "Авансы" Тогда
			
			ДанныеОбъекта.Вставить("Авансы", ОбщегоНазначения.ЗначениеИзСтрокиXML(СтрокаТаблицы.Значение));
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Если счет-фактура на аванс.
	ВидСчетаФактуры = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВидСчетаФактуры");
	
	Если ВидСчетаФактуры = "Авансовый" Тогда
		ДанныеОбъекта.Вставить("ВидСчетаФактуры",Перечисления.ВидСчетаФактурыПолученного.НаАванс);
		КодВидаОперации = "02";
	Иначе
		ДанныеОбъекта.Вставить("ВидСчетаФактуры",Перечисления.ВидСчетаФактурыПолученного.НаПоступление);
		КодВидаОперации = "01";
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("КодВидаОперации", КодВидаОперации);
	
	НомерИсправления = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления");
	ДатаИсправления  = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления");
	
	Если ЗначениеЗаполнено(НомерИсправления) Тогда
		ДанныеОбъекта.Вставить("Исправление", Истина);
		ДанныеОбъекта.Вставить("НомерИсправления", НомерИсправления);
		ДанныеОбъекта.Вставить("ДатаИсправления",  ДатаИсправления);
	КонецЕсли;
	
	//Заполняем документы-основания
	НайденнаяСтрока = ДеревоДанных.Строки.Найти("ДокументыОснованияСчетаФактуры", "ПолныйПуть");
	Если НайденнаяСтрока <> Неопределено Тогда
		ТаблицаОснований = Новый ТаблицаЗначений;
		ТаблицаОснований.Колонки.Добавить("Основание");
		Если ТипЗнч(НайденнаяСтрока.Значение) = Тип("Массив") Тогда
			Для Каждого Элемент Из НайденнаяСтрока.Значение Цикл
				
				СтрокаТаблицы = ТаблицаОснований.Добавить();
				СтрокаТаблицы.Основание = Элемент;
				
			КонецЦикла;
			ТаблицаОснований.Свернуть("Основание");
		Иначе
			СтрокаТаблицы = ТаблицаОснований.Добавить();
			СтрокаТаблицы.Основание = НайденнаяСтрока.Значение;
		КонецЕсли;
	КонецЕсли;
	ДанныеОбъекта.Вставить("ДокументыОснования", ТаблицаОснований.ВыгрузитьКолонку("Основание"));
	
	КодВалюты = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод");
	ДанныеОбъекта.Вставить("ВалютаДокумента", ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Валюты", КодВалюты));
	
	ДанныеОбъекта.Вставить("СуммаДокумента", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоКОплате.ВсегоСтоимостьТоваровСНалогом"));
	ДанныеОбъекта.Вставить("СуммаНДСДокумента", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоКОплате.ВсегоСуммаНалога"));
	
	ДанныеОбъекта.Вставить("СуммаУменьшение",    0);
	ДанныеОбъекта.Вставить("СуммаНДСУменьшение", 0);
	ДанныеОбъекта.Вставить("СуммаУвеличение",    0);
	ДанныеОбъекта.Вставить("СуммаНДСУвеличение", 0);
	
	Возврат ДанныеОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляОтчетаКомиссионера(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеТоваров = ДеревоРазбора.Строки.Найти("Номенклатура", "ТипОбъекта", Истина);
	Если ДанныеТоваров <> Неопределено Тогда
			
		Для Каждого СтрокаТовара Из ДанныеТоваров.Строки Цикл
			
			Если СтрокаТовара.СсылкаНаОбъект = Неопределено
				ИЛИ СтрокаТовара.СсылкаНаОбъект.ПолучитьОбъект() = Неопределено Тогда
								
				НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(СтрокаТовара, "Наименование", Истина);	
				НоменклатураПоставщика = Справочники.НоменклатураПоставщиков.НайтиПоНаименованию(НайденноеЗначение);
				СтрокаТовара.СсылкаНаОбъект = ?(ЗначениеЗаполнено(НоменклатураПоставщика), НоменклатураПоставщика.Номенклатура, 
					Неопределено);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;	
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	ТаблицаТоваров = Документы.ОтчетКомиссионераОПродажах.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	ТаблицаТоваров.Колонки.Добавить("ДатаСФ");
	ТаблицаТоваров.Колонки.Добавить("Покупатель");
	ТаблицаУслуг = Документы.ОтчетКомиссионераОПродажах.ПустаяСсылка().Услуги.ВыгрузитьКолонки();			
	ТаблицаУслуг.Колонки.Добавить("ДатаСФ");
	ТаблицаУслуг.Колонки.Добавить("Покупатель");	
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		Если СтрокаРеквизита.Строки.Количество()=0 Тогда // примитивный тип
			Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			Если ЗначениеЗаполнено(Реквизит) Тогда
				ДанныеЗаполненияШапки.Вставить(СтрокаРеквизита.Реквизит, Реквизит);
			КонецЕсли;
		ИначеЕсли СтрокаРеквизита.Реквизит = "СтрокаТЧ" Тогда // добавим строку ТЧ
			
			ЭтоУслуга = Ложь;
			Номенклатура = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, "Номенклатура", Истина, ДеревоРазбора);
			Если ЗначениеЗаполнено(Номенклатура) Тогда
				
				ЭтоУслуга = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ВидНоменклатуры.Услуга");
				Если ЭтоУслуга Тогда
					
					НоваяСтрока = ТаблицаУслуг.Добавить();
					КолонкиТаблицы = ТаблицаУслуг.Колонки;
					
				Иначе
					
					НоваяСтрока = ТаблицаТоваров.Добавить();
					КолонкиТаблицы = ТаблицаТоваров.Колонки;
					
				КонецЕсли;
				
			Иначе
				
				НоваяСтрока = ТаблицаТоваров.Добавить();
				КолонкиТаблицы = ТаблицаУслуг.Колонки;
				
			КонецЕсли;			
			ДанныеПокупателя = Новый Структура("НаименованиеПолное, ИНН, КПП, ЮрАдрес, ФактАдрес");	
			Для Каждого ТекСтрока Из СтрокаРеквизита.Строки Цикл
				
				ИмяРеквизитаВБД = ТекСтрока.Реквизит;				
				Если ИмяРеквизитаВБД = "ПокупательНаименование" Тогда	
					
					НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
					ДанныеПокупателя.НаименованиеПолное = НайденноеЗначение;
					
				ИначеЕсли ИмяРеквизитаВБД = "ПокупательИНН" Тогда	
					
					НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
					ДанныеПокупателя.ИНН = НайденноеЗначение;
					
				ИначеЕсли ИмяРеквизитаВБД = "ПокупательКПП" Тогда	
					
					НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
					ДанныеПокупателя.КПП = НайденноеЗначение;
					
				ИначеЕсли ИмяРеквизитаВБД = "ПокупательЮрАдрес" Тогда	
					
					НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
					ДанныеПокупателя.ЮрАдрес = НайденноеЗначение;
					
				ИначеЕсли ИмяРеквизитаВБД = "ПокупательФактАдрес" Тогда	
					
					НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
					ДанныеПокупателя.ФактАдрес = НайденноеЗначение;
					
				ИначеЕсли ИмяРеквизитаВБД = "Цена" И Не ЭтоУслуга Тогда
					
					НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
					НоваяСтрока["ЦенаПередачи"] = НайденноеЗначение;
					
				ИначеЕсли ИмяРеквизитаВБД = "Сумма" И Не ЭтоУслуга Тогда
					
					НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
					НоваяСтрока["СуммаПередачи"] = НайденноеЗначение;
					
				ИначеЕсли ИмяРеквизитаВБД = "ЦенаПродажи" Тогда
					
					НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
					НоваяСтрока["Цена"] = НайденноеЗначение;
					
				ИначеЕсли ИмяРеквизитаВБД = "СуммаПродажи" Тогда				
					
					НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
					НоваяСтрока["Сумма"] = НайденноеЗначение;					
					
				ИначеЕсли ИмяРеквизитаВБД = "ДатаРеализации" Тогда				
					
					НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
					НоваяСтрока["ДатаСФ"] = ?(ЗначениеЗаполнено(НайденноеЗначение), Дата(НайденноеЗначение), Неопределено);
					
				ИначеЕсли ИмяРеквизитаВБД = "Номенклатура" И ЭтоУслуга Тогда	
					
					НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина);
					Если НайденноеЗначение <> Неопределено Тогда
						
						ОписаниеОбъекта = ДеревоРазбора.Строки.Найти(НайденноеЗначение, "ИндексСтроки", Истина).ОписаниеОбъекта;	
						НоваяСтрока["Содержание"] = ОписаниеОбъекта;
						НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
						НоваяСтрока["Номенклатура"] = НайденноеЗначение;
						
					КонецЕсли;				
					
				ИначеЕсли КолонкиТаблицы.Найти(ИмяРеквизитаВБД) <> Неопределено Тогда
					
					НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
					НоваяСтрока[ИмяРеквизитаВБД] = НайденноеЗначение;
									
				КонецЕсли;
				
			КонецЦикла;
			Покупатель = СсылкаНаОбъектПоИННКПП("Контрагенты", ДанныеПокупателя.ИНН, ДанныеПокупателя.КПП);
			Если НЕ ЗначениеЗаполнено(Покупатель) Тогда
				
				ИндексСтроки = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, "Покупатель");
				СтрокаКонтрагента = ДеревоРазбора.Строки.Найти(ИндексСтроки, "ИндексСтроки", Истина);
				Если СтрокаКонтрагента <> Неопределено Тогда
					
					Покупатель = ЭлектронноеВзаимодействиеБП.НовыйКонтрагент(СтрокаКонтрагента, ДеревоРазбора, Неопределено);
					
				КонецЕсли;
				
			КонецЕсли; 			
			НоваяСтрока.Покупатель = Покупатель;
			
		КонецЕсли;				
		
	КонецЦикла;
	
	ДанныеЗаполненияШапки.Вставить("НомерВходящегоДокумента",ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Номер"));
	ДанныеЗаполненияШапки.Вставить("ДатаВходящегоДокумента", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Дата"));
	ДанныеЗаполненияШапки.Вставить("СуммаВключаетНДС",ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ЦенаВключаетНДС"));
	ДанныеЗаполненияШапки.Вставить("СтавкаНДСВознаграждения", ПолучитьСтавкуНДСПеречислением(ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "СтавкаНДСВознаграждения")));
	
	НомерСтрокиДокумента = 0;
	Для Каждого ТекСтрока Из ТаблицаТоваров Цикл 
		// заполним Количество с учетом единиц измерения
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Количество) Тогда
			Если ЗначениеЗаполнено(ТекСтрока.Упаковка) Тогда
				ТекКоэффициент = ТекСтрока.Упаковка.Коэффициент;
			Иначе
				ТекКоэффициент = 1;
			КонецЕсли;
			ТекСтрока.Количество = ТекСтрока.КоличествоУпаковок*ТекКоэффициент;
		КонецЕсли;
		
	КонецЦикла;
	
	// получение данных о покупателях
	ТаблицаПокупателей = Документы.ОтчетКомиссионераОПродажах.ПустаяСсылка().Покупатели.ВыгрузитьКолонки();		
	Для Каждого СтрокаТЗ Из ТаблицаТоваров Цикл
		
		СтрокаПокупателя = ТаблицаПокупателей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПокупателя, СтрокаТЗ);
			
	КонецЦикла;
	Для Каждого СтрокаТЗ Из ТаблицаУслуг Цикл
		
		СтрокаПокупателя = ТаблицаПокупателей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПокупателя, СтрокаТЗ);
			
	КонецЦикла;
	
	// установка ключа строки	
	ТаблицаПокупателей.Свернуть("Покупатель, ДатаСФ", "ВыставленСФ, КлючСтроки");
	Счетчик = 0;
	Для Каждого СтрокаПокупателя Из ТаблицаПокупателей Цикл
		
		Счетчик = Счетчик + 1;
		СтрокаПокупателя.КлючСтроки = Счетчик;
		
	КонецЦикла;
	Для Каждого СтрокаТЗ Из ТаблицаТоваров Цикл
		
		СтруктураПоиска = Новый Структура("Покупатель, ДатаСФ", СтрокаТЗ.Покупатель, СтрокаТЗ.ДатаСФ);
		НайденныеСтроки = ТаблицаПокупателей.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			СтрокаТЗ.КлючСтроки = НайденныеСтроки[0].КлючСтроки;
			
		КонецЕсли;
		
	КонецЦикла;
	Для Каждого СтрокаТЗ Из ТаблицаУслуг Цикл
		
		СтруктураПоиска = Новый Структура("Покупатель, ДатаСФ", СтрокаТЗ.Покупатель, СтрокаТЗ.ДатаСФ);
		НайденныеСтроки = ТаблицаПокупателей.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			СтрокаТЗ.КлючСтроки = НайденныеСтроки[0].КлючСтроки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// определяем, нужно ли перевыставлять счета-фактуры
	ПлательщикНДС = ПолучитьЗначениеРеквизитаДерева(ДеревоРазбора, "ПлательщикНДС", Истина);
	Если ЗначениеЗаполнено(ПлательщикНДС) И Булево(ПлательщикНДС) Тогда
		
		ТаблицаПокупателей.ЗаполнитьЗначения(Истина, "ВыставленСФ");
		
	КонецЕсли;
	
	// Заполняем табличную часть "Денежные средства"
	ТаблицаДС = Новый ТаблицаЗначений;
	ТаблицаДС.Колонки.Добавить("ВидОтчетаПоПлатежам");
	ТаблицаДС.Колонки.Добавить("Сумма");
	ТаблицаДС.Колонки.Добавить("СтавкаНДС");
	ТаблицаДС.Колонки.Добавить("СуммаНДС");
	ТаблицаДС.Колонки.Добавить("Покупатель");
	ТаблицаДС.Колонки.Добавить("ДатаСобытия");
	ДанныеДССтрокой = ПолучитьЗначениеРеквизитаДерева(ДеревоРазбора, "ДенежныеСредства", Истина);
	Если ЗначениеЗаполнено(ДанныеДССтрокой) Тогда
		
		ДенежныеСредстваДанные = ОбщегоНазначения.ЗначениеИзСтрокиXML(ДанныеДССтрокой);
		СоответствиеСтавокНДС = Новый Соответствие;
		ОбменСКонтрагентамиПереопределяемый.ЗаполнитьСоответствиеСтавокНДС(СоответствиеСтавокНДС);
		Для Каждого СтрокаДанных Из ДенежныеСредстваДанные Цикл
			
			СтрокаДС = ТаблицаДС.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДС, СтрокаДанных,, "ВидОтчетаПоПлатежам, СтавкаНДС, Покупатель");
			Если СтрокаДанных.ВидОтчетаПоПлатежам = "Аванс" Тогда
				СтрокаДС.ВидОтчетаПоПлатежам = Перечисления.ВидыОтчетовПоПлатежамКомиссия.Аванс;
			ИначеЕсли СтрокаДанных.ВидОтчетаПоПлатежам = "Оплата" Тогда
				СтрокаДС.ВидОтчетаПоПлатежам = Перечисления.ВидыОтчетовПоПлатежамКомиссия.Оплата;
			ИначеЕсли СтрокаДанных.ВидОтчетаПоПлатежам = "Оплата" Тогда
				СтрокаДС.ВидОтчетаПоПлатежам = Перечисления.ВидыОтчетовПоПлатежамКомиссия.ЗачетАванса;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаДанных.СтавкаНДС) Тогда
				СтрокаДС.СтавкаНДС = СоответствиеСтавокНДС[СтрокаДанных.СтавкаНДС];
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаДанных.Покупатель) Тогда
				
				СтрокаДС.Покупатель = ПолучитьСоздатьКонтрагента(СтрокаДанных.Покупатель);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТаблицаТоваров);	
	ДанныеДляОбъекта.Вставить("Услуги", ТаблицаУслуг);	
	ДанныеДляОбъекта.Вставить("Покупатели", ТаблицаПокупателей);
	ДанныеДляОбъекта.Вставить("ДенежныеСредства", ТаблицаДС);
	
	Возврат ДанныеДляОбъекта;

КонецФункции

Процедура ЗаполнитьДокументПоступленияТоваровУслуг(Документ, ДанныеДокумента)
	
	ДанныеШапки = ДанныеДокумента.Шапка;
	
	ПередачаТовараКомитентом = ДанныеШапки.ПередачаТовараКомитентом;
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(Документ) Тогда // получены изменения по существующему документу
		ДокументОбъект = Документ.ПолучитьОбъект();
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		КонецЕсли;
	Иначе
		ДокументОбъект = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
		ЗагрузкаИзExcel = Ложь;
		Если ДанныеШапки.Свойство("ЗагрузкаИзФайлаExcel", ЗагрузкаИзExcel) И Булево(ЗагрузкаИзExcel) 
			И ЗначениеЗаполнено(ДанныеШапки.Дата) Тогда
			
			ДокументОбъект.Дата = ДанныеШапки.Дата;
			
		Иначе
			
			ДокументОбъект.Дата = ТекущаяДатаСеанса();
			
		КонецЕсли;
		
		ЗаполнениеДокументов.Заполнить(ДокументОбъект, ДанныеШапки);
		
		СписокВидовДоговоров = Новый СписокЗначений;
		Если ПередачаТовараКомитентом Тогда
			
			СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
			
		Иначе
			
			СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
			СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
			СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
			
		КонецЕсли;
		ОтборПоВалюте       = Новый Структура("ЗначениеОтбора", ДокументОбъект.ВалютаДокумента);
		СтруктураПараметров = Новый Структура("ВалютаВзаиморасчетов", ОтборПоВалюте);
		
		РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(ДокументОбъект.ДоговорКонтрагента,
						ДокументОбъект.Контрагент, ДокументОбъект.Организация, СписокВидовДоговоров, СтруктураПараметров);
		
		ДокументОбъект.ДополнительныеСвойства.Вставить("ЗаполнитьСчетаУчетаПередЗаписью", Истина);
		
	КонецЕсли;
	
	// вручную переопределим, если требуется
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеШапки);
	Если ПередачаТовараКомитентом Тогда
		
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
		
	Иначе
		
		Если ДанныеДокумента.Товары.Количество()=0 Тогда
			ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги;
		ИначеЕсли ДанныеДокумента.Услуги.Количество()=0 Тогда
			ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары;
		Иначе
			ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
		КонецЕсли;
		
	КонецЕсли;
	
	ТипСклада   = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Склад, "ТипСклада");
	ВидДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.ДоговорКонтрагента, "ВидДоговора");
	УчетВПродажныхЦенах = УчетнаяПолитика.СпособОценкиТоваровВРознице(ДокументОбъект.Организация, ДокументОбъект.Дата) = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости;
	РассчитыватьСуммаВРознице = ТипСклада <> Перечисления.ТипыСкладов.ОптовыйСклад
								И УчетВПродажныхЦенах
								И (ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия
									ИЛИ ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары)
								И ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;

	НТТ = ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка;
	СвойстваСчета4112 = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(
		ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ);
	РазделениеПоСтавкамВРознице = СвойстваСчета4112.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС
		ИЛИ СвойстваСчета4112.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС
		ИЛИ СвойстваСчета4112.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС;
	
	ЗаполнятьСтавкуНДСВРознице = НТТ И УчетВПродажныхЦенах И РазделениеПоСтавкамВРознице;
	
	ПлательщикНДС	 = УчетнаяПолитика.ПлательщикНДС(ДокументОбъект.Организация, ДокументОбъект.Дата);
	ЭтоКомиссия		 = ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
	ОтражениеВУСН	 = ПоступлениеТоваровУслугФормыКлиентСервер.ОтражениеВУСН(ДокументОбъект.ВидОперации, ЭтоКомиссия);
	
	ДокументОбъект.Товары.Очистить();
	Для Каждого СтрокаНакладной Из ДанныеДокумента.Товары Цикл
		
		СтрокаТЧ = ДокументОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаНакладной);
		
		Если РассчитыватьСуммаВРознице Тогда
			ОбработкаТабличныхЧастей.ЗаполнитьЦенуВРозницеТабЧасти(СтрокаТЧ, ДокументОбъект, ДокументОбъект.Метаданные());
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВРозницеТабЧасти(СтрокаТЧ);
		КонецЕсли;
		
		Если ЗаполнятьСтавкуНДСВРознице Тогда
			СтрокаТЧ.СтавкаНДСВРознице = ?(ПлательщикНДС, СтрокаТЧ.СтавкаНДС, Перечисления.СтавкиНДС.БезНДС);
		КонецЕсли;
		
		СтрокаТЧ.ОтражениеВУСН = ОтражениеВУСН;
		
		Если ДокументОбъект.НДСНеВыделять И ЗначениеЗаполнено(СтрокаТЧ.СуммаНДС) Тогда
			ДокументОбъект.НДСНеВыделять = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	ДокументОбъект.Услуги.Очистить();
	Для Каждого СтрокаНакладной Из ДанныеДокумента.Услуги Цикл
		СтрокаТЧ = ДокументОбъект.Услуги.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаНакладной);
		
		СтрокаТЧ.ОтражениеВУСН = ОтражениеВУСН;
		
		Если ДокументОбъект.НДСНеВыделять И ЗначениеЗаполнено(СтрокаТЧ.СуммаНДС) Тогда
			ДокументОбъект.НДСНеВыделять = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	ДокументОбъект.ВозвратнаяТара.Очистить();
	Для Каждого СтрокаНакладной Из ДанныеДокумента.ВозвратнаяТара Цикл
		
		СтрокаТЧ = ДокументОбъект.ВозвратнаяТара.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаНакладной);
		
	КонецЦикла;
	
	СчетаУчетаВДокументах.Заполнить(ДокументОбъект, Новый Структура());
	
	ЗаписатьДокумент(ДокументОбъект, РежимЗаписи);
	
	Если НЕ ЗначениеЗаполнено(Документ) Тогда
		Документ = ДокументОбъект.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДокументКорректировкиПоступления(Документ, ДанныеДокумента)
	
	ДанныеЗаполнения = ДанныеДокумента.Шапка;
	РежимЗаписи      = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(Документ) Тогда // получены изменения по существующему документу
		ДокументОбъект = Документ.ПолучитьОбъект();
		Если Документ.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		КонецЕсли;
	Иначе // создаем новый
		
		ДокументОбъект = Документы.КорректировкаПоступления.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ЗаполнениеДокументов.Заполнить(ДокументОбъект, ДанныеЗаполнения);
		
		ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
		
	КонецЕсли;
	
	Если ДанныеЗаполнения.ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Исправление Тогда
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки;
	Иначе
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение;
	КонецЕсли;
	
	ДокументОбъект.ЗаполнитьСвойстваШапки();
	
	Если ДанныеЗаполнения.ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Исправление Тогда
		ДокументОбъект.НомерИсправления = ДанныеЗаполнения.НомерИсправления;
		ДокументОбъект.ДатаИсправления = ДанныеЗаполнения.ДатаИсправления;
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("НомерИсходногоДокумента")
		И ЗначениеЗаполнено(ДанныеЗаполнения.НомерИсходногоДокумента) Тогда
		ДокументОбъект.НомерИсходногоДокумента = ДанныеЗаполнения.НомерИсходногоДокумента;
		ДокументОбъект.ДатаИсходногоДокумента  = ДанныеЗаполнения.ДатаИсходногоДокумента;
		Если ДанныеЗаполнения.УчитыватьИсправлениеИсходногоДокумента Тогда
			ДокументОбъект.НомерИсправленияИсходногоДокумента = ДанныеЗаполнения.НомерИсправленияИсходногоДокумента;
			ДокументОбъект.ДатаИсправленияИсходногоДокумента  = ДанныеЗаполнения.ДатаИсправленияИсходногоДокумента;
		КонецЕсли;
	КонецЕсли;
	
	ДокументПоступления = ДокументОбъект.ДокументПоступления;
	Если Не ЗначениеЗаполнено(ДокументПоступления) И ДанныеЗаполнения.Свойство("Основание") Тогда
		ДокументПоступления = ДанныеЗаполнения.Основание;
	КонецЕсли;
	
	// Заполненим корректировку поступления данными основания
	Если ЗначениеЗаполнено(ДокументПоступления) Тогда
		ДокументОбъект.Заполнить(ДокументПоступления);
	КонецЕсли;
	
	// Заполним табличные части данными корректировки
	ТабличныеЧастиДляЗаполения = Новый Структура("Товары, Услуги");
	СтрокиТабличнойЧастиДляПерезаполнения = Новый Структура("Товары, Услуги",
			"Количество, Цена, Сумма, СуммаНДС, НомерГТД, СтранаПроисхождения", 
			"Количество, Цена, Сумма, СуммаНДС, Содержание");
	Если ДанныеЗаполнения.ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Исправление Тогда
		СтрокиТабличнойЧастиДляПерезаполненияНового = Новый Структура("Товары, Услуги", "", "");
	Иначе
		СтрокиТабличнойЧастиДляПерезаполненияНового = Новый Структура("Товары, Услуги",
				"КоличествоДоИзменения, ЦенаДоИзменения, СуммаДоИзменения, СуммаНДСДоИзменения, НомерГТДДоИзменения, СтранаПроисхожденияДоИзменения", 
				"КоличествоДоИзменения, ЦенаДоИзменения, СуммаДоИзменения, СуммаНДСДоИзменения, СодержаниеДоИзменения");
	КонецЕсли;
	Для Каждого ТабличнаяЧасть Из ТабличныеЧастиДляЗаполения Цикл
		
		ИмяТЧ = ТабличнаяЧасть.Ключ;
		
		СтруктураПоиска = Новый Структура("Номенклатура, СтавкаНДС");
		
		Для Каждого СтрокаДокумента Из ДокументОбъект[ИмяТЧ] Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаДокумента);
			РезультатПоискаДанныхЗаполнения = ДанныеДокумента[ИмяТЧ].НайтиСтроки(СтруктураПоиска);
			
			Если РезультатПоискаДанныхЗаполнения.Количество() > 0 Тогда
				
				СтрокаДанныхЗаполнения = РезультатПоискаДанныхЗаполнения[0];
				ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаДанныхЗаполнения, СтрокиТабличнойЧастиДляПерезаполнения[ИмяТЧ]);
				
				// Удалим обработанную строку из данных заполнения
				ДанныеДокумента[ИмяТЧ].Удалить(СтрокаДанныхЗаполнения);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Добавим новые строки в документ
		Если ДанныеДокумента[ИмяТЧ].Количество() > 0 Тогда
			
			Для Каждого СтрокаДанныхЗаполнения Из ДанныеДокумента[ИмяТЧ] Цикл
				
				НоваяСтрока = ДокументОбъект[ИмяТЧ].Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанныхЗаполнения, , СтрокиТабличнойЧастиДляПерезаполненияНового[ИмяТЧ]);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаписатьДокумент(ДокументОбъект, РежимЗаписи);
	
	Если НЕ ЗначениеЗаполнено(Документ) Тогда
		Документ = ДокументОбъект.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДокументСчетФактураПолученный(Документ, ДанныеДокумента)
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(Документ) Тогда // получены изменения по существующему документу
		ДокументОбъект = Документ.ПолучитьОбъект();
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		КонецЕсли;
	Иначе// создаем новый
		ДокументОбъект = Документы.СчетФактураПолученный.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		// вручную переопределим, если требуется
		ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеДокумента);
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.Заполнить(ДокументОбъект);
		ДокументОбъект.ВидСчетаФактуры = ДанныеДокумента.ВидСчетаФактуры;
		ДокументОбъект.КодВидаОперации = ДанныеДокумента.КодВидаОперации;
	КонецЕсли;
	
	ДокументОбъект.ДокументыОснования.Очистить();
	Для Каждого ДокументОснование Из ДанныеДокумента.ДокументыОснования Цикл
		
		Если ДокументОбъект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный 
			И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ДокументОбъект.ДокументыОснования.Добавить().ДокументОснование = ДокументОснование;
	КонецЦикла;
	
	ДокументОбъект.ДокументОснование = ?(ДокументОбъект.ДокументыОснования.Количество()>0, ДокументОбъект.ДокументыОснования[0].ДокументОснование, Неопределено);
	Если ТипЗнч(ДокументОбъект.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
		
		ДокументОбъект.ДоговорКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.ДокументОснование, "ДоговорКонтрагента");
		
	КонецЕсли;
	
	ДокументОбъект.КодСпособаПолучения = 2;
	ДокументОбъект.НомерВходящегоДокумента = ДанныеДокумента.НомерВходящегоДокумента;
	ДокументОбъект.ДатаВходящегоДокумента  = ДанныеДокумента.ДатаВходящегоДокумента;
	ДокументОбъект.НомерИсходногоДокумента = ДанныеДокумента.НомерИсходногоДокумента;
	ДокументОбъект.ДатаИсходногоДокумента  = ДанныеДокумента.ДатаИсходногоДокумента;
	Если ДанныеДокумента.Свойство("Исправление") Тогда
		ДокументОбъект.Исправление       = ДанныеДокумента.Исправление;
		ДокументОбъект.НомерИсправления  = ДанныеДокумента.НомерИсправления;
		ДокументОбъект.ДатаИсправления   = ДанныеДокумента.ДатаИсправления;
	КонецЕсли;
	
	Если ДокументОбъект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
		Если ДокументОбъект.ДокументыОснования.Количество()>0 Тогда
			ОснованиеСчетаФактуры = ДокументОбъект.ДокументыОснования[0];
			ОснованиеСчетаФактуры.НомерИсходногоДокумента = ДанныеДокумента.НомерИсходногоДокумента;
			ОснованиеСчетаФактуры.ДатаИсходногоДокумента  = ДанныеДокумента.ДатаИсходногоДокумента;
			ОснованиеСчетаФактуры.УчитыватьИсправлениеИсходногоДокумента = ДанныеДокумента.Свойство("УчитыватьИсправлениеИсходногоДокумента") И ДанныеДокумента.УчитыватьИсправлениеИсходногоДокумента;
			ОснованиеСчетаФактуры.СуммаУвеличение    = ДанныеДокумента.СуммаУвеличение;
			ОснованиеСчетаФактуры.СуммаУменьшение    = ДанныеДокумента.СуммаУменьшение;
			ОснованиеСчетаФактуры.СуммаНДСУвеличение = ДанныеДокумента.СуммаНДСУвеличение;
			ОснованиеСчетаФактуры.СуммаНДСУменьшение = ДанныеДокумента.СуммаНДСУменьшение;
			
			Если ДанныеДокумента.Свойство("УчитыватьИсправлениеИсходногоДокумента")
				И ДанныеДокумента.УчитыватьИсправлениеИсходногоДокумента Тогда
				ОснованиеСчетаФактуры.НомерИсправленияИсходногоДокумента = ДанныеДокумента.НомерИсправленияИсходногоДокумента;
				ОснованиеСчетаФактуры.ДатаИсправленияИсходногоДокумента  = ДанныеДокумента.ДатаИсправленияИсходногоДокумента;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Отражение вычета НДС по умолчанию
	СтруктураПараметров	= Новый Структура("Дата, Организация, ВидСчетаФактуры, ДокументОснование, Исправление");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ДокументОбъект);
	ДокументОбъект.НДСПредъявленКВычету = Документы.СчетФактураПолученный.ПолучитьПорядокОтраженияВычетаПоУмолчанию(СтруктураПараметров);
	
	ДокументОбъект.СуммаУвеличение    = ДанныеДокумента.СуммаУвеличение;
	ДокументОбъект.СуммаУменьшение    = ДанныеДокумента.СуммаУменьшение;
	ДокументОбъект.СуммаНДСУвеличение = ДанныеДокумента.СуммаНДСУвеличение;
	ДокументОбъект.СуммаНДСУменьшение = ДанныеДокумента.СуммаНДСУменьшение;
	Если ДанныеДокумента.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
		ДокументОбъект.СуммаДокумента     = ?(ДанныеДокумента.СуммаУвеличение = Неопределено, 0, ДанныеДокумента.СуммаУвеличение)
											- ?(ДанныеДокумента.СуммаУменьшение = Неопределено, 0, ДанныеДокумента.СуммаУменьшение);
		ДокументОбъект.СуммаНДСДокумента     = ?(ДанныеДокумента.СуммаНДСУвеличение = Неопределено, 0, ДанныеДокумента.СуммаНДСУвеличение)
											- ?(ДанныеДокумента.СуммаНДСУменьшение = Неопределено, 0, ДанныеДокумента.СуммаНДСУменьшение);
	Иначе
		ДокументОбъект.СуммаДокумента     = ДанныеДокумента.СуммаДокумента;
		ДокументОбъект.СуммаНДСДокумента  = ДанныеДокумента.СуммаНДСДокумента;
	КонецЕсли;
	
	Если ДанныеДокумента.Свойство("Авансы") Тогда
		
		ДокументОбъект.Авансы.Загрузить(ДанныеДокумента.Авансы);
		
	КонецЕсли;
	
	ЗаписатьДокумент(ДокументОбъект, РежимЗаписи);
	
	Если НЕ ЗначениеЗаполнено(Документ) Тогда
		Документ = ДокументОбъект.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПерезаполнениеЗначенийРеквизитовШапки(ТекущийОбъект, ДанныеЗаполнения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого Строка Из ДанныеЗаполнения Цикл
		
		Если ЗначениеЗаполнено(Строка.Ключ) И ТекущийОбъект.Метаданные().Реквизиты.Найти(Строка.Ключ) <> Неопределено Тогда
			Если ТекущийОбъект[Строка.Ключ] <> Строка.Значение Тогда
				ТекущийОбъект[Строка.Ключ] = Строка.Значение;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьСтруктуруДляПоступленияТоваровУслугПоПередачеТоваров(ДеревоДанных)
	
	ДанныеОбъекта = Новый Структура;
	
	ЭтоИсправление = ЗначениеЗаполнено(
		ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления"));
	
	Товары         = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	Услуги         = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка().Услуги.ВыгрузитьКолонки();
	ВозвратнаяТара = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка().ВозвратнаяТара.ВыгрузитьКолонки();
	
	Валюта = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(
				"Валюты", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод"));
	ДанныеОбъекта.Вставить("ВалютаДокумента", Валюта);
	
	КурсВзаиморасчетов = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
				ДеревоДанных, "ДопДанные.ДопДанныеПодписанные.КурсВзаиморасчетов", Ложь);
	ДанныеОбъекта.Вставить("КурсВзаиморасчетов", ?(ЗначениеЗаполнено(КурсВзаиморасчетов), КурсВзаиморасчетов, 1));
	ДанныеОбъекта.Вставить("КратностьВзаиморасчетов", 1);
	
	ДанныеОбъекта.Вставить("ВидОперацииЭД", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВидОперации"));
	
	ДанныеОбъекта.Вставить("СуммаВключаетНДС", Ложь);
	ДанныеОбъекта.Вставить("Корректировка",    Ложь);
	
	ДокументыОснования = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснования");
	Если ЗначениеЗаполнено(ДокументыОснования) Тогда
		
		Если ТипЗнч(ДокументыОснования) = Тип("Массив") И ДокументыОснования.Количество() > 0 Тогда
			ДокументОснование = ДокументыОснования[0];
		Иначе
			ДокументОснование = ДокументыОснования;
		КонецЕсли;
		
		Если ЭтоИсправление Тогда
			ДанныеОбъекта.Вставить("Основание", ДокументОснование);
		Иначе
			ДанныеОбъекта.Вставить("СчетНаОплатуПоставщика", ДокументОснование);
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("НомерВходящегоДокумента", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерТоварнойНакладной"));
	ДанныеОбъекта.Вставить("ДатаВходящегоДокумента",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаТоварнойНакладной"));
	
	Если ЭтоИсправление Тогда
		ДанныеОбъекта.Вставить("Исправление", Истина);
		ДанныеОбъекта.Вставить("НомерИсправления", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления"));
		ДанныеОбъекта.Вставить("ДатаИсправления",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления"));
	Иначе
		ДанныеОбъекта.Вставить("Исправление", Ложь);
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("Организация", ОрганизацияПоДаннымЭД(ДеревоДанных, "Плательщик"));
	ДанныеОбъекта.Вставить("Контрагент",  КонтрагентПоДаннымЭД(ДеревоДанных, "Поставщик"));
	
	ПередачаТовараКомитентом = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
		ДеревоДанных, "ДопДанные.Подписанные.ПередачаТовараКомитентом", Ложь);
	Если ЗначениеЗаполнено(ПередачаТовараКомитентом) Тогда
		ДанныеОбъекта.Вставить("ПередачаТовараКомитентом", Булево(ПередачаТовараКомитентом));
	Иначе
		ДанныеОбъекта.Вставить("ПередачаТовараКомитентом", Ложь);
	КонецЕсли;
	
	СведенияОТоварах = ДеревоДанных.Строки.Найти("ТаблицаТоваров", "ПолныйПуть");
	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
		
		ИдентификаторНоменклатуры = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.ИдТовараУКонтрагента");
		НаименованиеНоменклатуры  = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"ТаблицаТоваров.НомерСтроки.НаименованиеНоменклатуры");
		Номенклатура = НоменклатураКонтрагента(ДанныеОбъекта.Контрагент, ИдентификаторНоменклатуры, НаименованиеНоменклатуры);
		ВидТаблицыДокумента = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.ДопДанныеПодписанные.ТаблицаДокумента", Ложь);
		Если ЗначениеЗаполнено(Номенклатура) Тогда
			
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ВидНоменклатуры.Услуга") Тогда
				
				ВидТаблицыДокумента = "Услуги";
				
			ИначеЕсли ВидТаблицыДокумента <> "ВозвратнаяТара" Тогда
				
				ВидТаблицыДокумента = "Товары";
				
			КонецЕсли;
			
		КонецЕсли;
			
		Если ВидТаблицыДокумента = "Товары" Тогда
		
			НоваяСтрока = Товары.Добавить();
			
		ИначеЕсли ВидТаблицыДокумента = "Услуги" Тогда
			
			НоваяСтрока = Услуги.Добавить();
			
		ИначеЕсли ВидТаблицыДокумента = "ВозвратнаяТара" Тогда
			
			НоваяСтрока = ВозвратнаяТара.Добавить();
			
		Иначе
			
			ВидТаблицыДокумента = "Товары";
			НоваяСтрока = Товары.Добавить();
			
		КонецЕсли;
		НоваяСтрока.Номенклатура = Номенклатура;
		
		Если ВидТаблицыДокумента = "Товары" Тогда
			
			НоваяСтрока.ЕдиницаИзмерения = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("ЕдиницыИзмерения",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.БазоваяЕдиницаКод"));
					
		КонецЕсли;
		
		Если ВидТаблицыДокумента = "Услуги" Тогда
			
			НоваяСтрока.Содержание = НаименованиеНоменклатуры;
			
		КонецЕсли;
		
		// Обязательные реквизиты:
		НоваяСтрока.СтавкаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.СтавкаНДС");
		НоваяСтрока.СуммаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре,  "ТаблицаТоваров.НомерСтроки.СуммаНДС");
		
		// Необязательные реквизиты:
		МассаНетто = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.МассаНетто");
		КоличествоМест = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.КоличествоМест");
		НоваяСтрока.Количество = ?(ЗначениеЗаполнено(МассаНетто), МассаНетто, КоличествоМест);
		НоваяСтрока.Цена = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.Цена");
		НоваяСтрока.Сумма = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.СуммаБезНДС");
		
		Если ВидТаблицыДокумента = "Товары" Тогда
			
			НомерТД = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
				СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.ДопДанныеПодписанные.НомерТД", Ложь);
			КодСтраныПроисхождения = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
				СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.ДопДанныеПодписанные.КодСтраныПроисхождения", Ложь);
				
			ДанныеГТД = Новый Структура;
			Если ЗначениеЗаполнено(НомерТД) Тогда
				
				ДанныеГТД.Вставить("НомерТД", НомерТД);
				
			КонецЕсли;
			Если ЗначениеЗаполнено(КодСтраныПроисхождения) Тогда
				
				ДанныеГТД.Вставить("КодСтраныПроисхождения", КодСтраныПроисхождения);
				
			КонецЕсли;
			ЗаполнитьНомерТДИСтрануПроисхождения(НоваяСтрока, ДанныеГТД);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеДляЗаполнения = Новый Структура();
	ДанныеДляЗаполнения.Вставить("Шапка", ДанныеОбъекта);
	ДанныеДляЗаполнения.Вставить("Товары", Товары);
	ДанныеДляЗаполнения.Вставить("Услуги", Услуги);
	ДанныеДляЗаполнения.Вставить("ВозвратнаяТара", ВозвратнаяТара);
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

Функция ПодготовитьСтруктуруДляПоступленияТоваровУслугПоПередачаРабот(ДеревоДанных)
	
	ДанныеОбъекта = Новый Структура;
	
	ЭтоИсправление = ЗначениеЗаполнено(
		ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления"));
		
	Услуги = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка().Услуги.ВыгрузитьКолонки();
	Товары = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	ВозвратнаяТара = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка().ВозвратнаяТара.ВыгрузитьКолонки();
	
	Валюта = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(
				"Валюты", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод"));
	ДанныеОбъекта.Вставить("ВалютаДокумента", Валюта);
	
	КурсВзаиморасчетов = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
				ДеревоДанных, "ДопДанные.ДопДанныеПодписанные.КурсВзаиморасчетов", Ложь);
	ДанныеОбъекта.Вставить("КурсВзаиморасчетов", ?(ЗначениеЗаполнено(КурсВзаиморасчетов), КурсВзаиморасчетов, 1));
	ДанныеОбъекта.Вставить("КратностьВзаиморасчетов", 1);
	
	ДанныеОбъекта.Вставить("ВидОперацииЭД", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВидОперации"));
	
	ДанныеОбъекта.Вставить("СуммаВключаетНДС", Ложь);
	ДанныеОбъекта.Вставить("Корректировка",    Ложь);
	
	ДокументыОснования = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснования");
	Если ЗначениеЗаполнено(ДокументыОснования) Тогда
		
		Если ТипЗнч(ДокументыОснования) = Тип("Массив") И ДокументыОснования.Количество() > 0 Тогда
			ДокументОснование = ДокументыОснования[0];
		Иначе
			ДокументОснование = ДокументыОснования;
		КонецЕсли;
		
		Если ЭтоИсправление Тогда
			ДанныеОбъекта.Вставить("Основание", ДокументОснование);
		Иначе
			ДанныеОбъекта.Вставить("СчетНаОплатуПоставщика", ДокументОснование);
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("НомерВходящегоДокумента", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерАкта"));
	ДанныеОбъекта.Вставить("ДатаВходящегоДокумента",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаАкта"));
	
	Если ЭтоИсправление Тогда
		ДанныеОбъекта.Вставить("Исправление", Истина);
		ДанныеОбъекта.Вставить("НомерИсправления", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления"));
		ДанныеОбъекта.Вставить("ДатаИсправления",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления"));
	Иначе
		ДанныеОбъекта.Вставить("Исправление", Ложь);
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("Организация", ОрганизацияПоДаннымЭД(ДеревоДанных, "Исполнитель"));
	ДанныеОбъекта.Вставить("Контрагент",  КонтрагентПоДаннымЭД(ДеревоДанных, "Заказчик"));
	
	ДанныеОбъекта.Вставить("ПередачаТовараКомитентом", Ложь);
	
	ДокументОснование = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснования");
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		
		ДанныеОбъекта.Вставить("СчетНаОплатуПоставщика", ДокументОснование);
		
	КонецЕсли;
	
	СведенияОТоварах = ДеревоДанных.Строки.Найти("ТаблицаУслуг", "ПолныйПуть");
	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
		
		НоваяСтрока = Услуги.Добавить();
		
		// Обязательные реквизиты:
		НоваяСтрока.СтавкаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаУслуг.НомерСтроки.СтавкаНДС");
		НоваяСтрока.СуммаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре,  "ТаблицаУслуг.НомерСтроки.СуммаНДС");
		
		// Необязательные реквизиты:
		НоваяСтрока.Количество = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаУслуг.НомерСтроки.Количество");
		НоваяСтрока.Цена = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаУслуг.НомерСтроки.Цена");
		НоваяСтрока.Сумма = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаУслуг.НомерСтроки.СуммаБезНДС");
		НоваяСтрока.Содержание = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаУслуг.НомерСтроки.Описание");
		
		ИдентификаторНоменклатуры = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаУслуг.НомерСтроки.ИдТовараУКонтрагента");
		НаименованиеНоменклатуры  = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"ТаблицаУслуг.НомерСтроки.НаименованиеНоменклатуры");
		НоваяСтрока.Номенклатура = НоменклатураКонтрагента(ДанныеОбъекта.Контрагент, ИдентификаторНоменклатуры, НаименованиеНоменклатуры);
		
	КонецЦикла;
	
	ДанныеДляЗаполнения = Новый Структура();
	ДанныеДляЗаполнения.Вставить("Шапка", ДанныеОбъекта);
	ДанныеДляЗаполнения.Вставить("Услуги", Услуги);
	ДанныеДляЗаполнения.Вставить("Товары", Товары);
	ДанныеДляЗаполнения.Вставить("ВозвратнаяТара", ВозвратнаяТара);
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

#КонецОбласти

#Область РаботаСДеревом

Функция ПолучитьЗначениеРеквизита(СтрокаДерева, ИмяРеквизита, ВключатьПодчиненные = Ложь, ДеревоРазбора = Неопределено)
	
	Результат = Неопределено;
	
	Если СтрокаДерева.Строки.Количество()>0 Тогда
		НайденнаяСтрока = СтрокаДерева.Строки.Найти(ИмяРеквизита, "Реквизит", ВключатьПодчиненные);
	Иначе
		НайденнаяСтрока = СтрокаДерева;
	КонецЕсли;
	
	Если НайденнаяСтрока <> Неопределено Тогда
		Результат = НайденнаяСтрока.ЗначениеРеквизита;
		// Если реквизит ссылочного типа (передали реквизит ДеревоРазбора),
		// тогда нашли всего лишь индекс строки
		Если ЗначениеЗаполнено(ДеревоРазбора) Тогда 
			НайденнаяСтрока = ДеревоРазбора.Строки.Найти(Результат, "ИндексСтроки", Истина);
			Если НайденнаяСтрока <> Неопределено Тогда
				Результат = НайденнаяСтрока.СсылкаНаОбъект;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДанныеСтрокиТЧ(ДанныеЗаполнения, ДеревоРазбора, ЦенаВключаетНДС = Ложь)
	
	ДанныеДляЗаполненияСтрокиТЧ = Новый Структура();
	
	Для Каждого ТекСтрока Из ДанныеЗаполнения Цикл
		
		ИмяРеквизитаВБД = ТекСтрока.Реквизит;
		
		Если ВРег(ИмяРеквизитаВБД) = ВРег("Мест") Тогда
			ИмяРеквизитаВБД = "КоличествоМест";
		ИначеЕсли ВРег(ИмяРеквизитаВБД) = ВРег("Описание") Тогда
			ИмяРеквизитаВБД = "Содержание";
		ИначеЕсли Найти(ИмяРеквизитаВБД, "ДоКорректировки") <> 0 Тогда
			ИмяРеквизитаВБД = СтрЗаменить(ИмяРеквизитаВБД, "ДоКорректировки", "ДоИзменения");
		КонецЕсли;
		
		НайденноеЗначение = ПолучитьЗначениеРеквизита(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
		
		ДанныеДляЗаполненияСтрокиТЧ.Вставить(ИмяРеквизитаВБД, НайденноеЗначение);
		
		Если ТекСтрока.Реквизит = "Номенклатура" И ЗначениеЗаполнено(НайденноеЗначение) Тогда
			
			ДанныеДляЗаполненияСтрокиТЧ.Вставить("Услуга", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НайденноеЗначение, "Услуга"));
			СтрокаНоменклатура = ДеревоРазбора.Строки.Найти(ТекСтрока.ЗначениеРеквизита,"ИндексСтроки",Истина);
			НайденноеЗначение = ПолучитьЗначениеРеквизита(СтрокаНоменклатура, "ЕдиницаИзмерения", Истина, ДеревоРазбора);
			ДанныеДляЗаполненияСтрокиТЧ.Вставить("ЕдиницаИзмерения", НайденноеЗначение);
			
		ИначеЕсли ТекСтрока.Реквизит = "ЭтоУслуга" Тогда
			
			ДанныеДляЗаполненияСтрокиТЧ.Вставить("Услуга", Булево(НайденноеЗначение));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДанныеДляЗаполненияСтрокиТЧ.Свойство("СуммаСНДС") И ЦенаВключаетНДС Тогда
		ДанныеДляЗаполненияСтрокиТЧ.Сумма = ДанныеДляЗаполненияСтрокиТЧ.СуммаСНДС; 	
	КонецЕсли;
	
	ЗаполняемСтавкуНДС = 0;
	ДанныеДляРасчетаСтавки = Новый Структура("СтавкаНДС, СуммаНДС, Сумма");
	ЗаполнитьЗначенияСвойств(ДанныеДляРасчетаСтавки, ДанныеДляЗаполненияСтрокиТЧ);
	
	Если НЕ ЗначениеЗаполнено(ДанныеДляРасчетаСтавки.СтавкаНДС) Тогда
		Если ЗначениеЗаполнено(ДанныеДляРасчетаСтавки.СуммаНДС) 
			И ЗначениеЗаполнено(ДанныеДляРасчетаСтавки.Сумма) Тогда
			//Определим ставку НДС расчетным путем
			ЗначениеСтавки = ОКР(ДанныеДляРасчетаСтавки.СуммаНДС / ДанныеДляРасчетаСтавки.Сумма,2);
			ДанныеДляЗаполненияСтрокиТЧ.Вставить("СтавкаНДС", ПолучитьСтавкуНДСПеречислением(ЗначениеСтавки));
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ДанныеДляЗаполненияСтрокиТЧ.Свойство("Содержание") И ДанныеДляЗаполненияСтрокиТЧ.Свойство("Наименование") Тогда
		ДанныеДляЗаполненияСтрокиТЧ.Вставить("Содержание", ДанныеДляЗаполненияСтрокиТЧ.Наименование);
	КонецЕсли;
	
	Возврат ДанныеДляЗаполненияСтрокиТЧ;
	
КонецФункции

Процедура СкопироватьЗначениеСтруктуры(Структура, ПолеИсточник, НовоеПоле)
	
	Если Структура.Свойство(ПолеИсточник) И Не Структура.Свойство(НовоеПоле) Тогда
		Структура.Вставить(НовоеПоле, Структура[ПолеИсточник]);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОбУчастнике, ВидУчастника, ВидАдреса = "АдресРФ", КорневойЭлементДерева = "", ДатаСведений = '00010101') Экспорт
	
	Если СведенияОбУчастнике.СтранаРегистрации <> Справочники.СтраныМира.Россия Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации",
									СведенияОбУчастнике.ПолноеНаименование, КорневойЭлементДерева);
		
	ИначеЕсли СведенияОбУчастнике.ТипЮрФизЛица = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации",
									СведенияОбУчастнике.ПолноеНаименование, КорневойЭлементДерева);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ЮЛ.ИНН",
									СведенияОбУчастнике.ИНН, КорневойЭлементДерева);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ЮЛ.КПП",
									СведенияОбУчастнике.КПП, КорневойЭлементДерева);
		
	Иначе
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИП.ИНН",
									СведенияОбУчастнике.ИНН, КорневойЭлементДерева);
		
		Если ЗначениеЗаполнено(СведенияОбУчастнике.СвидетельствоСерияНомер) Тогда
			Свидетельство = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Свидетельство №%1 от %2'"),
							СведенияОбУчастнике.СвидетельствоСерияНомер,
							Формат(СведенияОбУчастнике.СвидетельствоДатаВыдачи, "ДЛФ=D"));
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".ТипУчастника.ИП.СвидетельствоОГосРегистрации",
										Свидетельство, КорневойЭлементДерева);
		КонецЕсли;
		
		ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(СведенияОбУчастнике.ПолноеНаименование);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИП.Фамилия",
									ФИО.Фамилия, КорневойЭлементДерева);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИП.Имя",
									ФИО.Имя, КорневойЭлементДерева);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИП.Отчество",
									ФИО.Отчество, КорневойЭлементДерева);
	КонецЕсли;
	
	АдресУчастника = Новый Структура;
	ОбменСКонтрагентамиПереопределяемый.ПолучитьАдресСтруктурой(АдресУчастника, СведенияОбУчастнике.ЮрФизЛицоСсылка, "Ссылка", ВидАдреса, "", ДатаСведений);
	
	ТипАдреса = ?(АдресУчастника.АдресРФ, "АдресРФ", "АдресИнформация");
	ЗаполнитьАдресВДеревеУПД(ДеревоДанных, АдресУчастника, ТипАдреса, ВидУчастника, КорневойЭлементДерева);
	
	Если ЗначениеЗаполнено(СведенияОбУчастнике.Телефоны) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".КонтактныеСведения.Телефон",
									СведенияОбУчастнике.Телефоны, КорневойЭлементДерева);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведенияОбУчастнике.Email) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".КонтактныеСведения.ЭлектроннаяПочта",
									СведенияОбУчастнике.Email, КорневойЭлементДерева);
	КонецЕсли;
	
	
	НомерСчета = "";
	Если СведенияОбУчастнике.Свойство("НомерСчета", НомерСчета) И ЗначениеЗаполнено(НомерСчета) Тогда
		Банк = "";
		БИК = "";
		КоррСчет = "";
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ВидУчастника + ".БанковскиеРеквизиты.НомерСчета",
				НомерСчета, КорневойЭлементДерева);
				
		Если СведенияОбУчастнике.Свойство("Банк", Банк) И ЗначениеЗаполнено(Банк) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".БанковскиеРеквизиты.НаименованиеБанка",
										Банк, КорневойЭлементДерева);
		КонецЕсли;
		Если СведенияОбУчастнике.Свойство("БИК", БИК) И ЗначениеЗаполнено(БИК) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".БанковскиеРеквизиты.БИКБанка",
										БИК, КорневойЭлементДерева);
		КонецЕсли;
		Если СведенияОбУчастнике.Свойство("КоррСчет", КоррСчет) И ЗначениеЗаполнено(КоррСчет) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".БанковскиеРеквизиты.КорреспондентскийСчетБанка",
										КоррСчет, КорневойЭлементДерева);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведенияОбУчастнике.КодПоОКПО) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".КодОКПО", СведенияОбУчастнике.КодПоОКПО, КорневойЭлементДерева);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьАдресВДеревеУПД(ДеревоДанных, АдресУчастника, ТипАдреса, ВидУчастника, КорневойЭлементДерева = "")
	
	Если ТипАдреса = "АдресРФ" Тогда
			АдресУчастника.Удалить("АдресРФ");
			АдресУчастника.Удалить("КодСтр");
			АдресУчастника.Удалить("КодСтраны");
			АдресУчастника.Удалить("АдрТекст");
			АдресУчастника.Удалить("АдресТекст");
			АдресУчастника.Удалить("Регион");
			АдресУчастника.Удалить("КодРегион");
			АдресУчастника.Удалить("НаселПункт");
			АдресУчастника.Удалить("Кварт");
			АдресУчастника.Удалить("КодГАР");
			
		Для Каждого Элемент Из АдресУчастника Цикл
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".Адрес." + ТипАдреса + "." + Элемент.Ключ,
									Элемент.Значение, КорневойЭлементДерева);
		КонецЦикла;
	ИначеЕсли ТипАдреса = "АдресИнформация" Тогда
			АдресУчастника.Удалить("АдресРФ");
			АдресУчастника.Удалить("ПочтовыйИндекс");
			АдресУчастника.Удалить("Индекс");
			АдресУчастника.Удалить("Регион");
			АдресУчастника.Удалить("КодРегиона");
			АдресУчастника.Удалить("КодРегион");
			АдресУчастника.Удалить("Район");
			АдресУчастника.Удалить("Город");
			АдресУчастника.Удалить("НаселенныйПункт");
			АдресУчастника.Удалить("НаселПункт");
			АдресУчастника.Удалить("Улица");
			АдресУчастника.Удалить("Дом");
			АдресУчастника.Удалить("Корпус");
			АдресУчастника.Удалить("Квартира");
			АдресУчастника.Удалить("Кварт");
			АдресУчастника.Удалить("КодСтр");
			АдресУчастника.Удалить("АдрТекст");
			АдресУчастника.Удалить("КодГАР");
	
		Для Каждого Элемент Из АдресУчастника Цикл
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".Адрес." + ТипАдреса + "." + Элемент.Ключ,
									Элемент.Значение, КорневойЭлементДерева);
		КонецЦикла;
	ИначеЕсли ТипАдреса = "КодГАР" Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".Адрес.КодГАР",
									Элемент.Значение, КорневойЭлементДерева);
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеТаблицыДерева(ДеревоДанных, НазваниеТаблицы)
	
	ТаблицаВозврата = Новый ТаблицаЗначений;
	СтрокаТаблицы = ДеревоДанных.Строки.Найти(НазваниеТаблицы, "ПолныйПуть", Истина);
	НомерСтроки = СтрокаТаблицы.Строки[0];
	Для Каждого Строка Из НомерСтроки.Строки Цикл
		ТаблицаВозврата.Колонки.Добавить(НазваниеКолонки(Строка.ПолныйПуть));
	КонецЦикла;
	
	Для Каждого Строка Из СтрокаТаблицы.Строки Цикл
		НовСтрока = ТаблицаВозврата.Добавить();
		Для Каждого СтрокаРеквизита Из Строка.Строки Цикл
			НовСтрока[НазваниеКолонки(СтрокаРеквизита.ПолныйПуть)] = СтрокаРеквизита.Значение;
		КонецЦикла;
	КонецЦикла;
		
	Возврат ТаблицаВозврата;
	
КонецФункции

Функция НазваниеКолонки(ПолныйПуть)
	
	МассивСтрок = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ПолныйПуть);
	Возврат МассивСтрок[МассивСтрок.Количество()-1];
	
КонецФункции

#КонецОбласти

Функция ПолучитьСвойствоСтруктуры(ДанныеСтруктуры, СвойствоСтруктуры)
	
	Если ДанныеСтруктуры.Свойство(СвойствоСтруктуры) Тогда
		
		Возврат ДанныеСтруктуры[СвойствоСтруктуры];
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиОбновления

#Область ПереходСБП20

// Добавляет новые виды электронных документов при переходе с БП 2.0
Процедура ДобавитьНовыеВидыЭДПриПереходеСБП20() Экспорт
	
	ОбменСКонтрагентами.ОбновитьНастройкиЭДО(Перечисления.ВидыЭД.СчетНаОплату);
	ОбменСКонтрагентами.ОбновитьНастройкиЭДО(Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара);
	ОбменСКонтрагентами.ОбновитьНастройкиЭДО(Перечисления.ВидыЭД.АктНаПередачуПрав);
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеБП30

Процедура УстановитьЗначенияКонстантЭДОПриОбновлении() Экспорт
	
	Если Не СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
		
		ОбменСКонтрагентами.УстановитьЗначенияКонстантЭДО();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
