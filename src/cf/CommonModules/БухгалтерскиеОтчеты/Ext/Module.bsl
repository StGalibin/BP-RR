////////////////////////////////////////////////////////////////////////////////
// Функции и процедуры обеспечения формирования бухгалтерских отчетов.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Процедура заполняет список значений с ключами отчетов, которые поддерживаются подсистемой.
//
// Параметры:
//	СписокОтчетов - СписокЗначений - Список отчетов.
//
Процедура СписокОтчетовПоддерживаемыхПодсистемой(СписокОтчетов) Экспорт
	
	СписокОтчетов.Добавить("Отчет." + Метаданные.Отчеты.Продажи.Имя);
	СписокОтчетов.Добавить("Отчет." + Метаданные.Отчеты.ПродажиПоМесяцам.Имя);
	СписокОтчетов.Добавить("Отчет." + Метаданные.Отчеты.ЗадолженностьПокупателей.Имя);
	СписокОтчетов.Добавить("Отчет." + Метаданные.Отчеты.ЗадолженностьПоставщикам.Имя);
	СписокОтчетов.Добавить("Отчет." + Метаданные.Отчеты.ЗадолженностьПокупателейПоСрокамДолга.Имя);
	СписокОтчетов.Добавить("Отчет." + Метаданные.Отчеты.ЗадолженностьПоставщикамПоСрокамДолга.Имя);
	
	СписокОтчетов.Добавить("Отчет." + Метаданные.Отчеты.ОборотныеСредства.Имя);
	СписокОтчетов.Добавить("Отчет." + Метаданные.Отчеты.ДинамикаЗадолженностиПокупателей.Имя);
	СписокОтчетов.Добавить("Отчет." + Метаданные.Отчеты.ДинамикаЗадолженностиПоставщикам.Имя);
	СписокОтчетов.Добавить("Отчет." + Метаданные.Отчеты.ОстаткиДенежныхСредств.Имя);
	СписокОтчетов.Добавить("Отчет." + Метаданные.Отчеты.ПоступленияДенежныхСредств.Имя);
	СписокОтчетов.Добавить("Отчет." + Метаданные.Отчеты.РасходыДенежныхСредств.Имя);
	СписокОтчетов.Добавить("Отчет." + Метаданные.Отчеты.АнализДвиженийДенежныхСредств.Имя);
	СписокОтчетов.Добавить("Отчет." + Метаданные.Отчеты.РегистрыБУСубъектовМалогоПредпринимательства.Имя);
	СписокОтчетов.Добавить("Отчет." + Метаданные.Отчеты.ДоходыРасходы.Имя);
	СписокОтчетов.Добавить("Отчет." + Метаданные.Отчеты.ОстаткиТоваров.Имя);
	СписокОтчетов.Добавить("Отчет." + Метаданные.Отчеты.ДвижениеТоваров.Имя);
	
КонецПроцедуры

// Устанавливает свойства связанных наборов данных для стандартных бухгалтерских отчетов.
//
// Параметры:
//	Схема - СхемаКомпоновкиДанных - Схема отчета.
//	ИмяНабора - Строка - Имя связанного набора.
//	ПараметрыПоляВладельца - Структура - Содержит ключ:
//		* ИндексСубконто - Число - Номер субконто.
//		* ЗаголовокСубконто - Строка - Название вида субконто.
//	ИмяПоляПрефикс - Строка - Префикс для имени поля.
//
Процедура ОбработатьНаборДанныхСвязаннойИнформации(Схема, ИмяНабора, ПараметрыПоляВладельца, ИмяПоляПрефикс = "Субконто") Экспорт
	
	Если ПараметрыПоляВладельца.ИндексСубконто > 0 Тогда
		ПутьКДаннымОсновногоПоля = "";
		ЗаголовокОсновногоПоля   = "";
		Для Каждого ПолеНабора Из Схема.НаборыДанных[ИмяНабора].Поля Цикл
			Если СтрНайти(ПолеНабора.Поле, "СвязанноеПолеСсылка") = 1 Тогда
				ПутьКДаннымОсновногоПоля = ПолеНабора.ПутьКДанным;
				ЗаголовокОсновногоПоля   = СтрЗаменить(ПолеНабора.Заголовок, ".Ссылка", "");
			КонецЕсли;
		КонецЦикла;
		Для Каждого ПолеНабора Из Схема.НаборыДанных[ИмяНабора].Поля Цикл
			Если СтрНайти(ПолеНабора.Поле, "СвязанноеПоле") = 1 Тогда
				ПолеНабора.ПутьКДанным = СтрЗаменить(ПолеНабора.ПутьКДанным, ПутьКДаннымОсновногоПоля, ИмяПоляПрефикс + ПараметрыПоляВладельца.ИндексСубконто);
				ПолеНабора.Заголовок   = СтрЗаменить(ПолеНабора.Заголовок, ЗаголовокОсновногоПоля, ПараметрыПоляВладельца.ЗаголовокСубконто);
				ПолеНабора.ОграничениеИспользования.Группировка = Истина;
				ПолеНабора.ОграничениеИспользования.Поле        = Ложь;
				ПолеНабора.ОграничениеИспользования.Условие     = Истина;
				ПолеНабора.ОграничениеИспользования.Порядок     = Ложь;

				ПолеНабора.ОграничениеИспользованияРеквизитов.Группировка = Истина;
				ПолеНабора.ОграничениеИспользованияРеквизитов.Поле        = Ложь;
				ПолеНабора.ОграничениеИспользованияРеквизитов.Условие     = Истина;
				ПолеНабора.ОграничениеИспользованияРеквизитов.Порядок     = Ложь;
				
			КонецЕсли;
		КонецЦикла;
		Для Каждого Связь Из Схема.СвязиНаборовДанных Цикл
			Если Связь.НаборДанныхПриемник = ИмяНабора Тогда
				Связь.ВыражениеИсточник = ИмяПоляПрефикс + ПараметрыПоляВладельца.ИндексСубконто;
				Связь.ВыражениеПриемник = ИмяПоляПрефикс + ПараметрыПоляВладельца.ИндексСубконто;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого ПолеНабора Из Схема.НаборыДанных[ИмяНабора].Поля Цикл
			Если СтрНайти(ПолеНабора.Поле, "СвязанноеПоле") = 1 Тогда
				ПолеНабора.ОграничениеИспользования.Группировка = Истина;
				ПолеНабора.ОграничениеИспользования.Поле        = Истина;
				ПолеНабора.ОграничениеИспользования.Условие     = Истина;
				ПолеНабора.ОграничениеИспользования.Порядок     = Истина;
				
				ПолеНабора.ОграничениеИспользованияРеквизитов.Группировка = Истина;
				ПолеНабора.ОграничениеИспользованияРеквизитов.Поле        = Истина;
				ПолеНабора.ОграничениеИспользованияРеквизитов.Условие     = Истина;
				ПолеНабора.ОграничениеИспользованияРеквизитов.Порядок     = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает заголовок, помещающийся без переноса при установленной в процедуре УстановитьШиринуПоказателей() ширине.
//
// Возвращаемое значение:
//	Строка - Текст заголовка для группы "Показатели".
//
Функция ЗаголовокГруппыПоказателей() Экспорт
	
	Возврат НСтр("ru = 'Показа-" + Символы.ПС + "тели'");
	
КонецФункции

// Устанавливает минимальную ширину полей с показателями,
// при которой умещается заголовок, заданный в функции ЗаголовокГруппыПоказателей().
//
// Параметры:
//	Схема - СхемаКомпоновкиДанных - Схема отчета.
//	НаборПоказателей - Массив - Содержит имена показателей отчета.
//
Процедура УстановитьМинимальнуюШиринуПоказателей(Схема, НаборПоказателей) Экспорт
	
	ВычисляемыеПоля = Схема.ВычисляемыеПоля;
	
	Для Каждого Показатель Из НаборПоказателей Цикл
		УстановитьЗначениеМинимальнойШириныПоля(ВычисляемыеПоля.Найти("Показатели." + Показатель));
		УстановитьЗначениеМинимальнойШириныПоля(ВычисляемыеПоля.Найти("Показатели." + Показатель + "НачальныйОстаток"));
		УстановитьЗначениеМинимальнойШириныПоля(ВычисляемыеПоля.Найти("Показатели." + Показатель + "Оборот"));
		УстановитьЗначениеМинимальнойШириныПоля(ВычисляемыеПоля.Найти("Показатели." + Показатель + "КонечныйОстаток"));
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает условное оформление для поля ТипГруппировки табличной части Группировка настроек отчета.
//
// Параметры:
//   Форма - УправляемаяФорма - форма отчета.
//
Процедура УстановитьУсловноеОформлениеТипГруппировки(Форма) Экспорт

	УсловноеОформление = Форма.УсловноеОформление;


	// Тип группировки "Без групп"

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ГруппировкаТипГруппировки");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Отчет.Группировка.ТипГруппировки", ВидСравненияКомпоновкиДанных.Равно, 0);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Без групп'"));


	// Тип группировки "С группами"

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ГруппировкаТипГруппировки");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Отчет.Группировка.ТипГруппировки", ВидСравненияКомпоновкиДанных.Равно, 1);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'С группами'"));


	// Тип группировки "Только группы"

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ГруппировкаТипГруппировки");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Отчет.Группировка.ТипГруппировки", ВидСравненияКомпоновкиДанных.Равно, 2);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Только группы'"));

КонецПроцедуры

// Удаляем из переданной коллекций настроек условного оформления автоотступ.
//
// Параметры:
//	УсловноеОформление - УсловноеОформление - Коллекция условного оформления.
//
Процедура УдалитьАвтоотступИзУсловногоОформления(УсловноеОформление) Экспорт

	// Удалим автоотступ из условного оформления.
	ЭлементыДляУдаления = Новый Массив;
	Для Каждого ЭлементУсловногоОформления Из УсловноеОформление.Элементы Цикл
		ПараметрОформления = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(ЭлементУсловногоОформления.Оформление, "Автоотступ");
		Если ПараметрОформления <> Неопределено И ПараметрОформления.Использование = Истина Тогда
			ЭлементыДляУдаления.Добавить(ЭлементУсловногоОформления);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемыйЭлемент Из ЭлементыДляУдаления Цикл
		УсловноеОформление.Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;

КонецПроцедуры

// Возвращает перечень видов договоров с поставщиком.
//
// Возвращаемое значение:
//	Массив - Содержит виды договоров с поставщиком.
//
Функция ВидыДоговоровПоставщиков() Экспорт
	
	ВидыДоговоров = Новый Массив;
	
	ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
		
	Возврат ВидыДоговоров;
	
КонецФункции

// Возвращает перечень видов договоров с покупателем.
//
// Возвращаемое значение:
//	Массив - Содержит виды договоров с покупателем.
//
Функция ВидыДоговоровПокупателей() Экспорт
	
	ВидыДоговоров = Новый Массив;
	ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);
	
	Возврат ВидыДоговоров;
	
КонецФункции

// Возвращает списки счетов расчетов с поставщиками.
//
// Параметры:
//	Структура - Содержит ключи:
//		* СчетаСДокументомРасчетов - СписокЗначений - Список счетов с субконто документы расчетов.
//		* СчетаБезДокументаРасчетов - СписокЗначений - Список счетов без субконто документы расчетов.
//
Функция СчетаУчетаРасчетовПоставщиков() Экспорт

	Возврат СчетаУчетаРасчетов(БухгалтерскиеОтчетыВызовСервера.ПолучитьСписокСчетовИсключаемыхИзРасчетаЗадолженности(2));

КонецФункции

// Возвращает списки счетов расчетов с покупателями.
//
// Параметры:
//	Структура - Содержит ключи:
//		* СчетаСДокументомРасчетов - СписокЗначений - Список счетов с субконто документы расчетов.
//		* СчетаБезДокументаРасчетов - СписокЗначений - Список счетов без субконто документы расчетов.
//
Функция СчетаУчетаРасчетовПокупателей() Экспорт

	Возврат СчетаУчетаРасчетов(БухгалтерскиеОтчетыВызовСервера.ПолучитьСписокСчетовИсключаемыхИзРасчетаЗадолженности(1));

КонецФункции

// Возвращает список счетов учета товаров.
//
// Параметры:
// ИсключаемыеСчета - Массив - Счета, которые нужно исключить из итогового списка.
//
// Возвращаемое значение:
// Массив - счета и субсчета учета товаров.
//
Функция СчетаУчетаТоваров(ИсключаемыеСчета = Неопределено) Экспорт
	
	Если ИсключаемыеСчета = Неопределено Тогда
		
		ИсключаемыеСчета = ИсключаемыеСчетаУчетаТоваров();
		
	КонецЕсли;
	
	СчетаУчетаТоваровПредопределенные = Новый Массив;
	СчетаУчетаТоваровПредопределенные.Добавить(ПланыСчетов.Хозрасчетный.Материалы);                           // 10
	СчетаУчетаТоваровПредопределенные.Добавить(ПланыСчетов.Хозрасчетный.Полуфабрикаты);                       // 21
	СчетаУчетаТоваровПредопределенные.Добавить(ПланыСчетов.Хозрасчетный.Товары);                              // 41
	СчетаУчетаТоваровПредопределенные.Добавить(ПланыСчетов.Хозрасчетный.ГотоваяПродукция);                    // 43
	СчетаУчетаТоваровПредопределенные.Добавить(ПланыСчетов.Хозрасчетный.ТоварыОтгруженные);                   // 45
	СчетаУчетаТоваровПредопределенные.Добавить(ПланыСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья);    // 20.02
	
	СчетаУчетаТоваров = БухгалтерскийУчет.СформироватьМассивСубсчетов(СчетаУчетаТоваровПредопределенные);
	
	Возврат ОбщегоНазначенияКлиентСервер.СократитьМассив(СчетаУчетаТоваров, ИсключаемыеСчета);
	
КонецФункции

// Возвращает список счетов расчтетов с покупателями с их субсчетами.
// В данной функции не учитывается список счетов исключенных из расчета задложенности,
// подробнее см. БухгалтерскиеОтчетыВызовСервера.ПолучитьСписокСчетовИсключаемыхИзРасчетаЗадолженности().
// 
// Возвращаемое значение:
// Массив - счета и субсчета расчетов с покупателями.
//
Функция СчетаРасчетовСПокупателямиССубсчетами() Экспорт
	
	СчетаРасчетовСПокупателями = Новый Массив;
	СчетаРасчетовСПокупателями.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками);
	СчетаРасчетовСПокупателями.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчиками);
	СчетаРасчетовСПокупателями.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиВал);
	СчетаРасчетовСПокупателями.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиУЕ);
	СчетаРасчетовСПокупателями.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами);
	
	Возврат БухгалтерскийУчет.СформироватьМассивСубсчетов(СчетаРасчетовСПокупателями);
	
КонецФункции

// Возвращает искомые значения из данных расшифровки.
//
// Параметры:
//  ДанныеРасшифровки - ДанныеРасшифровкиКомпоновкиДанных - Данные расшифровки из СКД.
//  СоответствиеПолей - Соответствие - Ключи соответствуют именам искомых в данных расшифровки полей
//  Расшифровка - ИдентификаторРасшифровкиКомпоновкиДанных - Идентификатор элемента данных расшифровки
//                в иерархии которого нужно осуществлять поиск.
//
// Возвращаемое значение:
//  Соответствие - Ключи соответствуют именам запрошенных полей.
//
Функция ПолучитьДанныеРасшифровки(ДанныеРасшифровки, СоответствиеПолей, Расшифровка) Экспорт
	
	СоответствиеДанных = Новый Соответствие();
	
	Если ДанныеРасшифровки <> Неопределено Тогда
		// Ищем интересующие нас поля в заданной расшифровке
		Для каждого ЭлементДанных Из СоответствиеПолей Цикл
			// Получаем элемент расшифровки, в котором нужно искать поля
			Родитель = ДанныеРасшифровки.Элементы[Расшифровка];
			// Вызываем рекурсивный поиск поля
			ЗначениеРасшифровки = ПолучитьЗначениеРасшифровки(Родитель, ЭлементДанных.Ключ);
			Если ЗначениеРасшифровки <> Неопределено Тогда
				// Значение нашлось, помещаем в структуру
				СоответствиеДанных.Вставить(ЭлементДанных.Ключ, ЗначениеРасшифровки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СоответствиеДанных;

КонецФункции

// Возвращает строковое представление уникального идентификатора ссылки. Используется при выводе УИДа ссылки в СКД.
//
// Параметры:
//   Ссылка - СправочникСсылка.* - Ссылка на элемент справочника.
//
Функция ПолучитьУИДСсылкиСтрокой(Ссылка) Экспорт
	Возврат Строка(Ссылка.УникальныйИдентификатор());
КонецФункции

// Проверяет, если ли в данных расшифровки отчета сведения о валюте.
//
// Параметры:
//	ДанныеРасшифровки - Структура - Структура, формируемая БухгалтерскиеОтчетыВызовСервера.СформироватьОтчет() с ключами:
//		* Объект - Структура - Реквизиты отчета-объекта
//		* ДанныеРасшифровки - ДанныеРасшифровкиКомпоновкиДанных - сами данные расшифровки СКД
//
// Возвращаемое значение:
//	Булево - Истина, если в данных расшифровки отчета есть информация о валюте.
//
Функция ОтчетСодержитДанныеПоВалюте(ДанныеРасшифровки) Экспорт

	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ТипВалюты = Тип("СправочникСсылка.Валюты");

	// Ищем, начиная с конца списка элементов расшифровки, т.к. чаще всего валютные счета идут по номеру 
	// после рублевых, и отчеты по умолчанию добавляют группировку по валюте в конец списка группировок.

	ЭлементыРасшифровки = ДанныеРасшифровки.ДанныеРасшифровки.Элементы;
	Сч = ЭлементыРасшифровки.Количество();
	
	// Отчеты типа карточка счета выводят детальные записи, не группировки, 
	// по их расшифровке нельзя определить наличие валюты в данных отчетах.
	ТолькоДетальныеЗаписиВОтчете = Истина;

	Пока Сч > 0 Цикл
	
		Сч = Сч - 1;
		ЭлементРасшифровки = ЭлементыРасшифровки[Сч];

		Если ТипЗнч(ЭлементРасшифровки) <> Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
			Продолжить;
		КонецЕсли;

		// Для ссылочных полей основным действием по умолчанию является "Открыть значение", в т.ч. и для валюты,
		// поэтому из всего списка элементов расшифровки анализируем только такие. 
		Если ЭлементРасшифровки.ОсновноеДействие <> ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда
			Продолжить;
		КонецЕсли;
		
		ТолькоДетальныеЗаписиВОтчете = Ложь;

		ЗначенияПолейРасшифровки = ЭлементРасшифровки.ПолучитьПоля();

		Для Каждого Поле Из ЗначенияПолейРасшифровки Цикл
			Если ТипЗнч(Поле.Значение) = ТипВалюты И ЗначениеЗаполнено(Поле.Значение) Тогда
				Если Поле.Значение <> ВалютаРегламентированногоУчета Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТолькоДетальныеЗаписиВОтчете;

КонецФункции

// Проверяет нужен ли для переданного типа сложный подбор
//
// Параметры:
//	ТипЭлемента - Тип - Тип, котороый нужно проверить.
// Возвращаемое значение:
//	Булево - Истина если нужна сложная обработка подбора, ложь - в противном случае.
//
Функция ЭтоТипЭлементаСоСложнымПодбором(ТипЭлемента) Экспорт
	
	Если ТипЭлемента = БухгалтерскийУчетКлиентСерверПереопределяемый.ТипЗначенияБанковскогоСчетаОрганизации() 
		ИЛИ ТипЭлемента = БухгалтерскийУчетКлиентСерверПереопределяемый.ТипПодразделения() 
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.ДоговорыКонтрагентов")
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.Партия")
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом")
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.ПартияМатериаловВЭксплуатации") Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьЗначениеМинимальнойШириныПоля(Поле)
	
	Если Поле = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Поле.Оформление.УстановитьЗначениеПараметра("МинимальнаяШирина", 8);
	
КонецПроцедуры

Функция СчетаУчетаРасчетов(ИсключенныеСчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ХозрасчетныйВидыСубконто_Контрагенты.Ссылка КАК Счет,
	               |	ХозрасчетныйВидыСубконто_Договоры.Ссылка ССЫЛКА ПланСчетов.Хозрасчетный КАК ЕстьДоговор
	               |ПОМЕСТИТЬ СчетаКонтрагентыИДоговоры
	               |ИЗ
	               |	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто_Контрагенты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто_Договоры
	               |		ПО ХозрасчетныйВидыСубконто_Контрагенты.Ссылка = ХозрасчетныйВидыСубконто_Договоры.Ссылка
	               |ГДЕ
	               |	ХозрасчетныйВидыСубконто_Контрагенты.ВидСубконто = &ВидСубконтоКонтрагенты
	               |	И ХозрасчетныйВидыСубконто_Договоры.ВидСубконто = &ВидСубконтоДоговоры
	               |	И НЕ ХозрасчетныйВидыСубконто_Контрагенты.Ссылка В (&ИсключенныеСчета)
	               |	И НЕ ХозрасчетныйВидыСубконто_Контрагенты.Ссылка.Забалансовый
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйВидыСубконто_Документы.Ссылка
	               |ПОМЕСТИТЬ СчетаДокументыРасчетов
	               |ИЗ
	               |	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто_Документы
	               |ГДЕ
	               |	ХозрасчетныйВидыСубконто_Документы.ВидСубконто = &ВидСубконтоДокументРасчетов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СчетаКонтрагентыИДоговоры.Счет КАК Счет,
	               |	ЕСТЬNULL(СчетаДокументыРасчетов.Ссылка ССЫЛКА ПланСчетов.Хозрасчетный, ЛОЖЬ) КАК ЕстьДокументРасчетов
	               |ПОМЕСТИТЬ Счета
	               |ИЗ
	               |	СчетаКонтрагентыИДоговоры КАК СчетаКонтрагентыИДоговоры
	               |		ЛЕВОЕ СОЕДИНЕНИЕ СчетаДокументыРасчетов КАК СчетаДокументыРасчетов
	               |		ПО СчетаКонтрагентыИДоговоры.Счет = СчетаДокументыРасчетов.Ссылка
	               |ГДЕ
	               |	СчетаКонтрагентыИДоговоры.ЕстьДоговор
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Счета.Счет
	               |ИЗ
	               |	Счета КАК Счета
	               |ГДЕ
	               |	Счета.ЕстьДокументРасчетов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Счета.Счет
	               |ИЗ
	               |	Счета КАК Счета
	               |ГДЕ
	               |	НЕ Счета.ЕстьДокументРасчетов";
	
	Запрос.УстановитьПараметр("ИсключенныеСчета", 					ИсключенныеСчета);
	Запрос.УстановитьПараметр("ВидСубконтоКонтрагенты", 			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	Запрос.УстановитьПараметр("ВидСубконтоДоговоры", 				ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	Запрос.УстановитьПараметр("ВидСубконтоДокументРасчетов", 		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	
	Счета = Новый Структура("СчетаСДокументомРасчетов, СчетаБезДокументаРасчетов", Новый СписокЗначений, Новый СписокЗначений);
	
	Результат = Запрос.ВыполнитьПакет();
	Если Результат.Количество() = 5 Тогда
		
		Счета.Вставить("СчетаСДокументомРасчетов", Результат[3].Выгрузить().ВыгрузитьКолонку("Счет"));
		Счета.Вставить("СчетаБезДокументаРасчетов", Результат[4].Выгрузить().ВыгрузитьКолонку("Счет"));
		
	КонецЕсли;

	Возврат Счета;
	
КонецФункции

// Возвращает значение искомого поля из элемента расшифровки.
//
Функция ПолучитьЗначениеРасшифровки(Элемент, ИмяПоля)
	
	Если ТипЗнч(Элемент) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		// Ищем поля в текущем элементе
		Поле = Элемент.ПолучитьПоля().Найти(ИмяПоля);
		Если Поле <> Неопределено Тогда
			// Возвращаем значение найденного поля
			Возврат Поле.Значение;
		КонецЕсли;
	КонецЕсли;
	
	// Если поле не нашлось, или текущий элемент не содержит полей
	// ищем поля среди родителей элемента (вышестоящие группировки).
	Родители  = Элемент.ПолучитьРодителей();
	Если Родители.Количество() > 0 Тогда
		
		Для Каждого Родитель Из Родители Цикл
			// Вызываем рекурсивный поиск поля
			ЗначениеРасшифровки = ПолучитьЗначениеРасшифровки(Родитель, ИмяПоля);
			
			Если ЗначениеРасшифровки <> Неопределено Тогда
				Возврат ЗначениеРасшифровки;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	// Если ничего не нашлось
	Возврат Неопределено;
	
КонецФункции

Функция ИсключаемыеСчетаУчетаТоваров()
	
	Счета_1011 = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.СпецоснасткаИСпецодеждаВЭксплуатации);
	СчетаИсключаемые = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(Счета_1011);
	СчетаИсключаемые.Добавить(ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку);            // 10.07
	СчетаИсключаемые.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ); // 41.11
	СчетаИсключаемые.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ); // 41.12
	СчетаИсключаемые.Добавить(ПланыСчетов.Хозрасчетный.КорректировкаТоваровПрошлогоПериода);        // 41.К
	
	Возврат СчетаИсключаемые;
	
КонецФункции

#КонецОбласти
