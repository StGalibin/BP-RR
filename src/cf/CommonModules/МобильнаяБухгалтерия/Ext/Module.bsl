////////////////////////////////////////////////////////////////////////////////
// Процедуры обмена данными с мобильной бухгалтерией.

#Область ПрограмныйИнтерфейс

//Разбирает сообщение обмена, полученное из мобильной бухгалтерии
//загружает полученные данные и записывает объекты (проводит документы).
//
// Параметры:
//   УзелОбменаКод              - Строка, код узла обмена мобильного устройства.
//   УзелОбменаИмя              - Строка, имя мобильного устройства. Используется при создании нового узла обмена.
//   ДанныеМобильногоПриложения - ХранилищеЗначения, содержащее xml с данными обмена.
//   СообщениеОбОшибке          - Строка, возвращает текст сообщения об ошибке.
//
// Возвращаемое значение:
//   Булево - результат загрузки - "Истина", если загрузка прошла успешно.
//
Функция ЗагрузитьДанныеМобильногоПриложения(УзелОбменаКод, УзелОбменаИмя, ДанныеМобильногоПриложения, СообщениеОбОшибке) Экспорт
	
	//Сформируем структуру параметров синхронизации
	СтруктураПараметров = СоздатьСтруктуруПараметровСинхронизации();
	СтруктураПараметров.УзелОбменаКод = УзелОбменаКод;
	СтруктураПараметров.УзелОбменаИмя = УзелОбменаИмя;
	
	//Найдем узлы обмена. Если это первая синхронизация, создадим узлы обмена
	НайтиСоздатьУзлыОбмена(СтруктураПараметров);
	
	СообщениеОбменаСтрокаXML = ДанныеМобильногоПриложения.Получить();
	Если СообщениеОбменаСтрокаXML <> Неопределено Тогда
		РазобратьПолученноеСообщение(СтруктураПараметров, СообщениеОбменаСтрокаXML, СообщениеОбОшибке);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

//Собирает сообщение обмена для отправки в мобильную бухгалтерию.
//
// Параметры:
//   УзелОбменаКод              - Строка, код узла обмена мобильного устройства.
//   УзелОбменаИмя              - Строка, имя мобильного устройства. Используется при создании нового узла обмена.
//   СообщениеОбОшибке          - Строка, возвращает текст сообщения об ошибке.
//
// Возвращаемое значение:
//   ХранилищеЗначения - хранилище, содержащее xml с данными обмена.
//
Функция ВыгрузитьДанныеВМобильноеПриложение(УзелОбменаКод, УзелОбменаИмя, СообщениеОбОшибке) Экспорт
	
	//Сформируем структуру параметров синхронизации
	СтруктураПараметров = СоздатьСтруктуруПараметровСинхронизации();
	СтруктураПараметров.УзелОбменаКод = УзелОбменаКод;
	СтруктураПараметров.УзелОбменаИмя = УзелОбменаИмя;
	
	//Найдем узлы обмена. Если это первая синхронизация, создадим узлы обмена
	НайтиСоздатьУзлыОбмена(СтруктураПараметров);
	
	СообщениеОбменаСтрокаXML = ПодготовитьСообщениеВыгрузки(СтруктураПараметров);
	
	ХранилищеДляОтправки = Новый ХранилищеЗначения(СообщениеОбменаСтрокаXML, Новый СжатиеДанных(9));
	
	Возврат ХранилищеДляОтправки;
	
КонецФункции

Функция СписокРеквизитовНаселенныйПункт(ИдентификаторУлицы) Экспорт
	РеквизитыНаселенногоПункта = УправлениеКонтактнойИнформациейСлужебный.СписокРеквизитовНаселенныйПункт(ИдентификаторУлицы, "ФИАС");
	
	ХранилищеДляОтправки = Новый ХранилищеЗначения(РеквизитыНаселенногоПункта, Новый СжатиеДанных(9));
	
	Возврат ХранилищеДляОтправки;
КонецФункции

Функция УстановитьИдентификаторыНаселенногоПункта(Знач ЧастиАдреса) Экспорт
	АдресныйКлассификаторСлужебный.УстановитьИдентификаторыНаселенногоПункта(ЧастиАдреса);
	
	ХранилищеДляОтправки = Новый ХранилищеЗначения(ЧастиАдреса, Новый СжатиеДанных(9));
	
	Возврат ХранилищеДляОтправки;
КонецФункции

Функция РезультатПроверкиАдресовXDTOПоКлассификатору(АдресXDTO) Экспорт
	
	СтруктураПараметров = Новый Структура("ФорматАдреса, Адрес", "ФИАС", АдресXDTO);
	
	Результат = АдресныйКлассификаторСлужебный.РезультатПроверкиАдресовПоКлассификатору(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтруктураПараметров));
	
	ХранилищеРезультата = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
	
	Возврат ХранилищеРезультата;
КонецФункции

Функция РезультатПроверкиАдресовСтруктуройПоКлассификатору(СтруктураАдреса) Экспорт
	
	АдресXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.v8.1c.ru/ssl/contactinfo", "АдресРФ"));
	
	ЗаполнитьXDTOИзСтруктуры(АдресXDTO, "", СтруктураАдреса);
	
	СтруктураПараметров = Новый Структура("ФорматАдреса, Адрес", "ФИАС", АдресXDTO);
	
	Результат = АдресныйКлассификаторСлужебный.РезультатПроверкиАдресовПоКлассификатору(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтруктураПараметров));
	
	ХранилищеРезультата = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
	
	Возврат ХранилищеРезультата;
КонецФункции


Функция ВариантыАвтоподбора(СтрокаПоиска, ИдентификаторАдресногоОбъекта, Параметры) Экспорт
	
	Результат = АдресныйКлассификаторСлужебный.ВариантыАвтоподбора(СтрокаПоиска, ИдентификаторАдресногоОбъекта, Параметры.Уровни, Параметры.ДополнительныеПараметры);
	
	ХранилищеРезультата = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
	
	Возврат ХранилищеРезультата;
КонецФункции

Функция СписокДомов(СтрокаПоиска, ИдентификаторАдресногоОбъекта) Экспорт
	
	Результат = АдресныйКлассификаторСлужебный.СписокДомов(ИдентификаторАдресногоОбъекта, СтрокаПоиска);
	
	ХранилищеРезультата = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
	
	Возврат ХранилищеРезультата;
КонецФункции

Функция ДанныеЕдиныхГосРеестровПоИНН(ИННОбъекта, ОписаниеОшибки) Экспорт
	
	ИННОбъекта = СокрП(ИННОбъекта);
	
	ЭтоЮрЛицо = (СтрДлина(ИННОбъекта) = 10);
	РезультатПроверки = ИдентификационныеНомераНалогоплательщиков.ПроверитьСоответствиеТребованиямИНН(ИННОбъекта, ЭтоЮрЛицо);
	
	Если РезультатПроверки.СоответствуетТребованиям Тогда
		
		Если РезультатПроверки.ЭтоЮрЛицо Тогда
			РеквизитыОрганизации = ДанныеЕдиныхГосРеестров.РеквизитыЮридическогоЛицаПоИНН(ИННОбъекта);
		Иначе
			РеквизитыОрганизации = ДанныеЕдиныхГосРеестров.РеквизитыПредпринимателяПоИНН(ИННОбъекта);
		КонецЕсли;
		
		РеквизитыОрганизации.Вставить("ЭтоЮридическоеЛицо", РезультатПроверки.ЭтоЮрЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
		
		Если ЗначениеЗаполнено(РеквизитыОрганизации.ОписаниеОшибки) Тогда
			ОписаниеОшибки = РеквизитыОрганизации.ОписаниеОшибки;
		Иначе
			Возврат Новый ХранилищеЗначения(РеквизитыОрганизации, Новый СжатиеДанных(9));
		КонецЕсли;
		
	Иначе
		
		ОписаниеОшибки = РезультатПроверки.ОписаниеОшибки;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ОтправитьДекларациюНаEmail(СсылкаНаОтчет, ОписаниеОшибки) Экспорт
	Перем АдресПараметровПроксиВоВременномХранилище, ПараметрыСформированногоОтчета, СообщениеОбОшибке;
	
	Если НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		ОписаниеОшибки = НСтр("ru = 'В базе данных, выполняющей подготовку декларации, не включено разделение данных.'");
		Возврат Ложь;
	КонецЕсли;
	
	СохраненныйОтчет = ДесериализоватьСсылкуНаДокумент(СсылкаНаОтчет, "РегламентированныйОтчет");
	
	Объект = СохраненныйОтчет.ПолучитьОбъект();
	
	Если Объект = Неопределено Тогда // Регламентированный отчет не синхронизирован с БП
		ЗарегистрироватьОшибкуОбмена(
			НСтр("ru = 'При отправке декларации на e-mail из мобильной бухгалтерии передана некорректная ссылка на сохраненный регламентированный отчет'"),
			НСтр("ru = 'Получение декларации на e-mail из мобильной бухгалтерии'"));
		
		ОписаниеОшибки = НСтр("ru = 'Не удалось выгрузить декларацию из мобильного приложения.'");
		
		Возврат Ложь;
	КонецЕсли;
	
	РезультатВыгрузки = ИнтерфейсыВзаимодействияБРО.ВыгрузитьРегламентированныйОтчет(СохраненныйОтчет);
	
	Если НЕ РезультатВыгрузки.ОтчетВыгружен Тогда
		ЗарегистрироватьОшибкиОбмена(РезультатВыгрузки.Ошибки,
			НСтр("ru = 'Получение декларации на e-mail из мобильной бухгалтерии'"));
		
		ОписаниеОшибки = НСтр("ru = 'Декларация не прошла форматно-логический контроль.'");
		
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЭтоАдресВременногоХранилища(РезультатВыгрузки.АдресХранилищаТекстаВыгрузки) Тогда
		ЗарегистрироватьОшибкуОбмена(
			НСтр("ru = 'Неверный формат адреса хранилища при формировани файла выгрузки налоговой декларации'"),
			НСтр("ru = 'Получение декларации на e-mail из мобильной бухгалтерии'"));
		
		ОписаниеОшибки = НСтр("ru = 'Неверный формат адреса хранилища при формировани файла выгрузки налоговой декларации.'");
		
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетностьВызовСервера.ПроверитьВозможностьВыводаМашиночитаемойФормыЧерезВебСервис(АдресПараметровПроксиВоВременномХранилище) Тогда
		ЗарегистрироватьОшибкуОбмена(
			НСтр("ru = 'Недоступен сервис печати машиночитаемых бланков'"),
			НСтр("ru = 'Получение декларации на e-mail из мобильной бухгалтерии'"));
		
		ОписаниеОшибки = НСтр("ru = 'Недоступен сервис печати машиночитаемых бланков.'");
		
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыОтправки = Новый Структура;
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	КонтактнаяИнформацияПользователя = УправлениеКонтактнойИнформацией.ЗначенияКонтактнойИнформацииОбъекта(
		ТекущийПользователь, Перечисления["ТипыКонтактнойИнформации"].АдресЭлектроннойПочты);
		
	Если КонтактнаяИнформацияПользователя.Количество() > 0 Тогда
		ПолучательСообщения = Новый Структура;
		ПолучательСообщения.Вставить("Представление",   ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийПользователь, "Наименование"));
		ПолучательСообщения.Вставить("Адрес", КонтактнаяИнформацияПользователя[0].Значение);
		
		ПараметрыОтправки.Вставить("Кому", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПолучательСообщения));
	Иначе
		ЗарегистрироватьОшибкуОбмена(
			НСтр("ru = 'Не удалось определить адрес электронной почты'"),
			НСтр("ru = 'Получение декларации на e-mail из мобильной бухгалтерии'"));
		
		ОписаниеОшибки = НСтр("ru = 'Недоступен сервис печати машиночитаемых бланков.'");
		
		Возврат Ложь;
	КонецЕсли;
	
	Тема = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1 за %2'"),
		Объект.НаименованиеОтчета,
		СокрЛП(Объект.ПредставлениеПериода));
	
	Тело = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Во вложении файл PDF с печатной формой отчета %1 за %2 и XML для сдачи декларации в электронном виде.'"),
		Объект.НаименованиеОтчета,
		СокрЛП(Объект.ПредставлениеПериода));
		
	ПараметрыОтправки.Вставить("Тема", Тема);
	ПараметрыОтправки.Вставить("Тело", Тело);
	
	// Подготавливаем файл для формирования машиночитаемого бланка
	
	ТекстВыгрузки = ПолучитьИзВременногоХранилища(РезультатВыгрузки.АдресХранилищаТекстаВыгрузки);
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	
	ФайлВыгрузки = Новый ТекстовыйДокумент;
	ФайлВыгрузки.УстановитьТекст(ТекстВыгрузки);
	ФайлВыгрузки.Записать(ИмяВременногоФайла, РезультатВыгрузки.КодировкаФайлаВыгрузки);
	
	ДвоичныеДанныеXML = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	Вложения = Новый Соответствие;
	Вложения.Вставить(РезультатВыгрузки.ИмяФайла+".xml", ДвоичныеДанныеXML);
	
	ПараметрыОтправки.Вставить("Вложения", Вложения);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	АдресФайлаВыгрузкиВоВременномХранилище = РегламентированнаяОтчетностьВызовСервера.ПоместитьФайлВыгрузкиВоВременноеХранилищеНаСервере(
			ТекстВыгрузки,
			Строка(Новый УникальныйИдентификатор),
			РезультатВыгрузки.КодировкаФайлаВыгрузки);

	
	ФайлВыгрузкиВоВременномХранилище = Новый Структура;
	ФайлВыгрузкиВоВременномХранилище.Вставить("КодировкаФайлаВыгрузки", РезультатВыгрузки.КодировкаФайлаВыгрузки);
	ФайлВыгрузкиВоВременномХранилище.Вставить("ИмяФайлаВыгрузки", РезультатВыгрузки.ИмяФайла);
	ФайлВыгрузкиВоВременномХранилище.Вставить("АдресФайлаВыгрузкиВоВременномХранилище", АдресФайлаВыгрузкиВоВременномХранилище);
	
	ИмяФормыОтчета = РегламентированнаяОтчетностьВызовСервера.ПолныйПутьКФорме(СохраненныйОтчет.ИсточникОтчета, СохраненныйОтчет.ВыбраннаяФорма);
	
	ВывестиМашиночитаемуюФормуЧерезВебСервис = РегламентированнаяОтчетностьВызовСервера.ВывестиМашиночитаемуюФормуЧерезВебСервис(
			ИмяФормыОтчета, Неопределено, ФайлВыгрузкиВоВременномХранилище,
			ПараметрыСформированногоОтчета, АдресПараметровПроксиВоВременномХранилище);
			
	Если НЕ ВывестиМашиночитаемуюФормуЧерезВебСервис Тогда
		ЗарегистрироватьОшибкуОбмена(
			НСтр("ru = 'При формировании машиночитаемого бланка произошла ошибка вызова сервиса'"),
			НСтр("ru = 'Получение декларации на e-mail из мобильной бухгалтерии'"));
		
		ОписаниеОшибки = НСтр("ru = 'Недоступен сервис печати машиночитаемых бланков.'");
		
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыСформированногоОтчета.Вставить("АдресПараметровПроксиВоВременномХранилище", АдресПараметровПроксиВоВременномХранилище);
	
	ОтправитьМашиночитаемуюФормуНаEmail = РегламентированнаяОтчетностьВызовСервера.ОтправитьМашиночитаемуюФормуНаEmail(ПараметрыОтправки, ПараметрыСформированногоОтчета, СообщениеОбОшибке);
	
	Если НЕ ОтправитьМашиночитаемуюФормуНаEmail Тогда
		
		ЗарегистрироватьОшибкуОбмена(
			НСтр("ru = 'При отправке машиночитаемого бланка произошла ошибка вызова сервиса'"),
			НСтр("ru = 'Получение декларации на e-mail из мобильной бухгалтерии'"));
			
		ОписаниеОшибки = СообщениеОбОшибке;
			
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура НайтиСоздатьУзлыОбмена(СтруктураПараметров)
	
	СтруктураПараметров.ЦентральныйУзел  = ПланыОбмена.МобильнаяБухгалтерия.ЭтотУзел();
	СписокРеквизитовУзла                 = "Код, ДатаНачалаРаботы, Организация";
	РеквизитыУзла                        = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураПараметров.ЦентральныйУзел, СписокРеквизитовУзла);
	ЦентральныйУзелКод                   = РеквизитыУзла.Код;
	СтруктураПараметров.Организация      = РеквизитыУзла.Организация;
	СтруктураПараметров.ДатаНачалаРаботы = РеквизитыУзла.ДатаНачалаРаботы;
	
	Если НЕ ЗначениеЗаполнено(ЦентральныйУзелКод) Тогда
		
		УзелОбъект = СтруктураПараметров.ЦентральныйУзел.ПолучитьОбъект();
		УзелОбъект.ОбменДанными.Загрузка = Истина;
		УзелОбъект.Код = "001";
		УзелОбъект.Наименование = "Центральный";
		УзелОбъект.Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
		УзелОбъект.ДатаНачалаРаботы = НачалоКвартала(ТекущаяДата());
		УзелОбъект.Записать();
		
		СтруктураПараметров.Организация      = УзелОбъект.Организация;
		СтруктураПараметров.ДатаНачалаРаботы = УзелОбъект.ДатаНачалаРаботы;
	КонецЕсли;
	
	СтруктураПараметров.УзелОбмена = ПланыОбмена.МобильнаяБухгалтерия.НайтиПоКоду(СтруктураПараметров.УзелОбменаКод);
	Если СтруктураПараметров.УзелОбмена.Пустая() Тогда
		НовыйУзел = ПланыОбмена.МобильнаяБухгалтерия.СоздатьУзел();
		НовыйУзел.Код                  = СтруктураПараметров.УзелОбменаКод;
		НовыйУзел.Наименование         = СтруктураПараметров.УзелОбменаИмя;
		НовыйУзел.Записать();
		СтруктураПараметров.УзелОбмена = НовыйУзел.Ссылка;
		
		ПланыОбмена.ЗарегистрироватьИзменения(СтруктураПараметров.УзелОбмена);
	КонецЕсли;
	
КонецПроцедуры

Функция СоздатьСтруктуруПараметровСинхронизации()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("УзелОбмена",       Неопределено);
	СтруктураПараметров.Вставить("УзелОбменаКод",    "");
	СтруктураПараметров.Вставить("УзелОбменаИмя",    "");
	СтруктураПараметров.Вставить("ЦентральныйУзел",  Неопределено);
	СтруктураПараметров.Вставить("Организация",      Неопределено);
	СтруктураПараметров.Вставить("ДатаНачалаРаботы", '00010101');
	СтруктураПараметров.Вставить("КолВыгружено",     0);
	
	Возврат СтруктураПараметров;

КонецФункции

Функция СериализоватьСсылку(Ссылка)
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		СсылкаСериализованная = Строка(Ссылка.УникальныйИдентификатор());
	Иначе
		СсылкаСериализованная = "";
	КонецЕсли;
	
	Возврат СсылкаСериализованная;
	
КонецФункции

Функция ДесериализоватьСсылкуНаСправочник(СсылкаСериализованная, ИмяОбъекта)
	
	Если СсылкаСериализованная = "" ИЛИ СсылкаСериализованная = Неопределено Тогда
		Ссылка = Справочники[ИмяОбъекта].ПустаяСсылка();
	Иначе
		Идентификатор = Новый УникальныйИдентификатор(СсылкаСериализованная);
		Ссылка = Справочники[ИмяОбъекта].ПолучитьСсылку(Идентификатор);
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

Функция СоздатьКлючевыеСвойстваПоСсылке(Ссылка, ИмяОбъекта)
	
	КлючевыеСвойства = СоздатьОбъектXDTO(ИмяОбъекта + "КлючевыеСвойства");
	КлючевыеПоля = Новый Массив;
	Для Каждого Свойство Из КлючевыеСвойства.Тип().Свойства Цикл
		Если Свойство.Имя = "Ссылка" Тогда
			Продолжить;
		КонецЕсли;
		КлючевыеПоля.Добавить(Свойство.Имя);
	КонецЦикла;
	КлючевыеСвойства.Ссылка = СериализоватьСсылку(Ссылка);
	
	ЗаполнитьЗначенияСвойств(КлючевыеСвойства, ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, СтрСоединить(КлючевыеПоля,",")));
	
	Возврат КлючевыеСвойства;
	
КонецФункции

Функция ПолучитьСсылкуНаСправочникПоКлючевымСвойствам(КлючевыеСвойства, ИмяОбъекта)
	
	МенеджерОбъекта = Справочники[ИмяОбъекта];
	
	Ссылка = ДесериализоватьСсылкуНаСправочник(КлючевыеСвойства.Ссылка, ИмяОбъекта);
	Если Ссылка.Пустая() Тогда
		Возврат Ссылка;
	КонецЕсли;
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Результат = Неопределено;
		Если ИмяОбъекта = "ДополнительныеУсловия" Тогда
			Результат = МенеджерОбъекта.НайтиПоРеквизиту("ИмяМакета", КлючевыеСвойства.ИмяМакета);
		ИначеЕсли ИмяОбъекта = "КлассификаторЕдиницИзмерения"
			ИЛИ ИмяОбъекта = "СтраныМира" Тогда
			Если ЗначениеЗаполнено(КлючевыеСвойства.Код) Тогда
				Результат = МенеджерОбъекта.НайтиПоКоду(КлючевыеСвойства.Код);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Результат) Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

Функция ЕстьКлючевыеСвойства(ОбъектXDTOКлючевыеСвойства)
	
	ЕстьКлючевыеСвойства = Ложь;
	Попытка
		ЕстьКлючевыеСвойства = ОбъектXDTOКлючевыеСвойства.Свойства().Количество()> 0;
	Исключение
	КонецПопытки;
	
	Возврат ЕстьКлючевыеСвойства;
	
КонецФункции

Функция ДесериализоватьСсылкуНаДокумент(СсылкаСериализованная, ИмяОбъекта)
	
	Если СсылкаСериализованная = "" ИЛИ СсылкаСериализованная = Неопределено Тогда
		Ссылка = Документы[ИмяОбъекта].ПустаяСсылка();
	Иначе
		Идентификатор = Новый УникальныйИдентификатор(СсылкаСериализованная);
		Ссылка = Документы[ИмяОбъекта].ПолучитьСсылку(Идентификатор);
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

Функция СоздатьОбъектXDTO(ТипОбъекта)
	
	URIПространстваИмен = "http://www.1c.ru/EA/MobileAccounting";
	
	Возврат ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URIПространстваИмен, ТипОбъекта));
	
КонецФункции

Процедура ПроверитьУстановитьУчетнуюПолитику(Организация, Дата)
	
	Если НастройкиУчета.КлючЗаписиДействующейУчетнойПолитики("НастройкиСистемыНалогообложения", Организация, Дата) = Неопределено Тогда
		
		ДанныеЗаполнения = Новый Структура();
		ДанныеЗаполнения.Вставить("Организация", Организация);
		ДанныеЗаполнения.Вставить("Период", НачалоГода(Дата));
		ДанныеЗаполнения.Вставить("СистемаНалогообложения", Перечисления.СистемыНалогообложения.Упрощенная);
		ДанныеЗаполнения.Вставить("ОбъектНалогообложенияУСН", Перечисления.ОбъектыНалогообложенияПоУСН.Доходы);
		НастройкиУчета.УстановкаПараметровУчетнойПолитикиПоУмолчанию(ДанныеЗаполнения, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОсновнойДоговорКонтрагента(Объект, Организация, Контрагент, ВалютаВзаиморасчетов)
	Если НЕ ЗначениеЗаполнено(Организация)
		ИЛИ НЕ ЗначениеЗаполнено(Контрагент) Тогда
		// Не заполнены ключевые свойства
		// В этом случае ничего не делаем.
		Возврат Неопределено;
	КонецЕсли;
	
	ГоловнаяОрганизация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Организация);
	
	// Найдем договор по умолчанию для данного вида договора
	ДополнительныеПараметры = Новый Структура();
	Если ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
		ДополнительныеПараметры.Вставить("ВалютаВзаиморасчетов", Новый Структура("ЗначениеОтбора", ВалютаВзаиморасчетов));
	КонецЕсли;
	
	ВидДоговора = РаботаСДоговорамиКонтрагентовБП.ВидДоговораПоОбъекту(Объект);
	СписокВидовДоговоров = Новый СписокЗначений();
	СписокВидовДоговоров.Добавить(ВидДоговора);
	
	ДоговорКонтрагента = Неопределено;
	РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(ДоговорКонтрагента, Контрагент, ГоловнаяОрганизация, СписокВидовДоговоров, ДополнительныеПараметры);
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Возврат ДоговорКонтрагента;
	Иначе
		// Проверим, что основной договор данного вида существует, но не подходит по каким-то другим свойствам
		// (в этом случае он не будет определен в РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента).
		// Если основной договор существует, то ничего не делаем.
		// Если не существует, то создаем новый договор и назначаем его основным.
		
		Запрос = Новый Запрос();
		Запрос.Параметры.Вставить("Организация", ГоловнаяОрганизация);
		Запрос.Параметры.Вставить("Контрагент",  Контрагент);
		Запрос.Параметры.Вставить("ВидДоговора", ВидДоговора);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ОсновныеДоговорыКонтрагента.Договор
		|ИЗ
		|	РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
		|ГДЕ
		|	ОсновныеДоговорыКонтрагента.Организация = &Организация
		|	И ОсновныеДоговорыКонтрагента.Контрагент = &Контрагент
		|	И ОсновныеДоговорыКонтрагента.ВидДоговора = &ВидДоговора";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			// Договор в ОсновныеДоговораКонтрагента установлен, новый договор не создаем, что-бы не испортить пользовательские данные
			Возврат Выборка.Договор;
		КонецЕсли;
		
		// Основной договор не установлен - создадим новый договор и установим его основным.
		ЗначенияЗаполнения = Новый Структура();
		ЗначенияЗаполнения.Вставить("ВидДоговора", ВидДоговора);
		ЗначенияЗаполнения.Вставить("Организация", ГоловнаяОрганизация);
		ЗначенияЗаполнения.Вставить("Владелец",    Контрагент);
		Если ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
			ЗначенияЗаполнения.Вставить("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
		КонецЕсли;
		ПараметрыСозданияДоговора = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
		Возврат РаботаСДоговорамиКонтрагентовБПВызовСервера.СоздатьОсновнойДоговорКонтрагента(ПараметрыСозданияДоговора);
			
	КонецЕсли;
КонецФункции

Функция РегламентированныйОтчетПоддерживаетсяВМобильнойБухгалтерии(ИсточникОтчета, ИмяФормыОтчета)
	
	ПоддерживаемыеФормы = Новый Соответствие;
	
	ПоддерживаемыеФормы.Вставить(ВРег("РегламентированныйОтчетУСН.ФормаОтчета2015Кв1"), Истина);
	
	Возврат ПоддерживаемыеФормы[ВРег(ИсточникОтчета + "." + ИмяФормыОтчета)] = Истина;
	
КонецФункции

Функция ЗарегистрироватьОшибкиОбмена(Ошибки, ИмяСобытия)
	
	Для каждого Ошибка Из Ошибки Цикл
		ЗарегистрироватьОшибкуОбмена(Ошибка, ИмяСобытия);
	КонецЦикла;
	
КонецФункции

Функция ЗарегистрироватьОшибкуОбмена(ТекстОшибки, ИмяСобытия)
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, Метаданные.WebСервисы.MobileAccounting,, ТекстОшибки);
	
КонецФункции

// Устанавливает в XDTO адресе значение по XPath.
//
Процедура УстановитьXDTOРеквизитОбъекта(ОбъектXDTO, ПутьXPath, Значение)
	
	Если Не ЗначениеЗаполнено(Значение) Тогда 
		Возврат;
	КонецЕсли;
	
	// Части XPath
	ЧастиПути  = СтрЗаменить(ПутьXPath, "/", Символы.ПС);
	ЧастейПути = СтрЧислоСтрок(ЧастиПути);
	
	ВедущийОбъект = ОбъектXDTO;
	Объект        = ОбъектXDTO;
	
	Для Позиция = 1 По ЧастейПути Цикл
		ЧастьПути = СтрПолучитьСтроку(ЧастиПути, Позиция);
		Если ЧастейПути = 1 Тогда
			Прервать;
		КонецЕсли;
		
		Свойство = Объект.Свойства().Получить(ЧастьПути);
		Если Не Объект.Установлено(Свойство) Тогда
			Объект.Установить(Свойство, ФабрикаXDTO.Создать(Свойство.Тип));
		КонецЕсли;
		ВедущийОбъект = Объект;
		Объект        = Объект[ЧастьПути];
	КонецЦикла;
	
	Если Объект <> Неопределено Тогда
		Объект[ЧастьПути] =  Значение;
		
	ИначеЕсли ВедущийОбъект <> Неопределено Тогда
		ВедущийОбъект[ЧастьПути] =  Значение;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает в XDTO адресе значение по XPath.
//
Процедура ДобавитьXDTOРеквизитСписка(ОбъектXDTO, ИмяСвойстваСписка, ЗначенияАтрибутов)
	Свойство = ОбъектXDTO.Свойства().Получить(ИмяСвойстваСписка);
	ЭлементСписка = ОбъектXDTO.ПолучитьСписок(Свойство).Добавить(ФабрикаXDTO.Создать(Свойство.Тип));
	
	Для Каждого КлючЗначение Из ЗначенияАтрибутов Цикл
		Если ТипЗнч(КлючЗначение.Значение) = Тип("Структура") Тогда
			ЗаполнитьXDTOИзСтруктуры(ЭлементСписка, КлючЗначение.Ключ, КлючЗначение.Значение);
		ИначеЕсли ТипЗнч(КлючЗначение.Значение) = Тип("Массив") Тогда 
			Для каждого ЭлементМассиваАдреса Из КлючЗначение.Значение Цикл
				ДобавитьXDTOРеквизитСписка(ЭлементСписка, КлючЗначение.Ключ, ЭлементМассиваАдреса);
			КонецЦикла; 
		Иначе
			УстановитьXDTOРеквизитОбъекта(ЭлементСписка, КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьXDTOИзСтруктуры(АдресXDTO, Путь, СтруктураАдреса)
	Для каждого ЭлементАдреса Из СтруктураАдреса Цикл
		ПолныйПуть = Путь + ?(ПустаяСтрока(Путь), "", "/") + ЭлементАдреса.Ключ;
		
		Если ЭлементАдреса.Ключ = "СвРайМО" И АдресXDTO.СвРайМО = Неопределено Тогда
			АдресXDTO.СвРайМО = ФабрикаXDTO.Создать(АдресXDTO.Тип().Свойства.Получить("СвРайМО").Тип);
		КонецЕсли;
		
		Если ТипЗнч(ЭлементАдреса.Значение) = Тип("Структура") Тогда
			ЗаполнитьXDTOИзСтруктуры(АдресXDTO, ПолныйПуть, ЭлементАдреса.Значение);
		ИначеЕсли ТипЗнч(ЭлементАдреса.Значение) = Тип("Массив") Тогда 
			Для каждого ЭлементМассиваАдреса Из ЭлементАдреса.Значение Цикл
				ДобавитьXDTOРеквизитСписка(АдресXDTO, ПолныйПуть, ЭлементМассиваАдреса);
			КонецЦикла; 
		Иначе
			УстановитьXDTOРеквизитОбъекта(АдресXDTO, ПолныйПуть, ЭлементАдреса.Значение);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ЗагрузитьДанные

Процедура РазобратьПолученноеСообщение(СтруктураПараметров, СообщениеОбменаСтрокаXML, СообщениеОбОшибке)
	Перем ДанныеРегистрацииВНалоговомОргане;
	
	ДатаНачалаРаботы = СтруктураПараметров.ДатаНачалаРаботы;
	Организация      = СтруктураПараметров.Организация;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СообщениеОбменаСтрокаXML);
	
	ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
	ЧтениеСообщения.НачатьЧтение(ЧтениеXML);
	
	URIПространстваИмен = "http://www.1c.ru/EA/MobileAccounting";
	
	ПроведениеДокументов = Новый ТаблицаЗначений;
	ПроведениеДокументов.Колонки.Добавить("Ссылка");
	ПроведениеДокументов.Колонки.Добавить("Дата");
	ПроведениеДокументов.Колонки.Добавить("Провести");
	ПроведениеДокументов.Колонки.Добавить("Удаление");
	ПроведениеДокументов.Колонки.Добавить("ЗаполнитьСчета");
	
	ЗаполнениеОтчетности = Новый ТаблицаЗначений;
	ЗаполнениеОтчетности.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.РегламентированныйОтчет"));
	ЗаполнениеОтчетности.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ЗаполнениеОтчетности.Колонки.Добавить("ВидОтчета", ОбщегоНазначения.ОписаниеТипаСтрока(255));
	ЗаполнениеОтчетности.Колонки.Добавить("ДатаНачала", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ЗаполнениеОтчетности.Колонки.Добавить("ДатаОкончания", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ЗаполнениеОтчетности.Колонки.Добавить("ДанныеОтчета");
	
	Пока ЧтениеXML.URIПространстваИмен = URIПространстваИмен Цикл
		
		ТипОбъектаXDTO = ФабрикаXDTO.Тип(URIПространстваИмен, ЧтениеXML.Имя);
		ОбъектXDTO     = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипОбъектаXDTO);
		
		Если ОбъектXDTO.Тип().Имя = "Организация" Тогда
			
			ЗагрузитьОрганизацию(ОбъектXDTO, СтруктураПараметров.УзелОбмена, Организация, ДанныеРегистрацииВНалоговомОргане);
			
		ИначеЕсли ОбъектXDTO.Тип().Имя = "Контрагент" Тогда
			
			ЗагрузитьКонтрагента(ОбъектXDTO, СтруктураПараметров.УзелОбмена);
			
		ИначеЕсли ОбъектXDTO.Тип().Имя = "БанковскийСчет" Тогда
			
			ЗагрузитьБанковскийСчет(ОбъектXDTO, СтруктураПараметров.УзелОбмена);
			
		ИначеЕсли ОбъектXDTO.Тип().Имя = "Банк" Тогда
			
			ЗагрузитьБанк(ОбъектXDTO, СтруктураПараметров.УзелОбмена);
			
		ИначеЕсли ОбъектXDTO.Тип().Имя = "НастройкаОбменаСБанками" Тогда
			
			ЗагрузитьНастройкуОбменаСБанками(ОбъектXDTO, СтруктураПараметров.УзелОбмена);
			
		ИначеЕсли ОбъектXDTO.Тип().Имя = "Номенклатура" Тогда
			
			ЗагрузитьНоменклатуру(ОбъектXDTO, СтруктураПараметров.УзелОбмена);
			
		ИначеЕсли ОбъектXDTO.Тип().Имя = "ЕдиницаИзмерения" Тогда
			
			ЗагрузитьЕдиницуИзмерения(ОбъектXDTO, СтруктураПараметров.УзелОбмена);
			
		ИначеЕсли ОбъектXDTO.Тип().Имя = "ДополнительныеУсловия" Тогда
			
			ЗагрузитьДополнительныеУсловия(ОбъектXDTO, СтруктураПараметров.УзелОбмена);
			
		ИначеЕсли ОбъектXDTO.Тип().Имя = "ПрисоединенныйФайлОрганизация" Тогда
			
			ЗагрузитьОрганизацииПрисоединенныеФайлы(ОбъектXDTO, СтруктураПараметров.УзелОбмена);
			
		ИначеЕсли ОбъектXDTO.Тип().Имя = "СтранаМира" Тогда
			
			ЗагрузитьСтраныМира(ОбъектXDTO, СтруктураПараметров.УзелОбмена);
			
		ИначеЕсли ОбъектXDTO.Тип().Имя = "ЗаписьПараметрыОбменСБанками" Тогда
			
			ЗагрузитьПараметрОбменаСБанками(ОбъектXDTO, СтруктураПараметров.УзелОбмена);
			
		ИначеЕсли ОбъектXDTO.Тип().Имя = "СтатусДокумента.РеализацияТоваровУслуг"
			ИЛИ ОбъектXDTO.Тип().Имя = "СтатусДокумента.СчетНаОплатуПокупателю" Тогда
			
			ЗагрузитьСтатусыДокументов(ОбъектXDTO, СтруктураПараметров.УзелОбмена);
			
		ИначеЕсли ОбъектXDTO.Тип().Имя = "ПоступлениеНаРасчетныйСчет" Тогда
			
			ЗагрузитьПоступлениеНаРасчетныйСчет(ОбъектXDTO, СтруктураПараметров.УзелОбмена, ПроведениеДокументов);
			
		ИначеЕсли ОбъектXDTO.Тип().Имя = "СписаниеСРасчетногоСчета" Тогда
			
			ЗагрузитьСписаниеСРасчетногоСчета(ОбъектXDTO, СтруктураПараметров.УзелОбмена, ПроведениеДокументов);
			
		ИначеЕсли ОбъектXDTO.Тип().Имя = "ЗаписьКУДиР" Тогда
			
			ЗагрузитьЗаписьКУДиР(ОбъектXDTO, СтруктураПараметров.УзелОбмена, ПроведениеДокументов);
			
		ИначеЕсли ОбъектXDTO.Тип().Имя = "СчетНаОплатуПокупателю" Тогда
			
			ЗагрузитьСчетНаОплатуПокупателю(ОбъектXDTO, СтруктураПараметров.УзелОбмена, ПроведениеДокументов);
			
		ИначеЕсли ОбъектXDTO.Тип().Имя = "РеализацияТоваровУслуг" Тогда
			
			ЗагрузитьРеализацияТоваровУслуг(ОбъектXDTO, СтруктураПараметров.УзелОбмена, ПроведениеДокументов);
			
		ИначеЕсли ОбъектXDTO.Тип().Имя = "ДатаНачалаРаботы" Тогда
			
			ЗагрузитьКонстантуДатаНачалаРаботы(ОбъектXDTO, ДатаНачалаРаботы);
			
		ИначеЕсли ОбъектXDTO.Тип().Имя = "УдалениеОбъекта" Тогда
			
			ЗагрузитьУдалениеОбъекта(ОбъектXDTO);
			
		ИначеЕсли ОбъектXDTO.Тип().Имя = "РегламентированныйОтчет" Тогда
			
			ЗагрузитьРегламентированныйОтчет(ОбъектXDTO, СтруктураПараметров.УзелОбмена, ЗаполнениеОтчетности);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЧтениеСообщения.ЗакончитьЧтение();
	ЧтениеXML.Закрыть();
	
	Если ДатаНачалаРаботы <> СтруктураПараметров.ДатаНачалаРаботы
		ИЛИ Организация <> СтруктураПараметров.Организация Тогда
		
		УзелОбъект = СтруктураПараметров.ЦентральныйУзел.ПолучитьОбъект();
		Если ДатаНачалаРаботы <> СтруктураПараметров.ДатаНачалаРаботы Тогда
			УзелОбъект.ДатаНачалаРаботы = ДатаНачалаРаботы;
		КонецЕсли;
		Если Организация <> СтруктураПараметров.Организация Тогда
			УзелОбъект.Организация = Организация;
		КонецЕсли;
		УзелОбъект.ОбменДанными.Загрузка = Истина;
		УзелОбъект.Записать();
		
		// Учетную политику создаем так, чтобы поддержать заполнение налоговых деклараций за прошлый год.
		ПроверитьУстановитьУчетнуюПолитику(Организация, ДобавитьМесяц(ДатаНачалаРаботы, -12));
		
	КонецЕсли;
	
	// Заполнение кода налогового органа
	Если ТипЗнч(ДанныеРегистрацииВНалоговомОргане) = Тип("Структура")
		и ЗначениеЗаполнено(Организация)
		И ЗначениеЗаполнено(ДанныеРегистрацииВНалоговомОргане.КодНалоговогоОргана) Тогда
		
		ОрганизацияОбъект = Организация.ПолучитьОбъект();
		
		СуществующаяРегистрация = Справочники.РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане(
									Организация.Ссылка,
									"",
									Организация.КодНалоговогоОргана);
		
		Если ЗначениеЗаполнено(СуществующаяРегистрация) Тогда
			ОрганизацияОбъект.РегистрацияВНалоговомОргане = СуществующаяРегистрация;
		Иначе
			ОрганизацияОбъект.РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.ПолучитьСсылку(Новый УникальныйИдентификатор);
		КонецЕсли;
		
		ЗаписатьРегистрациюВНалоговомОргане(ОрганизацияОбъект, ДанныеРегистрацииВНалоговомОргане);
		
		ОрганизацияОбъект.ОбменДанными.Загрузка    = Истина;
		ОрганизацияОбъект.ОбменДанными.Отправитель = СтруктураПараметров.УзелОбмена;
		ОрганизацияОбъект.Записать();
		
	КонецЕсли;
	
	// Заполнение регламентированных отчетов
	ЗаполнитьРегламентированныеОтчеты(СтруктураПараметров.УзелОбмена, ЗаполнениеОтчетности, СообщениеОбОшибке);
	
	//Проведение документов
	ПроведениеДокументов.Сортировать("Дата Возр");
	
	Для Каждого Документ Из ПроведениеДокументов Цикл
		Попытка
			ДокументОбъект = Документ.Ссылка.ПолучитьОбъект();
			
			Если Документ.Провести И ДокументОбъект.ПометкаУдаления Тогда
				ДокументОбъект.УстановитьПометкуУдаления(Ложь);
			КонецЕсли;
			
			Если Документ.ЗаполнитьСчета Тогда
				Отбор = Новый Структура;
				Отбор.Вставить("НеЗаполненныеРеквизиты", Истина);
				СчетаУчетаВДокументах.Заполнить(ДокументОбъект, Отбор);
			КонецЕсли;
			
			ДокументОбъект.ОбменДанными.Отправитель = СтруктураПараметров.УзелОбмена;
			
			Если Документ.Провести Тогда
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				Если Документ.Удаление Тогда
					ДокументОбъект.УстановитьПометкуУдаления(Истина);
				КонецЕсли;
			КонецЕсли;
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ЗаписьЖурналаРегистрации("ru = 'Проведение документов, загруженных из мобильной бухгалтерии'",
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки
	КонецЦикла
	
КонецПроцедуры

Процедура ЗаписатьРегистрациюВНалоговомОргане(ОрганизацияОбъект, ДанныеРегистрацииВНалоговомОргане)
	
	Если ЗначениеЗаполнено(ДанныеРегистрацииВНалоговомОргане.КодНалоговогоОргана) Тогда
		
		РеквизитыНалоговогоОргана = ДанныеГосударственныхОрганов.РеквизитыНалоговогоОрганаПоКоду(
			ДанныеРегистрацииВНалоговомОргане.КодНалоговогоОргана);
		
		РегистрацияВНалоговомОргане = ОрганизацияОбъект.РегистрацияВНалоговомОргане;
		Если ОбщегоНазначения.СсылкаСуществует(РегистрацияВНалоговомОргане) Тогда
			РегистрацияОбъект = РегистрацияВНалоговомОргане.ПолучитьОбъект();
		Иначе
			РегистрацияОбъект = Справочники.РегистрацииВНалоговомОргане.СоздатьЭлемент();
			РегистрацияОбъект.УстановитьСсылкуНового(РегистрацияВНалоговомОргане);
		КонецЕсли;
		
		РегистрацияОбъект.Владелец         = ОрганизацияОбъект.Ссылка;
		РегистрацияОбъект.Код              = ДанныеРегистрацииВНалоговомОргане.КодНалоговогоОргана;
		РегистрацияОбъект.КодРегиона       = Лев(ДанныеРегистрацииВНалоговомОргане.КодНалоговогоОргана, 2);
		
		Если НЕ ЗначениеЗаполнено(РеквизитыНалоговогоОргана.ОписаниеОшибки) Тогда
			РегистрацияОбъект.Наименование     = РеквизитыНалоговогоОргана.Наименование;
			РегистрацияОбъект.НаименованиеИФНС = РеквизитыНалоговогоОргана.ПолноеНаименование;
		Иначе
			РегистрацияОбъект.Наименование     = "Налоговый орган "+ДанныеРегистрацииВНалоговомОргане.КодНалоговогоОргана;
			РегистрацияОбъект.НаименованиеИФНС = "Налоговый орган "+ДанныеРегистрацииВНалоговомОргане.КодНалоговогоОргана;
		КонецЕсли;
		
		РегистрацияОбъект.КодПоОКТМО       = ДанныеРегистрацииВНалоговомОргане.КодПоОКТМО;
		
		РегистрацияОбъект.ОбменДанными.Загрузка = Истина;
		РегистрацияОбъект.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьОрганизацию(ОбъектXDTO, УзелОбмена, Организация, ДанныеРегистрацииВНалоговомОргане)
	
	Ссылка = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Ссылка, "Организации");
	
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Справочники.Организации.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);
		
		Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		Объект.СтранаРегистрации         = Справочники.СтраныМира.Россия;
	КонецЕсли;
		
	Объект.Наименование    = ОбъектXDTO.Наименование;
	Объект.Код             = ОбъектXDTO.Код;
	Объект.ПометкаУдаления = ОбъектXDTO.ПометкаУдаления;
	
	Объект.НаименованиеСокращенное   = ОбъектXDTO.НаименованиеСокращенное;
	Объект.НаименованиеПолное        = ОбъектXDTO.НаименованиеПолное;
	Объект.ИНН                       = ОбъектXDTO.ИНН;
	Объект.ФамилияИП                 = ОбъектXDTO.ФамилияИП;
	Объект.ИмяИП                     = ОбъектXDTO.ИмяИП;
	Объект.ОтчествоИП                = ОбъектXDTO.ОтчествоИП;
	Объект.КодПоОКПО                 = ОбъектXDTO.КодПоОКПО;
	Объект.ИПРегистрационныйНомерПФР = ОбъектXDTO.ИПРегистрационныйНомерПФР;
	Объект.КодОКВЭД2                 = ОбъектXDTO.КодОКВЭД2;
	Объект.ДатаРегистрации           = ОбъектXDTO.ДатаРегистрации;
	Объект.КодНалоговогоОргана       = ОбъектXDTO.КодНалоговогоОргана;
	Объект.СвидетельствоСерияНомер = ОбъектXDTO.СвидетельствоСерияНомер;
	Объект.СвидетельствоДатаВыдачи = ОбъектXDTO.СвидетельствоДатаВыдачи;
	Объект.ГоловнаяОрганизация       = Ссылка;
	Объект.ОбособленноеПодразделение = Ложь;
	
	ДанныеРегистрацииВНалоговомОргане = Новый Структура;
	ДанныеРегистрацииВНалоговомОргане.Вставить("КодНалоговогоОргана", ОбъектXDTO.КодНалоговогоОргана);
	ДанныеРегистрацииВНалоговомОргане.Вставить("КодПоОКТМО",          ОбъектXDTO.КодПоОКТМО);
	
	Объект.ФайлЛоготип             = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.ФайлЛоготип, "ОрганизацииПрисоединенныеФайлы");
	Объект.ФайлПечать              = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.ФайлПечать, "ОрганизацииПрисоединенныеФайлы");
	Объект.ФайлПодписьРуководителя = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.ФайлПодписьРуководителя, "ОрганизацииПрисоединенныеФайлы");
	
	Если ЕстьКлючевыеСвойства(ОбъектXDTO.ДополнительныеУсловияПоУмолчанию) Тогда
		Объект.ДополнительныеУсловияПоУмолчанию
			= ПолучитьСсылкуНаСправочникПоКлючевымСвойствам(ОбъектXDTO.ДополнительныеУсловияПоУмолчанию, "ДополнительныеУсловия");
	КонецЕсли;
	
	УправлениеКонтактнойИнформациейБП.ЗаполнитьКонтактнуюИнформациюОбъекта(Объект,
			Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, ОбъектXDTO.ЮрАдресОрганизации);
		
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.ОбменДанными.Отправитель = УзелОбмена;
	Объект.Записать();
	
	Организация = Ссылка;
КонецПроцедуры

Процедура ЗагрузитьКонтрагента(ОбъектXDTO, УзелОбмена)
	
	Ссылка = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Ссылка, "Контрагенты");
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Справочники.Контрагенты.СоздатьЭлемент();
		Объект.СтранаРегистрации = Справочники.СтраныМира.Россия;
		Объект.УстановитьСсылкуНового(Ссылка);
	КонецЕсли;
	
	Объект.Наименование    = ОбъектXDTO.Наименование;
	Объект.НаименованиеПолное = ОбъектXDTO.НаименованиеПолное;
	Объект.Код             = ОбъектXDTO.Код;
	Объект.ПометкаУдаления = ОбъектXDTO.ПометкаУдаления;
	
	Если ЗначениеЗаполнено(ОбъектXDTO.ЮридическоеФизическоеЛицо) Тогда
		Если ОбъектXDTO.ЮридическоеФизическоеЛицо = "ЮридическоеЛицо" Тогда
			Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		ИначеЕсли ОбъектXDTO.ЮридическоеФизическоеЛицо = "ФизическоеЛицо" Тогда
			Объект.ЮридическоеФизическоеЛицо  = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		КонецЕсли;
	Иначе
		Если СтрДлина(ОбъектXDTO.ИНН) = 12 Тогда
			Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		Иначе
			Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьКлючевыеСвойства(ОбъектXDTO.СтранаРегистрации) Тогда
		Объект.СтранаРегистрации = ПолучитьСсылкуНаСправочникПоКлючевымСвойствам(ОбъектXDTO.СтранаРегистрации, "СтраныМира");
	Иначе
		Объект.СтранаРегистрации = Справочники.СтраныМира.Россия;
	КонецЕсли;
	
	Объект.ИНН                       = ОбъектXDTO.ИНН;
	Объект.КПП                       = ОбъектXDTO.КПП;
	Объект.СвидетельствоСерияНомер   = ОбъектXDTO.СвидетельствоСерияНомер;
	Объект.СвидетельствоДатаВыдачи   = ОбъектXDTO.СвидетельствоДатаВыдачи;
	Объект.КодГосударственногоОргана = ОбъектXDTO.КодГосударственногоОргана;
	Объект.ГосударственныйОрган      = ОбъектXDTO.ГосударственныйОрган;
	Если ОбъектXDTO.ВидГосударственногоОргана = "НалоговыйОрган" Тогда
		Объект.ВидГосударственногоОргана      = Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган;
	ИначеЕсли ОбъектXDTO.ВидГосударственногоОргана = "ОрганПФР" Тогда 
		Объект.ВидГосударственногоОргана      = Перечисления.ВидыГосударственныхОрганов.ОрганПФР;
	ИначеЕсли ОбъектXDTO.ВидГосударственногоОргана = "ОрганФСС" Тогда 
		Объект.ВидГосударственногоОргана      = Перечисления.ВидыГосударственныхОрганов.ОрганФСС;
	ИначеЕсли ОбъектXDTO.ВидГосударственногоОргана = "Прочий" Тогда 
		Объект.ВидГосударственногоОргана      = Перечисления.ВидыГосударственныхОрганов.Прочий;
	КонецЕсли; 
	
	Объект.КонтактнаяИнформация.Очистить();
	Для каждого СтрокаКИ Из ОбъектXDTO.КонтактнаяИнформация Цикл
		
		ТипКИ = Неопределено;
		ВидКИ = Неопределено;
		Если СтрокаКИ.ВидКИ = "ЮридическийАдрес" Тогда
			ТипКИ = Перечисления.ТипыКонтактнойИнформации.Адрес;
			ВидКИ = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
			УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Объект, СокрЛП(СтрокаКИ.ЗначенияПолей), ВидКИ, ТипКИ);
			ВидКИ = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
			УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Объект, СокрЛП(СтрокаКИ.ЗначенияПолей), ВидКИ, ТипКИ);
			ВидКИ = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента;
			УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Объект, СокрЛП(СтрокаКИ.ЗначенияПолей), ВидКИ, ТипКИ);
		ИначеЕсли СтрокаКИ.ВидКИ = "Телефон" Тогда
			ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон;
			ВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
			УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Объект, СокрЛП(СтрокаКИ.ЗначенияПолей), ВидКИ, ТипКИ);
		ИначеЕсли СтрокаКИ.ВидКИ = "АдресЭлектроннойПочты" Тогда
			ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
			ВидКИ = Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты;
			УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Объект, СокрЛП(СтрокаКИ.ЗначенияПолей), ВидКИ, ТипКИ);
		КонецЕсли;
		
	КонецЦикла;
	
	Объект.ОбменДанными.Загрузка    = Истина;
	Объект.ОбменДанными.Отправитель = УзелОбмена;
	Объект.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьБанк(ОбъектXDTO, УзелОбмена)
	
	Ссылка = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Ссылка, "Банки");
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Справочники.Банки.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);
		Объект.Страна = Справочники.СтраныМира.Россия;
	КонецЕсли;
	
	БанкПоКлассификатору = РаботаСБанкамиБП.СсылкаПоКлассификатору(ОбъектXDTO.Код, ОбъектXDTO.КоррСчет);
	Если ЗначениеЗаполнено(БанкПоКлассификатору) Тогда 
		ДанныеБанка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БанкПоКлассификатору, "Родитель, Родитель.Код");
		Если ЗначениеЗаполнено(ДанныеБанка.Родитель) Тогда 
			Регион = Справочники.Банки.СсылкаНаБанк(ДанныеБанка.РодительКод, Истина);
			Если НЕ ЗначениеЗаполнено(Регион) Тогда
				МассивБанковИзКлассификатора = Новый Массив;
				МассивБанковИзКлассификатора.Добавить(ДанныеБанка.Родитель);
				ИерархияРодителей = РаботаСБанкамиБП.ПодобратьБанкИзКлассификатора(МассивБанковИзКлассификатора);
				Если ИерархияРодителей.Количество() > 0 Тогда
					Регион = ИерархияРодителей[ИерархияРодителей.ВГраница()];
				КонецЕсли;
			КонецЕсли;
			Объект.Родитель = Регион;
		КонецЕсли;
	КонецЕсли;
	
	Объект.Наименование    = ОбъектXDTO.Наименование;
	Объект.Код             = ОбъектXDTO.Код;
	Объект.ПометкаУдаления = ОбъектXDTO.ПометкаУдаления;
	
	Объект.КоррСчет        = ОбъектXDTO.КоррСчет;
	Объект.Город           = ОбъектXDTO.Город;
	
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.ОбменДанными.Отправитель = УзелОбмена;
	Объект.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьБанковскийСчет(ОбъектXDTO, УзелОбмена)
	
	Ссылка = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Ссылка, "БанковскиеСчета");
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Справочники.БанковскиеСчета.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);
		Объект.ВидСчета = "Расчетный";
		Объект.ВалютаДенежныхСредств = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	
	Объект.Наименование    = ОбъектXDTO.Наименование;
	Объект.Код             = ОбъектXDTO.Код;
	Объект.ПометкаУдаления = ОбъектXDTO.ПометкаУдаления;
	
	Если ОбъектXDTO.ЭтоСчетОрганизации Тогда
		Объект.Владелец    = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Владелец, "Организации");
	Иначе
		Объект.Владелец    = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Владелец, "Контрагенты");
	КонецЕсли;
	
	Объект.НомерСчета          = ОбъектXDTO.НомерСчета;
	Объект.Банк                = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Банк, "Банки");
	Объект.ТекстКорреспондента = ОбъектXDTO.ТекстКорреспондента;
	
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.ОбменДанными.Отправитель = УзелОбмена;
	Объект.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьНастройкуОбменаСБанками(ОбъектXDTO, УзелОбмена)
	
	Ссылка = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Ссылка, "НастройкиОбменСБанками");
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Справочники.НастройкиОбменСБанками.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);
	КонецЕсли;
	
	Объект.Наименование    = ОбъектXDTO.Наименование;
	Объект.ПометкаУдаления = ОбъектXDTO.ПометкаУдаления;
	
	Объект.Банк              = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Банк, "Банки");
	Объект.Организация       = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Организация, "Организации");
	Объект.АдресСервера             = ОбъектXDTO.АдресСервера;
	Объект.ВерсияФормата            = ОбъектXDTO.ВерсияФормата;
	Объект.ИдентификаторОрганизации = ОбъектXDTO.ИдентификаторОрганизации;
	Объект.ИмяПользователя          = ОбъектXDTO.ИмяПользователя;
	Объект.Недействительна          = ОбъектXDTO.Недействительна;
	
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.ОбменДанными.Отправитель = УзелОбмена;
	Объект.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьПараметрОбменаСБанками(ОбъектXDTO, УзелОбмена)
	
	НастройкаОбмена = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.НастройкаОбмена, "НастройкиОбменСБанками");
	
	ПараметрыОбменСБанкамиНаборЗаписей = РегистрыСведений.ПараметрыОбменСБанками.СоздатьНаборЗаписей();
	ПараметрыОбменСБанкамиНаборЗаписей.Отбор.НастройкаОбмена.Установить(НастройкаОбмена);
	
	ПараметрыОбменСБанкамиЗапись = ПараметрыОбменСБанкамиНаборЗаписей.Добавить();
	ПараметрыОбменСБанкамиЗапись.НастройкаОбмена          = НастройкаОбмена;
	ПараметрыОбменСБанкамиЗапись.ПоследняяДатаПолученияЭД = ОбъектXDTO.ПоследняяДатаПолученияЭД;
	
	ПараметрыОбменСБанкамиНаборЗаписей.ОбменДанными.Загрузка = Истина;
	ПараметрыОбменСБанкамиНаборЗаписей.ОбменДанными.Отправитель = УзелОбмена;
	ПараметрыОбменСБанкамиНаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьНоменклатуру(ОбъектXDTO, УзелОбмена)
	
	Ссылка = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Ссылка, "Номенклатура");
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Справочники.Номенклатура.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);
	КонецЕсли;
	
	Объект.Наименование		= ОбъектXDTO.Наименование;
	Объект.Код				= ОбъектXDTO.Код;
	Объект.ПометкаУдаления	= ОбъектXDTO.ПометкаУдаления;
	
	Объект.НаименованиеПолное   = ОбъектXDTO.НаименованиеПолное;
	Объект.Услуга               = ОбъектXDTO.Услуга;
	Объект.ЕдиницаИзмерения     = ПолучитьСсылкуНаСправочникПоКлючевымСвойствам(ОбъектXDTO.ЕдиницаИзмерения, "КлассификаторЕдиницИзмерения");
	
	Объект.ВидНоменклатуры      = Справочники.ВидыНоменклатуры.ЭлементВидНоменклатурыПоУмолчанию(ОбъектXDTO.Услуга);
	Объект.НоменклатурнаяГруппа = БухгалтерскийУчетВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа();
	
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.ОбменДанными.Отправитель = УзелОбмена;
	Объект.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьЕдиницуИзмерения(ОбъектXDTO, УзелОбмена)
	
	Ссылка = ПолучитьСсылкуНаСправочникПоКлючевымСвойствам(ОбъектXDTO.КлючевыеСвойства, "КлассификаторЕдиницИзмерения");
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);
	КонецЕсли;
	
	Объект.Наименование		= ОбъектXDTO.КлючевыеСвойства.Наименование;
	Объект.Код				= ОбъектXDTO.КлючевыеСвойства.Код;
	Объект.ПометкаУдаления	= ОбъектXDTO.КлючевыеСвойства.ПометкаУдаления;
	
	Объект.НаименованиеПолное = ОбъектXDTO.НаименованиеПолное;
	
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.ОбменДанными.Отправитель = УзелОбмена;
	Объект.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьОрганизацииПрисоединенныеФайлы(ОбъектXDTO, УзелОбмена)
	
	Ссылка = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Ссылка, "ОрганизацииПрисоединенныеФайлы");
	Объект = Ссылка.ПолучитьОбъект();
	
	ВладелецФайла   = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.ВладелецФайла, "Организации");
	АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(Base64Значение(ОбъектXDTO.ХранимыйФайл));
	Если Объект <> Неопределено Тогда
		
		ИнформацияОФайле = Новый Структура();
		ИнформацияОФайле.Вставить("ИмяБезРасширения", ОбъектXDTO.Наименование);
		ИнформацияОФайле.Вставить("Расширение", ОбъектXDTO.Расширение);
		ИнформацияОФайле.Вставить("ДатаМодификацииУниверсальная", УниверсальноеВремя(ОбъектXDTO.ДатаСоздания));
		ИнформацияОФайле.Вставить("АдресВременногоХранилищаТекста", "");
		ИнформацияОФайле.Вставить("АдресФайлаВоВременномХранилище", АдресФайлаВоВременномХранилище);
		
		ПрисоединенныеФайлы.ОбновитьПрисоединенныйФайл(Ссылка, ИнформацияОФайле);
	Иначе
		
		ИнформацияОФайле = Новый Структура();
		ИнформацияОФайле.Вставить("Автор");
		ИнформацияОФайле.Вставить("ВладелецФайлов", ВладелецФайла);
		ИнформацияОФайле.Вставить("ИмяБезРасширения", ОбъектXDTO.Наименование);
		ИнформацияОФайле.Вставить("РасширениеБезТочки", ОбъектXDTO.Расширение);
		ИнформацияОФайле.Вставить("ВремяИзмененияУниверсальное", УниверсальноеВремя(ОбъектXDTO.ДатаСоздания));
		
		Ссылка = ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(ИнформацияОФайле, АдресФайлаВоВременномХранилище, "", ОбъектXDTO.Описание, Ссылка);
		
	КонецЕсли;
	
	Объект = Ссылка.ПолучитьОбъект();
	Объект.ПометкаУдаления = ОбъектXDTO.ПометкаУдаления;
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.ОбменДанными.Отправитель = УзелОбмена;
	Объект.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьДополнительныеУсловия(ОбъектXDTO, УзелОбмена)
	
	Ссылка = ПолучитьСсылкуНаСправочникПоКлючевымСвойствам(ОбъектXDTO.КлючевыеСвойства, "ДополнительныеУсловия");
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Справочники.ДополнительныеУсловия.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);
	КонецЕсли;
	
	Объект.Наименование		= ОбъектXDTO.КлючевыеСвойства.Наименование;
	Объект.Код				= ОбъектXDTO.КлючевыеСвойства.Код;
	Объект.ПометкаУдаления	= ОбъектXDTO.КлючевыеСвойства.ПометкаУдаления;
	Объект.ИмяМакета		= ОбъектXDTO.КлючевыеСвойства.ИмяМакета;
	
	Объект.ТекстУсловий		= ОбъектXDTO.ТекстУсловий;
	
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.ОбменДанными.Отправитель = УзелОбмена;
	Объект.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьСтраныМира(ОбъектXDTO, УзелОбмена)
	
	Ссылка = ПолучитьСсылкуНаСправочникПоКлючевымСвойствам(ОбъектXDTO.КлючевыеСвойства, "СтраныМира");
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Справочники.СтраныМира.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);
	КонецЕсли;
	
	Объект.Наименование    = ОбъектXDTO.КлючевыеСвойства.Наименование;
	Объект.Код             = ОбъектXDTO.КлючевыеСвойства.Код;
	Объект.ПометкаУдаления = ОбъектXDTO.КлючевыеСвойства.ПометкаУдаления;
	
	Объект.НаименованиеПолное = ОбъектXDTO.НаименованиеПолное;
	Объект.КодАльфа2          = ОбъектXDTO.КодАльфа2;
	Объект.КодАльфа3          = ОбъектXDTO.КодАльфа3;
	
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.ОбменДанными.Отправитель = УзелОбмена;
	Объект.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьКонстантуДатаНачалаРаботы(ОбъектXDTO, ДатаНачалаРаботы)
	
	ДатаНачалаРаботы = ОбъектXDTO.ДатаНачалаРаботыЗначение;
	
КонецПроцедуры

Процедура ЗагрузитьУдалениеОбъекта(ОбъектXDTO)
	
	Ссылка = "";
	
	Если ОбъектXDTO.ТипОбъекта = "Контрагент" Тогда
		Ссылка = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Ссылка, "Контрагенты");
	ИначеЕсли ОбъектXDTO.ТипОбъекта = "БанковскийСчет" Тогда
		Ссылка = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Ссылка, "БанковскиеСчета");
	ИначеЕсли ОбъектXDTO.ТипОбъекта = "Банк" Тогда
		Ссылка = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Ссылка, "Банки");
	ИначеЕсли ОбъектXDTO.ТипОбъекта = "НастройкаОбменаСБанками" Тогда
		Ссылка = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Ссылка, "НастройкиОбменСБанками");
	ИначеЕсли ОбъектXDTO.ТипОбъекта = "СтранаМира" Тогда
		Ссылка = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Ссылка, "СтраныМира");
	ИначеЕсли ОбъектXDTO.ТипОбъекта = "Номенклатура" Тогда
		Ссылка = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Ссылка, "Номенклатура");
	ИначеЕсли ОбъектXDTO.ТипОбъекта = "ЕдиницаИзмерения" Тогда
		Ссылка = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Ссылка, "КлассификаторЕдиницИзмерения");
	ИначеЕсли ОбъектXDTO.ТипОбъекта = "ДополнительныеУсловия" Тогда
		Ссылка = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Ссылка, "ДополнительныеУсловия");
	ИначеЕсли ОбъектXDTO.ТипОбъекта = "ПрисоединенныйФайлОрганизация" Тогда
		Ссылка = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Ссылка, "ОрганизацииПрисоединенныеФайлы");
	ИначеЕсли ОбъектXDTO.ТипОбъекта = "ПоступлениеНаРасчетныйСчет" Тогда
		Ссылка = ДесериализоватьСсылкуНаДокумент(ОбъектXDTO.Ссылка, "ПоступлениеНаРасчетныйСчет");
	ИначеЕсли ОбъектXDTO.ТипОбъекта = "СписаниеСРасчетногоСчета" Тогда
		Ссылка = ДесериализоватьСсылкуНаДокумент(ОбъектXDTO.Ссылка, "СписаниеСРасчетногоСчета");
	ИначеЕсли ОбъектXDTO.ТипОбъекта = "ЗаписьКУДиР" Тогда
		Ссылка = ДесериализоватьСсылкуНаДокумент(ОбъектXDTO.Ссылка, "ЗаписьКУДиР");
	ИначеЕсли ОбъектXDTO.ТипОбъекта = "СчетНаОплатуПокупателю" Тогда
		Ссылка = ДесериализоватьСсылкуНаДокумент(ОбъектXDTO.Ссылка, "СчетНаОплатуПокупателю");
	ИначеЕсли ОбъектXDTO.ТипОбъекта = "РеализацияТоваровУслуг" Тогда
		Ссылка = ДесериализоватьСсылкуНаДокумент(ОбъектXDTO.Ссылка, "РеализацияТоваровУслуг");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Объект = Ссылка.ПолучитьОбъект();
		Если Объект <> Неопределено Тогда
			Объект.Удалить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьПоступлениеНаРасчетныйСчет(ОбъектXDTO, УзелОбмена, ПроведениеДокументов)
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Ссылка = ДесериализоватьСсылкуНаДокумент(ОбъектXDTO.Ссылка, "ПоступлениеНаРасчетныйСчет");
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Документы.ПоступлениеНаРасчетныйСчет.СоздатьДокумент();
		Объект.УстановитьСсылкуНового(Ссылка);
		Объект.ВалютаДокумента = ВалютаРегламентированногоУчета;
		Объект.СчетБанк = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
	КонецЕсли;
	
	Объект.Номер            = ОбъектXDTO.Номер;
	Объект.Дата             = ОбъектXDTO.Дата;
	
	Если Объект.Проведен ИЛИ ОбъектXDTO.Проведен Тогда
		НоваяСтрока          = ПроведениеДокументов.Добавить();
		НоваяСтрока.Ссылка   = ?(Объект.Ссылка.Пустая(), Объект.ПолучитьСсылкуНового(), Объект.Ссылка);
		НоваяСтрока.Дата     = ОбъектXDTO.Дата;
		НоваяСтрока.Провести = ОбъектXDTO.Проведен;
		НоваяСтрока.Удаление = ОбъектXDTO.ПометкаУдаления;
		НоваяСтрока.ЗаполнитьСчета = Истина;
	Иначе
		Объект.ПометкаУдаления = ОбъектXDTO.ПометкаУдаления;
	КонецЕсли;
	
	Объект.Организация              = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Организация, "Организации");
	Объект.Контрагент               = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Контрагент, "Контрагенты");
	Объект.ДатаВходящегоДокумента   = ОбъектXDTO.ДатаПлатежногоПоручения;
	Объект.НомерВходящегоДокумента  = ОбъектXDTO.НомерПлатежногоПоручения;
	Объект.СуммаДокумента           = ОбъектXDTO.Сумма;
	Объект.СуммаУслуг               = ОбъектXDTO.СуммаКомиссии;
	Объект.Графа5_УСН               = ОбъектXDTO.ДоходУСН;
	Объект.НазначениеПлатежа        = ОбъектXDTO.НазначениеПлатежа;
	Объект.СчетОрганизации          = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.СчетОрганизации, "БанковскиеСчета");
	Объект.СчетКонтрагента          = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.СчетКонтрагента, "БанковскиеСчета");
	
	Если ОбъектXDTO.ВидОперации = "ОплатаПокупателя" 
		И Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя Тогда
		
		Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя;
		
	ИначеЕсли ОбъектXDTO.ВидОперации = "ВозвратОтПоставщика" 
		И Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика Тогда
		
		Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика;
		
	ИначеЕсли ОбъектXDTO.ВидОперации = "ПолучениеЗайма" 
		И Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеЗайма
		И Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеКредита Тогда
		
		Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеЗайма;
		
	ИначеЕсли ОбъектXDTO.ВидОперации = "ОплатаЧерезПосредника" 
		И Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам Тогда
		
		Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам;
		
	ИначеЕсли ОбъектXDTO.ВидОперации = "ЛичныеСредстваПредпринимателя" 
		И Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ЛичныеСредстваПредпринимателя
		И Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПереводСДругогоСчета 
		И Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВзносНаличными 
		И Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация Тогда
		
		Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ЛичныеСредстваПредпринимателя;
		
	ИначеЕсли ОбъектXDTO.ВидОперации = "ПрочееПоступление"
		И Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление
		И Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаКонтрагентом
		И Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами
		И Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты
		И Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты
		И Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаРаботником Тогда
		
		Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление;
		
	КонецЕсли;
	
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		Объект.РасшифровкаПлатежа.Добавить();
		Объект.РасшифровкаПлатежа[0].КратностьВзаиморасчетов      = 1;
		Объект.РасшифровкаПлатежа[0].КурсВзаиморасчетов           = 1;
		Объект.РасшифровкаПлатежа[0].СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
		Объект.РасшифровкаПлатежа[0].ПорядокОтраженияАванса       = Перечисления.ПорядокОтраженияАвансов.ДоходУСН;
		Объект.РасшифровкаПлатежа[0].СтавкаНДС                    = Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;
	Если Документы.ПоступлениеНаРасчетныйСчет.ЕстьРасшифровкаПлатежа(Объект.ВидОперации)
		И НЕ ЗначениеЗаполнено(Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента) Тогда
			Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента       = ОсновнойДоговорКонтрагента(Объект, Объект.Организация,
				Объект.Контрагент, ВалютаРегламентированногоУчета);
	КонецЕсли;
	Объект.РасшифровкаПлатежа[0].ДоходыУСН           = ОбъектXDTO.ДоходУСН;
	Объект.РасшифровкаПлатежа[0].СуммаПлатежа        = ОбъектXDTO.Сумма;
	Объект.РасшифровкаПлатежа[0].СуммаВзаиморасчетов = ОбъектXDTO.Сумма;
	Объект.РасшифровкаПлатежа[0].СуммаУслуг          = ОбъектXDTO.СуммаКомиссии;
	
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.ОбменДанными.Отправитель = УзелОбмена;
	Объект.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьСписаниеСРасчетногоСчета(ОбъектXDTO, УзелОбмена, ПроведениеДокументов)
	
	Ссылка = ДесериализоватьСсылкуНаДокумент(ОбъектXDTO.Ссылка, "СписаниеСРасчетногоСчета");
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Документы.СписаниеСРасчетногоСчета.СоздатьДокумент();
		Объект.УстановитьСсылкуНового(Ссылка);
		Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога;
		Объект.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
		Объект.СчетБанк = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
	КонецЕсли;
	
	Объект.Номер            = ОбъектXDTO.Номер;
	Объект.Дата             = ОбъектXDTO.Дата;
	
	Если Объект.Проведен ИЛИ ОбъектXDTO.Проведен Тогда
		НоваяСтрока          = ПроведениеДокументов.Добавить();
		НоваяСтрока.Ссылка   = ?(Объект.Ссылка.Пустая(), Объект.ПолучитьСсылкуНового(), Объект.Ссылка);
		НоваяСтрока.Дата     = ОбъектXDTO.Дата;
		НоваяСтрока.Провести = ОбъектXDTO.Проведен;
		НоваяСтрока.Удаление = ОбъектXDTO.ПометкаУдаления;
		НоваяСтрока.ЗаполнитьСчета = Истина;
	Иначе
		Объект.ПометкаУдаления = ОбъектXDTO.ПометкаУдаления;
	КонецЕсли;
	
	Объект.Организация      = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Организация, "Организации");
	Объект.Контрагент       = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Контрагент, "Контрагенты");
	Объект.СчетОрганизации  = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.СчетОрганизации, "БанковскиеСчета");
	Объект.СчетКонтрагента  = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.СчетКонтрагента, "БанковскиеСчета");
	Объект.НалоговыйПериод  = ОбъектXDTO.ПериодНачисления;
	Объект.СуммаДокумента   = ОбъектXDTO.Сумма;
	
	Если ОбъектXDTO.ВидНалога = "УСН_Доходы" Тогда
		Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.УСН_Доходы, Истина);
		Объект.ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.Налог;
	ИначеЕсли ОбъектXDTO.ВидНалога = "ФиксированныеВзносы_ПФР" Тогда
		Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть, Истина);
		Объект.ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.Налог;
	ИначеЕсли ОбъектXDTO.ВидНалога = "ФиксированныеВзносы_ПФР_СДоходов" Тогда
		Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть, Истина);
		Объект.ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела;
	ИначеЕсли ОбъектXDTO.ВидНалога = "ФиксированныеВзносы_ФФОМС" Тогда
		Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.ФиксированныеВзносы_ФФОМС, Истина);
		Объект.ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.Налог;
	КонецЕсли;
	
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.ОбменДанными.Отправитель = УзелОбмена;
	Объект.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьЗаписьКУДиР(ОбъектXDTO, УзелОбмена, ПроведениеДокументов)
	
	Ссылка = ДесериализоватьСсылкуНаДокумент(ОбъектXDTO.Ссылка, "ЗаписьКУДиР");
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Документы.ЗаписьКУДиР.СоздатьДокумент();
		Объект.УстановитьСсылкуНового(Ссылка);
	КонецЕсли;
	
	Объект.Номер            = ОбъектXDTO.Номер;
	Объект.Дата             = ОбъектXDTO.Дата;
	
	Если Объект.Проведен ИЛИ ОбъектXDTO.Проведен Тогда
		НоваяСтрока          = ПроведениеДокументов.Добавить();
		НоваяСтрока.Ссылка   = ?(Объект.Ссылка.Пустая(), Объект.ПолучитьСсылкуНового(), Объект.Ссылка);
		НоваяСтрока.Дата     = ОбъектXDTO.Дата;
		НоваяСтрока.Провести = ОбъектXDTO.Проведен;
		НоваяСтрока.Удаление = ОбъектXDTO.ПометкаУдаления;
		НоваяСтрока.ЗаполнитьСчета = Ложь;
	Иначе
		Объект.ПометкаУдаления = ОбъектXDTO.ПометкаУдаления;
	КонецЕсли;
	
	Объект.Организация      = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Организация, "Организации");
	
	Если Объект.Строки.Количество() = 0 Тогда
		Объект.Строки.Добавить();
	КонецЕсли;
	
	Объект.Строки[0].ДатаНомер  = ОбъектXDTO.ДатаНомерПервичногоДокумента;
	Объект.Строки[0].Содержание = ОбъектXDTO.СодержаниеОперации;
	Объект.Строки[0].Графа5     = ОбъектXDTO.ДоходУСН;
	
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.ОбменДанными.Отправитель = УзелОбмена;
	Объект.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьРегламентированныйОтчет(ОбъектXDTO, УзелОбмена, ЗаполнениеОтчетности)
	
	Ссылка = ДесериализоватьСсылкуНаДокумент(ОбъектXDTO.Ссылка, "РегламентированныйОтчет");
	Объект = Ссылка.ПолучитьОбъект();
	
	Если Объект = Неопределено Тогда
		// Отчет требуется создать
		Объект = Документы.РегламентированныйОтчет.СоздатьДокумент();
		Объект.УстановитьСсылкуНового(Ссылка);
		
		Объект.Дата = ОбъектXDTO.ДатаОкончания;
		Объект.УстановитьВремя();
	КонецЕсли;
	
	// Записываем ссылку для передачи в БРО
	Объект.ПометкаУдаления = ОбъектXDTO.ПометкаУдаления;
	
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.ОбменДанными.Отправитель = УзелОбмена;
	Объект.Записать();
	
	// Регистрируем регл. отчет к заполнению
	НоваяСтрока = ЗаполнениеОтчетности.Добавить();
	
	НоваяСтрока.Ссылка        = Объект.Ссылка;
	НоваяСтрока.Организация   = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Организация, "Организации");
	НоваяСтрока.ВидОтчета     = ОбъектXDTO.ВидОтчета;
	НоваяСтрока.ДатаНачала    = ОбъектXDTO.ДатаНачала;
	НоваяСтрока.ДатаОкончания = ОбъектXDTO.ДатаОкончания;
	НоваяСтрока.ДанныеОтчета  = ОбъектXDTO.ДанныеОтчета.Получить();
	
КонецПроцедуры

Процедура ЗаполнитьРегламентированныеОтчеты(УзелОбмена, ЗаполнениеОтчетности, СообщениеОбОшибке)
	
	Для каждого СтрокаЗаполнения Из ЗаполнениеОтчетности Цикл
		
		ИмяФормыОтчета = РегламентированнаяОтчетностьВызовСервера.ИмяФормыРеглОтчетаДействующейВОтчетномПериоде(
			СтрокаЗаполнения.ВидОтчета, СтрокаЗаполнения.ДатаОкончания);
		
		ДанныеДляЗаполнения  = ПреобразоватьДанныеРеглОтчетаМПДляБРО(СтрокаЗаполнения.ВидОтчета,
			ИмяФормыОтчета, СтрокаЗаполнения.ДанныеОтчета);
		
		ОбъектОтчета = СтрокаЗаполнения.Ссылка.ПолучитьОбъект();
		ОбъектОтчета.ОбменДанными.Отправитель = УзелОбмена;
		
		ПараметрыСоздания = ИнтерфейсыВзаимодействияБРО.НовыйПараметрыАвтоформированияОтчета();
		
		ПараметрыСоздания.ИсточникОтчета           = СтрокаЗаполнения.ВидОтчета;
		ПараметрыСоздания.ИмяФормыОтчета           = ИмяФормыОтчета;
		ПараметрыСоздания.Организация              = СтрокаЗаполнения.Организация;
		ПараметрыСоздания.ДатаНачала               = СтрокаЗаполнения.ДатаНачала;
		ПараметрыСоздания.ДатаОкончания            = СтрокаЗаполнения.ДатаОкончания;
		ПараметрыСоздания.ВнешниеДанные            = ДанныеДляЗаполнения;
		ПараметрыСоздания.ЗаполнятьВнешнимиДанными = ДанныеДляЗаполнения <> Неопределено;
		ПараметрыСоздания.СсылкаНаСохрРеглОтчет    = ОбъектОтчета;
		
		ЗаполненныйОтчет = ИнтерфейсыВзаимодействияБРО.СформироватьАвтоматическиРеглОтчет(
			ПараметрыСоздания.ИсточникОтчета,
			ПараметрыСоздания.Организация,
			ПараметрыСоздания.ДатаНачала,
			ПараметрыСоздания.ДатаОкончания,
			Ложь,
			ИмяФормыОтчета,
			ПараметрыСоздания);
		
		Если ТипЗнч(ЗаполненныйОтчет) <> Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			
			ЗарегистрироватьОшибкиОбмена(ПараметрыСоздания.Ошибки,
				НСтр("ru = 'Загрузка данных из мобильной бухгалтерии. Загрузка регламентированного отчета'"));
			
			СообщениеОбОшибке = НСтр("ru = 'Ошибка при переносе данных декларации в базу данных, выполняющую подготовку выгрузки декларации'");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьСчетНаОплатуПокупателю(ОбъектXDTO, УзелОбмена, ПроведениеДокументов)
	
	Ссылка = ДесериализоватьСсылкуНаДокумент(ОбъектXDTO.Ссылка, "СчетНаОплатуПокупателю");
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Документы.СчетНаОплатуПокупателю.СоздатьДокумент();
		Объект.УстановитьСсылкуНового(Ссылка);
	КонецЕсли;
	
	Объект.Номер			= ОбъектXDTO.Номер;
	Объект.Дата				= ОбъектXDTO.Дата;
	
	Если Объект.Проведен ИЛИ (НЕ ОбъектXDTO.ПометкаУдаления) Тогда
		НоваяСтрока          = ПроведениеДокументов.Добавить();
		НоваяСтрока.Ссылка   = ?(Объект.Ссылка.Пустая(), Объект.ПолучитьСсылкуНового(), Объект.Ссылка);
		НоваяСтрока.Дата     = ОбъектXDTO.Дата;
		НоваяСтрока.Провести = ОбъектXDTO.Проведен;
		НоваяСтрока.Удаление = ОбъектXDTO.ПометкаУдаления;
		НоваяСтрока.ЗаполнитьСчета = Ложь;
	Иначе
		Объект.ПометкаУдаления  = ОбъектXDTO.ПометкаУдаления;
	КонецЕсли;
	
	Объект.Организация			= ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Организация, "Организации");
	Объект.Контрагент			= ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Контрагент, "Контрагенты");
	Объект.СтруктурнаяЕдиница	= ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.БанковскийСчет, "БанковскиеСчета");
	Объект.СуммаДокумента		= ОбъектXDTO.СуммаДокумента;
	
	Объект.ДокументБезНДС       = Истина;
	Объект.СуммаВключаетНДС     = Истина;
	
	Объект.ОрганизацияПолучатель = Объект.Организация;
	Объект.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
	
	СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
		Объект.ВалютаДокумента, Объект.Дата);
	
	Объект.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	Объект.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
	
	Объект.ДополнительныеУсловия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "ДополнительныеУсловияПоУмолчанию");
	
	Объект.Товары.Очистить();
	Для каждого ЗагружаемаяСтрокаТЧ Из ОбъектXDTO.ТоварыУслуги Цикл
		НоваяСтрока = Объект.Товары.Добавить();
		НоваяСтрока.Номенклатура	= ДесериализоватьСсылкуНаСправочник(ЗагружаемаяСтрокаТЧ.Номенклатура, "Номенклатура");
		НоваяСтрока.Содержание		= ЗагружаемаяСтрокаТЧ.Содержание;
		НоваяСтрока.Количество		= ЗагружаемаяСтрокаТЧ.Количество;
		НоваяСтрока.Цена			= ЗагружаемаяСтрокаТЧ.Цена;
		НоваяСтрока.Сумма			= ЗагружаемаяСтрокаТЧ.Сумма;
		
		НоваяСтрока.СтавкаНДС		= Перечисления.СтавкиНДС.БезНДС;
		
	КонецЦикла;
	
	Объект.ОбменДанными.Загрузка		= Истина;
	Объект.ОбменДанными.Отправитель		= УзелОбмена;
	Объект.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьРеализацияТоваровУслуг(ОбъектXDTO, УзелОбмена, ПроведениеДокументов)
	
	Ссылка = ДесериализоватьСсылкуНаДокумент(ОбъектXDTO.Ссылка, "РеализацияТоваровУслуг");
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
		Объект.УстановитьСсылкуНового(Ссылка);
	КонецЕсли;
	
	Объект.Номер			= ОбъектXDTO.Номер;
	Объект.Дата				= ОбъектXDTO.Дата;
	
	Если Объект.Проведен ИЛИ ОбъектXDTO.Проведен Тогда
		НоваяСтрока          = ПроведениеДокументов.Добавить();
		НоваяСтрока.Ссылка   = ?(Объект.Ссылка.Пустая(), Объект.ПолучитьСсылкуНового(), Объект.Ссылка);
		НоваяСтрока.Дата     = ОбъектXDTO.Дата;
		НоваяСтрока.Провести = ОбъектXDTO.Проведен;
		НоваяСтрока.Удаление = ОбъектXDTO.ПометкаУдаления;
		НоваяСтрока.ЗаполнитьСчета = Истина;
	Иначе
		Объект.ПометкаУдаления = ОбъектXDTO.ПометкаУдаления;
	КонецЕсли;
	
	ВидОперации = Неопределено;
	Если ОбъектXDTO.ВидОперации = "Товары" Тогда
		Объект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Товары;
	ИначеЕсли ОбъектXDTO.ВидОперации = "Услуги" Тогда
		Объект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Услуги;
	КонецЕсли;
	
	Объект.Организация					= ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Организация, "Организации");
	Объект.Контрагент					= ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Контрагент, "Контрагенты");
	Объект.БанковскийСчетОрганизации	= ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.БанковскийСчетОрганизации, "БанковскиеСчета");
	Объект.СчетНаОплатуПокупателю		= ДесериализоватьСсылкуНаДокумент(ОбъектXDTO.СчетНаОплатуПокупателю, "СчетНаОплатуПокупателю");
	Объект.СуммаДокумента				= ОбъектXDTO.СуммаДокумента;
	
	Объект.Склад              = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнойСклад");
	Объект.ДокументБезНДС     = Истина;
	Объект.СуммаВключаетНДС   = Истина;
	Объект.ВалютаДокумента    = Константы.ВалютаРегламентированногоУчета.Получить();
	Объект.ДоговорКонтрагента = ОсновнойДоговорКонтрагента(Объект, Объект.Организация,
				Объект.Контрагент, Объект.ВалютаДокумента);
	
	
	
	СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
		Объект.ВалютаДокумента, Объект.Дата);
	
	Объект.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	Объект.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
	
	Объект.Товары.Очистить();
	Для каждого ЗагружаемаяСтрокаТЧ Из ОбъектXDTO.Товары Цикл
		НоваяСтрока = Объект.Товары.Добавить();
		НоваяСтрока.Номенклатура	= ДесериализоватьСсылкуНаСправочник(ЗагружаемаяСтрокаТЧ.Номенклатура, "Номенклатура");
		НоваяСтрока.Количество		= ЗагружаемаяСтрокаТЧ.Количество;
		НоваяСтрока.Цена			= ЗагружаемаяСтрокаТЧ.Цена;
		НоваяСтрока.Сумма			= ЗагружаемаяСтрокаТЧ.Сумма;
		
		НоваяСтрока.СтавкаНДС		= Перечисления.СтавкиНДС.БезНДС;
		
	КонецЦикла;
	
	Объект.Услуги.Очистить();
	Для каждого ЗагружаемаяСтрокаТЧ Из ОбъектXDTO.Услуги Цикл
		НоваяСтрока = Объект.Услуги.Добавить();
		НоваяСтрока.Номенклатура	= ДесериализоватьСсылкуНаСправочник(ЗагружаемаяСтрокаТЧ.Номенклатура, "Номенклатура");
		НоваяСтрока.Содержание		= ЗагружаемаяСтрокаТЧ.Содержание;
		НоваяСтрока.Количество		= ЗагружаемаяСтрокаТЧ.Количество;
		НоваяСтрока.Цена			= ЗагружаемаяСтрокаТЧ.Цена;
		НоваяСтрока.Сумма			= ЗагружаемаяСтрокаТЧ.Сумма;
		
		НоваяСтрока.СтавкаНДС		= Перечисления.СтавкиНДС.БезНДС;
	КонецЦикла;
	
	Объект.ОбменДанными.Загрузка		= Истина;
	Объект.ОбменДанными.Отправитель		= УзелОбмена;
	Объект.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьСтатусыДокументов(ОбъектXDTO, УзелОбмена)
	
	ТипДокумента = Неопределено;
	Статус = Неопределено;
	Если ОбъектXDTO.Тип().Имя = "СтатусДокумента.СчетНаОплатуПокупателю" Тогда
		ТипДокумента = "СчетНаОплатуПокупателю";
		Если ОбъектXDTO.Статус = "НеОплачен" Тогда
			Статус = Перечисления.СтатусОплатыСчета.НеОплачен;
		ИначеЕсли ОбъектXDTO.Статус = "Оплачен" Тогда
			Статус = Перечисления.СтатусОплатыСчета.Оплачен;
		ИначеЕсли ОбъектXDTO.Статус = "ОплаченЧастично" Тогда
			Статус = Перечисления.СтатусОплатыСчета.ОплаченЧастично;
		ИначеЕсли ОбъектXDTO.Статус = "Отменен" Тогда
			Статус = Перечисления.СтатусОплатыСчета.Отменен;
		КонецЕсли;
	ИначеЕсли ОбъектXDTO.Тип().Имя = "СтатусДокумента.РеализацияТоваровУслуг" Тогда
		ТипДокумента = "РеализацияТоваровУслуг";
		Если ОбъектXDTO.Статус = "Подписан" Тогда
			Статус = Перечисления.СтатусыДокументовРеализации.Подписан;
		ИначеЕсли ОбъектXDTO.Статус = "НеПодписан" Тогда
			Статус = Перечисления.СтатусыДокументовРеализации.НеПодписан;
		КонецЕсли;
	КонецЕсли;
	
	Документ = ДесериализоватьСсылкуНаДокумент(ОбъектXDTO.Документ, ТипДокумента);
	Организация = ДесериализоватьСсылкуНаСправочник(ОбъектXDTO.Организация, "Организации");
	
	РегистрСтатусыДокументов = РегистрыСведений.СтатусыДокументов.СоздатьНаборЗаписей();
	РегистрСтатусыДокументов.Отбор.Документ.Установить(Документ);
	
	Запись = РегистрСтатусыДокументов.Добавить();
	Запись.Документ = Документ;
	Запись.Организация = Организация;
	Запись.Статус   = Статус;
	
	РегистрСтатусыДокументов.ОбменДанными.Загрузка = Истина;
	РегистрСтатусыДокументов.ОбменДанными.Отправитель = УзелОбмена;
	РегистрСтатусыДокументов.Записать();
	
КонецПроцедуры

Функция ПреобразоватьДанныеРеглОтчетаМПДляБРО(ИсточникОтчета, ИмяФормыОтчета, ДанныеМП)
	
	Если ТипЗнч(ДанныеМП) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ИсточникОтчета = "РегламентированныйОтчетУСН" Тогда
	
		Если ИмяФормыОтчета = "ФормаОтчета2015Кв1" Тогда
			
			Раздел21 = Новый Структура;
			
			ДоходыНарастающимИтогом = 0;
			ВзносыНарастающимИтогом = 0;
			
			СтавкаНалогаУСН = 6; // По умолчанию
			Если ДанныеМП.Свойство("СтавкаНалога") И ТипЗнч(ДанныеМП.СтавкаНалога) = Тип("Число") Тогда
				СтавкаНалогаУСН = ДанныеМП.СтавкаНалога;
			КонецЕсли;
			
			Для НомерКвартала = 1 По 4 Цикл
				ДоходыЗаКвартал = 0;
				ВзносыЗаКвартал = 0;
				
				Если ДанныеМП.Свойство("Доходы" + НомерКвартала + "Квартал", ДоходыЗаКвартал) Тогда
					ДоходыНарастающимИтогом = ДоходыНарастающимИтогом + ДоходыЗаКвартал;
				КонецЕсли;
				Если ДанныеМП.Свойство("СтраховыеВзносы" + НомерКвартала + "Квартал", ВзносыЗаКвартал) Тогда
					ВзносыНарастающимИтогом = ВзносыНарастающимИтогом + ВзносыЗаКвартал;
				КонецЕсли;
				
				Индекс = НомерКвартала - 1;
				
				Раздел21.Вставить("П002110011" + Индекс + "03", ДоходыНарастающимИтогом);
				Раздел21.Вставить("П002110014" + Индекс + "03", ВзносыНарастающимИтогом);
				
				Раздел21.Вставить("П002110012" + Индекс + "03", СтавкаНалогаУСН);
			КонецЦикла;
			
			ДанныеБРО = Новый Структура;
			ДанныеБРО.Вставить("Раздел21", Раздел21);
			
			Возврат ДанныеБРО;
		
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат Неопределено; // Другие формы не обрабатываются
	
КонецФункции

Функция ПреобразоватьДанныеРеглОтчетаБРОДляМП(ИсточникОтчета, ИмяФормыОтчета, ДанныеБРО)
	
	Если ТипЗнч(ДанныеБРО) <> Тип("Структура")
		ИЛИ НЕ ДанныеБРО.Свойство("ПоказателиОтчета") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ИсточникОтчета = "РегламентированныйОтчетУСН" Тогда
	
		Если ИмяФормыОтчета = "ФормаОтчета2015Кв1" Тогда
			
			Раздел21 = Неопределено;
			ДанныеБРО.ПоказателиОтчета.Свойство("ПолеТабличногоДокументаРаздел21", Раздел21);
			
			Если Раздел21 = Неопределено Тогда
				// Отсутствуют сохраненные данные раздела 2.1 отчета
				Возврат Неопределено;
			КонецЕсли;
			
			ДанныеМП = Новый Структура;
			
			ДанныеМП.Вставить("СтавкаНалога", Раздел21.П002110012003);
			
			ДоходыПредыдущихКварталов = 0;
			ВзносыПредыдущихКварталов = 0;
			
			Для НомерКвартала = 1 По 4 Цикл
				Индекс = НомерКвартала - 1;
				
				ДоходыТекущегоПериода = Раздел21["П002110011" + Индекс + "03"];
				ВзносыТекущегоПериода = Раздел21["П002110014" + Индекс + "03"];
				
				// Доходы и взносы в МП хранятся за каждый квартал, без нарастающего итога
				ДанныеМП.Вставить("Доходы" + НомерКвартала + "Квартал", ДоходыТекущегоПериода - ДоходыПредыдущихКварталов);
				ДанныеМП.Вставить("СтраховыеВзносы" + НомерКвартала + "Квартал", ВзносыТекущегоПериода - ВзносыПредыдущихКварталов);
				
				ДоходыПредыдущихКварталов = ДоходыТекущегоПериода;
				ВзносыПредыдущихКварталов = ВзносыТекущегоПериода;
			КонецЦикла;
			
			Возврат ДанныеМП;
		
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено; // Другие формы не обрабатываются
	
КонецФункции

#КонецОбласти

#Область ВыгрузитьДанные

Функция ПодготовитьСообщениеВыгрузки(СтруктураПараметров, Отбор = Неопределено)
	
	// Сформируем сообщение обмена с изменениями для передачи в мобильное приложение.
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	ЗаписьСообщения.НачатьЗапись(ЗаписьXML, СтруктураПараметров.УзелОбмена);
	
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xs",  "http://www.w3.org/2001/XMLSchema");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("",    "http://www.1c.ru/EA/MobileAccounting");
	
	//Измененные объекты
	Если Отбор = Неопределено Тогда
		ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(СтруктураПараметров.УзелОбмена, ЗаписьСообщения.НомерСообщения);
	Иначе
		ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(СтруктураПараметров.УзелОбмена, ЗаписьСообщения.НомерСообщения, Отбор);
	КонецЕсли;
	
	Пока ВыборкаИзменений.Следующий() Цикл
		Данные = ВыборкаИзменений.Получить();
		
		ОбъектXDTO = ПолучитьОбъектXDTO(Данные, СтруктураПараметров);
		Если ОбъектXDTO <> Неопределено Тогда
			ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);
		КонецЕсли;
		
		СтруктураПараметров.КолВыгружено = СтруктураПараметров.КолВыгружено + 1;
	КонецЦикла;
	
	//Передадим дату начала работы из узла обмена
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ВыгрузитьДатаНачалаРаботы(СтруктураПараметров));
	
	ЗаписьСообщения.ЗакончитьЗапись();
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

Функция ПолучитьОбъектXDTO(Данные, СтруктураПараметров)
	
	ПередаваемыйОбъект = Неопределено;
	
	Если ТипЗнч(Данные) = Тип("ДокументОбъект.ПоступлениеНаРасчетныйСчет") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьПоступлениеНаРасчетныйСчет(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.СписаниеСРасчетногоСчета") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьУплатаНалога(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьРеализацияТоваровУслуг(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.СчетНаОплатуПокупателю") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьСчетНаОплатуПокупателю(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.ЗаписьКУДиР") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьЗаписьКУДиР(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("ДокументОбъект.РегламентированныйОтчет") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьРегламентированныйОтчет(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.Организации") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьОрганизации(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.Контрагенты") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьКонтрагенты(Данные);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.СтраныМира") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьСтраныМира(Данные);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.БанковскиеСчета") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьБанковскиеСчета(Данные);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.Банки") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьБанки(Данные);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.НастройкиОбменСБанками") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьНастройкиОбменСБанками(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.Номенклатура") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьНоменклатура(Данные);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.КлассификаторЕдиницИзмерения") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьКлассификаторЕдиницИзмерения(Данные);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.ДополнительныеУсловия") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьДополнительныеУсловия(Данные);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.ОрганизацииПрисоединенныеФайлы") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьОрганизацииПрисоединенныеФайлы(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("РегистрСведенийНаборЗаписей.ПараметрыОбменСБанками") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьПараметрыОбменСБанками(Данные);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("РегистрСведенийНаборЗаписей.СтатусыДокументов") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьСтатусыДокументов(Данные, СтруктураПараметров);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("УдалениеОбъекта") Тогда
		
		ПередаваемыйОбъект = ВыгрузитьУдалениеОбъекта(Данные, СтруктураПараметров);
		
	КонецЕсли;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьПоступлениеНаРасчетныйСчет(Данные, СтруктураПараметров)
	
	Если Данные.Организация <> СтруктураПараметров.Организация Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("ПоступлениеНаРасчетныйСчет");
	ПередаваемыйОбъект.Ссылка          = СериализоватьСсылку(Данные.Ссылка);
	ПередаваемыйОбъект.Номер           = Данные.Номер;
	ПередаваемыйОбъект.Дата            = Данные.Дата;
	ПередаваемыйОбъект.Проведен        = Данные.Проведен;
	ПередаваемыйОбъект.ПометкаУдаления = Данные.ПометкаУдаления;
	
	ПередаваемыйОбъект.Организация     = СериализоватьСсылку(СтруктураПараметров.Организация);
	ПередаваемыйОбъект.Контрагент      = СериализоватьСсылку(Данные.Контрагент);
	ПередаваемыйОбъект.ДатаПлатежногоПоручения  = Данные.ДатаВходящегоДокумента;
	ПередаваемыйОбъект.НомерПлатежногоПоручения = Данные.НомерВходящегоДокумента;
	Если Данные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя Тогда
		ПередаваемыйОбъект.ВидОперации          = "ОплатаПокупателя";
	ИначеЕсли Данные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика Тогда
		ПередаваемыйОбъект.ВидОперации          = "ВозвратОтПоставщика";
	ИначеЕсли Данные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеЗайма Тогда
		ПередаваемыйОбъект.ВидОперации          = "ПолучениеЗайма";
	ИначеЕсли Данные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеКредита Тогда
		ПередаваемыйОбъект.ВидОперации          = "ПолучениеКредита";
	ИначеЕсли Данные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаКонтрагентом Тогда
		ПередаваемыйОбъект.ВидОперации          = "ВозвратЗаймаКонтрагентом";
	ИначеЕсли Данные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами Тогда
		ПередаваемыйОбъект.ВидОперации          = "ПрочиеРасчетыСКонтрагентами";
	ИначеЕсли Данные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПереводСДругогоСчета Тогда
		ПередаваемыйОбъект.ВидОперации          = "ПереводСДругогоСчета";
	ИначеЕсли Данные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВзносНаличными Тогда
		ПередаваемыйОбъект.ВидОперации          = "ВзносНаличными";
	ИначеЕсли Данные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация Тогда
		ПередаваемыйОбъект.ВидОперации          = "Инкассация";
	ИначеЕсли Данные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
		ПередаваемыйОбъект.ВидОперации          = "ПриобретениеИностраннойВалюты";
	ИначеЕсли Данные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты Тогда
		ПередаваемыйОбъект.ВидОперации          = "ПоступленияОтПродажиИностраннойВалюты";
	ИначеЕсли Данные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам Тогда
		ПередаваемыйОбъект.ВидОперации          = "ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам";
	ИначеЕсли Данные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаРаботником Тогда
		ПередаваемыйОбъект.ВидОперации          = "ВозвратЗаймаРаботником";
	ИначеЕсли Данные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ЛичныеСредстваПредпринимателя Тогда
		ПередаваемыйОбъект.ВидОперации          = "ЛичныеСредстваПредпринимателя";
	ИначеЕсли Данные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление Тогда
		ПередаваемыйОбъект.ВидОперации          = "ПрочееПоступление";
	КонецЕсли;
	ПередаваемыйОбъект.НазначениеПлатежа        = Данные.НазначениеПлатежа;
	ПередаваемыйОбъект.СчетОрганизации          = СериализоватьСсылку(Данные.СчетОрганизации);
	ПередаваемыйОбъект.СчетКонтрагента          = СериализоватьСсылку(Данные.СчетКонтрагента);
	ПередаваемыйОбъект.Сумма                    = Данные.СуммаДокумента;
	ПередаваемыйОбъект.СуммаКомиссии            = Макс(Данные.СуммаУслуг, Данные.РасшифровкаПлатежа.Итог("СуммаУслуг"));
	ПередаваемыйОбъект.ДоходУСН                 = Макс(Данные.Графа5_УСН, Данные.РасшифровкаПлатежа.Итог("ДоходыУСН"));
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьРеализацияТоваровУслуг(Данные, СтруктураПараметров)
	
	Если Данные.Организация <> СтруктураПараметров.Организация Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВидОперации = Неопределено;
	Если Данные.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Товары Тогда
		ВидОперации = "Товары";
	ИначеЕсли Данные.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Услуги Тогда
		ВидОперации = "Услуги";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("РеализацияТоваровУслуг");
	ПередаваемыйОбъект.Ссылка          = СериализоватьСсылку(Данные.Ссылка);
	ПередаваемыйОбъект.Номер           = Данные.Номер;
	ПередаваемыйОбъект.Дата            = Данные.Дата;
	ПередаваемыйОбъект.Проведен        = Данные.Проведен;
	ПередаваемыйОбъект.ПометкаУдаления = Данные.ПометкаУдаления;
	
	ПередаваемыйОбъект.ВидОперации               = ВидОперации;
	ПередаваемыйОбъект.Организация               = СериализоватьСсылку(СтруктураПараметров.Организация);
	ПередаваемыйОбъект.Контрагент                = СериализоватьСсылку(Данные.Контрагент);
	ПередаваемыйОбъект.БанковскийСчетОрганизации = СериализоватьСсылку(Данные.БанковскийСчетОрганизации);
	ПередаваемыйОбъект.СчетНаОплатуПокупателю    = СериализоватьСсылку(Данные.СчетНаОплатуПокупателю);
	
	ПередаваемыйОбъект.СуммаДокумента            = Данные.СуммаДокумента;
	
	Для Каждого СтрокаТЧ Из Данные.Товары Цикл
		ПередаваемаяСтрокаТЧ = СоздатьОбъектXDTO("РеализацияТоваровУслуг.Товары");
		
		ПередаваемаяСтрокаТЧ.Номенклатура = СериализоватьСсылку(СтрокаТЧ.Номенклатура);
		ПередаваемаяСтрокаТЧ.Количество   = СтрокаТЧ.Количество;
		ПередаваемаяСтрокаТЧ.Цена         = СтрокаТЧ.Цена;
		ПередаваемаяСтрокаТЧ.Сумма        = СтрокаТЧ.Сумма;
		
		ПередаваемыйОбъект.Товары.Добавить(ПередаваемаяСтрокаТЧ);
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из Данные.Услуги Цикл
		ПередаваемаяСтрокаТЧ = СоздатьОбъектXDTO("РеализацияТоваровУслуг.Услуги");
		
		ПередаваемаяСтрокаТЧ.Номенклатура = СериализоватьСсылку(СтрокаТЧ.Номенклатура);
		ПередаваемаяСтрокаТЧ.Содержание   = СтрокаТЧ.Содержание;
		ПередаваемаяСтрокаТЧ.Количество   = СтрокаТЧ.Количество;
		ПередаваемаяСтрокаТЧ.Цена         = СтрокаТЧ.Цена;
		ПередаваемаяСтрокаТЧ.Сумма        = СтрокаТЧ.Сумма;
		
		ПередаваемыйОбъект.Услуги.Добавить(ПередаваемаяСтрокаТЧ);
	КонецЦикла;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьСчетНаОплатуПокупателю(Данные, СтруктураПараметров)
	
	Если Данные.Организация <> СтруктураПараметров.Организация Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("СчетНаОплатуПокупателю");
	ПередаваемыйОбъект.Ссылка          = СериализоватьСсылку(Данные.Ссылка);
	ПередаваемыйОбъект.Номер           = Данные.Номер;
	ПередаваемыйОбъект.Дата            = Данные.Дата;
	ПередаваемыйОбъект.Проведен        = Данные.Проведен;
	ПередаваемыйОбъект.ПометкаУдаления = Данные.ПометкаУдаления;
	
	ПередаваемыйОбъект.Организация     = СериализоватьСсылку(СтруктураПараметров.Организация);
	ПередаваемыйОбъект.Контрагент      = СериализоватьСсылку(Данные.Контрагент);
	ПередаваемыйОбъект.БанковскийСчет  = СериализоватьСсылку(Данные.СтруктурнаяЕдиница);
	ПередаваемыйОбъект.СуммаДокумента  = Данные.СуммаДокумента;
	
	Для Каждого СтрокаТЧ Из Данные.Товары Цикл
		ПередаваемаяСтрокаТЧ = СоздатьОбъектXDTO("СчетНаОплатуПокупателю.ТоварыУслуги");
		
		ПередаваемаяСтрокаТЧ.Номенклатура = СериализоватьСсылку(СтрокаТЧ.Номенклатура);
		ПередаваемаяСтрокаТЧ.Содержание   = СтрокаТЧ.Содержание;
		ПередаваемаяСтрокаТЧ.Количество   = СтрокаТЧ.Количество;
		ПередаваемаяСтрокаТЧ.Цена         = СтрокаТЧ.Цена;
		ПередаваемаяСтрокаТЧ.Сумма        = СтрокаТЧ.Сумма;
		
		ПередаваемыйОбъект.ТоварыУслуги.Добавить(ПередаваемаяСтрокаТЧ);
	КонецЦикла;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьУплатаНалога(Данные, СтруктураПараметров)
	
	Если Данные.Организация <> СтруктураПараметров.Организация Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Данные.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.УСН_Доходы, Ложь)
		И Данные.ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.Налог Тогда
		
		ВидНалога = "УСН_Доходы";
		
	ИначеЕсли Данные.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть, Ложь)
		И Данные.ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.Налог Тогда
		
		ВидНалога = "ФиксированныеВзносы_ПФР";
		
	ИначеЕсли Данные.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть, Ложь)
		И Данные.ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела Тогда
		
		ВидНалога = "ФиксированныеВзносы_ПФР_СДоходов";
		
	ИначеЕсли Данные.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.ФиксированныеВзносы_ФФОМС, Ложь)
		И Данные.ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.Налог Тогда
		
		ВидНалога = "ФиксированныеВзносы_ФФОМС";
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("СписаниеСРасчетногоСчета");
	ПередаваемыйОбъект.Ссылка          = СериализоватьСсылку(Данные.Ссылка);
	ПередаваемыйОбъект.Номер           = Данные.Номер;
	ПередаваемыйОбъект.Дата            = Данные.Дата;
	ПередаваемыйОбъект.Проведен        = Данные.Проведен;
	ПередаваемыйОбъект.ПометкаУдаления = Данные.ПометкаУдаления;
	
	ПередаваемыйОбъект.Организация     = СериализоватьСсылку(СтруктураПараметров.Организация);
	ПередаваемыйОбъект.Контрагент      = СериализоватьСсылку(Данные.Контрагент);
	ПередаваемыйОбъект.СчетОрганизации = СериализоватьСсылку(Данные.СчетОрганизации);
	ПередаваемыйОбъект.СчетКонтрагента = СериализоватьСсылку(Данные.СчетКонтрагента);
	
	ПередаваемыйОбъект.ПериодНачисления = Данные.НалоговыйПериод;
	ПередаваемыйОбъект.Сумма            = Данные.СуммаДокумента;
	ПередаваемыйОбъект.ВидНалога        = ВидНалога;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьЗаписьКУДиР(Данные, СтруктураПараметров)
	
	Если Данные.Организация <> СтруктураПараметров.Организация Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Данные.Строки.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("ЗаписьКУДиР");
	ПередаваемыйОбъект.Ссылка          = СериализоватьСсылку(Данные.Ссылка);
	ПередаваемыйОбъект.Номер           = Данные.Номер;
	ПередаваемыйОбъект.Дата            = Данные.Дата;
	ПередаваемыйОбъект.Проведен        = Данные.Проведен;
	ПередаваемыйОбъект.ПометкаУдаления = Данные.ПометкаУдаления;
	
	ПередаваемыйОбъект.Организация     = СериализоватьСсылку(СтруктураПараметров.Организация);
	
	ПередаваемыйОбъект.ДатаНомерПервичногоДокумента = Данные.Строки[0].ДатаНомер;
	ПередаваемыйОбъект.СодержаниеОперации           = Данные.Строки[0].Содержание;
	ПередаваемыйОбъект.ДоходУСН                     = Данные.Строки[0].Графа5;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьРегламентированныйОтчет(Данные, СтруктураПараметров)
	
	Если Данные.Организация <> СтруктураПараметров.Организация Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ РегламентированныйОтчетПоддерживаетсяВМобильнойБухгалтерии(Данные.ИсточникОтчета, Данные.ВыбраннаяФорма) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("РегламентированныйОтчет");
	ПередаваемыйОбъект.Ссылка          = СериализоватьСсылку(Данные.Ссылка);
	ПередаваемыйОбъект.Номер           = Данные.Номер;
	ПередаваемыйОбъект.Дата            = Данные.Дата;
	ПередаваемыйОбъект.ПометкаУдаления = Данные.ПометкаУдаления;
	
	ПередаваемыйОбъект.Организация     = СериализоватьСсылку(СтруктураПараметров.Организация);
	
	ПередаваемыйОбъект.ВидОтчета     = Данные.ИсточникОтчета;
	ПередаваемыйОбъект.ДатаНачала    = Данные.ДатаНачала;
	ПередаваемыйОбъект.ДатаОкончания = Данные.ДатаОкончания;
	ПередаваемыйОбъект.ДатаПодписи   = Данные.ДатаПодписи;
	
	СохраненныеДанныеРеглОтчета = Данные.ДанныеОтчета.Получить();
	ДанныеОтчетаДляПередачи = ПреобразоватьДанныеРеглОтчетаБРОДляМП(Данные.ИсточникОтчета,
		Данные.ВыбраннаяФорма, СохраненныеДанныеРеглОтчета);
	
	ПередаваемыйОбъект.ДанныеОтчета = Новый ХранилищеЗначения(ДанныеОтчетаДляПередачи, Новый СжатиеДанных(9));
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьОрганизации(Данные, СтруктураПараметров)
	
	Если Данные.Ссылка <> СтруктураПараметров.Организация Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("Организация");
	ПередаваемыйОбъект.Ссылка          = СериализоватьСсылку(Данные.Ссылка);
	ПередаваемыйОбъект.Наименование    = Данные.Наименование;
	ПередаваемыйОбъект.Код             = Данные.Код;
	ПередаваемыйОбъект.ПометкаУдаления = Данные.ПометкаУдаления;
	
	
	ПередаваемыйОбъект.НаименованиеПолное        = Данные.НаименованиеПолное;
	ПередаваемыйОбъект.НаименованиеСокращенное   = Данные.НаименованиеСокращенное;
	ПередаваемыйОбъект.ИНН                       = Данные.ИНН;
	ПередаваемыйОбъект.ФамилияИП                 = Данные.ФамилияИП;
	ПередаваемыйОбъект.ИмяИП                     = Данные.ИмяИП;
	ПередаваемыйОбъект.ОтчествоИП                = Данные.ОтчествоИП;
	ПередаваемыйОбъект.КодПоОКПО                 = Данные.КодПоОКПО;
	ПередаваемыйОбъект.ИПРегистрационныйНомерПФР = Данные.ИПРегистрационныйНомерПФР;
	ПередаваемыйОбъект.КодОКВЭД2                 = Данные.КодОКВЭД2;
	ПередаваемыйОбъект.СвидетельствоСерияНомер   = Данные.СвидетельствоСерияНомер;
	ПередаваемыйОбъект.СвидетельствоДатаВыдачи   = Данные.СвидетельствоДатаВыдачи;
	ПередаваемыйОбъект.ФайлЛоготип               = СериализоватьСсылку(Данные.ФайлЛоготип);
	ПередаваемыйОбъект.ФайлПечать                = СериализоватьСсылку(Данные.ФайлПечать);
	ПередаваемыйОбъект.ФайлПодписьРуководителя   = СериализоватьСсылку(Данные.ФайлПодписьРуководителя);
	
	ПередаваемыйОбъект.ДополнительныеУсловияПоУмолчанию =
		СоздатьКлючевыеСвойстваПоСсылке(Данные.ДополнительныеУсловияПоУмолчанию, "ДополнительныеУсловия");
	
	Если ЗначениеЗаполнено(Данные.РегистрацияВНалоговомОргане) Тогда
		ДанныеРегистрацииВНалоговомОргане          = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Данные.РегистрацияВНалоговомОргане, "Код, КодПоОКТМО");
		
		ПередаваемыйОбъект.КодПоОКТМО              = ДанныеРегистрацииВНалоговомОргане.КодПоОКТМО;
		ПередаваемыйОбъект.КодНалоговогоОргана     = ДанныеРегистрацииВНалоговомОргане.Код;
	КонецЕсли; 
	ПередаваемыйОбъект.ДатаРегистрации         = Данные.ДатаРегистрации;
	
	КонтактнаяИнформацияОбъекта = УправлениеКонтактнойИнформациейБП.АдресСтруктурой(
		Данные.Ссылка,
		Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	
	ПередаваемыйОбъект.ЮрАдресОрганизации = КонтактнаяИнформацияОбъекта.ЗначенияПолей;
	
	Возврат ПередаваемыйОбъект;
КонецФункции

Функция ВыгрузитьКонтрагенты(Данные)
	
	Если Данные.ЭтоГруппа Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("Контрагент");
	ПередаваемыйОбъект.Ссылка             = СериализоватьСсылку(Данные.Ссылка);
	ПередаваемыйОбъект.Наименование       = Данные.Наименование;
	ПередаваемыйОбъект.Код                = Данные.Код;
	ПередаваемыйОбъект.ПометкаУдаления    = Данные.ПометкаУдаления;
	
	ПередаваемыйОбъект.НаименованиеПолное = Данные.НаименованиеПолное;
	ПередаваемыйОбъект.ИНН                = Данные.ИНН;
	ПередаваемыйОбъект.КПП                = Данные.КПП;
	
	ПередаваемыйОбъект.СвидетельствоСерияНомер   = Данные.СвидетельствоСерияНомер;
	ПередаваемыйОбъект.СвидетельствоДатаВыдачи   = Данные.СвидетельствоДатаВыдачи;
	
	ПередаваемыйОбъект.СтранаРегистрации   = СоздатьКлючевыеСвойстваПоСсылке(Данные.СтранаРегистрации, "СтранаМира");
	
	Если Данные.ЮридическоеФизическоеЛицо  = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		ПередаваемыйОбъект.ЮридическоеФизическоеЛицо = "ЮридическоеЛицо";
	ИначеЕсли Данные.ЮридическоеФизическоеЛицо  = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		ПередаваемыйОбъект.ЮридическоеФизическоеЛицо = "ФизическоеЛицо";
	КонецЕсли;
	
	ПередаваемыйОбъект.КодГосударственногоОргана = Данные.КодГосударственногоОргана;
	ПередаваемыйОбъект.ГосударственныйОрган      = Данные.ГосударственныйОрган;
	Если Данные.ВидГосударственногоОргана  = Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган Тогда
		ПередаваемыйОбъект.ВидГосударственногоОргана = "НалоговыйОрган";
	ИначеЕсли Данные.ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.ОрганПФР Тогда 
		ПередаваемыйОбъект.ВидГосударственногоОргана = "ОрганПФР"
	ИначеЕсли Данные.ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.ОрганФСС Тогда 
		ПередаваемыйОбъект.ВидГосударственногоОргана = "ОрганФСС"
	ИначеЕсли Данные.ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.Прочий Тогда
		ПередаваемыйОбъект.ВидГосударственногоОргана = "Прочий"
	КонецЕсли; 
	
	Для каждого СтрокаКИ Из Данные.КонтактнаяИнформация Цикл
		Если СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента ИЛИ
			СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента ИЛИ
			СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты Тогда
			
			ДобавляемаяСтрока = СоздатьОбъектXDTO("КонтактнаяИнформация.Строка");
			
			Если СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента Тогда
				ДобавляемаяСтрока.ВидКИ = "ЮридическийАдрес";
			ИначеЕсли СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента Тогда
				ДобавляемаяСтрока.ВидКИ = "Телефон";
			ИначеЕсли СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты Тогда
				ДобавляемаяСтрока.ВидКИ = "АдресЭлектроннойПочты";
			КонецЕсли;
			ДобавляемаяСтрока.ЗначенияПолей = 
				УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СокрЛП(СтрокаКИ.ЗначенияПолей), СокрЛП(СтрокаКИ.Представление), СтрокаКИ.Вид);
			ПередаваемыйОбъект.КонтактнаяИнформация.Добавить(ДобавляемаяСтрока);
		КонецЕсли;
	КонецЦикла;
		
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьНоменклатура(Данные)
	
	Если Данные.ЭтоГруппа Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("Номенклатура");
	ПередаваемыйОбъект.Ссылка             = СериализоватьСсылку(Данные.Ссылка);
	ПередаваемыйОбъект.Наименование       = Данные.Наименование;
	ПередаваемыйОбъект.Код                = Данные.Код;
	ПередаваемыйОбъект.ПометкаУдаления    = Данные.ПометкаУдаления;
	
	ПередаваемыйОбъект.НаименованиеПолное = Данные.НаименованиеПолное;
	ПередаваемыйОбъект.Услуга             = Данные.Услуга;
	ПередаваемыйОбъект.ЕдиницаИзмерения   = СоздатьКлючевыеСвойстваПоСсылке(Данные.ЕдиницаИзмерения, "ЕдиницаИзмерения");
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьКлассификаторЕдиницИзмерения(Данные)
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("ЕдиницаИзмерения");
	
	КлючевыеСвойства = СоздатьОбъектXDTO("ЕдиницаИзмеренияКлючевыеСвойства");
	КлючевыеСвойства.Ссылка             = СериализоватьСсылку(Данные.Ссылка);
	КлючевыеСвойства.Наименование       = Данные.Наименование;
	КлючевыеСвойства.Код                = Данные.Код;
	КлючевыеСвойства.ПометкаУдаления    = Данные.ПометкаУдаления;
	
	ПередаваемыйОбъект.КлючевыеСвойства   = КлючевыеСвойства;
	ПередаваемыйОбъект.НаименованиеПолное = Данные.НаименованиеПолное;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьБанковскиеСчета(Данные)
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("БанковскийСчет");
	ПередаваемыйОбъект.Ссылка              = СериализоватьСсылку(Данные.Ссылка);
	ПередаваемыйОбъект.Наименование        = Данные.Наименование;
	ПередаваемыйОбъект.Код                 = Данные.Код;
	ПередаваемыйОбъект.ПометкаУдаления     = Данные.ПометкаУдаления;
	ПередаваемыйОбъект.Владелец            = СериализоватьСсылку(Данные.Владелец);
	ПередаваемыйОбъект.ЭтоСчетОрганизации  = (ТипЗнч(Данные.Владелец) = Тип("СправочникСсылка.Организации"));
	
	ПередаваемыйОбъект.НомерСчета          = Данные.НомерСчета;
	ПередаваемыйОбъект.Банк                = СериализоватьСсылку(Данные.Банк);
	ПередаваемыйОбъект.ТекстКорреспондента = Данные.ТекстКорреспондента;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьБанки(Данные)
	
	Если Данные.ЭтоГруппа Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("Банк");
	ПередаваемыйОбъект.Ссылка          = СериализоватьСсылку(Данные.Ссылка);
	ПередаваемыйОбъект.Наименование    = Данные.Наименование;
	ПередаваемыйОбъект.Код             = Данные.Код;
	ПередаваемыйОбъект.ПометкаУдаления = Данные.ПометкаУдаления;
	
	ПередаваемыйОбъект.КоррСчет        = Данные.КоррСчет;
	ПередаваемыйОбъект.Город           = Данные.Город;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьНастройкиОбменСБанками(Данные, СтруктураПараметров)
	
	Если Данные.Организация <> СтруктураПараметров.Организация Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("НастройкаОбменаСБанками");
	ПередаваемыйОбъект.Ссылка          = СериализоватьСсылку(Данные.Ссылка);
	ПередаваемыйОбъект.Наименование    = Данные.Наименование;
	ПередаваемыйОбъект.ПометкаУдаления = Данные.ПометкаУдаления;
	
	ПередаваемыйОбъект.Организация              = СериализоватьСсылку(СтруктураПараметров.Организация);
	ПередаваемыйОбъект.Банк                     = СериализоватьСсылку(Данные.Банк);
	ПередаваемыйОбъект.АдресСервера             = Данные.АдресСервера;
	ПередаваемыйОбъект.ВерсияФормата            = Данные.ВерсияФормата;
	ПередаваемыйОбъект.ИдентификаторОрганизации = Данные.ИдентификаторОрганизации;
	ПередаваемыйОбъект.ИмяПользователя          = Данные.ИмяПользователя;
	ПередаваемыйОбъект.Недействительна          = Данные.Недействительна;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьСтраныМира(Данные)
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("СтранаМира");
	
	КлючевыеСвойства = СоздатьОбъектXDTO("СтранаМираКлючевыеСвойства");
	КлючевыеСвойства.Ссылка             = СериализоватьСсылку(Данные.Ссылка);
	КлючевыеСвойства.Наименование       = Данные.Наименование;
	КлючевыеСвойства.Код                = Данные.Код;
	КлючевыеСвойства.ПометкаУдаления    = Данные.ПометкаУдаления;
	
	ПередаваемыйОбъект.КлючевыеСвойства   = КлючевыеСвойства;
	ПередаваемыйОбъект.НаименованиеПолное = Данные.НаименованиеПолное;
	ПередаваемыйОбъект.КодАльфа2          = Данные.КодАльфа2;
	ПередаваемыйОбъект.КодАльфа3          = Данные.КодАльфа3;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьДополнительныеУсловия(Данные)
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("ДополнительныеУсловия");
	КлючевыеСвойства = СоздатьОбъектXDTO("ДополнительныеУсловияКлючевыеСвойства");
	КлючевыеСвойства.Ссылка          = СериализоватьСсылку(Данные.Ссылка);
	КлючевыеСвойства.Наименование    = Данные.Наименование;
	КлючевыеСвойства.Код             = Данные.Код;
	КлючевыеСвойства.ПометкаУдаления = Данные.ПометкаУдаления;
	КлючевыеСвойства.ИмяМакета       = Данные.ИмяМакета;
	
	ПередаваемыйОбъект.КлючевыеСвойства   = КлючевыеСвойства;
	ПередаваемыйОбъект.ТекстУсловий       = Данные.ТекстУсловий;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьОрганизацииПрисоединенныеФайлы(Данные, СтруктураПараметров)
	
	Если Данные.ВладелецФайла <> СтруктураПараметров.Организация Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("ПрисоединенныйФайлОрганизация");
	ПередаваемыйОбъект.Ссылка          = СериализоватьСсылку(Данные.Ссылка);
	ПередаваемыйОбъект.ВладелецФайла   = СериализоватьСсылку(Данные.ВладелецФайла);
	ПередаваемыйОбъект.Наименование    = Данные.Наименование;
	ПередаваемыйОбъект.ПометкаУдаления = Данные.ПометкаУдаления;
	
	ПередаваемыйОбъект.ДатаСоздания    = Данные.ДатаСоздания;
	ПередаваемыйОбъект.Размер          = Данные.Размер;
	ПередаваемыйОбъект.Описание        = Данные.Описание;
	ПередаваемыйОбъект.Расширение      = Данные.Расширение;
	
	ПередаваемыйОбъект.ХранимыйФайл    = Base64Строка(ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(Данные.Ссылка));
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьДатаНачалаРаботы(СтруктураПараметров)
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("ДатаНачалаРаботы");
	ПередаваемыйОбъект.ДатаНачалаРаботыЗначение = СтруктураПараметров.ДатаНачалаРаботы;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьПараметрыОбменСБанками(Данные)
	
	ПередаваемыйОбъект = Неопределено;
	
	Если Данные.Выбран() Тогда
		Данные.Прочитать();
	КонецЕсли;
	
	Если Данные.Количество() > 0 Тогда
		ПараметрыОбменСБанками = Данные[0];
		ПередаваемыйОбъект = СоздатьОбъектXDTO("ЗаписьПараметрыОбменСБанками");
		ЗаполнитьЗначенияСвойств(ПередаваемыйОбъект, ПараметрыОбменСБанками, , "НастройкаОбмена"); 
		ПередаваемыйОбъект.НастройкаОбмена = СериализоватьСсылку(ПараметрыОбменСБанками.НастройкаОбмена);
	КонецЕсли;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

Функция ВыгрузитьСтатусыДокументов(Данные, СтруктураПараметров)
	
	Если Данные.Выбран() Тогда
		Данные.Прочитать();
	КонецЕсли;
	
	Если Данные.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеЗаписи = Данные[0];
	
	Если ДанныеЗаписи.Организация <> СтруктураПараметров.Организация Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПередаваемаяЗапись = Неопределено;
	Если ТипЗнч(ДанныеЗаписи.Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ПередаваемаяЗапись = СоздатьОбъектXDTO("СтатусДокумента.РеализацияТоваровУслуг");
		
		ПередаваемаяЗапись.Организация = СериализоватьСсылку(ДанныеЗаписи.Организация);
		ПередаваемаяЗапись.Документ    = СериализоватьСсылку(ДанныеЗаписи.Документ);
		
		Если ДанныеЗаписи.Статус = Перечисления.СтатусыДокументовРеализации.Подписан Тогда
			ПередаваемаяЗапись.Статус = "Подписан";
		ИначеЕсли ДанныеЗаписи.Статус = Перечисления.СтатусыДокументовРеализации.НеПодписан Тогда
			ПередаваемаяЗапись.Статус = "НеПодписан";
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДанныеЗаписи.Документ) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		ПередаваемаяЗапись = СоздатьОбъектXDTO("СтатусДокумента.СчетНаОплатуПокупателю");
		
		ПередаваемаяЗапись.Организация = СериализоватьСсылку(ДанныеЗаписи.Организация);
		ПередаваемаяЗапись.Документ = СериализоватьСсылку(ДанныеЗаписи.Документ);
		
		Если ДанныеЗаписи.Статус = Перечисления.СтатусОплатыСчета.НеОплачен Тогда
			ПередаваемаяЗапись.Статус = "НеОплачен";
		ИначеЕсли ДанныеЗаписи.Статус = Перечисления.СтатусОплатыСчета.Оплачен Тогда
			ПередаваемаяЗапись.Статус = "Оплачен";
		ИначеЕсли ДанныеЗаписи.Статус = Перечисления.СтатусОплатыСчета.ОплаченЧастично Тогда
			ПередаваемаяЗапись.Статус = "ОплаченЧастично";
		ИначеЕсли ДанныеЗаписи.Статус = Перечисления.СтатусОплатыСчета.Отменен Тогда
			ПередаваемаяЗапись.Статус = "Отменен";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПередаваемаяЗапись;
	
КонецФункции

Функция ВыгрузитьУдалениеОбъекта(Данные, СтруктураПараметров)
	
	ПередаваемыйОбъект = СоздатьОбъектXDTO("УдалениеОбъекта");
	ПередаваемыйОбъект.Ссылка = СериализоватьСсылку(Данные.Ссылка);
	
	Если ТипЗнч(Данные.Ссылка) = Тип("СправочникСсылка.Организации")
		И Данные.Ссылка <> СтруктураПараметров.Организация Тогда
		ПередаваемыйОбъект.ТипОбъекта = "Организация";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("СправочникСсылка.Контрагенты") Тогда
		ПередаваемыйОбъект.ТипОбъекта = "Контрагент";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		ПередаваемыйОбъект.ТипОбъекта = "БанковскийСчет";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("СправочникСсылка.Банки") Тогда
		ПередаваемыйОбъект.ТипОбъекта = "Банк";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("СправочникСсылка.СтраныМира") Тогда
		ПередаваемыйОбъект.ТипОбъекта = "СтранаМира";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("СправочникСсылка.Номенклатура") Тогда
		ПередаваемыйОбъект.ТипОбъекта = "Номенклатура";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		ПередаваемыйОбъект.ТипОбъекта = "ЕдиницаИзмерения";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("СправочникСсылка.ДополнительныеУсловия") Тогда
		ПередаваемыйОбъект.ТипОбъекта = "ДополнительныеУсловия";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("СправочникСсылка.ОрганизацииПрисоединенныеФайлы") Тогда
		ПередаваемыйОбъект.ТипОбъекта = "ПрисоединенныйФайлОрганизация";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("СправочникСсылка.НастройкиОбменСБанками") Тогда
		ПередаваемыйОбъект.ТипОбъекта = "НастройкаОбменаСБанками";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет") Тогда
		ПередаваемыйОбъект.ТипОбъекта = "ПоступлениеНаРасчетныйСчет";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
		ПередаваемыйОбъект.ТипОбъекта = "СписаниеСРасчетногоСчета";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("ДокументСсылка.ЗаписьКУДиР") Тогда
		ПередаваемыйОбъект.ТипОбъекта = "ЗаписьКУДиР";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		ПередаваемыйОбъект.ТипОбъекта = "СчетНаОплатуПокупателю";
	ИначеЕсли ТипЗнч(Данные.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ПередаваемыйОбъект.ТипОбъекта = "РеализацияТоваровУслуг";
	Иначе
		ПередаваемыйОбъект = Неопределено;
	КонецЕсли;
	
	Возврат ПередаваемыйОбъект;
	
КонецФункции

#КонецОбласти

