////////////////////////////////////////////////////////////////////////////////
// ОбменСКонтрагентамиПереопределяемый: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

// Заполняет массив актуальными видами электронных документов для прикладного решения.
//
// Параметры:
//  Массив - Массив - виды актуальных ЭД.
//
Процедура ПолучитьАктуальныеВидыЭД(Массив) Экспорт
	
	Массив.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
	Массив.Добавить(Перечисления.ВидыЭД.ТОРГ12Покупатель);
	Массив.Добавить(Перечисления.ВидыЭД.АктИсполнитель);
	Массив.Добавить(Перечисления.ВидыЭД.АктЗаказчик);
	Массив.Добавить(Перечисления.ВидыЭД.АктНаПередачуПрав);
	Массив.Добавить(Перечисления.ВидыЭД.СчетФактура);
	Массив.Добавить(Перечисления.ВидыЭД.КорректировочныйСчетФактура);
	Массив.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель);
	Массив.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель);
	Массив.Добавить(Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара);
	Массив.Добавить(Перечисления.ВидыЭД.СчетНаОплату);
	
КонецПроцедуры

// Определяет параметры электронного документа по типу владельца.
//
// Параметры:
//  Источник - Объект, ЛюбаяСсылка - документ или справочник источника.
//  ПараметрыЭД - Структура - параметры источника, необходимых для определения
//                настроек обмена ЭД. Обязательные параметры: НаправлениеЭД, ВидЭД,
//                Контрагент, СоглашениеЭД или Организация.
//  ФорматCML - Булево - если истина, то для формирования ЭД будут использоваться схемы CML (не ФНС),
//    в параметрах должны быть указаны соответствующие виды ЭД.
//
Процедура ЗаполнитьПараметрыЭДПоИсточнику(Источник, ПараметрыЭД, ФорматCML = Ложь) Экспорт
	
	ТипИсточника = ТипЗнч(Источник);
	
	Если ТипИсточника = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Источник,
			"Организация, Контрагент, ДоговорКонтрагента");
		
		ПараметрыЭД.ВидЭД				 = Перечисления.ВидыЭД.СчетНаОплату;
		ПараметрыЭД.НаправлениеЭД		 = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.Организация			 = ЗначенияРеквизитов.Организация;
		ПараметрыЭД.Контрагент			 = ЗначенияРеквизитов.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента	 = ЗначенияРеквизитов.ДоговорКонтрагента;
		
	ИначеЕсли ТипИсточника = Тип("ДокументОбъект.СчетНаОплатуПокупателю") Тогда
		
		ПараметрыЭД.ВидЭД				 = Перечисления.ВидыЭД.СчетНаОплату;
		ПараметрыЭД.НаправлениеЭД		 = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.Организация			 = Источник.Организация;
		ПараметрыЭД.Контрагент			 = Источник.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента	 = Источник.ДоговорКонтрагента;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Источник,
			"Организация, Контрагент, ДоговорКонтрагента");
		
		ПараметрыЭД.ВидЭД				 = Перечисления.ВидыЭД.СчетНаОплату;
		ПараметрыЭД.НаправлениеЭД		 = Перечисления.НаправленияЭД.Входящий;
		ПараметрыЭД.Организация			 = ЗначенияРеквизитов.Организация;
		ПараметрыЭД.Контрагент			 = ЗначенияРеквизитов.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента	 = ЗначенияРеквизитов.ДоговорКонтрагента;
		
	ИначеЕсли  ТипИсточника = Тип("ДокументОбъект.СчетНаОплатуПоставщика") Тогда
		
		ПараметрыЭД.ВидЭД				 = Перечисления.ВидыЭД.СчетНаОплату;
		ПараметрыЭД.НаправлениеЭД		 = Перечисления.НаправленияЭД.Входящий;
		ПараметрыЭД.Организация			 = Источник.Организация;
		ПараметрыЭД.Контрагент			 = Источник.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента	 = Источник.ДоговорКонтрагента;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Источник,
			"Организация, Контрагент, ДоговорКонтрагента");
		
		Если ФорматCML Тогда
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12;
		Иначе
			ПараметрыЭД.ВидЭД = ЭлектронноеВзаимодействиеБП.ВидЭлектронногоДокументаРеализации(Источник);
		КонецЕсли;
		
		ПараметрыЭД.НаправлениеЭД		 = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.Организация			 = ЗначенияРеквизитов.Организация;
		ПараметрыЭД.Контрагент			 = ЗначенияРеквизитов.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента	 = ЗначенияРеквизитов.ДоговорКонтрагента;
		
	ИначеЕсли ТипИсточника = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		
		Если ФорматCML Тогда
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12;
		Иначе
			ПараметрыЭД.ВидЭД = ЭлектронноеВзаимодействиеБП.ВидЭлектронногоДокументаРеализации(Источник);
		КонецЕсли;
		
		ПараметрыЭД.НаправлениеЭД		 = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.Организация			 = Источник.Организация;
		ПараметрыЭД.Контрагент			 = Источник.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента	 = Источник.ДоговорКонтрагента;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Источник,
			"Организация, Контрагент, ДоговорКонтрагента");
		
		Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик Тогда
			
			ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		Иначе
			ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
		КонецЕсли;
		
		ПараметрыЭД.Организация			 = ЗначенияРеквизитов.Организация;
		ПараметрыЭД.Контрагент			 = ЗначенияРеквизитов.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента	 = ЗначенияРеквизитов.ДоговорКонтрагента;
		
	ИначеЕсли ТипИсточника = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
		
		Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик Тогда
			
			ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		Иначе
			ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
		КонецЕсли;
		
		ПараметрыЭД.Организация			 = Источник.Организация;
		ПараметрыЭД.Контрагент			 = Источник.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента	 = Источник.ДоговорКонтрагента;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Источник,
			"Организация, Контрагент, ДоговорКонтрагента, ДокументОснование");
		
		Если ЭтоКорректировочныйДокумент(Источник) Тогда
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
		Иначе
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура;
		КонецЕсли;
		
		ПараметрыЭД.НаправлениеЭД		 = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.Организация			 = ЗначенияРеквизитов.Организация;
		ПараметрыЭД.Контрагент			 = ЗначенияРеквизитов.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента	 = ЗначенияРеквизитов.ДоговорКонтрагента;
		
		ДокументОснование = ЗначенияРеквизитов.ДокументОснование;
		Если ЗначениеЗаполнено(ДокументОснование)
			И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
			
			РеквизитыОснования = Новый Структура("Контрагент");
			Если ДокументОснование.Метаданные().Реквизиты.Найти("Договор") <> Неопределено Тогда
				РеквизитыОснования.Вставить("Договор"); 
			КонецЕсли;
			ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, РеквизитыОснования);
			ПараметрыЭД.Контрагент = ДанныеДокумента.Контрагент;
			Если ДанныеДокумента.Свойство("Договор") Тогда
				ПараметрыЭД.ДоговорКонтрагента = ДанныеДокумента.Договор;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументОбъект.СчетФактураВыданный") Тогда
		
		Если ЭтоКорректировочныйДокумент(Источник) Тогда
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
		Иначе
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура;
		КонецЕсли;
		
		ПараметрыЭД.НаправлениеЭД		 = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.Организация			 = Источник.Организация;
		ПараметрыЭД.Контрагент			 = Источник.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента	 = Источник.ДоговорКонтрагента;
		
		ДокументОснование = Источник.ДокументОснование;
		Если ЗначениеЗаполнено(ДокументОснование)
			И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
			
			РеквизитыОснования = Новый Структура("Контрагент");
			Если ДокументОснование.Метаданные().Реквизиты.Найти("Договор") <> Неопределено Тогда
				РеквизитыОснования.Вставить("Договор"); 
			КонецЕсли;
			ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, РеквизитыОснования);
			ПараметрыЭД.Контрагент = ДанныеДокумента.Контрагент;
			Если ДанныеДокумента.Свойство("Договор") Тогда
				ПараметрыЭД.ДоговорКонтрагента = ДанныеДокумента.Договор;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Источник,
			"Организация, Контрагент, ДоговорКонтрагента");
		
		Если ЭлектронноеВзаимодействиеБП.ЭтоКорректировочныйДокумент(Источник) Тогда
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
		Иначе
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура;
		КонецЕсли;
		
		ПараметрыЭД.НаправлениеЭД		 = Перечисления.НаправленияЭД.Входящий;
		ПараметрыЭД.Организация			 = ЗначенияРеквизитов.Организация;
		ПараметрыЭД.Контрагент			 = ЗначенияРеквизитов.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента	 = ЗначенияРеквизитов.ДоговорКонтрагента;
		
	ИначеЕсли ТипИсточника = Тип("ДокументОбъект.СчетФактураПолученный") Тогда
		
		Если ЭлектронноеВзаимодействиеБП.ЭтоКорректировочныйДокумент(Источник) Тогда
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
		Иначе
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура;
		КонецЕсли;
		
		ПараметрыЭД.НаправлениеЭД		 = Перечисления.НаправленияЭД.Входящий;
		ПараметрыЭД.Организация			 = Источник.Организация;
		ПараметрыЭД.Контрагент			 = Источник.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента	 = Источник.ДоговорКонтрагента;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Источник,
			"Организация, Контрагент, ДоговорКонтрагента");
		
		ПараметрыЭД.ВидЭД = ЭлектронноеВзаимодействиеБП.ВидЭлектронногоДокументаКорректировки(Источник);
		
		ПараметрыЭД.НаправлениеЭД		 = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.Организация			 = ЗначенияРеквизитов.Организация;
		ПараметрыЭД.Контрагент			 = ЗначенияРеквизитов.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента	 = ЗначенияРеквизитов.ДоговорКонтрагента;
		
	ИначеЕсли ТипИсточника = Тип("ДокументОбъект.КорректировкаРеализации") Тогда
		
		ПараметрыЭД.ВидЭД = ЭлектронноеВзаимодействиеБП.ВидЭлектронногоДокументаКорректировки(Источник);
		
		ПараметрыЭД.НаправлениеЭД		 = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.Организация			 = Источник.Организация;
		ПараметрыЭД.Контрагент			 = Источник.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента	 = Источник.ДоговорКонтрагента;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Источник,
			"Организация, Контрагент, ДоговорКонтрагента");
		
		ПараметрыЭД.НаправлениеЭД		 = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.Организация			 = ЗначенияРеквизитов.Организация;
		ПараметрыЭД.Контрагент			 = ЗначенияРеквизитов.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента	 = ЗначенияРеквизитов.ДоговорКонтрагента;
	
	ИначеЕсли ТипИсточника = Тип("ДокументОбъект.КорректировкаПоступления") Тогда
		 
		ПараметрыЭД.НаправлениеЭД		 = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.Организация			 = Источник.Организация;
		ПараметрыЭД.Контрагент			 = Источник.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента	 = Источник.ДоговорКонтрагента;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Источник,
			"Организация, Контрагент, ДоговорКонтрагента");
		
		ПараметрыЭД.ВидЭД				 = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара;
		ПараметрыЭД.НаправлениеЭД		 = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.Организация			 = ЗначенияРеквизитов.Организация;
		ПараметрыЭД.Контрагент			 = ЗначенияРеквизитов.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента	 = ЗначенияРеквизитов.ДоговорКонтрагента;
		
	ИначеЕсли ТипИсточника = Тип("ДокументОбъект.ОтчетКомитентуОПродажах") Тогда
		
		ПараметрыЭД.ВидЭД				 = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара;
		ПараметрыЭД.НаправлениеЭД		 = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.Организация			 = Источник.Организация;
		ПараметрыЭД.Контрагент			 = Источник.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента	 = Источник.ДоговорКонтрагента;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Источник,
			"Организация, Контрагент, ДоговорКонтрагента");
		
		ПараметрыЭД.ВидЭД				 = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара;
		ПараметрыЭД.НаправлениеЭД		 = Перечисления.НаправленияЭД.Входящий;
		ПараметрыЭД.Организация			 = ЗначенияРеквизитов.Организация;
		ПараметрыЭД.Контрагент			 = ЗначенияРеквизитов.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента	 = ЗначенияРеквизитов.ДоговорКонтрагента;
		
	ИначеЕсли ТипИсточника = Тип("ДокументОбъект.ОтчетКомиссионераОПродажах") Тогда
		
		ПараметрыЭД.ВидЭД				 = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара;
		ПараметрыЭД.НаправлениеЭД		 = Перечисления.НаправленияЭД.Входящий;
		ПараметрыЭД.Организация			 = Источник.Организация;
		ПараметрыЭД.Контрагент			 = Источник.Контрагент;
		ПараметрыЭД.ДоговорКонтрагента	 = Источник.ДоговорКонтрагента;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Определение соответствий объектов библиотеки ЭД и прикладного решения.

// Определяет имя реквизита владельца справочника НоменклатураПоставщика.
//
// Параметры:
//  ИмяРеквизитаВладельца - строка - имя реквизита владельца.
//
Процедура ОпределитьИмяРеквизитаВладельцаНоменклатурыПоставщиков(ИмяРеквизитаВладельца) Экспорт
	
	ИмяРеквизитаВладельца = "Контрагент";
	
КонецПроцедуры

// Получает значение перечисления по имени объектов метаданных.
// 
// Параметры:
//  СоответствиеПеречислений - Соответствие - соответствие библиотечных и прикладных перечислений.
//
Процедура ПолучитьСоответствиеПеречислений(СоответствиеПеречислений) Экспорт
	
	СоответствиеПеречислений.Вставить("НДС", "СтавкиНДС");
	СоответствиеПеречислений.Вставить("ЮрФизЛицо", "ЮридическоеФизическоеЛицо");

КонецПроцедуры

// В процедуре указывается соответствие строковых представлений ставок НДС (используемые в БЭД)
// с прикладными значениями этих ставок.
//
// Параметры:
//   Соответствие - Соответствие - заполняемое соответствие ставок НДС.
//
// Пример:
//   Соответствие.Вставить("0",       Перечисления.СтавкиНДС.НДС0);
//   Соответствие.Вставить("10",      Перечисления.СтавкиНДС.НДС10);
//   Соответствие.Вставить("18",      Перечисления.СтавкиНДС.НДС18);
//   Соответствие.Вставить("10/110",  Перечисления.СтавкиНДС.НДС10_110);
//   Соответствие.Вставить("18/118",  Перечисления.СтавкиНДС.НДС18_118);
//   Соответствие.Вставить("без НДС", Перечисления.СтавкиНДС.БезНДС);
//
Процедура ЗаполнитьСоответствиеСтавокНДС(Соответствие) Экспорт
	
	Соответствие.Вставить("0",       Перечисления.СтавкиНДС.НДС0);
	Соответствие.Вставить("10",      Перечисления.СтавкиНДС.НДС10);
	Соответствие.Вставить("18",      Перечисления.СтавкиНДС.НДС18);
	Соответствие.Вставить("20",      Перечисления.СтавкиНДС.НДС20);
	Соответствие.Вставить("10/110",  Перечисления.СтавкиНДС.НДС10_110);
	Соответствие.Вставить("18/118",  Перечисления.СтавкиНДС.НДС18_118);
	Соответствие.Вставить("20/120",  Перечисления.СтавкиНДС.НДС20_120);
	Соответствие.Вставить("без НДС", Перечисления.СтавкиНДС.БезНДС);
	
	Соответствие.Вставить(Перечисления.СтавкиНДС.НДС0,		 "0");
	Соответствие.Вставить(Перечисления.СтавкиНДС.НДС10,		 "10");
	Соответствие.Вставить(Перечисления.СтавкиНДС.НДС18,		 "18");
	Соответствие.Вставить(Перечисления.СтавкиНДС.НДС20,		 "20");
	Соответствие.Вставить(Перечисления.СтавкиНДС.НДС10_110,	 "10/110");
	Соответствие.Вставить(Перечисления.СтавкиНДС.НДС18_118,	 "18/118");
	Соответствие.Вставить(Перечисления.СтавкиНДС.НДС20_120,	 "20/120");
	Соответствие.Вставить(Перечисления.СтавкиНДС.БезНДС,	 "без НДС");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Настройка обмена ЭД.

// Определяет, является ли объект корректировочным документом.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на документ учета.
//
// Возвращаемое значение:
//  Результат - Булево - Истина, объект является ли корректировочным документом.
//
Функция ЭтоКорректировочныйДокумент(СсылкаНаОбъект) Экспорт
	
	Возврат ЭлектронноеВзаимодействиеБП.ЭтоКорректировочныйДокумент(СсылкаНаОбъект);
	
КонецФункции

// Процедура возвращает признак использования справочника Партнеров в качестве
// дополнительной аналитики к справочнику Контрагенты.
//
// Параметры:
//  ИспользуетсяСправочникПартнеры - Булево - флаг использования в библиотеке справочника Партнеры.
//
Процедура ДополнительнаяАналитикаКонтрагентовСправочникПартнеры(ИспользуетсяСправочникПартнеры) Экспорт
	
	ИспользуетсяСправочникПартнеры = Ложь;
	
КонецПроцедуры

// Процедура возвращает признак использования справочника "Характеристики номенклатуры" в качестве
// дополнительной аналитики к справочнику Номенклатура.
//
// Параметры:
//  ИспользуетсяСправочникХарактеристикиНоменклатуры - Булево - флаг использования справочника "Характеристики номенклатуры".
//
Процедура ДополнительнаяАналитикаСправочникХарактеристикиНоменклатуры(ИспользуетсяСправочникХарактеристикиНоменклатуры) Экспорт
	
	ИспользуетсяСправочникХарактеристикиНоменклатуры = Ложь;
	
КонецПроцедуры

// Процедура возвращает признак использования справочника "Упаковка номенклатуры" в качестве
// дополнительной аналитики к справочнику Номенклатура.
//
// Параметры:
//  ИспользуетсяСправочникУпаковкиНоменклатуры - Булево - флаг использования справочника "Упаковки номенклатуры".
//
Процедура ДополнительнаяАналитикаСправочникУпаковкиНоменклатуры(ИспользуетсяСправочникУпаковкиНоменклатуры) Экспорт
	
	ИспользуетсяСправочникУпаковкиНоменклатуры = Ложь;
	
КонецПроцедуры

// Заполняет список команд ЭДО в прикладном решении.
// 
// Параметры:
//  СоставКомандЭДО - Структура - структура состава команд ЭДО.
//    Исходящие - Массив - состав объектов, например "Документ.РеализацияТоваровУслуг".
//    Входящие - Массив - состав объектов.
//    БезПодписи - Массив - состав объектов для обмена без ЭП.
//    Интеркампани - Массив - состав объектов Интеркампани.
//
Процедура ПодготовитьСтруктуруОбъектовКомандЭДО(СоставКомандЭДО) Экспорт
	
	СоставКомандЭДО.Исходящие.Добавить("Документ.КорректировкаРеализации");
	СоставКомандЭДО.Исходящие.Добавить("Документ.ОтчетКомитентуОПродажах");
	СоставКомандЭДО.Исходящие.Добавить("Документ.РеализацияТоваровУслуг");
	СоставКомандЭДО.Исходящие.Добавить("Документ.СчетНаОплатуПокупателю");
	СоставКомандЭДО.Исходящие.Добавить("Документ.СчетФактураВыданный");
	
	СоставКомандЭДО.Входящие.Добавить("Документ.КорректировкаПоступления");
	СоставКомандЭДО.Входящие.Добавить("Документ.ОтчетКомиссионераОПродажах");
	СоставКомандЭДО.Входящие.Добавить("Документ.ПоступлениеТоваровУслуг");
	СоставКомандЭДО.Входящие.Добавить("Документ.СчетНаОплатуПоставщика");
	СоставКомандЭДО.Входящие.Добавить("Документ.СчетФактураПолученный");
	
	СоставКомандЭДО.БезПодписи.Добавить("Документ.ОтчетКомитентуОПродажах");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.РеализацияТоваровУслуг");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.СчетНаОплатуПокупателю");
	
	СоставКомандЭДО.БезПодписи.Добавить("Документ.ОтчетКомиссионераОПродажах");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.ПоступлениеТоваровУслуг");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.СчетНаОплатуПоставщика");
	
КонецПроцедуры
///////////////////////////////////////////////////////////////////////////////
// Формирование данных для электронных документов.

// Работа с деревом данных ФНС.

// Подготавливает данные для электронного документа типа УПД (информация продавца).
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо 
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
///
Процедура ЗаполнитьДанныеДляУПДИнформацияПродавцаФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		СчетФактура = СсылкаНаОбъект;
	Иначе
		
		Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "ДоговорКонтрагента.ВидДоговора")
				= Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
				
			СтруктураЭД.Вставить("ВидОперацииЭД", Перечисления.ВидыОперацийЭД.Комиссия);
			ЗаполнитьДанныеДляДОПИнформацияПродавцаФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных);
			
			Возврат;
				
		КонецЕсли;
		
		СчетФактура = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(СсылкаНаОбъект);
	КонецЕсли;
	
	МассивСчетовФактур = Новый Массив();
	МассивСчетовФактур.Добавить(СчетФактура);
	ТаблицаСчетовФактур = УчетНДС.ПолучитьДанныеДляПечатиСчетаФактуры1137(
			МассивСчетовФактур, Документы.СчетФактураВыданный.ТекстЗапросаПечатьСчетовФактур(Истина, Истина), Истина);
	Если ТаблицаСчетовФактур = Неопределено
			ИЛИ ТаблицаСчетовФактур.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДляФормированияЭД = ТаблицаСчетовФактур[0];
	
	ЭлектронноеВзаимодействиеБП.ЗаполнитьДанныеСчетаФактурыУПД(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных);
	
	Если ДанныеДляФормированияЭД.ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда
	
		ЭлектронноеВзаимодействиеБП.ЗаполнитьДанныеПервичногоДокументаУПД(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных);
		
	КонецЕсли;
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа УПД (информация продавца).
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо 
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеДляДОПИнформацияПродавцаФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВидСчетаФактуры") = "Авансовый" Тогда
		Возврат;
	КонецЕсли;
	
	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить(СсылкаНаОбъект);
	ТаблицаДанных = УчетНДС.ПолучитьДанныеДляПечатиУниверсальногоПередаточногоДокумента(
		МассивДокументов, Документы.РеализацияТоваровУслуг.ТекстЗапросаПечатьУниверсальныхПередаточныхДокументов(), Истина);
	ДанныеДляФормированияЭД = ТаблицаДанных[0];
	
	Если Не СтруктураЭД.Свойство("ВидОперацииЭД") 
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "ДоговорКонтрагента.ВидДоговора")= Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		
		СтруктураЭД.Вставить("ВидОперацииЭД", Перечисления.ВидыОперацийЭД.Комиссия);
		
	КонецЕсли;
	
	ЭлектронноеВзаимодействиеБП.ЗаполнитьДанныеПервичногоДокументаУПД(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных);
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа УПД (информация покупателя).
//
// Параметры:
//  СсылкаНаЭД - Ссылка - ссылка на ЭД, по которому необходимо сформировать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеДляУПДИнформацииПокупателяФНС(СсылкаНаЭД, СтруктураЭД, ДеревоДанных) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВладелецЭД", СтруктураЭД.ВладелецЭД);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭлектронныйДокументВходящийДокументыОснования.ДокументОснование,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЭлектронныйДокументВходящийДокументыОснования.ДокументОснование) = ТИП(Документ.ПоступлениеТоваровУслуг)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Порядок
	|ПОМЕСТИТЬ ВТОснование
	|ИЗ
	|	Документ.ЭлектронныйДокументВходящий.ДокументыОснования КАК ЭлектронныйДокументВходящийДокументыОснования
	|ГДЕ
	|	ЭлектронныйДокументВходящийДокументыОснования.Ссылка = &ВладелецЭД
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Дата,
	|	ПоступлениеТоваровУслуг.Организация.НаименованиеПолное,
	|	ПоступлениеТоваровУслуг.Товары.(
	|		НомерСтроки
	|	),
	|	ПоступлениеТоваровУслуг.Услуги.(
	|		НомерСтроки
	|	)
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОснование КАК ВТОснование
	|		ПО ПоступлениеТоваровУслуг.Ссылка = ВТОснование.ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетФактураПолученный.Дата,
	|	СчетФактураПолученный.Организация.НаименованиеПолное
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОснование КАК ВТОснование
	|		ПО СчетФактураПолученный.Ссылка = ВТОснование.ДокументОснование";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	СодержаниеОперации =			 "-";
	ДатаПолученияТоваров =			 ТекущаяДатаСеанса();
	ОрганизацияНаименованиеПолное =	 "-";
	Если Не РезультатЗапроса[1].Пустой() Тогда // В основаниях есть документ поступления
		
		Выборка = РезультатЗапроса[1].Выбрать();
		Выборка.Следующий();
		СоставСодержания = Новый Массив;
		Если Не Выборка.Товары.Пустой() Тогда
			СоставСодержания.Добавить(НСтр("ru = 'Товары принял без претензий.'"));
		КонецЕсли;
		Если Не Выборка.Услуги.Пустой() > 0 Тогда
			СоставСодержания.Добавить(НСтр("ru = 'Услуги получены, претензий нет.'"));
		КонецЕсли;
		
		СодержаниеОперации =			 СтрСоединить(СоставСодержания, " ");
		ДатаПолученияТоваров =			 Выборка.Дата;
		ОрганизацияНаименованиеПолное =	 Выборка.ОрганизацияНаименованиеПолное;
		
	ИначеЕсли Не РезультатЗапроса[2].Пустой() Тогда // основание - СФ
		
		Выборка = РезультатЗапроса[2].Выбрать();
		ДатаПолученияТоваров =			 Выборка.Дата;
		ОрганизацияНаименованиеПолное =	 Выборка.ОрганизацияНаименованиеПолное;
		
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СоставительДокументаНаименование", ОрганизацияНаименованиеПолное);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаПолученияТоваров", ДатаПолученияТоваров);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации",   СодержаниеОперации);
	
КонецПроцедуры

// Подготавливает данЗные для электронного документа типа УПД (информация продавца).
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо 
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеДляСЧФИнформацияПродавцаФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	Если СтруктураЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
		И СсылкаНаОбъект.ВидОперации = Перечисления.ВидыОперацийЭД.Комиссия Тогда
		Возврат;
	КонецЕсли;
	
	СчетФактура = СсылкаНаОбъект;
	
	МассивСчетовФактур = Новый Массив();
	МассивСчетовФактур.Добавить(СчетФактура);
	
	ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетФактура, "ДокументОснование");
	ЭтоПеревыставленнаяСФ = (ЗначениеЗаполнено(ДокументОснование)
		И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах"));
	Если ЭтоПеревыставленнаяСФ Тогда
		ТаблицаСчетовФактур = УчетНДС.ПолучитьДанныеДляПечатиСчетаФактуры1137(
			МассивСчетовФактур, Документы.СчетФактураВыданный.ТекстЗапросаПечатьСчетовФактур());
	Иначе
		ТаблицаСчетовФактур = УчетНДС.ПолучитьДанныеДляПечатиСчетаФактуры1137(
			МассивСчетовФактур, Документы.СчетФактураВыданный.ТекстЗапросаПечатьСчетовФактур(Истина, Истина), Истина);
	КонецЕсли;
			
	Если ТаблицаСчетовФактур = Неопределено
			ИЛИ ТаблицаСчетовФактур.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДляФормированияЭД = ТаблицаСчетовФактур[0];
	Если ЭтоПеревыставленнаяСФ Тогда
		ДанныеДляФормированияЭД.ДанныеШапки.Комиссионер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Контрагент");
	КонецЕсли;
	
	ЭлектронноеВзаимодействиеБП.ЗаполнитьДанныеСчетаФактурыУПД(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных);
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа УКД (информация продавца).
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеДляУКДИнформацияПродавцаФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		СчетФактура = СсылкаНаОбъект;
	Иначе
		СчетФактура = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(СсылкаНаОбъект);
	КонецЕсли;
	
	МассивСчетовФактур = Новый Массив();
	МассивСчетовФактур.Добавить(СчетФактура);
	ТаблицаСчетовФактур = УчетНДС.ПолучитьДанныеДляПечатиКорректировочныхСчетовФактур1137(
			МассивСчетовФактур, Документы.СчетФактураВыданный.ТекстЗапросаПечатьКорректировочныхСчетовФактур(Истина, Истина, Истина), Истина);
	Если ТаблицаСчетовФактур = Неопределено
			ИЛИ ТаблицаСчетовФактур.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДляФормированияЭД = ТаблицаСчетовФактур[0];
	
	ЭлектронноеВзаимодействиеБП.ЗаполнитьДанныеКорректировочногоСчетаФактурыУКД(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных);
	
	ЭлектронноеВзаимодействиеБП.ЗаполнитьДанныеПервичногоДокументаУКД(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных);
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа УКД (информация продавца).
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеДляДИСИнформацияПродавцаФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить(СсылкаНаОбъект);
	ТаблицаДанных = УчетНДС.ПолучитьДанныеДляПечатиУниверсальногоКорректировочногоДокумента(
		МассивДокументов, Документы.КорректировкаРеализации.ТекстЗапросаПечатьУниверсальныхКорректировочныхДокументов());
	ДанныеДляФормированияЭД = ТаблицаДанных[0];
	
	ЭлектронноеВзаимодействиеБП.ЗаполнитьДанныеПервичногоДокументаУКД(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных);
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа УКД (информация покупателя).
//
// Параметры:
//  СсылкаНаЭД - Ссылка - ссылка на ЭД, по которому необходимо сформировать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеДляУКДИнформацииПокупателяФНС(СсылкаНаЭД, СтруктураЭД, ДеревоДанных) Экспорт
	
	СчетФактураПолученный = СсылкаНаЭД.ВладелецФайла;
	РеквизитыСчетаФактуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СчетФактураПолученный, "Дата, Организация");
	
	СведенияОПокупателе = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыСчетаФактуры.Организация);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СоставительДокументаНаименование", СведенияОПокупателе.ПолноеНаименование);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаСогласования", РеквизитыСчетаФактуры.Дата);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации", НСтр("ru = 'С изменением стоимости согласенй.'"));
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа УКД (информация продавца).
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеДляКСЧФИнформацияПродавцаФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	МассивСчетовФактур = Новый Массив();
	МассивСчетовФактур.Добавить(СсылкаНаОбъект);
	ТаблицаСчетовФактур = УчетНДС.ПолучитьДанныеДляПечатиКорректировочныхСчетовФактур1137(
			МассивСчетовФактур, Документы.СчетФактураВыданный.ТекстЗапросаПечатьКорректировочныхСчетовФактур(Истина, Истина, Истина), Истина);
	Если ТаблицаСчетовФактур = Неопределено
			ИЛИ ТаблицаСчетовФактур.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДляФормированияЭД = ТаблицаСчетовФактур[0];
	
	ЭлектронноеВзаимодействиеБП.ЗаполнитьДанныеКорректировочногоСчетаФактурыУКД(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных);
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Торг12 титул продавца.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоТорг12ПродавецФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	МассивОбъектов = Новый Массив();
	МассивОбъектов.Добавить(СсылкаНаОбъект);
	
	ВключатьУслуги = Истина;
	
	Если ТипЗнч(СсылкаНаОбъект)=Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		ВидОперации = Перечисления.ВидыОперацийЭД.Исправление;
		ДанныеДляПечати = Документы.КорректировкаРеализации.ПолучитьТаблицуСведенийТОРГ12(МассивОбъектов, ВключатьУслуги);
	Иначе
		ВидОперации = Перечисления.ВидыОперацийЭД.ПродажаКомиссия;
		ДанныеДляПечати = Документы.РеализацияТоваровУслуг.ПолучитьТаблицуСведенийТОРГ12(МассивОбъектов, ВключатьУслуги);
	КонецЕсли;
	
	Если ДанныеДляПечати.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыШапки = ДанныеДляПечати[0];
	ТабличнаяЧасть = РеквизитыШапки.ТаблицаДокумента;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерТоварнойНакладной", РеквизитыШапки.НомерДокумента);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаТоварнойНакладной",  РеквизитыШапки.ДатаДокумента);
	
	Если ВидОперации = Перечисления.ВидыОперацийЭД.Исправление Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления",	РеквизитыШапки.НомерИсправления);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления",	РеквизитыШапки.ДатаИсправления);
	КонецЕсли;
	
	// Выводим общие реквизиты шапки
	СведенияОПоставщике       = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Поставщик, РеквизитыШапки.ДатаДляПолученияСведений, РеквизитыШапки.БанковскийСчетПродавца);
	СведенияОГрузоотправителе = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Грузоотправитель, РеквизитыШапки.ДатаДляПолученияСведений);
	СведенияОПокупателе       = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Покупатель, РеквизитыШапки.ДатаДляПолученияСведений);
	СведенияОГрузополучателе  = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Грузополучатель,  РеквизитыШапки.ДатаДляПолученияСведений);
	
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПоставщике, "Поставщик", "Юр",, РеквизитыШапки.ДатаДляПолученияСведений);
	Если СведенияОПоставщике.Свойство("КодПоОКПО") И ЗначениеЗаполнено(СведенияОПоставщике.КодПоОКПО) Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			"Поставщик.КодОКПО",
			СведенияОПоставщике.КодПоОКПО);
		
	КонецЕсли;

	Если РеквизитыШапки.Поставщик <> РеквизитыШапки.Грузоотправитель Тогда
		
		ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОГрузоотправителе, "Грузоотправитель", "Факт",, РеквизитыШапки.ДатаДляПолученияСведений);
		Если СведенияОГрузоотправителе.Свойство("КодПоОКПО") И ЗначениеЗаполнено(СведенияОГрузоотправителе.КодПоОКПО) Тогда
			
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				"Грузоотправитель.КодОКПО",
				СведенияОГрузоотправителе.КодПоОКПО);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПокупателе,       "Плательщик",      "Юр",, РеквизитыШапки.ДатаДляПолученияСведений);
	Если СведенияОПокупателе.Свойство("КодПоОКПО") И ЗначениеЗаполнено(СведенияОПокупателе.КодПоОКПО) Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			"Плательщик.КодОКПО",
			СведенияОПокупателе.КодПоОКПО);
		
	КонецЕсли;
	
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОГрузополучателе,  "Грузополучатель", "Факт",, РеквизитыШапки.ДатаДляПолученияСведений);
	Если СведенияОГрузополучателе.Свойство("КодПоОКПО") И ЗначениеЗаполнено(СведенияОГрузополучателе.КодПоОКПО) Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			"Грузополучатель.КодОКПО",
			СведенияОГрузополучателе.КодПоОКПО);
		
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод", РеквизитыШапки.ВалютаКод);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаНаименование", РеквизитыШапки.ВалютаНаименование);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВидОперации", ВидОперации);
	
	Если ЗначениеЗаполнено(РеквизитыШапки.ДокументОснование) Тогда
		
		МассивОснований = Новый Массив;
		МассивОснований.Добавить(РеквизитыШапки.ДокументОснование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									"ДокументыОснования",
									МассивОснований);
		
	КонецЕсли;
	
	// Данные договора
	ОснованияОтгрузки = Новый ТаблицаЗначений;
	ОснованияОтгрузки.Колонки.Добавить("ДокОснованиеНаименование");
	ОснованияОтгрузки.Колонки.Добавить("ДокОснованиеНомер");
	ОснованияОтгрузки.Колонки.Добавить("ДокОснованиеДата");
	
	ДанныеОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыШапки.Договор, "Номер, Дата, ВидДоговора");
	
	Если ЗначениеЗаполнено(ДанныеОснования.Дата) Тогда
		Основание = ОснованияОтгрузки.Добавить();
		Основание.ДокОснованиеНаименование = НСтр("ru = 'Договор'");
		Основание.ДокОснованиеНомер = ДанныеОснования.Номер;
		Основание.ДокОснованиеДата = ДанныеОснования.Дата;
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ОснованияОтгрузки, "Основание");
	
	ТаблицаТоваров = Новый ТаблицаЗначений();
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("НаименованиеНоменклатуры");
	ТаблицаТоваров.Колонки.Добавить("НаименованиеХарактеристики");
	ТаблицаТоваров.Колонки.Добавить("Сорт");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("КодТовара");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод");
	ТаблицаТоваров.Колонки.Добавить("ВидУпаковки");
	ТаблицаТоваров.Колонки.Добавить("КоличествоВОдномМесте");
	ТаблицаТоваров.Колонки.Добавить("КоличествоМест");
	ТаблицаТоваров.Колонки.Добавить("МассаБрутто");
	ТаблицаТоваров.Колонки.Добавить("МассаНетто");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС");
	ТаблицаТоваров.Колонки.Добавить("ДокументОснование");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеПодписанные");
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеНеПодписанные");
	
	Для Каждого ДанныеСтроки Из ТабличнаяЧасть Цикл
		
		СтрокаТаблицыДокумента = ТаблицаТоваров.Добавить();
		СтрокаТаблицыДокумента.Номенклатура             = ДанныеСтроки.Товар;
		СтрокаТаблицыДокумента.НаименованиеНоменклатуры = ДанныеСтроки.ТоварНаименование;
		СтрокаТаблицыДокумента.КодТовара                = ДанныеСтроки.ТоварКод;
		СтрокаТаблицыДокумента.ЕдиницаИзмерения         = ДанныеСтроки.ЕдиницаИзмеренияНаименование;
		СтрокаТаблицыДокумента.БазоваяЕдиницаКод        = СокрЛП(ДанныеСтроки.ЕдиницаИзмеренияКод);
		СтрокаТаблицыДокумента.МассаНетто               = ДанныеСтроки.Количество;
		
		СтрокаТаблицыДокумента.СуммаСНДС	= ДанныеСтроки.СуммаСНДС;
		СтрокаТаблицыДокумента.СуммаНДС		= ДанныеСтроки.СуммаНДС;
		СтрокаТаблицыДокумента.СуммаБезНДС	= ДанныеСтроки.СуммаБезНДС;
		СтрокаТаблицыДокумента.СтавкаНДС	= ДанныеСтроки.СтавкаНДС;
		СтрокаТаблицыДокумента.Цена			= ДанныеСтроки.Цена;
		
		СтруктураДопДанных = Новый Структура;
		СтруктураДопДанных.Вставить("СтавкаНДС", ДанныеСтроки.СтавкаНДС);
		СтруктураДопДанных.Вставить("НомерТД", ДанныеСтроки.НомерТД);
		СтруктураДопДанных.Вставить("КодСтраныПроисхождения", ДанныеСтроки.КодСтраныПроисхождения);
		
		// Значение единицы измерения для возвратной тары
		Если ДанныеСтроки.ТабличнаяЧасть = Перечисления.ТабличныеЧастиДокументов.Товары Тогда
			
			СтруктураДопДанных.Вставить("ТаблицаДокумента", "Товары");
			
		ИначеЕсли ДанныеСтроки.ТабличнаяЧасть = Перечисления.ТабличныеЧастиДокументов.Услуги Тогда
			
			СтруктураДопДанных.Вставить("ТаблицаДокумента", "Услуги");
			
		ИначеЕсли ДанныеСтроки.ТабличнаяЧасть = Перечисления.ТабличныеЧастиДокументов.ВозвратнаяТара Тогда
			
			РеквизитыЕдиницыИзмерения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ДанныеСтроки.Товар, "ЕдиницаИзмерения.Код, ЕдиницаИзмерения.Наименование");
			
			СтрокаТаблицыДокумента.ЕдиницаИзмерения		 = СокрЛП(РеквизитыЕдиницыИзмерения.ЕдиницаИзмеренияНаименование);
			СтрокаТаблицыДокумента.БазоваяЕдиницаКод	 = СокрЛП(РеквизитыЕдиницыИзмерения.ЕдиницаИзмеренияКод);
			СтруктураДопДанных.Вставить("ТаблицаДокумента", "ВозвратнаяТара");
			
		КонецЕсли;
		СтрокаТаблицыДокумента.ДопДанныеПодписанные = СтруктураДопДанных;
		
	КонецЦикла;
	
	ПроверитьЗаполнениеТабличнойЧасти(ТаблицаТоваров);
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "ТаблицаТоваров");
	
	ИтоговыеСуммы = РассчитатьИтоговыеСуммыДокумента(ТаблицаТоваров);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияПоОтпускуГруза.ОтпущеноНаСумму",
			ИтоговыеСуммы.ИтогоСуммаСНДС);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияПоОтпускуГруза.ДатаОтпуска",
			РеквизитыШапки.ДатаПодписанияДокумента);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ОбщиеСведенияОТоварнойНакладной.КоличествоПорядковыхНомеровЗаписей",
			ИтоговыеСуммы.КоличествоПорядковыхНомеровЗаписей);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ОбщиеСведенияОТоварнойНакладной.МассаГрузаНетто",
			ИтоговыеСуммы.ИтогоМассаНетто);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ОбщиеСведенияОТоварнойНакладной.МассаГрузаБрутто",
			ИтоговыеСуммы.ИтогоМассаБрутто);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоПоНакладной.МассаБрутто",
			ИтоговыеСуммы.ИтогоМассаБрутто);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоПоНакладной.МассаНетто",
			ИтоговыеСуммы.ИтогоМассаНетто);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоПоНакладной.СуммаБезНДС",
			ИтоговыеСуммы.ИтогоСуммаБезНДС);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоПоНакладной.СуммаНДС",
			ИтоговыеСуммы.ИтогоНДС);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоПоНакладной.СуммаСНДС",
			ИтоговыеСуммы.ИтогоСуммаСНДС);
			
	КурсВзаиморасчетов = 1;
	Если ВидОперации = Перечисления.ВидыОперацийЭД.Исправление Тогда
		
		Если ЗначениеЗаполнено(РеквизитыШапки.ДокументОснование)
			И ТипЗнч(РеквизитыШапки.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			
			КурсВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				РеквизитыШапки.ДокументОснование,
				"КурсВзаиморасчетов");
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		КурсВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "КурсВзаиморасчетов");
		
	КонецЕсли;
	СтрокаДопДанных = ДеревоДанных.Строки.Найти("ДопДанные", "ПолныйПуть", Истина);
	ЭлектронноеВзаимодействие.ДобавитьДопДанныеВДерево(СтрокаДопДанных, 
		Новый Структура("КурсВзаиморасчетов", КурсВзаиморасчетов), Истина);
	Если ДанныеОснования.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		
		ЭлектронноеВзаимодействие.ДобавитьДопДанныеВДерево(СтрокаДопДанных,
			Новый Структура("ПередачаТовараКомитентом", Истина), Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Торг12 титул покупателя.
//
// Параметры:
//  СсылкаНаЭД - Ссылка - ссылка на ЭД, по которому необходимо сформировать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоТорг12ПокупательФНС(СсылкаНаЭД, СтруктураЭД, ДеревоДанных) Экспорт
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаПолученияГруза", ТекущаяДатаСеанса());
	
КонецПроцедуры

// Подготавливает данные титула исполнителя для электронного документа типа Акт выполненных работ формата 5.01.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоАкт501ИсполнительФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(СсылкаНаОбъект);
	
	Если ТипЗнч(СсылкаНаОбъект)=Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		ТаблицаСведенийАктаОбОказанииУслуг = Документы.КорректировкаРеализации.ПолучитьТаблицуСведенийАктаОбОказанииУслуг(МассивОбъектов);
		ВидОперации = Перечисления.ВидыОперацийЭД.Исправление;
	Иначе
		ТаблицаСведенийАктаОбОказанииУслуг = Документы.РеализацияТоваровУслуг.ПолучитьТаблицуСведенийАктаОбОказанииУслуг(МассивОбъектов);
		ВидОперации = Перечисления.ВидыОперацийЭД.ПродажаКомиссия;
	КонецЕсли;
	
	Если ТаблицаСведенийАктаОбОказанииУслуг.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыШапки = ТаблицаСведенийАктаОбОказанииУслуг[0];
	ТабличнаяЧасть = РеквизитыШапки.ТаблицаДокумента;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерАкта",   РеквизитыШапки.НомерДокумента);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаАкта",    РеквизитыШапки.ДатаДокумента);
	
	Если ВидОперации = Перечисления.ВидыОперацийЭД.Исправление Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления",	РеквизитыШапки.НомерИсправления);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления",	РеквизитыШапки.ДатаИсправления);
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВидОперации", ВидОперации);
	Если ЗначениеЗаполнено(РеквизитыШапки.ВалютаКод) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод", РеквизитыШапки.ВалютаКод);
	КонецЕсли;
	
	ТекстЗаголовка = "Мы, нижеподписавшиеся, представитель ИСПОЛНИТЕЛЯ, с одной стороны и представитель ЗАКАЗЧИКА с другой"
		+ " стороны, составили настоящий акт в том, что ИСПОЛНИТЕЛЬ выполнил, а ЗАКАЗЧИК принял следующие работы (услуги).";
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Заголовок", ТекстЗаголовка);
	
	// Выводим общие реквизиты шапки
	СведенияОПоставщике       = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Поставщик,  РеквизитыШапки.ДатаДляПолученияСведений);
	СведенияОПокупателе       = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Получатель, РеквизитыШапки.ДатаДляПолученияСведений);
	
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПоставщике, "Исполнитель", "Юр",, РеквизитыШапки.ДатаДляПолученияСведений);
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПокупателе, "Заказчик", "Юр",, РеквизитыШапки.ДатаДляПолученияСведений);
	
	Если ЗначениеЗаполнено(РеквизитыШапки.ДокументОснование) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									"ДокументыОснования",
									РеквизитыШапки.ДокументОснование);
	КонецЕсли;
	
	ТаблицаУслуг = Новый ТаблицаЗначений();
	ТаблицаУслуг.Колонки.Добавить("Номенклатура");
	ТаблицаУслуг.Колонки.Добавить("НаименованиеНоменклатуры");
	ТаблицаУслуг.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
	ТаблицаУслуг.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТаблицаУслуг.Колонки.Добавить("Количество");
	ТаблицаУслуг.Колонки.Добавить("Цена");
	ТаблицаУслуг.Колонки.Добавить("СуммаБезНДС");
	ТаблицаУслуг.Колонки.Добавить("СтавкаНДС");
	ТаблицаУслуг.Колонки.Добавить("СуммаНДС");
	ТаблицаУслуг.Колонки.Добавить("СуммаСНДС");
	ТаблицаУслуг.Колонки.Добавить("Описание");
	ТаблицаУслуг.Колонки.Добавить("ДокументОснование");
	ТаблицаУслуг.Колонки.Добавить("ДопДанныеПодписанные");
	ТаблицаУслуг.Колонки.Добавить("ДопДанныеНеПодписанные");
	ТаблицаУслуг.Колонки.Добавить("ИдТовараУКонтрагента");
	
	ЭтоПередачаРабот = ?(СтруктураЭД.Свойство("ЭтоПередачаРабот"), СтруктураЭД.ЭтоПередачаРабот, Ложь);
	Для Каждого Строка Из ТабличнаяЧасть Цикл
		
		Если НЕ ЗначениеЗаполнено(Строка.Номенклатура) Тогда
			ТекстСообщения = НСтр("ru='В строке %1 табличной части %2 не заполнена номенклатура. Для передачи электронного документа заполнение номенклатуры обязательно.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка.НомерСтроки, Строка.ТабличнаяЧасть);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, СсылкаНаОбъект);
			Продолжить;
		КонецЕсли;
		
		Если Строка.Сумма + Строка.СуммаНДС = 0 Тогда
			Продолжить;
		КонецЕсли;
	
		СтрокаТаблицыДокумента = ТаблицаУслуг.Добавить();
	
		СтрокаТаблицыДокумента.Номенклатура                 = Строка.Номенклатура;
		СтрокаТаблицыДокумента.НаименованиеНоменклатуры     = Строка.НоменклатураНаименование;
		СтрокаТаблицыДокумента.ЕдиницаИзмеренияКод          = ?(ЗначениеЗаполнено(Строка.ЕдиницаИзмерения),СокрЛП(Строка.ЕдиницаИзмеренияКод), "796");
		СтрокаТаблицыДокумента.ЕдиницаИзмеренияНаименование = Строка.ЕдиницаИзмеренияНаименование;
		СтрокаТаблицыДокумента.Количество                   = Строка.Количество;
		СтрокаТаблицыДокумента.Описание                     = Строка.НоменклатураНаименование;
		
		// Для ЭД Акт об оказании услуг возможна установка количества с точностью только до 2-х знаков после запятой
		Если Не ЭтоПередачаРабот 
			И Окр(Строка.Количество, 3) <> Окр(Строка.Количество, 2) Тогда
			
			ШаблонСообщения = НСтр("ru = 'У %1 в табличной части ""Услуги"" количество указано с точностью 3 знака после запятой. 
			|Форматом ФНС для ЭД ""Акт об оказании услуг"" предусмотрена точность до 2-х знаков после запятой в реквизите ""Количество"". 
			|Используйте формат ЭД ""Передача работ (оказание услуг)"" или УПД. Электронный документ не сформирован.'");
			СообщениеОбОшибке = СтрШаблон(ШаблонСообщения, СсылкаНаОбъект);
			
			ВызватьИсключение СообщениеОбОшибке;
			
		КонецЕсли;
		
		СтрокаТаблицыДокумента.СуммаБезНДС     = Строка.СуммаБезНДС;
		СтрокаТаблицыДокумента.СуммаСНДС       = Строка.СуммаСНДС;
		СтрокаТаблицыДокумента.СтавкаНДС       = Строка.СтавкаНДС;
		СтрокаТаблицыДокумента.СуммаНДС        = Строка.СуммаНДС;
		СтрокаТаблицыДокумента.Цена            = ?(СтрокаТаблицыДокумента.Количество = 0, СтрокаТаблицыДокумента.СуммаБезНДС, Окр(СтрокаТаблицыДокумента.СуммаБезНДС/СтрокаТаблицыДокумента.Количество,2));
		
		СтрокаТаблицыДокумента.ИдТовараУКонтрагента = ЭлектронноеВзаимодействиеБП.ПолучитьИДНоменклатуры(
			Строка.Номенклатура, Неопределено, Неопределено);
		
	КонецЦикла;
	
	ПроверитьЗаполнениеТабличнойЧасти(ТаблицаУслуг);
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаУслуг, "ТаблицаУслуг");
	
	// Не заполняем эти поля, потому что у пользователя нет возможности их изменить
	//ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ОписаниеУслуги.НачалоРабот", РеквизитыШапки.ДатаДокумента);
	//ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ОписаниеУслуги.КонецРабот",  РеквизитыШапки.ДатаДокумента);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ОписаниеУслуги.СуммаБезНДСИтого",
		ТаблицаУслуг.Итог("СуммаБезНДС"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ОписаниеУслуги.СуммаНДСИтого",
		ТаблицаУслуг.Итог("СуммаНДС"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ОписаниеУслуги.СуммаСНДСИтого",
		ТаблицаУслуг.Итог("СуммаСНДС"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияПоВыполнениюУслуг.ДатаИсполнения",
		РеквизитыШапки.ДатаДокумента);
		
	КурсВзаиморасчетов = 1;
	Если ВидОперации = Перечисления.ВидыОперацийЭД.Исправление Тогда
		
		Если ЗначениеЗаполнено(РеквизитыШапки.ДокументОснование)
			И ТипЗнч(РеквизитыШапки.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			
			КурсВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				РеквизитыШапки.ДокументОснование,
				"КурсВзаиморасчетов");
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		КурсВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "КурсВзаиморасчетов");
		
	КонецЕсли;
	СтрокаДопДанных = ДеревоДанных.Строки.Найти("ДопДанные", "ПолныйПуть", Истина);
	ЭлектронноеВзаимодействие.ДобавитьДопДанныеВДерево(СтрокаДопДанных, 
		Новый Структура("КурсВзаиморасчетов", КурсВзаиморасчетов), Истина);
	
КонецПроцедуры

// Подготавливает данные титула заказчика для электронного документа типа Акт выполненных работ формата 5.01.
//
// Параметры:
//  СсылкаНаЭД - Ссылка - ссылка на ЭД, по которому необходимо сформировать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоАкт501ЗаказчикФНС(СсылкаНаЭД, СтруктураЭД, ДеревоДанных) Экспорт
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияПоВыполнениюУслуг.ДатаЗаказа",
		ТекущаяДатаСеанса());
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Счет-Фактура.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо 
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоСчетуФактуреФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	МассивСчетовФактур = Новый Массив();
	МассивСчетовФактур.Добавить(СсылкаНаОбъект);
	ТаблицаСчетовФактур = УчетНДС.ПолучитьДанныеДляПечатиСчетаФактуры1137(
		МассивСчетовФактур, Документы.СчетФактураВыданный.ТекстЗапросаПечатьСчетовФактур());
	Если ТаблицаСчетовФактур = Неопределено
			ИЛИ ТаблицаСчетовФактур.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДляФормированияЭД = ТаблицаСчетовФактур[0];
	ДанныеШапки = ДанныеДляФормированияЭД.ДанныеШапки;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерСчетаФактуры", ДанныеШапки.Номер);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаСчетаФактуры",  ДанныеШапки.Дата);
	Если ДанныеШапки.Исправление Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления", ДанныеШапки.НомерИсправления);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления",  ДанныеШапки.ДатаИсправления);
	КонецЕсли;
	
	СведенияОПокупателе = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ДанныеШапки.Покупатель, ДанныеШапки.Дата);
	СведенияОПоставщике  = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ДанныеШапки.Поставщик, ДанныеШапки.Дата);
	СведенияОПокупателе.ИНН = ДанныеШапки.ИННпокупателя;
	СведенияОПокупателе.КПП = ДанныеШапки.КППпокупателя;
	
	СведенияОПоставщике.ИНН = ДанныеШапки.ИННпоставщика;
	СведенияОПоставщике.КПП = ДанныеШапки.КППпоставщика;
	
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПоставщике, "Продавец",   "Юр",, ДанныеШапки.Дата);
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПокупателе, "Покупатель", "Юр",, ДанныеШапки.Дата);
	
	Если НЕ ЗначениеЗаполнено(ДанныеШапки.Грузоотправитель)ИЛИ (ДанныеШапки.Грузоотправитель = "он же") Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОГрузоотправителе.ОнЖе", Истина);
	Иначе
		ЗаполнитьДанныеГрузоОтправителяПолучателя(ДеревоДанных, ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ДанныеШапки.Грузоотправитель, ДанныеШапки.Дата), "СведенияОГрузоотправителе.Грузоотправитель");
	КонецЕсли;
	
	Грузополучатель 	= ?(НЕ ЗначениеЗаполнено(ДанныеШапки.Грузополучатель) ИЛИ (ДанныеШапки.Грузополучатель = "он же"),
				СтруктураЭД.Контрагент, ДанныеШапки.Грузополучатель);
	ЗаполнитьДанныеГрузоОтправителяПолучателя(ДеревоДанных, ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(Грузополучатель, ДанныеШапки.Дата), "Грузополучатель");
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеШапки.Валюта, "Код"));
	
	РеквизитыСчетаФактуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаОбъект, "ВидСчетаФактуры, КодВидаОперации, ДокументОснование");
	Если РеквизитыСчетаФактуры.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию  
		 И РеквизитыСчетаФактуры.КодВидаОперации = "01"
		 И ТипЗнч(РеквизитыСчетаФактуры.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		 
		// Получателем данного счета-фактуры является комиссионер. Поместим данные о получателе в доп. данные.
		СведенияОКомиссионере = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(СтруктураЭД.Контрагент);
		ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОКомиссионере, "Комиссионер", "Юр",, ДанныеШапки.Дата);
	КонецЕсли;
	
	// Передаем в доп. данных признак авансового счета-фактуры
	СтрокаДопДанных = ДеревоДанных.Строки.Найти("ДопДанные", "ПолныйПуть", Истина);
	Если РеквизитыСчетаФактуры.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
		ИЛИ РеквизитыСчетаФактуры.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента
		ИЛИ РеквизитыСчетаФактуры.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку Тогда
		
		ЭлектронноеВзаимодействие.ДобавитьДопДанныеВДерево(СтрокаДопДанных, Новый Структура("СчетФактураНаАванс", Истина), Истина);
		
	Иначе // Если это не СФ на аванс, заполняем документ-основание
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснования", ДанныеДляФормированияЭД.ДокументыОснования);
		
	КонецЕсли;
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки");
	ТаблицаТоваров.Колонки.Добавить("НаименованиеНоменклатуры");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТаблицаТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18,3)));
	ТаблицаТоваров.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17,2)));
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДСТип");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17,3)));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17,3)));
	ТаблицаТоваров.Колонки.Добавить("Акциза");
	ТаблицаТоваров.Колонки.Добавить("ТаможеннаяДекларация", Новый ОписаниеТипов("ТаблицаЗначений"));
	ТаблицаТоваров.Колонки.Добавить("ДокументОснование");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеПодписанные");
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеНеПодписанные");
	
	НомерСтроки = 1;
	ТолькоУслуги = Истина;
	
	Для каждого Строка Из ДанныеДляФормированияЭД.ТаблицаДокумента Цикл                  	
		Если Строка.Стоимость + Строка.СуммаНДС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		
		Если ТолькоУслуги
			 И ((ТипЗнч(Строка.Товар) = Тип("СправочникСсылка.Номенклатура") И НЕ Строка.Товар.Услуга)
				 ИЛИ ТипЗнч(Строка.Товар) = Тип("СправочникСсылка.ОсновныеСредства")) Тогда
			ТолькоУслуги = Ложь;
		КонецЕсли;
		
		НоваяСтрока.НомерСтроки              = НомерСтроки;
		НоваяСтрока.НаименованиеНоменклатуры = Строка.ТоварНаименование;
		НоваяСтрока.Количество               = Строка.Количество;
		НоваяСтрока.Цена         = Строка.Цена;
		НоваяСтрока.СуммаБезНДС  = Строка.Стоимость;
		НоваяСтрока.СтавкаНДС    = Строка.СтавкаНДС;
		НоваяСтрока.СуммаНДС     = Строка.СуммаНДС;
		НоваяСтрока.СуммаСНДС    = Строка.Всего;
		Если ЗначениеЗаполнено(Строка.НомерГТД) Тогда
			НоваяСтрока.ТаможеннаяДекларация = ЭлектронноеВзаимодействиеБП.ТаможеннаяДекларация();
			Декларация = НоваяСтрока.ТаможеннаяДекларация.Добавить();
			Декларация.КодСтраныПроисхождения =
				ЭлектронноеВзаимодействиеБП.ПолучитьКорректныйКодСтраны(Строка.СтранаПроисхожденияКод);
			Декларация.НомерТаможеннойДекларации = ?(ЗначениеЗаполнено(Строка.НомерГТД), СокрЛП(Строка.НомерГТД), "");
		КонецЕсли;
		НоваяСтрока.Акциза      = "без акциза";
		
		НоваяСтрока.Номенклатура   = Строка.Товар;
		
		НоваяСтрока.ДопДанныеПодписанные = Новый Структура;
		Если ПустаяСтрока(Строка.ЕдиницаИзмеренияКод) Тогда
			
			ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Товар, "ЕдиницаИзмерения");
			Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда // берем значение ед. измерения из карточки номенклатуры
				
				РеквизитыЕдиницыИзмерения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЕдиницаИзмерения, "Наименование, Код");
				НоваяСтрока.ЕдиницаИзмеренияКод = СокрЛП(РеквизитыЕдиницыИзмерения.Код);
				НоваяСтрока.ДопДанныеПодписанные.Вставить("ЕдиницаИзмерения", СокрЛП(РеквизитыЕдиницыИзмерения.Наименование));
				
			КонецЕсли;
			
		Иначе
			
			НоваяСтрока.ЕдиницаИзмеренияКод = СокрЛП(Строка.ЕдиницаИзмеренияКод);
			НоваяСтрока.ДопДанныеПодписанные.Вставить("ЕдиницаИзмерения", СокрЛП(Строка.ЕдиницаИзмеренияНаименование));
			
		КонецЕсли; 
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	ПроверитьЗаполнениеТабличнойЧасти(ТаблицаТоваров);
	
	ПлатежныеДокументы = Новый ТаблицаЗначений();
	ПлатежныеДокументы.Колонки.Добавить("ДатаПРД");
	ПлатежныеДокументы.Колонки.Добавить("НомерПРД");
	
	Если ДанныеШапки.ТаблицаПлатежныхДокументов <> Неопределено Тогда
		Для Каждого ПлатежныйДокумент ИЗ ДанныеШапки.ТаблицаПлатежныхДокументов Цикл
			НовыйПлатежныйДокумент = ПлатежныеДокументы.Добавить();
			НовыйПлатежныйДокумент.ДатаПРД  = ПлатежныйДокумент.ДатаДокумента;
			НовыйПлатежныйДокумент.НомерПРД = ПлатежныйДокумент.НомерДокумента;
		КонецЦикла;
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ПлатежныеДокументы, "ПлатежноРасчетныеДокументы");
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоКОплате.СуммаБезНДСВсего", ТаблицаТоваров.Итог("СуммаБезНДС"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоКОплате.СуммаСНДСВсего",  ТаблицаТоваров.Итог("СуммаСНДС"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоКОплате.СуммаНДСВсего",   ТаблицаТоваров.Итог("СуммаНДС"));
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "ТаблицаТоваров");
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ТолькоУслуги", ТолькоУслуги);
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Корректировочный Счет-Фактура.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо 
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоКорректировочномуСчетуФактуреФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	МассивСчетовФактур = Новый Массив();
	МассивСчетовФактур.Добавить(СсылкаНаОбъект);
	ТаблицаСчетовФактур = УчетНДС.ПолучитьДанныеДляПечатиКорректировочныхСчетовФактур1137(
		МассивСчетовФактур, Документы.СчетФактураВыданный.ТекстЗапросаПечатьКорректировочныхСчетовФактур());
		
	Если ТаблицаСчетовФактур = Неопределено
			ИЛИ ТаблицаСчетовФактур.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДляФормированияЭД = ТаблицаСчетовФактур[0];
	ДанныеШапки = ДанныеДляФормированияЭД.ДанныеШапки;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерКорСчетаФактуры", ДанныеШапки.Номер);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаКорСчетаФактуры",  ДанныеШапки.Дата);
	
	Если ДанныеШапки.Исправление Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"НомерИсправленияКорСчетаФактуры", ДанныеШапки.НомерИсправленияКорректировочного);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ДатаИсправленияКорСчетаФактуры", ДанныеШапки.ДатаИсправленияКорректировочного);
	КонецЕсли;
	
	КорректируемыеСчетаФактуры = ДанныеШапки.ТаблицаРеквизитовОснований;
	Если КорректируемыеСчетаФактуры.Количество()>0 Тогда
		КорректируемыйСчетФактура = КорректируемыеСчетаФактуры[0];
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерСчетаФактуры", КорректируемыйСчетФактура.НомерСчетаФактуры);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаСчетаФактуры",  КорректируемыйСчетФактура.ДатаСчетаФактуры);
		Если КорректируемыйСчетФактура.УчитыватьИсправлениеИсходногоДокумента Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления", КорректируемыйСчетФактура.НомерИсправления);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления", КорректируемыйСчетФактура.ДатаИсправления);
		КонецЕсли;
	КонецЕсли;
	
	СведенияОПокупателе = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ДанныеШапки.Покупатель, ДанныеШапки.Дата);
	СведенияОПоставщике  = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ДанныеШапки.Поставщик, ДанныеШапки.Дата);
	
	СведенияОПокупателе.ИНН = ДанныеШапки.ИННпокупателя;
	СведенияОПокупателе.КПП = ДанныеШапки.КППпокупателя;
	
	СведенияОПоставщике.ИНН = ДанныеШапки.ИННпродавца;
	СведенияОПоставщике.КПП = ДанныеШапки.КППпродавца;
	
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПоставщике, "Продавец",   "Юр",, ДанныеШапки.Дата);
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПокупателе, "Покупатель", "Юр",, ДанныеШапки.Дата);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснования", ДанныеДляФормированияЭД.ДокументыОснования);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеШапки.Валюта, "Код"));
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки");
	ТаблицаТоваров.Колонки.Добавить("НаименованиеНоменклатуры");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКодДо");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТаблицаТоваров.Колонки.Добавить("КоличествоДо", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18,3)));
	ТаблицаТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18,3)));
	ТаблицаТоваров.Колонки.Добавить("ЦенаДо", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДСДо", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17,2)));
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДСДо");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДСТипДо");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДСТип");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДСДо", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17,3)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17,3)));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСДо", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17,3)));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17,3)));
	ТаблицаТоваров.Колонки.Добавить("АкцизаДо");
	ТаблицаТоваров.Колонки.Добавить("Акциза");
	ТаблицаТоваров.Колонки.Добавить("ДокументОснование");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеПодписанные");
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеНеПодписанные");
	
	ТолькоУслуги = Истина;
	НомерСтроки = 1;
	Для каждого Строка Из ДанныеДляФормированияЭД.ТаблицаДокумента Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		
		Если ТолькоУслуги
			 И ((ТипЗнч(Строка.Товар) = Тип("СправочникСсылка.Номенклатура") И НЕ Строка.Товар.Услуга)
				 ИЛИ ТипЗнч(Строка.Товар) = Тип("СправочникСсылка.ОсновныеСредства")) Тогда
			ТолькоУслуги = Ложь;
		КонецЕсли;
		
		НоваяСтрока.НомерСтроки              = НомерСтроки;
		НоваяСтрока.НаименованиеНоменклатуры = Строка.НаименованиеНоменклатуры;
		НоваяСтрока.ЕдиницаИзмеренияКодДо    = СокрЛП(Строка.ЕдиницаИзмеренияКод);
		НоваяСтрока.ЕдиницаИзмеренияКод      = СокрЛП(Строка.ЕдиницаИзмеренияКод);
		НоваяСтрока.КоличествоДо             = Строка.КоличествоДоИзменения;
		НоваяСтрока.Количество               = Строка.КоличествоПослеИзменения;
		НоваяСтрока.ЦенаДо                   = Строка.ЦенаДоИзменения;
		НоваяСтрока.Цена                     = Строка.ЦенаПослеИзменения;
		НоваяСтрока.СуммаБезНДСДо            = Строка.СтоимостьБезНДСДоИзменения;
		НоваяСтрока.СуммаБезНДС              = Строка.СтоимостьБезНДСПослеИзменения;
		НоваяСтрока.СтавкаНДСДо              = Строка.СтавкаНДС;
		НоваяСтрока.СтавкаНДС                = Строка.СтавкаНДС;
		НоваяСтрока.СуммаНДСДо               = Строка.СуммаНДСДоИзменения;
		НоваяСтрока.СуммаНДС                 = Строка.СуммаНДСПослеИзменения;
		НоваяСтрока.СуммаСНДСДо              = Строка.СтоимостьСНДСДоИзменения;
		НоваяСтрока.СуммаСНДС                = Строка.СтоимостьСНДСПослеИзменения;
		
		НоваяСтрока.Номенклатура             = Строка.Товар;
		
		НоваяСтрока.АкцизаДо                 = "без акциза";
		НоваяСтрока.Акциза                   = "без акциза";
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	ПроверитьЗаполнениеТабличнойЧасти(ТаблицаТоваров);
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "ТаблицаТоваров");
	
	Сумма = ТаблицаТоваров.Итог("СуммаСНДС");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоКОплате.СуммаСНДСВсего", Сумма);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ТолькоУслуги", ТолькоУслуги);
	
КонецПроцедуры

// Заполняет данные для электронного документа типа СоглашениеОбИзмененииСтоимостиОтправитель.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоКорректировочномуДокументу(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	МассивОбъектов = Новый Массив();
	МассивОбъектов.Добавить(СсылкаНаОбъект);
	
	СведенийСоглашенияОбИзмененииСтоимости = Документы.КорректировкаРеализации.ПолучитьТаблицуСведенийСоглашенияОбИзмененииСтоимости(СсылкаНаОбъект);
	
	Если СведенийСоглашенияОбИзмененииСтоимости.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыШапки = СведенийСоглашенияОбИзмененииСтоимости[0];
	ТабличнаяЧасть = РеквизитыШапки.ТаблицаДокумента;
	
	Если РеквизитыШапки.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки Тогда
		ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Исправление;
	Иначе
		ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Корректировка;
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерТоварнойНакладной", РеквизитыШапки.НомерДокумента);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаТоварнойНакладной", РеквизитыШапки.ДатаДокумента);
	
	Если ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Исправление Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,"НомерИсправления", РеквизитыШапки.НомерИсправления);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,"ДатаИсправления", РеквизитыШапки.ДатаИсправления);
	КонецЕсли;
	Если ЗначениеЗаполнено(РеквизитыШапки.НомерИсходногоДокумента) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,"НомерИсходногоДокумента", РеквизитыШапки.НомерИсходногоДокумента);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,"ДатаИсходногоДокумента", РеквизитыШапки.ДатаИсходногоДокумента);
		
		Если ЗначениеЗаполнено(РеквизитыШапки.НомерИсправленияИсходногоДокумента) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,"НомерИсправленияИсходногоДокумента", РеквизитыШапки.НомерИсправленияИсходногоДокумента);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,"ДатаИсправленияИсходногоДокумента", РеквизитыШапки.ДатаИсправленияИсходногоДокумента);
		КонецЕсли;
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									"ДокОснованиеДата",
									РеквизитыШапки.ОснованиеДата);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									"ДокОснованиеНомер",
									РеквизитыШапки.ОснованиеНомер);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,"ПредставлениеИсходногоДокумента", РеквизитыШапки.ЗаголовокДокументаОснования);
	
	// Выводим общие реквизиты шапки
	СведенияОПоставщике       = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Поставщик, РеквизитыШапки.ДатаДляПолученияСведений, РеквизитыШапки.БанковскийСчетПродавца);
	СведенияОГрузоотправителе = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Грузоотправитель, РеквизитыШапки.ДатаДляПолученияСведений);
	СведенияОПокупателе       = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Покупатель, РеквизитыШапки.ДатаДляПолученияСведений);
	СведенияОГрузополучателе  = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Грузополучатель, РеквизитыШапки.ДатаДляПолученияСведений);
	
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПоставщике,       "Поставщик",        "Юр",, РеквизитыШапки.ДатаДляПолученияСведений);
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОГрузоотправителе, "Грузоотправитель", "Факт",, РеквизитыШапки.ДатаДляПолученияСведений);
	
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПокупателе,       "Плательщик",      "Юр",, РеквизитыШапки.ДатаДляПолученияСведений);
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОГрузополучателе,  "Грузополучатель", "Факт",, РеквизитыШапки.ДатаДляПолученияСведений);
	
	СтруктураДопДанных = Новый Структура;
	СтруктураДопДанных.Вставить("ВалютаКод",   РеквизитыШапки.ВалютаКод);  
	СтруктураДопДанных.Вставить("ВидОперации", ВидОперацииЭД);
	ЭлектронноеВзаимодействие.ДобавитьДопДанныеВДерево(ДеревоДанных, СтруктураДопДанных, Истина);
	
	Если ЗначениеЗаполнено(РеквизитыШапки.ДокументОснование) Тогда
		МассивДокументовОснований = Новый Массив;
		МассивДокументовОснований.Добавить(РеквизитыШапки.ДокументОснование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
							ДеревоДанных,
							"ДокументыОснования",
							МассивДокументовОснований);
	КонецЕсли;
	
	// Добавим данные об товарах
	ТаблицаТоваров = Новый ТаблицаЗначений();
	ТаблицаТоваров.Колонки.Добавить("НаименованиеНоменклатуры");
	ТаблицаТоваров.Колонки.Добавить("НаименованиеХарактеристики");
	ТаблицаТоваров.Колонки.Добавить("Сорт");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("КодТовара");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод");
	ТаблицаТоваров.Колонки.Добавить("ВидУпаковки");
	ТаблицаТоваров.Колонки.Добавить("КоличествоВОдномМесте");
	ТаблицаТоваров.Колонки.Добавить("КоличествоМест");
	ТаблицаТоваров.Колонки.Добавить("МассаБрутто");
	ТаблицаТоваров.Колонки.Добавить("МассаНеттоДоКорректировки");
	ТаблицаТоваров.Колонки.Добавить("МассаНетто");
	ТаблицаТоваров.Колонки.Добавить("ЦенаДоКорректировки");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДСДоКорректировки");
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДСДоКорректировки");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСДоКорректировки");
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС");
	ТаблицаТоваров.Колонки.Добавить("ДокументОснования");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("ДопДанные");
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеПодписанные");
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеНеПодписанные");
	
	Для Каждого Строка Из ТабличнаяЧасть Цикл
		
		СтрокаТаблицыДокумента = ТаблицаТоваров.Добавить();
		
		СтрокаТаблицыДокумента.Номенклатура              = Строка.Номенклатура;
		СтрокаТаблицыДокумента.БазоваяЕдиницаКод         = СокрЛП(Строка.ЕдиницаИзмеренияКод);
		СтрокаТаблицыДокумента.ЕдиницаИзмерения          = Строка.ЕдиницаИзмеренияНаименование;
		СтрокаТаблицыДокумента.КодТовара                 = Строка.НоменклатураКод;
		СтрокаТаблицыДокумента.НаименованиеНоменклатуры  = Строка.НоменклатураНаименование;
		СтрокаТаблицыДокумента.МассаНетто                = Строка.Количество;
		СтрокаТаблицыДокумента.МассаНеттоДоКорректировки = Строка.КоличествоДоКорректировки;
		
		СтрокаТаблицыДокумента.СуммаСНДС   = Строка.СуммаСНДС;
		СтрокаТаблицыДокумента.СуммаНДС    = Строка.СуммаНДС;
		СтрокаТаблицыДокумента.СуммаБезНДС = Строка.СуммаБезНДС;
		СтрокаТаблицыДокумента.СтавкаНДС   = Строка.СтавкаНДС;
		
		СтрокаТаблицыДокумента.СуммаСНДСДоКорректировки   = Строка.СуммаСНДСДоКорректировки;
		СтрокаТаблицыДокумента.СуммаНДСДоКорректировки    = Строка.СуммаНДСДоКорректировки;
		СтрокаТаблицыДокумента.СуммаБезНДСДоКорректировки = Строка.СуммаБезНДСДоКорректировки;
		
		СтрокаТаблицыДокумента.Цена = Строка.Цена;
		СтрокаТаблицыДокумента.ЦенаДоКорректировки = Строка.ЦенаДоКорректировки;
		
		СтруктураДопДанных = Новый Структура;
		СтруктураДопДанных.Вставить("СтавкаНДС", Строка.СтавкаНДС);
		
		СтруктураДопДанных.Вставить("НомерТД", Строка.НомерТД);
		СтруктураДопДанных.Вставить("НомерТДДоИзменения", Строка.НомерТДДоИзменения);
		СтруктураДопДанных.Вставить("КодСтраныПроисхождения", Строка.КодСтраныПроисхождения);
		СтруктураДопДанных.Вставить("КодСтраныПроисхожденияДоИзменения", Строка.КодСтраныПроисхожденияДоИзменения);
		
		СтрокаТаблицыДокумента.ДопДанныеПодписанные = СтруктураДопДанных;
		
	КонецЦикла;
	
	ПроверитьЗаполнениеТабличнойЧасти(ТаблицаТоваров);
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "ТаблицаТоваров");
	
	ИтоговыеСуммы = РассчитатьИтоговыеСуммыКорректировочногоДокумента(ТаблицаТоваров);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"СведенияПоОтпускуГруза.ОтпущеноНаСумму",
								ИтоговыеСуммы.ИтогоСуммаСНДС);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"ОбщиеСведенияОТоварнойНакладной.ВсегоМест",
								ИтоговыеСуммы.ИтогоМест);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"ОбщиеСведенияОТоварнойНакладной.МассаГрузаНетто",
								ИтоговыеСуммы.ИтогоМассаНетто);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"ОбщиеСведенияОТоварнойНакладной.МассаГрузаБрутто",
								ИтоговыеСуммы.ИтогоМассаБрутто);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"ВсегоПоНакладной.КоличествоМест",
								ИтоговыеСуммы.ИтогоМест);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"ВсегоПоНакладной.МассаБрутто",
								ИтоговыеСуммы.ИтогоМассаБрутто);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"ВсегоПоНакладной.МассаНетто",
								ИтоговыеСуммы.ИтогоМассаНетто);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"ВсегоПоНакладной.СуммаБезНДС",
								ИтоговыеСуммы.ИтогоСуммаБезНДС);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"ВсегоПоНакладной.СуммаНДС",
								ИтоговыеСуммы.ИтогоНДС);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"ВсегоПоНакладной.СуммаСНДС",
								ИтоговыеСуммы.ИтогоСуммаСНДС);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"ВсегоПоНакладной.МассаНеттоДоКорректировки",
								ИтоговыеСуммы.ИтогоМассаНетто);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"ВсегоПоНакладной.СуммаБезНДСДоКорректировки",
								ИтоговыеСуммы.ИтогоСуммаДоКорректировки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"ВсегоПоНакладной.СуммаНДСДоКорректировки",
								ИтоговыеСуммы.ИтогоНДСДоКорректировки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"ВсегоПоНакладной.СуммаСНДСДоКорректировки",
								ИтоговыеСуммы.ИтогоСуммаСНДСДоКорректировки);
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа СоглашениеОбИзмененииСтоимостиПолучатель.
//
// Параметры:
//  СсылкаНаЭД - Ссылка - ссылка на ЭД, по которому необходимо сформировать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоКорректировочномуДокументуПолучатель(СсылкаНаЭД, СтруктураЭД, ДеревоДанных) Экспорт
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаПолученияГруза", ТекущаяДатаСеанса());
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ПередачаТоваровПродавец.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка - ссылка на ЭД, по которому необходимо сформировать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПередачаТоваровПродавец(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	ЗаполнитьДанныеПоТорг12ПродавецФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных);
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ПередачаРаботИсполнитель.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка - ссылка на ЭД, по которому необходимо сформировать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПередачаРаботИсполнитель(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	СтруктураЭД.Вставить("ЭтоПередачаРабот", Истина);
	ЗаполнитьДанныеПоАкт501ИсполнительФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных);
	
КонецПроцедуры

// Работа со деревом данных CML

// Заполняет данные для электронного документа типа Акт на передачу прав формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоАктуНаПередачуПрав(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт
	
	МассивДокументов = Новый Массив();
	МассивДокументов.Добавить(СсылкаНаОбъект);
	
	ДанныеДляФормированияЭД = Документы.РеализацияТоваровУслуг.ПолучитьТаблицуСведенийАктаНаПередачуПрав(МассивДокументов);
	
	РеквизитыШапки   = ДанныеДляФормированияЭД[0];
	ТаблицаДокумента = ДанныеДляФормированияЭД[0].ТаблицаДокумента;
	
	ТаблицаТоваров = Новый ТаблицаЗначений();	
	ТаблицаТоваров.Колонки.Добавить("Артикул");   
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("ШтрихКод");
	ТаблицаТоваров.Колонки.Добавить("ИдТовараУКонтрагента");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименование");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименованиеПолное");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаМеждународноеСокращение");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("НДСУчтеноВСумме");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеПодписанные");
	ТаблицаТоваров.Колонки.Добавить("ДопДанныеНеПодписанные");
	
	Для Каждого ДанныеСтроки Из ТаблицаДокумента Цикл
		
		СтрокаТаблицыТоваров = ТаблицаТоваров.Добавить();
		
		СтрокаТаблицыТоваров.Артикул 					= ДанныеСтроки.ТоварКод;
		СтрокаТаблицыТоваров.Наименование				= ДанныеСтроки.ТоварНаименование;
		СтрокаТаблицыТоваров.Номенклатура 				= ДанныеСтроки.Товар;
		СтрокаТаблицыТоваров.БазоваяЕдиницаКод 			= СокрЛП(ДанныеСтроки.ЕдиницаИзмеренияКод);
		СтрокаТаблицыТоваров.БазоваяЕдиницаНаименование = ДанныеСтроки.ЕдиницаИзмеренияНаименование;
		СтрокаТаблицыТоваров.БазоваяЕдиницаНаименованиеПолное = ДанныеСтроки.ЕдиницаИзмеренияНаименованиеПолное;
		СтрокаТаблицыТоваров.БазоваяЕдиницаМеждународноеСокращение = "-";
		
		СтрокаТаблицыТоваров.Количество 		= ДанныеСтроки.Количество;
		СтрокаТаблицыТоваров.НДСУчтеноВСумме 	= РеквизитыШапки.СуммаВключаетНДС;
		
		Если РеквизитыШапки.СуммаВключаетНДС Тогда
			СтрокаТаблицыТоваров.Сумма = ДанныеСтроки.СуммаСНДС;
			СтрокаТаблицыТоваров.Цена = ?(ДанныеСтроки.Количество = 0, ДанныеСтроки.СуммаСНДС, Окр(ДанныеСтроки.СуммаСНДС / ДанныеСтроки.Количество, 2));
		Иначе
			СтрокаТаблицыТоваров.Сумма = ДанныеСтроки.СуммаБезНДС;
			СтрокаТаблицыТоваров.Цена = ?(ДанныеСтроки.Количество = 0, ДанныеСтроки.СуммаБезНДС, Окр(ДанныеСтроки.СуммаБезНДС / ДанныеСтроки.Количество, 2));
		КонецЕсли;
		
		СтрокаТаблицыТоваров.СуммаНДС = ДанныеСтроки.СуммаНДС;
		СтрокаТаблицыТоваров.СтавкаНДС = ДанныеСтроки.СтавкаНДС;
		
		ДопДанные = Новый Структура;
		ДопДанные.Вставить("ЭтоУслуга", 	ДанныеСтроки.ТабличнаяЧасть = Перечисления.ТабличныеЧастиДокументов.Услуги);
		ДопДанные.Вставить("Содержание",	ДанныеСтроки.ТоварНаименование);
		СтрокаТаблицыТоваров.ДопДанныеПодписанные = ДопДанные;
			
	КонецЦикла;
	
	ВставитьЗначениеВДерево(ДеревоДанных, "Номер", РеквизитыШапки.НомерДокумента);
	ВставитьЗначениеВДерево(ДеревоДанных, "Дата", РеквизитыШапки.ДатаДокумента);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Валюта", РеквизитыШапки.ВалютаКод);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Курс", "1");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Сумма", ТаблицаДокумента.Итог("СуммаСНДС"));
	
	Если ЗначениеЗаполнено(РеквизитыШапки.ДокументОснование) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									"ДокументыОснования",
									РеквизитыШапки.ДокументОснование);
	КонецЕсли;
	
	СведенияОЛицензиаре = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Лицензиар, РеквизитыШапки.ДатаДляПолученияСведений);
	СведенияОЛицензиате = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Лицензиат, РеквизитыШапки.ДатаДляПолученияСведений);
	СведенияОПлательщике = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Плательщик, РеквизитыШапки.ДатаДляПолученияСведений);
	
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОЛицензиаре, "Лицензиар",  "Факт",, РеквизитыШапки.ДатаДляПолученияСведений);
	
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОЛицензиате, "Лицензиат",  "Факт",, РеквизитыШапки.ДатаДляПолученияСведений);
	
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПлательщике, "Плательщик", "Юр",, РеквизитыШапки.ДатаДляПолученияСведений);
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "Товары");
	
	СтруктураЭД.Вставить("СуммаДокумента", ТаблицаДокумента.Итог("СуммаСНДС"));
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Реквизиты организации формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - СправочникСсылка - ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево значений, соответствующее макету РеквизитыОрганизации обработки ОбменСКонтрагентами.
//
Процедура ЗаполнитьДанныеРеквизитыОрганизации(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных) Экспорт

	СведенияОбОрганизации = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(СсылкаНаОбъект);
	
	ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОбОрганизации, "Организация", "Юр");
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БанковскиеСчета.НомерСчета КАК НомерСчета,
	|	БанковскиеСчета.Наименование КАК Комментарий,
	|	ЕСТЬNULL(Банки.Наименование, """") КАК БанкНаименование,
	|	ЕСТЬNULL(Банки.Код, """") КАК БанкБИК,
	|	ЕСТЬNULL(БанковскиеСчета.Банк.КоррСчет, """") КАК БанкСчетКорр,
	|	"""" КАК БанкSWIFT,
	|	ЕСТЬNULL(БанкиКорреспондент.Наименование, """") КАК БанкКоррНаименование,
	|	ЕСТЬNULL(БанкиКорреспондент.Код, """") КАК БанкКоррБИК,
	|	ЕСТЬNULL(БанкиКорреспондент.КоррСчет, """") КАК БанкКоррБанкСчетКорр,
	|	"""" КАК БанкКоррSWIFT
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Банки КАК Банки
	|		ПО БанковскиеСчета.Банк = Банки.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Банки КАК БанкиКорреспондент
	|		ПО БанковскиеСчета.БанкДляРасчетов = БанкиКорреспондент.Ссылка
	|ГДЕ
	|	БанковскиеСчета.Владелец = &Владелец";
	Запрос.УстановитьПараметр("Владелец", СсылкаНаОбъект);
	Результат = Запрос.Выполнить();
	БанковскиеСчета = Результат.Выгрузить();
	
	ЕстьОшибкиЗаполнения = Ложь;
	ТекстОшибки = "";
	
	Для Каждого ТекСчет Из БанковскиеСчета Цикл
		
		ШаблонСообщения = НСтр("ru = 'Длина номера банковского счета организации не равна %1 символам.'");
		ОбменСКонтрагентамиСлужебный.ПроверитьДлинуНомераСчета(ТекСчет.НомерСчета, ШаблонСообщения, ЕстьОшибкиЗаполнения, ТекстОшибки);
		
		Если Не ЗначениеЗаполнено(ТекСчет.БанкКоррБанкСчетКорр) Тогда
			Продолжить;
		КонецЕсли;
		
		ШаблонСообщения = НСтр("ru = 'Длина номера корреспондентского счета банка организации не равна %1 символам.'");
		ОбменСКонтрагентамиСлужебный.ПроверитьДлинуНомераСчета(ТекСчет.БанкКоррБанкСчетКорр, ШаблонСообщения, ЕстьОшибкиЗаполнения, ТекстОшибки);
		
	КонецЦикла;
	
	Если ЕстьОшибкиЗаполнения Тогда
		ВставитьЗначениеВДерево(ДеревоДанных, "ТекстОшибки", ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, БанковскиеСчета, "РасчетныеСчета");
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаФормирования", ТекущаяДатаСеанса());
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Наименование", "Реквизиты "+СсылкаНаОбъект.Наименование);
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа КаталогТоваров формата CML 2.
//
// Параметры:
//  Организация - СправочникСсылка - ссылка на объект информационной базы, по которому необходимо
//                                   создать электронный документ.
//  ТоварыКаталога - Массив - список товаров для заполнения каталога.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//
Процедура ЗаполнитьДанныеПоКаталогуТоваровCML(Организация, ТоварыКаталога, ДеревоДанных) Экспорт
	
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ПрайсЛист формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДокумента - ДеревоЗначений - Дерево значений, соответствующее макету ПрайсЛист обработки ОбменСКонтрагентами.
//
Процедура ЗаполнитьДанныеПоПрайсЛисту(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента) Экспорт
	
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Счет формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДокумента - ДеревоЗначений - дерево значений, соответствующее макету СчетНаОплату обработки ОбменСКонтрагентами.
//
Процедура ЗаполнитьДанныеПоСчету(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента) Экспорт
	
	МассивДокументов = Новый Массив();
	МассивДокументов.Добавить(СсылкаНаОбъект);
	
	ДанныеДляФормированияЭД = Документы.СчетНаОплатуПокупателю.ПолучитьТаблицуСведенийСчетаНаОплату(МассивДокументов);
	
	РеквизитыШапки   = ДанныеДляФормированияЭД[0];
	ТаблицаДокумента = ДанныеДляФормированияЭД[0].ТаблицаДокумента;
	
	ТаблицаТоваров = Новый ТаблицаЗначений();	
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("ШтрихКод");
	ТаблицаТоваров.Колонки.Добавить("ИдТовараУКонтрагента");
	ТаблицаТоваров.Колонки.Добавить("Описание");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименование");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаМеждународноеСокращение");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименованиеПолное");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("НДСУчтеноВСумме");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	
	Для Каждого ДанныеСтроки Из ТаблицаДокумента Цикл
		
		СтрокаТаблицыТоваров = ТаблицаТоваров.Добавить();
		
		СуммаСУчетомСкидки = ДанныеСтроки.Сумма - ДанныеСтроки.СуммаСкидки;
		Цена = Окр(ДанныеСтроки.Цена * ?(ДанныеСтроки.Сумма = 0, 1, СуммаСУчетомСкидки/ДанныеСтроки.Сумма), 2);
		
		СтрокаТаблицыТоваров.Артикул 					= ДанныеСтроки.НоменклатураАртикул;
		СтрокаТаблицыТоваров.Наименование				= ДанныеСтроки.НоменклатураНаименование;
		СтрокаТаблицыТоваров.Описание 					= ДанныеСтроки.Содержание;
		СтрокаТаблицыТоваров.Номенклатура 				= ДанныеСтроки.Номенклатура;
		СтрокаТаблицыТоваров.БазоваяЕдиницаКод 			= СокрЛП(ДанныеСтроки.ЕдиницаИзмеренияКод);
		СтрокаТаблицыТоваров.БазоваяЕдиницаНаименование = ДанныеСтроки.ЕдиницаИзмеренияНаименование;
		СтрокаТаблицыТоваров.БазоваяЕдиницаНаименованиеПолное		 = ДанныеСтроки.ЕдиницаИзмеренияНаименование;
		СтрокаТаблицыТоваров.БазоваяЕдиницаМеждународноеСокращение	 = "-";
		СтрокаТаблицыТоваров.Цена 						= Цена;
		СтрокаТаблицыТоваров.Количество 				= ДанныеСтроки.Количество;
		СтрокаТаблицыТоваров.Сумма 						= СуммаСУчетомСкидки;
		СтрокаТаблицыТоваров.НДСУчтеноВСумме 			= РеквизитыШапки.СуммаВключаетНДС;
		Если ДанныеСтроки.СуммаНДС = 0 Тогда
			// Обход ошибки
			СтрокаТаблицыТоваров.СуммаНДС = "0";
		Иначе
			СтрокаТаблицыТоваров.СуммаНДС = ДанныеСтроки.СуммаНДС;
		КонецЕсли;
		СтрокаТаблицыТоваров.СтавкаНДС = ДанныеСтроки.СтавкаНДС;
			
	КонецЦикла;
	
	// Если скидка задана в целом по документу
	Если РеквизитыШапки.СуммаСкидки <> 0  Тогда
	
		СуммаСУчетомСкидки = ТаблицаТоваров.Итог("Сумма") - РеквизитыШапки.СуммаСкидки;
		
		КоэфСкидки = ?(ТаблицаТоваров.Итог("Сумма") = 0, 1, СуммаСУчетомСкидки/ТаблицаТоваров.Итог("Сумма"));
		
		ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(СуммаСУчетомСкидки, ТаблицаТоваров, "Сумма");
		ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(Окр(ТаблицаТоваров.Итог("СуммаНДС")*КоэфСкидки, 2), ТаблицаТоваров, "СуммаНДС");
		ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(Окр(ТаблицаТоваров.Итог("Цена")*КоэфСкидки, 2), ТаблицаТоваров, "Цена");
	
	КонецЕсли;
	
	ПроверитьЗаполнениеТабличнойЧасти(ТаблицаТоваров);
	
	СведенияОПоставщике = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Поставщик, РеквизитыШапки.ДатаДляПолученияСведений);
	СведенияОПокупателе = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Покупатель, РеквизитыШапки.ДатаДляПолученияСведений);
	
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПоставщике, "Продавец",   "Юр",, РеквизитыШапки.ДатаДляПолученияСведений);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПокупателе, "Покупатель", "Юр",, РеквизитыШапки.ДатаДляПолученияСведений);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Валюта", РеквизитыШапки.ВалютаКод);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Курс",   РеквизитыШапки.КурсВзаиморасчетов);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Сумма",  ТаблицаТоваров.Итог("Сумма"));
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "НазначениеПлатежа", Строка(РеквизитыШапки.ДоговорКонтрагента));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "СрокПлатежа", '00010101'); 
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТоваров, "Товары");
	
	// Расчетный счет
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.НомерСчета", РеквизитыШапки.НомерСчета);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.Наименование", РеквизитыШапки.БанкНаименование);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.БИК", РеквизитыШапки.БИК);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.СчетКорреспондентский", РеквизитыШапки.КоррСчет);
	
	Если ЗначениеЗаполнено(РеквизитыШапки.БанкДляРасчетов) Тогда
		
		РеквизитыБанка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыШапки.БанкДляРасчетов, "Наименование,КоррСчет,Код");
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.Наименование", РеквизитыБанка.Наименование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.БИК", РеквизитыБанка.Код);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.СчетКорреспондентский", РеквизитыБанка.КоррСчет);
	
	КонецЕсли;
	
	// Итоги по документу
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.Сумма", ТаблицаТоваров.Итог("Сумма"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаСкидки", 0);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаБезСкидки",  ТаблицаТоваров.Итог("Сумма"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаНДС",        ТаблицаТоваров.Итог("СуммаНДС"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.ЦенаВключаетНДС", РеквизитыШапки.СуммаВключаетНДС);
		
	// Отвественные лица
	РуководительДолжность = ?(ЗначениеЗаполнено(РеквизитыШапки.РуководительДолжностьНаименование), 
		РеквизитыШапки.РуководительДолжностьНаименование, "Руководитель");
	ЭлектронноеВзаимодействиеБП.ЗаполнитьДанныеФизическогоЛица(
		ДеревоДокумента, "Продавец.Руководитель", РеквизитыШапки.РуководительСтруктураФИО, РуководительДолжность);
		
	// Итоговая строка
	СуммаКПрописи = ТаблицаТоваров.Итог("Сумма");
	
	ШаблонСтроки =	НСтр("ru = 'Всего наименований %1, на сумму %2'");
	
	ИтоговаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки,
		ТаблицаТоваров.Количество(),
		ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаКПрописи, РеквизитыШапки.Валюта));
		
	ИтоговаяСтрока = ИтоговаяСтрока +  Символы.ПС + ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СуммаКПрописи, РеквизитыШапки.Валюта);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогиПрописью", ИтоговаяСтрока);
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ЗаказТоваров формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДокумента - ДеревоЗначений - дерево значений, соответствующее макету ЗаказТовара обработки ОбменСКонтрагентами.
//
Процедура ЗаполнитьДанныеПоЗаказуТоваров(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента) Экспорт
	
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ОтветНаЗаказ формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДокумента - ДеревоЗначений - дерево значений, соответствующее макету ОтветНаЗаказ обработки ОбменСКонтрагентами.
//
Процедура ЗаполнитьДанныеПоОтветуНаЗаказ(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента) Экспорт
	
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ОтчетКомитенту формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДокумента - ДеревоЗначений - дерево значений, соответствующее макету ОтчетКомиссионераОПродажах обработки ОбменСКонтрагентами.
//
// Особенность:
//  Параметр ДополнительныеРеквизитыДляТаблицыТоваров в общей структуре параметров предназначен для заполнения
//  колонки ДополнительныеРеквизиты в таблице товаров.
//
Процедура ЗаполнитьДанныеПоОтчетуОПродажахКомиссионногоТовара(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтчетКомитентуОПродажах.Дата,
	|	ОтчетКомитентуОПродажах.ВалютаДокумента,
	|	ОтчетКомитентуОПродажах.ВалютаДокумента.Код КАК ВалютаКод,
	|	ОтчетКомитентуОПродажах.СуммаДокумента,
	|	ОтчетКомитентуОПродажах.СуммаВключаетНДС,
	|	ОтчетКомитентуОПродажах.СуммаВознаграждения,
	|	ОтчетКомитентуОПродажах.СпособРасчетаКомиссионногоВознаграждения,
	|	ОтчетКомитентуОПродажах.ПроцентКомиссионногоВознаграждения,
	|	ОтчетКомитентуОПродажах.СтавкаНДСВознаграждения,
	|	ОтчетКомитентуОПродажах.Организация,
	|	ОтчетКомитентуОПродажах.Контрагент КАК Контрагент,
	|	ОтчетКомитентуОПродажах.УдержатьВознаграждение,
	|	ОтчетКомитентуОПродажах.КурсВзаиморасчетов,
	|	ОтчетКомитентуОПродажах.КратностьВзаиморасчетов
	|ИЗ
	|	Документ.ОтчетКомитентуОПродажах КАК ОтчетКомитентуОПродажах
	|ГДЕ
	|	ОтчетКомитентуОПродажах.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Сумма КАК СуммаПродажи,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.СуммаНДС КАК СуммаНДС,
	|	Товары.СуммаВознаграждения КАК СуммаВознаграждения,
	|	Товары.Покупатель КАК Покупатель,
	|	Товары.Цена КАК ЦенаПродажи,
	|	Товары.Номенклатура,
	|	Товары.Количество,
	|	Товары.ЦенаПоступления КАК Цена,
	|	Товары.СуммаПоступления КАК Сумма,
	|	Товары.Номенклатура.Наименование,
	|	Товары.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	Товары.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	Товары.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	Товары.Номенклатура.Наименование КАК Наименование,
	|	Товары.ДатаРеализации,
	|	""-"" КАК БазоваяЕдиницаМеждународноеСокращение,
	|	Товары.Ссылка.СуммаВключаетНДС КАК НДСУчтеноВСумме,
	|	Товары.Ссылка.Контрагент
	|ПОМЕСТИТЬ ВТТовары
	|ИЗ
	|	Документ.ОтчетКомитентуОПродажах.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураПоставщиков.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(НоменклатураПоставщиков.Идентификатор) КАК Идентификатор
	|ПОМЕСТИТЬ ВТНоменклатураПоставщика
	|ИЗ
	|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
	|ГДЕ
	|	(НоменклатураПоставщиков.Владелец, НоменклатураПоставщиков.Номенклатура) В
	|			(ВЫБРАТЬ
	|				ВТТовары.Контрагент,
	|				ВТТовары.Номенклатура
	|			ИЗ
	|				ВТТовары КАК ВТТовары)
	|
	|СГРУППИРОВАТЬ ПО
	|	НоменклатураПоставщиков.Номенклатура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТовары.СуммаПродажи,
	|	ВТТовары.СтавкаНДС,
	|	ВТТовары.СуммаНДС,
	|	ВТТовары.СуммаВознаграждения,
	|	ВТТовары.Покупатель,
	|	ВТТовары.ЦенаПродажи,
	|	ВТТовары.Номенклатура,
	|	ВТТовары.Количество,
	|	ВТТовары.Цена,
	|	ВТТовары.Сумма,
	|	ВТТовары.НоменклатураНаименование,
	|	ВТТовары.БазоваяЕдиницаКод,
	|	ВТТовары.БазоваяЕдиницаНаименование,
	|	ВТТовары.БазоваяЕдиницаНаименованиеПолное,
	|	ВТТовары.Наименование,
	|	ВТТовары.ДатаРеализации,
	|	ВТТовары.БазоваяЕдиницаМеждународноеСокращение,
	|	ВТТовары.НДСУчтеноВСумме,
	|	ВТТовары.Контрагент,
	|	ЕСТЬNULL(ВТНоменклатураПоставщика.Идентификатор, """") КАК ИдТовараУКонтрагента
	|ИЗ
	|	ВТТовары КАК ВТТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНоменклатураПоставщика КАК ВТНоменклатураПоставщика
	|		ПО ВТТовары.Номенклатура = ВТНоменклатураПоставщика.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетКомитентуОПродажахДенежныеСредства.ВидОтчетаПоПлатежам,
	|	ОтчетКомитентуОПродажахДенежныеСредства.Сумма,
	|	ОтчетКомитентуОПродажахДенежныеСредства.СтавкаНДС,
	|	ОтчетКомитентуОПродажахДенежныеСредства.СуммаНДС,
	|	ОтчетКомитентуОПродажахДенежныеСредства.Покупатель,
	|	ОтчетКомитентуОПродажахДенежныеСредства.ДатаСобытия
	|ИЗ
	|	Документ.ОтчетКомитентуОПродажах.ДенежныеСредства КАК ОтчетКомитентуОПродажахДенежныеСредства
	|ГДЕ
	|	ОтчетКомитентуОПродажахДенежныеСредства.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	РеквизитыШапки = РезультатЗапроса[0].Выбрать();
	РеквизитыШапки.Следующий();
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ДатаФормирования", 
			ТекущаяДатаСеанса());
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Курс", 
			РеквизитыШапки.КурсВзаиморасчетов);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"НачалоПериода", 
			РеквизитыШапки.Дата);
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"КонецПериода", 
			РеквизитыШапки.Дата);
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Валюта", 
			РеквизитыШапки.ВалютаКод);	
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"Сумма", 
			РеквизитыШапки.СуммаДокумента);
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогоПоДокументу.ЦенаВключаетНДС", 
			РеквизитыШапки.СуммаВключаетНДС);
			
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогоПоДокументу.СтавкаНДСВознаграждения", 
			?(РеквизитыШапки.СтавкаНДСВознаграждения = Перечисления.СтавкиНДС.ПустаяСсылка(), 
													Перечисления.СтавкиНДС.БезНДС, РеквизитыШапки.СтавкаНДСВознаграждения));
			
	СведенияОКомитенте = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Контрагент);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОКомитенте, "Комитент", "Юр",, РеквизитыШапки.Дата);
	
	СведенияОКомиссионере = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОКомиссионере, "Комиссионер", "Юр",, РеквизитыШапки.Дата);
	
	ТаблицаТоваров = РезультатЗапроса[3].Выгрузить();
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТовара.ИдТовараУКонтрагента) Тогда
			СтрокаТовара.ИдТовараУКонтрагента = СтрокаТовара.Номенклатура.УникальныйИдентификатор();
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТоваров, "Товары");
	СтрокаТаблицаТоваров = ДеревоДокумента.Строки.Найти("Товары", "ПолныйПуть");
	Для Каждого Товар Из СтрокаТаблицаТоваров.Строки Цикл
		
		ИндексСтроки = Число(Товар.Значение) - 1;
		Покупатель = ТаблицаТоваров[ИндексСтроки].Покупатель;
		СведенияОПокупателе = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(Покупатель);
		ЗаполнитьДанныеУчастника(Товар, СведенияОПокупателе, "Товары.НомерСтроки.Покупатель", "Юр", "Товары.НомерСтроки", РеквизитыШапки.Дата);
		
		МассивЗначений = Товар.Строки.НайтиСтроки(Новый Структура("ПолныйПуть", "Товары.НомерСтроки.Покупатель.Адрес.Структурированный"), Истина);
		Если МассивЗначений.Количество() > 0 Тогда
			
			СтрокиЗначений = МассивЗначений[0].Строки;
			Для Каждого СтрокаЗначения Из СтрокиЗначений Цикл
				
				СтрокаЗначения.Уровень4 = СтрокаЗначения.Уровень6;
				
			КонецЦикла;
			
		КонецЕсли;		
		ДатаРеализации = ТаблицаТоваров[ИндексСтроки].ДатаРеализации;
		СтрокаДопДанных = Товар.Строки.Найти("Товары.НомерСтроки.ДопДанныеПодписанные", "ПолныйПуть", Истина);
		ЭлектронноеВзаимодействие.ДобавитьДопДанныеВДерево(СтрокаДопДанных, Новый Структура("ДатаРеализации", ДатаРеализации));
		
	КонецЦикла; 	
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(РеквизитыШапки.Организация, РеквизитыШапки.Дата);
	СтрокаДопДанных = ДеревоДокумента.Строки.Найти("ДопДанные", "ПолныйПуть", Истина);
	ЭлектронноеВзаимодействие.ДобавитьДопДанныеВДерево(СтрокаДопДанных, Новый Структура("ПлательщикНДС", ПлательщикНДС), Истина);
	ЭлектронноеВзаимодействие.ДобавитьДопДанныеВДерево(СтрокаДопДанных, Новый Структура("УдержатьВознаграждение", РеквизитыШапки.УдержатьВознаграждение), Истина);
	
	// Табличная часть "Денежные средства"
	Если Не РезультатЗапроса[4].Пустой() Тогда
		
		ТаблицаДС = Новый ТаблицаЗначений;
		ТаблицаДС.Колонки.Добавить("ВидОтчетаПоПлатежам");
		ТаблицаДС.Колонки.Добавить("Сумма");
		ТаблицаДС.Колонки.Добавить("СтавкаНДС");
		ТаблицаДС.Колонки.Добавить("СуммаНДС");
		ТаблицаДС.Колонки.Добавить("Покупатель");
		ТаблицаДС.Колонки.Добавить("ДатаСобытия");
		
		СоответствиеСтавокНДС = Новый Соответствие;
		ЗаполнитьСоответствиеСтавокНДС(СоответствиеСтавокНДС);
		ВыборкаДС = РезультатЗапроса[4].Выбрать();
		Пока ВыборкаДС.Следующий() Цикл
			
			СтрокаДС = ТаблицаДС.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДС, ВыборкаДС,, "ВидОтчетаПоПлатежам, СтавкаНДС, Покупатель");
			Если ВыборкаДС.ВидОтчетаПоПлатежам = Перечисления.ВидыОтчетовПоПлатежамКомиссия.Аванс Тогда
				СтрокаДС.ВидОтчетаПоПлатежам = "Аванс";
			ИначеЕсли ВыборкаДС.ВидОтчетаПоПлатежам = Перечисления.ВидыОтчетовПоПлатежамКомиссия.Оплата Тогда
				СтрокаДС.ВидОтчетаПоПлатежам = "Оплата";
			ИначеЕсли ВыборкаДС.ВидОтчетаПоПлатежам = Перечисления.ВидыОтчетовПоПлатежамКомиссия.ЗачетАванса Тогда
				СтрокаДС.ВидОтчетаПоПлатежам = "ЗачетАванса";
			КонецЕсли;
			Если ЗначениеЗаполнено(ВыборкаДС.СтавкаНДС) Тогда
				СтрокаДС.СтавкаНДС = СоответствиеСтавокНДС[ВыборкаДС.СтавкаНДС];
			КонецЕсли;
			Если ЗначениеЗаполнено(ВыборкаДС.Покупатель) Тогда
				
				СтрокаДС.Покупатель = ЭлектронноеВзаимодействиеБП.ДанныеКонтрагентаСтруктурой(
					ВыборкаДС.Покупатель,
					РеквизитыШапки.Дата);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Добавляем данные табличной части "Денежные средства" в доп. данные электронного документа
		ДанныеДС = ОбщегоНазначения.ЗначениеВСтрокуXML(ТаблицаДС);
		ЭлектронноеВзаимодействие.ДобавитьДопДанныеВДерево(СтрокаДопДанных, Новый Структура("ДенежныеСредства", ДанныеДС), Истина);
		
	КонецЕсли;
	
	Если РеквизитыШапки.СуммаДокумента < 0 Тогда
		ТекстИтоговаяСтрока = Нстр("ru = 'Всего возвращено наименований'");
	Иначе
		ТекстИтоговаяСтрока = Нстр("ru = 'Всего продано наименований'");
	КонецЕсли;
	
	ИтоговаяСтрока = ТекстИтоговаяСтрока
		+ " "
		+ ТаблицаТоваров.Количество()
		+ Нстр("ru = ', на сумму'")
		+ " "
		+ ФорматСумм(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.ВалютаДокумента);
	
	СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.ВалютаДокумента);
		
	Если РеквизитыШапки.СуммаВознаграждения <> 0 Тогда
		СуммаВознаграждения = Нстр("ru = 'Сумма комиссионного вознаграждения составила'")
			+ " "
			+ ?(РеквизитыШапки.СуммаВознаграждения < 0, Нстр("ru = 'минус'") + " ", "")
			+ РаботаСКурсамиВалют.СформироватьСуммуПрописью(РеквизитыШапки.СуммаВознаграждения, РеквизитыШапки.ВалютаДокумента);
	КонецЕсли;
	
	ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + СуммаПрописью + Символы.ПС + СуммаВознаграждения;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДокумента, 
			"ИтогиПрописью", 
			ИтоговаяСтрока); 
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ОтчетКомитентуОСписании формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДокумента - ДеревоЗначений - дерево значений, соответствующее макету ОтчетКомиссионераОСписании обработки ОбменСКонтрагентами.
//
Процедура ЗаполнитьДанныеПоОтчетуОСписанииКомиссионногоТовара(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента) Экспорт
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Поиск и создание документов

// Сохраняет данные из электронного документа в объект ИБ.
//
// Параметры:
//  СтрокаДляЗагрузки - Строка - параметры для загрузки.
//  ДеревоРазбора     - ДеревоЗначений - структура параметров документа ИБ.
//  СсылкаНаВладельца - ДокументСсылка - владелец электронного документа.
//  Записывать - Булево - если Истина, то объект будет записан.
//  СпособОбработки - Строка - способ сохранения данных в информационной базе.
//
// Возвращаемое значение:
//  НайденныйОбъект - ссылка на объект.
//
Функция СохранитьДанныеОбъектаВБД(СтрокаДляЗагрузки, ДеревоРазбора,
			СсылкаНаВладельца = Неопределено, Записывать = Истина, СпособОбработки = "") Экспорт
	
	НайденныйОбъект = Неопределено;
	
	Если СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.ТОРГ12
		ИЛИ СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
		ИЛИ СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
		ИЛИ СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
		
		НайденныйОбъект = ЭлектронноеВзаимодействиеБП.НайтиСоздатьПоступлениеТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца);
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
		НайденныйОбъект = ЭлектронноеВзаимодействиеБП.НайтиСоздатьКорректировкуПоступления(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца);
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.СчетФактура
		ИЛИ СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
		
		НайденныйОбъект = ЭлектронноеВзаимодействиеБП.НайтиСоздатьСчетФактуру(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца);
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
		
		НайденныйОбъект = ЭлектронноеВзаимодействиеБП.НайтиСоздатьСчетНаОплатуПоставщика(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца);
	ИначеЕсли ВРег(СтрокаДляЗагрузки.ВидЭД) = ВРег("РеквизитыОрганизации") Тогда
		
		НайденныйОбъект = ЭлектронноеВзаимодействиеБП.НовыйКонтрагент(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца);
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭд = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара Тогда
		
		НайденныйОбъект = ЭлектронноеВзаимодействиеБП.НайтиСоздатьОтчетКомиссионера(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца);	
		
	КонецЕсли;
	
	Возврат НайденныйОбъект;
	
КонецФункции

// Поиск и создание документа передачи товаров.
//
// Параметры:
//  ДеревоДанных		 - ДеревоЗначений - дерево данных электронного документа.
//  СсылкаНаВладельца	 - ДокументСсылка - ссылка на документ учета.
//  Записывать			 - Булево - признак записи документа.
//  СпособОбработки		 - Строка - способ сохранения данных в информационной базе.
//
Процедура НайтиСоздатьДокументПередачаТоваров(ДеревоДанных, СсылкаНаВладельца, Записывать = Истина, СпособОбработки = "") Экспорт
	
	НачатьТранзакцию();
	Попытка

		ЭлектронноеВзаимодействиеБП.НайтиСоздатьПоступлениеТоваровУслугДляПередачаТоваров(ДеревоДанных, СсылкаНаВладельца);
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			ЭлектронноеВзаимодействиеБП.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ТекстСообщения);
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Поиск и создание документа передачи результатов работ.
//
// Параметры:
//  ДеревоДанных		 - ДеревоЗначений - дерево данных электронного документа.
//  СсылкаНаВладельца	 - ДокументСсылка - ссылка на документ учета.
//  Записывать			 - Булево - признак записи документа.
//  СпособОбработки		 - Строка - способ сохранения данных в информационной базе.
//
Процедура НайтиСоздатьДокументПередачаРезультатовРабот(ДеревоДанных, СсылкаНаВладельца, Записывать = Истина, СпособОбработки = "") Экспорт
	
	НачатьТранзакцию();
	Попытка

		ЭлектронноеВзаимодействиеБП.НайтиСоздатьПоступлениеТоваровУслугДляПередачаРабот(ДеревоДанных, СсылкаНаВладельца);
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			ЭлектронноеВзаимодействиеБП.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ТекстСообщения);
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Сохраняет данные из электронного документа в объекты ИБ.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - структура параметров документа ИБ.
//  СсылкиНаВладельцев - Массив - документы информационной базы, созданные ранее по входящему электронному документу.
//  Записывать - Булево - признак необходимости записывать объект ИБ.
//  СпособОбработки - Строка - способ сохранения данных в информационной базе.
//
Процедура НайтиСоздатьУниверсальныйПередаточныйДокумент(ДеревоДанных, СсылкиНаВладельцев = Неопределено, Записывать = Истина, СпособОбработки = "") Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		ПервичныйДокумент = Неопределено;
		СчетФактура = Неопределено;
		Если СсылкиНаВладельцев <> Неопределено Тогда
			Для каждого Ссылка Из СсылкиНаВладельцев Цикл
				Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
					СчетФактура = Ссылка;
				Иначе
					ПервичныйДокумент = Ссылка;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ДокументыУчета = Новый Массив;
		
		ЭлектронноеВзаимодействиеБП.НайтиСоздатьПоступлениеТоваровУслугДляЕдиногоДокумента(ДеревоДанных, ПервичныйДокумент);
		ДокументыУчета.Добавить(ПервичныйДокумент);
		
		ДокументыОснованияСчетаФактуры = Новый Массив;
		ДокументыОснованияСчетаФактуры.Добавить(ПервичныйДокумент);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры", ДокументыОснованияСчетаФактуры);
		
		ЭлектронноеВзаимодействиеБП.НайтиСоздатьСчетФактуруДляЕдиногоДокумента(ДеревоДанных, СчетФактура);
		ДокументыУчета.Добавить(СчетФактура);
		
		СсылкиНаВладельцев = ДокументыУчета;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			ЭлектронноеВзаимодействиеБП.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ТекстСообщения);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Сохраняет данные из электронного документа в объекты ИБ.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - структура параметров документа ИБ.
//  СсылкаНаВладельца - Ссылка - ссылка на объект ИБ, владельца электронного документа.
//  Записывать - Булево - признак необходимости записывать объект ИБ.
//  СпособОбработки - Строка - способ сохранения данных в информационной базе.
//
Процедура НайтиСоздатьУПДДокументОПередаче(ДеревоДанных, СсылкаНаВладельца = Неопределено, Записывать = Истина, СпособОбработки = "") Экспорт

	НачатьТранзакцию();
	Попытка

		ЭлектронноеВзаимодействиеБП.НайтиСоздатьПоступлениеТоваровУслугДляЕдиногоДокумента(ДеревоДанных, СсылкаНаВладельца);
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			ЭлектронноеВзаимодействиеБП.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ТекстСообщения);
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Сохраняет данные из электронного документа в объекты ИБ.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - структура параметров документа ИБ.
//  СсылкаНаВладельца - Ссылка - ссылка на объект ИБ, владельца электронного документа.
//  Записывать - Булево - признак необходимости записывать объект ИБ.
//  СпособОбработки - Строка - способ сохранения данных в информационной базе.
//
Процедура НайтиСоздатьУПДСчетФактуру(ДеревоДанных, СсылкаНаВладельца = Неопределено, Записывать = Истина, СпособОбработки = "") Экспорт
	
	НачатьТранзакцию();
	Попытка

		ЭлектронноеВзаимодействиеБП.НайтиСоздатьСчетФактуруДляЕдиногоДокумента(ДеревоДанных, СсылкаНаВладельца);
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			ЭлектронноеВзаимодействиеБП.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ТекстСообщения);
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Сохраняет данные из электронного документа в объекты ИБ.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - структура параметров документа ИБ.
//  СсылкиНаВладельцев - Массив - документы информационной базы, созданные ранее по входящему электронному документу.
//  Записывать - Булево - признак необходимости записывать объект ИБ.
//  СпособОбработки - Строка - способ сохранения данных в информационной базе.
//
Процедура НайтиСоздатьУниверсальныйКорректировочныйДокумент(ДеревоДанных, СсылкиНаВладельцев = Неопределено, Записывать = Истина, СпособОбработки = "") Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		ПервичныйДокумент = Неопределено;
		СчетФактура = Неопределено;
		Если СсылкиНаВладельцев <> Неопределено Тогда
			Для каждого Ссылка Из СсылкиНаВладельцев Цикл
				Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
					СчетФактура = Ссылка;
				Иначе
					ПервичныйДокумент = Ссылка;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ДокументыУчета = Новый Массив;
		
		ЭлектронноеВзаимодействиеБП.НайтиСоздатьКорректировкуПоступленияДляЕдиногоДокумента(ДеревоДанных, ПервичныйДокумент);
		ДокументыУчета.Добавить(ПервичныйДокумент);
		
		ДокументыОснованияСчетаФактуры = Новый Массив;
		ДокументыОснованияСчетаФактуры.Добавить(ПервичныйДокумент);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры", ДокументыОснованияСчетаФактуры);
		
		ЭлектронноеВзаимодействиеБП.НайтиСоздатьКорректировочныйСчетФактуруДляЕдиногоДокумента(ДеревоДанных, СчетФактура);
		ДокументыУчета.Добавить(СчетФактура);
		
		СсылкиНаВладельцев = ДокументыУчета;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			ЭлектронноеВзаимодействиеБП.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ТекстСообщения);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Сохраняет данные из электронного документа в объекты ИБ.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - структура параметров документа ИБ.
//  СсылкаНаВладельца - Ссылка - ссылка на объект ИБ, владельца электронного документа.
//  Записывать - Булево - признак необходимости записывать объект ИБ.
//  СпособОбработки - Строка - способ сохранения данных в информационной базе.
//
Процедура НайтиСоздатьУКДДокументОбИзмененииСтоимости(ДеревоДанных, СсылкаНаВладельца = Неопределено, Записывать = Истина, СпособОбработки = "") Экспорт
	
	НачатьТранзакцию();
	Попытка

		ЭлектронноеВзаимодействиеБП.НайтиСоздатьКорректировкуПоступленияДляЕдиногоДокумента(ДеревоДанных, СсылкаНаВладельца);
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			ЭлектронноеВзаимодействиеБП.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ТекстСообщения);
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Сохраняет данные из электронного документа в объекты ИБ.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - структура параметров документа ИБ.
//  СсылкаНаВладельца - Ссылка - ссылка на объект ИБ, владельца электронного документа.
//  Записывать - Булево - признак необходимости записывать объект ИБ.
//  СпособОбработки - Строка - способ сохранения данных в информационной базе.
//
Процедура НайтиСоздатьУКДСчетФактуру(ДеревоДанных, СсылкаНаВладельца = Неопределено, Записывать = Истина, СпособОбработки = "") Экспорт
	
	НачатьТранзакцию();
	Попытка

		ЭлектронноеВзаимодействиеБП.НайтиСоздатьКорректировочныйСчетФактуруДляЕдиногоДокумента(ДеревоДанных, СсылкаНаВладельца);
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			ЭлектронноеВзаимодействиеБП.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ТекстСообщения);
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Создание элементов справочников.

// Создает объект в ИБ по дереву параметров.
//
// Параметры:
//  СтрокаОбъекта - Структура - параметры записываемого объекта.
//  ДеревоРазбора - ДеревоЗначений - результат разбора электронного документа.
//
// Возвращаемое значение:
//  Ссылка - ссылка на новый элемент в информационной базе.
//
Функция СоздатьОбъектВБД(СтрокаОбъекта, ДеревоРазбора) Экспорт
	
	НовЭл = Неопределено;
	Если СтрокаОбъекта.ОписаниеТипа = "СправочникСсылка.НоменклатураПоставщиков" Тогда
		НовЭл = СоздатьПерезаполнитьНоменклатуруПоставщика(СтрокаОбъекта, ДеревоРазбора);
	КонецЕсли;
	
	Возврат НовЭл;
	
КонецФункции

// Поиска элемента справочника по реквизитам ИНН и КПП.
//
// Параметры:
//  ТипОбъекта - Строка - имя справочника в метаданных.
//  ИНН - Строка - ИНН.
//  КПП - Строка - КПП.
//  Организация - СправочникСсылка - ссылка на элемент справочника организации.
//
// Возвращаемое значение:
//  Ссылка - найденной значение.
//
Функция СсылкаНаОбъектПоИННКПП(ТипОбъекта, ИНН, КПП, Организация = Неопределено) Экспорт
	
	Возврат ЭлектронноеВзаимодействиеБП.СсылкаНаОбъектПоИННКПП(ТипОбъекта, ИНН, КПП);
	
КонецФункции

// Заполняет реквизиты объекта данными из структуры реквизитов.
//
// Параметры:
//  СтруктураРеквизитов - структура - перечень значений реквизитов.
//
// Возвращаемое значение:
//  Результат - Контрагент.Ссылка - ссылка на справочник контрагентов.
//
Функция ЗаполнитьРеквизитыКонтрагента(СтруктураРеквизитов) Экспорт
	
	Результат = Неопределено;
	

	Если ЗначениеЗаполнено(СтруктураРеквизитов.Контрагент) Тогда
		Контрагент = СтруктураРеквизитов.Контрагент.ПолучитьОбъект();
	Иначе
		Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
		Контрагент.УстановитьСсылкуНового(Справочники.Контрагенты.ПолучитьСсылку());
	КонецЕсли;

	Контрагент.Наименование = СтруктураРеквизитов.Наименование;
	Контрагент.НаименованиеПолное = СтруктураРеквизитов.Наименование;
	ИНН_КПП = СтруктураРеквизитов.ИНН_КПП;
	Контрагент.ИНН = Сред(ИНН_КПП,1,Найти(ИНН_КПП,"/")-1);
	Контрагент.КПП = Сред(ИНН_КПП,Найти(ИНН_КПП,"/")+1);
	Если СтрДлина(СокрЛП(Контрагент.ИНН))>10 Тогда
		Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	Иначе
		Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	КонецЕсли;
	
	Если Контрагент.ЭтоНовый() Тогда
		Контрагент.ГоловнойКонтрагент = Контрагент.ПолучитьСсылкуНового();
		Контрагент.СтранаРегистрации = Справочники.СтраныМира.Россия;
	КонецЕсли;
	Контрагент.Записать();
	
	Возврат Контрагент.Ссылка;
	
КонецФункции

// Заполняет структуру реквизитов товара.
//
// Параметры:
//  РеквизитыНоменклатуры - Структура - параметры поиска.
//  СтруктураВозврата - Структура - содержит ссылки на номенклатуру, характеристику, упаковку.
//  ИД - Строка - идентификатор обмена ЭД.
//
Процедура ПолучитьРеквизитыТовара(РеквизитыНоменклатуры, СтруктураВозврата, ИД = Неопределено) Экспорт
	
	ПараметрПоиска = "";
	НоменклатураПоставщика = Неопределено;
	Если РеквизитыНоменклатуры.Свойство("НоменклатураПоставщика", НоменклатураПоставщика) Тогда
		СтруктураВозврата.Номенклатура = НоменклатураПоставщика.Номенклатура;
	Иначе
		СтруктураВозврата.Номенклатура = Неопределено;
	КонецЕсли;
	
	СтруктураВозврата.Характеристика = Неопределено;
	СтруктураВозврата.Упаковка = Неопределено;
	
КонецПроцедуры

// Возвращает ИД контрагента.
//
// Параметры:
//  Контрагент - ОпределяемыйТип.Контрагент -ссылка на контрагента (Организация или Контрагент).
//  ВидКонтрагента - Строка - вид контрагента.
//
// Возвращаемое значение:
//  ИдКонтрагента - Строка - значение ИдКонтрагента.
//
Функция ПолучитьИДКонтрагента(Контрагент, ВидКонтрагента) Экспорт
	
	ИдКонтрагента = "";
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат ИдКонтрагента;
	КонецЕсли;
	
	Если ВРег(ВидКонтрагента) = ВРег("Организация") Тогда
		ИдКонтрагента = Контрагент.ИНН + "_" + Контрагент.КПП;
	ИначеЕсли ВРег(ВидКонтрагента) = ВРег("Контрагент") Тогда
		ИдКонтрагента = Контрагент.ИНН + "_" + Контрагент.КПП;
	КонецЕсли;
	
	Возврат ИдКонтрагента;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Сопоставление номенклатуры

// Формирует тест запроса для получения таблицы сопоставления номенклатуры
//
// Параметры:
//  ТекстЗапроса - Строка - текст запроса.
//  
// Результат запроса должен содержать свойства:
//  * АртикулНоменклатурыКонтрагента      - Строка - артикул номенклатуры контрагента;
//  * НаименованиеНоменклатурыКонтрагента - Строка - наименование номенклатуры контрагента;
//  * ЕдиницаНоменклатурыКонтрагента      - Ссылка - ссылка на единицу измерения номенклатуры контрагента;
//  * Описание                            - Строка - описание номенклатуры поставщика;
//  * Идентификатор                       - Строка - идентификатор номенклатуры контрагента;
//  * НоменклатураПоставщика              - Ссылка - ссылка на элементы номенклатуры контрагента.
//
Процедура ТекстЗапросаСопоставленияНоменклатуры(ТекстЗапроса) Экспорт
	
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаИнформацияОТоваре.Ид КАК Идентификатор,
		|	ТаблицаИнформацияОТоваре.Артикул КАК АртикулНоменклатурыКонтрагента,
		|	ТаблицаИнформацияОТоваре.Наименование КАК НаименованиеНоменклатурыКонтрагента,
		|	ТаблицаИнформацияОТоваре.БазоваяЕдиницаКод КАК БазоваяЕдиницаКод,
		|	ТаблицаИнформацияОТоваре.Описание КАК Описание
		|ПОМЕСТИТЬ ТаблицаИнформацияОТоваре
		|ИЗ
		|	&ТаблицаИнформацияОТоваре КАК ТаблицаИнформацияОТоваре
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаИнформацияОТоваре.Идентификатор,
		|	ТаблицаИнформацияОТоваре.АртикулНоменклатурыКонтрагента,
		|	ТаблицаИнформацияОТоваре.НаименованиеНоменклатурыКонтрагента,
		|	ЕСТЬNULL(ЕдиницыИзмерения.Ссылка, НЕОПРЕДЕЛЕНО) КАК ЕдиницаНоменклатурыКонтрагента,
		|	ТаблицаИнформацияОТоваре.Описание,
		|	НоменклатураПоставщиков.Ссылка КАК НоменклатураПоставщика
		|ИЗ
		|	ТаблицаИнформацияОТоваре КАК ТаблицаИнформацияОТоваре
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
		|		ПО ТаблицаИнформацияОТоваре.Идентификатор = НоменклатураПоставщиков.Идентификатор
		|			И (НоменклатураПоставщиков.Владелец = &Контрагент)
		|			И (НЕ НоменклатураПоставщиков.ПометкаУдаления)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторЕдиницИзмерения КАК ЕдиницыИзмерения
		|		ПО ТаблицаИнформацияОТоваре.БазоваяЕдиницаКод = ЕдиницыИзмерения.Код
		|ГДЕ
		|	(НоменклатураПоставщиков.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|			ИЛИ НоменклатураПоставщиков.Номенклатура ЕСТЬ NULL )";
	
КонецПроцедуры

// Сохраняет результат ручного сопоставления Номенклатуры в БД.
//
// Параметры:
//  ТаблицаСопоставления - ТаблицаЗначений - данные сопоставления.
//  Контрагент - СправочникСсылка - ссылка на справочник контрагенты.
//  Отказ - Булево - признак ошибки.
//
Процедура ЗаписатьСопоставлениеНоменклатуры(ТаблицаСопоставления, Контрагент, Отказ) Экспорт
	
	Для Каждого Запись из ТаблицаСопоставления Цикл
		Если ЗначениеЗаполнено(Запись.Номенклатура) Тогда
			СпрСсылка = ЭлектронноеВзаимодействиеБП.НайтиСсылкуНаНоменклатуруПоставщикаПоИдентификатору(
				Запись.Идентификатор, Контрагент, "НоменклатураПоставщика");
			Если ЗначениеЗаполнено(СпрСсылка) Тогда
				СпрОбъект = СпрСсылка.ПолучитьОбъект();
			Иначе
				СпрОбъект = Справочники.НоменклатураПоставщиков.СоздатьЭлемент();
				СпрОбъект.Наименование  = Запись.НаименованиеНоменклатурыКонтрагента;
				СпрОбъект.Владелец      = Контрагент;
				СпрОбъект.Артикул       = Запись.АртикулНоменклатурыКонтрагента;
				СпрОбъект.Идентификатор = Запись.Идентификатор;
			КонецЕсли;
			СпрОбъект.Номенклатура = Запись.Номенклатура;
			Попытка
				СпрОбъект.Записать();
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),,,,Отказ);
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает структуру для открытия формы сопоставления номенклатуры.
//
// Параметры:
//  СсылкаНаЭД - СправочникСсылка.ЭДПрисоединенныеФайлы - электронный документ.
//
// Возвращаемое значение:
//  Структура - содержит ИмяФормы и ПараметрыОткрытияФормы.
//
Функция ПолучитьПараметрыФормыСопоставленияНоменклатуры(СсылкаНаЭД) Экспорт
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ИмяФормы", "ОбщаяФорма.СопоставлениеДанныхПоНоменклатуре");
	ПараметрыОткрытияФормы = Новый Структура("ЭлектронныйДокумент, НеОткрыватьФормуПриОтсутствииНесопоставленнойНоменклатуры",
		СсылкаНаЭД, Истина);
	СтруктураПараметров.Вставить("ПараметрыОткрытияФормы", ПараметрыОткрытияФормы);
	
	Возврат СтруктураПараметров
	
КонецФункции

// Заполнение реквизитов формы переданными значениями.
//
// Параметры:
//  ДанныеФормы - УправляемаяФорма - данные управляемой формы.
//  ЗначениеЗаполнения - Строка - ссылка данные во временном хранилище.
//
Процедура ЗаполнитьИсточник(ДанныеФормы, ЗначениеЗаполнения) Экспорт
	
	ДанныеФормы.ЗаполнитьТоварыИзВременногоХранилищаСервер(ЗначениеЗаполнения);
	ДанныеФормы.ОбновитьОтображениеДанных();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Получение данных для формирования электронных документов.

// Заполняет адрес хранилища с таблицей значений - каталога товаров
//
// Параметры:
//  АдресВоВременномХранилище - Строка - адрес хранения каталога товаров;
//  ИдентификаторФормы - УникальныйИдентификатор - уникальный  идентификатор формы, вызвавшей функцию.
//
Процедура ПоместитьКаталогТоваровВоВременноеХранилище(АдресВоВременномХранилище, ИдентификаторФормы) Экспорт
	
	
КонецПроцедуры

// Получает значение перечисления по имени перечисления и представлению в библиотеке.
// 
// Параметры:
//  ИмяПеречисления - Строка - наименование перечисления.
//  ПредставлениеПеречисления - Строка - наименование значения перечисления.
//  НайденноеЗначение - ПеречислениеСсылка - значение искомого перечисления.
//
Процедура ПолучитьЗначениеПеречисления(ИмяПеречисления, ПредставлениеПеречисления, НайденноеЗначение) Экспорт
	
	Если ИмяПеречисления = "СтавкиНДС" Тогда
		НайденноеЗначение = ЭлектронноеВзаимодействиеБП.ПолучитьСтавкуНДСПеречислением(ПредставлениеПеречисления);
	ИначеЕсли ИмяПеречисления = "ЮридическоеФизическоеЛицо" Тогда
		Если ПредставлениеПеречисления = "ФизЛицо" Тогда
			НайденноеЗначение = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		Иначе
			НайденноеЗначение = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Получает данные свидетельства о регистрации ИП по ссылке.
//
// Параметры:
//  ИП - СправочникСсылка - источник, по которому нужно получить данные;
//  Сведения - Строка - сведения о регистрации индивидуального предпринимателя.
//
Процедура ДанныеСвидетельстваОРегистрацииИП(ИП, Сведения) Экспорт
	
	Если ТипЗнч(ИП) = Тип("СправочникСсылка.Организации") Тогда
		Сведения = "Свидетельство о регистрации № "+СокрЛП(ИП.СвидетельствоСерияНомер)+" от "+Формат(ИП.СвидетельствоДатаВыдачи,"ДФ=dd.MM.yyyy");
	Иначе
		Сведения = "";
	КонецЕсли;
	
КонецПроцедуры

// Получение контактной информации организации по ссылке.
//
// Параметры:
//  Организация - Ссылка - элемент справочника Организации, по которому нужно получить данные.
//
// Возвращаемое значение:
//  ТаблицаЗначений - контактная информация по организации.
//
Функция ПолучитьКонтактнуюИнформацию(Организация) Экспорт
	
	//В запросе реквизит Представление присваивается полю Значение, т.к в схеме XDTO поле Значение обязательно к заполнению,
	//а для адреса электронной почты реквизит Значение пустой
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОрганизацииКонтакнтаяИнформация.Вид,
	|	ВЫРАЗИТЬ(ОрганизацииКонтакнтаяИнформация.Представление КАК СТРОКА(1000)) КАК Значение,
	|	ВЫРАЗИТЬ(ОрганизацииКонтакнтаяИнформация.Представление КАК СТРОКА(1000)) КАК Комментарий
	|ИЗ
	|	Справочник.Организации.КонтактнаяИнформация КАК ОрганизацииКонтакнтаяИнформация
	|ГДЕ
	|	ОрганизацииКонтакнтаяИнформация.Ссылка = &Объект
	|	И (ОрганизацииКонтакнтаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailОрганизации)
	|			ИЛИ ОрганизацииКонтакнтаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонОрганизации)
	|			ИЛИ ОрганизацииКонтакнтаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФаксОрганизации))";
	
	Запрос.УстановитьПараметр("Объект", Организация);
	
	ТабЗн = Запрос.Выполнить().Выгрузить();
	Для Каждого стр Из ТабЗн Цикл
		стр.Значение    = СокрП(стр.Значение);
		стр.Комментарий = СокрП(стр.Комментарий);
	КонецЦикла;
	
	Возврат ТабЗн;
	
КонецФункции

// Возвращает название региона по коду.
//
// Параметры:
//  КодРегиона - Строка - строка, содержащая двухсимвольный код региона.
//
// Возвращаемое значение:
//  Строка - наименование региона.
//
Функция НазваниеРегиона(КодРегиона) Экспорт
	
Если НЕ ЗначениеЗаполнено(КодРегиона) Тогда
		Возврат("");
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("КодРегиона", Число(КодРегиона));
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	АдресныеОбъекты.Наименование,
	|	АдресныеОбъекты.Сокращение
	|ИЗ
	|	РегистрСведений.АдресныеОбъекты КАК АдресныеОбъекты
	|ГДЕ
	|	АдресныеОбъекты.Уровень = 1
	|	И АдресныеОбъекты.КодСубъектаРФ = &КодРегиона";
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат(СокрЛП(Выборка.Наименование+" "+Выборка.Сокращение));
	КонецЕсли;
	
	Возврат КодРегиона;
	
КонецФункции

// Получает адрес электронной почты контрагента.
//
// Параметры:
//  Контрагент - справочник - ссылка на элемент справочника контрагенты,
//                            адрес которого надо получить.
//
// Возвращаемое значение:
//  АдресЭП - адрес электронной почты.
//
Функция АдресЭлектроннойПочтыКонтрагента(Контрагент) Экспорт
	
	Если Контрагент  <> Неопределено Тогда
		
		ТипыКИ = Новый Массив;
		ТипыКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		
		Объекты = Новый Массив();
		Объекты.Добавить(Контрагент);
		АдресаПолучателя = УправлениеКонтактнойИнформациейБП.КонтактнаяИнформацияОбъектовНаДату(Объекты, ТипыКИ);
		
		Если АдресаПолучателя.Количество() > 0 Тогда
			
			Возврат АдресаПолучателя[0].Представление;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Получает банковские счета.
//
// Параметры:
//  Организация - СправочникСсылка.Организация - ссылка на организацию.
//  Банк - СправочникСсылка - ссылка на элемент справочника с банками.
//
// Возвращаемое значение:
//  Таблица - таблица значений с перечнем банковских счетов.
//
Функция ПолучитьБанковскиеСчета(Организация, Банк = Неопределено) Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БанковскиеСчета.Ссылка КАК БанковскийСчет
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|ГДЕ
		|	БанковскиеСчета.Владелец = &Организация";
	Если ЗначениеЗаполнено(Банк) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И БанковскиеСчета.Банк = &Банк";
	КонецЕсли;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Банк", Банк);
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Возврат Таблица;
	
КонецФункции

// Получает банковские реквизиты.
//
// Параметры:
//  МассивСчетов - массив - список банковских счетов.
//
// Возвращаемое значение:
//  Таблица - перечень банковских реквизитов.
//
Функция ПолучитьБанковскиеРеквизиты(МассивСчетов) Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БанковскиеСчета.Ссылка КАК Ссылка,
	|	БанковскиеСчета.НомерСчета КАК РасчетныйСчет,
	|	ЕСТЬNULL(БанковскиеСчета.Банк.КоррСчет, """") КАК КорреспондентскийСчет,
	|	ЕСТЬNULL(БанковскиеСчета.Банк.Код, """") КАК БИК,
	|	ЕСТЬNULL(БанковскиеСчета.Банк.Наименование, """") КАК Банк,
	|	ЕСТЬNULL(БанковскиеСчета.БанкДляРасчетов.Наименование, """") КАК БанкДляРасчетов,
	|	ЕСТЬNULL(БанковскиеСчета.БанкДляРасчетов.Код, """") КАК БанкДляРасчетовБИК,
	|	ЕСТЬNULL(БанковскиеСчета.БанкДляРасчетов.КоррСчет, """") КАК БанкДляРасчетовКоррСчет
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Ссылка В(&МассивСчетов)";
	Запрос.УстановитьПараметр("МассивСчетов", МассивСчетов);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Возврат Таблица;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа со счет-фактурами

// В процедуре выполняется заполнение реквизитов (дата выставления, признак выставления,
// дата получения, признак получения) документов счета-фактуры, по ключевым событиям,
// описанным в приказе от 25 апреля 2011 г. N 50н.: получение ПДО, ПДП, ИП, ПДОИП.
//
// Параметры:
//  ВладелецЭД - документ-ссылка, ссылка на документ ИБ счет-фактура выданный/полученный.
//  ЭД - справочник-ссылка, ссылка на элемент справочника ЭДПрисоединенныеФайлы.
//
Процедура ЗаполнитьРеквизитыЭСФ(ВладелецЭД, ЭД) Экспорт
	
	ТипЭлементаВерсииЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭД, "ТипЭлементаВерсииЭД");
	Если ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ Тогда
		
		//  Датой выставления покупателю счета-фактуры в электронном виде по телекоммуникационным
		// каналам связи считается дата поступления файла счета-фактуры Оператору ЭДО от продавца, 
		// указанная в подтверждении (ПДПЭСФ) этого Оператора ЭДО.  ПРИКАЗ от 25 апреля 2011 г. N 50н
		
		ДатаЭСФ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецЭД, "Дата");
		Если ДатаЭСФ >= '20130608' Тогда
			
			ЭСФ = ВладелецЭД.ПолучитьОбъект();
			ЭСФ.ДатаВыставления = ЭД.ВладелецФайла.ДатаДокументаОтправителя;
			ЭСФ.КодСпособаВыставления = 2;
			ЭСФ.Выставлен = Истина;
			ЭСФ.Записать(?(ЭСФ.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
			
		КонецЕсли;
		
	ИначеЕсли ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ Тогда
		
		//  Датой получения покупателем счета-фактуры в электронном виде по телекоммуникационным 
		// каналам связи считается дата направления покупателю Оператором ЭДО файла счета-фактуры продавца, 
		// указанная в подтверждении (ПДОЭСФ) Оператора ЭДО.  ПРИКАЗ от 25 апреля 2011 г. N 50н
		
		СвойстваЭСФ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВладелецЭД, "Дата, КодСпособаПолучения");
		ДатаДокументаОтправителя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭД, "ВладелецФайла.ДатаДокументаОтправителя");
		Если КонецДня(СвойстваЭСФ.Дата) <> КонецДня(ДатаДокументаОтправителя)
			ИЛИ СвойстваЭСФ.КодСпособаПолучения <> 2 Тогда
			
			ЭСФ = ВладелецЭД.ПолучитьОбъект();
			ДатаДоИзменения = ЭСФ.Дата;
			ЭСФ.Дата = ЭД.ВладелецФайла.ДатаДокументаОтправителя + (ЭСФ.Дата - НачалоДня(ЭСФ.Дата)) ;
			РазностьЛет = Год(ДатаДоИзменения) - Год(ЭД.ВладелецФайла.ДатаДокументаОтправителя);
			Если РазностьЛет <> 0 Тогда
				ЭСФ.УстановитьНовыйНомер();
			КонецЕсли;
			ЭСФ.КодСпособаПолучения = 2;
			ЭСФ.Записать(?(ЭСФ.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
			
		КонецЕсли;
		
	ИначеЕсли ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ Тогда
		
		// Счет-фактура в электронном виде считается выставленным, если продавцу поступило 
		// соответствующее подтверждение (ПДПЭСФ) Оператора ЭДО, при наличии у продавца извещения покупателя 
		// о получении счета-фактуры (ИПЭСФ), подписанного ЭЦП покупателя и полученного через Оператора ЭДО.
		// ПРИКАЗ от 25 апреля 2011 г. N 50н
		
		СвойстваЭСФ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВладелецЭД, "Выставлен, КодСпособаВыставления, ДатаВыставления");
		
		ДатаВыставленияЭСФ = ОбменСКонтрагентами.ДатаВыставленияСчетФактуры(ВладелецЭД.Ссылка);
		
		Если ЗначениеЗаполнено(ДатаВыставленияЭСФ) И (НЕ СвойстваЭСФ.Выставлен ИЛИ СвойстваЭСФ.КодСпособаВыставления <> 2
				ИЛИ СвойстваЭСФ.ДатаВыставления <> ДатаВыставленияЭСФ) Тогда
			ЭСФ = ВладелецЭД.ПолучитьОбъект();
			ЭСФ.ДатаВыставления = ДатаВыставленияЭСФ;
			ЭСФ.КодСпособаВыставления = 2;
			ЭСФ.Выставлен = Истина;
			ЭСФ.Записать(?(ЭСФ.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
		КонецЕсли;
		
	ИначеЕсли ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ Тогда
		
		//  Счет-фактура в электронном виде считается полученным покупателем, если ему поступило 
		// соответствующее подтверждение (ПДОЭСФ) Оператора ЭДО, при наличии извещения покупателя 
		// о получении счета-фактуры (ИПЭСФ), подписанного ЭЦП покупателя и подтвержденного (ПДОИПЭСФ)
		// Оператором ЭДО.  ПРИКАЗ от 25 апреля 2011 г. N 50н
		
		СвойстваЭСФ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВладелецЭД, "КодСпособаПолучения");
		Если СвойстваЭСФ.КодСпособаПолучения <> 2 Тогда
			ЭСФ = ВладелецЭД.ПолучитьОбъект();
			ЭСФ.КодСпособаПолучения = 2;
			ЭСФ.Записать(?(ЭСФ.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура возвращает данные для заполнения заявки на получение уникального
// идентификатора абонента, добавления сертификата абонента.
//
// Параметры:
// Организация - Произвольный - ссылка на элемент справочника Организации
// ДанныеОрганизации - структура с данными об организации:
//	* Индекс - Строка - почтовый индекс организации;
//	* Регион - Строка - код региона организации;
//	* Район - Строка;
//	* Город - Строка;
//	* НаселенныйПункт - Строка - населенный пункт расположения организации;
//	* Улица - Строка;
//	* Дом - Строка;
//	* Корпус - Строка;
//	* Квартира - Строка;
//	* Телефон - Строка - телефон организации;
//	* ЭлектроннаяПочта - Строка - электронная почта организации;
//	* Наименование - Строка - наименование организации;
//	* ПолноеНаименование - Строка - полное наименование организации;
//	* ИНН - Строка - ИНН организации;
//	* КПП - Строка - КПП организации;
//	* ОГРН - Строка - ОГРН организации;
//	* КодИМНС - Строка - код ИМНС организации;
//	* ЮрФизЛицо - Строка - вид лица, возможные значения: "ЮрЛицо" или "ФизЛицо";
//	* Фамилия - Строка - фамилия руководителя;
//	* Имя - Строка - имя руководителя;
//	* Отчество - Строка - отчество руководителя;
//
//
// Пример:
//
// для "Управление торговлей 11"
//
//ОрганизацияОбъект = Неопределено;
//Попытка
//	ОрганизацияОбъект = Организация.ПолучитьОбъект();
//Исключение
//КонецПопытки;
//
//ДанныеОрганизации.Очистить();
//
////// Возвращаемая структура должна содержать все перечисленные ниже
////// ключи и их значения - строки
////// Проверка свойств в дальнейшем не выполняется
//
//ДанныеОрганизации.Вставить("ОрганизацияСсылка", Организация);
//
//// в конфигурации "Управление торговлей" не реализовано хранение
//// компонентов адреса, поэтому компоненты адреса остаются пустыми
//
//ДанныеОрганизации.Вставить("Индекс"         , "");
//ДанныеОрганизации.Вставить("Регион"         , "");
//ДанныеОрганизации.Вставить("Район"          , "");
//ДанныеОрганизации.Вставить("Город"          , "");
//ДанныеОрганизации.Вставить("НаселенныйПункт", "");
//ДанныеОрганизации.Вставить("Улица"          , "");
//ДанныеОрганизации.Вставить("Дом"            , "");
//ДанныеОрганизации.Вставить("Корпус"         , "");
//ДанныеОрганизации.Вставить("Квартира"       , "");
//
//Если ОрганизацияОбъект = Неопределено Тогда
//	
//	ДанныеОрганизации.Вставить("Наименование"   , "");
//	ДанныеОрганизации.Вставить("ИНН"            , "");
//	ДанныеОрганизации.Вставить("КПП"            , "");
//	ДанныеОрганизации.Вставить("ОГРН"           , "");
//	ДанныеОрганизации.Вставить("КодИМНС"        , "");
//	ДанныеОрганизации.Вставить("ЮрФизЛицо"      , "ЮрЛицо");
//	
//	ДанныеОрганизации.Вставить("Фамилия"        , "");
//	ДанныеОрганизации.Вставить("Имя"            , "");
//	ДанныеОрганизации.Вставить("Отчество"       , "");
//	
//	Возврат;
//	
//КонецЕсли;
//
//// получение реквизитов организации
//
//ДанныеОрганизации.Вставить("Наименование"      , ОрганизацияОбъект.Наименование);
//ДанныеОрганизации.Вставить("ПолноеНаименование", ОрганизацияОбъект.НаименованиеПолное);
//ДанныеОрганизации.Вставить("ИНН"               , ОрганизацияОбъект.ИНН);
//ДанныеОрганизации.Вставить("КПП"               , ОрганизацияОбъект.КПП);
//ДанныеОрганизации.Вставить("ОГРН"              , ОрганизацияОбъект.ОГРН);
//ДанныеОрганизации.Вставить("КодИМНС"           , "");
//
//ВидыЛиц = Перечисления.ЮрФизЛицо;
//Если ОрганизацияОбъект.ЮрФизЛицо = ВидыЛиц.ЮрЛицо
//	ИЛИ ОрганизацияОбъект.ЮрФизЛицо = ВидыЛиц.ЮрЛицоНеРезидент Тогда
//	ДанныеОрганизации.Вставить("ЮрФизЛицо"      , "ЮрЛицо");
//Иначе
//	ДанныеОрганизации.Вставить("ЮрФизЛицо"      , "ФизЛицо");
//КонецЕсли;
//
//ДанныеОрганизации.Вставить("Фамилия" , "");
//ДанныеОрганизации.Вставить("Имя"     , "");
//ДанныеОрганизации.Вставить("Отчество", "");
//
//Руководитель = ОрганизацияОбъект.ТекущийРуководитель;
//Если НЕ Руководитель.Пустая() Тогда
//	
//	ФИОМассив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Руководитель.Наименование, " ");
//	КоличествоЭлементов = ФИОМассив.Количество();
//	
//	Если КоличествоЭлементов > 0 Тогда
//		ДанныеОрганизации.Фамилия = ФИОМассив[0];
//	КонецЕсли;
//	
//	Если КоличествоЭлементов > 1 Тогда
//		ДанныеОрганизации.Имя = ФИОМассив[1];
//	КонецЕсли;
//	
//	Если КоличествоЭлементов > 2 Тогда
//		ДанныеОрганизации.Отчество = ФИОМассив[2];
//	КонецЕсли;
//	
//КонецЕсли;
//
//ДанныеОрганизации.Вставить("Телефон", "");
//ДанныеОрганизации.Вставить("ЭлектроннаяПочта", "");
//
//СтруктураПоиска = Новый Структура;
//СтруктураПоиска.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
//СтруктураПоиска.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
//СтрокиТелефона = ОрганизацияОбъект.КонтактнаяИнформация.НайтиСтроки(СтруктураПоиска);
//
//Если СтрокиТелефона.Количество() > 0 Тогда
//	ДанныеОрганизации.Телефон = СтрокиТелефона[0].НомерТелефона;
//КонецЕсли;
//
//СтруктураПоиска = Новый Структура;
//СтруктураПоиска.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
//СтруктураПоиска.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.EmailОрганизации);
//СтрокиЭлектроннаяПочта = ОрганизацияОбъект.КонтактнаяИнформация.НайтиСтроки(СтруктураПоиска);
//
//Если СтрокиЭлектроннаяПочта.Количество() > 0 Тогда
//	ДанныеОрганизации.ЭлектроннаяПочта = СтрокиЭлектроннаяПочта[0].АдресЭП;
//КонецЕсли;
//
////////////////////////////////////////////////////////////////////////////////
//
// Пример для "Бухгалтерия предприятия, редакция 3.0":
//
//	СвойстваОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, 
//			"НаименованиеПолное, ИНН, КПП, ОГРН, КодНалоговогоОргана, ЮридическоеФизическоеЛицо");
//	
//	ОрганизацияФизЛицо = СвойстваОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
//	
//	ДанныеОрганизации.Вставить("ОрганизацияСсылка", Организация);
//	
//	ДанныеОрганизации.Вставить("Наименование"   , СвойстваОрганизации.НаименованиеПолное);
//	ДанныеОрганизации.Вставить("ИНН"            , СвойстваОрганизации.ИНН);
//	ДанныеОрганизации.Вставить("КПП"            , СвойстваОрганизации.КПП);
//	ДанныеОрганизации.Вставить("ОГРН"           , СвойстваОрганизации.ОГРН);
//	ДанныеОрганизации.Вставить("КодИМНС"        , СвойстваОрганизации.КодНалоговогоОргана);
//	
//	Если ОрганизацияФизЛицо Тогда
//		ДанныеОрганизации.Вставить("ЮрФизЛицо"      , "ФизЛицо");
//	Иначе
//		ДанныеОрганизации.Вставить("ЮрФизЛицо"      , "ЮрЛицо");
//	КонецЕсли;
//	
//	ОтветственныеЛица = ОтветственныеЛицаБП.ОтветственныеЛица(Организация, ТекущаяДатаСеанса());
//	ДанныеОрганизации.Вставить("Фамилия" , ОтветственныеЛица.РуководительФИО.Фамилия);
//	ДанныеОрганизации.Вставить("Имя"     , ОтветственныеЛица.РуководительФИО.Имя);
//	ДанныеОрганизации.Вставить("Отчество", ОтветственныеЛица.РуководительФИО.Отчество);
//	
//
//	Если ОрганизацияФизЛицо Тогда
//		ОбъектКонтактнойИнформации = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Организация, "ИндивидуальныйПредприниматель");
//		ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица;
//		ИмяСправочника = "ФизическиеЛица";
//	Иначе
//		ОбъектКонтактнойИнформации = Организация;
//		ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
//		ИмяСправочника = "Организации";
//	КонецЕсли;
//	
//	ДанныеОрганизации.Вставить("Индекс"         , "");
//	ДанныеОрганизации.Вставить("Регион"         , "");
//	ДанныеОрганизации.Вставить("Район"          , "");
//	ДанныеОрганизации.Вставить("Город"          , "");
//	ДанныеОрганизации.Вставить("НаселенныйПункт", "");
//	ДанныеОрганизации.Вставить("Улица"          , "");
//	ДанныеОрганизации.Вставить("Дом"            , "");
//	ДанныеОрганизации.Вставить("Корпус"         , "");
//	ДанныеОрганизации.Вставить("Квартира"       , "");
//	
//	ТекстЗапроса =
//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	|	КонтактнаяИнформация.ЗначенияПолей
//	|ИЗ
//	|	Справочник." + ИмяСправочника + ".КонтактнаяИнформация КАК КонтактнаяИнформация
//	|ГДЕ
//	|	КонтактнаяИнформация.Ссылка = &Ссылка
//	|	И КонтактнаяИнформация.Вид = &Вид";
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = ТекстЗапроса;
//	Запрос.УстановитьПараметр("Ссылка", ОбъектКонтактнойИнформации);
//	Запрос.УстановитьПараметр("Вид",    ВидКонтактнойИнформации);
//	Выборка = Запрос.Выполнить().Выбрать();
//	Если Выборка.Следующий() Тогда
//		
//		АдресСтруктурой = КонтактнаяИнформацияСлужебный.ПредыдущаяСтруктураКонтактнойИнформацииXML(Выборка.ЗначенияПолей);
//		Если АдресСтруктурой.Свойство("Индекс") Тогда
//			ДанныеОрганизации.Индекс = АдресСтруктурой.Индекс;
//		КонецЕсли;
//		Если АдресСтруктурой.Свойство("Регион") Тогда
//			ДанныеОрганизации.Регион = АдресСтруктурой.Регион;
//			ДанныеОрганизации.Вставить("КодРегиона", РегламентированнаяОтчетностьВызовСервера.КодРегионаПоНазванию(АдресСтруктурой.Регион));
//		КонецЕсли;
//		Если АдресСтруктурой.Свойство("Район") Тогда
//			ДанныеОрганизации.Район = АдресСтруктурой.Район;
//		КонецЕсли;
//		Если АдресСтруктурой.Свойство("Город") Тогда
//			ДанныеОрганизации.Город = АдресСтруктурой.Город;
//		КонецЕсли;
//		Если АдресСтруктурой.Свойство("НаселенныйПункт") Тогда
//			ДанныеОрганизации.НаселенныйПункт = АдресСтруктурой.НаселенныйПункт;
//		КонецЕсли;
//		Если АдресСтруктурой.Свойство("Улица") Тогда
//			ДанныеОрганизации.Улица = АдресСтруктурой.Улица;
//		КонецЕсли;
//		Если АдресСтруктурой.Свойство("Дом") Тогда
//			ДанныеОрганизации.Дом = АдресСтруктурой.Дом;
//		КонецЕсли;
//		Если АдресСтруктурой.Свойство("Корпус") Тогда
//			ДанныеОрганизации.Корпус = АдресСтруктурой.Корпус;
//		КонецЕсли;
//		Если АдресСтруктурой.Свойство("Квартира") Тогда
//			ДанныеОрганизации.Квартира = АдресСтруктурой.Квартира;
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//	ДанныеОрганизации.Вставить("Телефон", УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
//				Организация, ?(ОрганизацияФизЛицо, Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации)));
//
//	ДанныеОрганизации.Вставить("ЭлектроннаяПочта", УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
//				Организация, ?(ОрганизацияФизЛицо, Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица, Справочники.ВидыКонтактнойИнформации.EmailОрганизации)));
//
Процедура ЗаполнитьРегистрационныеДанныеОрганизации(Организация, ДанныеОрганизации) Экспорт
	
	//СвойстваОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, 
	//		"НаименованиеПолное, ИНН, КПП, ОГРН, КодНалоговогоОргана, ЮридическоеФизическоеЛицо");
	//
	//ОрганизацияФизЛицо = СвойстваОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	//
	//ДанныеОрганизации.Вставить("ОрганизацияСсылка", Организация);
	//
	//ДанныеОрганизации.Вставить("Наименование"   , СвойстваОрганизации.НаименованиеПолное);
	//ДанныеОрганизации.Вставить("ИНН"            , СвойстваОрганизации.ИНН);
	//ДанныеОрганизации.Вставить("КПП"            , СвойстваОрганизации.КПП);
	//ДанныеОрганизации.Вставить("ОГРН"           , СвойстваОрганизации.ОГРН);
	//ДанныеОрганизации.Вставить("КодИМНС"        , СвойстваОрганизации.КодНалоговогоОргана);
	//
	//Если ОрганизацияФизЛицо Тогда
	//	ДанныеОрганизации.Вставить("ЮрФизЛицо"      , "ФизЛицо");
	//Иначе
	//	ДанныеОрганизации.Вставить("ЮрФизЛицо"      , "ЮрЛицо");
	//КонецЕсли;
	//
	//ОтветственныеЛица = ОтветственныеЛицаБП.ОтветственныеЛица(Организация, ТекущаяДатаСеанса());
	//ДанныеОрганизации.Вставить("Фамилия" , ОтветственныеЛица.РуководительФИО.Фамилия);
	//ДанныеОрганизации.Вставить("Имя"     , ОтветственныеЛица.РуководительФИО.Имя);
	//ДанныеОрганизации.Вставить("Отчество", ОтветственныеЛица.РуководительФИО.Отчество);
	//

	//Если ОрганизацияФизЛицо Тогда
	//	ОбъектКонтактнойИнформации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ИндивидуальныйПредприниматель");
	//	ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица;
	//	ИмяСправочника = "ФизическиеЛица";
	//Иначе
	//	ОбъектКонтактнойИнформации = Организация;
	//	ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
	//	ИмяСправочника = "Организации";
	//КонецЕсли;
	//
	//ДанныеОрганизации.Вставить("Индекс"         , "");
	//ДанныеОрганизации.Вставить("Регион"         , "");
	//ДанныеОрганизации.Вставить("Район"          , "");
	//ДанныеОрганизации.Вставить("Город"          , "");
	//ДанныеОрганизации.Вставить("НаселенныйПункт", "");
	//ДанныеОрганизации.Вставить("Улица"          , "");
	//ДанныеОрганизации.Вставить("Дом"            , "");
	//ДанныеОрганизации.Вставить("Корпус"         , "");
	//ДанныеОрганизации.Вставить("Квартира"       , "");
	//
	//ТекстЗапроса =
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	КонтактнаяИнформация.ЗначенияПолей
	//|ИЗ
	//|	Справочник." + ИмяСправочника + ".КонтактнаяИнформация КАК КонтактнаяИнформация
	//|ГДЕ
	//|	КонтактнаяИнформация.Ссылка = &Ссылка
	//|	И КонтактнаяИнформация.Вид = &Вид";
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = ТекстЗапроса;
	//Запрос.УстановитьПараметр("Ссылка", ОбъектКонтактнойИнформации);
	//Запрос.УстановитьПараметр("Вид",    ВидКонтактнойИнформации);
	//Выборка = Запрос.Выполнить().Выбрать();
	//Если Выборка.Следующий() Тогда
	//	
	//	АдресСтруктурой = УправлениеКонтактнойИнформацией.ПредыдущаяСтруктураКонтактнойИнформацииXML(Выборка.ЗначенияПолей);
	//	Если АдресСтруктурой.Свойство("Индекс") Тогда
	//		ДанныеОрганизации.Индекс = АдресСтруктурой.Индекс;
	//	КонецЕсли;
	//	Если АдресСтруктурой.Свойство("Регион") Тогда
	//		ДанныеОрганизации.Регион = АдресСтруктурой.Регион;
	//		ДанныеОрганизации.Вставить("КодРегиона", РегламентированнаяОтчетностьВызовСервера.КодРегионаПоНазванию(АдресСтруктурой.Регион));
	//	КонецЕсли;
	//	Если АдресСтруктурой.Свойство("Район") Тогда
	//		ДанныеОрганизации.Район = АдресСтруктурой.Район;
	//	КонецЕсли;
	//	Если АдресСтруктурой.Свойство("Город") Тогда
	//		ДанныеОрганизации.Город = АдресСтруктурой.Город;
	//	КонецЕсли;
	//	Если АдресСтруктурой.Свойство("НаселенныйПункт") Тогда
	//		ДанныеОрганизации.НаселенныйПункт = АдресСтруктурой.НаселенныйПункт;
	//	КонецЕсли;
	//	Если АдресСтруктурой.Свойство("Улица") Тогда
	//		ДанныеОрганизации.Улица = АдресСтруктурой.Улица;
	//	КонецЕсли;
	//	Если АдресСтруктурой.Свойство("Дом") Тогда
	//		ДанныеОрганизации.Дом = АдресСтруктурой.Дом;
	//	КонецЕсли;
	//	Если АдресСтруктурой.Свойство("Корпус") Тогда
	//		ДанныеОрганизации.Корпус = АдресСтруктурой.Корпус;
	//	КонецЕсли;
	//	Если АдресСтруктурой.Свойство("Квартира") Тогда
	//		ДанныеОрганизации.Квартира = АдресСтруктурой.Квартира;
	//	КонецЕсли;
	//	
	//КонецЕсли;
	//
	//ДанныеОрганизации.Вставить("Телефон", УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
	//			Организация, ?(ОрганизацияФизЛицо, Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации)));
	
КонецПроцедуры

// Заполняет структуру, содержащую информацию об адресе участника ЭДО.
//
// Параметры:
//  СтруктураАдреса - структура - информация об адресе;
//   * Поля структуры для адреса РФ.
//    ** АдресРФ - Булево - признак, что адрес РФ;
//    ** Индекс - Строка - почтовый индекс организации;
//    ** Регион - Строка - код региона организации;
//    ** Район - Строка;
//    ** Город - Строка;
//    ** НаселенныйПункт - Строка - населенный пункт расположения организации;
//    ** Улица - Строка;
//    ** Дом - Строка;
//    ** Корпус - Строка;
//    ** Квартира - Строка;
//    ** Поля структуры для иностранного адреса или адреса РФ строкой.
//   * КодСтраны - Строка - код страны;
//    ** АдресТекст - Строка - представление адреса;
//  СтруктураПараметров - Структура - содержит ссылки на элементы справочника;
//  ВидКонтрагента - Строка - имя метаданных справочника;
//  ВидАдреса - Строка - "Факт" или "Юр";
//  ТекстОшибки - Строка - описание ошибки.
//
Процедура ПолучитьАдресСтруктурой(СтруктураАдреса, СтруктураПараметров, ВидКонтрагента = "Контрагент", ВидАдреса = "Юр", ТекстОшибки = "", ДатаСведений = '00010101') Экспорт
	
	СтруктураАдреса.Вставить("АдресРФ", Истина);
	СтруктураАдреса.Вставить("КодСтр", "");
	СтруктураАдреса.Вставить("КодСтраны", "");
	СтруктураАдреса.Вставить("Индекс", "");
	СтруктураАдреса.Вставить("КодРегион", "");
	СтруктураАдреса.Вставить("КодРегиона", "");
	СтруктураАдреса.Вставить("Район", "");
	СтруктураАдреса.Вставить("Город", "");
	СтруктураАдреса.Вставить("НаселПункт", "");
	СтруктураАдреса.Вставить("НаселенныйПункт", "");
	СтруктураАдреса.Вставить("Улица", "");
	СтруктураАдреса.Вставить("Дом", "");
	СтруктураАдреса.Вставить("Корпус", "");
	СтруктураАдреса.Вставить("Кварт", "");
	СтруктураАдреса.Вставить("Квартира", "");
	СтруктураАдреса.Вставить("АдрТекст", "");
	СтруктураАдреса.Вставить("АдресТекст", "");
	СтруктураАдреса.Вставить("КодГАР", "");
	
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров[ВидКонтрагента]) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураПараметров[ВидКонтрагента]) = Тип("СправочникСсылка.Организации") Тогда
		ВидКонтактнойИнформации = ?(ВидАдреса = "Юр", Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
	Иначе
		ВидКонтактнойИнформации = ?(ВидАдреса = "Юр", Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
	КонецЕсли;
	
	СведенияОбАдресе = УправлениеКонтактнойИнформациейБП.АдресСтруктурой(СтруктураПараметров[ВидКонтрагента], ВидКонтактнойИнформации, ДатаСведений);
	
	СтруктураАдреса.АдрТекст   = СведенияОбАдресе.Представление;
	СтруктураАдреса.АдресТекст = СведенияОбАдресе.Представление;
	
	СтруктураАдреса.КодСтраны  = СведенияОбАдресе.КодСтраны;
	СтруктураАдреса.КодСтр     = СведенияОбАдресе.КодСтраны;
	СтруктураАдреса.АдресРФ    = СведенияОбАдресе.АдресРФ;
	СтруктураАдреса.КодРегион  = СведенияОбАдресе.КодРегиона;
	СтруктураАдреса.КодРегиона = СведенияОбАдресе.КодРегиона;
	СтруктураАдреса.Индекс     = СведенияОбАдресе.Индекс;
	СтруктураАдреса.Район      = СведенияОбАдресе.Район;
	СтруктураАдреса.Город      = СведенияОбАдресе.Город;
	СтруктураАдреса.НаселПункт = СведенияОбАдресе.НаселенныйПункт;
	СтруктураАдреса.НаселенныйПункт = СведенияОбАдресе.НаселенныйПункт;
	СтруктураАдреса.Улица      = СведенияОбАдресе.Улица;
	СтруктураАдреса.Дом        = СведенияОбАдресе.Дом;
	СтруктураАдреса.Корпус     = СведенияОбАдресе.Корпус;
	СтруктураАдреса.Кварт      = СведенияОбАдресе.Квартира;
	СтруктураАдреса.Квартира   = СведенияОбАдресе.Квартира;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Просмотр электронных документов.

// Формирует текст НДС по этапу оплаты.
//
// Параметры:
//  СоответствиеСтавокНДС - Соответствие - соответствие, полученное с помощью функции ПолучитьСоответствиеСтавокНДС().
//  ПроцентПлатежа       - Число - Процент платежа по этапу.
//
// Возвращаемое значение:
//  ТекстНДС - Строка - описание ставки НДС.
//
Функция СформироватьТекстНДСЭтапаОплаты(СоответствиеСтавокНДС, ПроцентПлатежа) Экспорт
	
	ТекстНДС = "";
	
	Если СоответствиеСтавокНДС.Количество() > 0 Тогда
		
		Для Каждого ТекСтавкаНДС Из СоответствиеСтавокНДС Цикл
			
			Если ТекСтавкаНДС.Значение <> 0 Тогда
				
				ТекстНДС = ТекстНДС + ?(ПустаяСтрока(ТекстНДС), НСтр("ru='НДС(%СтавкаНДС%) %СуммаНДС%'"),
					НСтр("ru=', НДС(%СтавкаНДС%) %СуммаНДС%'"));
				ТекстНДС = СтрЗаменить(ТекстНДС, "%СтавкаНДС%", ТекСтавкаНДС.Ключ);
				ТекстНДС = СтрЗаменить(ТекстНДС, "%СуммаНДС%",  Формат(ТекСтавкаНДС.Значение / 100 * ПроцентПлатежа, "ЧЦ=15; ЧДЦ=2"));
			
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстНДС) Тогда
		ТекстНДС = НСтр("ru='В т.ч. '") + ТекстНДС;
	Иначе
		ТекстНДС = НСтр("ru='Без налога (НДС)'");
	КонецЕсли;
	
	Возврат ТекстНДС;
	
КонецФункции

// Возвращает текстовое представление суммы.
//
// Параметры:
//  СуммаКПрописи - Число - сумма, по которой надо получить представление.
//  КодВалюты - Число - код используемой валюты.
//  ЧН - Строка - параметр нулевого значения числа.
//  ЧРГ - Строка - разделитель групп целой части числа.
//
// Возвращаемое значение:
//  Строка - текстовое представление. 
//
Функция ФорматСумм(СуммаКПрописи, КодВалюты = Неопределено, ЧН = "", ЧРГ = "") Экспорт
	
	Валюта = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Валюты",КодВалюты);
	Возврат ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаКПрописи, Валюта,  ЧН, ЧРГ);
	
КонецФункции

// Возвращает сумму прописью.
//
// Параметры:
//  СуммаЧислом - Число - преобразуемая сумма.
//  КодВалюты - Число - код используемой валюты.
//
// Возвращаемое значение:
//  Строка - сумма прописью.
//
Функция СуммаПрописью(СуммаЧислом, КодВалюты) Экспорт
	
	Валюта = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Валюты",КодВалюты);
	Если Валюта = Неопределено Тогда
		Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	
	Возврат ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СуммаЧислом, Валюта);
	
КонецФункции

// Формирует текст НДС по ставке для печатной формы счета и заказа.
//
// Параметры:
//  СтавкаНДС       - ПеречислениеСсылка.СтавкиНДС - ставка НДС, для которой необходимо сформировать текст.
//  ЦенаВключаетНДС - Булево - Признак включения НДС в цену.
//
// Возвращаемое значение:
//  Результат - Строка - текстовое представление ставки НДС.
//
Функция ТекстНДСПоСтавке(СтавкаНДС, ЦенаВключаетНДС) Экспорт
	
	ТекстНДСПоСтавке = ?(ЦенаВключаетНДС, НСтр("ru='В т.ч. НДС (%СтавкаНДС%):'"), НСтр("ru='НДС (%СтавкаНДС%):'"));
	ТекстНДСПоСтавке = СтрЗаменить(ТекстНДСПоСтавке, "%СтавкаНДС%", СтавкаНДС);
	
	Возврат ТекстНДСПоСтавке;
	
КонецФункции

// Возвращает ответственного за электронный документооборот по данному соглашению.
//
// Параметры:
//  Контрагент - СправочникСсылка - ссылка на контрагента, по которому надо получить ответственного.
//  Соглашение - СправочникСсылка.СоглашениеОбИспользованииЭД - соглашение, по которому надо найти ответственного.
//
// Возвращаемое значение:
//  СправочникСсылка.Пользователи - ответственное лицо.
//
Функция ПолучитьОтветственногоПоЭД(Контрагент, Соглашение) Экспорт
	
	Возврат Пользователи.ТекущийПользователь();
	
КонецФункции

// Возврат признака физического лица.
//
// Параметры:
//  ДанныеКонтрагента - СправочникСсылка - ссылка на элемент справочника.
//
// Возвращаемое значение:
//  Булево - Истина если физическое лицо.
//
Функция ЭтоФизЛицо(ДанныеКонтрагента) Экспорт
	
	ЭтоФизЛицо = Ложь;
	
	Если ДанныеКонтрагента.Метаданные().Реквизиты.Найти("ЮридическоеФизическоеЛицо") = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЮрФизЛицо = ДанныеКонтрагента.ЮридическоеФизическоеЛицо;
	
	Если ТипЗнч(ЮрФизЛицо) <> Тип("ПеречислениеСсылка.ЮридическоеФизическоеЛицо") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЭтоФизЛицо = Ложь;
	Если ЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		ЭтоФизЛицо = Истина;
	КонецЕсли;
	
	Возврат ЭтоФизЛицо;
	
КонецФункции

// Вывод данных о скидках в печатную форму документа.
//
// Параметры:
//  Товары - ТаблицаЗначений, ВыборкаИзРезультатаЗапроса - список товаров.
//  ИспользоватьСкидки - Булево - используются скидки.
// 
// Возвращаемое значение:
//  Булево - есть скидки.
//
Функция НужноВыводитьСкидки(Знач Товары, ИспользоватьСкидки) Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Получает имя дополнительной колонки.
//
// Возвращаемое значение:
//  ИмяКолонки - строка колонки.
//
Функция ИмяДополнительнойКолонки() Экспорт
	
	Возврат "Код";
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Переопределение поведения электронных документов.

// Данное событие возникает при изменении элемента справочника ЭДПрисоединенныеФайлы.
// Предназначено для переопределения или добавления изменяемых реквизитов электронного документа.
//
// Параметры:
//  Объект - СправочникСсылка.ЭДПрисоединенныеФайлы - изменяемый объект.
//  СтруктураПараметров - Структура - структура изменяемых реквизитов.
//
Процедура ПриИзмененииПрисоединенногоФайла(Объект, СтруктураПараметров) Экспорт
	
	Если НЕ СтруктураПараметров.Свойство("Ответственный") Тогда
		СтруктураПараметров.Вставить("Ответственный", Пользователи.АвторизованныйПользователь());
	КонецЕсли;
	
КонецПроцедуры

// Выполняет дополнительную обработку электронного документа, которому назначили статус "Утвержден".
// 
// Параметры:
//  ЭлектронныйДокумент - СправочникСсылка - ссылка на присоединенный файл.
//
Процедура НазначенСтатусУтвержден(ЭлектронныйДокумент) Экспорт
	
	Попытка
		ФайлОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
		ФайлОбъект.Изменил = Пользователи.ТекущийПользователь();
		ФайлОбъект.Записать();
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) + НСтр("ru = ' (подробности см. в Журнале регистрации).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеБПВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'утверждение ЭД'"), ТекстОшибки, ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

// Выполняет дополнительную обработку электронного документа, которому назначили статус "Подписан".
// 
// Параметры:
//  ЭлектронныйДокумент - СправочникСсылка - ссылка на присоединенный файл.
//
Процедура НазначенСтатусПодписан(ЭлектронныйДокумент) Экспорт
	
КонецПроцедуры

// Вызывается при изменении состояния документооборота на ОбменЗавершен, ОбменЗавершенСИсправлением.
//
// Параметры:
//  ОснованияЭлектронногоДокумента - ДокументСсылка - ссылка на документ основания электронного документа.
//
Процедура УстановленоСостояниеОбменЗавершен(ОснованияЭлектронногоДокумента) Экспорт
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганами.ЗаписатьИсточникиВРегистрДокументыПоТребованиюФНС(ОснованияЭлектронногоДокумента);
	
КонецПроцедуры

// Проверяет все ли необходимые подписи установлены перед отправкой контрагенту.
// 
// Параметры:
//  ЭлектронныйДокумент - СправочникСсылка - ссылка на присоединенный файл.
//  ФлагПодписанПолностью - Булево - признак полностью подписанного документа.
//
Процедура ЭлектронныйДокументПолностьюПодписан(ЭлектронныйДокумент, ФлагПодписанПолностью) Экспорт
	
	
КонецПроцедуры

// Проверка выполнения условия для утверждения документа.
//
// Параметры:
//  ЭлектронныйДокумент - Ссылка - ссылка на электронный документ.
//
// Возвращаемое значение:
//  Булево - Истина, если готов к утверждению.
//
Функция ЭлектронныйДокументГотовКУтверждению(ЭлектронныйДокумент) Экспорт
	
	Возврат Истина;
КонецФункции

// Определяет возможно ли редактировать объект информационной базы.
//
// Параметры:
//  Источник - ДокументОбъект - проверяемый объект.
//  РедактированиеРазрешено - Булево - возвращает разрешено или нет редактирование.
//
Процедура ПроверитьВозможностьРедактированияОбъекта(Источник, РедактированиеРазрешено) Экспорт
	
КонецПроцедуры

// Выполняется проверка возможности корректного чтения Пакета ЭД.
// Необходимость данной проверки возникает при работе с данными внешней информационной базы (через com-соединение).
//
// Параметры:
//  ПакетЭД - ДокументСсылка.ПакетЭД - исследуемый пакет электронных документов.
//  ЧтениеПакетаВозможно - Булево, Неопределено - Ложь - чтение пакета не будет выполняться, во всех остальных случаях,
//                                                       (включая пустое значение) пакет будет прочитан.
//
Процедура ОпределитьВозможностьЧтенияДвоичныхДанныхПакетаЭД(ПакетЭД, ЧтениеПакетаВозможно) Экспорт
	
	
	
КонецПроцедуры

// Проверяет на корректность заполнения параметров электронного документа.
//
// Параметры:
//  ПараметрыЭД - структура - перечень параметров ЭД.
//
// Возвращаемое значение:
//  Булево - Истина если правильно заполнен объект выгрузки.
//
Функция ПроверитьПравильностьЗаполненияОбъекта(ПараметрыЭД) Экспорт
	
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Переопределение сообщений пользователю.

// Устарела.Следует использовать ЭлектронноеВзаимодействиеПереопределяемый.СоответствиеКодовРеквизитовИПредставлений.
// Получает таблицу соответствий параметров для типов метаданных их пользовательским представлениям.
//
// Параметры:
//  ТаблицаСоответствия - ТаблицаЗначений - соответствие параметров для типов метаданных их пользовательским
//                          представлениям содержит следующие колонки: ТипИсточника, Параметр, Представление.
//
Процедура ПолучитьТаблицуСоответствияПараметровПользовательскимПредставлениям(ТаблицаСоответствия) Экспорт
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции.

// Создает таблицу порядка создания типов при загрузке электронного документа.
//
// Возвращаемое значение:
//  Таблица - таблица значений.
//
Функция ЗаполнитьТаблицуПорядкаСозданияТиповОбъектов() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	
	Таблица.Колонки.Добавить("ТипОбъекта");
	Таблица.Колонки.Добавить("Порядок");
	
	НовСтрока = Таблица.Добавить();
	НовСтрока.ТипОбъекта = "НоменклатураПоставщиков";
	НовСтрока.Порядок    = 2;
	
	Возврат Таблица;
	
КонецФункции

// Получает имя временного файла.
//
// Параметры:
//  ИмяВременногоФайла - Строка - имя временного файла;
//  Расширение - Строка - расширение для временного файла.
//
Процедура ТекущееИмяВременногоФайла(ИмяВременногоФайла, Расширение = "") Экспорт
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
	
КонецПроцедуры

// Осуществляет разбор файла с реквизитами контрагента
// в ней можно внести изменения в структуру возвращаемых данных.
//
// Параметры:
//  СсылкаНаФайл - Строка - адрес хранилища файла с реквизитами контрагента.
//  СтруктураВозврата - Структура - перечень параметров.
//  РезультатРазбора - Булево - Истина - разбор файла выполнен; Ложь - разбор файла не выполнялся.
//  ОшибкаРазбора - Строка - текст, описание ошибки.
//
Процедура РазобратьФайлРеквизитовКонтрагента(СсылкаНаФайл, СтруктураВозврата, РезультатРазбора, ОшибкаРазбора) Экспорт
	
	
КонецПроцедуры

// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект. Если не задан альтернативный алгоритм получения значений реквизитов (процедура пуста),
// то используется функция БСП: ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ИменаРеквизитов).
// 
// Параметры:
//  Ссылка - Ссылка - произвольная ссылка.
//  ИменаРеквизитов - Строка, Структура - если Строка, то имена реквизитов, 
//               перечисленные через запятую, в формате требований к свойствам структуры.
//               Например, "Код, Наименование, Родитель".
//               Если Структура, то в качестве ключа передается псевдоним поля для
//               возвращаемой структуры с результатом, а в качестве значения (опционально) 
//               - фактическое имя поля в таблице. 
//               Если значение не определено, то имя поля берется из ключа.
//  СтруктураДанных - Структура - содержит список свойств, как список имен в строке
//                 ИменаРеквизитов, со значениям реквизитов, прочитанных
//                 из информационной базы.
// 
Процедура ПолучитьСтруктуруЗначенийРеквизитов(Ссылка, ИменаРеквизитов, СтруктураДанных) Экспорт
	
	
	
КонецПроцедуры

// Выполняет заполнение списка документов по виду электронного документа.
//
// Параметры:
//  ВидЭД           - Перечисления   - вид электронного документа;
//  СписокВозврата  - СписокЗначений - список ссылок на документы информационной базы.
//
Процедура СписокТиповДокументовПоВидуЭД(ВидЭД, СписокВозврата) Экспорт
	
	Если ВидЭД = Перечисления.ВидыЭД.ТОРГ12 ИЛИ ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
		ИЛИ ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
		ИЛИ ВидЭД	= Перечисления.ВидыЭД.АктНаПередачуПрав Тогда //* Акт
		СписокВозврата.Добавить(Документы.ПоступлениеТоваровУслуг.ПустаяСсылка(),
			Метаданные.Документы.ПоступлениеТоваровУслуг.Представление());
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель ИЛИ ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
		СписокВозврата.Добавить(Документы.КорректировкаПоступления.ПустаяСсылка(),
			Метаданные.Документы.КорректировкаПоступления.Представление());
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СчетФактура Тогда
		СписокВозврата.Добавить(Документы.СчетФактураПолученный.ПустаяСсылка(),
			Метаданные.Документы.СчетФактураПолученный.Представление());
	ИначеЕсли ВРег(ВидЭД) = ВРег("РеквизитыОрганизации") Тогда
		СписокВозврата.Добавить(Справочники.Контрагенты.ПустаяСсылка(),
			Метаданные.Справочники.Контрагенты.Представление());	
	ИначеЕсли ВидЭД	= Перечисления.ВидыЭД.СчетНаОплату Тогда
		СписокВозврата.Добавить(Документы.СчетНаОплатуПоставщика.ПустаяСсылка(),
			Метаданные.Документы.СчетНаОплатуПоставщика.Представление());
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара Тогда
		СписокВозврата.Добавить(Документы.ОтчетКомиссионераОПродажах.ПустаяСсылка(),
			Метаданные.Документы.ОтчетКомиссионераОПродажах.Представление());
	КонецЕсли;
	
КонецПроцедуры

// Задает имя файла "по умолчанию", с которым будет предложено пользователю сохранить
// ЭД при выгрузке по сценарию "Однократной сделки".
//
// Параметры:
//  ВладелецЭД - ДокументСсылка - ссылка на документ ИБ, на основании которого формируется и выгружается ЭД.
//  НаименованиеФайла - Строка - имя файла.
//
Процедура ЗадатьИмяСохраняемогоФайлаПриБыстромОбмене(ВладелецЭД, НаименованиеФайла) Экспорт
	
КонецПроцедуры

// Получает реквизиты элемента справочника "Организации", для выгрузки в xml-файл.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - элемент справочника организации;
//  СтруктураВозврата - структура - перечень параметров организации.
//
Процедура ПолучитьРеквизитыОрганизацииДляВыгрузкиВФайл(Организация, СтруктураВозврата) Экспорт
	
	Реквизиты = Новый Структура("Наименование, ИНН, КПП, ЮрФизЛицо, НаименованиеПолное", "Наименование",
		"ИНН", "КПП", "ЮридическоеФизическоеЛицо", "НаименованиеПолное");
	ЗаполнитьЗначенияСвойств(СтруктураВозврата, ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, Реквизиты));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Механизм выгрузки электронных документов в файлы для отправки в ФНС через сервис 1С-Отчетность.

// Метод заполняет соответствие выгружаемым документам дату и номер основания (договора).
//
// Параметры:
//  МассивСсылок - Массив - массив ссылок на документы ИБ (в качестве возможных значений следует принимать те типы 
//                          документов, на основании которых в данном прикладном решении формируется электронный
//                          документ вида «Акт приемки-сдачи работ (услуг).
//  ВозвращаемоеСоответствие - Соответствие - в случае, если требуемые реквизиты у договора не заполнены
//                             или при невозможности получения данных реквизитов, то помещать пустые 
//                             значения указанных типов.
//                             Соответствие со следующими свойствами:
//                             * ключ соответствия - ссылка на выгружаемый документ ИБ, взятая из входящего параметра;
//                             * значение соответствия - Структура:
//                               ** НомерДоговора - Строка;
//                               ** ДатаДоговора - Дата.
//
Процедура ПолучитьНомерДатаДоговораДокументов(МассивСсылок, ВозвращаемоеСоответствие) Экспорт
	
	ВозвращаемоеСоответствие = 
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ПолучитьНомерДатаДоговораДокументов(МассивСсылок);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Механизм прямого обмена между организациями.

// Подготавливает данные для электронного документа типа ПередачаТоваровМеждуОрганизациями.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо
//                                    создать электронный документ.
//  СтруктураЭД - Структура - данные для формирования электронного документа.
//  СтруктураПараметров - Структура - параметры для заполнения.
//
Процедура ПодготовитьДанныеПоПередачеТоваровМеждуОрганизациями(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ВозвратТоваровМеждуОрганизациями.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  СтруктураПараметров - Структура - параметры для заполнения.
//
Процедура ПодготовитьДанныеПоВозвратуТоваровМеждуОрганизациями(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
КонецПроцедуры

// Заполнение состояния ЭДО.
//
// Параметры:
//  Форма - Форма - текущая форма.
//
Процедура ЗаполнитьСостояниеЭДО(Форма) Экспорт
	
КонецПроцедуры

// Возвращает список имен документов доступных для создания при загрузке электронного документа.
//
// Параметры:
//  ВидЭД			 - Перечисление.ВидыЭД - вид электронного документа
//  СписокСпособовОбработки - Строка - список для добавления операций по отражению электронного документа.
//
Процедура СписокОперацийВидаЭД(ВидЭД,СписокСпособовОбработки) Экспорт 
	
	Если ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
		
		СписокСпособовОбработки.Добавить("ПоступлениеТоваровУслуг", НСтр("ru = 'Поступление услуг'"), Истина);
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
		
		СписокСпособовОбработки.Добавить("ПоступлениеТоваровУслуг", НСтр("ru = 'Поступление товаров'"), Истина);
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
		
		СписокСпособовОбработки.Добавить("КорректировкаПоступления", НСтр("ru = 'Корректировка поступления'"), Истина);
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
		
		СписокСпособовОбработки.Добавить("ПоступлениеТоваровУслуг", НСтр("ru = 'Акт на передачу прав'"), Истина);
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
		
		СписокСпособовОбработки.Добавить("СчетФактураПолученный", НСтр("ru = 'Корректировочный счет-фактура полученный'"),Истина);
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СчетФактура Тогда
		
		СписокСпособовОбработки.Добавить("СчетФактураПолученный", НСтр("ru = 'Счет-фактура полученный'"), Истина);
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
		
		СписокСпособовОбработки.Добавить("СчетНаОплатуПоставщика", НСтр("ru = 'Счет на оплату поставщика'"), Истина);
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара Тогда
		
		СписокСпособовОбработки.Добавить("ОтчетКомиссионераОПродажах", НСтр("ru = 'Отчет комиссионера о продажах'"), Истина);
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ТОРГ12 Тогда
		
		СписокСпособовОбработки.Добавить("ПоступлениеТоваровУслуг", НСтр("ru = 'Поступление товаров'"), Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - переопределяет имя объекта метаданных для способа обработки входящего электронного документа,
//			   по-умолчанию совпадает с именем способа обработки.
//
// Параметры:
//  СпособОбработки - Строка - один из доступных способов обработки входящего документа
//  ИмяДокумента - Строка - переменная в которую будет помещено имя объекта метаданных, соответствующее переданному способу обработки.
//
Процедура ИмяДокументаПоСпособуОбработки(СпособОбработки,ИмяДокумента) Экспорт 
	
	
	
КонецПроцедуры

// Процедура - Переопределяет заполнение таблицы соответствия видов ЭД и способов обработки по имени профиля,
//			   который используется в форме настройки ЭДО на закладке "Входящие электронные документы".
//
// Параметры:
//  ТаблицаПрофиля	 - ТаблицаЗначений - таблица, содержащая соответствие видов электронных документов и способов обработки
//  Профиль			 - Строка - имя профиля настроек: "Автоматически", "Вручную", "Поставщик", "Покупатель".
//
Процедура ТаблицаПредопределенногоПрофиля(ТаблицаПрофиля,Профиль) Экспорт 
	
КонецПроцедуры 

// Ищет документ владелец электронного документа, который мог быть получен через ЕГАИС.
//
// Параметры:
//  Документ - ДокументСсылка - Ссылка на документ, полученный через ЕГАИС.
//  ИдентификаторДокумента - Строка - Идентификатор документа отправителя.
//
Процедура НайтиРанееПолученныйДокумент(Документ, ИдентификаторДокумента) Экспорт
	
	
	
КонецПроцедуры

// Заполняет соответствие исходящих видов электронных документов и представлений документов информационной базы,
// на основании которых они формируются.
//
// Параметры:
//  СоответствиеВидовЭДДокументамИБ - Соответствие - перечень видов электронных документов.
//    - Соответствие - с свойствами:
//    * Ключ             - Перечисление.ВидыЭД - вид электронного документа.
//    * Значение         - Строка - представление документа информационной базы (хоз. операции).
//
Процедура СоответствиеИсходящихВидовЭДДокументамИБ(СоответствиеВидовЭДДокументамИБ) Экспорт 
	
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.ТОРГ12Продавец,         НСтр("ru = 'Реализация товаров'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.АктИсполнитель,         НСтр("ru = 'Реализация услуг'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.АктНаПередачуПрав,      НСтр("ru = 'Акт на передачу прав'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.СчетФактура,            НСтр("ru = 'Счет-фактура выданный'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель, НСтр("ru = 'Корректировка реализации'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.КорректировочныйСчетФактура, НСтр("ru = 'Корректировочный счет-фактура'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.СчетНаОплату,           НСтр("ru = 'Счет покупателю'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара, НСтр("ru = 'Отчет о продажах комитенту'"));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Устаревшие процедуры и функции.

// Устарела. Следует использовать новую (см. ЗаполнитьДанныеПоТорг12ПродавецФНС).
// Подготавливает данные для электронного документа типа Торг12 титул продавца.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы,
//                                    по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  СтруктураПараметров - Структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоТорг12(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
КонецПроцедуры

// Устарела. Следует использовать новую (см. ЗаполнитьДанныеПоТОРГ12ПокупательФНС).
// Подготавливает данные для электронного документа типа Торг12 титул покупателя.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать ЭД.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  СтруктураПараметров - Структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоТорг12Покупатель(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
КонецПроцедуры

// Устарела. Следует использовать новую (см. ЗаполнитьДанныеПоАкт501ИсполнительФНС).
// Подготавливает данные титула исполнителя для электронного документа типа Акт выполненных работ формата 5.01.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать ЭД.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  СтруктураПараметров - Структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоАкт501(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
КонецПроцедуры

// Устарела. Следует использовать новую (см. ЗаполнитьДанныеПоАкт501ЗаказчикФНС).
// Подготавливает данные титула заказчика для электронного документа типа Акт выполненных работ формата 5.01.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать ЭД.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  СтруктураПараметров - Структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоАкт501Заказчик(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
КонецПроцедуры

// Устарела. Следует использовать новую (см. ЗаполнитьДанныеПоСчетуФактуреФНС).
// Подготавливает данные для электронного документа типа СчетФактураВыданный.
//
// Параметры:
//  СсылкаНаОбъект - документСсылка - ссылка на объект информационной базы, по которому необходимо создать электронный документ;
//  СтруктураЭД - структура - структура данных для формирования электронного документа;
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоСчетФактуре(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
КонецПроцедуры

// Устарела. Следует использовать новую (см. ЗаполнитьДанныеПоКорректировочномуСчетуФактуреФНС).
// Подготавливает данные для электронного документа типа КорректировочныйСчетФактураВыданный.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать ЭД.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  СтруктураПараметров - Структура - дополнительные параметры для подготовки данных.
//
Процедура ПодготовитьДанныеПоКорректировочномуСчетуФактуре(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
КонецПроцедуры

// Устарела. Следует использовать новую (см. ЗаполнитьДанныеПоКаталогуТоваровCML).
// Подготавливает данные для электронного документа типа КаталогТоваров.
//
// Параметры: 
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать ЭД.
//  ТоварыКаталога - Массив - список товаров для заполнения каталога.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  СтруктураПараметров - Структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоКаталогуТоваров(СсылкаНаОбъект, ТоварыКаталога, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
КонецПроцедуры

// Устарела. Следует использовать новую (см. ЗаполнитьДанныеПоПрайсЛисту).
// Подготавливает данные для электронного документа типа ПрайсЛист формата CML 4.02.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать ЭД.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  СтруктураПараметров - Структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоПрайсЛисту(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
КонецПроцедуры

// Устарела. Следует использовать новую (см. ЗаполнитьДанныеПоСчету).
// Подготавливает данные для электронного документа типа Счет формата CML 4.02.
//  
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать ЭД.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  СтруктураПараметров - Структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоСчету(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	МассивДокументов = Новый Массив();
	МассивДокументов.Добавить(СсылкаНаОбъект);
	
	ДанныеДляФормированияЭД = Документы.СчетНаОплатуПокупателю.ПолучитьТаблицуСведенийСчетаНаОплату(МассивДокументов);
	
	РеквизитыШапки   = ДанныеДляФормированияЭД[0];
	ТаблицаДокумента = ДанныеДляФормированияЭД[0].ТаблицаДокумента;
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Ид");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Описание");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиница");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименование");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименованиеПолное");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаМеждународноеСокращение");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("Коэффициент");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	
	ТаблицаТоваров.Колонки.Добавить("СуммаСкидки");
	
	ТаблицаТоваров.Колонки.Добавить("УпаковкаКод");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаНаименование");
	
	ТаблицаТоваров.Колонки.Добавить("ДополнительныеРеквизиты");
	
	Для Каждого Строка Из ТаблицаДокумента Цикл
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		
		НоваяСтрока.Номенклатура 	= Строка.Номенклатура;
		НоваяСтрока.Описание 		= Строка.Содержание;
		НоваяСтрока.Артикул 		= Строка.НоменклатураАртикул;
		НоваяСтрока.БазоваяЕдиница 				= Строка.ЕдиницаИзмерения;
		НоваяСтрока.БазоваяЕдиницаКод 			= СокрЛП(Строка.ЕдиницаИзмеренияКод);
		НоваяСтрока.БазоваяЕдиницаНаименование 	= Строка.ЕдиницаИзмеренияНаименование;
		НоваяСтрока.БазоваяЕдиницаНаименованиеПолное 	= Строка.ЕдиницаИзмеренияНаименованиеПолное;
		НоваяСтрока.Количество 	= Строка.Количество;
		НоваяСтрока.Коэффициент = 1;
		НоваяСтрока.Цена 		= Строка.Цена;
		НоваяСтрока.Сумма 		= Строка.Сумма;
		НоваяСтрока.СтавкаНДС 	= Строка.СтавкаНДС;
		НоваяСтрока.СуммаНДС 	= Строка.СуммаНДС;
		
		НоваяСтрока.СуммаСНДС   = ?(РеквизитыШапки.СуммаВключаетНДС, Строка.Сумма, Строка.Сумма + Строка.СуммаНДС);
		НоваяСтрока.СуммаСкидки = 0;
		
		НоваяСтрока.УпаковкаКод 		 = СокрЛП(Строка.ЕдиницаИзмеренияКод);
		НоваяСтрока.УпаковкаНаименование = Строка.ЕдиницаИзмеренияНаименование;
		
		НоваяСтрока.Наименование = ЭлектронноеВзаимодействиеБП.ПолучитьНаименованиеНоменклатуры(
			Строка.НоменклатураНаименование, Строка.ЕдиницаИзмеренияНаименование);
		НоваяСтрока.Ид = ЭлектронноеВзаимодействиеБП.ПолучитьИДНоменклатуры(
			НоваяСтрока.Номенклатура, Неопределено, Неопределено);
		
	КонецЦикла;
	
	
	ПроверитьЗаполнениеТабличнойЧасти(ТаблицаТоваров);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Исполнитель", 	СтруктураЭД.Отправитель);
	СтруктураПараметров.Вставить("ВерсияСхемы", 	"4.02");
	СтруктураПараметров.Вставить("ТаблицаТоваров", 	ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация", 	СтруктураЭД.Организация);
	СтруктураПараметров.Вставить("Контрагент", 		СтруктураЭД.Контрагент);
	СтруктураПараметров.Вставить("Ид", 				СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("ДатаФормирования", ТекущаяДатаСеанса());
	СтруктураПараметров.Вставить("Номер", 			СокрЛП(СтруктураЭД.НомерДокументаОтправителя));
	СтруктураПараметров.Вставить("Дата", 			СтруктураЭД.ДатаДокументаОтправителя);
	СтруктураПараметров.Вставить("Валюта", 			РеквизитыШапки.Валюта);
	СтруктураПараметров.Вставить("Курс", 			РеквизитыШапки.КурсВзаиморасчетов);
	СтруктураПараметров.Вставить("Сумма", 			ТаблицаТоваров.Итог("СуммаСНДС"));
	СтруктураПараметров.Вставить("ЦенаВключаетНДС", РеквизитыШапки.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("СуммаНДС", 		ТаблицаТоваров.Итог("СуммаНДС"));
	СтруктураПараметров.Вставить("ВидЭД", 			СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД", 	СтруктураЭД.НаправлениеЭД);
	
	СтруктураПараметров.Вставить("НазначениеПлатежа", Строка(РеквизитыШапки.ДоговорКонтрагента));
	СтруктураПараметров.Вставить("СрокПлатежа", '00010101');
	
	// Расчетный счет
	РасчетныйСчет = Новый Структура;
	РасчетныйСчет.Вставить("НомерСчета", РеквизитыШапки.НомерСчета);
	РасчетныйСчет.Вставить("Банк", РеквизитыШапки.БанкНаименование);
	РасчетныйСчет.Вставить("КоррСчет", РеквизитыШапки.КоррСчет);
	РасчетныйСчет.Вставить("БИК", РеквизитыШапки.БИК);
	
	Если ЗначениеЗаполнено(РеквизитыШапки.БанкДляРасчетов) Тогда
		
		РеквизитыБанка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыШапки.БанкДляРасчетов, "Наименование,КоррСчет,Код");
		
		БанкКорреспондент = Новый Структура;
		БанкКорреспондент.Вставить("Банк", РеквизитыБанка.Наименование);
		БанкКорреспондент.Вставить("КоррСчет", РеквизитыБанка.КоррСчет);
		БанкКорреспондент.Вставить("БИК", РеквизитыБанка.Код);
		
		РасчетныйСчет.Вставить("БанкКорреспондент", БанкКорреспондент);
		
	КонецЕсли;
	
	СтруктураПараметров.Вставить("РасчетныйСчет", РасчетныйСчет);
	
	// Ответственные лица
	ФИОРуководителя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыШапки.Руководитель, "Наименование");
	Если Не ЗначениеЗаполнено(РеквизитыШапки.ГлавныйБухгалтер) Тогда
		
		ФИОГлавногоБухгалтера = ФИОРуководителя;
		
	Иначе
		
		ФИОГлавногоБухгалтера = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыШапки.ГлавныйБухгалтер, "Наименование");
		
	КонецЕсли;
	СтруктураПараметров.Вставить("Руководитель", ФИОРуководителя);
	СтруктураПараметров.Вставить("Бухгалтер", ФИОГлавногоБухгалтера);
	
	// Итоговая строка
	СуммаКПрописи = ТаблицаТоваров.Итог("СуммаСНДС");
	
	ШаблонСтроки =	НСтр("ru = 'Всего наименований %1, на сумму %2'");
		
	ИтоговаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки,
		ТаблицаТоваров.Количество(),
		ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаКПрописи, РеквизитыШапки.Валюта));
		
	ИтоговаяСтрока = ИтоговаяСтрока +  Символы.ПС + ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СуммаКПрописи, РеквизитыШапки.Валюта);
	
	СтруктураПараметров.Вставить("ИтогиПрописью", ИтоговаяСтрока);
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Контрагент, Ид, ДатаФормирования, Номер, Дата, ВидЭД, НаправлениеЭД, ТаблицаТоваров");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений", "ИД, Наименование, Количество, БазоваяЕдиницаКод, СуммаНДС, СуммаСНДС");
	
КонецПроцедуры

// Устарела. Следует использовать новую (см. ЗаполнитьДанныеПоЗаказуТоваров).
// Подготавливает данные для электронного документа типа ЗаказТоваров формата CML 4.02.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать ЭД.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  СтруктураПараметров - Структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоЗаказуТоваров(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
КонецПроцедуры

// Устарела. Следует использовать новую (см. ЗаполнитьДанныеПоОтветуНаЗаказ).
// 
// Подготавливает данные для электронного документа типа ОтветНаЗаказ формата CML 4.02.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать ЭД.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  СтруктураПараметров - Структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоОтветуНаЗаказ(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
КонецПроцедуры

// Устарела. Следует использовать новую (см. ЗаполнитьДанныеПоОтчетуОПродажахКомиссионногоТовара).
// Подготавливает данные для электронного документа типа ОтчетКомитенту формата CML 4.02.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать ЭД.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  СтруктураПараметров - Структура - параметры для заполнения.
//
// Особенность:
//  Параметр ДополнительныеРеквизитыДляТаблицыТоваров в общей структуре параметров предназначен для заполнения
//  колонки ДополнительныеРеквизиты в таблице товаров.
//
Процедура ПодготовитьДанныеПоОтчетуОПродажахКомиссионногоТовара(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
КонецПроцедуры

// Устарела. Следует использовать новую (см. ЗаполнитьДанныеПоОтчетуОСписанииКомиссионногоТовара).
// Подготавливает данные для электронного документа типа ОтчетКомитентуОСписании формата CML 4.02.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать ЭД.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  СтруктураПараметров - Структура - параметры для заполнения.
//
Процедура ПодготовитьДанныеПоОтчетуОСписанииКомиссионногоТовара(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
КонецПроцедуры

// Устарела. Будет удалена при переходе на новую редакцию БЭД.
// Подготавливает данные для электронного документа типа Накладная.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать ЭД.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  СтруктураПараметров - Структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоНакладной(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслугТовары.Номенклатура.Артикул КАК Артикул,
		|	РеализацияТоваровУслугТовары.Номенклатура.Наименование КАК Наименование,
		|	РеализацияТоваровУслугТовары.Номенклатура,
		|	РеализацияТоваровУслугТовары.Номенклатура.Код КАК КодТовара,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(110)) КАК Ид,
		|	РеализацияТоваровУслугТовары.Количество КАК Количество,
		|	РеализацияТоваровУслугТовары.Сумма КАК Сумма,
		|	РеализацияТоваровУслугТовары.Цена КАК Цена,
		|	NULL КАК Характеристика,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугТовары.Номенклатура.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
		|			ТОГДА &КодЕдиницыИзмеренияПоУмолчанию
		|		ИНАЧЕ РеализацияТоваровУслугТовары.Номенклатура.ЕдиницаИзмерения.Код
		|	КОНЕЦ КАК БазоваяЕдиницаКод,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугТовары.Номенклатура.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
		|			ТОГДА &НаименованиеЕдиницыИзмеренияПоУмолчанию
		|		ИНАЧЕ РеализацияТоваровУслугТовары.Номенклатура.ЕдиницаИзмерения.Наименование
		|	КОНЕЦ КАК БазоваяЕдиницаНаименование,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугТовары.Номенклатура.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
		|			ТОГДА &НаименованиеЕдиницыИзмеренияПоУмолчанию
		|		ИНАЧЕ РеализацияТоваровУслугТовары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное
		|	КОНЕЦ КАК БазоваяЕдиницаНаименованиеПолное,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугТовары.Номенклатура.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
		|			ТОГДА &НаименованиеЕдиницыИзмеренияПоУмолчанию
		|		ИНАЧЕ РеализацияТоваровУслугТовары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное
		|	КОНЕЦ КАК БазоваяЕдиницаМеждународноеСокращение,
		|	РеализацияТоваровУслугТовары.ЕдиницаИзмерения.Наименование КАК УпаковкаНаименование,
		|	РеализацияТоваровУслугТовары.ЕдиницаИзмерения.Код КАК УпаковкаКод,
		|	РеализацияТоваровУслугТовары.ЕдиницаИзмерения КАК Упаковка,
		|	РеализацияТоваровУслугТовары.СтавкаНДС КАК СтавкаНДС,
		|	РеализацияТоваровУслугТовары.СуммаНДС КАК СуммаНДС,
		|	1 КАК Коэффициент,
		|	0 КАК СуммаСкидки,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслуг.СуммаВключаетНДС
		|			ТОГДА РеализацияТоваровУслугТовары.Сумма
		|		ИНАЧЕ РеализацияТоваровУслугТовары.Сумма + РеализацияТоваровУслугТовары.СуммаНДС
		|	КОНЕЦ КАК СуммаСНДС
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ПО РеализацияТоваровУслугТовары.Ссылка = РеализацияТоваровУслуг.Ссылка
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РеализацияТоваровУслугУслуги.Номенклатура.Артикул,
		|	РеализацияТоваровУслугУслуги.Номенклатура.Наименование,
		|	РеализацияТоваровУслугУслуги.Номенклатура,
		|	РеализацияТоваровУслугУслуги.Номенклатура.Код,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(110)),
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугУслуги.Количество = 0
		|			ТОГДА 1
		|		ИНАЧЕ РеализацияТоваровУслугУслуги.Количество
		|	КОНЕЦ,
		|	РеализацияТоваровУслугУслуги.Сумма,
		|	РеализацияТоваровУслугУслуги.Цена,
		|	NULL,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугУслуги.Номенклатура.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
		|			ТОГДА &КодЕдиницыИзмеренияПоУмолчанию
		|		ИНАЧЕ РеализацияТоваровУслугУслуги.Номенклатура.ЕдиницаИзмерения.Код
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугУслуги.Номенклатура.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
		|			ТОГДА &НаименованиеЕдиницыИзмеренияПоУмолчанию
		|		ИНАЧЕ РеализацияТоваровУслугУслуги.Номенклатура.ЕдиницаИзмерения.Наименование
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугУслуги.Номенклатура.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
		|			ТОГДА &НаименованиеЕдиницыИзмеренияПоУмолчанию
		|		ИНАЧЕ РеализацияТоваровУслугУслуги.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугУслуги.Номенклатура.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
		|			ТОГДА &НаименованиеЕдиницыИзмеренияПоУмолчанию
		|		ИНАЧЕ РеализацияТоваровУслугУслуги.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугУслуги.Номенклатура.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
		|			ТОГДА &НаименованиеЕдиницыИзмеренияПоУмолчанию
		|		ИНАЧЕ РеализацияТоваровУслугУслуги.Номенклатура.ЕдиницаИзмерения.Наименование
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугУслуги.Номенклатура.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
		|			ТОГДА &КодЕдиницыИзмеренияПоУмолчанию
		|		ИНАЧЕ РеализацияТоваровУслугУслуги.Номенклатура.ЕдиницаИзмерения.Код
		|	КОНЕЦ,
		|	РеализацияТоваровУслугУслуги.Номенклатура.ЕдиницаИзмерения,
		|	РеализацияТоваровУслугУслуги.СтавкаНДС,
		|	РеализацияТоваровУслугУслуги.СуммаНДС,
		|	1,
		|	0,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслуг.СуммаВключаетНДС
		|			ТОГДА РеализацияТоваровУслугУслуги.Сумма
		|		ИНАЧЕ РеализацияТоваровУслугУслуги.Сумма + РеализацияТоваровУслугУслуги.СуммаНДС
		|	КОНЕЦ
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ПО РеализацияТоваровУслугУслуги.Ссылка = РеализацияТоваровУслуг.Ссылка
		|ГДЕ
		|	РеализацияТоваровУслугУслуги.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РеализацияТоваровУслугАгентскиеУслуги.Номенклатура.Артикул,
		|	РеализацияТоваровУслугАгентскиеУслуги.Номенклатура.Наименование,
		|	РеализацияТоваровУслугАгентскиеУслуги.Номенклатура,
		|	РеализацияТоваровУслугАгентскиеУслуги.Номенклатура.Код,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(110)),
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугАгентскиеУслуги.Количество = 0
		|			ТОГДА 1
		|		ИНАЧЕ РеализацияТоваровУслугАгентскиеУслуги.Количество
		|	КОНЕЦ,
		|	РеализацияТоваровУслугАгентскиеУслуги.Сумма,
		|	РеализацияТоваровУслугАгентскиеУслуги.Цена,
		|	NULL,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугАгентскиеУслуги.Номенклатура.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
		|			ТОГДА &КодЕдиницыИзмеренияПоУмолчанию
		|		ИНАЧЕ РеализацияТоваровУслугАгентскиеУслуги.Номенклатура.ЕдиницаИзмерения.Код
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугАгентскиеУслуги.Номенклатура.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
		|			ТОГДА &НаименованиеЕдиницыИзмеренияПоУмолчанию
		|		ИНАЧЕ РеализацияТоваровУслугАгентскиеУслуги.Номенклатура.ЕдиницаИзмерения.Наименование
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугАгентскиеУслуги.Номенклатура.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
		|			ТОГДА &НаименованиеЕдиницыИзмеренияПоУмолчанию
		|		ИНАЧЕ РеализацияТоваровУслугАгентскиеУслуги.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугАгентскиеУслуги.Номенклатура.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
		|			ТОГДА &НаименованиеЕдиницыИзмеренияПоУмолчанию
		|		ИНАЧЕ РеализацияТоваровУслугАгентскиеУслуги.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугАгентскиеУслуги.Номенклатура.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
		|			ТОГДА &НаименованиеЕдиницыИзмеренияПоУмолчанию
		|		ИНАЧЕ РеализацияТоваровУслугАгентскиеУслуги.Номенклатура.ЕдиницаИзмерения.Наименование
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугАгентскиеУслуги.Номенклатура.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
		|			ТОГДА &КодЕдиницыИзмеренияПоУмолчанию
		|		ИНАЧЕ РеализацияТоваровУслугАгентскиеУслуги.Номенклатура.ЕдиницаИзмерения.Код
		|	КОНЕЦ,
		|	РеализацияТоваровУслугАгентскиеУслуги.Номенклатура.ЕдиницаИзмерения,
		|	РеализацияТоваровУслугАгентскиеУслуги.СтавкаНДС,
		|	РеализацияТоваровУслугАгентскиеУслуги.СуммаНДС,
		|	1,
		|	0,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслуг.СуммаВключаетНДС
		|			ТОГДА РеализацияТоваровУслугАгентскиеУслуги.Сумма
		|		ИНАЧЕ РеализацияТоваровУслугАгентскиеУслуги.Сумма + РеализацияТоваровУслугАгентскиеУслуги.СуммаНДС
		|	КОНЕЦ
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.АгентскиеУслуги КАК РеализацияТоваровУслугАгентскиеУслуги
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ПО РеализацияТоваровУслугАгентскиеУслуги.Ссылка = РеализацияТоваровУслуг.Ссылка
		|ГДЕ
		|	РеализацияТоваровУслугАгентскиеУслуги.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РеализацияТоваровУслуг.ВалютаДокумента,
		|	РеализацияТоваровУслуг.КурсВзаиморасчетов,
		|	РеализацияТоваровУслуг.Грузополучатель,
		|	РеализацияТоваровУслуг.Грузоотправитель,
		|	РеализацияТоваровУслуг.СуммаВключаетНДС
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка = &Ссылка";
		
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	Запрос.УстановитьПараметр("КодЕдиницыИзмеренияПоУмолчанию", "643");
	Запрос.УстановитьПараметр("НаименованиеЕдиницыИзмеренияПоУмолчанию", "шт");
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаТоваров   = РезультатЗапроса[0].Выгрузить();
	РеквизитыШапки   = РезультатЗапроса[1].Выбрать();
	РеквизитыШапки.Следующий();
	ТаблицаТоваров.Колонки.Добавить("ДополнительныеРеквизиты");
	
	Для Каждого Строка из ТаблицаТоваров Цикл
		
		Строка.БазоваяЕдиницаКод = СокрЛП(Строка.БазоваяЕдиницаКод);
		Строка.УпаковкаКод = СокрЛП(Строка.УпаковкаКод);
		Строка.ИД = ЭлектронноеВзаимодействиеБП.ПолучитьИДНоменклатуры(
			Строка.Номенклатура, Строка.Характеристика, Строка.Упаковка);
		Строка.Наименование = ЭлектронноеВзаимодействиеБП.ПолучитьНаименованиеНоменклатуры(
			Строка.Наименование, Строка.БазоваяЕдиницаНаименование);
		
		// пример передачи дополнительной информации по товару
		ДополнительныеРеквизиты = Новый Структура;
		МассивДопЗначений = Новый Массив();
		МассивДопЗначений.Добавить(Строка.КодТовара);
		ДополнительныеРеквизиты.Вставить("КодТовара", МассивДопЗначений);
		Строка.ДополнительныеРеквизиты = ДополнительныеРеквизиты;
		
	КонецЦикла;
	
	ПроверитьЗаполнениеТабличнойЧасти(ТаблицаТоваров);
	
	СтруктураПараметров.Вставить("Исполнитель", СтруктураЭД.Отправитель);
	СтруктураПараметров.Вставить("ВерсияСхемы", "4.02");
	СтруктураПараметров.Вставить("ТаблицаТоваров", ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация", СтруктураЭД.Организация);
	СтруктураПараметров.Вставить("Контрагент", СтруктураЭД.Контрагент);
	СтруктураПараметров.Вставить("Ид", СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("ДатаФормирования", ТекущаяДатаСеанса());
	СтруктураПараметров.Вставить("Номер", СтруктураЭД.НомерДокументаОтправителя);
	СтруктураПараметров.Вставить("Дата", СтруктураЭД.ДатаДокументаОтправителя);
	СтруктураПараметров.Вставить("Сумма", ТаблицаТоваров.Итог("СуммаСНДС"));
	СтруктураПараметров.Вставить("ВидЭД", СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД", СтруктураЭД.НаправлениеЭД);
	Если ЗначениеЗаполнено(РеквизитыШапки.Грузоотправитель) Тогда
		СтруктураПараметров.Вставить("Грузоотправитель", РеквизитыШапки.Грузоотправитель);
		СтруктураПараметров.Вставить("ТипГрузоотправителя", "Контрагент");
	Иначе	
		СтруктураПараметров.Вставить("Грузоотправитель", СтруктураЭД.Организация);
		СтруктураПараметров.Вставить("ТипГрузоотправителя", "Организация");
	КонецЕсли;
	Если ЗначениеЗаполнено(РеквизитыШапки.Грузополучатель) Тогда
		СтруктураПараметров.Вставить("Грузополучатель", РеквизитыШапки.Грузополучатель);
	Иначе
		СтруктураПараметров.Вставить("Грузополучатель",	СтруктураЭД.Контрагент);
	КонецЕсли;
	СтруктураПараметров.Вставить("Валюта", РеквизитыШапки.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс", РеквизитыШапки.КурсВзаиморасчетов);
	СтруктураПараметров.Вставить("ЦенаВключаетНДС", РеквизитыШапки.СуммаВключаетНДС);
	
КонецПроцедуры

// Устарела. Будет удалена при переходе на новую редакцию БЭД.
// Подготавливает данные для электронного документа типа АктВыполненияРабот.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка- ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  СтруктураПараметров - Структура - параметры заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоАктуВыполненныхРабот(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	
КонецПроцедуры

// Устарела. Следует использовать новую (см. ЗаполнитьСоответствиеСтавокНДС).
// Необходимо заполнить соответствие ставок и сумм НДС.
//
// Параметры:
//  СоответствиеСтавокНДС - Соответствие - соответствие ставок и сумм НДС.
//
Процедура ПолучитьСоответствиеСтавокНДС(СоответствиеСтавокНДС) Экспорт
	
	СоответствиеСтавокНДС.Вставить(Перечисления.СтавкиНДС.НДС10,     0);
	СоответствиеСтавокНДС.Вставить(Перечисления.СтавкиНДС.НДС10_110, 0);
	СоответствиеСтавокНДС.Вставить(Перечисления.СтавкиНДС.НДС18,     0);
	СоответствиеСтавокНДС.Вставить(Перечисления.СтавкиНДС.НДС18_118, 0);
	СоответствиеСтавокНДС.Вставить(Перечисления.СтавкиНДС.НДС0,      0);
	
КонецПроцедуры

// Устарела. Будет удалена при переходе на новую редакцию БЭД.
// Выполняет заполнение структуры параметров подписанта для ЭД вида извещение о получении.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  СтруктураПараметровПодписанта - Структура - параметры заполнения подписанта электронного документа.
//
Процедура ЗаполнитьСтруктуруДанныхПодписанта(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметровПодписанта) Экспорт
	
	
КонецПроцедуры

// Устарела. Будет удалена при переходе на новую редакцию БЭД.
// Получает должность подписанта по ФИО.
//
// Параметры:
//  ФИО - строка - фамилия, имя и отчество подписанта,
//  Организация - ссылка - ссылка на элемент справочника организации,
//  Должность - Строка - наименование должности подписанта.
//
Процедура ДолжностьПодписанта(ФИО, Организация, Должность) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("ФИО", ФИО);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ФизическиеЛица.Ссылка
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.Наименование = &ФИО";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДанныеФизЛица = УчетЗарплаты.ДанныеФизическихЛиц(Организация, Выборка.Ссылка, ТекущаяДатаСеанса());
		Если ЗначениеЗаполнено(ДанныеФизЛица.Должность) Тогда
			Должность = Строка(ДанныеФизЛица.Должность);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Устарела. Будет удалена при переходе на новую редакцию БЭД.
// Заполняет таблицу реквизитов контрагента для приглашения к обмену.
//
// Параметры:
//  ТаблицаРеквизитов - ТаблицаЗначений - содержит колонки: Участник, Наименование, ИНН, КПП, АдресЭП, ВнешнийКод,
//                                        НаименованиеДляСообщенияПользователю, Наименование - передается Оператору ЭДО,
//                                        НаименованиеДляСообщенияПользователю.
//  МассивКонтрагентов - Массив - ссылки на участников-контрагентов.
//  СоглашениеЭД - СправочникСсылка.СоглашенияОбИспользованииЭД - настройка обмена с контрагентом.
//
Процедура ЗаполнитьРеквизитыКонтрагентовДляПриглашенияКОбмену(ТаблицаРеквизитов, МассивКонтрагентов, СоглашениеЭД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Контрагенты.Ссылка КАК Участник,
		|	Контрагенты.Наименование КАК Наименование,
		|	Контрагенты.ИНН КАК ИНН,
		|	Контрагенты.КПП КАК КПП,
		|	Контрагенты.Код КАК ВнешнийКод,
		|	УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.АдресЭП КАК АдресЭП,
		|	Контрагенты.Наименование КАК НаименованиеДляСообщенияПользователю
		|ИЗ
		|	РегистрСведений.УдалитьУчастникиОбменовЭДЧерезОператоровЭДО КАК УдалитьУчастникиОбменовЭДЧерезОператоровЭДО
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.Участник = Контрагенты.Ссылка
		|ГДЕ
		|	УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.Участник В(&СписокУчастников)
		|	И УдалитьУчастникиОбменовЭДЧерезОператоровЭДО.СоглашениеОбИспользованииЭД = &СоглашениеЭД";
	Запрос.УстановитьПараметр("СписокУчастников", МассивКонтрагентов);
	Запрос.УстановитьПараметр("СоглашениеЭД", СоглашениеЭД);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	ТаблицаРеквизитов = ТЗ.Скопировать();
	
КонецПроцедуры

// Устарела. Будет удалена при переходе на новую редакцию БЭД.
// Получает текст запроса по настройкам обмена.
//
// Возвращаемое значение:
//  ТекстЗапроса - текст запроса.
//
Функция ПолучитьТекстНастроекОбменаПоСоглашению() Экспорт
	
	ТекстЗапроса = "";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Устарела. Будет удалена при переходе на новую редакцию БЭД.
// Получает текст запроса по настройкам обмена с приоритетами.
//
// Возвращаемое значение:
//  ТекстЗапроса - текст запроса.
//
Функция ПолучитьТекстЗапросаНастроекОбменаСПриоритетами() Экспорт
	
	ТекстЗапроса = "";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Устарела. Будет удалена при переходе на новую редакцию БЭД.
// Возвращает числовое значение ставки НДС по значению перечисления.
//
// Параметры:
//  СтавкаНДС - ПеречислениеСсылка.СтавкиНДС - значение перечисления СтавкиНДС.
//
// Возвращаемое значение:
//  Число - Значение ставки НДС числом.
//  Если СтавкаНДС = 0%, то число = О;
//  Если СтавкаНДС = БезНДС, то число = Неопределено.
//
Функция ПолучитьСтавкуНДСЧислом(Знач СтавкаНДС) Экспорт
	
	Если СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
		Возврат Неопределено;
	Иначе
		Возврат УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС)/100;
	КонецЕсли;
	
КонецФункции

// Устарела. Будет удалена при переходе на новую редакцию БЭД.
// Функция преобразует из числового представления ставки НДС в значение перечисления.
//
// Параметры:
//  СтавкаЧислом - Число - Ставка НДС числом.
//
// Возвращаемое значение:
//  СтавкаНДС - Значение перечисление;
//  Если СтавкаЧислом = О, то СтавкаНДС = 0%;
//  Если СтавкаЧислом = Неопределено, то СтавкаНДС = БезНДС.
//
Функция ЗначениеПеречисленияСтавкаНДС(СтавкаЧислом) Экспорт
	
	Возврат ЭлектронноеВзаимодействиеБП.ПолучитьСтавкуНДСПеречислением(СтавкаЧислом);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с деревом

Процедура ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОбУчастнике, ВидУчастника, ВидАдреса = "Структурированный", КорневойЭлементДерева = "", ДатаСведений = '00010101')
	
	Если СведенияОбУчастнике.ТипЮрФизЛица = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ЮЛ.ИНН",
									СведенияОбУчастнике.ИНН, КорневойЭлементДерева);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ЮЛ.КПП",
									СведенияОбУчастнике.КПП, КорневойЭлементДерева);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации",
									СведенияОбУчастнике.ПолноеНаименование, КорневойЭлементДерева);
	Иначе
		ПолныйПуть = ВидУчастника + ".ТипУчастника.ФЛ.ПолноеНаименование";
		Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть, СведенияОбУчастнике.ПолноеНаименование, КорневойЭлементДерева);
		КонецЕсли;
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ФЛ.ИНН",
									СведенияОбУчастнике.ИНН, КорневойЭлементДерева);
		
		ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(СведенияОбУчастнике.ПолноеНаименование);
		
		ЕстьРеквизитПолноеНаименование = ДеревоДанных.Строки.Найти(ВидУчастника + ".ТипУчастника.ФЛ.ПолноеНаименование",
			"ПолныйПуть", Истина);
		Если ЕстьРеквизитПолноеНаименование <> Неопределено Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ВидУчастника + ".ТипУчастника.ФЛ.ПолноеНаименование",
				СведенияОбУчастнике.НаименованиеДляПечатныхФорм, КорневойЭлементДерева);
		КонецЕсли;
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ФЛ.Фамилия",
									ФИО.Фамилия, КорневойЭлементДерева);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ФЛ.Имя",
									ФИО.Имя, КорневойЭлементДерева);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ФЛ.Отчество",
									ФИО.Отчество, КорневойЭлементДерева);
	КонецЕсли;
	
	АдресУчастника = Новый Структура;
	ОбменСКонтрагентамиПереопределяемый.ПолучитьАдресСтруктурой(АдресУчастника, СведенияОбУчастнике.ЮрФизЛицоСсылка, "Ссылка", ВидАдреса, "", ДатаСведений);
	
	Если ЗначениеЗаполнено(АдресУчастника) Тогда
		ПолныйПуть = ВидУчастника + ".Адрес.Структурированный";
		Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть) Тогда
			ТипАдреса = ?(АдресУчастника.АдресРФ, "Структурированный", "Иностранный");
		Иначе
			ТипАдреса = "Произвольный";
		КонецЕсли;
		
		ЗаполнитьАдресВДереве(ДеревоДанных, АдресУчастника, ТипАдреса, ВидУчастника, КорневойЭлементДерева);
		
	КонецЕсли;
	
	ПолныйПуть = ВидУчастника + ".Контакт.Телефон";
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								ВидУчастника + ".Контакт.Телефон",
								СведенияОбУчастнике.Телефоны, КорневойЭлементДерева);
	КонецЕсли;
	
	ПолныйПуть = ВидУчастника + ".БанковскийСчет";
	НомерСчета = "";
	Если СведенияОбУчастнике.Свойство("НомерСчета", НомерСчета) И ЗначениеЗаполнено(НомерСчета)
		И ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть) Тогда
		Банк = "";
		БИК = "";
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ВидУчастника + ".БанковскийСчет.НомерСчета",
				НомерСчета, КорневойЭлементДерева);
		Если СведенияОбУчастнике.Свойство("Банк", Банк) И ЗначениеЗаполнено(Банк) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".БанковскийСчет.НаимБанк",
										Банк, КорневойЭлементДерева);
		КонецЕсли;
		Если СведенияОбУчастнике.Свойство("БИК", БИК) И ЗначениеЗаполнено(БИК) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".БанковскийСчет.БИК",
										БИК, КорневойЭлементДерева);
		КонецЕсли;
	КонецЕсли;
	
	ПолныйПуть = ВидУчастника + ".Руководитель";
	Значение = "";
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть)
		И СведенияОбУчастнике.Свойство("Руководитель", Значение) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Фамилия", Значение.Фамилия, КорневойЭлементДерева);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Имя", Значение.Имя, КорневойЭлементДерева);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Отчество", Значение.Отчество, КорневойЭлементДерева);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Должность", Значение.Должность, КорневойЭлементДерева);
	КонецЕсли;
	
	ПолныйПуть = ВидУчастника + ".Комментарий";
	Значение = "";
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть)
		И СведенияОбУчастнике.Свойство("Комментарий", Значение) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть, Значение, КорневойЭлементДерева);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет соответствующий тип адреса переданными данными.
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - Строка дерева, содержащая данные участника
//  АдресУчастника - Структура - содержит данные адреса участника обмена. Имена полей структуры должны совпадать с
//    именами полей структуры выбранного типа адреса:
//    Структурированный - "Индекс, КодРегион, Район, Город, НаселПункт, Улица, Дом, Корпус, Кварт";
//    Произвольный/Иностранный - "КодСтраны, АдресСтрокой" (вынесены в разные элементы списка для того,
//      чтобы правильно заполнить ЭД).
//  ТипАдреса - Строка - один из 3-х вариантов: Структурированный, Произвольный, Иностранный.
//  ВидУчастника - Строка - вид участника как он представлен в дереве данных.
//  КорневойЭлементДерева - Строка - необходимо использовать в случае, если в таблице надо заполнить
//    сложный тип данных (группа, выбор). Например: "Товары.НомерСтроки.Покупатель", Покупатель -
//    является сложным типом данных, тогда КорневойЭлементДерева = "Товары.НомерСтроки".
//
Процедура ЗаполнитьАдресВДереве(ДеревоДанных, АдресУчастника, ТипАдреса, ВидУчастника, КорневойЭлементДерева = "")
	
	Если ТипАдреса = "Произвольный" Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".Адрес.Произвольный",
									АдресУчастника.АдрТекст, КорневойЭлементДерева);
	Иначе
		Если АдресУчастника.АдресРФ Тогда
			АдресУчастника.Удалить("АдресРФ");
			АдресУчастника.Удалить("КодСтр");
			АдресУчастника.Удалить("КодРегиона");
			АдресУчастника.Удалить("КодСтраны");
			АдресУчастника.Удалить("НаселенныйПункт");
			АдресУчастника.Удалить("АдрТекст");
			АдресУчастника.Удалить("АдресТекст");
			АдресУчастника.Удалить("Квартира");
			АдресУчастника.Удалить("КодГАР");
		Иначе
			АдресУчастника.Удалить("АдресРФ");
			АдресУчастника.Удалить("ПочтовыйИндекс");
			АдресУчастника.Удалить("Индекс");
			АдресУчастника.Удалить("Регион");
			АдресУчастника.Удалить("КодРегион");
			АдресУчастника.Удалить("КодРегиона");
			АдресУчастника.Удалить("Район");
			АдресУчастника.Удалить("Город");
			АдресУчастника.Удалить("НаселенныйПункт");
			АдресУчастника.Удалить("НаселПункт");
			АдресУчастника.Удалить("Улица");
			АдресУчастника.Удалить("Дом");
			АдресУчастника.Удалить("Корпус");
			АдресУчастника.Удалить("Квартира");
			АдресУчастника.Удалить("Кварт");
			АдресУчастника.Удалить("КодСтраны");
			АдресУчастника.Удалить("АдресТекст");
			АдресУчастника.Удалить("КодГАР");
		КонецЕсли;
		Для Каждого Элемент Из АдресУчастника Цикл
			
			ИмяПоля = ВидУчастника + ".Адрес." + ТипАдреса + "." + Элемент.Ключ;
			
			Если Не ДеревоДанных.Строки.Найти(ИмяПоля, "ПолныйПуть", Истина) = Неопределено Тогда
				
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								ИмяПоля,
								Элемент.Значение, КорневойЭлементДерева);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Поиск и создание документов

////////////////////////////////////////////////////////////////////////////////
// Заполнение объектов


Функция СоздатьПерезаполнитьНоменклатуруПоставщика(СтрокаОбъекта, ДеревоРазбора)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(СтрокаОбъекта.СсылкаНаОбъект) Тогда
		НовЭл = СтрокаОбъекта.СсылкаНаОбъект.ПолучитьОбъект();
		СсылкаНаОбъектНоменклатура = СтрокаОбъекта.СсылкаНаОбъект.Номенклатура;
	Иначе
		НовЭл = Справочники.НоменклатураПоставщиков.СоздатьЭлемент();
		СсылкаНаОбъектНоменклатура = Неопределено;
	КонецЕсли;
	//
	ЗаполнитьРеквизитыОбъектаПоСоответствиюИмен(СтрокаОбъекта, НовЭл);
	// если нет ссылки на номенклатуру, то будем создавать ее
	Если НЕ ЗначениеЗаполнено(СсылкаНаОбъектНоменклатура) Тогда 
		НайденнаяСтрока = СтрокаОбъекта.Строки.Найти("Номенклатура", "Реквизит", Истина);
		Если НайденнаяСтрока <> Неопределено Тогда
			Если ЗначениеЗаполнено(НайденнаяСтрока.СсылкаНаОбъект) Тогда // Найдена ссылка
				СсылкаНаОбъектНоменклатура = НайденнаяСтрока.СсылкаНаОбъект;
			Иначе // будем искать по индексу
				ИндексИскомойСтроки = НайденнаяСтрока.ЗначениеРеквизита;	
				НайденнаяСтрока = ДеревоРазбора.Строки.Найти(ИндексИскомойСтроки, "ИндексСтроки", Истина); // строка с объектом
				Если НайденнаяСтрока <> Неопределено Тогда
					Если ЗначениеЗаполнено(НайденнаяСтрока.СсылкаНаОбъект) Тогда // есть ссылка на объект БД
						СсылкаНаОбъектНоменклатура = НайденнаяСтрока.СсылкаНаОбъект;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		НовЭл.Номенклатура = СсылкаНаОбъектНоменклатура;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(НовЭл.Код) Тогда
		НовЭл.УстановитьНовыйКод();
	КонецЕсли;
	//
	НовЭл.ОбменДанными.Загрузка = Истина;
	Попытка
		НовЭл.Записать();
	Исключение
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Создание элемента справочника %1.'"),
			"Номенклатура поставщиков") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(Текст, 2, УровеньЖурналаРегистрации.Ошибка);
		ВызватьИсключение;
	КонецПопытки;
	
	СсылкаНаОбъект = НовЭл.Ссылка;
	
	Возврат СсылкаНаОбъект;
КонецФункции

// Заполняет реквизиты объекта по соответствию наименований
//
// Параметры:
//  СтрокаМассива - СтрокаДереваЗначений, набор параметров, по которому будет происходить заполнение
//  ОбъектМетаданных - Объект ИБ, реквизиты которого необходимо заполнить.
//
Процедура ЗаполнитьРеквизитыОбъектаПоСоответствиюИмен(СтрокаМассива, ОбъектМетаданных)
	
	Для Каждого ТекСтрока Из СтрокаМассива.Строки Цикл
		Если НЕ ЗначениеЗаполнено(ТекСтрока.ЗначениеРеквизита) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЭтоСтандартныйРеквизит(ОбъектМетаданных.Метаданные().СтандартныеРеквизиты, ТекСтрока.Реквизит) Тогда
			ОбъектМетаданных[ТекСтрока.Реквизит] = ТекСтрока.ЗначениеРеквизита;
		ИначеЕсли ОбъектМетаданных.Метаданные().Реквизиты.Найти(ТекСтрока.Реквизит) <> Неопределено Тогда
			Если ЗначениеЗаполнено(ТекСтрока.СсылкаНаОбъект) Тогда
				ОбъектМетаданных[ТекСтрока.Реквизит] = ТекСтрока.СсылкаНаОбъект;
			Иначе
				ОбъектМетаданных[ТекСтрока.Реквизит] = ТекСтрока.ЗначениеРеквизита;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
// Прочие процедуры и функции

Процедура ВставитьЗначениеВДерево(ДеревоДанных, ИмяРеквизита, ЗначениеРеквизита)
	
	НовСтрока = ДеревоДанных.Строки.Найти(ИмяРеквизита, "ПолныйПуть", Истина);
	Если НовСтрока = Неопределено Тогда
		НовСтрока = ДеревоДанных.Строки.Добавить();
		НомерУровня = СтрЧислоВхождений(ИмяРеквизита, ".") + 1;
		НовСтрока.ПолныйПуть = ИмяРеквизита;
		НовСтрока["Уровень" + НомерУровня] = ЭлектронноеВзаимодействие.НазваниеКолонки(ИмяРеквизита);
	КонецЕсли;
	НовСтрока.Значение = ЗначениеРеквизита;

КонецПроцедуры

Процедура ЗаполнитьДанныеГрузоОтправителяПолучателя(ДеревоДанных, СведенияОбУчастнике, ВидУчастника, ВидАдреса = "Факт")
	
	Если СведенияОбУчастнике.ТипЮрФизЛица = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".Наименование.НаименованиеОрганизации",
			СведенияОбУчастнике.ПолноеНаименование);
	Иначе
		
		ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(СведенияОбУчастнике.ПолноеНаименование);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".Наименование.ФИОИП.Фамилия",
			ФИО.Фамилия);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".Наименование.ФИОИП.Имя",
			ФИО.Имя);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".Наименование.ФИОИП.Отчество",
			ФИО.Отчество);
	КонецЕсли;
	
	АдресУчастника = Новый Структура;
	ОбменСКонтрагентамиПереопределяемый.ПолучитьАдресСтруктурой(АдресУчастника, СведенияОбУчастнике.ЮрФизЛицоСсылка, "Ссылка", ВидАдреса, "");
	
	Если ЗначениеЗаполнено(АдресУчастника) Тогда
		ТипАдреса = ?(АдресУчастника.АдресРФ, "Структурированный", "Иностранный");
		ЗаполнитьАдресВДереве(ДеревоДанных, АдресУчастника, ТипАдреса, ВидУчастника);
	КонецЕсли;
	
КонецПроцедуры

Функция РассчитатьИтоговыеСуммыДокумента(ТаблицаДокумента)
	
	ИтоговыеСуммы = ЭлектронноеВзаимодействиеБП.ИтоговыеСуммыДокумента();
	
	Для Каждого Строка ИЗ ТаблицаДокумента Цикл
		
		ИтоговыеСуммы.ИтогоМест        = ИтоговыеСуммы.ИтогоМест        + ?(ЗначениеЗаполнено(Строка.КоличествоМест),Строка.КоличествоМест, 0);
		ИтоговыеСуммы.ИтогоСуммаБезНДС = ИтоговыеСуммы.ИтогоСуммаБезНДС + Строка.СуммаБезНДС;
		ИтоговыеСуммы.ИтогоНДС         = ИтоговыеСуммы.ИтогоНДС         + Строка.СуммаНДС;
		ИтоговыеСуммы.ИтогоСуммаСНДС   = ИтоговыеСуммы.ИтогоСуммаСНДС   + Строка.СуммаБезНДС + Строка.СуммаНДС;
		
	КонецЦикла;
	
	ИтоговыеСуммы.КоличествоПорядковыхНомеровЗаписей = ТаблицаДокумента.Количество();
	
	Возврат ИтоговыеСуммы;
	
КонецФункции

Функция РассчитатьИтоговыеСуммыКорректировочногоДокумента(ТаблицаДокумента)
	
	ИтоговыеСуммы = ЭлектронноеВзаимодействиеБП.ИтоговыеСуммыДокумента();
	
	Для Каждого Строка ИЗ ТаблицаДокумента Цикл
		
		ИтоговыеСуммы.ИтогоСуммаБезНДС = ИтоговыеСуммы.ИтогоСуммаБезНДС + Строка.СуммаБезНДС;
		ИтоговыеСуммы.ИтогоНДС         = ИтоговыеСуммы.ИтогоНДС         + Строка.СуммаНДС;
		ИтоговыеСуммы.ИтогоСуммаСНДС   = ИтоговыеСуммы.ИтогоСуммаСНДС   + Строка.СуммаБезНДС + Строка.СуммаНДС;
		
		ИтоговыеСуммы.ИтогоСуммаДоКорректировки     = ИтоговыеСуммы.ИтогоСуммаДоКорректировки     + Строка.СуммаБезНДСДоКорректировки;
		ИтоговыеСуммы.ИтогоНДСДоКорректировки       = ИтоговыеСуммы.ИтогоНДСДоКорректировки       + Строка.СуммаНДСДоКорректировки;
		ИтоговыеСуммы.ИтогоСуммаСНДСДоКорректировки = ИтоговыеСуммы.ИтогоСуммаСНДСДоКорректировки + Строка.СуммаСНДСДоКорректировки;
		
	КонецЦикла;
	
	ИтоговыеСуммы.КоличествоПорядковыхНомеровЗаписей = ТаблицаДокумента.Количество();
	
	Возврат ИтоговыеСуммы;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции

Процедура ПроверитьЗаполнениеТабличнойЧасти(ТабличнаяЧасть)
	
	КолонкиЕдиницИзмеренияСтрокой = ВРег(",БазоваяЕдиницаКод,ЕдиницаИзмеренияКодДо,ЕдиницаИзмеренияКод,УпаковкаКод,");
	
	КолонкиЕдиницИзмерения = Новый Структура;
	Для Каждого Колонка Из ТабличнаяЧасть.Колонки Цикл
		Если Найти(КолонкиЕдиницИзмеренияСтрокой, "," + ВРег(Колонка.Имя) + ",") > 0 Тогда
			КолонкиЕдиницИзмерения.Вставить(Колонка.Имя);	
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из ТабличнаяЧасть Цикл
		
		// Проверим длину кода единицы измерения  
		Для Каждого КлючЗначение Из КолонкиЕдиницИзмерения Цикл
			ИмяКолонки = КлючЗначение.Ключ;
			Если СтрДлина(Строка[ИмяКолонки]) = 4 Тогда
				ВызватьИсключение "Документ содержит 4-х значные коды ОКЕИ, отправка таких документов не поддерживается.";
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры
