
////////////////////////////////////////////////////////////////////////////////
// ОбменСБанкамиПереопределяемый: механизм обмена электронными документами с банками.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Заполняет массив актуальными видами электронных документов для прикладного решения.
//
// Параметры:
//  Массив - Массив - виды актуальных ЭД:
//   * Перечисления.ВидыЭДОбменСБанками - вид электронного документа.
//
Процедура ПолучитьАктуальныеВидыЭД(Массив) Экспорт
	
	Массив.Добавить(Перечисления.ВидыЭДОбменСБанками.ПлатежноеПоручение);
	Массив.Добавить(Перечисления.ВидыЭДОбменСБанками.ВыпискаБанка);
	Массив.Добавить(Перечисления.ВидыЭДОбменСБанками.ПлатежноеТребование);
	
	ЗарплатаКадры.ЗаполнитьАктуальныеВидыЭД(Массив);
	
КонецПроцедуры

// Используется для получения номеров счетов в виде массив строк
//
// Параметры:
//  Организация - СправочникСсылка.Организации - отбор по организации.
//  Банк - СправочникСсылка.КлассификаторБанковРФ - отбор по банку.
//  МассивНомеровБанковскихСчетов - Массив - Массив возврата, в элементах строки с номерами счетов.
//
Процедура ПолучитьНомераБанковскихСчетов(Организация, Банк, МассивНомеровБанковскихСчетов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БанковскиеСчета.НомерСчета
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Банк = &Банк
	|	И БанковскиеСчета.Владелец = &Организация
	|	И НЕ БанковскиеСчета.ПометкаУдаления
	|	И БанковскиеСчета.Валютный = ЛОЖЬ";

	Запрос.УстановитьПараметр("Банк", Банк);
	Запрос.УстановитьПараметр("Организация", Организация);
	ТабРез = Запрос.Выполнить().Выгрузить();
	МассивНомеровБанковскихСчетов = ТабРез.ВыгрузитьКолонку("НомерСчета");
	
КонецПроцедуры

// Определяет параметры электронного документа по типу владельца.
//
// Параметры:
//  Источник - ДокументСсылка, ДокументОбъект - Источник объекта, либо ссылка документа/справочника-источника.
//  ПараметрыЭД - Структура - структура параметров источника, необходимых для определения
//                настроек обмена ЭД. Обязательные параметры: ВидЭД, Банк, Организация.
//
Процедура ЗаполнитьПараметрыЭДПоИсточнику(Источник, ПараметрыЭД) Экспорт
	
	ТипИсточника = ТипЗнч(Источник);
	
	Если ТипИсточника = Тип("ДокументСсылка.ПлатежноеПоручение")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ПлатежноеПоручение") Тогда
		
		ПараметрыЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПлатежноеПоручение;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Банк = Источник.СчетОрганизации.Банк;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ПлатежноеТребование")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ПлатежноеТребование") Тогда
		
		ПараметрыЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПлатежноеТребование;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Банк = Источник.СчетОрганизации.Банк;
		
	КонецЕсли;
	
	ЗарплатаКадры.ЗаполнитьПараметрыЭДПоИсточнику(Источник, ПараметрыЭД);
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Платежное поручение.
//
// Параметры:
// СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы,
//                  по которому необходимо создать электронный документ.
// СтруктураЭД - Структура - структура данных для формирования электронного документа.
// ДеревоДокумента - ДеревоЗначений - соответствует макету ПлатежноеПоручение обработки ОбменСБанками.
//
Процедура ЗаполнитьДанныеПоПлатежномуПоручению(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента) Экспорт
	
	ПлатежныеПоручения = Новый Массив;
	ПлатежныеПоручения.Добавить(СсылкаНаОбъект);
	ПлатежныеТребования = Новый Массив;
	ТаблицаДокументов = Обработки.КлиентБанк.ПолучитьТаблицуДокументовДляЭкспорта(ПлатежныеПоручения, ПлатежныеТребования);
	
	Если ТаблицаДокументов.Количество()>0 Тогда
		
		ПлатежноеПоручение = ТаблицаДокументов[0];
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Дата",
			ПлатежноеПоручение.Дата);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Сумма",
			ПлатежноеПоручение.СуммаДокумента);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлатежа.ВидПлатежа",
			ПлатежноеПоручение.ВидПлатежа);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлатежа.ВидОплаты",
			"01");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлатежа.Очередность",
			ПлатежноеПоручение.ОчередностьПлатежа);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлатежа.Код",
			ПлатежноеПоручение.ИдентификаторПлатежа);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлатежа.НазначениеПлатежа",
			ПлатежноеПоручение.НазначениеПлатежа);
		
		// Плательщик
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлательщика.Наименование",
			ПлатежноеПоручение.ТекстПлательщика);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлательщика.ИНН",
			ПлатежноеПоручение.ИННПлательщика);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлательщика.КПП",
			ПлатежноеПоручение.КПППлательщика);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлательщика.РасчСчет",
			ПлатежноеПоручение.ОрганизацияНомерСчета);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлательщика.Банк.БИК",
			ПлатежноеПоручение.ОрганизацияБИКБанка);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлательщика.Банк.Наименование",
			ПлатежноеПоручение.ОрганизацияБанк);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлательщика.Банк.Город",
			ПлатежноеПоручение.ОрганизацияГородБанка);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлательщика.Банк.КоррСчет",
			ПлатежноеПоручение.ОрганизацияРасчСчет);
		
		// Получатель
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Получатель",
			ПлатежноеПоручение.Контрагент);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПолучателя.Наименование",
			ПлатежноеПоручение.ТекстПолучателя);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПолучателя.ИНН",
			ПлатежноеПоручение.ИННПолучателя);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПолучателя.КПП",
			ПлатежноеПоручение.КПППолучателя);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПолучателя.РасчСчет",
			ПлатежноеПоручение.КонтрагентНомерСчета);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПолучателя.Банк.БИК",
			ПлатежноеПоручение.КонтрагентБИКБанка);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПолучателя.Банк.Наименование",
			ПлатежноеПоручение.КонтрагентБанк);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПолучателя.Банк.Город",
			ПлатежноеПоручение.КонтрагентГородБанка);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПолучателя.Банк.КоррСчет",
			ПлатежноеПоручение.КонтрагентРасчСчет);
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ПлатежиВБюджет",
			ПлатежноеПоручение.ПеречислениеВБюджет);
			
		// Платежи в бюджет
		Если ПлатежноеПоручение.ПеречислениеВБюджет Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ПлатежиВБюджет.СтатусСоставителя",
				ПлатежноеПоручение.СтатусСоставителя);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ПлатежиВБюджет.ПоказательКБК",
				ПлатежноеПоручение.КодБК);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ПлатежиВБюджет.ОКТМО",
				ПлатежноеПоручение.КодОКАТО);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ПлатежиВБюджет.ПоказательОснования",
				ПлатежноеПоручение.ПоказательОснования);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ПлатежиВБюджет.ПоказательПериода",
				ПлатежноеПоручение.ПоказательПериода);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ПлатежиВБюджет.ПоказательНомера",
				ПлатежноеПоручение.ПоказательНомера);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ПлатежиВБюджет.ПоказательДаты",
				ПлатежноеПоручение.ПоказательДаты);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Платежное требование.
//
// Параметры:
// СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы,
//                  по которому необходимо создать электронный документ.
// СтруктураЭД - Структура - структура данных для формирования электронного документа.
// ДеревоДокумента - ДеревоЗначений - соответствует макету ПлатежноеТребование обработки ОбменСБанками.
//
Процедура ЗаполнитьДанныеПоПлатежномуТребованию(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента) Экспорт
	
	ПлатежныеПоручения = Новый Массив;
	ПлатежныеТребования = Новый Массив;
	ПлатежныеТребования.Добавить(СсылкаНаОбъект);
	ТаблицаДокументов = Обработки.КлиентБанк.ПолучитьТаблицуДокументовДляЭкспорта(ПлатежныеПоручения, ПлатежныеТребования);
	
	Если ТаблицаДокументов.Количество()>0 Тогда
		
		ПлатежноеТребование = ТаблицаДокументов[0];
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Дата",
			ПлатежноеТребование.Дата);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Сумма",
			ПлатежноеТребование.СуммаДокумента);
		
		// Плательщик (контрагент)
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлательщика.Наименование",
			ПлатежноеТребование.ТекстПлательщика);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлательщика.ИНН",
			ПлатежноеТребование.ИННПлательщика);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлательщика.КПП",
			ПлатежноеТребование.КПППлательщика);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлательщика.РасчСчет",
			ПлатежноеТребование.КонтрагентНомерСчета);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлательщика.Банк.БИК",
			ПлатежноеТребование.КонтрагентБИКБанка);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлательщика.Банк.Наименование",
			ПлатежноеТребование.КонтрагентБанк);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлательщика.Банк.Город",
			ПлатежноеТребование.КонтрагентГородБанка);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлательщика.Банк.КоррСчет",
			ПлатежноеТребование.КонтрагентРасчСчет);

		// Получатель (организация)
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПолучателя.Наименование",
			ПлатежноеТребование.ТекстПолучателя);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПолучателя.ИНН",
			ПлатежноеТребование.ИННПолучателя);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПолучателя.КПП",
			ПлатежноеТребование.КПППолучателя);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПолучателя.РасчСчет",
			ПлатежноеТребование.ОрганизацияНомерСчета);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПолучателя.Банк.БИК",
			ПлатежноеТребование.ОрганизацияБИКБанка);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПолучателя.Банк.Наименование",
			ПлатежноеТребование.ОрганизацияБанк);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПолучателя.Банк.Город",
			ПлатежноеТребование.ОрганизацияГородБанка);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПолучателя.Банк.КоррСчет",
			ПлатежноеТребование.ОрганизацияРасчСчет);
		
		// Реквизиты платежа
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлатежа.ВидПлатежа",
			ПлатежноеТребование.ВидПлатежа);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлатежа.ВидОплаты",
			"02");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлатежа.Очередность",
			ПлатежноеТребование.ОчередностьПлатежа);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РеквизитыПлатежа.НазначениеПлатежа",
			ПлатежноеТребование.НазначениеПлатежа);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "УсловиеОплаты",
			ПлатежноеТребование.ВидАкцепта);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "СрокАкцепта",
			ПлатежноеТребование.СрокАкцепта);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ДатаОтсылкиДокументов",
			ПлатежноеТребование.ДатаОтсылкиДок);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Плательщик",
			ПлатежноеТребование.Контрагент);
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет возможно ли редактировать объект информационной базы.
//
// Параметры:
//  СсылкаНаОбъект  - Ссылка - ссылка на проверяемый объект;
/// РедактированиеРазрешено - Булево - возвращает разрешено или нет редактирование.
//
Процедура ПроверитьВозможностьРедактированияОбъекта(СсылкаНаОбъект, РедактированиеРазрешено) Экспорт
	
КонецПроцедуры

// Заполняет список команд ЭДО.
// 
// Параметры:
//  СоставКомандЭДО - Массив - например "Документ.ПлатежныйДокумент".
//
Процедура ПодготовитьСтруктуруОбъектовКомандЭДО(СоставКомандЭДО) Экспорт
	
	СоставКомандЭДО.Добавить("Документ.ПлатежноеПоручение");
	СоставКомандЭДО.Добавить("Документ.ПлатежноеТребование");
	ЗарплатаКадры.ПодготовитьСтруктуруОбъектовКомандЭДО(СоставКомандЭДО);
	
КонецПроцедуры

// Включает тестовый режим обмена в банком.
// При включении тестового режима возможно ручное указание URL сервера для получения настроек обмена.
//
// Параметры:
//    ИспользуетсяТестовыйРежим - Булево - признак использования тестового режима.
//
Процедура ПроверитьИспользованиеТестовогоРежима(ИспользуетсяТестовыйРежим) Экспорт

	Если Найти(ВРег(Константы.ЗаголовокСистемы.Получить()), ВРег("DirectBank")) > 0 Тогда
		
		ИспользуетсяТестовыйРежим = Истина;
		
	КонецЕсли;

КонецПроцедуры

#Область ЗарплатныйПроект

// Вызывается для формирования XML файла в прикладном решении.
//
// Параметры:
//    ОбъектДляВыгрузки - ДокументСсылка - ссылка на документ, на основании которого будет сформирован ЭД.
//    ИмяФайла - Строка - имя сформированного файла.
//    АдресФайла - АдресВременногоХранилища - содержит двоичные данные файла.
//
Процедура ПриФормированииXMLФайла(ОбъектДляВыгрузки, ИмяФайла, АдресФайла) Экспорт
	
	ЗарплатаКадры.ПриФормированииXMLФайла(ОбъектДляВыгрузки, ИмяФайла, АдресФайла);
	
КонецПроцедуры

// Формирует табличный документ на основании файла XML для визуального отображения электронного документа.
//
// Параметры:
//  ИмяФайла - Строка - полный путь к файлу XML
//  ТабличныйДокумент - ТабличныйДокумент - возвращаемое значение, визуальное отображение данных файла.
//
Процедура ЗаполнитьТабличныйДокумент(Знач ИмяФайла, ТабличныйДокумент) Экспорт
	
	ЗарплатаКадры.ЗаполнитьТабличныйДокументПоПрямомуОбменуСБанками(ИмяФайла, ТабличныйДокумент);
	
КонецПроцедуры

// Вызывается при получении файла из банка.
//
// Параметры:
// АдресДанныхФайла - Строка - адрес временного хранилища с двоичными данными файла.
// ИмяФайла - Строка - формализованное имя файла данных.
// ОбъектВладелец - ДокументСсылка - (возвращаемый параметр) ссылка на документ, который был создан на основании ЭД.
// ДанныеОповещения - Структура - (возвращаемый параметр) данные для вызова метода Оповестить на клиенте.
//                 * Ключ - Строка - имя события.
//                 * Значение - Произвольный - параметр сообщения.
Процедура ПриПолученииXMLФайла(АдресДанныхФайла, ИмяФайла, ОбъектВладелец, ДанныеОповещения) Экспорт
	
	ЗарплатаКадры.ПриПолученииXMLФайла(АдресДанныхФайла, ИмяФайла, ОбъектВладелец, ДанныеОповещения);
	
КонецПроцедуры

#КонецОбласти

// Вызывается при изменении состояния электронного документооборота.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - владелец электронного документооборота;
//  СостояниеЭД - ПеречислениеСсылка.СостоянияОбменСБанками - новое состояние электронного документооборота.
//
Процедура ПриИзмененииСостоянияЭД(СсылкаНаОбъект, СостояниеЭД) Экспорт
	
	СостояниеСтрокой = ЭлектронноеВзаимодействиеБП.СостояниеБанковскогоДокументаСтрокой(СостояниеЭД);
	РегистрыСведений.СостоянияБанковскихДокументов.УстановитьСостояниеДокумента(СсылкаНаОбъект, СостояниеСтрокой);
	
КонецПроцедуры

#КонецОбласти
