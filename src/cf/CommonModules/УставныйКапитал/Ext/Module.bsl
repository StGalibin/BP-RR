#Область ПрограммныйИнтерфейс

// Определяет, отражен ли уставный капитал организации в регистре бухгалтерии или еще нет.
//
// Параметры:
//  Организация	 - СправочникСсылка.Организации - проверяемая организация
// 
// Возвращаемое значение:
//  Булево - Истина, если отражена сумма уставного капитала
//
Функция УставныйКапиталОтражен(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",                 Организация);
	Запрос.УстановитьПараметр("СчетаУчетаУставногоКапитала", БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.УставныйКапитал));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(ХозрасчетныйОстатки.СуммаОстатокКт) КАК СуммаКапитала
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(, Счет В (&СчетаУчетаУставногоКапитала), , Организация = &Организация) КАК ХозрасчетныйОстатки
	|
	|ИМЕЮЩИЕ
	|	СУММА(ХозрасчетныйОстатки.СуммаОстатокКт) <> 0";
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Формирует проводки по отражению уставного (прочего, не акционерного) капитала на счете 80.09.
// Данные об уставном капитале выбирает из справочника Организации.
// Проводки записывает в новый документ ОперацияБух.
// При необходимости создает новые элементы в справочнике Контрагенты.
// 
// Параметры:
//  Организация	- СправочникСсылка.Организации - организация, уставный капитал которой требуется отразить в учете
// 
// Возвращаемое значение:
//  Строка - пустая строка, если проводки сформированы; текст сообщения об ошибке, если не удалось сформировать 
//
Функция ОтразитьУставныйКапитал(Организация) Экспорт
	
	// Получим данные об уставном капитале
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.ДатаРегистрации КАК ДатаРегистрации,
	|	Организации.Учредители.(
	|		Учредитель КАК Учредитель,
	|		СуммаКапитала КАК СуммаКапитала
	|	)
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка = &Организация";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Нет данных об уставном капитале организации %1'"),
			Организация);
	КонецЕсли;
	
	ДатаРегистрации = Выборка.ДатаРегистрации;
	Если Не ЗначениеЗаполнено(ДатаРегистрации) Тогда
		ДатаРегистрации = ТекущаяДатаСеанса();
	КонецЕсли;
	
	// Проверим возможность записать операцию
	ОписаниеПроверкиДатыЗапрета = ДатыЗапретаИзменения.ШаблонДанныхДляПроверки();
	Проверка = ОписаниеПроверкиДатыЗапрета.Добавить();
	Проверка.Раздел = ПланыВидовХарактеристик.РазделыДатЗапретаИзменения.БухгалтерскийУчет;
	Проверка.Объект = Организация;
	Проверка.Дата   = ДатаРегистрации;
	
	Если ДатыЗапретаИзменения.НайденЗапретИзмененияДанных(ОписаниеПроверкиДатыЗапрета) Тогда
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Запрещено редактирование данных организации %1 за %2'"),
			Организация,
			Формат(ДатаРегистрации, "ДЛФ=DD"));
	КонецЕсли;
	
	// Обеспечим наличие ссылок на учредителей в справочнике Контрагенты
	УчредителиФизическиеЛица = Новый Массив;
	ВыборкаУчредители = Выборка.Учредители.Выбрать();
	Пока ВыборкаУчредители.Следующий() Цикл
		Если ТипЗнч(ВыборкаУчредители.Учредитель) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			УчредителиФизическиеЛица.Добавить(ВыборкаУчредители.Учредитель);
		КонецЕсли;
	КонецЦикла;
	
	Контрагенты = КонтрагентыСоответствующиеФизическимЛицам(УчредителиФизическиеЛица);
	Если Контрагенты.Количество() < УчредителиФизическиеЛица.Количество() Тогда
		// Следует создать контрагентов
		Для Каждого ФизическоеЛицо Из УчредителиФизическиеЛица Цикл
			Если Контрагенты[ФизическоеЛицо] = Неопределено Тогда
				РезультатСоздания = СоздатьКонтрагентаУчредителя(ФизическоеЛицо);
				Контрагенты.Вставить(ФизическоеЛицо, РезультатСоздания);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Операция = Документы.ОперацияБух.СоздатьДокумент();
	ЗаполнениеДокументов.Заполнить(Операция);
	Операция.Дата          = ДатаРегистрации;
	Операция.Организация   = Организация;
	Операция.Содержание    = Нстр("ru = 'Формирование уставного капитала организации'");
	
	СчетРасчетов           = ПланыСчетов.Хозрасчетный.РасчетыПоВкладамВУставныйКапитал;
	СчетКапитала           = ПланыСчетов.Хозрасчетный.УставныйКапитал_ПрочийКапитал;
	ВидСубконтоКонтрагенты = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты;
	
	Движение = Операция.Движения.Хозрасчетный;
	Движение.Записывать = Истина;
	
	ТипКонтрагенты = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	
	ВыборкаУчредители.Сбросить();
	Пока ВыборкаУчредители.Следующий() Цикл
		
		Запись = Движение.Добавить();
		Запись.Период      = Операция.Дата;
		Запись.Организация = Организация;
		
		Запись.СчетДт      = СчетРасчетов;
		Запись.СчетКт      = СчетКапитала;
		
		Если ТипКонтрагенты.СодержитТип(ТипЗнч(ВыборкаУчредители.Учредитель)) Тогда
			Контрагент = ВыборкаУчредители.Учредитель;
		Иначе
			Контрагент = Контрагенты[ВыборкаУчредители.Учредитель];
			Контрагент = ТипКонтрагенты.ПривестиЗначение(Контрагент);
		КонецЕсли;
		
		БухгалтерскийУчет.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, ВидСубконтоКонтрагенты, Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, ВидСубконтоКонтрагенты, Контрагент);
		
		Запись.Сумма       = ВыборкаУчредители.СуммаКапитала;
		
		Запись.Содержание  = Операция.Содержание;
		
		Операция.СуммаОперации = Операция.СуммаОперации + ВыборкаУчредители.СуммаКапитала;
		
	КонецЦикла;
	
	Результат = "";
	Попытка
		Операция.Записать();
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Документы.ОперацияБух,
			,// Данные не записаны
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
		Результат = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СобытиеЖурналаРегистрации()
	Возврат Нстр(
		"ru = 'Формирование уставного капитала организации'", 
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
КонецФункции

Функция КонтрагентыСоответствующиеФизическимЛицам(ФизическиеЛица)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ФизическиеЛица.ИНН КАК ИНН,
	|	ФизическиеЛица.ФИО КАК ФИО,
	|	ФизическиеЛица.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ДанныеФизическихЛиц
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.Ссылка В(&ФизическиеЛица)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеФизическихЛиц.Ссылка КАК Ссылка,
	|	ДанныеФизическихЛиц.ИНН КАК ИНН,
	|	ДанныеФизическихЛиц.ФИО
	|ПОМЕСТИТЬ ИННФизическихЛиц
	|ИЗ
	|	ДанныеФизическихЛиц КАК ДанныеФизическихЛиц
	|ГДЕ
	|	ДанныеФизическихЛиц.ИНН <> """"
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИНН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеФизическихЛиц.ФИО КАК ФИО,
	|	ДанныеФизическихЛиц.Ссылка
	|ПОМЕСТИТЬ НаименованияФизическихЛиц
	|ИЗ
	|	ДанныеФизическихЛиц КАК ДанныеФизическихЛиц
	|ГДЕ
	|	ДанныеФизическихЛиц.ИНН = """"
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФИО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИННФизическихЛиц.Ссылка КАК ФизическоеЛицо,
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.ПометкаУдаления КАК ПометкаУдаления,
	|	Контрагенты.Наименование = ИННФизическихЛиц.ФИО КАК НаименованиеСовпадает,
	|	Контрагенты.Наименование КАК Наименование
	|ИЗ
	|	ИННФизическихЛиц КАК ИННФизическихЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО ИННФизическихЛиц.ИНН = Контрагенты.ИНН
	|			И (Контрагенты.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НаименованияФизическихЛиц.Ссылка,
	|	Контрагенты.Ссылка,
	|	Контрагенты.ПометкаУдаления,
	|	ЛОЖЬ,
	|	Контрагенты.Наименование
	|ИЗ
	|	НаименованияФизическихЛиц КАК НаименованияФизическихЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО НаименованияФизическихЛиц.ФИО = Контрагенты.Наименование
	|			И (Контрагенты.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПометкаУдаления,
	|	НаименованиеСовпадает УБЫВ,
	|	Наименование,
	|	Контрагент
	|ИТОГИ ПО
	|	ФизическоеЛицо";
	
	Контрагенты = Новый Соответствие; // Ключ - Физическое лицо; Значение - Контрагент
	
	ВыборкаФизическиеЛица = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаФизическиеЛица.Следующий() Цикл
		ВыборкаКонтрагенты = ВыборкаФизическиеЛица.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Если ВыборкаКонтрагенты.Следующий() Тогда
			Контрагенты.Вставить(ВыборкаКонтрагенты.ФизическоеЛицо, ВыборкаКонтрагенты.Контрагент);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Контрагенты;
	
КонецФункции

Функция СоздатьКонтрагентаУчредителя(ФизическоеЛицо)
	
	Если Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	РеквизитыЛица = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ФизическоеЛицо, "ИНН, ФИО");
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ИНН",                       РеквизитыЛица.ИНН);
	ДанныеЗаполнения.Вставить("НаименованиеПолное",        РеквизитыЛица.ФИО);
	ДанныеЗаполнения.Вставить("ЮридическоеФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	
	НовыйЭлемент = Справочники.Контрагенты.СоздатьЭлемент();
	НовыйЭлемент.Заполнить(ДанныеЗаполнения);
	
	ТекстСообщенияОбОшибке = "";
	Попытка
		НовыйЭлемент.Записать();
	Исключение
		ТекстСообщенияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если Не НовыйЭлемент.ЭтоНовый() Тогда
		
		// Удалось записать
		Возврат НовыйЭлемент.Ссылка;
		
	Иначе // Что-то пошло не так
		
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.Контрагенты,
			,// Данные не записаны
			ТекстСообщенияОбОшибке);
		
		Возврат Справочники.Контрагенты.ПустаяСсылка();
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти
