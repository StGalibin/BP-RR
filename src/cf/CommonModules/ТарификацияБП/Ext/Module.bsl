#Область СлужебныйПрограммныйИнтерфейс

Процедура ДополнитьОписаниеТарифицируемыхУслуг(ПоставщикиУслуг) Экспорт
	
	НовыйПоставщик = Новый Структура;
	НовыйПоставщик.Вставить("Идентификатор", "БухгалтерияПредприятия");
	НовыйПоставщик.Вставить("Наименование",  НСтр("ru = 'Конфигурация ""Бухгалтерия предприятия"", редакция 3.0'"));
	НовыйПоставщик.Вставить("Услуги",        Новый Массив);
	
	Услуга = Новый Структура;
	Услуга.Вставить("Идентификатор", "РегулярнаяДеятельность");
	Услуга.Вставить("Наименование",  НСтр("ru = 'Возможность учитывать регулярную деятельность бизнеса и предоставлять ненулевую отчетность'"));
	Услуга.Вставить("ТипУслуги",     Перечисления.ТипыУслуг.Безлимитная);
	
	НовыйПоставщик.Услуги.Добавить(Услуга);
	
	ПоставщикиУслуг.Добавить(НовыйПоставщик);
	
КонецПроцедуры

Процедура РазместитьИнформациюОбОграничении(Форма) Экспорт
	
	Если ТарификацияБПВызовСервераПовтИсп.РазрешенУчетРегулярнойДеятельности() Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.ИмяФормы = "Обработка.ФункциональностьПрограммы.Форма.ФормаФункциональностьПрограммы" Тогда
		
		НаложитьОграничениеНаГруппуФормы(Форма, "ГруппаФункциональность", "ТолькоПросмотр");
		
	ИначеЕсли Форма.ИмяФормы = "ОбщаяФорма.НалогиИОтчеты"
		ИЛИ Форма.ИмяФормы = "РегистрСведений.НастройкиСистемыНалогообложения.Форма.ФормаЗаписи" Тогда
		
		НаложитьОграничениеНаГруппуФормы(Форма, "ГруппаСпецрежим", "ТолькоПросмотр");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РазместитьИнформациюОбОграниченииПоКоличествуОбъектов(Форма) Экспорт
	
	Если ТарификацияБПВызовСервераПовтИсп.РазрешенУчетРегулярнойДеятельности() Тогда
		Возврат;
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	Фон = Элементы.Вставить(
		"ГруппаОграничениеТарифа",
		Тип("ГруппаФормы"),,
		Элементы.Список);
		
	Фон.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
	Фон.ЦветФона            = ЦветаСтиля.ЦветФонаНедоступногоСервиса;
	Фон.ОтображатьЗаголовок = Ложь;
	
	КоличествоПредметов = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(ОграничениеКоличестваОбъектов(),
		НСтр("ru = 'документа, документов, документов'"), Истина);
	ТекстПредупреждения = НСтр("ru='Можно ввести не больше %1 всех видов. На платном тарифе — сколько угодно.'");
	ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, КоличествоПредметов);
	
	ВставитьДекорациюПредупреждения(Элементы, "ОграничениеТарифа", Фон, ТекстПредупреждения);
	
КонецПроцедуры

// Обработчик подписки на событие ПроверкаТарифныхОграниченийДокументов.
// Если тарифные ограничения нарушены, будет вызвано исключение.
//	
Процедура ПроверкаТарифныхОграниченийДокументовПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	ПроверитьОграничениеОбъекта(Источник, Отказ);
	
КонецПроцедуры

Функция УстановитьРазрешенУчетРегулярнойДеятельности(РегистрироватьНаУзлахПлановОбмена = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РазрешенУчетРегулярнойДеятельности = ТарификацияБПВызовСервераПовтИсп.РазрешенУчетРегулярнойДеятельности();
	
	МенеджерКонстанты = Константы.РазрешенУчетРегулярнойДеятельности.СоздатьМенеджерЗначения();
	МенеджерКонстанты.Прочитать();
	
	Если МенеджерКонстанты.Значение = РазрешенУчетРегулярнойДеятельности Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МенеджерКонстанты.Значение = РазрешенУчетРегулярнойДеятельности;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерКонстанты, РегистрироватьНаУзлахПлановОбмена);
	
	Возврат Истина;
	
КонецФункции

// Устанавливает значения общих констант загрузке данных из сервиса
//
Процедура УстановитьЗначенияКонстантПоставкиПослеЗагрузкиДанных() Экспорт
	
	Если Не ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		// При переходе в локальную версию значение общей константы не наследуется:
		// локальная версия не может иметь тарифных ограничений
		Константы.УчетРегулярнойДеятельностиОпределяетсяТарифом.Установить(Ложь);
		ОбновитьПовторноИспользуемыеЗначения();
		УстановитьРазрешенУчетРегулярнойДеятельности(Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОграничениеКоличестваОбъектов()
	
	Возврат 50;
	
КонецФункции

Функция ЦветФонаОграниченнойФункциональности()
	
	Возврат Новый Цвет(240, 240, 240);
	
КонецФункции

Процедура ПроверитьОграничениеОбъекта(Объект, Отказ)
	
	Если ТарификацияБПВызовСервераПовтИсп.РазрешенУчетРегулярнойДеятельности() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ЖурналОпераций.Ссылка) КАК КоличествоОбъектов
	|ИЗ
	|	ЖурналДокументов.ЖурналОпераций КАК ЖурналОпераций
	|ГДЕ
	|	НЕ ЖурналОпераций.Ссылка ССЫЛКА Документ.РегламентнаяОперация";
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	СлагаемоеНовогоОбъекта = ?(ЗначениеЗаполнено(Объект.Ссылка), 0, 1);
	
	Если Выборка.Следующий()
		И Выборка.КоличествоОбъектов + СлагаемоеНовогоОбъекта > ОграничениеКоличестваОбъектов() Тогда
		
		СообщениеДляЖурналаРегистрации = Новый Структура;
		СообщениеДляЖурналаРегистрации.Вставить("ИмяСобытия",          СобытиеЖурналаРегистрацииСообщение());
		СообщениеДляЖурналаРегистрации.Вставить("Комментарий",         Строка(Объект));
		СообщениеДляЖурналаРегистрации.Вставить("ПредставлениеУровня", "Информация");
		СообщенияДляЖурналаРегистрации = Новый СписокЗначений;
		СообщенияДляЖурналаРегистрации.Добавить(СообщениеДляЖурналаРегистрации);
		ЖурналРегистрации.ЗаписатьСобытияВЖурналРегистрации(СообщенияДляЖурналаРегистрации);
		
		Отказ = Истина;
		ВызватьИсключение ТарификацияБПКлиентСервер.ПолучитьТекстПредупреждения(
			НСтр("ru='Достигнуто ограничение бесплатного тарифа.'"));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НаложитьОграничениеНаГруппуФормы(Форма, ИмяГруппы, СпособОграничения)
	
	Элементы = Форма.Элементы;
	
	Элемент = Элементы[ИмяГруппы];
	
	Для каждого ПодчиненныйЭлемент Из Элемент.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаФормы") Тогда
			ПодчиненныйЭлемент[СпособОграничения] = ?(СпособОграничения = "ТолькоПросмотр", Истина, Ложь);
		КонецЕсли;
	КонецЦикла;
	Элемент.ЦветФона = ЦветФонаОграниченнойФункциональности();
	
	ТекстПредупреждения = НСтр("ru='Эти возможности доступны на платном тарифе.'");
	ВставитьДекорациюПредупреждения(Элементы, "ОграничениеТарифа", Элемент, ТекстПредупреждения);
	
КонецПроцедуры

Процедура ВставитьДекорациюПредупреждения(Элементы, ИмяЭлемента, Родитель, ТекстПредупреждения)
	
	Декорация =  Элементы.Найти(ИмяЭлемента);
	Если Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
		
		// Декорация вставляется всегда перед первым элементом.
		Если Родитель.ПодчиненныеЭлементы.Количество() > 0 Тогда
			ПервыйЭлементРодителя = Родитель.ПодчиненныеЭлементы[0];
		Иначе
			ПервыйЭлементРодителя = Неопределено;
		КонецЕсли;
		
		Декорация = Элементы.Вставить(
			ИмяЭлемента,
			Тип("ДекорацияФормы"),
			Родитель,
			ПервыйЭлементРодителя);
			
	КонецЕсли;
	
	Декорация.Заголовок = ТарификацияБПКлиентСервер.ПолучитьТекстПредупреждения(ТекстПредупреждения);
	Декорация.АвтоМаксимальнаяШирина = Ложь;
	Декорация.РастягиватьПоГоризонтали = Истина;
	
КонецПроцедуры

Функция СобытиеЖурналаРегистрацииСообщение()
	
	КодЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
	ШаблонТекста = НСтр("ru='%1.Достигнуто ограничение по количеству объектов'", КодЯзыка);
	Возврат СтрШаблон(ШаблонТекста, ТарификацияБПКлиентСервер.ГруппаСобытийЖурналаРегистрации());
	
КонецФункции

#КонецОбласти

#Область ПереходНаПлатныйТариф

Процедура ПолучитьКонтактныйТелефонВФоне(СтруктураПараметров, АдресРезультата = Неопределено) Экспорт
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("Результат");
	СтруктураРезультата.Вставить("Телефон", "");
	
	Прокси = ПроксиВебСервиса();
	
	КлючОбласти = Константы.КлючОбластиДанных.Получить();
	РазделительСеанса = ОбщегоНазначения.ЗначениеРазделителяСеанса();
	
	Телефон = "";
	Результат = Неопределено;
	
	Попытка
		Результат = Прокси.GetContactPhone(РазделительСеанса, КлючОбласти, Телефон);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецПопытки;
	
	СтруктураРезультата.Телефон   = Телефон;
	СтруктураРезультата.Результат = Результат;
	ПоместитьВоВременноеХранилище(СтруктураРезультата, АдресРезультата);
	
КонецПроцедуры

Процедура ЗапросНаСменуТарифа(ПараметрыЗапроса, АдресРезультата = Неопределено) Экспорт
	
	Прокси = ПроксиВебСервиса();
	
	РазделительСеанса = ОбщегоНазначения.ЗначениеРазделителяСеанса();
	КлючОбласти = Константы.КлючОбластиДанных.Получить();
	
	Попытка
		
		Результат = Прокси.SwitchTariffReq(
			РазделительСеанса,
			КлючОбласти,
			ПараметрыЗапроса.Телефон,
			ПараметрыЗапроса.ИНН
			);
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
	КонецПопытки;
	
КонецПроцедуры

Функция ИмяСобытияЖурналаРегистрации()
	
	Возврат НСтр("ru = 'ТарификацияБП'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Функция ПроксиВебСервиса()
	
	Адрес        = РаботаВМоделиСервиса.ВнутреннийАдресМенеджераСервиса() + "/ws/PrivateAPI?wsdl";
	Пользователь = РаботаВМоделиСервиса.ИмяСлужебногоПользователяМенеджераСервиса();
	Пароль       = РаботаВМоделиСервиса.ПарольСлужебногоПользователяМенеджераСервиса();
	
	Определения             = Новый WSОпределения(Адрес, Пользователь, Пароль);
	ПространствоИменСервиса = "http://www.1c.ru/1cFresh/PrivateAPI/1.0";
	Прокси                  = Новый WSПрокси(Определения, ПространствоИменСервиса, "PrivateAPI", "PrivateAPISoap");
	Прокси.Пользователь     = Пользователь;
	Прокси.Пароль           = Пароль;
	Возврат Прокси;
	
КонецФункции

#КонецОбласти