#Область ОбщиеПроцедурыИФункции

// Функция формирует массив имен регистров, по которым документ имеет движения.
// Вызывается при подготовке записей к регистрации движений.
//
Функция ПолучитьМассивИспользуемыхРегистров(Регистратор, Движения, МассивИсключаемыхРегистров = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Регистратор);

	Результат = Новый Массив;
	МаксимумТаблицВЗапросе = 256;

	СчетчикТаблиц   = 0;
	СчетчикДвижений = 0;

	ВсегоДвижений = Движения.Количество();
	ТекстЗапроса  = "";
	Для Каждого Движение Из Движения Цикл

		СчетчикДвижений = СчетчикДвижений + 1;

		ПропуститьРегистр = МассивИсключаемыхРегистров <> Неопределено
							И МассивИсключаемыхРегистров.Найти(Движение.Имя) <> Неопределено;

		Если Не ПропуститьРегистр Тогда

			Если СчетчикТаблиц > 0 Тогда

				ТекстЗапроса = ТекстЗапроса + "
				|ОБЪЕДИНИТЬ ВСЕ
				|";

			КонецЕсли;

			СчетчикТаблиц = СчетчикТаблиц + 1;


			ТекстЗапроса = ТекстЗапроса + 
			"
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|""" + Движение.Имя + """ КАК ИмяРегистра
			|
			|ИЗ " + Движение.ПолноеИмя() + "
			|
			|ГДЕ Регистратор = &Регистратор
			|";

		КонецЕсли;

		Если СчетчикТаблиц = МаксимумТаблицВЗапросе Или СчетчикДвижений = ВсегоДвижений Тогда

			Запрос.Текст  = ТекстЗапроса;
			ТекстЗапроса  = "";
			СчетчикТаблиц = 0;

			Если Результат.Количество() = 0 Тогда

				Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИмяРегистра");

			Иначе

				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					Результат.Добавить(Выборка.ИмяРегистра);
				КонецЦикла;

			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции

// Процедура выполняет подготовку наборов записей документа к проведению документа.
// 1. Очищает наборы записей от "старых записей" (ситуация возможна только в толстом клиенте)
// 2. Взводит флаг записи у наборов, по которым документ имел движения при прошлом проведении
// 3. Устанавливает активность наборам записей документов с установленным флагом ручной корректировки
// 4. Записывает пустые наборы, если дата ранее проведенного документа была сдвинута вперед
// Вызывается из модуля документа при проведении.
//
Процедура ПодготовитьНаборыЗаписейКПроведению(Объект, ВыборочноОчищатьРегистры = Истина) Экспорт
	
	// С целью оптимизации производительности запоминаем значение свойства в переменной.
	ПропуститьПроверкуЗапретаИзменения = Объект.ДополнительныеСвойства.Свойство("ПропуститьПроверкуЗапретаИзменения");
	
	Для каждого НаборЗаписей Из Объект.Движения Цикл
		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей.Очистить();
		КонецЕсли;
		Если ПропуститьПроверкуЗапретаИзменения Тогда
			НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
		КонецЕсли;
	КонецЦикла;

	Если Объект.ДополнительныеСвойства.ЭтоНовый Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеОбъекта = Объект.Метаданные();
	
	// Регистры, требующие принудительной очистки:
	МассивИменРегистровПринудительнойОчистки = Новый Массив;
	МассивИменРегистровПринудительнойОчистки.Добавить("РасходыПриУСН");
	МассивДвиженийДляПринудительнойОчистки = Новый Массив;
	
	МассивИменРегистров = ПолучитьМассивИспользуемыхРегистров(
		Объект.Ссылка, 
		МетаданныеОбъекта.Движения);

	Для каждого ИмяРегистра Из МассивИменРегистров Цикл
		Объект.Движения[ИмяРегистра].Записывать = Истина;
		Если МассивИменРегистровПринудительнойОчистки.Найти(ИмяРегистра) <> Неопределено
			ИЛИ НЕ ВыборочноОчищатьРегистры Тогда
			МассивДвиженийДляПринудительнойОчистки.Добавить(Объект.Движения[ИмяРегистра]);
		КонецЕсли; 
	КонецЦикла;
	
	РучнаяКорректировка = МетаданныеОбъекта.Реквизиты.Найти("РучнаяКорректировка") <> Неопределено
		И Объект.РучнаяКорректировка;
	
	Если РучнаяКорректировка Тогда
		
		Для каждого ИмяРегистра Из МассивИменРегистров Цикл
			Объект.Движения[ИмяРегистра].Прочитать();
			Объект.Движения[ИмяРегистра].УстановитьАктивность(Истина);
		КонецЦикла;
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Движения документа %1 отредактированы вручную и не могут быть автоматически актуализированы'"), Объект);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка);
		
	ИначеЕсли НЕ Объект.ДополнительныеСвойства.ДатаДокументаСдвинутаВперед Тогда
		
		Для каждого НаборЗаписей Из МассивДвиженийДляПринудительнойОчистки Цикл
			НаборЗаписей.Записать();
			НаборЗаписей.Записывать = Ложь;
		КонецЦикла; 
		
	КонецЕсли;
	
	Если Объект.ДополнительныеСвойства.ДатаДокументаСдвинутаВперед Тогда
		Объект.Движения.Записать();
	КонецЕсли;

КонецПроцедуры

// Процедура выполняет подготовку наборов записей документа к отмене проведения документа.
// 1. Взводит флаг записи у наборов, по которым документ имел движения при прошлом проведении
// 2. Снимает активность у наборов записей документов с установленным флагом ручной корректировки
// Вызывается из модуля документа при отмене проведения.
//
Процедура ПодготовитьНаборыЗаписейКОтменеПроведения(Объект) Экспорт
	
	МетаданныеОбъекта = Объект.Метаданные();
	
	МассивИменРегистров = ПолучитьМассивИспользуемыхРегистров(
		Объект.Ссылка, 
		МетаданныеОбъекта.Движения);

	ПропуститьПроверкуЗапретаИзменения = Объект.ДополнительныеСвойства.Свойство("ПропуститьПроверкуЗапретаИзменения");

	Для каждого ИмяРегистра Из МассивИменРегистров Цикл
		НаборЗаписей = Объект.Движения[ИмяРегистра];
		НаборЗаписей.Записывать = Истина;
		Если ПропуститьПроверкуЗапретаИзменения Тогда
			НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
		КонецЕсли;
	КонецЦикла;
	
	РучнаяКорректировка = МетаданныеОбъекта.Реквизиты.Найти("РучнаяКорректировка") <> Неопределено
		И Объект.РучнаяКорректировка;
	
	Если РучнаяКорректировка Тогда
		Для каждого ИмяРегистра Из МассивИменРегистров Цикл
			Объект.Движения[ИмяРегистра].Прочитать();
			Объект.Движения[ИмяРегистра].УстановитьАктивность(Ложь);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает Истина, если проведение документа выполняется в режиме группового перепроведения.
//
// Параметры:
//	Объект - ДокументОбъект - документ, для которого необходимо вернуть режим.
//
// Возвращаемое значение:
//	Булево
Функция ГрупповоеПерепроведение(Объект) Экспорт

	Результат = Ложь;

	Если Объект.ДополнительныеСвойства.Свойство("ГрупповоеПерепроведение") Тогда
		Если ТипЗнч(Объект.ДополнительныеСвойства.ГрупповоеПерепроведение) = Тип("Булево") Тогда
			Результат = Объект.ДополнительныеСвойства.ГрупповоеПерепроведение;
		Иначе
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииБЗК

// Очищает записи наборов из коллекции Движения и проставляет флаг Записывать наборам, по которым 
// документ уже имеет движения
// 
//	Параметры:
//		Объект - документ
//		ЭтоНовый - признак того, что пишется новый документ
//		ДвиженияМетаданные - свойство метаданных Движения
Процедура ПодготовитьНаборыЗаписейКРегистрацииДвижений(Объект, ЭтоНовый = Ложь, ДвиженияМетаданные = НеОпределено) Экспорт
	
	Объект.ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый);
	Если НЕ Объект.ДополнительныеСвойства.Свойство("ДатаДокументаСдвинутаВперед") Тогда
		Объект.ДополнительныеСвойства.Вставить("ДатаДокументаСдвинутаВперед", Истина);
	КонецЕсли;	
	ПодготовитьНаборыЗаписейКПроведению(Объект, Ложь);
		
КонецПроцедуры

#КонецОбласти

#Область ОтложенноеПроведение

// Возвращает Истина, если для организации в указанном периоде используется 
// отложенное проведение.
// 
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация, для которой проверяется режим проведения.
//	Период - Дата+Время - Дата, по состоянию на которую проверяется режим проведения.
//	ПроверятьЭквайрингПриУСН - Булево - Истина, если для организации на УСН необходимо учитывать наличие эквайринговых операций.
//
Функция ИспользуетсяОтложенноеПроведение(Организация, Период, ПроверятьЭквайрингПриУСН = Истина) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОтложенноеПроведение") Тогда
		// Отложенное проведение выключено.
		Возврат Ложь;
	КонецЕсли;

	ПрименяетсяУСНПатент		= УчетнаяПолитика.ПрименяетсяУСНПатент(Организация, Период);
	ПрименяетсяУСНДоходы 		= УчетнаяПолитика.ПрименяетсяУСНДоходы(Организация, Период);
	ПлательщикНалогаНаПрибыль 	= УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, Период);
	ПрименяетсяОсобыйПорядокНалогообложения = УчетнаяПолитика.ПрименяетсяОсобыйПорядокНалогообложения(Организация, Период);

	Если ПрименяетсяУСНДоходы
		ИЛИ ПлательщикНалогаНаПрибыль
		ИЛИ ПрименяетсяОсобыйПорядокНалогообложения Тогда
		// Отложенное проведение применяется только для:
		// 1. организаций на общей системе (налог на прибыль, НДС)
		// 2. организаций и ИП на УСН-доходы, в т.ч. совместно с патентами и/или ЕНВД
		// 3. ИП только на патенте
		// 4. ИП только на ЕНВД.
	Иначе
		// Все остальные системы налогообложения не совместимы с отложенным проведением.
		Возврат Ложь;
	КонецЕсли;
	
	СпособОценкиМПЗ = УчетнаяПолитика.СпособОценкиМПЗ(Организация, Период);
	Если СпособОценкиМПЗ <> Перечисления.СпособыОценки.ПоСредней Тогда
		// Отложенное проведение поддерживается только при оценке по средней стоимости МПЗ.
		Возврат Ложь;
	КонецЕсли;
	
	Если УчетнаяПолитика.РаздельныйУчетНДС(Организация, Период) Тогда
		// При раздельном учете НДС отложенное проведение не поддерживается.
		Возврат Ложь;
	КонецЕсли;

	СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(Организация, Период);
	Если СпособОценкиТоваровВРознице <> Перечисления.СпособыОценкиТоваровВРознице.ПоСтоимостиПриобретения Тогда
		// При учете в рознице по ценам продаж отложенное проведение не поддерживается.
		Возврат Ложь;
	КонецЕсли;
	
	Если ПроверятьЭквайрингПриУСН И (ПрименяетсяУСНДоходы ИЛИ ПрименяетсяУСНПатент) Тогда
		// Для УСН и/или патента использование отложенного проведения возможно, 
		// если нет операций с платежными картами.
		Если ОбщегоНазначенияБПВызовСервераПовтИсп.ПрименяетсяОплатаПлатежнымиКартами(Организация) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	Возврат Истина;

КонецФункции

// Возвращает таблицу организаций и периодов, в течение которых поддерживается отложенное проведение.
//
// Параметры:
//	Организации - Массив, Неопределено - Список организаций, для которых требуется определить периоды.
//		Если не передан, то по всем организациям.
//
// Возвращаемое значние:
//	ТаблицаЗначений - содержит колонки
//		* Организация 	- СправочникСсылка.Организации
//		* ДатаНачала 	- Дата - первое число месяца, с которого организация может применять отложенное проведение.
//		* ДатаОкончания - Дата - последнее число месяца, в котором организация еще может применять отложенное проведение.
//
Функция ПериодыИспользованияОтложенногоПроведения(Организации = Неопределено) Экспорт

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Организация",   Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Результат.Колонки.Добавить("ДатаНачала",    ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	Результат.Колонки.Добавить("ДатаОкончания", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организации", Организации);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиСистемыНалогообложения.Период КАК Период,
	|	НастройкиСистемыНалогообложения.Организация КАК Организация
	|ПОМЕСТИТЬ ВТ_Периоды
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
	|ГДЕ
	|	НастройкиСистемыНалогообложения.Организация В(&Организации)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	НастройкиУчетаНДС.Период,
	|	НастройкиУчетаНДС.Организация
	|ИЗ
	|	РегистрСведений.НастройкиУчетаНДС КАК НастройкиУчетаНДС
	|ГДЕ
	|	НастройкиУчетаНДС.Организация В(&Организации)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	УчетнаяПолитика.Период,
	|	УчетнаяПолитика.Организация
	|ИЗ
	|	РегистрСведений.УчетнаяПолитика КАК УчетнаяПолитика
	|ГДЕ
	|	УчетнаяПолитика.Организация В(&Организации)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Периоды.Период,
	|	ВТ_Периоды.Организация,
	|	МАКСИМУМ(НастройкиСистемыНалогообложения.Период) КАК ПериодБлижайший
	|ПОМЕСТИТЬ ВТ_НастройкиСистемыНалогообложения
	|ИЗ
	|	ВТ_Периоды КАК ВТ_Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
	|		ПО ВТ_Периоды.Организация = НастройкиСистемыНалогообложения.Организация
	|			И ВТ_Периоды.Период >= НастройкиСистемыНалогообложения.Период
	|ГДЕ
	|	НастройкиСистемыНалогообложения.Организация В(&Организации)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Периоды.Период,
	|	ВТ_Периоды.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Периоды.Период,
	|	ВТ_Периоды.Организация,
	|	МАКСИМУМ(УчетнаяПолитика.Период) КАК ПериодБлижайший
	|ПОМЕСТИТЬ ВТ_УчетнаяПолитика
	|ИЗ
	|	ВТ_Периоды КАК ВТ_Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитика КАК УчетнаяПолитика
	|		ПО ВТ_Периоды.Организация = УчетнаяПолитика.Организация
	|			И ВТ_Периоды.Период >= УчетнаяПолитика.Период
	|ГДЕ
	|	УчетнаяПолитика.Организация В(&Организации)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Периоды.Период,
	|	ВТ_Периоды.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Периоды.Период,
	|	ВТ_Периоды.Организация,
	|	МАКСИМУМ(НастройкиУчетаНДС.Период) КАК ПериодБлижайший
	|ПОМЕСТИТЬ ВТ_НастройкиУчетаНДС
	|ИЗ
	|	ВТ_Периоды КАК ВТ_Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаНДС КАК НастройкиУчетаНДС
	|		ПО ВТ_Периоды.Организация = НастройкиУчетаНДС.Организация
	|			И ВТ_Периоды.Период >= НастройкиУчетаНДС.Период
	|ГДЕ
	|	НастройкиУчетаНДС.Организация В(&Организации)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Периоды.Период,
	|	ВТ_Периоды.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_НастройкиСистемыНалогообложения.Период КАК Период,
	|	ВТ_НастройкиСистемыНалогообложения.Организация КАК Организация,
	|	ЕСТЬNULL(НастройкиСистемыНалогообложения.ПлательщикНДФЛ, ЛОЖЬ) КАК ПлательщикНДФЛ,
	|	ЕСТЬNULL(НастройкиСистемыНалогообложения.ПрименяетсяУСНДоходыМинусРасходы, ЛОЖЬ) КАК ПрименяетсяУСНДоходыМинусРасходы,
	|	ЕСТЬNULL(НастройкиСистемыНалогообложения.ПрименяетсяУСНДоходы, ЛОЖЬ) КАК ПрименяетсяУСНДоходы,
	|	ЕСТЬNULL(НастройкиСистемыНалогообложения.ПрименяетсяУСНПатент, ЛОЖЬ) КАК ПрименяетсяУСНПатент,
	|	ЛОЖЬ КАК СложныйУчетНДС,
	|	НЕОПРЕДЕЛЕНО КАК СпособОценкиМПЗ,
	|	НЕОПРЕДЕЛЕНО КАК СпособОценкиТоваровВРознице,
	|	ЕСТЬNULL(НастройкиСистемыНалогообложения.ПрименяетсяОсобыйПорядокНалогообложения, ЛОЖЬ) КАК ПрименяетсяОсобыйПорядокНалогообложения,
	|	ЕСТЬNULL(НастройкиСистемыНалогообложения.ПлательщикНалогаНаПрибыль, ЛОЖЬ) КАК ПлательщикНалогаНаПрибыль
	|ПОМЕСТИТЬ ВТ_Настройки
	|ИЗ
	|	ВТ_НастройкиСистемыНалогообложения КАК ВТ_НастройкиСистемыНалогообложения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
	|		ПО ВТ_НастройкиСистемыНалогообложения.Организация = НастройкиСистемыНалогообложения.Организация
	|			И ВТ_НастройкиСистемыНалогообложения.ПериодБлижайший = НастройкиСистемыНалогообложения.Период
	|ГДЕ
	|	НастройкиСистемыНалогообложения.Организация В(&Организации)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_УчетнаяПолитика.Период,
	|	ВТ_УчетнаяПолитика.Организация,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЕСТЬNULL(УчетнаяПолитика.СпособОценкиМПЗ, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(УчетнаяПолитика.СпособОценкиТоваровВРознице, НЕОПРЕДЕЛЕНО),
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	ВТ_УчетнаяПолитика КАК ВТ_УчетнаяПолитика
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитика КАК УчетнаяПолитика
	|		ПО ВТ_УчетнаяПолитика.Организация = УчетнаяПолитика.Организация
	|			И ВТ_УчетнаяПолитика.ПериодБлижайший = УчетнаяПолитика.Период
	|ГДЕ
	|	УчетнаяПолитика.Организация В(&Организации)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_НастройкиУчетаНДС.Период,
	|	ВТ_НастройкиУчетаНДС.Организация,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЕСТЬNULL(НастройкиУчетаНДС.СложныйУчетНДС, ЛОЖЬ),
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	ВТ_НастройкиУчетаНДС КАК ВТ_НастройкиУчетаНДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаНДС КАК НастройкиУчетаНДС
	|	    ПО ВТ_НастройкиУчетаНДС.Организация = НастройкиУчетаНДС.Организация
	|			И ВТ_НастройкиУчетаНДС.ПериодБлижайший = НастройкиУчетаНДС.Период
	|ГДЕ
	|	НастройкиУчетаНДС.Организация В(&Организации)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Настройки.Период КАК Период,
	|	ВТ_Настройки.Организация КАК Организация,
	|	МАКСИМУМ(ВТ_Настройки.ПлательщикНДФЛ) КАК ПлательщикНДФЛ,
	|	МАКСИМУМ(ВТ_Настройки.ПрименяетсяУСНДоходыМинусРасходы) КАК ПрименяетсяУСНДоходыМинусРасходы,
	|	МАКСИМУМ(ВТ_Настройки.ПрименяетсяУСНДоходы) КАК ПрименяетсяУСНДоходы,
	|	МАКСИМУМ(ВТ_Настройки.ПрименяетсяУСНПатент) КАК ПрименяетсяУСНПатент,
	|	МАКСИМУМ(ВТ_Настройки.СложныйУчетНДС) КАК СложныйУчетНДС,
	|	МАКСИМУМ(ВТ_Настройки.СпособОценкиМПЗ) КАК СпособОценкиМПЗ,
	|	МАКСИМУМ(ВТ_Настройки.СпособОценкиТоваровВРознице) КАК СпособОценкиТоваровВРознице,
	|	МАКСИМУМ(ВТ_Настройки.ПрименяетсяОсобыйПорядокНалогообложения) КАК ПрименяетсяОсобыйПорядокНалогообложения,
	|	МАКСИМУМ(ВТ_Настройки.ПлательщикНалогаНаПрибыль) КАК ПлательщикНалогаНаПрибыль
	|ПОМЕСТИТЬ ВТ_НастройкиУчета
	|ИЗ
	|	ВТ_Настройки КАК ВТ_Настройки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Настройки.Период,
	|	ВТ_Настройки.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_НастройкиУчета.Организация,
	|	ВТ_НастройкиУчета.Период,
	|	ВТ_НастройкиУчета.ПрименяетсяОсобыйПорядокНалогообложения,
	|	ВТ_НастройкиУчета.ПлательщикНалогаНаПрибыль,
	|	ВТ_НастройкиУчета.ПрименяетсяУСНДоходы,
	|	ВТ_НастройкиУчета.ПрименяетсяУСНПатент,
	|	ВТ_НастройкиУчета.СпособОценкиМПЗ,
	|	ВТ_НастройкиУчета.СложныйУчетНДС,
	|	ВТ_НастройкиУчета.СпособОценкиТоваровВРознице,
	|	МИНИМУМ(ВТ_НастройкиУчетаСледующая.Период) КАК ПериодСледующий
	|ПОМЕСТИТЬ ВТ_ПериодыДействияУчетнойПолитики
	|ИЗ
	|	ВТ_НастройкиУчета КАК ВТ_НастройкиУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НастройкиУчета КАК ВТ_НастройкиУчетаСледующая
	|		ПО ВТ_НастройкиУчета.Организация = ВТ_НастройкиУчетаСледующая.Организация
	|			И ВТ_НастройкиУчета.Период < ВТ_НастройкиУчетаСледующая.Период
	|ГДЕ
	|	ВТ_НастройкиУчета.Организация В(&Организации)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_НастройкиУчета.Организация,
	|	ВТ_НастройкиУчета.Период,
	|	ВТ_НастройкиУчета.ПрименяетсяОсобыйПорядокНалогообложения,
	|	ВТ_НастройкиУчета.ПлательщикНалогаНаПрибыль,
	|	ВТ_НастройкиУчета.ПрименяетсяУСНДоходы,
	|	ВТ_НастройкиУчета.ПрименяетсяУСНПатент,
	|	ВТ_НастройкиУчета.СпособОценкиМПЗ,
	|	ВТ_НастройкиУчета.СложныйУчетНДС,
	|	ВТ_НастройкиУчета.СпособОценкиТоваровВРознице
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПериодыДействияУчетнойПолитики.Организация КАК Организация,
	|	ВТ_ПериодыДействияУчетнойПолитики.Период КАК ДатаНачала,
	|	ВТ_ПериодыДействияУчетнойПолитики.ПрименяетсяУСНДоходы КАК ПрименяетсяУСНДоходы,
	|	ВТ_ПериодыДействияУчетнойПолитики.ПрименяетсяУСНПатент КАК ПрименяетсяУСНПатент,
	|	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ЕСТЬNULL(ВТ_ПериодыДействияУчетнойПолитики.ПериодСледующий, ДАТАВРЕМЯ(2999, 12, 31)), ДЕНЬ), СЕКУНДА, -1) КАК ДатаОкончания
	|ИЗ
	|	ВТ_ПериодыДействияУчетнойПолитики КАК ВТ_ПериодыДействияУчетнойПолитики
	|ГДЕ
	|	(ВТ_ПериодыДействияУчетнойПолитики.ПлательщикНалогаНаПрибыль
	|			ИЛИ ВТ_ПериодыДействияУчетнойПолитики.ПрименяетсяУСНДоходы
	|			ИЛИ ВТ_ПериодыДействияУчетнойПолитики.ПрименяетсяОсобыйПорядокНалогообложения)
	|	И ВТ_ПериодыДействияУчетнойПолитики.СпособОценкиМПЗ = ЗНАЧЕНИЕ(Перечисление.СпособыОценки.ПоСредней)
	|	И ВТ_ПериодыДействияУчетнойПолитики.СложныйУчетНДС = ЛОЖЬ
	|	И ВТ_ПериодыДействияУчетнойПолитики.СпособОценкиТоваровВРознице = ЗНАЧЕНИЕ(Перечисление.СпособыОценкиТоваровВРознице.ПоСтоимостиПриобретения)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	ДатаНачала
	|ИТОГИ ПО
	|	Организация";

	Если НЕ ЗначениеЗаполнено(Организации) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "НастройкиСистемыНалогообложения.Организация В(&Организации)", "ИСТИНА");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "НастройкиУчетаНДС.Организация В(&Организации)",               "ИСТИНА");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "УчетнаяПолитика.Организация В(&Организации)",                 "ИСТИНА");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТ_НастройкиУчета.Организация В(&Организации)",               "ИСТИНА");
	КонецЕсли;

	// Объединим непрерывные периоды действия в один, даже если за это время были изменения в учетной политике из-за других настроек.
	ВыборкаОрганизаций = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизаций.Следующий() Цикл
	
		СтрокаТаблицы = Неопределено;
	
		Выборка = ВыборкаОрганизаций.Выбрать();
		Пока Выборка.Следующий() Цикл
		
			Если Выборка.ПрименяетсяУСНДоходы ИЛИ Выборка.ПрименяетсяУСНПатент Тогда
				// Для УСН и/или патента применение отложенного проведения возможно, 
				// если нет операций по платежным картам.
				Если ОбщегоНазначенияБПВызовСервераПовтИсп.ПрименяетсяОплатаПлатежнымиКартами(Выборка.Организация) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		
			Если СтрокаТаблицы = Неопределено Тогда
				СтрокаТаблицы = Результат.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
			Иначе
				Если СтрокаТаблицы.ДатаОкончания = Выборка.ДатаНачала - 1 Тогда
					// Продолжение предыдущего периода, продлим дату окончания.
					СтрокаТаблицы.ДатаОкончания = Выборка.ДатаОкончания;
				Иначе
					// Новый период.
					СтрокаТаблицы = Результат.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
				КонецЕсли;
			КонецЕсли;
		
		КонецЦикла;
	
	КонецЦикла;

	Возврат Результат;

КонецФункции

// Возвращает таблицу организаций, для которых не может использоваться отложенное проведение,
// с пояснением причины.
//
Функция ПричиныНепримененияОтложенногоПроведения() Экспорт

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Результат.Колонки.Добавить("Причина", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Результат.Колонки.Добавить("ЕстьПериодыИспользованияОтложенногоПроведения", Новый ОписаниеТипов("Булево"));

	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастройкиСистемыНалогообложения.Период,
	|	НастройкиСистемыНалогообложения.Организация
	|ПОМЕСТИТЬ ВТ_Периоды
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	НастройкиУчетаНДС.Период,
	|	НастройкиУчетаНДС.Организация
	|ИЗ
	|	РегистрСведений.НастройкиУчетаНДС КАК НастройкиУчетаНДС
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	УчетнаяПолитика.Период,
	|	УчетнаяПолитика.Организация
	|ИЗ
	|	РегистрСведений.УчетнаяПолитика КАК УчетнаяПолитика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_Периоды.Период,
	|	ВТ_Периоды.Организация,
	|	МАКСИМУМ(НастройкиСистемыНалогообложения.Период) КАК ПериодБлижайший
	|ПОМЕСТИТЬ ВТ_НастройкиСистемыНалогообложения
	|ИЗ
	|	ВТ_Периоды КАК ВТ_Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
	|		ПО ВТ_Периоды.Организация = НастройкиСистемыНалогообложения.Организация
	|			И ВТ_Периоды.Период >= НастройкиСистемыНалогообложения.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Периоды.Период,
	|	ВТ_Периоды.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_Периоды.Период,
	|	ВТ_Периоды.Организация,
	|	МАКСИМУМ(УчетнаяПолитика.Период) КАК ПериодБлижайший
	|ПОМЕСТИТЬ ВТ_УчетнаяПолитика
	|ИЗ
	|	ВТ_Периоды КАК ВТ_Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитика КАК УчетнаяПолитика
	|		ПО ВТ_Периоды.Организация = УчетнаяПолитика.Организация
	|			И ВТ_Периоды.Период >= УчетнаяПолитика.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Периоды.Период,
	|	ВТ_Периоды.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_Периоды.Период,
	|	ВТ_Периоды.Организация,
	|	МАКСИМУМ(НастройкиУчетаНДС.Период) КАК ПериодБлижайший
	|ПОМЕСТИТЬ ВТ_НастройкиУчетаНДС
	|ИЗ
	|	ВТ_Периоды КАК ВТ_Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаНДС КАК НастройкиУчетаНДС
	|		ПО ВТ_Периоды.Организация = НастройкиУчетаНДС.Организация
	|			И ВТ_Периоды.Период >= НастройкиУчетаНДС.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Периоды.Период,
	|	ВТ_Периоды.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_НастройкиСистемыНалогообложения.Период КАК Период,
	|	ВТ_НастройкиСистемыНалогообложения.Организация КАК Организация,
	|	ЕСТЬNULL(НастройкиСистемыНалогообложения.ПлательщикНДФЛ, ЛОЖЬ) КАК ПлательщикНДФЛ,
	|	ЕСТЬNULL(НастройкиСистемыНалогообложения.ПрименяетсяУСНДоходыМинусРасходы, ЛОЖЬ) КАК ПрименяетсяУСНДоходыМинусРасходы,
	|	ЕСТЬNULL(НастройкиСистемыНалогообложения.ПрименяетсяУСНДоходы, ЛОЖЬ) КАК ПрименяетсяУСНДоходы,
	|	ЕСТЬNULL(НастройкиСистемыНалогообложения.ПрименяетсяУСНПатент, ЛОЖЬ) КАК ПрименяетсяУСНПатент,
	|	ЛОЖЬ КАК СложныйУчетНДС,
	|	НЕОПРЕДЕЛЕНО КАК СпособОценкиМПЗ,
	|	НЕОПРЕДЕЛЕНО КАК СпособОценкиТоваровВРознице
	|ПОМЕСТИТЬ ВТ_Настройки
	|ИЗ
	|	ВТ_НастройкиСистемыНалогообложения КАК ВТ_НастройкиСистемыНалогообложения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
	|		ПО ВТ_НастройкиСистемыНалогообложения.Организация = НастройкиСистемыНалогообложения.Организация
	|			И ВТ_НастройкиСистемыНалогообложения.ПериодБлижайший = НастройкиСистемыНалогообложения.Период
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_УчетнаяПолитика.Период,
	|	ВТ_УчетнаяПолитика.Организация,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЕСТЬNULL(УчетнаяПолитика.СпособОценкиМПЗ, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(УчетнаяПолитика.СпособОценкиТоваровВРознице, НЕОПРЕДЕЛЕНО)
	|ИЗ
	|	ВТ_УчетнаяПолитика КАК ВТ_УчетнаяПолитика
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитика КАК УчетнаяПолитика
	|		ПО ВТ_УчетнаяПолитика.Организация = УчетнаяПолитика.Организация
	|			И ВТ_УчетнаяПолитика.ПериодБлижайший = УчетнаяПолитика.Период
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_НастройкиУчетаНДС.Период,
	|	ВТ_НастройкиУчетаНДС.Организация,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЕСТЬNULL(НастройкиУчетаНДС.СложныйУчетНДС, ЛОЖЬ),
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО
	|ИЗ
	|	ВТ_НастройкиУчетаНДС КАК ВТ_НастройкиУчетаНДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаНДС КАК НастройкиУчетаНДС
	|		ПО ВТ_НастройкиУчетаНДС.Организация = НастройкиУчетаНДС.Организация
	|			И ВТ_НастройкиУчетаНДС.ПериодБлижайший = НастройкиУчетаНДС.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Настройки.Период,
	|	ВТ_Настройки.Организация,
	|	ВТ_Настройки.Организация.Наименование КАК ОрганизацияНаименование,
	|	МАКСИМУМ(ВТ_Настройки.ПлательщикНДФЛ) КАК ПлательщикНДФЛ,
	|	МАКСИМУМ(ВТ_Настройки.ПрименяетсяУСНДоходыМинусРасходы) КАК ПрименяетсяУСНДоходыМинусРасходы,
	|	МАКСИМУМ(ВТ_Настройки.ПрименяетсяУСНДоходы) КАК ПрименяетсяУСНДоходы,
	|	МАКСИМУМ(ВТ_Настройки.ПрименяетсяУСНПатент) КАК ПрименяетсяУСНПатент,
	|	МАКСИМУМ(ВТ_Настройки.СложныйУчетНДС) КАК СложныйУчетНДС,
	|	МАКСИМУМ(ВТ_Настройки.СпособОценкиМПЗ) КАК СпособОценкиМПЗ,
	|	МАКСИМУМ(ВТ_Настройки.СпособОценкиТоваровВРознице) КАК СпособОценкиТоваровВРознице
	|ИЗ
	|	ВТ_Настройки КАК ВТ_Настройки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Настройки.Период,
	|	ВТ_Настройки.Организация
	|УПОРЯДОЧИТЬ ПО
	|	ОрганизацияНаименование,
	|	Период
	|
	|ИТОГИ ПО
	|	Организация";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
	
	ТаблицаПериоды = Новый ТаблицаЗначений;
	ТаблицаПериоды.Колонки.Добавить("ДатаНачала",                            ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаПериоды.Колонки.Добавить("ДатаОкончания",                         ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаПериоды.Колонки.Добавить("ПлательщикНДФЛ",                        ОписаниеТипаБулево);
	ТаблицаПериоды.Колонки.Добавить("ПрименяетсяУСНДоходыМинусРасходы",      ОписаниеТипаБулево);
	ТаблицаПериоды.Колонки.Добавить("СпособОценкиМПЗФИФО",                   ОписаниеТипаБулево);
	ТаблицаПериоды.Колонки.Добавить("СложныйУчетНДС",                        ОписаниеТипаБулево);
	ТаблицаПериоды.Колонки.Добавить("УчетВПродажныхЦенах",                   ОписаниеТипаБулево);
	ТаблицаПериоды.Колонки.Добавить("ПрименяетсяОплатаПлатежнымиКартамиУСН", ОписаниеТипаБулево);
	
	МассивСтрок = Новый Массив;
	
	ВыборкаПоОрганизации = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоОрганизации.Следующий() Цикл
	
		// Инициализация переменных для новой организации.
		ТаблицаПериоды.Очистить();
		СтрокаТаблицы = Неопределено;
		ЕстьПериодыИспользованияОтложенногоПроведения = Ложь;
		
		Выборка = ВыборкаПоОрганизации.Выбрать();
		Пока Выборка.Следующий() Цикл
		
			СпособОценкиМПЗФИФО = Выборка.СпособОценкиМПЗ = Перечисления.СпособыОценки.ФИФО;
			УчетВПродажныхЦенах = Выборка.СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости;
			
			ПрименяетсяОплатаПлатежнымиКартамиУСН = Ложь;
			Если Выборка.ПрименяетсяУСНДоходы ИЛИ Выборка.ПрименяетсяУСНПатент Тогда
				// Для УСН и/или патента отложенное проведение может применяться, если нет операций по оплате платежными картами.
				ПрименяетсяОплатаПлатежнымиКартамиУСН = ОбщегоНазначенияБПВызовСервераПовтИсп.ПрименяетсяОплатаПлатежнымиКартами(
					Выборка.Организация);
			КонецЕсли;
		
			Если Выборка.ПлательщикНДФЛ
				ИЛИ Выборка.ПрименяетсяУСНДоходыМинусРасходы
				ИЛИ СпособОценкиМПЗФИФО
				ИЛИ Выборка.СложныйУчетНДС
				ИЛИ УчетВПродажныхЦенах
				ИЛИ ПрименяетсяОплатаПлатежнымиКартамиУСН Тогда
				
				// Если предыдущего периода не было, то начинаем новый.
				Если СтрокаТаблицы = Неопределено Тогда
					СтрокаТаблицы = ТаблицаПериоды.Добавить();
					СтрокаТаблицы.ДатаНачала = Выборка.Период;
				КонецЕсли;
				
				// В разных записях учетной политки настройки могут отличаться, 
				// складываем их по ИЛИ, чтобы вывести соответствующую причину, 
				// если хотя бы в одной из записей установлена блокирующая настройка.
				СтрокаТаблицы.ПлательщикНДФЛ = СтрокаТаблицы.ПлательщикНДФЛ
					ИЛИ Выборка.ПлательщикНДФЛ;
					
				СтрокаТаблицы.ПрименяетсяУСНДоходыМинусРасходы = СтрокаТаблицы.ПрименяетсяУСНДоходыМинусРасходы
					ИЛИ Выборка.ПрименяетсяУСНДоходыМинусРасходы;
					
				Если НЕ Выборка.ПлательщикНДФЛ И НЕ Выборка.ПрименяетсяУСНДоходыМинусРасходы Тогда
					// Если применение ФИФО не связано с применяемой системой налогообложения,
					// то выводим его.
					СтрокаТаблицы.СпособОценкиМПЗФИФО = СтрокаТаблицы.СпособОценкиМПЗФИФО
						ИЛИ СпособОценкиМПЗФИФО;
				КонецЕсли;
				
				СтрокаТаблицы.СложныйУчетНДС = СтрокаТаблицы.СложныйУчетНДС
					ИЛИ Выборка.СложныйУчетНДС;

				СтрокаТаблицы.УчетВПродажныхЦенах = СтрокаТаблицы.УчетВПродажныхЦенах
					ИЛИ УчетВПродажныхЦенах;

				СтрокаТаблицы.ПрименяетсяОплатаПлатежнымиКартамиУСН = СтрокаТаблицы.ПрименяетсяОплатаПлатежнымиКартамиУСН
					ИЛИ ПрименяетсяОплатаПлатежнымиКартамиУСН;
				
			Иначе
			
				// Отложенное проведение можно использовать.
				ЕстьПериодыИспользованияОтложенногоПроведения = Истина;
			
				// Закроем предыдущий период, если он был.
				Если СтрокаТаблицы <> Неопределено Тогда
					СтрокаТаблицы.ДатаОкончания = Выборка.Период - 1;
				КонецЕсли;
				СтрокаТаблицы = Неопределено;
			
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТаблицаПериоды.Количество() > 0 Тогда
			
			МассивСтрок.Очистить();
			ДатаОкончанияДействия = '0001-01-01';
		
			Для Каждого СтрокаТаблицы Из ТаблицаПериоды Цикл
		
				// Если за все время ни разу не было периода,
				// в котором можно было бы использовать отложенное проведение,
				// то даты не показываем совсем.
				
				ТекстОтступ = "";
				Если ЕстьПериодыИспользованияОтложенногоПроведения Тогда
					Если ЗначениеЗаполнено(СтрокаТаблицы.ДатаОкончания) Тогда
						ПрошедшееВремя = Истина;
						ТекстДаты = СтрШаблон(НСтр("ru = 'С %1 по %2'"), 
							Формат(СтрокаТаблицы.ДатаНачала, 	"ДЛФ=Д"),
							Формат(СтрокаТаблицы.ДатаОкончания, "ДЛФ=Д"));
					Иначе
						ТекстДаты = СтрШаблон(НСтр("ru = 'С %1'"), Формат(СтрокаТаблицы.ДатаНачала, "ДЛФ=Д"));
					КонецЕсли;
					МассивСтрок.Добавить(ТекстДаты);
				КонецЕсли;

				Если СтрокаТаблицы.ПлательщикНДФЛ Тогда
					МассивСтрок.Добавить(ТекстОтступ + НСтр("ru = 'ИП применяет общую систему налогообложения'"));
				КонецЕсли;
				
				Если СтрокаТаблицы.ПрименяетсяУСНДоходыМинусРасходы Тогда
					МассивСтрок.Добавить(ТекстОтступ + НСтр("ru = 'Применяет УСН (доходы минус расходы)'"));
				КонецЕсли;
				
				Если СтрокаТаблицы.СпособОценкиМПЗФИФО Тогда
					МассивСтрок.Добавить(ТекстОтступ + НСтр("ru = 'Способ оценки материально-производственных запасов по ФИФО'"));
				КонецЕсли;

				Если СтрокаТаблицы.СложныйУчетНДС Тогда
					МассивСтрок.Добавить(ТекстОтступ + НСтр("ru = 'Ведется раздельный учет входящего НДС'"));
				КонецЕсли;
				
				Если СтрокаТаблицы.УчетВПродажныхЦенах Тогда
					МассивСтрок.Добавить(ТекстОтступ + НСтр("ru = 'Способ оценки товаров в рознице по продажной стоимости'"));
				КонецЕсли;
				
				Если СтрокаТаблицы.ПрименяетсяОплатаПлатежнымиКартамиУСН Тогда
					МассивСтрок.Добавить(ТекстОтступ + НСтр("ru = 'Применяет оплату платежными картами при УСН и/или патенте'"));
				КонецЕсли;
				
			КонецЦикла;
			
			// Сохраняем описание причин в таблицу.
			НоваяСтрока = Результат.Добавить();
			НоваяСтрока.Организация = ВыборкаПоОрганизации.Организация;
			НоваяСтрока.Причина = СтрСоединить(МассивСтрок, Символы.ПС);
			НоваяСтрока.ЕстьПериодыИспользованияОтложенногоПроведения = ЕстьПериодыИспользованияОтложенногоПроведения;
		
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Функция КлючФоновогоЗаданияПереключениеОтложенногоПроведения() Экспорт

	Возврат "ПереключениеОтложенногоПроведения";

КонецФункции

// Запускает фоновое задание по переключению отложенного проведения для указанных организаций.
//
// Параметры:
//	ВключитьДляОрганизаций 	- Неопределено, Массив - Организации, которые сейчас используют 
//							отложенное проведение.
//							Если не задано, то не включается ни для одной.
//	ОтключитьДляОрганизаций	- Неопределено, Массив - Организации, которые должны использовать 
//							отложенное проведение после переключения.
//							Если не задано, то не отключается ни для одной.
//
// Возвращаемое значение:
//	Неопределено или Структура с ключами:
//		* НаименованиеФоновогоЗадания - Строка
//		* ДлительнаяОперация - Структура - см. ДлительныеОперации.ВыполнитьВФоне().
//
//
Функция НачатьПереключениеОтложенногоПроведения(ВключитьДляОрганизаций, ОтключитьДляОрганизаций, ИдентификаторФормы) Экспорт

	Если НЕ ЗначениеЗаполнено(ВключитьДляОрганизаций)
		И НЕ ЗначениеЗаполнено(ОтключитьДляОрганизаций) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Результат = Новый Структура();
	Результат.Вставить("ДлительнаяОперация");
	Результат.Вставить("НаименованиеФоновогоЗадания", "");

	ПараметрыЗадания = Новый Структура();
	
	НаименованиеЗадания = "";

	Если ЗначениеЗаполнено(ВключитьДляОрганизаций) Тогда
		ПараметрыЗадания.Вставить("ВключитьДляОрганизаций", ВключитьДляОрганизаций);

		НаименованиеЗадания = СтрШаблон(
			НСтр("ru = 'Включение отложенного проведения по %1'"),
			СтрСоединить(ВключитьДляОрганизаций, ", "));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтключитьДляОрганизаций) Тогда
		ПараметрыЗадания.Вставить("ОтключитьДляОрганизаций", ОтключитьДляОрганизаций);
		
		НаименованиеЗадания = НаименованиеЗадания + ?(ПустаяСтрока(НаименованиеЗадания), "", ". ") +
			СтрШаблон(НСтр("ru = 'Отключение отложенного проведения по %1'"),
					  СтрСоединить(ОтключитьДляОрганизаций, ", "));
	КонецЕсли;

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.КлючФоновогоЗадания 		= КлючФоновогоЗаданияПереключениеОтложенногоПроведения();
		
	Результат.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	Результат.ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
				"ПроведениеСервер.ПереключитьОтложенноеПроведениеВФоне",
				ПараметрыЗадания,
				ПараметрыВыполнения);
				
	Возврат Результат;

КонецФункции

// Выполняет инициализацию объектов базы данных, в зависимости от использования отложенного проведения.
//
// Параметры:
//	Параметры - Структура - Может содержать ключи:
//		* ВключитьДляОрганизаций - СправочникСсылка.Организации, Массив - Организация или массив организаций, 
//			по которой(-ым) включить отложенное проведение.
//			Необязательный ключ, если отсутствует, то не включает ни для одной организации.
//			Если содержит пустое значение, то включить для всех, для которых доступно.
//		* ОтключитьДляОрганизаций - СправочникСсылка.Организации, Массив - Организация или массив организаций, 
//			по которой(-ым) отключить отложенное проведение.
//			Необязательный ключ, если отсутствует, то не отключает ни для одной организации.
//			Если содержит пустое значение, то отключить для всех.
//
Процедура ПереключитьОтложенноеПроведениеВФоне(Параметры, АдресХранилища) Экспорт

	РезультатВыполнения = Новый Структура();
	РезультатВыполнения.Вставить("Успешно", Ложь);

	Отказ = Ложь;
	
	ЕстьВключить	= Ложь;
	ЕстьОтключить	= Ложь;
	ВключитьВсе		= Ложь;
	ОтключитьВсе	= Ложь;
	УказаныОрганизацииДляПереключения = Ложь;
	
	ВключитьДляОрганизаций	= Неопределено;
	ОтключитьДляОрганизаций	= Неопределено;
	
	Если Параметры.Свойство("ВключитьДляОрганизаций") Тогда
		ЕстьВключить = Истина;
		УказаныОрганизацииДляПереключения = Истина;
		ВключитьДляОрганизаций = Параметры.ВключитьДляОрганизаций;
		ВключитьВсе = НЕ ЗначениеЗаполнено(ВключитьДляОрганизаций);
	КонецЕсли;
	
	Если Параметры.Свойство("ОтключитьДляОрганизаций") Тогда
		ЕстьОтключить = Истина;
		УказаныОрганизацииДляПереключения = Истина;
		ОтключитьДляОрганизаций = Параметры.ОтключитьДляОрганизаций;
		ОтключитьВсе = НЕ ЗначениеЗаполнено(ОтключитьДляОрганизаций);
	КонецЕсли;
	
	Если НЕ УказаныОрганизацииДляПереключения ИЛИ (ВключитьВсе И ОтключитьВсе) Тогда
		// Не можем одновременно и включить и выключить.
		ВызватьИсключение НСтр("ru = 'ПроведениеСервер.ПереключитьОтложенноеПроведениеВФоне(): 
			|некорректно заданы организации для переключения режима отложенного проведения'");
	КонецЕсли;

	НачатьТранзакцию();

	Попытка
	
		Если ЕстьВключить Тогда
			ВключитьОтложенноеПроведение(ВключитьДляОрганизаций, Отказ);
		КонецЕсли;
		
		Если ЕстьОтключить Тогда
			ОтключитьОтложенноеПроведение(ОтключитьДляОрганизаций, Отказ);
		КонецЕсли;
		
		Если Отказ Тогда
			ОтменитьТранзакцию();
		Иначе
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	Исключение
	
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОтменитьТранзакцию();
		Отказ = Истина;
		
		КраткоеПредставление = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		ПодробноеПредставление = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
		ШаблонОшибки = НСтр("ru = 'Ошибка при переключении отложенного проведения: %1.'");
		
		КраткийТекстОшибки = СтрШаблон(
			ШаблонОшибки,
			КраткоеПредставление);

		ПодробныйТекстОшибки = СтрШаблон(
			ШаблонОшибки,
			ПодробноеПредставление);
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткийТекстОшибки);
							
		ЗаписьЖурналаРегистрации(
			УчетВзаиморасчетовОтложенноеПроведение.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ПодробныйТекстОшибки);
	
	КонецПопытки;

	РезультатВыполнения.Успешно = НЕ Отказ;
	
	ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);

КонецПроцедуры

Процедура ВключитьОтложенноеПроведение(Организации, Отказ)

	УстановитьПривилегированныйРежим(Истина);

	УчетВзаиморасчетовОтложенноеПроведение.ЗарегистрироватьОтложенныеРасчетыСКонтрагентамиПриВключении(Организации, Отказ);
	
	Если НЕ Отказ Тогда
		Если НЕ Константы.ИспользоватьОтложенноеПроведение.Получить() Тогда
			Константы.ИспользоватьОтложенноеПроведение.Установить(Истина);
			// Одновременно устанавливаем константу проверки актуальности 
			// для отображения в отчетах кнопки "Актуализировать" отложенные расчеты.
			Константы.ПроверятьАктуальностьДанныхУчета.Установить(Истина);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ОтключитьОтложенноеПроведение(Организации, Отказ)

	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организации", Организации);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасчетыСКонтрагентамиОтложенноеПроведение.Организация,
	|	МИНИМУМ(ВЫБОР
	|				КОГДА РасчетыСКонтрагентамиОтложенноеПроведение.СостояниеРасчетов В (ЗНАЧЕНИЕ(Перечисление.СостоянияОтложенныхРасчетов.КВыполнению), ЗНАЧЕНИЕ(Перечисление.СостоянияОтложенныхРасчетов.КИсключениюИзРасчетов))
	|					ТОГДА РасчетыСКонтрагентамиОтложенноеПроведение.Дата
	|				ИНАЧЕ ДАТАВРЕМЯ(2999, 12, 31)
	|		КОНЕЦ) КАК Дата
	|ИЗ
	|	РегистрСведений.РасчетыСКонтрагентамиОтложенноеПроведение КАК РасчетыСКонтрагентамиОтложенноеПроведение
	|ГДЕ
	|	РасчетыСКонтрагентамиОтложенноеПроведение.Организация В(&Организации)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСКонтрагентамиОтложенноеПроведение.Организация";
	
	Если НЕ ЗначениеЗаполнено(Организации) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РасчетыСКонтрагентамиОтложенноеПроведение.Организация В(&Организации)", "ИСТИНА");
	КонецЕсли;

	НаборЗаписей = РегистрыСведений.РасчетыСКонтрагентамиОтложенноеПроведение.СоздатьНаборЗаписей();

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		МоментПервогоДокумента = РаботаСПоследовательностями.МоментВремениПервогоДокументаВПоследовательности(
			Выборка.Организация,
			Выборка.Дата,
			Ложь);
		Если МоментПервогоДокумента <> Неопределено Тогда
			// Переносим момент нарушения последовательности на найденный документ.
			РаботаСПоследовательностями.СброситьСостояниеПоследовательностиДокумента(
				МоментПервогоДокумента.Ссылка,
				МоментПервогоДокумента.Дата,
				Выборка.Организация);
		КонецЕсли;

		// Очистим регистр сведений РасчетыСКонтрагентамиОтложенноеПроведение.
		НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
		НаборЗаписей.Записать();

	КонецЦикла;
	
	// Сбросим константу, если выполняется отключение для всей базы в целом или в базе только одна организация.
	НадоСброситьКонстанту = НЕ ЗначениеЗаполнено(Организации) 
		ИЛИ Справочники.Организации.КоличествоОрганизаций() = 1;
	
	Если НадоСброситьКонстанту И Константы.ИспользоватьОтложенноеПроведение.Получить() Тогда
		Константы.ИспользоватьОтложенноеПроведение.Установить(Ложь);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработкаОшибокПриПроведении

// Возвращает таблицу значений для хранения сообщений, выдаваемых в процессе проведения.
//
Функция НовыеСообщенияПользователю() Экспорт

	ОписаниеТиповЧисло = ОбщегоНазначения.ОписаниеТипаЧисло(1);

	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("Организация",  Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Результат.Колонки.Добавить("КлючДанных");  // Ссылка на объект.
	Результат.Колонки.Добавить("Дата");        // Дата, к которой относятся данные объекта. Используется для сортировки списка сообщений.
	Результат.Колонки.Добавить("Сообщение");   // СообщениеПользователю
	Результат.Колонки.Добавить("ТипСообщения", ОписаниеТиповЧисло); // 0 - ошибка, 1 - информация.
	
	Возврат Результат;

КонецФункции

// Возвращает пустую структуру с параметрами формирования отчета об ошибках.
//
// Параметры:
//	ВариантОтчета - Строка - "Перепроведение", "АктуализацияРасчетовСКонтрагентами"
//	Сообщения - ТаблицаЗначений - Результат функции НовыеСообщенияПользователю()
//
// Возвращаемое значение:
//	Структура - Содержит параметры формирования отчета:
//		* ВариантОтчета - Строка - "Перепроведение", "АктуализацияРасчетовСКонтрагентами".
//		* Сообщения - ТаблицаЗначений - Результат функции НовыеСообщенияПользователю().
//		* ДатаНачала - Дата - Начало периода расчета.
//		* ДатаОкончания - Дата - Окончание периода расчета.
//		* ПроведеноДокументов - Число - Количество перепроведенных документов.
//		* НеУдалосьПровести - Число - Количество документов с ошибками.
//		* АктуализированоДоговоров - Число - Количество договоров, расчеты по которым актуализированы.
//		* НеУдалосьАктуализировать - Число - Количество договоров с ошибками в расчетах.
// 
Функция НовыеПараметрыОтчетаССообщениямиПользователю(ВариантОтчета, Сообщения) Экспорт

	Если ВариантОтчета <> "Перепроведение"
		И ВариантОтчета <> "АктуализацияРасчетовСКонтрагентами" Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Не поддерживаемый вариант отчета %1'"), ВариантОтчета);
	КонецЕсли;

	Результат = Новый Структура();
	
	Результат.Вставить("ВариантОтчета", 	ВариантОтчета);
	Результат.Вставить("Сообщения", 		Сообщения);
	Результат.Вставить("ДополнительноеОписание", "");
	Результат.Вставить("ДатаНачала",		'0001-01-01');
	Результат.Вставить("ДатаОкончания",		'0001-01-01');
	Результат.Вставить("ПроведеноДокументов",      0);
	Результат.Вставить("НеУдалосьПровести",        0);
	Результат.Вставить("АктуализированоДоговоров", 0);
	Результат.Вставить("НеУдалосьАктуализировать", 0);
	
	Возврат Результат;

КонецФункции

// Формирует табличный документ с информацией о сообщениях при проведении.
//
// Параметры:
//	ПараметрыОтчета - Структура - содержит параметры вывода сообщений, см.НовыеПараметрыОтчетаССообщениямиПользователю() 
//
// Возвращаемое значение:
//	Табличный документ - отчет об ошибках проведения.
//
Функция ВывестиСообщенияПользователю(ПараметрыОтчета) Экспорт

	// Выводим в отчет в иерархическом виде:
	//	- организация
	//		- группа сообщений (ошибки, информация) - если есть несколько типов сообщений
	//			- документ
	//  			- сообщения по этому документу
	
	ПараметрыОтчета.Сообщения.Сортировать("Организация, ТипСообщения, Дата, КлючДанных", Новый СравнениеЗначений());
	
	КоличествоСообщений 		     = ПараметрыОтчета.Сообщения.Количество();
	ЕстьСообщенияРазныхТипов 	     = Ложь;
	ЕстьРазныеОрганизации 		     = Ложь;
	ИспользуетсяОтложенноеПроведение = (ПараметрыОтчета.АктуализированоДоговоров > 0 Или ПараметрыОтчета.НеУдалосьАктуализировать > 0);

	Если КоличествоСообщений > 0 Тогда
		ПерваяОрганизация 			= ПараметрыОтчета.Сообщения[0].Организация;
		ЕстьСообщенияРазныхТипов 	= ПараметрыОтчета.Сообщения[КоличествоСообщений - 1].ТипСообщения <> 0;
		ЕстьРазныеОрганизации 		= ПараметрыОтчета.Сообщения[КоличествоСообщений - 1].Организация <> ПерваяОрганизация;
	КонецЕсли;

	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ОписаниеОшибокПроведения");
	
	Если ПараметрыОтчета.ВариантОтчета = "АктуализацияРасчетовСКонтрагентами" Тогда
		ИмяОбластиШапки = "ШапкаВосстановлениеРасчетов";
	ИначеЕсли ИспользуетсяОтложенноеПроведение Тогда
		ИмяОбластиШапки = "ШапкаОтложенноеПерепроведение";
	Иначе
		ИмяОбластиШапки = "ШапкаПерепроведение";
	КонецЕсли;
	ОбластьШапка             = Макет.ПолучитьОбласть(ИмяОбластиШапки);
	ОбластьГруппаОрганизация = Макет.ПолучитьОбласть("ГруппаОрганизация");
	ОбластьГруппаОшибки 	 = Макет.ПолучитьОбласть("ГруппаОшибки");
	ОбластьГруппаИнформация  = Макет.ПолучитьОбласть("ГруппаИнформация");
	ОбластьСсылка 	         = Макет.ПолучитьОбласть("Ссылка");
	ОбластьТекст2 	         = Макет.ПолучитьОбласть("ТекстВторогоУровня");

	Если НЕ ЕстьРазныеОрганизации Тогда
		// Если организация одна, выводим ее в шапке.
		ОбластьШапка.Параметры.Организация = ПерваяОрганизация;
	КонецЕсли;
	
	// Период отчета.
	Если ЗначениеЗаполнено(ПараметрыОтчета.ДатаНачала) И ЗначениеЗаполнено(ПараметрыОтчета.ДатаОкончания) Тогда
		ОбластьШапка.Параметры.Период = ПредставлениеПериода(ПараметрыОтчета.ДатаНачала, ПараметрыОтчета.ДатаОкончания);
	
	ИначеЕсли ЗначениеЗаполнено(ПараметрыОтчета.ДатаНачала) Тогда
		ОбластьШапка.Параметры.Период = СтрШаблон(
			НСтр("ru = '%1 - ...'"), 
			Формат(ПараметрыОтчета.ДатаНачала, 
					?(ПараметрыОтчета.ДатаНачала = НачалоДня(ПараметрыОтчета.ДатаНачала), "ДЛФ=Д", "ДЛФ=ДВ")));

	ИначеЕсли ЗначениеЗаполнено(ПараметрыОтчета.ДатаОкончания) Тогда
		ОбластьШапка.Параметры.Период = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '... - %1'"), 
			Формат(ПараметрыОтчета.ДатаОкончания, 
					?(ПараметрыОтчета.ДатаОкончания = НачалоДня(ПараметрыОтчета.ДатаОкончания) 
						ИЛИ ПараметрыОтчета.ДатаОкончания = КонецДня(ПараметрыОтчета.ДатаОкончания), 
					"ДЛФ=Д", 
					"ДЛФ=ДВ")));
	КонецЕсли;
	
	ОбластьШапка.Параметры.ДополнительноеОписание = ПараметрыОтчета.ДополнительноеОписание;

	Если ПараметрыОтчета.ВариантОтчета = "АктуализацияРасчетовСКонтрагентами"
	 Или ИспользуетсяОтложенноеПроведение Тогда
		ОбластьШапка.Параметры.АктуализированоДоговоров = ПараметрыОтчета.АктуализированоДоговоров;
		ОбластьШапка.Параметры.НеУдалосьАктуализировать = ПараметрыОтчета.НеУдалосьАктуализировать;
	КонецЕсли;
	Если ПараметрыОтчета.ВариантОтчета = "Перепроведение" Тогда
		ОбластьШапка.Параметры.ПроведеноДокументов 	    = ПараметрыОтчета.ПроведеноДокументов;
		ОбластьШапка.Параметры.НеУдалосьПровести 	    = ПараметрыОтчета.НеУдалосьПровести;
	КонецЕсли;

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Отчет_об_ошибках_проведения_документов";
	
	ТабДокумент.Вывести(ОбластьШапка);
	
	ТекущийКлючДанных 	= Неопределено;
	ТекущаяОрганизация 	= Неопределено;

	Сч = 0;
	
	Пока Сч < КоличествоСообщений Цикл
	
		СтрокаТаблицы = ПараметрыОтчета.Сообщения[Сч];
		
		Если ЕстьРазныеОрганизации Тогда
			Если СтрокаТаблицы.Организация <> ТекущаяОрганизация Тогда
				Если Сч > 0 Тогда
					// Закроем группу по предыдущей организации.
					ТабДокумент.ЗакончитьГруппуСтрок();
				КонецЕсли;
				// Начинаем группу по новой организации.
				ОбластьГруппаОрганизация.Параметры.Организация = СтрокаТаблицы.Организация;
				ТабДокумент.Вывести(ОбластьГруппаОрганизация);
				ТабДокумент.НачатьГруппуСтрок();
			КонецЕсли;
		КонецЕсли;
		
		ТекущаяОрганизация	= СтрокаТаблицы.Организация;
		ТекущийТипСообщения = СтрокаТаблицы.ТипСообщения;
		
		Если ЕстьСообщенияРазныхТипов Тогда
			Если ТекущийТипСообщения = 0 Тогда
				// Ошибка
				ТабДокумент.Вывести(ОбластьГруппаОшибки);
			Иначе
				// Информация
				ТабДокумент.Вывести(ОбластьГруппаИнформация);
			КонецЕсли;
		
			ТабДокумент.НачатьГруппуСтрок();
		КонецЕсли;
		
		НомерПП = 0;
		
		Пока Сч < КоличествоСообщений
			И ТекущаяОрганизация 	= ПараметрыОтчета.Сообщения[Сч].Организация
			И ТекущийТипСообщения 	= ПараметрыОтчета.Сообщения[Сч].ТипСообщения Цикл
		
			НомерПП = НомерПП + 1;
			
			СтрокаТаблицы = ПараметрыОтчета.Сообщения[Сч];
			
			ТекущийКлючДанных = СтрокаТаблицы.КлючДанных;
		
		    // Выводим документ и все его сообщения.
		    ОбластьСсылка.Параметры.НомерПП			= НомерПП;
	    	ОбластьСсылка.Параметры.Ссылка 			= СтрокаТаблицы.КлючДанных;
		    ОбластьСсылка.Параметры.Представление 	= Строка(СтрокаТаблицы.КлючДанных);
		    ТабДокумент.Вывести(ОбластьСсылка);
		    ТабДокумент.НачатьГруппуСтрок();
			
		    ВложенныйНомерПП = 0;
		    
		    // Из-за того сообщения могут приходит из нескольких расчетов, они могут повторяться для одного и того же объекта (КлючДанных).
		    // Такие сообщения выводим только один раз.
		    ТекстСообщения = "";
		    
		    Пока Сч < КоличествоСообщений
		    	И ТекущийТипСообщения = ПараметрыОтчета.Сообщения[Сч].ТипСообщения
		    	И ТекущийКлючДанных = ПараметрыОтчета.Сообщения[Сч].КлючДанных Цикл
		    
		    	СтрокаТаблицы = ПараметрыОтчета.Сообщения[Сч];
		    	
		    	Если СтрокаТаблицы.Сообщение.Текст = ТекстСообщения Тогда
		    		// Такое сообщение уже было выведено ранее, второй раз не повторяем.
		    		Сч = Сч + 1;
		    		Продолжить;
		    	КонецЕсли;
		    	ТекстСообщения = СтрокаТаблицы.Сообщение.Текст;

		    	ВложенныйНомерПП = ВложенныйНомерПП + 1;
		    	
	    		// Если документ сообщил о нескольких ошибках, то будем выводить для них субномера.
		    	Если ВложенныйНомерПП = 1 
		    		И (Сч = КоличествоСообщений - 1  // Это последнее сообщение в таблице или следующее сообщение относится к другом типу/документу.
		    				ИЛИ ПараметрыОтчета.Сообщения[Сч + 1].КлючДанных <> ТекущийКлючДанных
		    				ИЛИ ПараметрыОтчета.Сообщения[Сч + 1].ТипСообщения <> ТекущийТипСообщения)  Тогда
		    		ОбластьТекст2.Параметры.НомерПП = "";
		    	Иначе
		    		ОбластьТекст2.Параметры.НомерПП	= Формат(НомерПП, "ЧГ=") + "." + Формат(ВложенныйНомерПП, "ЧГ=");
		    	КонецЕсли;
		    	ОбластьТекст2.Параметры.Текст 				= СтрокаТаблицы.Сообщение.Текст;
		    	ОбластьТекст2.Параметры.Расшифровка 		= СтрокаТаблицы.Сообщение;
		    	
		    	ТабДокумент.Вывести(ОбластьТекст2);
		    	
		    	Сч = Сч + 1;
		    КонецЦикла; // по сообщениям одного документа
		    
		    ТабДокумент.ЗакончитьГруппуСтрок();
		
		КонецЦикла; // по документам
		
		Если ЕстьСообщенияРазныхТипов Тогда
	    	ТабДокумент.ЗакончитьГруппуСтрок();
	    КонецЕсли;
		
	КонецЦикла; // по типам сообщений
	
	Если ЕстьРазныеОрганизации И КоличествоСообщений > 0 Тогда
		// Закроем группу по последней организации.
		ТабДокумент.ЗакончитьГруппуСтрок();
	КонецЕсли;
	
	Возврат ТабДокумент;

КонецФункции

// Добавляет новое сообщение в общую таблицу сообщений.
//
// Параметры:
//	Сообщения - ТаблицаЗначений - см. НовыеСообщенияПользователю().
//	Организация - СправочникСсылка.Организации - Организация, для которой зарегистрировать сообщение.
//	НовоеСообщение - СообщениеПользователю - Добавляемое сообщение.
//	СсылкаНаОбъект - Произвольный - Ссылка на объект, с которым должно быть связано сообщение.
//	Дата - Дата - Дата, к которой относится сообщение пользователю. Используется для сортировки списка сообщений в хронологическом порядке.
//	ЭтоОшибка - Булево - Истина, если сообщение является сообщение об ошибке.
//
Процедура ДобавитьСообщениеПользователю(Сообщения, Организация, НовоеСообщение, СсылкаНаОбъект, Дата, ЭтоОшибка) Экспорт

	СтрокаТаблицы 					= Сообщения.Добавить();
	СтрокаТаблицы.Организация		= Организация;
	Если НЕ ЗначениеЗаполнено(НовоеСообщение.КлючДанных) Тогда
		СтрокаТаблицы.КлючДанных 	= СсылкаНаОбъект;
		НовоеСообщение.КлючДанных	= СсылкаНаОбъект;
	Иначе
		СтрокаТаблицы.КлючДанных 	= НовоеСообщение.КлючДанных;
	КонецЕсли;
	СтрокаТаблицы.Дата				= Дата;
	СтрокаТаблицы.Сообщение 		= НовоеСообщение;	
	СтрокаТаблицы.ТипСообщения 		= ?(ЭтоОшибка, 0, 1);

КонецПроцедуры

// Добавляет все сгенерированные сообщения пользователю при проведении объекта в общую таблицу сообщений.
//
// Параметры:
//	Сообщения - ТаблицаЗначений - см. НовыеСообщенияПользователю()
//	Организация - СправочникСсылка.Организации - Организация, к которой относится документ.
//	ТекстПричины - Строка - Строковое описание причины возникновения сообщения.
//	СсылкаНаОбъект - Произвольный - Ссылка на объект, с которым связано сообщение.
//	ЭтоОшибка - Булево - Истина, если сообщение является сообщением об ошибке.
//	АвтоматическиФормироватьТекстСообщения - Булево - Если Истина, то в текст сообщения будет включена ссылка на объект.
//
Процедура ЗапомнитьСообщенияПользователю(Сообщения, Организация, ТекстПричины, СсылкаНаОбъект, Дата, ЭтоОшибка = Истина, АвтоматическиФормироватьТекстСообщения = Истина) Экспорт

	СообщенияПользователю = ОбщегоНазначенияБП.ПолучитьСообщенияПользователюБезСлужебных(Истина);
	КоличествоСообщений = СообщенияПользователю.Количество();
	
	Если КоличествоСообщений > 0 Тогда
		Для ИндексСообщения = 0 По КоличествоСообщений - 1 Цикл
			ДобавитьСообщениеПользователю(Сообщения, Организация, СообщенияПользователю[ИндексСообщения], СсылкаНаОбъект, Дата, ЭтоОшибка);
		КонецЦикла;
	ИначеЕсли ЭтоОшибка Тогда
		// Объект сам о себе ничего не сказал, поэтому выводим общий текст сообщения о том,
		// что возникла ошибка.
		Если АвтоматическиФормироватьТекстСообщения Тогда
			Если ЗначениеЗаполнено(ТекстПричины) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Обработка %1 не выполнена по причине: 
					|%2'"),
					Строка(СсылкаНаОбъект), ТекстПричины);
			Иначе
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'При обработке %1 возникла ошибка!'"),
					Строка(СсылкаНаОбъект));
			КонецЕсли;
		Иначе
			ТекстСообщения = ТекстПричины;
		КонецЕсли;
	
		НовоеСообщение 				= Новый СообщениеПользователю();
		НовоеСообщение.КлючДанных 	= СсылкаНаОбъект;
		НовоеСообщение.Текст 		= ТекстСообщения;
		
		ДобавитьСообщениеПользователю(Сообщения, Организация, НовоеСообщение, СсылкаНаОбъект, Дата, ЭтоОшибка);
	
	КонецЕсли;

КонецПроцедуры

// Подготавливает сообщения пользователю для передачи в форму отображения ошибок проведения.
//
// Параметры:
//	Сообщения - ТаблицаЗначений - результат НовыеСообщенияПользователю()
//	ТабДокумент - ТабличныйДокумент - результат ВывестиСообщенияПользователю()
//	АдресХранилища - УникальныйИдентификатор, Строка - см. второй параметр платформенной функции ПоместитьВоВременноеХранилище()
//
// Возвращаемое значение:
//	Строка - Адрес созданного временного хранилища.
//
Функция ПоместитьСообщенияПользователюВоВременноеХранилищеДляФормыОшибок(Сообщения, ТабДокумент, АдресХранилища) Экспорт

	// Проиндексируем таблицу для поиска ней по КлючуДанных в форме ошибок.
	Сообщения.Индексы.Добавить("КлючДанных");

	Данные = Новый Структура();
	
	Данные.Вставить("ТаблицаСообщенийПользователю", Сообщения);
	Данные.Вставить("ОтчетПоОшибкам", 				ТабДокумент);

	Возврат ПоместитьВоВременноеХранилище(Данные, АдресХранилища);

КонецФункции

#КонецОбласти
