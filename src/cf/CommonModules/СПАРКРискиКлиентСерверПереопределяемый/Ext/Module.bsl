////////////////////////////////////////////////////////////////////////////////
// Подсистема "СПАРКРиски".
// ОбщийМодуль.СПАРКРискиКлиентСерверПереопределяемый.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Определяет свойства контрагента в форме или подписках на события.
//
// Параметры:
//	КонтрагентОбъект - ДанныеФормыСтруктура, СправочникОбъект - данные контрагента;
//	Форма - УправляемаяФорма - форма, из которой вызывается обработчик.
//		Если вызывается вне формы, тогда значение Неопределено;
//	СвойстваКонтрагента - Структура - в параметре возвращаются свойства контрагента:
//		* ИНН - Строка - ИНН контрагента. Значение по умолчанию - пустая строка;
//		* ПодлежитПроверке - Булево - в параметре необходимо возвратить Истина, если контрагент
//			подлежит проверке в сервисе 1СПАРК Риски, Ложь - в противном случае.
//			Важно. Сервис 1СПАРК Риски предоставляет информацию только по не иностранным
//			юридическим лицам;
//			Значение по умолчанию - Ложь;
//		* СвояОрганизация - Булево - признак того, что контрагент является собственным.
//			Значение по умолчанию - Ложь.
//			Свойство может быть использовано для отбора данных в отчетах.
//
Процедура ПриОпределенииСвойствКонтрагентаВОбъекте(КонтрагентОбъект, Форма, СвойстваКонтрагента) Экспорт
	
	СвойстваКонтрагента.ИНН = КонтрагентОбъект.ИНН;
	СвойстваКонтрагента.ПодлежитПроверке = Не КонтрагентОбъект.ЭтоГруппа
		И КонтрагентОбъект.ЮридическоеФизическоеЛицо =
			ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо")
		И НЕ КонтрагентОбъект.ОбособленноеПодразделение;
	
КонецПроцедуры

#Область ИндексыСПАРККонтрагента

// Выводит информацию об индексах СПАРК Риски в элемент управления.
// В случае, если информации нет в кэше, то инициируется фоновое задание.
// Если передан ИНН, то информация получается напрямую из веб-сервиса без фонового задания.
//
// Параметры:
//  РезультатИндексыКонтрагента - Структура - ключи описаны в СПАРКРискиКлиентСервер.НовыйДанныеИндексов();
//  КонтрагентОбъект            - Объект, Неопределено - заполняется в том случае, если форма - это форма элемента справочника, а не форма документа.
//  Контрагент                  - Определяемый тип КонтрагентБИП, Строка - Контрагент или ИНН контрагента;
//  Форма                       - УправляемаяФорма - форма, в которой необходимо вывести информацию об индексах СПАРК Риски.
//  ИспользованиеРазрешено      - Булево - признак разрешения использования функциональности;
//  Параметры                   - Структура - прочие параметры;
//  СтандартнаяОбработка        - Булево - если вернуть сюда Ложь, то стандартная обработка не будет происходить.
//
Процедура ОтобразитьИндексыСПАРК(
			РезультатИндексыКонтрагента,
			КонтрагентОбъект,
			Контрагент,
			Форма,
			ИспользованиеРазрешено,
			Параметры,
			СтандартнаяОбработка) Экспорт
		
	СтандартнаяОбработка = Ложь;
	
	//////////////////////////////////////////////////////////////////////
	// ПОДГОТОВКА ЭЛЕМЕНТОВ ФОРМЫ
	
	Если Параметры.ОбъектМетаданных = "Справочник.Контрагенты" Тогда
		
		Форма.Заголовок1СПАРК						 = Новый ФорматированнаяСтрока("");
		Форма.КритичноеСобытие1СПАРК				 = Новый ФорматированнаяСтрока("");
		Форма.ИндексДолжнойОсмотрительности1СПАРК	 = Новый ФорматированнаяСтрока("");
		Форма.ИндексФинансовогоРиска1СПАРК			 = Новый ФорматированнаяСтрока("");
		Форма.ИндексПлатежнойДисциплины1СПАРК		 = Новый ФорматированнаяСтрока("");
		Форма.Информация1СПАРК						 = Новый ФорматированнаяСтрока("");
		Форма.Действие1СПАРК						 = Новый ФорматированнаяСтрока("");
		
	ИначеЕсли Параметры.ОбъектМетаданных = "Документ.ПлатежноеПоручение" Тогда
		
		Форма.Информация1СПАРК = Новый ФорматированнаяСтрока("");
		
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	ЦветаСПАРК = Форма.ЦветаСПАРК;
	
	//////////////////////////////////////////////////////////////////////
	// ПРОВЕРКА ПОЛУЧЕННЫХ ДАННЫХ
	
	Если Не ИспользованиеРазрешено Тогда
		
		Элементы.Группа1СПАРК.Видимость = Ложь;
		
		Возврат;
		
	КонецЕсли;
	
	ТипСтруктура = Тип("Структура");

	// Если передано пустое значение контрагента, то ничего не выводить.
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		
		Элементы.Группа1СПАРК.Видимость = Ложь;
		
		Возврат;
		
	КонецЕсли;

	Если РезультатИндексыКонтрагента.ВидОшибки = 
		ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.ТребуетсяОплатаИлиПревышенЛимит") Тогда
		
		Элементы.Группа1СПАРК.Видимость = Истина;
		
	ИначеЕсли Не РезультатИндексыКонтрагента.ПодлежитПроверке Тогда
		
		// НЕ юридических лиц (физлиц, иностранные организации и т.п.) - не выводим вообще.
		Элементы.Группа1СПАРК.Видимость = Ложь;
		
		Возврат;
		
	Иначе
		
		Элементы.Группа1СПАРК.Видимость = Истина;
		
	КонецЕсли;
	
	// В зависимости от того, загружены данные, или выполнятся фоновое задание, вывести или скрыть картинку ожидания.
	Если РезультатИндексыКонтрагента.СостояниеЗагрузкиДанных =
		ПредопределенноеЗначение("Перечисление.СостоянияЗагрузкиИндексовСПАРКРиски.ЗапущеноФоновоеЗадание") Тогда
		
		Элементы.ДекорацияОбновлениеДанных1СПАРК.Видимость = Истина;
		Форма.Информация1СПАРК = Новый ФорматированнаяСтрока(НСтр("ru='Выполняется получение данных из Интернет.'"));
		
	ИначеЕсли РезультатИндексыКонтрагента.СостояниеЗагрузкиДанных = 
		ПредопределенноеЗначение("Перечисление.СостоянияЗагрузкиИндексовСПАРКРиски.ОтменаФоновогоЗадания") Тогда
		
		Элементы.ДекорацияОбновлениеДанных1СПАРК.Видимость = Истина;
		Форма.Информация1СПАРК = Новый ФорматированнаяСтрока(НСтр("ru='Получение данных из Интернет отменено.'"));
		
	ИначеЕсли РезультатИндексыКонтрагента.СостояниеЗагрузкиДанных = 
		ПредопределенноеЗначение("Перечисление.СостоянияЗагрузкиИндексовСПАРКРиски.ОшибкаФоновогоЗадания") Тогда
		
		Элементы.ДекорацияОбновлениеДанных1СПАРК.Видимость = Истина;
		Форма.Информация1СПАРК = Новый ФорматированнаяСтрока(НСтр("ru='Ошибка получения данных из Интернет.'"));
		
	Иначе // Загрузка завершена или не осуществлялась.
		
		Элементы.ДекорацияОбновлениеДанных1СПАРК.Видимость = Ложь;
		
	КонецЕсли;

	//////////////////////////////////////////////////////////////////////
	// ВЫВОД ДАННЫХ
	
	ЦветСтиляЦветОсобогоТекста = ЦветаСПАРК.ОсобыйТекст;
	ФорматированиеГрадаций = Новый Соответствие;
	ФорматированиеГрадаций.Вставить(ПредопределенноеЗначение("Перечисление.ГрадацияИндексовСПАРКРиски.Высокий"), 
		Новый Структура("ЦветТекста, Текст", ЦветаСПАРК.ВысокийРиск, Нстр("ru = 'высокий риск'")));
	ФорматированиеГрадаций.Вставить(ПредопределенноеЗначение("Перечисление.ГрадацияИндексовСПАРКРиски.Средний"), 
		Новый Структура("ЦветТекста, Текст", ЦветаСПАРК.СреднийРиск, Нстр("ru = 'средний риск'")));
	ФорматированиеГрадаций.Вставить(ПредопределенноеЗначение("Перечисление.ГрадацияИндексовСПАРКРиски.Низкий"), 
		Новый Структура("ЦветТекста, Текст", ЦветаСПАРК.НизкийРиск, Нстр("ru = 'низкий риск'")));
	
	ЕстьОшибкаПодключения = Истина;
	
	Если Параметры.ОбъектМетаданных = "Справочник.Контрагенты" Тогда

		Форма.Заголовок1СПАРК = Новый ФорматированнаяСтрока(
			НСтр("ru='1СПАРК Риски'"),
			Новый Шрифт(, ,Истина)); // Жирный шрифт
			
	КонецЕсли;
	
	Если РезультатИндексыКонтрагента.ВидОшибки =
		ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.ТребуетсяОплатаИлиПревышенЛимит") Тогда
		
		ЕстьОшибкаПодключения = Истина;
	ИначеЕсли РезультатИндексыКонтрагента.ВидОшибки =
		ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.ВнутренняяОшибкаСервиса") Тогда
	ИначеЕсли РезультатИндексыКонтрагента.ВидОшибки =
		ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.ИнтернетПоддержкаНеПодключена") Тогда
	ИначеЕсли РезультатИндексыКонтрагента.ВидОшибки =
		ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.ИспользованиеЗапрещено") Тогда
	ИначеЕсли РезультатИндексыКонтрагента.ВидОшибки =
		ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.НеизвестнаяОшибка") Тогда
	ИначеЕсли РезультатИндексыКонтрагента.ВидОшибки =
		ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.НеизвестныйИНН") Тогда
		
		ЕстьОшибкаПодключения = Ложь;
		Форма.Информация1СПАРК = Новый ФорматированнаяСтрока(НСтр("ru='Нет информации о контрагенте'"));
		ИнформацияВыведена = Истина;
		
	ИначеЕсли РезультатИндексыКонтрагента.ВидОшибки =
		ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.НекорректныйЗапрос") Тогда
	ИначеЕсли РезультатИндексыКонтрагента.ВидОшибки =
		ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.НекорректныйИНН") Тогда
		
		ЕстьОшибкаПодключения = Ложь;
		Форма.Информация1СПАРК = Новый ФорматированнаяСтрока(НСтр("ru='Нет информации о контрагенте'"));
		ИнформацияВыведена = Истина;
		
	ИначеЕсли РезультатИндексыКонтрагента.ВидОшибки =
		ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.НеПодлежитПроверке") Тогда
	ИначеЕсли РезультатИндексыКонтрагента.ВидОшибки =
		ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.ОшибкаПодключения") Тогда
	ИначеЕсли РезультатИндексыКонтрагента.ВидОшибки =
		ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.ПревышеноКоличествоПопытокАутентификации") Тогда
	ИначеЕсли РезультатИндексыКонтрагента.ВидОшибки =
		ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.ТребуетсяОплатаИлиПревышенЛимит") Тогда
	Иначе // Пустое поле - ошибок нет.
		
		ЕстьОшибкаПодключения = Ложь;
		ЕстьОшибкаПолученияДанных = Ложь;

		ТекстОшибки = "";
		ЦветТекстаОшибки = ЦветСтиляЦветОсобогоТекста;
		Если РезультатИндексыКонтрагента.СостояниеВыводаДанных =
			ПредопределенноеЗначение("Перечисление.СостоянияВыводаИндексовСПАРКРиски.ВКэшеНетДанных") Тогда
			
			ЕстьОшибкаПолученияДанных = Истина;
			Если РезультатИндексыКонтрагента.СостояниеЗагрузкиДанных =
				ПредопределенноеЗначение("Перечисление.СостоянияЗагрузкиИндексовСПАРКРиски.ЗапущеноФоновоеЗадание") Тогда
				
				ТекстОшибки = НСтр("ru='Получение данных...'");
				ЦветТекстаОшибки = Неопределено; // Авто
				
			ИначеЕсли РезультатИндексыКонтрагента.СостояниеЗагрузкиДанных =
				ПредопределенноеЗначение("Перечисление.СостоянияЗагрузкиИндексовСПАРКРиски.ОтменаФоновогоЗадания") Тогда
				
				ТекстОшибки = НСтр("ru='Ошибка получения данных'");
				
			ИначеЕсли РезультатИндексыКонтрагента.СостояниеЗагрузкиДанных =
				ПредопределенноеЗначение("Перечисление.СостоянияЗагрузкиИндексовСПАРКРиски.ОшибкаФоновогоЗадания") Тогда
				
				ТекстОшибки = НСтр("ru='Ошибка получения данных'");
				
			Иначе // Загрузка завершена или не осуществлялась.
				
				ТекстОшибки = НСтр("ru='Ошибка получения данных (данные не получены)'");
				
			КонецЕсли;
			
		ИначеЕсли РезультатИндексыКонтрагента.СостояниеВыводаДанных =
			ПредопределенноеЗначение("Перечисление.СостоянияВыводаИндексовСПАРКРиски.ВКэшеУстаревшиеДанные") Тогда
		ИначеЕсли РезультатИндексыКонтрагента.СостояниеВыводаДанных =
			ПредопределенноеЗначение("Перечисление.СостоянияВыводаИндексовСПАРКРиски.НеправильныйИНН") Тогда
			
			ЕстьОшибкаПолученияДанных = Истина;
			ТекстОшибки = НСтр("ru='Нет информации о контрагенте'");
			
		ИначеЕсли РезультатИндексыКонтрагента.СостояниеВыводаДанных =
			ПредопределенноеЗначение("Перечисление.СостоянияВыводаИндексовСПАРКРиски.ПолученоИзКэша") Тогда
		ИначеЕсли РезультатИндексыКонтрагента.СостояниеВыводаДанных =
			ПредопределенноеЗначение("Перечисление.СостоянияВыводаИндексовСПАРКРиски.ПолученоИзФоновогоЗадания") Тогда
		Иначе
			
			ЕстьОшибкаПолученияДанных = Истина;
			ТекстОшибки = НСтр("ru='Неопределенная ошибка'");
			
		КонецЕсли;
		
		Если ЕстьОшибкаПолученияДанных = Истина Тогда
			
			Форма.Информация1СПАРК = Новый ФорматированнаяСтрока(ТекстОшибки, , ЦветТекстаОшибки);
			
		Иначе
			// Устаревшие данные вывести определенным цветом.
			Если РезультатИндексыКонтрагента.СостояниеВыводаДанных =
				ПредопределенноеЗначение("Перечисление.СостоянияВыводаИндексовСПАРКРиски.ВКэшеУстаревшиеДанные") Тогда
				ЦветТекста = ЦветаСПАРК.ПросроченныеДанные;
			Иначе
				ЦветТекста = Неопределено;
			КонецЕсли;

			// Если контрагент не активен, вывести сообщение "Контрагент прекратил деятельность %ДатаСтатуса%".
			Если (РезультатИндексыКонтрагента.Активен <> Истина) Тогда
				
				СобытиеСПАРК = Новый ФорматированнаяСтрока(
					СтрШаблон(
						НСтр("ru='Контрагент прекратил деятельность %1'"),
						Формат(РезультатИндексыКонтрагента.ДатаСтатуса, "ДЛФ=D")),
					,
					ЦветСтиляЦветОсобогоТекста);
					
				Если Параметры.ОбъектМетаданных = "Справочник.Контрагенты" Тогда
					
					Форма.КритичноеСобытие1СПАРК = СобытиеСПАРК;
					
				ИначеЕсли Параметры.ОбъектМетаданных = "Документ.ПлатежноеПоручение" Тогда
					
					Форма.Информация1СПАРК = СобытиеСПАРК;
					
				КонецЕсли;
				
			Иначе
				
				ИнформацияВыведена = Ложь;
				// Если есть событие, вывести его. В противном случае - индексы.
				Если НЕ ПустаяСтрока(РезультатИндексыКонтрагента.ТипСобытияНазвание) Тогда
					
					СобытиеСПАРК = Новый ФорматированнаяСтрока(
							СтрШаблон(
								НСтр("ru='%1 %2'"),
								РезультатИндексыКонтрагента.ТипСобытияНазвание,
								Формат(РезультатИндексыКонтрагента.ДатаСобытия, "ДЛФ=D")),
							,
							ЦветСтиляЦветОсобогоТекста);
							
					Если Параметры.ОбъектМетаданных = "Справочник.Контрагенты" Тогда
					
						Форма.КритичноеСобытие1СПАРК = СобытиеСПАРК;
					
					ИначеЕсли Параметры.ОбъектМетаданных = "Документ.ПлатежноеПоручение" Тогда
					
						Форма.Информация1СПАРК = СобытиеСПАРК;
					
					КонецЕсли;
					ИнформацияВыведена = Истина;
					
				КонецЕсли;

				Если Параметры.ОбъектМетаданных = "Справочник.Контрагенты" Тогда
			
					Если (РезультатИндексыКонтрагента.ИндексДолжнойОсмотрительности >= 0)
							И (РезультатИндексыКонтрагента.ИндексДолжнойОсмотрительности <= 100) Тогда
						
						Форма.ИндексДолжнойОсмотрительности1СПАРК = Новый ФорматированнаяСтрока(
								СтрШаблон(
									НСтр("ru='%1 (%2)'"),
									РезультатИндексыКонтрагента.ИндексДолжнойОсмотрительности,
									ФорматированиеГрадаций[РезультатИндексыКонтрагента.ИДОГрадация].Текст),
								, // Шрифт
								ФорматированиеГрадаций[РезультатИндексыКонтрагента.ИДОГрадация].ЦветТекста, // ЦветТекста
								, // ЦветФона
								"SPARK:WhatIsIndexOfDueDiligence"); // Ссылка
						
						ИнформацияВыведена = Истина;
						
					КонецЕсли;

					Если (РезультатИндексыКонтрагента.ИндексФинансовогоРиска >= 0)
							И (РезультатИндексыКонтрагента.ИндексФинансовогоРиска <= 100) Тогда
							
						Форма.ИндексФинансовогоРиска1СПАРК = Новый ФорматированнаяСтрока(
								СтрШаблон(
									НСтр("ru='%1 (%2)'"),
									РезультатИндексыКонтрагента.ИндексФинансовогоРиска,
									ФорматированиеГрадаций[РезультатИндексыКонтрагента.ИФРГрадация].Текст),
								, // Шрифт
								ФорматированиеГрадаций[РезультатИндексыКонтрагента.ИФРГрадация].ЦветТекста, // ЦветТекста
								, // ЦветФона
								"SPARK:WhatIsFailureScore"); // Ссылка
						
						ИнформацияВыведена = Истина;
						
					КонецЕсли;

					Если (РезультатИндексыКонтрагента.ИндексПлатежнойДисциплины >= 0)
							И (РезультатИндексыКонтрагента.ИндексПлатежнойДисциплины <= 100) Тогда
							
						Форма.ИндексПлатежнойДисциплины1СПАРК = Новый ФорматированнаяСтрока(
								СтрШаблон(
									НСтр("ru='%1 (%2)'"),
									РезультатИндексыКонтрагента.ИндексПлатежнойДисциплины,
									ФорматированиеГрадаций[РезультатИндексыКонтрагента.ИПДГрадация].Текст),
								, // Шрифт
								ФорматированиеГрадаций[РезультатИндексыКонтрагента.ИПДГрадация].ЦветТекста, // ЦветТекста
								, // ЦветФона
								"SPARK:WhatIsPaymentIndex"); // Ссылка
						
						ИнформацияВыведена = Истина;
						
					КонецЕсли;
					
				ИначеЕсли Параметры.ОбъектМетаданных = "Документ.ПлатежноеПоручение" И Не ИнформацияВыведена Тогда
					
					Если (РезультатИндексыКонтрагента.ИндексДолжнойОсмотрительности >= 0)
							И (РезультатИндексыКонтрагента.ИндексДолжнойОсмотрительности <= 100) Тогда
						
						ЗаголовокИДО = Новый ФорматированнаяСтрока(" " + НСтр("ru = 'Индекс должной осмотрительности:'") + " ");
						ЗначениеИДО = Новый ФорматированнаяСтрока(
							СтрШаблон(
								НСтр("ru='%1 (%2)'"),
								РезультатИндексыКонтрагента.ИндексДолжнойОсмотрительности,
								ФорматированиеГрадаций[РезультатИндексыКонтрагента.ИДОГрадация].Текст),
							, // Шрифт
							ФорматированиеГрадаций[РезультатИндексыКонтрагента.ИДОГрадация].ЦветТекста, // ЦветТекста
							, // ЦветФона
							"SPARK:WhatIsIndexOfDueDiligence"); // Ссылка
							
						Форма.Информация1СПАРК = Новый ФорматированнаяСтрока(ЗаголовокИДО, ЗначениеИДО);
							
						ИнформацияВыведена = Истина;
						
					ИначеЕсли (РезультатИндексыКонтрагента.ИндексФинансовогоРиска >= 0)
							И (РезультатИндексыКонтрагента.ИндексФинансовогоРиска <= 100) Тогда // если нет ИДО, выводим ИФР
							
						ЗаголовокИФР = Новый ФорматированнаяСтрока(" " + НСтр("ru = 'Индекс финансового риска:'") + " ");
						ЗначениеИФР = Новый ФорматированнаяСтрока(
							СтрШаблон(
								НСтр("ru='%1 (%2)'"),
								РезультатИндексыКонтрагента.ИндексФинансовогоРиска,
								ФорматированиеГрадаций[РезультатИндексыКонтрагента.ИФРГрадация].Текст),
							, // Шрифт
							ФорматированиеГрадаций[РезультатИндексыКонтрагента.ИФРГрадация].ЦветТекста, // ЦветТекста
							, // ЦветФона
							"SPARK:WhatIsFailureScore"); // Ссылка
							
						Форма.Информация1СПАРК = Новый ФорматированнаяСтрока(ЗаголовокИФР, ЗначениеИФР);
							
						ИнформацияВыведена = Истина;
						
					ИначеЕсли (РезультатИндексыКонтрагента.ИндексПлатежнойДисциплины >= 0)
							И (РезультатИндексыКонтрагента.ИндексПлатежнойДисциплины <= 100) Тогда // если нет ИФР, выводим ИПД
							
						ЗаголовокИПД = Новый ФорматированнаяСтрока(" " + НСтр("ru = 'Индекс платежной дисциплины:'") + " ");
						ЗначениеИПД = Новый ФорматированнаяСтрока(
							СтрШаблон(
								НСтр("ru='%1 (%2)'"),
								РезультатИндексыКонтрагента.ИндексПлатежнойДисциплины,
								ФорматированиеГрадаций[РезультатИндексыКонтрагента.ИПДГрадация].Текст),
							, // Шрифт
							ФорматированиеГрадаций[РезультатИндексыКонтрагента.ИПДГрадация].ЦветТекста, // ЦветТекста
							, // ЦветФона
							"SPARK:WhatIsPaymentIndex"); // Ссылка
							
						Форма.Информация1СПАРК = Новый ФорматированнаяСтрока(ЗаголовокИПД, ЗначениеИПД);
							
						ИнформацияВыведена = Истина;
							
					КонецЕсли;
					
				КонецЕсли;

				Если Не ИнформацияВыведена Тогда // Ничего не выведено - скрыть декорацию.
					
					Форма.Информация1СПАРК = Новый ФорматированнаяСтрока(НСтр("ru='Нет информации о контрагенте'"));
					
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьОшибкаПодключения Тогда
		
		Если Параметры.ОбъектМетаданных = "Справочник.Контрагенты" Тогда

			Форма.Информация1СПАРК = Новый ФорматированнаяСтрока(
						НСтр("ru='Оценка надёжности контрагентов.'") + " ");
				
			Форма.Действие1СПАРК = Новый ФорматированнаяСтрока(
					НСтр("ru='Подробнее о сервисе'"),
					,
					,
					,
					СПАРКРискиКлиентСервер.АдресСтраницыОписанияСервисаСПАРКРиски());
					
		ИначеЕсли Параметры.ОбъектМетаданных = "Документ.ПлатежноеПоручение" Тогда
			
			ИнформацияСПАРК = Новый ФорматированнаяСтрока(
					НСтр("ru='1СПАРК Риски: оценка надёжности контрагентов.'") + " ");
			
			ПодробнееСПАРК = Новый ФорматированнаяСтрока(
					НСтр("ru='Подробнее'"),
					,
					,
					,
					СПАРКРискиКлиентСервер.АдресСтраницыОписанияСервисаСПАРКРиски());
			
			Форма.Информация1СПАРК = Новый ФорматированнаяСтрока(ИнформацияСПАРК, ПодробнееСПАРК);
			
		КонецЕсли;
			
	КонецЕсли;
	
	Если Параметры.ОбъектМетаданных = "Справочник.Контрагенты" Тогда
		
		Элементы.Заголовок1СПАРК.Видимость						 = Не ПустаяСтрока(Форма.Заголовок1СПАРК);
		Элементы.ИндексДолжнойОсмотрительности1СПАРК.Видимость	 = Не ПустаяСтрока(Форма.ИндексДолжнойОсмотрительности1СПАРК);
		Элементы.ИндексФинансовогоРиска1СПАРК.Видимость			 = Не ПустаяСтрока(Форма.ИндексФинансовогоРиска1СПАРК);
		Элементы.ИндексПлатежнойДисциплины1СПАРК.Видимость		 = Не ПустаяСтрока(Форма.ИндексПлатежнойДисциплины1СПАРК);
		Элементы.КритичноеСобытие1СПАРК.Видимость				 = Не ПустаяСтрока(Форма.КритичноеСобытие1СПАРК);
		Элементы.Информация1СПАРК.Видимость						 = Не ПустаяСтрока(Форма.Информация1СПАРК);
		Элементы.Действие1СПАРК.Видимость						 = Не ПустаяСтрока(Форма.Действие1СПАРК);
		
	ИначеЕсли Параметры.ОбъектМетаданных = "Документ.ПлатежноеПоручение" Тогда
		
		Элементы.Группа1СПАРК.Видимость = Не ПустаяСтрока(Форма.Информация1СПАРК);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает информацию об индексах СПАРК Риски в виде структуры форматированных строк.
// В случае, если информации нет в кэше, то инициируется фоновое задание.
// Если передан ИНН, то информация получается напрямую из веб-сервиса без фонового задания.
//
// Параметры:
//  ПредставленияИндексов - Структура - сюда необходимо передать форматированные строки, если необходимо переопределение;
//  РезультатИндексыКонтрагента - Структура, Неопределено - результата выполнения функции ИндексыСПАРККонтрагента
//                                 (ключи описаны в СПАРКРискиКлиентСервер.НовыйДанныеИндексов()),
//                                 или Неопределено, если необходимо вызвать эту функцию;
//  Контрагент - Определяемый тип КонтрагентБИП, Строка - Контрагент или ИНН контрагента;
//  Форма      - УправляемаяФорма - форма, в которой необходимо вывести информацию об индексах СПАРК Риски;
//  СтандартнаяОбработка - Булево - если вернуть сюда Ложь, то стандартная обработка не будет происходить.
//
Процедура ПолучитьПредставленияИндексов(
			ПредставленияИндексов,
			РезультатИндексыКонтрагента,
			Контрагент,
			Форма,
			СтандартнаяОбработка) Экспорт

КонецПроцедуры

#КонецОбласти

#КонецОбласти
