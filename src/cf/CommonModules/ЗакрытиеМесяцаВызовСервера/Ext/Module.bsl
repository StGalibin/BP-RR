////////////////////////////////////////////////////////////////////////////////
// АКТУАЛИЗАЦИЯ ДАННЫХ

// Возвращает свойства выполняемого фонового задания по актуализации.
// Если ни одного задания не найдено, возвращается значение Неопределено.
//
// Параметры:
//  Организация                  - СправочникСсылка.Организации - Организация, 
//                                 по которой будет производиться поиск фонового
//                                 задания по актуализации.
//  УникальныйИдентификаторФормы - Строка - Уникальный идентификатор формы, из
//                                 которой вызывается поиск фонового задания.
//
// Возвращаемое значение:
//   Структура - всегда содержит ключ УникальныйИдентификатор.
//               Если задание выполняется, но его свойства получить не удалось,
//               в значении ключа УникальныйИдентификатор возвращается пустая строка.
//               Другие ключи структуры:
//               * Ключ         - Строка - Ключ фонового задания.
//               * Наименование - Строка - Наименование фонового задания.
//               * Организация  - СправочникСсылка.Организация - Организация, 
//               по которой выполняется задание.
//               * Пользователь - СправочникСсылка.Пользователи - Пользователь,
//               запустивший задание.
//
Функция НайтиФоновоеЗаданиеАктуализацииПоОрганизации(Знач Организация, Знач УникальныйИдентификаторФормы) Экспорт
	
	Результат = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);

	Если НЕ Обработки.ЗакрытиеМесяца.АктуализацияВозможна(Организация) Тогда
		// Для данной организации не поддерживается полная актуализация,
		// возможно только выполнение отложенных расчетов (если включена такая настройка).
		// Фоновое задание по актуализации отложенных расчетов не блокирует других пользователей,
		// поэтому не будем искать дальше.
		Возврат Результат;
	КонецЕсли;
	
	Отбор = Новый Структура("Состояние", СостояниеФоновогоЗадания.Активно);
	
	МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Для каждого ФоновоеЗадание Из МассивФоновыхЗаданий Цикл
		
		Ключ = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ФоновоеЗадание.Ключ, ":");
		Если Ключ.Количество() > 1 Тогда
			
			ПрефиксКлючаЗадания = Ключ[0];
			ОрганизацияЗадания = Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор(Ключ[1]));
			ПользовательЗадания = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(Ключ[2]));
			
			Если ПрефиксКлючаЗадания = "АктуализацияДанных" И ОрганизацияЗадания = Организация Тогда
				СвойстваВыполняемогоЗадания = Новый Структура("УникальныйИдентификатор, Ключ, Наименование");
				ЗаполнитьЗначенияСвойств(СвойстваВыполняемогоЗадания, ФоновоеЗадание);
				СвойстваВыполняемогоЗадания.Вставить("Организация", ОрганизацияЗадания);
				СвойстваВыполняемогоЗадания.Вставить("Пользователь", ПользовательЗадания);
				Результат = СвойстваВыполняемогоЗадания;
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ИБФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	// Если не найдено ни одного задания в файловом режиме работы, это еще не значит, 
	// что никто не актуализирует данные.
	Если Результат = Неопределено И ИБФайловая Тогда 
		
		УспехБлокировки = Ложь;
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Организация, , УникальныйИдентификаторФормы);
			УспехБлокировки = Истина;
		Исключение
			Результат = Новый Структура("УникальныйИдентификатор", "");
		КонецПопытки;
		
		Если УспехБлокировки Тогда
			РазблокироватьДанныеДляРедактирования(Организация, УникальныйИдентификаторФормы);
		КонецЕсли;
		
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция ПроверитьАктуальность(Знач ПараметрыЗадания) Экспорт
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ПараметрыЗадания.ИдентификаторЗадания);

	ПодготовитьДанныеРасшифровкиДляФоновогоЗадания(ПараметрыЗадания);
	
	РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		ПараметрыЗадания.УникальныйИдентификаторФормы,
		"Обработки.ЗакрытиеМесяца.ПроверитьАктуальностьВФоне",
		ПараметрыЗадания,
		НСтр("ru = 'Проверка актуальности данных'"));

	Возврат РезультатВыполнения;
	
КонецФункции

// Перепроводит документы и перевыполняет регламетные операции закрытия месяца до требуемого периода.
//
// Параметры:
//  ПараметрыЗадания - Структура - см. ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыАктуализации().
//
// Возвращаемое значение:
//   Структура   - см. ЗакрытиеМесяцаКлиентСервер.НовыйРезультатАктуализации().
//
Функция АктуализироватьДанные(Знач ПараметрыЗадания) Экспорт
	
	АктуализацияДляРасчетаНалога = ПараметрыЗадания.АктуализацияДляРасчетаНалога;
	
	Если АктуализацияДляРасчетаНалога Тогда // востребована частичная актуализация
		
		АктуализацияДляРасчетаНалога = ВозможенПрямойРасчетНалога(ПараметрыЗадания);
		Если Не АктуализацияДляРасчетаНалога Тогда
			// Только сообщаем вариант актуализации (АктуализацияДляРасчетаНалога = Ложь), не выполняя её.
			РезультатАктуализации = ЗакрытиеМесяцаКлиентСервер.НовыйРезультатАктуализации();
			АдресХранилища = ПоместитьВоВременноеХранилище(РезультатАктуализации, ПараметрыЗадания.УникальныйИдентификаторФормы);
	
			РезультатВыполнения = Новый Структура;
			РезультатВыполнения.Вставить("АдресХранилища",       АдресХранилища);
			РезультатВыполнения.Вставить("ЗаданиеВыполнено",     Истина);
			РезультатВыполнения.Вставить("ИдентификаторЗадания", Неопределено);
			Возврат РезультатВыполнения;
			
		КонецЕсли;
			
	КонецЕсли;
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ПараметрыЗадания.ИдентификаторЗадания);
	
	НаименованиеЗадания = НСтр("ru='Актуализация данных: %1 (%2)'");
	НаименованиеЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НаименованиеЗадания,
		ПараметрыЗадания.Организация,
		ПользователиКлиентСервер.ТекущийПользователь());
		
	КлючЗадания = "АктуализацияДанных:%1:%2";
	КлючЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(КлючЗадания, 
		ПараметрыЗадания.Организация.УникальныйИдентификатор(),
		ПользователиКлиентСервер.ТекущийПользователь().УникальныйИдентификатор());
		
	ПодготовитьДанныеРасшифровкиДляФоновогоЗадания(ПараметрыЗадания);
	
	Если АктуализацияДляРасчетаНалога Тогда
		
		РезультатВыполнения = ЗакрытиеМесяца.ЗапуститьВыполнениеВФоне(
			ПараметрыЗадания.УникальныйИдентификаторФормы,
			"Обработки.ЗакрытиеМесяца.АктуализироватьВФонеДляРасчетаНалога",
			ПараметрыЗадания,
			НаименованиеЗадания,
			КлючЗадания);
		
	Иначе
		
		РезультатВыполнения = ЗакрытиеМесяца.ЗапуститьВыполнениеВФоне(
			ПараметрыЗадания.УникальныйИдентификаторФормы,
			"Обработки.ЗакрытиеМесяца.АктуализироватьВФоне",
			ПараметрыЗадания,
			НаименованиеЗадания,
			КлючЗадания);
		
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С НАСТРОЙКАМИ

Функция ПроверятьАктуальность() Экспорт
	
	Возврат Константы.ПроверятьАктуальностьДанныхУчета.Получить()
		И ПравоДоступа("Чтение", Метаданные.Документы.РегламентнаяОперация);
	
КонецФункции

// Определяет, можно ли рассчитать налог, не закрывая месяц.
//
// Параметры:
//  ПараметрыЗадания - Структура - см. ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыАктуализации().
//                                Используются только поля Организация и Период. 
//
Функция ВозможенПрямойРасчетНалога(ПараметрыЗадания)
	
	КорректныйПериод = ОбщегоНазначенияБПСобытия.КорректныйПериодВводаДокументов();
	Если КонецКвартала(ПараметрыЗадания.Период) > КорректныйПериод.КонецКорректногоПериода Тогда
		// ошибочно широкий интервал
		Возврат Ложь;
	КонецЕсли;
	
	ВариантУсловийПрямогоРасчета = 0;
	Если УчетнаяПолитика.ТолькоОсобыйПорядокНалогообложения(ПараметрыЗадания.Организация, ПараметрыЗадания.Период)
	   И УчетнаяПолитика.ПлательщикЕНВД(ПараметрыЗадания.Организация, ПараметрыЗадания.Период) Тогда
		ВариантУсловийПрямогоРасчета = 1; // ИП на ЕНВД.
	ИначеЕсли УчетнаяПолитика.ПрименяетсяУСНДоходы(ПараметрыЗадания.Организация, ПараметрыЗадания.Период) Тогда
		ВариантУсловийПрямогоРасчета = 2; // УСН без совмещения с ЕНВД, патентом, торговым сбором или комиссионной торговлей.
	КонецЕсли;
	Если ВариантУсловийПрямогоРасчета = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ВариантУсловийПрямогоРасчета = 1 Тогда // ИП на ЕНВД
		
		ГраницаАктуализации = НачалоНеактуальностиДляПрямогоРасчетаНалога(ПараметрыЗадания.Организация, ПараметрыЗадания.Период);
		
		Если ГраницаАктуализации < КорректныйПериод.НачалоКорректногоПериода Тогда
			// ошибочно широкий интервал
			Возврат Ложь;
		КонецЕсли;
		
		// Проверим, что за период неактуальности не было смены учётной политики.
		ВариантыУчета = НастройкиУчета.ЗначенияРесурсаУчетнойПолитикиЗаПериод(
			"НастройкиСистемыНалогообложения",
			"ПлательщикЕНВД",
			ПараметрыЗадания.Организация,
			ГраницаАктуализации,
			ПараметрыЗадания.Период);
		Если ВариантыУчета.Количество() <> 1             // были изменения в учетной политике
		   И (ВариантыУчета.Найти(Ложь) <> Неопределено  // был период без ЕНВД
			Или УчетнаяПолитика.ПрименяетсяУСНЗаПериод(ПараметрыЗадания.Организация, ГраницаАктуализации, ПараметрыЗадания.Период)) Тогда // УСН + ЕНВД
			Возврат Ложь;
		КонецЕсли;
		
		ПараметрыЗадания.Вставить("ГраницаАктуализацииНачало", ГраницаАктуализации);
		
		Возврат Истина;
		
	ИначеЕсли ВариантУсловийПрямогоРасчета = 2 Тогда // УСН без совмещения с особенностями учета
		
		ГраницаАктуализации = НачалоНеактуальностиДляПрямогоРасчетаНалога(ПараметрыЗадания.Организация, ПараметрыЗадания.Период);
		
		Если ГраницаАктуализации < КорректныйПериод.НачалоКорректногоПериода Тогда
			// ошибочно широкий интервал
			Возврат Ложь;
		КонецЕсли;
		
		// Проверим, что за период неактуальности всегда использовалась УСН.
		ВариантыУчета = НастройкиУчета.ЗначенияРесурсаУчетнойПолитикиЗаПериод(
			"НастройкиСистемыНалогообложения",
			"ПрименяетсяУСНДоходы",
			ПараметрыЗадания.Организация,
			ГраницаАктуализации,
			ПараметрыЗадания.Период);
		Если ВариантыУчета.Количество() <> 1                 // были изменения в учетной политике
		   И ВариантыУчета.Найти(Ложь) <> Неопределено Тогда // был период без УСН доходы
			Возврат Ложь;
		КонецЕсли;
		
		ПрямойРасчетНалога = УчетУСН.ДоходыЗаПериодНеЗависятОтПоследовательности(
			ПараметрыЗадания.Организация, ГраницаАктуализации, КонецМесяца(ПараметрыЗадания.Период));
		
		Если ПрямойРасчетНалога Тогда
			ПараметрыЗадания.Вставить("ГраницаАктуализацииНачало", ГраницаАктуализации);
		КонецЕсли;
		
		Возврат ПрямойРасчетНалога;
				
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ФОНОВЫМИ ЗАДАНИЯМИ

Функция ЗаданиеВыполнено(Знач ИдентификаторЗадания) Экспорт
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

Процедура ОтменитьВыполнениеЗадания(Знач ИдентификаторЗадания) Экспорт
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
КонецПроцедуры

// Читает сообщение от длительной операции о ее текущем состоянии.
//
// Возвращаемое значение:
//   Структура   - всегда содержит ключ ЗаданиеВыполнено. Ложь, если существует фоновое задание с ИдентификаторЗадания.
//                 Иные ключи структуры см. ДлительныеОперации.СообщитьПрогресс()
//
Функция ПрочитатьПрогресс(Знач ИдентификаторЗадания) Экспорт
	
	ПрогрессЗадания = ДлительныеОперации.ПрочитатьПрогресс(ИдентификаторЗадания);
	
	// Добавляем флаг "ЗаданиеВыполнено", чтобы различать случаи: когда отсутствуют сообщения и когда завершено задание.
	Если ПрогрессЗадания = Неопределено
	 Или ТипЗнч(ПрогрессЗадания) <> Тип("Структура") Тогда // или нет задания, или нет сообщений
		ПрогрессЗадания = Новый Структура;
	КонецЕсли;
	ПрогрессЗадания.Вставить("ЗаданиеВыполнено", ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания));
	
	Возврат ПрогрессЗадания;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЕРВИСНЫЕ ФУНКЦИИ

Функция ПолучитьПредупреждающийЦвет() Экспорт
	
	Возврат ЦветаСтиля.ЦветФонаНекорректногоКонтрагента;
	
КонецФункции

Функция ПоказатьПредупреждениеАктуализацияДанных(Организация) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат НЕ Константы.ПроверятьАктуальностьДанныхУчета.Получить()
		И Обработки.ЗакрытиеМесяца.ПравоИзмененияРегламентныхОпераций() 
		И Обработки.ЗакрытиеМесяца.АктуализацияВозможна(Организация);
	
КонецФункции

Процедура ПодготовитьДанныеРасшифровкиДляФоновогоЗадания(ПараметрыЗадания)

	Если ПараметрыЗадания.Свойство("АдресХранилищаДанныеРасшифровки")
		И ЭтоАдресВременногоХранилища(ПараметрыЗадания.АдресХранилищаДанныеРасшифровки) Тогда
		
		// В фоновое задание передаем не адрес временного хранилища, а само значение,
		// т.к. внутри фонового задания недоступны данные временного хранилища родительского сеанса.
		ДанныеРасшифровки = ПолучитьИзВременногоХранилища(ПараметрыЗадания.АдресХранилищаДанныеРасшифровки);
		
		ПараметрыЗадания.Удалить("АдресХранилищаДанныеРасшифровки");
		
		СжатыеДанныеРасшифровки = Новый ХранилищеЗначения(ДанныеРасшифровки, Новый СжатиеДанных(9));
		ПараметрыЗадания.Вставить("ДанныеРасшифровки", СжатыеДанныеРасшифровки);
	КонецЕсли;

КонецПроцедуры

Функция НачалоНеактуальностиДляПрямогоРасчетаНалога(Организация, Период)
	
	// Определяем дату, до которой нам важно отсутствие взаимозависимостей учета.
	ГраницаАктуализации = КонецМесяца(Период);
	
	ПараметрыПроверки = Обработки.ЗакрытиеМесяца.НовыеПараметрыПроверкиАктуальности();
	ПараметрыПроверки.Организация                               = Организация;
	ПараметрыПроверки.Период                                    = ГраницаАктуализации;
	ПараметрыПроверки.ПроверятьКонстантуАктуальностиДанныхУчета = Ложь;
	ПараметрыПроверки.ТребуетсяПолнаяАктуализация               = Истина;
	ПараметрыПроверки.АктуализироватьВесьПериод                 = Истина;
	РезультатПроверкиАктуальности = Обработки.ЗакрытиеМесяца.ПроверитьАктуальность(ПараметрыПроверки);
	Если Не РезультатПроверкиАктуальности.ТребуетсяАктуализация Тогда
		ГраницаАктуализации = НачалоКвартала(ГраницаАктуализации);
	Иначе
		ГраницаАктуализации = НачалоКвартала(РезультатПроверкиАктуальности.ДатаАктуальности);
	КонецЕсли;
		
	Возврат ГраницаАктуализации;
	
КонецФункции
