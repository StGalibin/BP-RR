
#Область ОбменЧерезУниверсальныйФормат

// Процедура-обработчик события "ПередЗаписью" ссылочных типов данных (кроме документов) для механизма регистрации объектов на узлах
//
// Параметры:
//  ИмяПланаОбмена – Строка – имя плана обмена, для которого выполняется механизм регистрации
//  Источник       - источник события, кроме типа ДокументОбъект
//  Отказ          - Булево - флаг отказа от выполнения обработчика
// 
Процедура СинхронизацияДанныхЧерезУниверсальныйФорматПередЗаписью(Источник, Отказ) Экспорт
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписью("СинхронизацияДанныхЧерезУниверсальныйФормат", Источник, Отказ);
	
КонецПроцедуры

// Процедура-обработчик события "ПередЗаписью" документов для механизма регистрации объектов на узлах
//
// Параметры:
//  ИмяПланаОбмена – Строка – имя плана обмена, для которого выполняется механизм регистрации
//  Источник       - ДокументОбъект - источник события
//  Отказ          - Булево - флаг отказа от выполнения обработчика
// 
Процедура СинхронизацияДанныхЧерезУниверсальныйФорматПередЗаписьюДокумента(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если ПроведениеСервер.ГрупповоеПерепроведение(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюДокумента("СинхронизацияДанныхЧерезУниверсальныйФормат", Источник, Отказ, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры

// Процедура-обработчик события "ПередЗаписью" регистров для механизма регистрации объектов на узлах
//
// Параметры:
//  ИмяПланаОбмена – Строка – имя плана обмена, для которого выполняется механизм регистрации
//  Источник       - НаборЗаписейРегистра - источник события
//  Отказ          - Булево - флаг отказа от выполнения обработчика
//  Замещение      - Булево - признак замещения существующего набора записей
// 
Процедура СинхронизацияДанныхЧерезУниверсальныйФормат0ПередЗаписьюРегистра(Источник, Отказ, Замещение) Экспорт
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюРегистра("СинхронизацияДанныхЧерезУниверсальныйФормат", Источник, Отказ, Замещение);
	
КонецПроцедуры

// Процедура-обработчик события "ПередУдалением" ссылочных типов данных для механизма регистрации объектов на узлах
//
// Параметры:
//  ИмяПланаОбмена – Строка – имя плана обмена, для которого выполняется механизм регистрации
//  Источник       - источник события
//  Отказ          - Булево - флаг отказа от выполнения обработчика
// 
Процедура СинхронизацияДанныхЧерезУниверсальныйФорматПередУдалением(Источник, Отказ) Экспорт
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередУдалением("СинхронизацияДанныхЧерезУниверсальныйФормат", Источник, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбщиеДляВсехПлановОбменаПроцедурыФункции

Функция ОпределитьМассивПолучателей (Выгрузка, Получатели) Экспорт
	
	МассивИсключаемыхУзлов = Новый Массив;

	Для Каждого Узел Из Получатели Цикл
		Если Не Выгрузка И Узел.ПравилаОтправкиДокументов = "ИнтерактивнаяСинхронизация"
			Или Узел.ПравилаОтправкиДокументов = "НеСинхронизировать" Тогда
			МассивИсключаемыхУзлов.Добавить(Узел);
		КонецЕсли;
	КонецЦикла;

	Получатели = ОбщегоНазначенияКлиентСервер.СократитьМассив(Получатели, МассивИсключаемыхУзлов);

	Возврат Получатели;

КонецФункции

Процедура РегистрацияИзмененияДляНачальнойВыгрузки(Получатель, СтандартнаяОбработка, Отбор) Экспорт
	
	СтандартнаяОбработка = Ложь;
		
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Получатель, "ИспользоватьОтборПоОрганизациям, 
																				|ДатаНачалаВыгрузкиДокументов, 
																				|Организации,
																				|ПравилаОтправкиСправочников,
																				|ПравилаОтправкиЦен,
																				|ПравилаОтправкиДокументов");
	
	Организации = ?(ЗначенияРеквизитов.ИспользоватьОтборПоОрганизациям, ЗначенияРеквизитов.Организации.Выгрузить().ВыгрузитьКолонку("Организация"), Неопределено);
	
	Если ЗначенияРеквизитов.ПравилаОтправкиСправочников <> "НеСинхронизировать"
		ИЛИ ЗначенияРеквизитов.ПравилаОтправкиДокументов = "АвтоматическаяСинхронизация" Тогда
		
		Отбор = Новый Массив();
		ИмяПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(Получатель);
		СоставПланаОбмена = Метаданные.ПланыОбмена[ИмяПланаОбмена].Состав;

		Для Каждого ЭлементСоставаПланаОбмена Из СоставПланаОбмена Цикл 
		
			Если ОбщегоНазначения.ЭтоСправочник(ЭлементСоставаПланаОбмена.Метаданные) Тогда
				
				Если ЗначенияРеквизитов.ПравилаОтправкиСправочников = "АвтоматическаяСинхронизация" Тогда
					Отбор.Добавить(ЭлементСоставаПланаОбмена.Метаданные);
				Иначе
					
					Если ЭлементСоставаПланаОбмена.Метаданные.Имя = "Организации"
						И ЗначенияРеквизитов.ПравилаОтправкиСправочников = "СинхронизироватьПоНеобходимости" Тогда
						
						Отбор.Добавить(ЭлементСоставаПланаОбмена.Метаданные);
						
					ИначеЕсли ЭлементСоставаПланаОбмена.Метаданные.Имя = "Склады"
						И ЗначенияРеквизитов.ПравилаОтправкиСправочников = "СинхронизироватьПоНеобходимости" Тогда
						
						Отбор.Добавить(ЭлементСоставаПланаОбмена.Метаданные);
						
					КонецЕсли;
				
				КонецЕсли;
				
			ИначеЕсли ОбщегоНазначения.ЭтоДокумент(ЭлементСоставаПланаОбмена.Метаданные) Тогда
				
				Если ЭлементСоставаПланаОбмена.Метаданные.Имя = "УстановкаЦенНоменклатуры" Тогда
					
					Если ЗначенияРеквизитов.ПравилаОтправкиЦен = "АвтоматическаяСинхронизация" Тогда
						
						Отбор.Добавить(ЭлементСоставаПланаОбмена.Метаданные);
						
					КонецЕсли;
					
				Иначе
					
					Если ЗначенияРеквизитов.ПравилаОтправкиДокументов = "АвтоматическаяСинхронизация" Тогда
						
						Отбор.Добавить(ЭлементСоставаПланаОбмена.Метаданные);
						
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли ОбщегоНазначения.ЭтоРегистрСведений(ЭлементСоставаПланаОбмена.Метаданные) Тогда
				
				Если ЭлементСоставаПланаОбмена.Метаданные.Имя = "ШтрихкодыНоменклатуры" Тогда
					
					Если ЗначенияРеквизитов.ПравилаОтправкиЦен = "АвтоматическаяСинхронизация" Тогда
						
						Отбор.Добавить(ЭлементСоставаПланаОбмена.Метаданные);
						
					КонецЕсли;
					
				Иначе
					
					Если ЗначенияРеквизитов.ПравилаОтправкиСправочников = "АвтоматическаяСинхронизация" Тогда
						
						Отбор.Добавить(ЭлементСоставаПланаОбмена.Метаданные);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Отбор.Количество() = 0 Тогда
			Отбор = Неопределено;
		КонецЕсли;
		
		ОбменДаннымиСервер.ЗарегистрироватьДанныеПоДатеНачалаВыгрузкиИОрганизациям(Получатель, ЗначенияРеквизитов.ДатаНачалаВыгрузкиДокументов, Организации, Отбор);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбменУправлениеТорговлейБухгалтерияПредприятия30

// Процедура-обработчик события "ПередЗаписью" ссылочных типов данных (кроме документов) для механизма регистрации объектов на узлах
//
// Параметры:
//  ИмяПланаОбмена – Строка – имя плана обмена, для которого выполняется механизм регистрации
//  Источник       - источник события, кроме типа ДокументОбъект
//  Отказ          - Булево - флаг отказа от выполнения обработчика
// 
Процедура ОбменДаннымиОбменУправлениеТорговлейБухгалтерияПредприятия30ПередЗаписью(Источник, Отказ) Экспорт
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписью("ОбменУправлениеТорговлейБухгалтерияПредприятия30", Источник, Отказ);
	
КонецПроцедуры

// Процедура-обработчик события "ПередЗаписью" документов для механизма регистрации объектов на узлах
//
// Параметры:
//  ИмяПланаОбмена – Строка – имя плана обмена, для которого выполняется механизм регистрации
//  Источник       - ДокументОбъект - источник события
//  Отказ          - Булево - флаг отказа от выполнения обработчика
// 
Процедура ОбменДаннымиОбменУправлениеТорговлейБухгалтерияПредприятия30ПередЗаписьюДокумента(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюДокумента("ОбменУправлениеТорговлейБухгалтерияПредприятия30", Источник, Отказ, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры

// Процедура-обработчик события "ПередЗаписью" регистров для механизма регистрации объектов на узлах
//
// Параметры:
//  ИмяПланаОбмена – Строка – имя плана обмена, для которого выполняется механизм регистрации
//  Источник       - НаборЗаписейРегистра - источник события
//  Отказ          - Булево - флаг отказа от выполнения обработчика
//  Замещение      - Булево - признак замещения существующего набора записей
// 
Процедура ОбменДаннымиОбменУправлениеТорговлейБухгалтерияПредприятия30ПередЗаписьюРегистра(Источник, Отказ, Замещение) Экспорт
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюРегистра("ОбменУправлениеТорговлейБухгалтерияПредприятия30", Источник, Отказ, Замещение);
	
КонецПроцедуры

// Процедура-обработчик события "ПередУдалением" ссылочных типов данных для механизма регистрации объектов на узлах
//
// Параметры:
//  ИмяПланаОбмена – Строка – имя плана обмена, для которого выполняется механизм регистрации
//  Источник       - источник события
//  Отказ          - Булево - флаг отказа от выполнения обработчика
// 
Процедура ОбменДаннымиОбменУправлениеТорговлейБухгалтерияПредприятия30ПередУдалением(Источник, Отказ) Экспорт
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередУдалением("ОбменУправлениеТорговлейБухгалтерияПредприятия30", Источник, Отказ);
	
КонецПроцедуры

#КонецОбласти