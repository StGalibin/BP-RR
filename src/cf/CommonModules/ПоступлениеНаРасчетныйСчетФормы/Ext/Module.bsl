////////////////////////////////////////////////////////////////////////////////
// ПоступлениеНаРасчетныйСчетФормы: серверные процедуры и функции, вызываемые из форм
// документа "Поступление на расчетный счет".
//  
////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Элементы = Форма.Элементы;
	
	Форма.РеквизитыОрганизацииСсылка = ПроверкаРеквизитовОрганизации.СтрокаСообщенияНеЗаполненБанковскийСчет();
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(Форма, Элементы.ГруппаПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(Форма, ДополнительныеОтчетыИОбработкиКлиентСервер.ТипФормыОбъекта());
	// Конец ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(Форма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Форма.Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере(Форма);
		
		Если ЗначениеЗаполнено(Форма.Параметры.ЗначениеКопирования) Тогда
			// Инициализируем свойства платежа
			ИнициализироватьСвойстваПлатежа(Форма, Истина,, Истина);
			
			// Если документ скопирован и есть расчетв у.е., пересчитаем суммы взаиморасчетов на дату документа
			Если Форма.ЕстьРасчетыВУсловныхЕдиницах Тогда
				ПересчитатьСуммыВзаиморасчетов(Форма);
			КонецЕсли;
		КонецЕсли;
	Иначе
		ПроверитьКурсЦБРФ(Форма);
	КонецЕсли;
	
	УстановитьВидимостьСчетовУчета(Форма);
	УстановитьУсловноеОформление(Форма);
	
	ВидимостьДоступностьЭлементовФормы(Форма);
	
КонецПроцедуры

Процедура ПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(Форма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере(Форма);
	
	// Инициализируем свойства платежа
	ИнициализироватьСвойстваПлатежа(Форма, Истина,, Истина);
	
КонецПроцедуры

Процедура ПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт

	Объект = Форма.Объект;
	
	ПроверкаРеквизитовОрганизации.ПередЗаписьюНаСервере(
			Объект.Организация,
			Объект.СчетОрганизации,
			Форма.ИспользоватьНесколькоБанковскихСчетовОрганизации,
			Отказ,
			ПараметрыЗаписи);
	
КонецПроцедуры

Процедура ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	ЗаполнитьДобавленныеКолонкиТаблиц(Форма);
	УстановитьСостояниеДокумента(Форма);
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ПараметрыЗаписи.Вставить("ОплаченныеСчета", ОплаченныеСчета(Форма));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийШапкиФормы

Процедура СуммаДокументаПриИзменении(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Если Объект.РасшифровкаПлатежа.Количество() <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если Документы.ПоступлениеНаРасчетныйСчет.ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
		СтрокаПлатеж = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма);
		СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
		ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);
		ПоступлениеНаРасчетныйСчетФормыКлиентСервер.РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, Форма,
			Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты);
		ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ЗаполнитьОтражениеСтрокиВУСН(СтрокаПлатеж, Форма);
		ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ОбновитьИтогиУСН(Форма);
		ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ОбновитьИтоги(Форма);
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ЛичныеСредстваПредпринимателя
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаРаботником
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПереводСДругогоСчета
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВзносНаличными Тогда
		
		СтрокаПлатеж = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма, Неопределено);
		СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
		Если Форма.ПрименениеУСН
			И Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление Тогда
			ЗаполнитьОтражениеВУСННаСервере(Форма);
			ПоступлениеНаРасчетныйСчетФормыКлиентСервер.СформироватьПрочееТекстДоходыУСН(Форма);
		КонецЕсли;
	КонецЕсли;
	
	Если ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
		ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(Форма, Истина, СтрокаПлатеж);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьВидОперацииОрганизации(Форма, ПричиныИзменения)
	
	Объект = Форма.Объект;
	
	ДоступныеОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучитьСписокДоступныхЗначений(
		Новый Структура("Организация, СчетОрганизации", Объект.Организация, Объект.СчетОрганизации));
	
	Если ДоступныеОперации.Количество() > 0 И ДоступныеОперации.НайтиПоЗначению(Объект.ВидОперации) = Неопределено Тогда
		
		Объект.ВидОперации = ДоступныеОперации[0].Значение;
		ВидОперацииОбработатьИзменение(Форма, ПричиныИзменения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВидОперацииОбработатьИзменение(Форма, ПричиныИзменения)
	
	Объект = Форма.Объект;
	
	ПричиныИзменения.Добавить("ВидОперации");
	
	УстановитьОграничениеТипаКонтрагента(Форма);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ЛичныеСредстваПредпринимателя
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВзносНаличными Тогда
		Объект.Контрагент      = Справочники.Контрагенты.ПустаяСсылка();
		Объект.СчетКонтрагента = Справочники.БанковскиеСчета.ПустаяСсылка();
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПереводСДругогоСчета Тогда
		Объект.Контрагент      = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	Если НЕ ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ДокументМожетБытьОформленВВалюте(Объект.ВидОперации) Тогда
		ПараметрОплатаВВалюте = Ложь;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
		ПараметрОплатаВВалюте = Истина;
		Объект.ОтражатьРазницуВКурсеВСоставеОперационныхРасходов = Истина;
	Иначе
		ПараметрОплатаВВалюте = Форма.ОплатаВВалюте;
	КонецЕсли;
	
	ВалютаДокументаПриИзмененииСервер(Форма, ПричиныИзменения, ПараметрОплатаВВалюте);
	УстановитьПараметрыВыбораСчетовУчетаДенежныхСредств(Форма);
	
	Если Документы.ПоступлениеНаРасчетныйСчет.ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
		УстановитьПараметрыВыбораДоговораСКонтрагентом(Форма);
		ПараметрыОбъекта      = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ТекущиеПараметрыОбъекта(Форма);
		Форма.СвойстваПлатежа = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, Истина);
	КонецЕсли;
	
	УстановитьВладельцаСчетаКонтрагента(Форма);
	
	УправлениеЭлементамиОтраженияВУСННаСервере(Форма);
	
	ПерезаполнитьРасшифровкуПлатежа(Форма);
	ПерезаполнитьСтатьюДДС(Форма);
	
	ЗаполнитьСчетаУчета(Форма, "ВидОперации", ПричиныИзменения);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление Тогда
		ПараметрыВыбораПолейСубконто = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ПараметрыВыбораПолейСубконто(Форма);
		Если ПараметрыВыбораПолейСубконто.Объект <> Неопределено Тогда
			БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
				Форма,
				ПараметрыВыбораПолейСубконто.Объект,
				ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ПараметрыУстановкиСвойствСубконто(
					Форма,
					ПараметрыВыбораПолейСубконто.Префикс,
					ПараметрыВыбораПолейСубконто.Постфикс));
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимостьСтраницНаСервере(Форма);
	
	ОбновитьУсловноеОформление(Форма);
	
КонецПроцедуры

Процедура ВидОперацииПриИзмененииСервер(Форма) Экспорт
	
	УстановитьВидимостьСчетовУчета(Форма);
	ВидОперацииОбработатьИзменение(Форма, Новый Массив);
	ЗаполнитьОтражениеВУСННаСервере(Форма, Истина, Истина);
	
	УправлениеФормой(Форма);
	
КонецПроцедуры

Процедура ПодразделениеОрганизацииИзменение(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	УстановитьПодразделениеКт(Форма);
	
	СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(
		ПоступлениеНаРасчетныйСчетФормыКлиентСервер.НачатьЗаполнениеСчетовУчета("ПодразделениеОрганизации", Объект));
	
КонецПроцедуры

Процедура ДатаПриИзмененииСервер(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	ПричиныИзменения = Новый Массив;
	ПричиныИзменения.Добавить("Дата");
	
	УстановитьФункциональныеОпцииФормы(Форма);
	
	УстановитьКурсДокумента(Форма);
	ПересчитатьСуммыВзаиморасчетов(Форма);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты Тогда
		ПричиныИзменения.Добавить("ВидОперации");
		Если ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ФормаДокументаОднострочная(Форма)
			И Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
			Объект.СуммаДокумента = Форма.РасшифровкаПлатежаСуммаПлатежа;
		Иначе
			Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
		КонецЕсли;
		
		ВидимостьДоступностьЭлементовФормы(Форма);
	КонецЕсли;
	
	Если Форма.ПрименениеУСН ИЛИ Форма.ПрименяетсяОсобыйПорядокНалогообложения Тогда
		ИнициализироватьСвойстваПлатежа(Форма);
		Форма.СвойстваПлатежа.Вставить("СтавкаНДС", Перечисления.СтавкиНДС.БезНДС);
	КонецЕсли;
	
	ЗаполнитьСчетаУчета(Форма, "Дата", ПричиныИзменения);
	
	УстановитьВидимостьСчетовУчета(Форма);
	
	ЗаполнитьОтражениеВУСННаСервере(Форма);
	УправлениеЭлементамиОтраженияВУСННаСервере(Форма);
	
КонецПроцедуры

Процедура ОрганизацияПриИзмененииСервер(Форма) Экспорт
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ПричиныИзменения = Новый Массив;
	ПричиныИзменения.Добавить("Организация");
	
	УстановитьФункциональныеОпцииФормы(Форма);
	
	ПараметрыВыбораПолейСубконто = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ПараметрыВыбораПолейСубконто(Форма);
	Если ПараметрыВыбораПолейСубконто.Объект <> Неопределено Тогда
		БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоШапки(
			Форма,
			ПараметрыВыбораПолейСубконто.Объект,
			ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ПараметрыУстановкиСвойствСубконто(
				Форма,
				ПараметрыВыбораПолейСубконто.Префикс,
				ПараметрыВыбораПолейСубконто.Постфикс));
	КонецЕсли;
	
	ПараметрыОбъекта = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ТекущиеПараметрыОбъекта(Форма);
	НовыеПараметры   = НовыеПараметрыПриИзмененииОрганизации(ПараметрыОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "СчетОрганизации, ВалютаДокумента, ПодразделениеОрганизации");
	УстановитьПодразделениеКт(Форма);
	Если НовыеПараметры.ВалютаДокумента <> Неопределено И ПараметрыОбъекта.ВалютаДокумента <> НовыеПараметры.ВалютаДокумента Тогда
		ПричиныИзменения.Добавить("ВалютаДокумента");
		ЗаполнитьЗначенияСвойств(Форма,  НовыеПараметры, "КурсДокумента, КратностьДокумента");
		ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "СчетКонтрагента");
		
		УстановитьПараметрыВыбораБанковскихСчетов(Форма);
		УстановитьПараметрыВыбораДоговораСКонтрагентом(Форма);
	КонецЕсли;
	
	Форма.ПредлагатьНовыйДоговор = Ложь;
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя 
		И НЕ Форма.ОплатаВВалюте И Форма.ВестиУчетПоДоговорам Тогда
		Форма.ПредлагатьНовыйДоговор = РаботаСДоговорамиКонтрагентовБП.ПредлагатьНовыйДоговор(Объект.Организация, Объект.Контрагент);
	КонецЕсли;
	
	УправлениеЭлементамиОтраженияВУСННаСервере(Форма);
	
	ИнициализироватьСвойстваПлатежа(Форма, Истина);
	ЗаполнитьЗначенияСвойств(Форма.СвойстваПлатежа, НовыеПараметры);
	ПерезаполнитьРасшифровкуПлатежа(Форма);
	ПерезаполнитьСтатьюДДС(Форма);
	
	ПроверитьВидОперацииОрганизации(Форма, ПричиныИзменения);
	
	ЗаполнитьСчетаУчета(Форма, "Организация", ПричиныИзменения);
	
	ЗаполнитьОтражениеВУСННаСервере(Форма, Истина, Истина);
	
	Элементы.ПредупреждениеОЗаполненииРеквизитовСчета.Видимость =
		ПроверкаРеквизитовОрганизацииКлиентСервер.ПоказатьПредупреждениеОРеквизитахСчета(Форма, Объект.Организация);
	
	УправлениеФормой(Форма);
	
КонецПроцедуры

Процедура СчетОрганизацииПриИзмененииСервер(Форма, ПричиныИзменения) Экспорт
	
	Объект = Форма.Объект;
	
	ПричиныИзменения.Добавить("СчетОрганизации");
	
	ПараметрыОбъекта = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ТекущиеПараметрыОбъекта(Форма);
	НовыеПараметры   = НовыеПараметрыПриИзмененииСчетаОрганизации(ПараметрыОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "ПодразделениеОрганизации");
	УстановитьПодразделениеКт(Форма);
	
	Если НовыеПараметры.ВалютаДокумента <> ПараметрыОбъекта.ВалютаДокумента Тогда
		ПричиныИзменения.Добавить("ВалютаДокумента");
		
		СвойстваФормыКЗаполнению  = "КурсДокумента, КратностьДокумента";
		СвойстваОбъектКЗаполнению = "ВалютаДокумента, СчетКонтрагента";
		Если НовыеПараметры.Свойство("КурсНаДатуПриобретенияРеализацииВалюты") Тогда
			СвойстваОбъектКЗаполнению = СвойстваОбъектКЗаполнению + ", КурсНаДатуПриобретенияРеализацииВалюты";
		КонецЕсли;
		
		Если НовыеПараметры.Свойство("ОплатаВВалюте") Тогда
			СвойстваФормыКЗаполнению = СвойстваФормыКЗаполнению + ", ОплатаВВалюте";
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Форма,  НовыеПараметры, СвойстваФормыКЗаполнению);
		ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, СвойстваОбъектКЗаполнению);
		ИнициализироватьСвойстваПлатежа(Форма, Истина);
		ЗаполнитьЗначенияСвойств(Форма.СвойстваПлатежа, НовыеПараметры);
		
		ПерезаполнитьРасшифровкуПлатежа(Форма);
		
		// ВалютаДокумента не устанавливается вручную, а берется из валюты банковского счета организации
		УстановитьПараметрыВыбораБанковскихСчетов(Форма);
		УстановитьПараметрыВыбораДоговораСКонтрагентом(Форма);
		
		ВидимостьДоступностьЭлементовФормы(Форма);
	КонецЕсли;
	
	ЗаполнитьСчетаУчета(Форма, "СчетОрганизации", ПричиныИзменения);
	
КонецПроцедуры

Процедура КонтрагентПриИзмененииСервер(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	ПричиныИзменения = Новый Массив;
	ПричиныИзменения.Добавить("Контрагент");
	
	УстановитьВладельцаСчетаКонтрагента(Форма);
	УстановитьПараметрыВыбораБанковскихСчетов(Форма);
	
	ПараметрыОбъекта = ТекущиеПараметрыОбъекта(Форма);
	НовыеПараметры   = НовыеПараметрыПриИзмененииКонтрагента(ПараметрыОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "СчетКонтрагента");
	
	ИнициализироватьСвойстваПлатежа(Форма, Истина);
	ЗаполнитьЗначенияСвойств(Форма.СвойстваПлатежа, НовыеПараметры);
	ПерезаполнитьРасшифровкуПлатежа(Форма);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя И Форма.ВестиУчетПоДоговорам Тогда
		
		Если ЗначениеЗаполнено(НовыеПараметры.ДоговорКонтрагента)
			ИЛИ Форма.ОплатаВВалюте Тогда
			Форма.ПредлагатьНовыйДоговор = Ложь;
		Иначе
			Форма.ПредлагатьНовыйДоговор = РаботаСДоговорамиКонтрагентовБП.ПредлагатьНовыйДоговор(Объект.Организация, Объект.Контрагент);
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеФормой(Форма);
	
	ЗаполнитьСчетаУчета(Форма, "Контрагент", ПричиныИзменения);
	
КонецПроцедуры

Процедура СчетБанкПриИзмененииСервер(Форма, ПричиныИзменения) Экспорт
	
	Объект = Форма.Объект;
	
	ПричиныИзменения.Добавить("СчетБанк");
	
	ОплатаВВалютеПараметр = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект.СчетБанк).Валютный;
	ВалютаДокументаПриИзмененииСервер(Форма, ПричиныИзменения, ОплатаВВалютеПараметр);
	
	ВидимостьДоступностьЭлементовФормы(Форма);
	
	ЗаполнитьСчетаУчета(Форма, "СчетБанк", ПричиныИзменения);
	
КонецПроцедуры

Процедура ВалютаДокументаПриИзмененииСервер(Форма, ПричиныИзменения, ОплатаВВалюте)
	
	Объект = Форма.Объект;
	
	ПараметрыОбъекта = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ТекущиеПараметрыОбъекта(Форма);
	НовыеПараметры   = НовыеПараметрыПриИзменении(ПараметрыОбъекта, ОплатаВВалюте);
	
	Если НовыеПараметры.ОплатаВВалюте <> ПараметрыОбъекта.ОплатаВВалюте Тогда
		
		ПричиныИзменения.Добавить("ВалютаДокумента");
		
		ПараметрыОбъекта.Вставить("ОплатаВВалюте", НовыеПараметры.ОплатаВВалюте);
		ЗаполнитьЗначенияСвойств(Форма,  НовыеПараметры, "ОплатаВВалюте, КурсДокумента, КратностьДокумента");
		ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "СчетОрганизации, СчетКонтрагента, ПодразделениеОрганизации");
		
		СчетОрганизацииПриИзмененииСервер(Форма, ПричиныИзменения);
		
		ИнициализироватьСвойстваПлатежа(Форма, Истина);
		ЗаполнитьЗначенияСвойств(Форма.СвойстваПлатежа, НовыеПараметры);
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация Тогда
			ИзменитьПараметрыВыбораСчетаИнкассации(Форма);
		ИначеЕсли ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
			Объект.КурсНаДатуПриобретенияРеализацииВалюты = НовыеПараметры.КурсДокумента;
		КонецЕсли;
		
		// Параметры отбора надо ставить после того, как заполнено поле ВалютаДокумента
		УстановитьПараметрыВыбораДоговораСКонтрагентом(Форма);
		
		УстановитьЗаголовкиКолонокУСН(Форма);
		
		ПерезаполнитьРасшифровкуПлатежа(Форма);
		
	КонецЕсли;
	
	// ВалютаДокумента не устанавливается вручную, а берется из валюты банковского счета организации
	УстановитьПараметрыВыбораБанковскихСчетов(Форма);
	
	ЗаполнитьСчетаУчета(Форма, "ВалютаДокумента", ПричиныИзменения);
	
КонецПроцедуры

Процедура ОтражатьРазницуВКурсеВСоставеОперационныхРасходовПокупкаВалютыПриИзмененииНаСервере(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	ПараметрыЗаполненияСчетовУчета = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(
		"ОтражатьРазницуВКурсеВСоставеОперационныхРасходов", Объект);
	СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(ПараметрыЗаполненияСчетовУчета);
	
	Если Объект.ОтражатьРазницуВКурсеВСоставеОперационныхРасходов Тогда
		ПроверитьКурсЦБРФ(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьКурсВалютыЦБРФ(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	Объект.КурсНаДатуПриобретенияРеализацииВалюты = СтруктураКурса.Курс;
	
КонецПроцедуры

Процедура УстановитьКурсДокумента(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	Форма.КурсДокумента      = СтруктураКурса.Курс;
	Форма.КратностьДокумента = СтруктураКурса.Кратность;
	
КонецПроцедуры

Процедура ПроверитьКурсЦБРФ(Форма)
	
	Объект = Форма.Объект;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Если Объект.КурсНаДатуПриобретенияРеализацииВалюты <> СтруктураКурса.Курс Тогда
			ШаблонСообщения = НСтр("ru = 'Курс ЦБ РФ ""%1"" на дату операции %2 с валютой %3 не соотвествуюет установленному курсу ""%4"".
				|Обновите курс ЦБ РФ в документе'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения, Объект.КурсНаДатуПриобретенияРеализацииВалюты, Формат(Объект.Дата, "ДФ=dd.MM.yy"),
				Объект.ВалютаДокумента, СтруктураКурса.Курс);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,
				"Объект.КурсНаДатуПриобретенияРеализацииВалюты");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьКурсИСуммуВзаиморасчетов(СтрокаПлатеж, Форма)
	
	Объект = Форма.Объект;
	
	СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
		СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов, Объект.Дата);
	
	СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты Тогда
		СтрокаПлатеж.КурсНаДатуПриобретенияРеализацииВалюты = СтрокаПлатеж.КурсВзаиморасчетов;
	КонецЕсли;
	
	ПоступлениеНаРасчетныйСчетФормыКлиентСервер.РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, Форма);
	
КонецПроцедуры

Процедура ОбработкаОповещенияИзмененБанковскийСчет(Форма, БанковскийСчет) Экспорт
	
	Объект = Форма.Объект;
	
	Если НЕ ЗначениеЗаполнено(Объект.СчетОрганизации) Тогда
		Объект.СчетОрганизации = БанковскийСчет;
		СчетОрганизацииПриИзмененииСервер(Форма, Новый Массив);
	КонецЕсли;
	
	УстановитьФункциональныеОпцииФормы(Форма);
	
КонецПроцедуры

Процедура ПерезаполнитьРасшифровкуПлатежа(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ИнициализироватьСвойстваПлатежа(Форма);
	
	РасшифровкаПлатежа = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ПолучитьРасшифровкаПлатежа(Форма);
	
	РасшифровкаПлатежа.Очистить();
	СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
	СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
	
	Если Документы.ПоступлениеНаРасчетныйСчет.ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
		ЗаполнитьЗначенияСвойств(СтрокаПлатеж, Форма.СвойстваПлатежа);
		ПоступлениеНаРасчетныйСчетФормыКлиентСервер.РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, Форма);
		
		РасшифровкаПлатежаУстановитьПорядокОтраженияАванса(СтрокаПлатеж, Форма);
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам Тогда
			СтрокаПлатеж.СуммаУслуг = Объект.СуммаУслуг;
		Иначе
			ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);
			ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ОбновитьИтоги(Форма);
			Если НЕ ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
				Элементы.РасшифровкаПлатежа.ТекущаяСтрока = СтрокаПлатеж.ПолучитьИдентификатор();
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВидОперацииСТабличнойЧастью(Объект.ВидОперации) Тогда
		
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = УчетДенежныхСредствБП.СтатьяДДСПоУмолчанию(Объект.ВидОперации);
		
	КонецЕсли;
	
	СчетаУчетаВДокументах.ЗаполнитьСтроки(Объект.РасшифровкаПлатежа, "РасшифровкаПлатежа", Объект, Документы.ПоступлениеНаРасчетныйСчет);
	ЗаполнитьЗначенияСвойств(Форма.СвойстваПлатежа, СтрокаПлатеж);
	
	ЗаполнитьДобавленныеКолонкиТаблиц(Форма);
	
	Если ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
		ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(Форма, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПерезаполнитьСтатьюДДС(Форма)
	
	Объект = Форма.Объект;

	Если НЕ ВидОперацииСТабличнойЧастью(Объект.ВидОперации) Тогда
		Объект.СтатьяДвиженияДенежныхСредств = УчетДенежныхСредствБП.СтатьяДДСПоУмолчанию(Объект.ВидОперации);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВидимостьСтраницНаСервере(Форма) Экспорт
	
	Если ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
		УстановитьВидимостьГрупп(Форма);
	Иначе
		УстановитьВидимостьСтраниц(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВидимостьГрупп(Форма) Экспорт
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ВидимостьАналитики            = ВидимостьАналитики(Объект.ВидОперации);
	ЭтоПеремещениеДенежныхСредств = ЭтоПеремещениеДенежныхСредств(Объект.ВидОперации);
	
	Элементы.ГруппаАналитика.Видимость = ВидимостьАналитики;
	Элементы.Контрагент.Видимость      = НЕ ЭтоПеремещениеДенежныхСредств;
	Элементы.СчетКонтрагента.Видимость = НЕ ЭтоПеремещениеДенежныхСредств;
	
	Если НЕ ВидимостьАналитики Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураСтраниц = Новый Структура;
	СтруктураСтраниц.Вставить("ГруппаИнкассация",            Элементы.ГруппаИнкассация);
	СтруктураСтраниц.Вставить("ГруппаПокупкаВалюты",         Элементы.ГруппаПокупкаВалюты);
	СтруктураСтраниц.Вставить("ГруппаПродажаВалюты",         Элементы.ГруппаПродажаВалюты);
	СтруктураСтраниц.Вставить("ГруппаПлатежПрочие",          Элементы.ГруппаПлатежПрочие);
	СтруктураСтраниц.Вставить("ГруппаПлатежныеКарты",        Элементы.ГруппаПлатежныеКарты);
	СтруктураСтраниц.Вставить("ГруппаРасчетыСКонтрагентами", Элементы.ГруппаРасчетыСКонтрагентами);
	
	ТекущаяСтраница = "";
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация Тогда
		ТекущаяСтраница = "ГруппаИнкассация";
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
		ТекущаяСтраница = "ГруппаПокупкаВалюты";
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты Тогда
		ТекущаяСтраница = "ГруппаПродажаВалюты";
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление Тогда
		ТекущаяСтраница = "ГруппаПлатежПрочие";
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам Тогда
		ТекущаяСтраница = "ГруппаПлатежныеКарты";
	ИначеЕсли Документы.ПоступлениеНаРасчетныйСчет.ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
		ТекущаяСтраница = "ГруппаРасчетыСКонтрагентами";
	КонецЕсли;
	
	Для каждого КлючИЗначение Из СтруктураСтраниц Цикл
		Если КлючИЗначение.Ключ <> ТекущаяСтраница Тогда
			Если КлючИЗначение.Значение.Видимость Тогда
				КлючИЗначение.Значение.Видимость = Ложь;
			КонецЕсли;
		Иначе
			Если НЕ КлючИЗначение.Значение.Видимость Тогда
				КлючИЗначение.Значение.Видимость = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьВидимостьСтраниц(Форма) Экспорт
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ВидимостьАналитики            = ВидимостьАналитики(Объект.ВидОперации);
	ЭтоПеремещениеДенежныхСредств = ЭтоПеремещениеДенежныхСредств(Объект.ВидОперации);
	
	Элементы.ГруппаСтраницы.Видимость  = ВидимостьАналитики;
	
	Если НЕ ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ФормаРасшифровкиПлатежа(Форма) Тогда
		Элементы.Контрагент.Видимость      = НЕ ЭтоПеремещениеДенежныхСредств;
		Элементы.СчетКонтрагента.Видимость = НЕ ЭтоПеремещениеДенежныхСредств;
	КонецЕсли;
	
	Если НЕ ВидимостьАналитики Тогда
		Возврат;
	КонецЕсли;
	
	// т.к. Расшифровка платежа теперь есть у многих видов операций, сначала отработаем формы-исключения.
	МассивСтраниц = Новый Массив;
	МассивСтраниц.Добавить(Элементы.ГруппаИнкассация);
	МассивСтраниц.Добавить(Элементы.ГруппаПокупкаВалюты);
	МассивСтраниц.Добавить(Элементы.ГруппаПродажаВалюты);
	МассивСтраниц.Добавить(Элементы.ГруппаПлатежныеКарты);
	МассивСтраниц.Добавить(Элементы.ГруппаРасчетыСКонтрагентами);
	Если НЕ ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ФормаРасшифровкиПлатежа(Форма) Тогда
		МассивСтраниц.Добавить(Элементы.ГруппаПлатежПрочие);
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаИнкассация;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПокупкаВалюты;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПродажаВалюты;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПлатежПрочие;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПлатежныеКарты;
	
	// а затем тех, кто использует основную форму Расшифровки платежа
	ИначеЕсли Документы.ПоступлениеНаРасчетныйСчет.ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРасчетыСКонтрагентами;
	КонецЕсли;
	
	Для каждого ТекСтраница Из МассивСтраниц Цикл
		Если ТекСтраница <> Элементы.ГруппаСтраницы.ТекущаяСтраница Тогда
			Если ТекСтраница.Видимость Тогда
				ТекСтраница.Видимость = Ложь;
			КонецЕсли;
		Иначе
			Если НЕ ТекСтраница.Видимость Тогда
				ТекСтраница.Видимость = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьФормуНаСервере(Форма) Экспорт
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	УстановитьФункциональныеОпцииФормы(Форма);
	
	ТекущаяДатаДокумента = Объект.Дата;
	Форма.ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ТабличнаяЧасть = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.НазваниеТаблицыРасшифровкиПлатежа(Объект.ВидОперации);
	УстановитьЗаголовкиКолонокРасшифровкаПлатежа(Форма, ТабличнаяЧасть);
	
	Форма.ОплатаВВалюте = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект.СчетБанк).Валютный
		ИЛИ ЗначениеЗаполнено(Объект.ВалютаДокумента) И Объект.ВалютаДокумента <> Форма.ВалютаРегламентированногоУчета;
	
	УстановитьКурсДокумента(Форма);
	
	Если ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ФормаРасшифровкиПлатежа(Форма) Тогда
		Если ПустаяСтрока(Объект.НазначениеПлатежа) Тогда
			Элементы.НазначениеПлатежа.Видимость = Ложь;
		КонецЕсли;
		
		Если Форма.СвойстваПлатежа = Неопределено
			И Форма.РасшифровкаПлатежа.Количество() > 0 Тогда
			Форма.СвойстваПлатежа = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ПустаяСтруктураСвойстваПлатежа();
			Если ЗначениеЗаполнено(Форма.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств) Тогда
				Форма.СвойстваПлатежа.СтатьяДвиженияДенежныхСредств = Форма.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств;
			КонецЕсли;
		КонецЕсли;
		Если НЕ Форма.ВестиУчетПоДоговорам Тогда
			ПараметрыОбъекта = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ТекущиеПараметрыОбъекта(Форма);
			Форма.СвойстваПлатежа = ПоступлениеНаРасчетныйСчетФормы.СвойстваСтрокРасшифровкиПлатежаСервер(ПараметрыОбъекта, Ложь);
			
			ПараметрыЗаполненияСчетовУчета = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(
				"Контрагент", Объект, Форма.СвойстваПлатежа);
			СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
				Документы.ПоступлениеНаРасчетныйСчет,
				ПараметрыЗаполненияСчетовУчета.КЗаполнению,
				Объект,
				"РасшифровкаПлатежа",
				Форма.СвойстваПлатежа,
				Ложь);
		КонецЕсли;
	Иначе
		УстановитьВладельцаСчетаКонтрагента(Форма);
		
		Если ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ФормаДокументаОднострочная(Форма)
			И Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
			Если ВидОперацииСТабличнойЧастью(Объект.ВидОперации) Тогда
				ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(Форма, Истина);
			КонецЕсли;
		КонецЕсли;
		
		УстановитьСостояниеДокумента(Форма);
		УстановитьПараметрыВыбораСчетовУчетаДенежныхСредств(Форма);
		УстановитьПараметрыВыбораБанковскихСчетов(Форма);
		
		УстановитьОграничениеТипаКонтрагента(Форма);
	КонецЕсли;
	
	УстановитьПараметрыВыбораДоговораСКонтрагентом(Форма);
	ПараметрыВыбораПолейСубконто = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ПараметрыВыбораПолейСубконто(Форма);
	Если ПараметрыВыбораПолейСубконто.Объект <> Неопределено Тогда
		БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоШапки(
			Форма,
			ПараметрыВыбораПолейСубконто.Объект,
			ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ПараметрыУстановкиСвойствСубконто(
				Форма,
				ПараметрыВыбораПолейСубконто.Префикс,
				ПараметрыВыбораПолейСубконто.Постфикс));
	КонецЕсли;
	
	УправлениеЭлементамиОтраженияВУСННаСервере(Форма); // должно идти раньше процедуры ЗаполнитьДобавленныеКолонкиТаблиц()
	ЗаполнитьДобавленныеКолонкиТаблиц(Форма);
	
	// Управление внешним видом формы
	УстановитьВидимостьСтраницНаСервере(Форма);
	УправлениеФормой(Форма);
	
КонецПроцедуры

Процедура УправлениеФормой(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Если ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ФормаДокументаОднострочная(Форма)
			И Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты Тогда
			Элементы.СуммаДокумента.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Отображать;
			Элементы.СуммаДокумента.ПропускатьПриВводе = Истина;
		Иначе
			Элементы.СуммаДокумента.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Авто;
			Элементы.СуммаДокумента.ПропускатьПриВводе = Ложь;
		КонецЕсли;
		
		Элементы.ПолеОтражениеАванса.Видимость = ОтображатьПорядокОтраженияАвансаДляУСН(Форма)
			И Элементы.ПолеОтражениеАванса.СписокВыбора.Количество() > 1;
		
		Элементы.ГруппаПереводСДругогоСчета.Видимость    = Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПереводСДругогоСчета;
	Иначе
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам
			И НЕ ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ФормаРасшифровкиПлатежа(Форма)
			И НЕ ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
			Если СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
				Элементы.ГруппаПлатежныеКартыСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
			Иначе
				Элементы.ГруппаПлатежныеКартыСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ФормаРасшифровкиПлатежа(Форма) Тогда
		Элементы.СтатьяДвиженияДенежныхСредств.Видимость = НЕ ВидимостьАналитики(Объект.ВидОперации);
	КонецЕсли;
	
	ПоступлениеНаРасчетныйСчетФормыКлиентСервер.СформироватьПрочееТекстДоходыУСН(Форма);
	ВидимостьДоступностьЭлементовФормы(Форма);
	ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ОбновитьИтоги(Форма);
	
КонецПроцедуры

Процедура УстановитьПодразделениеКт(Форма)
	
	Объект = Форма.Объект;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаКонтрагентом
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеЗайма
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеКредита
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПереводСДругогоСчета
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВзносНаличными Тогда
		Объект.ПодразделениеКт = Неопределено;
	Иначе
		Объект.ПодразделениеКт = Объект.ПодразделениеОрганизации;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВидимостьДоступностьЭлементовФормы(Форма) Экспорт
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если НЕ ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ФормаРасшифровкиПлатежа(Форма) Тогда
		Элементы.ПредупреждениеОЗаполненииРеквизитовСчета.Видимость =
			ПроверкаРеквизитовОрганизацииКлиентСервер.ПоказатьПредупреждениеОРеквизитахСчета(Форма, Объект.Организация);
	КонецЕсли;
		
	Если НЕ ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	ОтобразитьГиперссылкуПерейтиВТаблицу(Форма);
	
	НазваниеТабличнойЧасти = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.НазваниеТаблицыРасшифровкиПлатежа(Объект.ВидОперации);
	Если НазваниеТабличнойЧасти <> "РасшифровкаПлатежа" Тогда
		Возврат;
	КонецЕсли;
	
	РасчетыПоКредитамИЗаймам        = ЭтоРасчетыПоКредитамИЗаймам(Объект.ВидОперации);
	Элементы.СчетНаОплату.Видимость = Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя;
	Элементы.СпособПогашенияЗадолженности.Видимость = НЕ РасчетыПоКредитамИЗаймам;
	Элементы.СтавкаНДС.Видимость                    = НЕ РасчетыПоКредитамИЗаймам;
	Элементы.СуммаНДС.Видимость                     = НЕ РасчетыПоКредитамИЗаймам;
	Если СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
		Элементы.СчетУчетаРасчетовПоАвансам.Видимость = НЕ РасчетыПоКредитамИЗаймам;
	КонецЕсли;
	
	Если Документы.ПоступлениеНаРасчетныйСчет.ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
		ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ВидимостьДоступностьПолейПриИзмененииСпособаПогашения(Форма);
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам Тогда
		Элементы.СчетУчетаУслугиБанка.АвтоОтметкаНезаполненного = Объект.СуммаУслуг > 0;
		Элементы.СчетУчетаУслугиБанка.АвтоВыборНезаполненного   = Объект.СуммаУслуг > 0;
		Если Объект.СуммаУслуг = 0 Тогда
			Элементы.СчетУчетаУслугиБанка.ОтметкаНезаполненного = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.КурсВзаиморасчетов.Видимость        = Форма.ЕстьРасчетыВУсловныхЕдиницах;
	Элементы.ГруппаСуммаВзаиморасчетов.Видимость = Форма.ЕстьРасчетыВУсловныхЕдиницах;
	
КонецПроцедуры

Процедура ОтобразитьГиперссылкуПерейтиВТаблицу(Форма) Экспорт
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.НадписьРазбитьПлатеж.Видимость  = Ложь;
	Если НЕ ВидОперацииСТабличнойЧастью(Объект.ВидОперации) Тогда
		Элементы.ГруппаСуммаДокументаВалютаДокумента.Видимость = Истина;
		Элементы.НадписьСуммаДокумента.Видимость               = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.НадписьРазбитьПлатеж.Видимость = Истина;
	
	КоличествоСтрок          = Объект.РасшифровкаПлатежа.Количество();
	ГруппаРасшифровкаПлатежа = Элементы[ГруппаРасшифровкаПлатежа(Объект.ВидОперации)];
	ПлатежныеКартыИКредиты   = Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам;
	Если КоличествоСтрок = 1 Тогда
		ГруппаРасшифровкаПлатежа.Видимость                     = Истина;
		Элементы.ГруппаСуммаДокументаВалютаДокумента.Видимость = Истина;
		Элементы.НадписьСуммаДокумента.Видимость               = Ложь;
		
		Если ПлатежныеКартыИКредиты Тогда
			Элементы.СуммаУслуг.Видимость                        = Ложь;
			Элементы.ПлатежныеКартыСуммаУслуг.Видимость          = Истина;
		КонецЕсли;
	Иначе
		ГруппаРасшифровкаПлатежа.Видимость                       = Ложь;
		ПараметрыПредметаИсчисления = НСтр("ru = 'строка, строки, строк'");
		Если БухгалтерскийУчетПереопределяемый.ИспользоватьВалютныйУчет() Тогда
			Форма.НадписьСуммаДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 %2 (%3)'"),
				Формат(Объект.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧН="),
				Объект.ВалютаДокумента,
				СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(КоличествоСтрок, ПараметрыПредметаИсчисления));
		Иначе
			Форма.НадписьСуммаДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 (%2)'"),
				Формат(Объект.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧН="),
				СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(КоличествоСтрок, ПараметрыПредметаИсчисления));
		КонецЕсли;
		
		Элементы.НадписьСуммаДокумента.Видимость                 = Истина;
		Элементы.ГруппаСуммаДокументаВалютаДокумента.Видимость   = Ложь;
		
		Если ПлатежныеКартыИКредиты Тогда
			Элементы.СуммаУслуг.Видимость                        = Истина;
			Элементы.ПлатежныеКартыСуммаУслуг.Видимость          = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСостояниеДокумента(Форма)
	
	Объект = Форма.Объект;
	
	Форма.СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

Процедура УстановитьФункциональныеОпцииФормы(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(Форма);
	Форма.ПрименениеУСН        = УчетнаяПолитика.ПрименяетсяУСН(Объект.Организация, Объект.Дата);
	Форма.ПрименениеУСНДоходы  = УчетнаяПолитика.ПрименяетсяУСНДоходы(Объект.Организация, Объект.Дата);
	Форма.ПрименяетсяОсобыйПорядокНалогообложения = УчетнаяПолитика.ПрименяетсяОсобыйПорядокНалогообложения(Объект.Организация, Объект.Дата);
	Форма.ПрименяетсяУСНПатент = УчетнаяПолитика.ПрименяетсяУСНПатент(Объект.Организация, Объект.Дата);
	Форма.ИспользоватьНесколькоБанковскихСчетовОрганизации = Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Объект.Организация);
	Форма.ОсновнойБанковскийСчетОрганизацииЗаполнен = ПроверкаРеквизитовОрганизации.ОсновнойБанковскийСчетОрганизацииЗаполнен(Объект.Организация);
	Форма.ВестиУчетПоДоговорам = ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам");
	
КонецПроцедуры

Процедура УстановитьВладельцаСчетаКонтрагента(Форма)
	
	Объект = Форма.Объект;
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ЛичныеСредстваПредпринимателя
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВзносНаличными Тогда
		Форма.ВладелецСчетаКонтрагента = Неопределено;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПереводСДругогоСчета Тогда
		Форма.ВладелецСчетаКонтрагента = Объект.Организация;
	Иначе
		Форма.ВладелецСчетаКонтрагента = Объект.Контрагент;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПараметрыВыбораСчетовУчетаДенежныхСредств(Форма) Экспорт
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ОднострочнаяФорма       = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ФормаДокументаОднострочная(Форма);
	ФормаРасшифровкиПлатежа = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ФормаРасшифровкиПлатежа(Форма);
	Если НЕ ФормаРасшифровкиПлатежа Тогда
		// Счет банка
		СчетаОтбора = Новый Массив;
		Если НЕ Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Объект.Организация)
			И ЗначениеЗаполнено(Объект.СчетОрганизации) Тогда
			ВалютаДенежныхСредств = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СчетОрганизации, "ВалютаДенежныхСредств");
			Если ВалютаДенежныхСредств = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета() Тогда
				СчетаОтбора.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);
			Иначе
				СчетаОтбора.Добавить(ПланыСчетов.Хозрасчетный.ВалютныеСчета);
			КонецЕсли;
		Иначе
			СчетаОтбора.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);
			СчетаОтбора.Добавить(ПланыСчетов.Хозрасчетный.ВалютныеСчета);
		КонецЕсли;
		
		СчетаОтбора.Добавить(ПланыСчетов.Хозрасчетный.СпециальныеСчета);
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
			ОтбиратьПоВалюте = Истина;
			Образец = ПланыСчетов.Хозрасчетный.ВалютныеСчета;
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаРаботником Тогда
			ОтбиратьПоВалюте = Истина;
			Образец = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
		Иначе
			ОтбиратьПоВалюте = Ложь;
			Образец = Неопределено;
		КонецЕсли;
		
		СчетаБанка = БухгалтерскийУчет.ПолучитьМассивСчетовДенежныхСредств(СчетаОтбора, ОтбиратьПоВалюте, Образец);
		
		НовыйМассивПараметров = Новый Массив();
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СчетаБанка)));
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
		Элементы.СчетБанк.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	КонецЕсли;
	
	// Счет инкассации и оплаты по картам.
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация Тогда
		
		СчетаОтбора = Новый Массив;
		СчетаОтбора.Добавить(ПланыСчетов.Хозрасчетный.ПереводыВПути_);
		СчетаИсключений = Новый Массив;
		СчетаИсключений.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеИностраннойВалюты);
		СчетаИсключений.Добавить(ПланыСчетов.Хозрасчетный.РеализацияИностраннойВалюты);
		СчетаИсключений.Добавить(ПланыСчетов.Хозрасчетный.ПродажиПоПлатежнымКартам);
		СчетаИнкассации = БухгалтерскийУчет.ПолучитьМассивСчетовДенежныхСредств(СчетаОтбора, Ложь,, СчетаИсключений);
		
		НовыйМассивПараметров = Новый Массив();
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка",   Новый ФиксированныйМассив(СчетаИнкассации)));
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Валютный", Форма.ОплатаВВалюте));
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
		
		ЭлементСчетУчета = ?(ОднострочнаяФорма, "СчетУчетаИнкассация", "РасшифровкаПлатежаИнкассацияСчетУчетаРасчетовСКонтрагентом");
		Элементы[ЭлементСчетУчета].ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПараметрыВыбораДоговораСКонтрагентом(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	НовыеПараметры = Новый Массив();
	ВидыДоговора   = УчетДенежныхСредствКлиентСервер.ОпределитьВидДоговораСКонтрагентом(Объект.ВидОперации);
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора", Новый ФиксированныйМассив(ВидыДоговора)));
	
	Если Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты
			И Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
		
		НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ОплатаВВалюте", Форма.ОплатаВВалюте));
		Если Форма.ОплатаВВалюте ИЛИ НЕ ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ДокументМожетБытьОформленВВалюте(Объект.ВидОперации) Тогда
			НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ВалютаВзаиморасчетов", Объект.ВалютаДокумента));
			НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.Валютный", Форма.ОплатаВВалюте));
		КонецЕсли;
		
	КонецЕсли;
	
	НазваниеТабличнойЧасти = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.НазваниеТаблицыРасшифровкиПлатежа(Объект.ВидОперации);
	
	Если НазваниеТабличнойЧасти = Неопределено Тогда
		Возврат;
	ИначеЕсли НазваниеТабличнойЧасти = "РасшифровкаПлатежаПокупкаВалюты" Тогда
		НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ОплатаВВалюте", Ложь));
		НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.Валютный",      Ложь));
	ИначеЕсли НазваниеТабличнойЧасти = "РасшифровкаПлатежаПродажаВалюты" Тогда
		НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ОплатаВВалюте", Истина));
	КонецЕсли;
	
	ТабличнаяЧасть = ?(ПустаяСтрока(НазваниеТабличнойЧасти) ИЛИ Элементы.Найти(НазваниеТабличнойЧасти) = Неопределено, "", НазваниеТабличнойЧасти);
	Если ПустаяСтрока(ТабличнаяЧасть) Тогда
		ТабличнаяЧасть = СтрЗаменить(НазваниеТабличнойЧасти, "РасшифровкаПлатежа", "");
	КонецЕсли;
	
	Элементы[ТабличнаяЧасть + "ДоговорКонтрагента"].ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
	
	Форма.ПредлагатьНовыйДоговор = Ложь;
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя 
		И НЕ Форма.ОплатаВВалюте И Форма.ВестиУчетПоДоговорам Тогда
		Форма.ПредлагатьНовыйДоговор = РаботаСДоговорамиКонтрагентовБП.ПредлагатьНовыйДоговор(Объект.Организация, Объект.Контрагент);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПараметрыВыбораБанковскихСчетов(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	НовыйМассивПараметров = Новый Массив();
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Валютный", Форма.ОплатаВВалюте));
	
	Если СчетБанкаВиден(Форма)
		ИЛИ НЕ ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ДокументМожетБытьОформленВВалюте(Объект.ВидОперации) Тогда
		Элементы.СчетОрганизации.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	Иначе
		Элементы.СчетОрганизации.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
	КонецЕсли;
	
	Элементы.СчетКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	
КонецПроцедуры

Процедура ИзменитьПараметрыВыбораСчетаИнкассации(Форма)
	
	Элементы = Форма.Элементы;
	
	ОднострочнаяФорма = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ФормаДокументаОднострочная(Форма);
	ЭлементСчетУчета  = ?(ОднострочнаяФорма, "СчетУчетаИнкассация", "РасшифровкаПлатежаИнкассацияСчетУчетаРасчетовСКонтрагентом");
	
	НовыйМассивПараметров = Новый Массив();
	Для каждого СтарыйПараметр Из Элементы[ЭлементСчетУчета].ПараметрыВыбора Цикл
		Если СтарыйПараметр.Имя = "Отбор.Ссылка" Тогда
			НовыйМассивПараметров.Добавить(СтарыйПараметр);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Валютный", Форма.ОплатаВВалюте));
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
	
	Элементы[ЭлементСчетУчета].ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	
КонецПроцедуры

Процедура ЗаполнитьДобавленныеКолонкиТаблиц(Форма) Экспорт
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	РасшифровкаПлатежа     = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ПолучитьРасшифровкаПлатежа(Форма);
	НазваниеТабличнойЧасти = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.НазваниеТаблицыРасшифровкиПлатежа(Объект.ВидОперации);
	ЭтоОднострочнаяФорма   = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ФормаДокументаОднострочная(Форма);
	КоличествоСтрок        = РасшифровкаПлатежа.Количество();
	
	Если КоличествоСтрок = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ЕстьРасчетыВУсловныхЕдиницах = Ложь;
	МассивДоговоров   = РасшифровкаПлатежа.Выгрузить(, "ДоговорКонтрагента").ВыгрузитьКолонку("ДоговорКонтрагента");
	СвойстваДоговоров = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		МассивДоговоров, "ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах");
	
	ЕстьАвансыУСН = ОтображатьПорядокОтраженияАвансаДляУСН(Форма);
	
	СписокПредставлений = Неопределено;
	Если ЕстьАвансыУСН И НазваниеТабличнойЧасти = "РасшифровкаПлатежа" Тогда
		ТабличнаяЧасть = ?(ЭтоОднострочнаяФорма, "", НазваниеТабличнойЧасти);
		Если НЕ (ЭтоОднострочнаяФорма И КоличествоСтрок > 1) Тогда
			СписокПредставлений = Элементы[ТабличнаяЧасть + "ПолеОтражениеАванса"].СписокВыбора;
		КонецЕсли;
	КонецЕсли;
	
	Для каждого СтрокаПлатеж Из РасшифровкаПлатежа Цикл
		СтрокаПлатеж.ВалютаДокумента = Объект.ВалютаДокумента;
		
		Если ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
			СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов     = СвойстваДоговоров[
				СтрокаПлатеж.ДоговорКонтрагента].ВалютаВзаиморасчетов;
			СтрокаПлатеж.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах = СвойстваДоговоров[
				СтрокаПлатеж.ДоговорКонтрагента].РасчетыВУсловныхЕдиницах;
			
			Форма.ЕстьРасчетыВУсловныхЕдиницах = Форма.ЕстьРасчетыВУсловныхЕдиницах
				ИЛИ СтрокаПлатеж.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах;
		Иначе
			СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов     = Справочники.Валюты.ПустаяСсылка();
			СтрокаПлатеж.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах = Ложь;
		КонецЕсли;
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация Тогда
			Если ЗначениеЗаполнено(СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом) Тогда
				СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом);
				Для Индекс = 1 По 3 Цикл
					СтрокаПлатеж["СубконтоКт" + Индекс + "Доступность"] = Индекс <= СвойстваСчета.КоличествоСубконто;
				КонецЦикла;
				
				СтрокаПлатеж.ПодразделениеКтДоступность = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(
					СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом).УчетПоПодразделениям;
			Иначе
				СтрокаПлатеж.ПодразделениеКтДоступность = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаПлатеж.ПорядокОтраженияАванса) И СписокПредставлений <> Неопределено Тогда
			СтрокаПлатеж.ПолеОтражениеАванса = УчетУСНКлиентСервер.ПредставлениеПорядкаОтраженияАванса(СтрокаПлатеж.ПорядокОтраженияАванса,
				Форма.ПорядокОтраженияАвансаСоответствиеЗначений, СписокПредставлений);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЭтоОднострочнаяФорма И РасшифровкаПлатежа.Количество() = 1 Тогда
		ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(Форма, Истина, РасшифровкаПлатежа[0]);
	Иначе
		Если Форма.ЕстьРасчетыВУсловныхЕдиницах И НазваниеТабличнойЧасти = "РасшифровкаПлатежа" Тогда
			Для каждого СтрокаПлатеж Из РасшифровкаПлатежа Цикл
				ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ЗаполнитьНадписиВРасшифровке(СтрокаПлатеж);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция НовыеПараметрыПриИзмененииСчетаОрганизации(Знач ПараметрыОбъекта)
	
	СвойстваСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ПараметрыОбъекта.СчетОрганизации, "ВалютаДенежныхСредств, ПодразделениеОрганизации");
	НоваяВалюта   = СвойстваСчета.ВалютаДенежныхСредств;
	
	Если ПараметрыОбъекта.ВалютаДокумента = НоваяВалюта Тогда
		Возврат Новый Структура(
			"ВалютаДокумента, ПодразделениеОрганизации, СчетКонтрагента, КурсДокумента, КратностьДокумента",
			НоваяВалюта, СвойстваСчета.ПодразделениеОрганизации, ПараметрыОбъекта.СчетКонтрагента,
			ПараметрыОбъекта.КурсДокумента, ПараметрыОбъекта.КратностьДокумента);
	КонецЕсли;
	
	НоваяВалюта    = ?(НоваяВалюта = Неопределено, ПараметрыОбъекта.ВалютаРегламентированногоУчета, НоваяВалюта);
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НоваяВалюта, ПараметрыОбъекта.Дата);
	
	НовыйСчетКонтрагента = Справочники.БанковскиеСчета.ПустаяСсылка();
	Если ЗначениеЗаполнено(ПараметрыОбъекта.Контрагент) Тогда
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(
			НовыйСчетКонтрагента, ПараметрыОбъекта.Контрагент, СвойстваСчета.ВалютаДенежныхСредств);
	КонецЕсли;
	
	Если Документы.ПоступлениеНаРасчетныйСчет.ЕстьРасшифровкаПлатежа(ПараметрыОбъекта.ВидОперации) Тогда
		ВалютаОбъекта = ПараметрыОбъекта.ВалютаДокумента;
		ПараметрыОбъекта.ВалютаДокумента = НоваяВалюта;
		
		ПользовательУправляетСчетамиУчета = СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета();
		Если НЕ ПользовательУправляетСчетамиУчета Тогда
			ПараметрыОбъекта.ОплатаВВалюте = НоваяВалюта <> ПараметрыОбъекта.ВалютаРегламентированногоУчета;
		КонецЕсли;
		
		НовыеПараметры = СвойстваСтрокРасшифровкиПлатежаСервер(ПараметрыОбъекта, Истина);
		
		ПараметрыОбъекта.ВалютаДокумента = ВалютаОбъекта;
		
		Если НЕ ПользовательУправляетСчетамиУчета Тогда
			НовыеПараметры.Вставить("ОплатаВВалюте", ПараметрыОбъекта.ОплатаВВалюте);
		КонецЕсли;
		
	Иначе
		НовыеПараметры = Новый Структура;
	КонецЕсли;
	
	НовыеПараметры.Вставить("ВалютаДокумента",          НоваяВалюта);
	НовыеПараметры.Вставить("ПодразделениеОрганизации", СвойстваСчета.ПодразделениеОрганизации);
	НовыеПараметры.Вставить("КурсДокумента",            СтруктураКурса.Курс);
	НовыеПараметры.Вставить("КратностьДокумента",       СтруктураКурса.Кратность);
	НовыеПараметры.Вставить("СчетКонтрагента",          НовыйСчетКонтрагента);
	
	Если ПараметрыОбъекта.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
		НовыеПараметры.Вставить("КурсНаДатуПриобретенияРеализацииВалюты", СтруктураКурса.Курс);
	КонецЕсли;
	
	Возврат НовыеПараметры;
	
КонецФункции

Функция НовыеПараметрыПриИзмененииОрганизации(Знач ПараметрыОбъекта)
	
	НовыйСчетОрганизации = Справочники.БанковскиеСчета.ПустаяСсылка();
	Если ЗначениеЗаполнено(ПараметрыОбъекта.Организация) Тогда
		// Не нужно учитывать валюту документа, если у организации 1 банковский счет.
		// Т.к. в этом случае счет подставится в документ автоматически (и будет скрыт).
		// И уже этот счет определит новую валюту документа.
		УчитыватьВалюту = Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(ПараметрыОбъекта.Организация);
		
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(
			НовыйСчетОрганизации, ПараметрыОбъекта.Организация,
			ПараметрыОбъекта.ВалютаРегламентированногоУчета, НЕ ПараметрыОбъекта.ОплатаВВалюте,
			УчитыватьВалюту);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НовыйСчетОрганизации) Тогда
		ПараметрыОбъекта.Вставить("СчетОрганизации", НовыйСчетОрганизации);
		НовыеПараметры = НовыеПараметрыПриИзмененииСчетаОрганизации(ПараметрыОбъекта);
	Иначе
		НовыеПараметры = Новый Структура("ВалютаДокумента, ПодразделениеОрганизации", ПараметрыОбъекта.ВалютаДокумента);
	КонецЕсли;
	
	Если НЕ НовыеПараметры.Свойство("ДоговорКонтрагента")
		И Документы.ПоступлениеНаРасчетныйСчет.ЕстьРасшифровкаПлатежа(ПараметрыОбъекта.ВидОперации) Тогда
		
		СвойстваПлатежа = СвойстваСтрокРасшифровкиПлатежаСервер(ПараметрыОбъекта, Истина);
		Для каждого СвойствоПлатежа Из СвойстваПлатежа Цикл
			НовыеПараметры.Вставить(СвойствоПлатежа.Ключ, СвойствоПлатежа.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПараметрыОбъекта.ПрименениеУСН ИЛИ ПараметрыОбъекта.ПрименяетсяОсобыйПорядокНалогообложения Тогда
		НовыеПараметры.Вставить("СтавкаНДС", Перечисления.СтавкиНДС.БезНДС);
	КонецЕсли;
	
	НовыеПараметры.Вставить("СчетОрганизации", НовыйСчетОрганизации);
	
	Возврат НовыеПараметры;
	
КонецФункции

Функция НовыеПараметрыПриИзмененииКонтрагента(Знач ПараметрыОбъекта)
	
	НовыйСчетКонтрагента = Справочники.БанковскиеСчета.ПустаяСсылка();
	Если ЗначениеЗаполнено(ПараметрыОбъекта.Контрагент) Тогда
		// Найти подходящий под условия расчетный счет
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(
			НовыйСчетКонтрагента,
			ПараметрыОбъекта.Контрагент,
			ПараметрыОбъекта.ВалютаДокумента,
			Истина); // Валюта документа и банковского счета контрагента должна совпадать
	КонецЕсли;
	
	Если Документы.ПоступлениеНаРасчетныйСчет.ЕстьРасшифровкаПлатежа(ПараметрыОбъекта.ВидОперации) Тогда
		НовыеПараметры = СвойстваСтрокРасшифровкиПлатежаСервер(ПараметрыОбъекта, Истина);
	Иначе
		НовыеПараметры = Новый Структура;
	КонецЕсли;
	
	НовыеПараметры.Вставить("СчетКонтрагента", НовыйСчетКонтрагента);
	
	Возврат НовыеПараметры;
	
КонецФункции

Функция НовыеПараметрыПриИзменении(Знач ПараметрыОбъекта, Знач ОплатаВВалюте)
	
	Если ОплатаВВалюте <> ПараметрыОбъекта.ОплатаВВалюте Тогда
		ОплатаВВалютеПредыдущий   = ПараметрыОбъекта.ОплатаВВалюте;
		СчетОрганизацииПредыдущий = ПараметрыОбъекта.СчетОрганизации;
		
		НовыйСчетОрганизации      = Справочники.БанковскиеСчета.ПустаяСсылка();
		Если ЗначениеЗаполнено(ПараметрыОбъекта.Организация) Тогда
			УчетДенежныхСредствБП.УстановитьБанковскийСчет(
				НовыйСчетОрганизации, ПараметрыОбъекта.Организация,
				ПараметрыОбъекта.ВалютаРегламентированногоУчета, ОплатаВВалютеПредыдущий);
		КонецЕсли;
		
		// необходимо временно поменять этот параметр, чтобы получить договор по изменившейся валюте
		ПараметрыОбъекта.ОплатаВВалюте = ОплатаВВалюте;
		ПараметрыОбъекта.Вставить("СчетОрганизации", НовыйСчетОрганизации);
		НовыеПараметры = НовыеПараметрыПриИзмененииСчетаОрганизации(ПараметрыОбъекта);
		НовыеПараметры.Вставить("СчетОрганизации",   НовыйСчетОрганизации);
		
		// восстановим значение параметров
		ПараметрыОбъекта.ОплатаВВалюте   = ОплатаВВалютеПредыдущий;
		ПараметрыОбъекта.СчетОрганизации = СчетОрганизацииПредыдущий;
	Иначе
		
		НовыеПараметры = Новый Структура("ВалютаДокумента", ПараметрыОбъекта.ВалютаДокумента);
		
	КонецЕсли;
	
	НовыеПараметры.Вставить("ОплатаВВалюте", ОплатаВВалюте);
	
	Возврат НовыеПараметры;
	
КонецФункции

Функция ТекущиеПараметрыОбъекта(Форма)
	
	ПараметрыОбъекта = Новый Структура(
		"Дата, ВидОперации, Организация, СчетОрганизации, ВалютаДокумента,
		|Контрагент, СчетКонтрагента, СчетБанк, ОтражатьРазницуВКурсеВСоставеОперационныхРасходов");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Форма.Объект);
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента",
		?(Форма.СвойстваПлатежа = Неопределено, Неопределено,   Форма.СвойстваПлатежа.ДоговорКонтрагента));
	ПараметрыОбъекта.Вставить("СтатьяДвиженияДенежныхСредств",
		?(Форма.СвойстваПлатежа = Неопределено, Неопределено,   Форма.СвойстваПлатежа.СтатьяДвиженияДенежныхСредств));
	ПараметрыОбъекта.Вставить("ВалютаРегламентированногоУчета", Форма.ВалютаРегламентированногоУчета);
	ПараметрыОбъекта.Вставить("ОплатаВВалюте",                  Форма.ОплатаВВалюте);
	ПараметрыОбъекта.Вставить("ПрименениеУСН",                  Форма.ПрименениеУСН);
	ПараметрыОбъекта.Вставить("ПрименяетсяОсобыйПорядокНалогообложения", Форма.ПрименяетсяОсобыйПорядокНалогообложения);
	ПараметрыОбъекта.Вставить("КурсДокумента",                  Форма.КурсДокумента);
	ПараметрыОбъекта.Вставить("КратностьДокумента",             Форма.КратностьДокумента);
	
	Возврат ПараметрыОбъекта;
	
КонецФункции

Функция ОплаченныеСчета(Форма)
	
	Объект = Форма.Объект;
	РасшифровкаПлатежа = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ПолучитьРасшифровкаПлатежа(Форма);
	
	ОплаченныеСчета = Новый Массив;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя Тогда
		
		УникальныеЗначения = Новый Соответствие;
		
		Если ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ФормаДокументаОднострочная(Форма)
			И Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
			СтрокаРасшифровки = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ДанныеРасшифровкиПлатежаОднострочнойФормы(Форма);
			Если ЗначениеЗаполнено(СтрокаРасшифровки.СчетНаОплату) Тогда
				ОплаченныеСчета.Добавить(СтрокаРасшифровки.СчетНаОплату);
			КонецЕсли;
		Иначе
			Для каждого СтрокаРасшифровки Из РасшифровкаПлатежа Цикл
				СчетНаОплату = СтрокаРасшифровки.СчетНаОплату;
				Если ЗначениеЗаполнено(СчетНаОплату) И УникальныеЗначения[СчетНаОплату] = Неопределено Тогда
					ОплаченныеСчета.Добавить(СчетНаОплату);
					УникальныеЗначения.Вставить(СчетНаОплату, Истина);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОплаченныеСчета;
	
КонецФункции

Функция ЭтоРасчетыПоКредитамИЗаймам(ВидОперации)
	
	Возврат ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаКонтрагентом
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеЗайма
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеКредита
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
	
КонецФункции

Функция ЭтоПеремещениеДенежныхСредств(ВидОперации)
	
	Возврат ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПереводСДругогоСчета
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВзносНаличными
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ЛичныеСредстваПредпринимателя;
	
КонецФункции

Функция ВидимостьАналитики(ВидОперации)
	
	Возврат НЕ ЭтоПеремещениеДенежныхСредств(ВидОперации)
		И ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаРаботником;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииУСН

Функция ОтображатьПорядокОтраженияАвансаДляУСН(Форма)
	
	Объект = Форма.Объект;
	
	Если Форма.ПрименениеУСН ИЛИ Форма.ПрименяетсяУСНПатент Тогда
		Возврат УчетУСН.ЕстьАвансыПокупателей(Объект.ВидОперации);
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура УправлениеЭлементамиОтраженияВУСННаСервере(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если НЕ ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ФормаРасшифровкиПлатежа(Форма) Тогда
		// видимость элементов на закладке "Прочее"
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление Тогда
			Элементы.ГруппаОтражениеВУСН.Видимость = Форма.ПрименениеУСН;
		Иначе
			Элементы.ГруппаОтражениеВУСН.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	НазваниеТабличнойЧасти = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.НазваниеТаблицыРасшифровкиПлатежа(Объект.ВидОперации);
	Если НазваниеТабличнойЧасти <> "РасшифровкаПлатежа" Тогда
		Возврат;
	КонецЕсли;
	
	// Видимость элементов настройки отражения в НУ (аванса и КУДиР):
	// 
	// Для оплаты от покупателя, возврата поставщику и поступлений по плат. картам
	// отображается порядок отражения аванса в НУ (с учетом функциональных опций)
	//
	// Для остальных видов операций:
	// - Если выключена ФО "ПрименениеУСН", то элементы настройки КУДиР не отображаются
	// - Если применяется УСН, элементы настройки КУДиР отображаются,
	//   состав отображаемых элементов зависит от вида операции и ФО формы
	
	// видимость элементов ТЧ "Расшифровка платежа"
	ОтображатьДоходыУСН              = Ложь;
	Если Форма.ПрименениеУСН И УчетУСН.ТребуетсяНастройкаДоходовПоПрочимРасчетам(Объект.ВидОперации) Тогда
		ОтображатьДоходыУСН = Истина;
	КонецЕсли;
	
	ОтображатьПорядокОтраженияАванса = ОтображатьПорядокОтраженияАвансаДляУСН(Форма);
	
	ЕстьТабличнаяЧасть = Элементы.Найти(НазваниеТабличнойЧасти) <> Неопределено;
	Префикс = ?(ЕстьТабличнаяЧасть, НазваниеТабличнойЧасти, "");
	
	ЗаполнитьСписокВыбораПорядкаОтраженияАвансаВТЧ(Форма, ЕстьТабличнаяЧасть);
	
	Элементы[Префикс + "ПолеОтражениеАванса"].Видимость = ОтображатьПорядокОтраженияАванса
		И Форма.ПорядокОтраженияАвансаСоответствиеЗначений <> Неопределено
		И Форма.ПорядокОтраженияАвансаСоответствиеЗначений.Количество() > 1;
	Элементы[Префикс + "ДоходыУСН"].Видимость           = ОтображатьДоходыУСН;
	
	// прочие настройки элементов формы
	УстановитьЗаголовкиКолонокУСН(Форма);
	
	Если ЕстьТабличнаяЧасть Тогда
		НастроитьРеквизитыСчетовУчетаАвансаДляУСН(Форма, ОтображатьПорядокОтраженияАванса);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЗаголовкиКолонокУСН(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если НЕ Форма.ПрименениеУСН И НЕ УчетУСН.ТребуетсяНастройкаДоходовПоПрочимРасчетам(Объект.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	НазваниеТабличнойЧасти = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.НазваниеТаблицыРасшифровкиПлатежа(Объект.ВидОперации);
	Если НазваниеТабличнойЧасти <> "РасшифровкаПлатежа" Тогда
		Возврат;
	КонецЕсли;
	
	ТабличнаяЧасть = ?(Элементы.Найти(НазваниеТабличнойЧасти) = Неопределено, "", НазваниеТабличнойЧасти);
	
	ЗаголовокДоходыУСН = НСтр("ru = 'Доходы УСН'");
	Если Форма.ОплатаВВалюте Тогда
		ЗаголовокДоходыУСН = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Доходы УСН, %1'"), Форма.ВалютаРегламентированногоУчета);
	КонецЕсли;
	
	Элементы[ТабличнаяЧасть + "ДоходыУСН"].Заголовок = ЗаголовокДоходыУСН;
	
КонецПроцедуры

Процедура НастроитьРеквизитыСчетовУчетаАвансаДляУСН(Форма, Знач ОтображатьПорядокОтраженияАванса = Неопределено)
	
	Элементы = Форма.Элементы;
	
	Если ОтображатьПорядокОтраженияАванса = Неопределено Тогда
		ОтображатьПорядокОтраженияАванса = ОтображатьПорядокОтраженияАвансаДляУСН(Форма);
	КонецЕсли;
	
	Если СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
		Элементы.РасшифровкаПлатежаСчетУчетаРасчетовПоАвансамПриУСН.Видимость = ОтображатьПорядокОтраженияАванса;
		Элементы.РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам.Видимость       = НЕ ОтображатьПорядокОтраженияАванса;
	КонецЕсли;
	
	ПоказыватьГруппуАвансов = Элементы.РасшифровкаПлатежаСчетУчетаРасчетовПоАвансамПриУСН.Видимость
		И Элементы.РасшифровкаПлатежаПолеОтражениеАванса.Видимость;
	// Если счет авансов и порядок отражения выводятся в группе, то должен быть выведен заголовок группы.
	// Если нет - то заголовок поля с порядком отражения.
	Элементы.РасшифровкаПлатежаПолеОтражениеАванса.ОтображатьВШапке   = НЕ ПоказыватьГруппуАвансов;
	Элементы.РасшифровкаПлатежаГруппаОтражениеАванса.ОтображатьВШапке = ПоказыватьГруппуАвансов;
	
	ПоказыватьГруппуСчетов = Элементы.РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам.Видимость;
	// Если счет расчетов и счет аванса выводятся в группе, то должен быть выведен заголовок группы.
	// Если нет - то заголовок счета.
	Элементы.РасшифровкаПлатежаГруппаСчетаРасчетов.ОтображатьВШапке            = ПоказыватьГруппуСчетов;
	Элементы.РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом.ОтображатьВШапке = НЕ ПоказыватьГруппуСчетов;
	
КонецПроцедуры

Процедура ЗаполнитьСписокВыбораПорядкаОтраженияАвансаВТЧ(Форма, Знач ЕстьТабличнаяЧасть)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если НЕ Форма.ПрименениеУСН И НЕ Форма.ПрименяетсяУСНПатент Тогда
		Возврат;
	КонецЕсли;
	
	ПолеДляОбработки = Неопределено;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика Тогда
		
		ТабличнаяЧасть = ?(ЕстьТабличнаяЧасть, "РасшифровкаПлатежа", "");
		ПолеДляОбработки = Элементы[ТабличнаяЧасть + "ПолеОтражениеАванса"];
		
	КонецЕсли;
	
	Если НЕ ПолеДляОбработки = Неопределено Тогда
		НалоговыйУчетУСН.ЗаполнитьСписокВыбораПорядкаОтраженияАвансовДляТЧ(ПолеДляОбработки,
			Форма.ПорядокОтраженияАвансаСоответствиеЗначений, Объект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОтражениеВУСННаСервере(Форма, ЗаполнитьСуммы = Истина, ЗаполнитьСодержание = Ложь) Экспорт
	
	Объект = Форма.Объект;
	
	ПараметрыУСН = УчетУСНКлиентСервер.ПараметрыФормыДокументаДляУСН(Форма);
	
	Если ЗаполнитьСуммы Тогда
		НалоговыйУчетУСН.ЗаполнитьОтражениеДокументаВУСН(Объект, ПараметрыУСН);
	КонецЕсли;
	
	Если ЗаполнитьСодержание И УчетУСН.СодержаниеУСНРедактируетсяПользователем(Объект) Тогда
		НалоговыйУчетУСН.ЗаполнитьОтображаемоеСодержаниеКУДиР(Объект, ПараметрыУСН);
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаУстановитьПорядокОтраженияАванса(СтрокаПлатеж, Форма)
	
	// устанавливаем порядок отражения аванса по умолчанию
	СтрокаПлатеж.ПорядокОтраженияАванса = Форма.СвойстваПлатежа.ПорядокОтраженияАванса;
	
КонецПроцедуры

#КонецОбласти

#Область РасшифровкаПлатежа

Процедура ДоговорКонтрагентаПриИзмененииНаСервере(СтрокаПлатеж, Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	ПараметрыОбъекта = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ТекущиеПараметрыОбъекта(Форма);
	ПараметрыОбъекта.ДоговорКонтрагента = СтрокаПлатеж.ДоговорКонтрагента;
	Форма.СвойстваПлатежа = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, Ложь);
	
	ЗаполнитьЗначенияСвойств(СтрокаПлатеж, Форма.СвойстваПлатежа);
	
	ПараметрыЗаполненияСчетовУчета = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(
		"РасшифровкаПлатежа.ДоговорКонтрагента", Объект, СтрокаПлатеж);
	Изменения = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ПоступлениеНаРасчетныйСчет,
		ПараметрыЗаполненияСчетовУчета.КЗаполнению,
		Объект,
		"РасшифровкаПлатежа",
		СтрокаПлатеж,
		Ложь);
	ЗаполнитьЗначенияСвойств(СтрокаПлатеж,          Изменения);
	ЗаполнитьЗначенияСвойств(Форма.СвойстваПлатежа, Изменения);
	
	Если Форма.ПрименениеУСН Тогда
		ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ЗаполнитьОтражениеСтрокиВУСН(СтрокаПлатеж, Форма);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаПлатеж, Форма.СвойстваПлатежа);
	
	ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);
	ПоступлениеНаРасчетныйСчетФормыКлиентСервер.РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, Форма);
	
	Если ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
		Если ЗначениеЗаполнено(Форма.РасшифровкаПлатежаДоговорКонтрагента) Тогда
			Форма.ЕстьРасчетыВУсловныхЕдиницах = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Форма.РасшифровкаПлатежаДоговорКонтрагента, "РасчетыВУсловныхЕдиницах");
		Иначе
			Форма.ЕстьРасчетыВУсловныхЕдиницах = Ложь;
		КонецЕсли;
	Иначе
		ЗаполнитьДобавленныеКолонкиТаблиц(Форма);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Форма.ПредлагатьНовыйДоговор = Ложь;
	КонецЕсли;
	УправлениеФормой(Форма);
	
КонецПроцедуры

Функция СвойстваСтрокРасшифровкиПлатежаСервер(Знач ПараметрыПлатежа, Знач ПолучатьДоговор) Экспорт
	
	СвойстваПлатежа = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ПустаяСтруктураСвойстваПлатежа();
	
	Если ПолучатьДоговор Тогда
		ПараметрыПлатежа.ДоговорКонтрагента = УчетДенежныхСредствБП.ПолучитьДоговорКонтрагента(ПараметрыПлатежа);
	КонецЕсли;
	
	СвойстваПлатежа.ДоговорКонтрагента            = ПараметрыПлатежа.ДоговорКонтрагента;
	СвойстваПлатежа.СпособПогашенияЗадолженности  = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
	СтатьяДДСПоУмолчанию = УчетДенежныхСредствБП.СтатьяДДСПоУмолчанию(ПараметрыПлатежа.ВидОперации);
	СвойстваПлатежа.СтатьяДвиженияДенежныхСредств = ?(ЗначениеЗаполнено(СтатьяДДСПоУмолчанию) ИЛИ ПолучатьДоговор,
		СтатьяДДСПоУмолчанию, ПараметрыПлатежа.СтатьяДвиженияДенежныхСредств);
	
	Если ЗначениеЗаполнено(ПараметрыПлатежа.ДоговорКонтрагента) Тогда
		СвойстваДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ПараметрыПлатежа.ДоговорКонтрагента, "ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах");
		СвойстваПлатежа.ВалютаДокумента                            = ПараметрыПлатежа.ВалютаДокумента;
		СвойстваПлатежа.ДоговорКонтрагентаВалютаВзаиморасчетов     = СвойстваДоговора.ВалютаВзаиморасчетов;
		СвойстваПлатежа.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах = СвойстваДоговора.РасчетыВУсловныхЕдиницах;
		
		Если ПараметрыПлатежа.ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СвойстваДоговора.ВалютаВзаиморасчетов, ПараметрыПлатежа.Дата);
		Иначе
			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ПараметрыПлатежа.ВалютаДокумента, ПараметрыПлатежа.Дата);
		КонецЕсли;
		
		СвойстваПлатежа.КурсВзаиморасчетов      = СтруктураКурса.Курс;
		СвойстваПлатежа.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
		СвойстваПлатежа.КурсНаДатуПриобретенияРеализацииВалюты = СтруктураКурса.Курс;
	Иначе
		
		Если ЗначениеЗаполнено(ПараметрыПлатежа.ВалютаДокумента) Тогда
			СвойстваПлатежа.ВалютаДокумента = ПараметрыПлатежа.ВалютаДокумента;
		Иначе
			СвойстваПлатежа.ВалютаДокумента = ПараметрыПлатежа.ВалютаРегламентированногоУчета;
		КонецЕсли;
		
		СвойстваПлатежа.КурсВзаиморасчетов      = 1;
		СвойстваПлатежа.КратностьВзаиморасчетов = 1;
		СвойстваПлатежа.КурсНаДатуПриобретенияРеализацииВалюты = 1;
	КонецЕсли;
	
	СтавкаНДС = СтавкаНДСРасшифровкиПлатежа(ПараметрыПлатежа.ВидОперации, ПараметрыПлатежа.ДоговорКонтрагента,
		ПараметрыПлатежа.ПрименениеУСН, ПараметрыПлатежа.ПрименяетсяОсобыйПорядокНалогообложения);
	Если СтавкаНДС <> Неопределено Тогда
		СвойстваПлатежа.СтавкаНДС = СтавкаНДС;
	КонецЕсли;
	
	// Порядок отражения аванса по умолчанию
	СвойстваПлатежа.ПорядокОтраженияАванса = НалоговыйУчетУСН.ПорядокОтраженияАванса(ПараметрыПлатежа.Организация, ПараметрыПлатежа.Дата);
	
	Возврат СвойстваПлатежа;
	
КонецФункции

Функция СтавкаНДСРасшифровкиПлатежа(ВидОперации, Договор, ПрименениеУСН, ПрименяетсяОсобыйПорядокНалогообложения) Экспорт
	
	Если ЗначениеЗаполнено(Договор) Тогда
		
		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя Тогда
			Возврат ?(ПрименениеУСН ИЛИ ПрименяетсяОсобыйПорядокНалогообложения, Перечисления.СтавкиНДС.БезНДС, Перечисления.СтавкиНДС.НДС18);
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика Тогда
			ПредъявляетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ПредъявляетНДС");
			Возврат ?(НЕ ПредъявляетНДС, Перечисления.СтавкиНДС.БезНДС, Перечисления.СтавкиНДС.НДС18);
		КонецЕсли;
		
	ИначеЕсли НЕ ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам") Тогда
		
		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя Тогда
			Возврат ?(ПрименениеУСН ИЛИ ПрименяетсяОсобыйПорядокНалогообложения,
				Перечисления.СтавкиНДС.БезНДС, Перечисления.СтавкиНДС.НДС18);
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика Тогда
			Возврат Перечисления.СтавкиНДС.БезНДС;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ИнициализироватьСвойстваПлатежа(Форма, ТолькоСоздатьКлючи = Ложь, ПолучатьДоговор = Ложь, ИнициализироватьСтатьюДДС = Ложь)
	
	Если Форма.СвойстваПлатежа = Неопределено Тогда
		
		Если ТолькоСоздатьКлючи Тогда
			Форма.СвойстваПлатежа = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ПустаяСтруктураСвойстваПлатежа();
			Если ИнициализироватьСтатьюДДС Тогда
				Если ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ФормаДокументаОднострочная(Форма)
					И Форма.Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
					Форма.СвойстваПлатежа.Вставить("СтатьяДвиженияДенежныхСредств", Форма.РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств);
				Иначе
					РасшифровкаПлатежа = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ПолучитьРасшифровкаПлатежа(Форма);
					Форма.СвойстваПлатежа.Вставить("СтатьяДвиженияДенежныхСредств", РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);
				КонецЕсли;
			КонецЕсли;
		Иначе
			ПараметрыОбъекта = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ТекущиеПараметрыОбъекта(Форма);
			Если ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ФормаДокументаОднострочная(Форма)
				И Форма.Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
				ПараметрыОбъекта.Вставить("ДоговорКонтрагента",            Форма.РасшифровкаПлатежаДоговорКонтрагента);
				ПараметрыОбъекта.Вставить("СтатьяДвиженияДенежныхСредств", Форма.РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств);
			Иначе
				РасшифровкаПлатежа = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ПолучитьРасшифровкаПлатежа(Форма);
				ПараметрыОбъекта.Вставить("ДоговорКонтрагента",            РасшифровкаПлатежа[0].ДоговорКонтрагента);
				ПараметрыОбъекта.Вставить("СтатьяДвиженияДенежныхСредств", РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);
			КонецЕсли;
			
			Форма.СвойстваПлатежа = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.СвойстваСтрокРасшифровкиПлатежа(
				ПараметрыОбъекта, ПолучатьДоговор);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьСуммыВзаиморасчетов(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	ПлатежиКПересчету = Новый Массив;
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
		Объект.КурсНаДатуПриобретенияРеализацииВалюты = Форма.КурсДокумента;
		Возврат;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты Тогда
		ПлатежиКПересчету = Объект.РасшифровкаПлатежа;
	Иначе
		Если Объект.ВалютаДокумента <> Форма.ВалютаРегламентированногоУчета Тогда
			ОтборВалюта = Новый Структура("ДоговорКонтрагентаРасчетыВУсловныхЕдиницах, ДоговорКонтрагентаВалютаВзаиморасчетов",
				Ложь, Объект.ВалютаДокумента);
			ПлатежиКИзменениюКурса = Объект.РасшифровкаПлатежа.НайтиСтроки(ОтборВалюта);
			
			Для каждого СтрокаПлатеж Из ПлатежиКИзменениюКурса Цикл
				ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ЗаполнитьПустыеКурсыВалют(СтрокаПлатеж, Форма);
			КонецЦикла;
		КонецЕсли;
		
		Если Форма.ЕстьРасчетыВУсловныхЕдиницах Тогда
			ОтборУЕ = Новый Структура("ДоговорКонтрагентаРасчетыВУсловныхЕдиницах", Истина);
			ПлатежиКПересчету = Объект.РасшифровкаПлатежа.НайтиСтроки(ОтборУЕ);
		КонецЕсли;
	КонецЕсли;
	
	Если ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ФормаДокументаОднострочная(Форма)
		И Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		СтрокаПлатеж = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ДанныеРасшифровкиПлатежаОднострочнойФормы(Форма);
		РассчитатьКурсИСуммуВзаиморасчетов(СтрокаПлатеж, Форма);
		
		ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(Форма, Истина, СтрокаПлатеж);
	Иначе
		Для каждого СтрокаПлатеж Из ПлатежиКПересчету Цикл
			РассчитатьКурсИСуммуВзаиморасчетов(СтрокаПлатеж, Форма);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЗаголовкиКолонокРасшифровкаПлатежа(Форма, ТабличнаяЧасть)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если НЕ ЗначениеЗаполнено(ТабличнаяЧасть) ИЛИ Элементы.Найти(ТабличнаяЧасть) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.ВестиУчетПоДоговорам И (ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиДвиженияДенежныхСредств")) Тогда
		ЗаголовокДоговорСтатьяДДС = НСтр("ru = 'Договор / Статья ДДС'");
	ИначеЕсли Форма.ВестиУчетПоДоговорам Тогда
		ЗаголовокДоговорСтатьяДДС = НСтр("ru = 'Договор'");
	Иначе
		ЗаголовокДоговорСтатьяДДС = НСтр("ru = 'Статья ДДС'");
	КонецЕсли;
	
	Если ТабличнаяЧасть = "РасшифровкаПлатежаПокупкаВалюты" Тогда
		Элементы.РасшифровкаПлатежаПокупкаВалютыГруппаДоговор.Заголовок = ЗаголовокДоговорСтатьяДДС;
	ИначеЕсли ТабличнаяЧасть = "РасшифровкаПлатежаПродажаВалюты" Тогда
		Элементы.РасшифровкаПлатежаГруппаДоговорСтатьяДДС.Заголовок = ЗаголовокДоговорСтатьяДДС;
	ИначеЕсли ТабличнаяЧасть = "РасшифровкаПлатежа" Тогда
		Элементы.РасшифровкаПлатежаГруппаДоговор.Заголовок = ЗаголовокДоговорСтатьяДДС;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьОграничениеТипаКонтрагента(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаРаботником Тогда
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
		Элементы.Контрагент.ПодсказкаВвода  = "";
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ЛичныеСредстваПредпринимателя
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПереводСДругогоСчета
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВзносНаличными Тогда
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("Неопределено");
		Элементы.Контрагент.ПодсказкаВвода  = "";
	Иначе
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		Элементы.Контрагент.ПодсказкаВвода  = НСтр("ru = 'Введите ИНН или наименование'");
	КонецЕсли;
	
КонецПроцедуры

Функция ГруппаРасшифровкаПлатежа(ВидОперации)
	
	ГруппаРасшифровкаПлатежаТаблица = "ГруппаРасшифровкаПлатежа";
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация Тогда
		ГруппаРасшифровкаПлатежаТаблица = "ГруппаИнкассацияАналитика";
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты Тогда
		ГруппаРасшифровкаПлатежаТаблица = "ГруппаРасшифровкаПлатежаПродажаВалюты";
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
		ГруппаРасшифровкаПлатежаТаблица = "ГруппаРасшифровкаПлатежаПокупкаВалюты";
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам Тогда
		// не вся "ГруппаРасшифровкаПлатежаПлатежныеКарты", т.к. комиссия банка в этом случае у нас не табличная и должна остаться на форме
		ГруппаРасшифровкаПлатежаТаблица = "ГруппаПлатежныеКартыАналитика";
	КонецЕсли;
	
	Возврат ГруппаРасшифровкаПлатежаТаблица;
	
КонецФункции

Функция ВидОперацииСТабличнойЧастью(ВидОперации) Экспорт
	
	Возврат Документы.ПоступлениеНаРасчетныйСчет.ЕстьРасшифровкаПлатежа(ВидОперации, Ложь);
	
КонецФункции

#КонецОбласти

#Область СчетаУчета

Процедура УстановитьВидимостьСчетовУчета(Форма) Экспорт
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ЭлементыСчетов = Новый Массив();
	ЭлементыСчетов.Добавить("РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом");
	ЭлементыСчетов.Добавить("РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам");
	ЭлементыСчетов.Добавить("РасшифровкаПлатежаСчетУчетаРасчетовПоАвансамПриУСН");
	ЭлементыСчетов.Добавить("ГруппаРасшифровкаПлатежаИнкассацияГруппаСчетКредитаПодразделение");
	ЭлементыСчетов.Добавить("ГруппаРасшифровкаПлатежаИнкассацияГруппаСубконто");
	ЭлементыСчетов.Добавить("РасшифровкаПлатежаПокупкаВалютыСчетУчетаРасчетовСКонтрагентом");
	ЭлементыСчетов.Добавить("РасшифровкаПлатежаПродажаВалютыСчетУчетаРасчетовСКонтрагентом");
	ЭлементыСчетов.Добавить("РасшифровкаПлатежаПлатежныеКартыСчетУчетаРасчетовСКонтрагентом");
	ЭлементыСчетов.Добавить("ГруппаПлатежныеКартыУслугиБанка");
	ЭлементыСчетов.Добавить("СчетУчетаРасчетовСКонтрагентом");
	ЭлементыСчетов.Добавить("СчетУчетаРасчетовПоАвансам");
	ЭлементыСчетов.Добавить("ГруппаИнкассацияНадписиСчета");
	ЭлементыСчетов.Добавить("ГруппаИнкассацияСчета");
	ЭлементыСчетов.Добавить("ПокупкаВалютыСчетУчетаРасчетовСКонтрагентом");
	ЭлементыСчетов.Добавить("СчетУчетаРасчетовСКонтрагентомПродажаВалюты");
	ЭлементыСчетов.Добавить("ПлатежныеКартыСчетУчетаРасчетовСКонтрагентом");
	ЭлементыСчетов.Добавить("ГруппаПоляСчетСубконтоУслугиБанка");
	
	СчетаУчетаВДокументах.УстановитьВидимостьСчетовУчета(Элементы, ЭлементыСчетов);
	
	Если НЕ ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ФормаРасшифровкиПлатежа(Форма) Тогда
		Элементы.СчетБанк.Видимость = СчетБанкаВиден(Форма);
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПереводСДругогоСчета Тогда
			Элементы.ГруппаСтатьяДДС.Видимость = УчетнаяПолитика.ИспользоватьПереводыВПутиПриПеремещенияДенежныхСредств(Объект.Организация, Объект.Дата);
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВзносНаличными Тогда
			Элементы.ГруппаСтатьяДДС.Видимость = УчетнаяПолитика.ИспользоватьПереводыВПутиПриПеремещенияДенежныхСредств(Объект.Организация, Объект.Дата);
		Иначе
			Элементы.ГруппаСтатьяДДС.Видимость = Истина;
		КонецЕсли;
	КонецЕсли;
	
	НазваниеТабличнойЧасти = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.НазваниеТаблицыРасшифровкиПлатежа(Объект.ВидОперации);
	Если НазваниеТабличнойЧасти = "РасшифровкаПлатежа" Тогда
		ЕстьТабличнаяЧасть = Элементы.Найти(НазваниеТабличнойЧасти) <> Неопределено;
		Если ЕстьТабличнаяЧасть Тогда
			НастроитьРеквизитыСчетовУчетаАвансаДляУСН(Форма);
		КонецЕсли;
		
		// Вне зависимости от настроек пользователя для отдельных видов операций некоторые счета видны
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам Тогда
			Если ЕстьТабличнаяЧасть Тогда
				Элементы.РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом.Видимость = Истина;
			Иначе
				Элементы.СчетУчетаРасчетовСКонтрагентом.Видимость = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСчетаУчета(Форма, ПричинаИзменения, ПричиныИзменения)
	
	Объект = Форма.Объект;
	
	Если СчетаУчетаВДокументахКлиентСервер.МожноНачатьЗаполнениеСчетовУчета(ПричинаИзменения, ПричиныИзменения) Тогда
		
		ПараметрыЗаполнения = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(ПричиныИзменения, Объект);
		
		Если ПричиныИзменения.Найти("СчетБанк") <> Неопределено Тогда
			// Если видны счета, то при изменении счета банка может быть изменен банковский счет организации.
			// А изменение банковского счета организации в общем случае приводит к установке счета банка.
			// В конкретном случае этого нужно избежать.
			ПараметрыЗаполнения.КЗаполнению.Удалить("СчетБанк");
		КонецЕсли;
		
		Если СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
			
			// В этом режиме только автоматическое изменение валюты (запрет оформления в иностранной валюте)
			// должен приводить к смене счета.
			
			Если ПричиныИзменения.Найти("СчетБанк") <> Неопределено Тогда
				ПараметрыЗаполнения.КЗаполнению.Удалить("СчетБанк");
			КонецЕсли;
			
		КонецЕсли;
		
		СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(ПараметрыЗаполнения);
		
	КонецЕсли;
	
КонецПроцедуры

Функция СчетБанкаВиден(Форма) Экспорт
	
	Используется57Счет = УчетнаяПолитика.ИспользоватьПереводыВПутиПриПеремещенияДенежныхСредств(Форма.Объект.Организация, Форма.Объект.Дата);
	
	Если НЕ Используется57Счет Тогда
		Если Форма.Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВзносНаличными
			ИЛИ Форма.Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПереводСДругогоСчета Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета();
	
КонецФункции

#КонецОбласти

#Область УсловноеОформление

Процедура УстановитьУсловноеОформление(Форма) Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	
	НачалоПутиКДаннымТЧ = "Объект.";
	Если ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ФормаРасшифровкиПлатежа(Форма) Тогда
		НачалоПутиКДаннымТЧ = "";
	КонецЕсли;
	
	Форма.НастройкиУсловногоОформления = Новый Структура();
	
	УсловноеОформление.Элементы.Очистить();
	
	ФормаДокументаОднострочная = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ФормаДокументаОднострочная(Форма);
	
	// Условное оформление, связанное с видимостью, устанавливаем сразу для всех колонок.
	УстановитьУсловноеОформлениеШапкаИВидимость(Форма, НачалоПутиКДаннымТЧ, ФормаДокументаОднострочная);
	
	Если ФормаДокументаОднострочная Тогда
		Возврат;
	КонецЕсли;
	
	// Условное оформление для полей, расположенных на страницах
	
	ОбновитьУсловноеОформление(Форма);
	
КонецПроцедуры

Процедура ОбновитьУсловноеОформление(Форма) Экспорт
	
	Если ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	
	НачалоПутиКДаннымТЧ = "Объект.";
	Если ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ФормаРасшифровкиПлатежа(Форма) Тогда
		НачалоПутиКДаннымТЧ = "";
	КонецЕсли;
	
	Если НЕ Форма.НастройкиУсловногоОформления.Свойство("РасшифровкаПлатежаИнкассацияПроинициализировано")
		И Элементы.ГруппаИнкассация.Видимость
		И Элементы.Найти("РасшифровкаПлатежаИнкассация") <> Неопределено Тогда
		
		УстановитьУсловноеОформлениеРасшифровкаПлатежаИнкассация(Форма, НачалоПутиКДаннымТЧ);
		
	ИначеЕсли НЕ Форма.НастройкиУсловногоОформления.Свойство("РасшифровкаПлатежаПокупкаВалютыПроинициализировано")
		И Элементы.ГруппаПокупкаВалюты.Видимость
		И Элементы.Найти("РасшифровкаПлатежаПокупкаВалюты") <> Неопределено Тогда
		
		УстановитьУсловноеОформлениеРасшифровкаПлатежаПокупкаВалюты(Форма, НачалоПутиКДаннымТЧ);
		
	ИначеЕсли НЕ Форма.НастройкиУсловногоОформления.Свойство("РасшифровкаПлатежаПродажаВалютыПроинициализировано")
		И Элементы.ГруппаПродажаВалюты.Видимость
		И Элементы.Найти("РасшифровкаПлатежаПродажаВалюты") <> Неопределено Тогда
		
		УстановитьУсловноеОформлениеРасшифровкаПлатежаПродажаВалюты(Форма, НачалоПутиКДаннымТЧ);
		
	ИначеЕсли НЕ Форма.НастройкиУсловногоОформления.Свойство("РасшифровкаПлатежаПроинициализировано")
		И Элементы.ГруппаРасчетыСКонтрагентами.Видимость
		И Элементы.Найти("РасшифровкаПлатежа") <> Неопределено Тогда
		
		УстановитьУсловноеОформлениеРасшифровкаПлатежа(Форма, НачалоПутиКДаннымТЧ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеШапкаИВидимость(Форма, НачалоПутиКДаннымТЧ, ФормаДокументаОднострочная)
	
	УсловноеОформление = Форма.УсловноеОформление;
	
	// Контрагент
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Контрагент");
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "ВидОперации",
		ВидСравненияКомпоновкиДанных.ВСписке,
		СписокЗначений);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// Сумма
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СуммаДокумента");
	
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		НачалоПутиКДаннымТЧ + "ВидОперации",
		ВидСравненияКомпоновкиДанных.Равно,
		Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		НачалоПутиКДаннымТЧ + "СуммаУслуг",
		ВидСравненияКомпоновкиДанных.НеРавно,
		0);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// ПлатежныеКартыСуммаУслуг
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПлатежныеКартыСуммаУслуг");
	
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		НачалоПутиКДаннымТЧ + "ВидОперации",
		ВидСравненияКомпоновкиДанных.Равно,
		Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		НачалоПутиКДаннымТЧ + "СуммаДокумента",
		ВидСравненияКомпоновкиДанных.НеРавно,
		0);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	Если ФормаДокументаОднострочная Тогда
		Возврат;
	КонецЕсли;
	
	// Реквизиты не отображаются при расчетах по займам и прочих расчетах с контрагентами.
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСпособПогашенияЗадолженности");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСделка");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСтавкаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСуммаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам");
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаНадписьКурс");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаНадписьСумма");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаДоговорКонтрагентаВалютаВзаиморасчетов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаКурсВзаиморасчетов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСуммаВзаиморасчетов");
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаКонтрагентом);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеЗайма);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеКредита);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "ВидОперации", ВидСравненияКомпоновкиДанных.ВСписке, СписокЗначений);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// РасшифровкаПлатежаСчетНаОплату
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСчетНаОплату");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "ВидОперации",
		ВидСравненияКомпоновкиДанных.НеРавно,
		Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Реквизиты отображаются только при расчетах в у.е.
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаНадписьВалюта");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаНадписьКурс");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаНадписьСумма");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаКурсВзаиморасчетов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСуммаВзаиморасчетов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаДоговорКонтрагентаВалютаВзаиморасчетов");
	
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		"ЕстьРасчетыВУсловныхЕдиницах",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.ДоговорКонтрагента",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// РасшифровкаПлатежаИнкассацияСубконтоКт2
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаИнкассацияСубконтоКт2");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.СубконтоКт2Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// РасшифровкаПлатежаИнкассацияСубконтоКт3
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаИнкассацияСубконтоКт3");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.СубконтоКт3Доступность",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// РасшифровкаПлатежаСделка
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСделка");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.СпособПогашенияЗадолженности",
		ВидСравненияКомпоновкиДанных.НеРавно,
		Перечисления.СпособыПогашенияЗадолженности.ПоДокументу);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// РасшифровкаПлатежаИнкассацияПодразделениеКт
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаИнкассацияПодразделениеКт");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.ПодразделениеКтДоступность",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// РасшифровкаПлатежаПлатежныеКартыСуммаПлатежа
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаПлатежныеКартыСуммаПлатежа");
	
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		НачалоПутиКДаннымТЧ + "ВидОперации",
		ВидСравненияКомпоновкиДанных.Равно,
		Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.СуммаУслуг",
		ВидСравненияКомпоновкиДанных.НеРавно,
		0);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// РасшифровкаПлатежаПлатежныеКартыСуммаУслуг
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаПлатежныеКартыСуммаУслуг");
	
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		НачалоПутиКДаннымТЧ + "ВидОперации",
		ВидСравненияКомпоновкиДанных.Равно,
		Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.СуммаПлатежа",
		ВидСравненияКомпоновкиДанных.Равно,
		0);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.СуммаУслуг",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеРасшифровкаПлатежа(Форма, НачалоПутиКДаннымТЧ)
	
	УсловноеОформление           = Форма.УсловноеОформление;
	НастройкиУсловногоОформления = Форма.НастройкиУсловногоОформления;
	
	НастройкиУсловногоОформления.Вставить("РасшифровкаПлатежаПроинициализировано", Истина);
	
	// РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.СпособПогашенияЗадолженности",
		ВидСравненияКомпоновкиДанных.Равно,
		Перечисления.СпособыПогашенияЗадолженности.НеПогашать);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "ВидОперации",
		ВидСравненияКомпоновкиДанных.Равно,
		Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Нет>'"));
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.СпособПогашенияЗадолженности",
		ВидСравненияКомпоновкиДанных.Равно,
		Перечисления.СпособыПогашенияЗадолженности.НеПогашать);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "ВидОперации",
		ВидСравненияКомпоновкиДанных.Равно,
		Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Нет>'"));
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// РасшифровкаПлатежаКурсВзаиморасчетов, РасшифровкаПлатежаСуммаВзаиморасчетов
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаКурсВзаиморасчетов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСуммаВзаиморасчетов");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// РасшифровкаПлатежаСуммаНДС
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСуммаНДС");
	
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.СтавкаНДС",
		ВидСравненияКомпоновкиДанных.Равно,
		Перечисления.СтавкиНДС.НДС0);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора1,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.СтавкаНДС",
		ВидСравненияКомпоновкиДанных.Равно,
		Перечисления.СтавкиНДС.БезНДС);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// РасшифровкаПлатежаСделка
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСделка");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.Сделка",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Документ>'"));
	
	// РасшифровкаПлатежаСделка
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСделка");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.СпособПогашенияЗадолженности",
		ВидСравненияКомпоновкиДанных.НеРавно,
		Перечисления.СпособыПогашенияЗадолженности.ПоДокументу);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// РасшифровкаПлатежаСпособПогашенияЗадолженности
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСпособПогашенияЗадолженности");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.СпособПогашенияЗадолженности",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Способ погашения>'"));
	
	// РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Статья движения ден. средств>'"));
	
	// РасшифровкаПлатежаДоговорКонтрагента
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаДоговорКонтрагента");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.ДоговорКонтрагента",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Договор>'"));
	
	// РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Счет расчетов>'"));
	
	// РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам, РасшифровкаПлатежаСчетУчетаРасчетовПоАвансамПриУСН
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСчетУчетаРасчетовПоАвансамПриУСН");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Счет авансов>'"));
	
	// РасшифровкаПлатежаДоходыУСН
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаДоходыУСН");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ПрименениеУСН", ВидСравненияКомпоновкиДанных.Равно, Истина);
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаКонтрагентом);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеЗайма);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеКредита);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "ВидОперации",
		ВидСравненияКомпоновкиДанных.ВСписке,
		СписокЗначений);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.ДоходыУСН",
		ВидСравненияКомпоновкиДанных.Равно,
		0);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Не принимаются>'"));
	
	// РасшифровкаПлатежаПолеОтражениеАванса
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаПолеОтражениеАванса");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.ПолеОтражениеАванса",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Отражение аванса в НУ>'"));
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеРасшифровкаПлатежаИнкассация(Форма, НачалоПутиКДаннымТЧ)
	
	УсловноеОформление           = Форма.УсловноеОформление;
	НастройкиУсловногоОформления = Форма.НастройкиУсловногоОформления;
	
	НастройкиУсловногоОформления.Вставить("РасшифровкаПлатежаИнкассацияПроинициализировано", Истина);
	
	// РасшифровкаПлатежаИнкассацияСубконтоКт1
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаИнкассацияСубконтоКт1");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.СубконтоКт1Доступность",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	
	// РасшифровкаПлатежаИнкассацияСубконтоКт2
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаИнкассацияСубконтоКт2");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.СубконтоКт2Доступность",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	
	// РасшифровкаПлатежаИнкассацияСубконтоКт3
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаИнкассацияСубконтоКт3");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.СубконтоКт3Доступность",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	
	// РасшифровкаПлатежаИнкассацияПодразделениеКт
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаИнкассацияПодразделениеКт");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.ПодразделениеКт",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Подразделение>'"));
	
	Для сч = 1 По 3 Цикл
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаИнкассацияСубконтоКт" + сч);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ЭлементУО.Отбор,
			НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.СубконтоКт3Доступность",
			ВидСравненияКомпоновкиДанных.Равно,
			Истина);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ЭлементУО.Отбор,
			НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.СубконтоКт" + сч,
			ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<...>'"));
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеРасшифровкаПлатежаПокупкаВалюты(Форма, НачалоПутиКДаннымТЧ)
	
	УсловноеОформление           = Форма.УсловноеОформление;
	НастройкиУсловногоОформления = Форма.НастройкиУсловногоОформления;
	
	НастройкиУсловногоОформления.Вставить("РасшифровкаПлатежаПокупкаВалютыПроинициализировано", Истина);
	
	// РасшифровкаПлатежаПокупкаВалютыСтатьяДвиженияДенежныхСредств
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(
		ЭлементУО.Поля,
		"РасшифровкаПлатежаПокупкаВалютыСтатьяДвиженияДенежныхСредств");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Статья движения ден. средств>'"));
	
	// РасшифровкаПлатежаПокупкаВалютыДоговорКонтрагента
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаПокупкаВалютыДоговорКонтрагента");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.ДоговорКонтрагента",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Договор>'"));
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеРасшифровкаПлатежаПродажаВалюты(Форма, НачалоПутиКДаннымТЧ)
	
	УсловноеОформление           = Форма.УсловноеОформление;
	НастройкиУсловногоОформления = Форма.НастройкиУсловногоОформления;
	
	НастройкиУсловногоОформления.Вставить("РасшифровкаПлатежаПродажаВалютыПроинициализировано", Истина);
	
	// РасшифровкаПлатежаПродажаВалютыСтатьяДвиженияДенежныхСредств
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(
		ЭлементУО.Поля,
		"РасшифровкаПлатежаПродажаВалютыСтатьяДвиженияДенежныхСредств");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Статья движения ден. средств>'"));
	
	// РасшифровкаПлатежаПродажаВалютыДоговорКонтрагента
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаПродажаВалютыДоговорКонтрагента");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.ДоговорКонтрагента",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Договор>'"));
	
КонецПроцедуры

#КонецОбласти
