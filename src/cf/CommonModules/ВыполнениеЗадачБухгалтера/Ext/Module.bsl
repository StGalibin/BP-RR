
#Область ПрограммныйИнтерфейс

// Описывает действие, которое необходимо выполнить для события
//
// Параметры:
//  Событие - Структура - см. ВыполнениеЗадачБухгалтераКлиентСервер.НовыеПараметрыКомандЗадачи()
// Возвращаемое значение:
//  Структура - состав см. в теле функции
//
Функция ОписаниеДействия(Событие) Экспорт
	
	Если ТипЗнч(Событие.Правило) = Тип("СправочникСсылка.ПравилаРегулярныхПлатежей") Тогда
		
		Возврат ОписаниеДействияРегулярныйПлатеж(Событие);
		
	ИначеЕсли ТипЗнч(Событие.Правило) = Тип("СправочникСсылка.Патенты") Тогда
		
		Возврат ОписаниеДействияПомощникУплатыНалога(Событие);
		
	Иначе
		
		Возврат ОписаниеДействияНалоговыйПлатеж(Событие);
		
	КонецЕсли
	
КонецФункции

Функция НовыйОписаниеПлатежа() Экспорт
	
	ОписаниеПлатежа = Новый Структура;
	ОписаниеПлатежа.Вставить("Организация",                Справочники.Организации.ПустаяСсылка());
	ОписаниеПлатежа.Вставить("Налог",                      Справочники.ВидыНалоговИПлатежейВБюджет.ПустаяСсылка());
	ОписаниеПлатежа.Вставить("ВидНалоговогоОбязательства", Перечисления.ВидыПлатежейВГосБюджет.Налог);
	ОписаниеПлатежа.Вставить("СпособОплаты",               Перечисления.СпособыУплатыНалогов.ПустаяСсылка());
	ОписаниеПлатежа.Вставить("ИмяЗадачи",                  "");
	ОписаниеПлатежа.Вставить("Период",                     '00010101');
	ОписаниеПлатежа.Вставить("ПоказательПериода",          "");
	ОписаниеПлатежа.Вставить("Аванс",                      Ложь);
	ОписаниеПлатежа.Вставить("КБК",                        "");
	ОписаниеПлатежа.Вставить("ОКАТО",                      "");
	ОписаниеПлатежа.Вставить("КПППлательщика",             "");
	ОписаниеПлатежа.Вставить("Сумма",                      0);
	ОписаниеПлатежа.Вставить("Описание",                   "");
	ОписаниеПлатежа.Вставить("Декларация",                 Документы.РегламентированныйОтчет.ПустаяСсылка());
	ОписаниеПлатежа.Вставить("ДатаДекларации",             '00010101');
	ОписаниеПлатежа.Вставить("КодНалоговогоОргана",        "");
	
	Возврат ОписаниеПлатежа;
	
КонецФункции

// Функция-конструктор таблицы платежей
//
Функция НовыйТаблицаПлатежи() Экспорт
	
	Платежи = Новый ТаблицаЗначений;
	
	Платежи.Колонки.Добавить("Организация",  Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Платежи.Колонки.Добавить("Период",       Новый ОписаниеТипов("Дата"));
	// По колонкам "КБК" и "ОКАТО" предполагается индекирование, получаем тип из метаданных
	Платежи.Колонки.Добавить("КБК",          Метаданные.Документы.ПлатежноеПоручение.Реквизиты.КодБК.Тип);
	Платежи.Колонки.Добавить("ОКАТО",        Метаданные.Справочники.РегистрацииВНалоговомОргане.Реквизиты.КодПоОКТМО.Тип);
	Платежи.Колонки.Добавить("Сумма",        Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Платежи.Колонки.Добавить("Аванс",        Новый ОписаниеТипов("Булево"));
	Платежи.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	Платежи.Колонки.Добавить("КодНалоговогоОргана",        Новый ОписаниеТипов("Строка"));
	Платежи.Колонки.Добавить("Налог",                      Новый ОписаниеТипов("СправочникСсылка.ВидыНалоговИПлатежейВБюджет"));
	Платежи.Колонки.Добавить("ВидНалоговогоОбязательства", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПлатежейВГосБюджет"));
	Платежи.Колонки.Добавить("НалоговыйПериод", Новый ОписаниеТипов("Строка"));
	
	Возврат Платежи;
	
КонецФункции

Функция ЗначенияЗаполненияПлатежногоДокумента(ОписаниеПлатежа) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ОписаниеПлатежа.КодНалоговогоОргана) Тогда
		// Если не заполен Код налогового органа, попробуем получить его из сведений об организации
		ВидГосударственногоОргана           = ПлатежиВБюджетПереопределяемый.ВидГосударственногоОргана(ОписаниеПлатежа.КБК);
		ОписаниеПлатежа.КодНалоговогоОргана = ДанныеГосударственныхОрганов.КодГосударственногоОрганаОрганизации(
			ОписаниеПлатежа.Организация,
			ВидГосударственногоОргана);
	КонецЕсли;
	
	Если ПустаяСтрока(ОписаниеПлатежа.ОКАТО) Тогда
		ОписаниеПлатежа.ОКАТО = Справочники.Организации.КодТерриторииМестаРегистрации(ОписаниеПлатежа.Организация);
	КонецЕсли;
	
	ДанныеПлатежногоДокумента = Новый Структура;
	// Контекст
	ДанныеПлатежногоДокумента.Вставить("Организация", ОписаниеПлатежа.Организация);
	Если НЕ ПустаяСтрока(ОписаниеПлатежа.КПППлательщика) Тогда
		ДанныеПлатежногоДокумента.Вставить("КПППлательщика", ОписаниеПлатежа.КПППлательщика);
	КонецЕсли;
	ДанныеПлатежногоДокумента.Вставить("Налог", ОписаниеПлатежа.Налог);
	ДанныеПлатежногоДокумента.Вставить("ВидНалоговогоОбязательства", ОписаниеПлатежа.ВидНалоговогоОбязательства);
	
	Если ОписаниеПлатежа.СпособОплаты = Перечисления.СпособыУплатыНалогов.НаличнымиПоКвитанции Тогда
		
		ДанныеПлатежногоДокумента.Вставить("ВидОперации", Перечисления.ВидыОперацийРКО.УплатаНалога);
		ДанныеПлатежногоДокумента.Вставить("СчетКасса",   ПланыСчетов.Хозрасчетный.КассаОрганизации);
		ДанныеПлатежногоДокумента.Вставить("НалоговыйПериод", НачалоМесяца(ОписаниеПлатежа.Период));
		
		Если НЕ ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(ОписаниеПлатежа.Организация) Тогда
			ПредпринимательФИО = Справочники.Организации.ФамилияИмяОтчествоПредпринимателя(ОписаниеПлатежа.Организация, ОписаниеПлатежа.Период);
			ДанныеПлатежногоДокумента.Вставить("Выдать", ПредпринимательФИО);
		КонецЕсли;
		
	Иначе
		ДанныеПлатежногоДокумента.Вставить("ПеречислениеВБюджет", Истина);
		ДанныеПлатежногоДокумента.Вставить("ВидОперации",         Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога);
	КонецЕсли;
	
	ДанныеПлатежногоДокумента.Вставить("ВалютаДокумента", ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	ДанныеПлатежногоДокумента.Вставить("ВидПеречисленияВБюджет", ПлатежиВБюджетКлиентСервер.ВидПеречисления(ОписаниеПлатежа.КБК, ОписаниеПлатежа.Период));
	
	// Известны из декларации
	ДанныеПлатежногоДокумента.Вставить("СуммаДокумента",    ОписаниеПлатежа.Сумма);
	ПоказательДаты = ПлатежиВБюджетКлиентСервер.ПреобразоватьДатуКСтроке(ОписаниеПлатежа.ДатаДекларации);
	ДанныеПлатежногоДокумента.Вставить("ПоказательДаты",    ПоказательДаты);
	ДанныеПлатежногоДокумента.Вставить("ДокументОснование", ОписаниеПлатежа.Декларация);
	
	// Зависят от налога, но известны из декларации
	ДанныеПлатежногоДокумента.Вставить("КодБК",             ОписаниеПлатежа.КБК);
	ДанныеПлатежногоДокумента.Вставить("КодОКАТО",          ОписаниеПлатежа.ОКАТО);
	ДанныеПлатежногоДокумента.Вставить("ПоказательПериода", ОписаниеПлатежа.ПоказательПериода);
	
	Если ЗначениеЗаполнено(ОписаниеПлатежа.Налог) И ОписаниеПлатежа.Налог <> Справочники.ВидыНалоговИПлатежейВБюджет.ПрочиеНалогиИСборы 
		И ОписаниеПлатежа.ИмяЗадачи <> "Патент_Уплата" Тогда
		
		ПредставлениеНалоговогоПериода = ПлатежиВБюджетКлиентСервер.ПредставлениеНалоговогоПериода(
			ОписаниеПлатежа.ПоказательПериода);
			
		НазначениеПлатежа = Справочники.ВидыНалоговИПлатежейВБюджет.НазначениеПлатежа(
			ОписаниеПлатежа.Налог, , ОписаниеПлатежа.Организация, ОписаниеПлатежа.Период, ПредставлениеНалоговогоПериода);
			
	Иначе
		НазначениеПлатежа = ОписаниеПлатежа.Описание;
	КонецЕсли;
	
	Если ОписаниеПлатежа.СпособОплаты = Перечисления.СпособыУплатыНалогов.НаличнымиПоКвитанции Тогда
		ДанныеПлатежногоДокумента.Вставить("Основание", НазначениеПлатежа);
	Иначе
		ДанныеПлатежногоДокумента.Вставить("НазначениеПлатежа", НазначениеПлатежа);
	КонецЕсли;
	
	Если ОписаниеПлатежа.Аванс И Не ПлатежиВБюджетКлиентСервер.ДействуетПриказ107н(ОбщегоНазначения.ТекущаяДатаПользователя()) Тогда
		ДанныеПлатежногоДокумента.Вставить("ПоказательТипа", ПлатежиВБюджетКлиентСервер.ТипПлатежаАванс());
	КонецЕсли;
	
	// Зависят от налога, но не известны из декларации
	НастройкиУплатыНалога = РегистрыСведений.РеквизитыУплатыНалоговИПлатежейВБюджет.НайтиПоКБК(
		ОписаниеПлатежа.Организация,
		ОписаниеПлатежа.КБК,
		ОписаниеПлатежа.ОКАТО);
	
	ДанныеПлатежногоДокумента.Вставить("СтатьяДвиженияДенежныхСредств",
		УчетДенежныхСредствБП.СтатьяДДСПоУмолчанию(ДанныеПлатежногоДокумента.ВидОперации));
	Если НастройкиУплатыНалога <> Неопределено И ОписаниеПлатежа.Налог = НастройкиУплатыНалога.Налог Тогда
		Если ЗначениеЗаполнено(НастройкиУплатыНалога.СтатьяДвиженияДенежныхСредств) Тогда
			ДанныеПлатежногоДокумента.Вставить("СтатьяДвиженияДенежныхСредств", НастройкиУплатыНалога.СтатьяДвиженияДенежныхСредств);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(НастройкиУплатыНалога.НазначениеПлатежа) Тогда
			Если НастройкиУплатыНалога.ВидПеречисленияВБюджет <> Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж Тогда
				ДанныеПлатежногоДокумента.Вставить("НазначениеПлатежа", НастройкиУплатыНалога.НазначениеПлатежа);
			Иначе
				ПредставлениеНалоговогоПериода = ПлатежиВБюджетКлиентСервер.ПредставлениеНалоговогоПериода(
					ДанныеПлатежногоДокумента.ПоказательПериода);
				Если НЕ ПустаяСтрока(ПредставлениеНалоговогоПериода) Тогда
					НазначениеПлатежа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '%1 %2'"),
						НастройкиУплатыНалога.НазначениеПлатежа,
						ПредставлениеНалоговогоПериода);
					ДанныеПлатежногоДокумента.Вставить("НазначениеПлатежа", НазначениеПлатежа);
				Иначе
					ДанныеПлатежногоДокумента.Вставить("НазначениеПлатежа", НастройкиУплатыНалога.НазначениеПлатежа);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ДанныеПлатежногоДокумента.Вставить("ВидПеречисленияВБюджет", НастройкиУплатыНалога.ВидПеречисленияВБюджет);
		Если ЗаполнитьПоДаннымНастройки(НастройкиУплатыНалога, ДанныеПлатежногоДокумента, "Получатель", "Контрагент") Тогда
			ЗаполнитьПоДаннымНастройки(НастройкиУплатыНалога, ДанныеПлатежногоДокумента, "СчетПолучателя", "СчетКонтрагента");
		КонецЕсли;
		
		ЗаполнитьПоДаннымНастройки(НастройкиУплатыНалога, ДанныеПлатежногоДокумента, "СтатусСоставителя");
		ЗаполнитьПоДаннымНастройки(НастройкиУплатыНалога, ДанныеПлатежногоДокумента, "ПоказательТипа");
		ЗаполнитьПоДаннымНастройки(НастройкиУплатыНалога, ДанныеПлатежногоДокумента, "ОчередностьПлатежа");
		ЗаполнитьПоДаннымНастройки(НастройкиУплатыНалога, ДанныеПлатежногоДокумента, "ПоказательОснования");
		
		// ПоказательПериода точнее определяется из декларации, чем задан в настройке
		Если НЕ ЗначениеЗаполнено(ОписаниеПлатежа.Декларация)
			И ДанныеПлатежногоДокумента.Свойство("ПоказательПериода") И НЕ ЗначениеЗаполнено(ДанныеПлатежногоДокумента.ПоказательПериода) Тогда
			ЗаполнитьПоДаннымНастройки(НастройкиУплатыНалога, ДанныеПлатежногоДокумента, "ПоказательПериода");
		КонецЕсли;
		
		Если ОписаниеПлатежа.СпособОплаты = Перечисления.СпособыУплатыНалогов.НаличнымиПоКвитанции Тогда
			АналитикаПлатежаВБюджетПриУплатеНаличными = Документы.РасходныйКассовыйОрдер.АналитикаПлатежаВБюджетПриУплатеНаличными(
				НастройкиУплатыНалога.СчетУчета,
				ОписаниеПлатежа.Организация,
				ОписаниеПлатежа.КБК,
				ОписаниеПлатежа.КодНалоговогоОргана,
				ОписаниеПлатежа.Период,
				ОписаниеПлатежа.ВидНалоговогоОбязательства);
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ДанныеПлатежногоДокумента, АналитикаПлатежаВБюджетПриУплатеНаличными);
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ОписаниеПлатежа.КодНалоговогоОргана) Тогда
			ВидГосоргана = Справочники.Контрагенты.ВидГосударственногоОрганаПоКБК(ДанныеПлатежногоДокумента.КодБК);
			ДанныеПлатежногоДокумента.Вставить("КодНалоговогоОргана", ОписаниеПлатежа.КодНалоговогоОргана);
			
			//определяем получателя по данным информационной базы
			НалоговыйОрган = ДанныеГосударственныхОрганов.ГосударственныйОрган(ВидГосоргана, ОписаниеПлатежа.КодНалоговогоОргана);
			Если ЗначениеЗаполнено(НалоговыйОрган.Ссылка) Тогда
				ДанныеПлатежногоДокумента.Вставить("Контрагент",      НалоговыйОрган.Ссылка);
				ДанныеПлатежногоДокумента.Вставить("СчетКонтрагента", НалоговыйОрган.ПлатежныеРеквизиты.БанковскийСчет);
			Иначе
				//Определяем данные получателя из веб-сервиса
				Если ВидГосоргана = Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган Тогда
					Реквизиты = ДанныеГосударственныхОрганов.РеквизитыНалоговогоОрганаПоКоду(ОписаниеПлатежа.КодНалоговогоОргана);
				ИначеЕсли ВидГосоргана = Перечисления.ВидыГосударственныхОрганов.ОрганПФР Тогда
					Реквизиты = ДанныеГосударственныхОрганов.РеквизитыОтделенияПФРПоКоду(ОписаниеПлатежа.КодНалоговогоОргана);
				ИначеЕсли ВидГосоргана = Перечисления.ВидыГосударственныхОрганов.ОрганФСС Тогда
					Реквизиты = ДанныеГосударственныхОрганов.РеквизитыОтделенияФССПоКоду(ОписаниеПлатежа.КодНалоговогоОргана);
				Иначе
					Реквизиты = Неопределено;
				КонецЕсли;
				Если Реквизиты <> Неопределено
					И НЕ ЗначениеЗаполнено(Реквизиты.ОписаниеОшибки) Тогда
					
					Если ЗначениеЗаполнено(Реквизиты.Ссылка) Тогда
						ДанныеПлатежногоДокумента.Вставить("Контрагент",      Реквизиты.Ссылка);
						ДанныеПлатежногоДокумента.Вставить("СчетКонтрагента", Реквизиты.ПлатежныеРеквизиты.БанковскийСчет);
					Иначе
						ДанныеГосударственныхОрганов.ОбновитьДанныеГосударственногоОргана(Реквизиты);
						ДанныеПлатежногоДокумента.Вставить("Контрагент",      Реквизиты.Ссылка);
						ДанныеПлатежногоДокумента.Вставить("СчетКонтрагента", Реквизиты.ПлатежныеРеквизиты.БанковскийСчет);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если ОписаниеПлатежа.СпособОплаты = Перечисления.СпособыУплатыНалогов.НаличнымиПоКвитанции Тогда
			Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоКБК(ОписаниеПлатежа.КБК);
			СчетУчетаРасчетовСКонтрагентом = Справочники.ВидыНалоговИПлатежейВБюджет.СчетУчета(Налог, ОписаниеПлатежа.Период);
			Если ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентом) Тогда
				АналитикаПлатежаВБюджетПриУплатеНаличными = Документы.РасходныйКассовыйОрдер.АналитикаПлатежаВБюджетПриУплатеНаличными(
					СчетУчетаРасчетовСКонтрагентом,
					ОписаниеПлатежа.Организация,
					ОписаниеПлатежа.КБК,
					ОписаниеПлатежа.КодНалоговогоОргана,
					ОписаниеПлатежа.Период,
					ОписаниеПлатежа.ВидНалоговогоОбязательства);
				ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ДанныеПлатежногоДокумента, АналитикаПлатежаВБюджетПриУплатеНаличными);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеПлатежногоДокумента;
	
КонецФункции

Функция ТребованияНеВыполняемыеБРО() Экспорт
	
	НевыполнимыеТребования = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Владелец.Код КАК ИдентификаторНалогаОтчета,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Код КАК ИдентификаторПравила,
	|	ПравилаПредставленияОтчетовУплатыНалогов.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Владелец.РеквизитДопУпорядочивания КАК ВладелецРеквизитДопУпорядочивания
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК ПравилаПредставленияОтчетовУплатыНалогов
	|ГДЕ
	|	НЕ ПравилаПредставленияОтчетовУплатыНалогов.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВладелецРеквизитДопУпорядочивания,
	|	РеквизитДопУпорядочивания";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ИмяТребования = Выборка.ИдентификаторНалогаОтчета + "." + Выборка.ИдентификаторПравила;
		Если Не ИнтерфейсыВзаимодействияБРО.ТребованиеОбрабатывается(ИмяТребования) Тогда
			НевыполнимыеТребования.Добавить(ИмяТребования);
		КонецЕсли;
	КонецЦикла;
	
	Возврат НевыполнимыеТребования;
	
КонецФункции

Функция ПлатежиПоЗадачам(Организация, РабочаяДата, ГоризонтПланирования) Экспорт
	
	ЗадачиБухгалтера = ЗадачиДляКалендаря(Организация, РабочаяДата, ГоризонтПланирования);
	
	Платежи = Новый Структура;
	
	Платежи.Вставить("РегулярныеПлатежи", РегулярныеПлатежи(ЗадачиБухгалтера.РегулярныеПлатежи));
	Платежи.Вставить("УплатаНалогов",     НалоговыеПлатежи(ЗадачиБухгалтера.УплатаНалогов));
	Платежи.Вставить("Зарплата",          ЗарплатныеПлатежи(ЗадачиБухгалтера.Зарплата));
	
	Возврат Платежи;
	
КонецФункции

// Дополняет таблицу платежей платежными документами
//
// Параметры:
//  Платежи - см.НовыйОписаниеПлатежа()
//  Правило - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов или СправочникСсылка.Патенты
//  ПериодСобытия - Дата
//  Организация - СправочникСсылка.Организации
//  СведенияПоДекларации - Структура - для платежей по декларации, ключи:
//    * Ссылка - ссылка на регламентированный отчет
//    * ПоказательПериода - Строка
//
Процедура ДополнитьНачисленияПлатежнымиДокументами(Платежи, Правило, ПериодСобытия, Организация, СведенияПоДекларации = Неопределено) Экспорт
	
	ИмяЗадачи = Правило.Владелец.Код;
	ПлатежПоДекларации = ЗначениеЗаполнено(СведенияПоДекларации);
	
	МассивТиповПлатежныхДокументов = Новый Массив;
	МассивТиповПлатежныхДокументов.Добавить(Тип("ДокументСсылка.ПлатежноеПоручение"));
	МассивТиповПлатежныхДокументов.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	
	Платежи = Платежи;
	Платежи.Колонки.Добавить("Индекс",             Новый ОписаниеТипов("Число"));
	Платежи.Колонки.Добавить("ПлатежноеПоручение", Новый ОписаниеТипов(МассивТиповПлатежныхДокументов));
	Платежи.Колонки.Добавить("Оплачено",           Новый ОписаниеТипов("Булево"));
	Для Каждого СтрокаПлатежа Из Платежи Цикл
		СтрокаПлатежа.Индекс = Платежи.Индекс(СтрокаПлатежа);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("Правило",       Правило);
	Запрос.УстановитьПараметр("Платежи",       Платежи);
	Запрос.УстановитьПараметр("ПериодСобытия", ПериодСобытия);
	Если ПлатежПоДекларации Тогда
		Запрос.УстановитьПараметр("Декларация",        СведенияПоДекларации.Ссылка);
		Запрос.УстановитьПараметр("ПоказательПериода", СведенияПоДекларации.ПоказательПериода);
	КонецЕсли;

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Платежи.Период КАК Период,
	|	Платежи.КБК КАК КБК,
	|	Платежи.ОКАТО КАК ОКАТО,
	|	Платежи.Аванс КАК Аванс,
	|	Платежи.Индекс КАК ИндексПлатежа
	|ПОМЕСТИТЬ ОтборТекущиеПлатежи
	|ИЗ
	|	&Платежи КАК Платежи
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КБК,
	|	ОКАТО" + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Если ПлатежПоДекларации Тогда
		ДополнитьТекстЗапросаПлатежиПоДекларации(ТекстЗапроса);
	Иначе
		ДополнитьТекстЗапросаПлатежи(ТекстЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	|	ПлатежноеПоручение.Ссылка КАК Ссылка,
	|	ПлатежноеПоручение.Дата,
	|	ПлатежноеПоручение.КодБК,
	|	ПлатежноеПоручение.КодОКАТО,
	|	ПлатежноеПоручение.СуммаДокумента
	|ПОМЕСТИТЬ ВТПлатежныеПоручения
	|ИЗ
	|	ОтборПравило КАК Отбор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|		ПО Отбор.Ссылка = ПлатежноеПоручение.Ссылка
	|ГДЕ
	|	ПлатежноеПоручение.Организация = &Организация
	|	И НЕ ПлатежноеПоручение.ПометкаУдаления
	|	И ПлатежноеПоручение.ПеречислениеВБюджет
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Ссылка,
	|	РасходныйКассовыйОрдер.Дата,
	|	РасходныйКассовыйОрдер.КодБК КАК КБК,
	|	РасходныйКассовыйОрдер.КодОКАТО КАК ОКАТО,
	|	РасходныйКассовыйОрдер.СуммаДокумента КАК Сумма,
	|	ИСТИНА КАК Оплачено
	|ПОМЕСТИТЬ ПлатежиПоПравилу
	|ИЗ
	|	ОтборПравило КАК Отбор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|		ПО Отбор.Ссылка = РасходныйКассовыйОрдер.Ссылка
	|ГДЕ
	|	РасходныйКассовыйОрдер.Организация = &Организация
	|	И НЕ РасходныйКассовыйОрдер.ПометкаУдаления
	|	И РасходныйКассовыйОрдер.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.УплатаНалога)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТПлатежныеПоручения.Ссылка,
	|	ВТПлатежныеПоручения.Дата,
	|	ВТПлатежныеПоручения.КодБК,
	|	ВТПлатежныеПоручения.КодОКАТО,
	|	ВТПлатежныеПоручения.СуммаДокумента,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СостоянияБанковскихДокументов.Состояние, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.СостоянияБанковскихДокументов.Оплачено)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|ИЗ
	|	ВТПлатежныеПоручения КАК ВТПлатежныеПоручения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияБанковскихДокументов КАК СостоянияБанковскихДокументов
	|		ПО ВТПлатежныеПоручения.Ссылка = СостоянияБанковскихДокументов.СсылкаНаОбъект
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КБК,
	|	ОКАТО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Платежи.ИндексПлатежа КАК ИндексПлатежа,
	|	Платежи.ОКАТО КАК ОКАТОДекларации,
	|	ПлатежиПоПравилу.Ссылка КАК ПлатежноеПоручение,
	|	ПлатежиПоПравилу.ОКАТО КАК ОКАТОПлатежа,
	|	ПлатежиПоПравилу.Оплачено,
	|	ПлатежиПоПравилу.Сумма
	|ИЗ
	|	ПлатежиПоПравилу КАК ПлатежиПоПравилу
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборТекущиеПлатежи КАК Платежи
	|		ПО ПлатежиПоПравилу.КБК = Платежи.КБК
	|			И ПлатежиПоПравилу.ОКАТО = Платежи.ОКАТО
	|			И (&УсловиеПоПериоду)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПлатежиПоПравилу.Сумма УБЫВ
	|ИТОГИ ПО
	|	ИндексПлатежа";
	
	Если ПлатежПоДекларации Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоказательПериодаРКО", "РасходныйКассовыйОрдер.ПоказательПериода = &ПоказательПериода");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоказательПериодаПлатежноеПоручение", "ПлатежноеПоручение.ПоказательПериода = &ПоказательПериода");
		Если ИмяЗадачи = "НДС" Тогда
			// Особенность НДС в том, что он уплачивается несколькими платежами.
			// Поэтому дополнительно проверяем месяц платежного поручения.
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоПериоду", "НАЧАЛОПЕРИОДА(Платежи.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ПлатежиПоПравилу.Дата, МЕСЯЦ)");
		Иначе
			// Не проверяем период
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоПериоду", "ИСТИНА");
		КонецЕсли;
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоказательПериодаРКО", "ИСТИНА");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоказательПериодаПлатежноеПоручение", "ИСТИНА");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоПериоду", "ИСТИНА");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	ВыборкаПоИндексам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоИндексам.Следующий() Цикл
		Выборка = ВыборкаПоИндексам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Если Выборка.Следующий() Тогда
			Платеж = Платежи[Выборка.ИндексПлатежа];
			Платеж.ПлатежноеПоручение = Выборка.ПлатежноеПоручение;
			Платеж.Оплачено = Выборка.Оплачено;
		КонецЕсли;
	КонецЦикла;
	
	Платежи.Колонки.Удалить("Индекс");
	
КонецПроцедуры

Функция ОписаниеДействияДекларация(Правило, ПериодСобытия, Организация, РегистрацияВНалоговомОргане, ДлительностьБазовогоПериода = Неопределено) Экспорт
	
	ПолноеИмяПравила = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПолноеИмяПравила(Правило);
	
	НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Правило.ФинансовыйПериод, ПериодСобытия);
	КонецПериода  = КонецДня(ПериодСобытия);
	Периодичность = ?(ЗначениеЗаполнено(ДлительностьБазовогоПериода), ДлительностьБазовогоПериода, Правило.Периодичность);
	
	ОписаниеФормы = ИнтерфейсыВзаимодействияБРО.ОписаниеФормыРеглОтчета(
		ПолноеИмяПравила,
		Организация,
		РегистрацияВНалоговомОргане,
		НачалоПериода,
		КонецПериода,
		Периодичность);
	
	Если ОписаниеФормы = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОписаниеДействия = Новый Структура;
	ОписаниеДействия.Вставить("ИмяФормы",       ОписаниеФормы.Имя);
	ОписаниеДействия.Вставить("ПараметрыФормы", ОписаниеФормы.Параметры);
	
	Возврат ОписаниеДействия;
	
КонецФункции

// Возвращает способ уплаты налога для организации и ИП
//
// Параметры:
//  Организация - СправочникСсылка.Организации
//
// Возвращаемое значение:
//  СпособОплаты - ПеречислениеСсылка.СпособыУплатыНалогов - если возможно несколько способов уплаты,
//  то возвращает пустую ссылку
//
Функция СпособУплатыНалогаВзноса(Организация) Экспорт
	
	ЭтоЮрЛицо = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация);
	Если ЭтоЮрЛицо Тогда
		СпособУплаты = Перечисления.СпособыУплатыНалогов.БанковскийПеревод;
	Иначе
		Если Справочники.БанковскиеСчета.КоличествоБанковскихСчетовОрганизации(Организация) > 0 Тогда
			// Возможно несколько способов оплаты
			СпособУплаты = Перечисления.СпособыУплатыНалогов.ПустаяСсылка();
		Иначе
			СпособУплаты = Перечисления.СпособыУплатыНалогов.НаличнымиПоКвитанции;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СпособУплаты;
	
КонецФункции

// Возвращает способ выполнение задачи по правилу
//
// Параметры:
//  Правило - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов или СправочникСсылка.Патенты
//
// Возвращаемое значение:
//  Строка - наименование-идентификатор способа выполнения задачи
//
Функция СпособВыполненияЗадачи(Правило) Экспорт
	
	// Уплату патента определяем по типу правила.
	Если ТипЗнч(Правило) = Тип("СправочникСсылка.Патенты") Тогда
		Возврат "УплатаПатента";
	КонецЕсли;
	
	ИдентификаторЗадачи = Правило.Владелец.Код;
	
	Если ИдентификаторЗадачи = "НДФЛ_Агент_Уплата" Тогда
		Возврат "УплатаНДФЛ"
	ИначеЕсли ИдентификаторЗадачи = "СтраховыеВзносы"
		И Правило.Действие = Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога Тогда 
		Возврат "УплатаСтраховыхВзносов";
	ИначеЕсли (ИдентификаторЗадачи = "ТранспортныйНалог"
		ИЛИ ИдентификаторЗадачи = "ЗемельныйНалог")
		И Правило.Периодичность = Перечисления.Периодичность.Квартал Тогда
		Возврат "УплатаАвансовЗемельныйТранспортныйНалог";
	ИначеЕсли ИдентификаторЗадачи = "ТорговыйСбор" Тогда
		Возврат "УплатаТорговогоСбора"
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Проверяет является ли правило уплатой/отчетом по страхвым взносам
//
// Параметры:
//  Правило - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов или СправочникСсылка.Патенты
//
// Возвращаемое значение:
//  Булево - признак того является ли правило платой/отчетом по страхвым взносам или нет
//
Функция ЭтоСтраховыеВзносы(Правило) Экспорт
	
	Если ТипЗнч(Правило) <> Тип("СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов") Тогда
		Возврат Ложь;
	Иначе
		Возврат Правило.Владелец.Код = "СтраховыеВзносы";
	КонецЕсли;
	
КонецФункции

// Возвращает состояние сверки по задаче
//
// Параметры:
//  ПараметрыЗадачи - Структура - см. НовыйПараметрыЗадачиДляСверки()
//
// Возвращаемое значение:
//  Структура - Структура с ключами:
//    * СверкаВыполнена - Булево - признак того, что по задаче выполнена сверка
//    * ОписаниеДействияСверка - Структура с ключами: Наименование - Строка, ИмяФормы - Строка, ПараметрыФормы - Структура
//    * ЗапросНаСверкуСсылка - ДокументСсылка.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика,
//      ДокументСсылка.ЗапросНаИнформационноеОбслуживаниеСтрахователя - ссылка на документ-запрос на сверку
//    * ЗапросНаСверкуНаименование - Строка - представление документа-запроса на сверку
//
Функция СведенияОСверке(ПараметрыЗадачи) Экспорт
	
	СведенияОСверке = Новый Структура();
	
	СведенияОСверке.Вставить("СверкаВыполнена",            Ложь);
	СведенияОСверке.Вставить("ОписаниеДействияСверка",     Новый Структура);
	СведенияОСверке.Вставить("ЗапросНаСверкуСсылка",       Неопределено);
	СведенияОСверке.Вставить("ЗапросНаСверкуНаименование", "");
	СведенияОСверке.Вставить("МожноВыполнятьСверку",       Истина);
	
	Если ТипЗнч(ПараметрыЗадачи.Правило) = Тип("СправочникСсылка.Патенты") Тогда
		СведенияОСверке.МожноВыполнятьСверку = Ложь;
		Возврат СведенияОСверке;
	КонецЕсли;
	
	ПараметрыКоманды = Новый Структура("ИдентификаторЗадачи, Действие", ПараметрыЗадачи.ИдентификаторЗадачи, ПараметрыЗадачи.Правило.Действие);
	Если НЕ Справочники.ЗадачиБухгалтера.МожноВыполнятьСверку(ПараметрыКоманды) Тогда
		СведенияОСверке.МожноВыполнятьСверку = Ложь;
		Возврат СведенияОСверке;
	КонецЕсли;
	
	ЗапросНаСверкуНаименование = "";
	НаименованиеДействия       = "";
	
	Если ЭтоСтраховыеВзносы(ПараметрыЗадачи.Правило)
		И НЕ ПлатежиВБюджетКлиентСервер.ДействуетПриказ2017_90н(ТекущаяДатаСеанса()) Тогда
		КонтролирующийОрган = Перечисления.ТипыКонтролирующихОрганов.ПФР;
		НаименованиеДействия = НСтр("ru = 'Запросить сверку с ПФР'");
	Иначе
		КонтролирующийОрган = Перечисления.ТипыКонтролирующихОрганов.ФНС;
		НаименованиеДействия = НСтр("ru = 'Запросить сверку с ФНС'");
	КонецЕсли;
	
	// Проверим подключение документооборота с контролирующим органом.
	ДокументооборотПодключен = ИнтерфейсыВзаимодействияБРО.ПодключенДокументооборотСКонтролирующимОрганом(
			ПараметрыЗадачи.Организация,
			КонтролирующийОрган);
			
	Если НЕ ДокументооборотПодключен Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация", ПараметрыЗадачи.Организация);
		
		СведенияОСверке.ОписаниеДействияСверка.Вставить("Наименование",   НаименованиеДействия);
		СведенияОСверке.ОписаниеДействияСверка.Вставить("ИмяФормы",       "Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ПредложениеОформитьЗаявлениеНаПодключение");
		СведенияОСверке.ОписаниеДействияСверка.Вставить("ПараметрыФормы", ПараметрыФормы);
		
		Возврат СведенияОСверке;
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", ПараметрыЗадачи.Организация);
	ИмяФормы = "";
	
	// Если это задача за прошедший год, то запрос о сверке формируем на конец года
	Если Год(ПараметрыЗадачи.Срок) > Год(ПараметрыЗадачи.ПериодСобытия) Тогда
		ПараметрыФормы.Вставить("ПериодСобытия", КонецГода(ПараметрыЗадачи.ПериодСобытия));
	Иначе
		// Запрос о свере на дату выполнения задачи
		ПараметрыФормы.Вставить("ПериодСобытия", ПараметрыЗадачи.Срок);
	КонецЕсли;
	
	Если КонтролирующийОрган = Перечисления.ТипыКонтролирующихОрганов.ФНС Тогда
		
		Если ЗначениеЗаполнено(ПараметрыЗадачи.РегистрацияВНалоговомОргане) Тогда
			ПараметрыФормы.Вставить("РегистрацияВНалоговомОргане", ПараметрыЗадачи.РегистрацияВНалоговомОргане);
		Иначе
			ПараметрыФормы.Вставить("РегистрацияВНалоговомОргане", ПараметрыЗадачи.Организация.РегистрацияВНалоговомОргане);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыФормы.РегистрацияВНалоговомОргане) Тогда
			ПараметрыФормы.Вставить("ОКТМО", ПараметрыФормы.РегистрацияВНалоговомОргане.КодПоОКТМО);
		Иначе
			ПараметрыФормы.Вставить("ОКТМО", "");
		КонецЕсли;
		
		ИдентификаторЗадачиДляКБК = ?(ПараметрыЗадачи.ИдентификаторЗадачи = "НДФЛ_Агент",
			"НДФЛ_Агент_Уплата", ПараметрыЗадачи.ИдентификаторЗадачи);
		
		СписокКБК = ПолучитьКБКДляСверки(ИдентификаторЗадачиДляКБК, ПараметрыФормы.Организация, ПараметрыФормы.ПериодСобытия);
		
		Если СписокКБК.Количество() > 0 Тогда
			ПараметрыФормы.Вставить("СписокКБК", СписокКБК);
		КонецЕсли;
		
		ИмяФормы = "Документ.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.Форма.ФормаДокумента";
		
	ИначеЕсли КонтролирующийОрган = Перечисления.ТипыКонтролирующихОрганов.ПФР Тогда
		
		ПараметрыФормы.Вставить("ВидСверки", Перечисления.ВидыУслугПриИОС.СправкаОСостоянииРасчетов);
		
		КодОрганаПФР = ДанныеГосударственныхОрганов.КодГосударственногоОрганаОрганизации(
			ПараметрыФормы.Организация,
			Перечисления.ВидыГосударственныхОрганов.ОрганПФР);
			
		Если ЗначениеЗаполнено(КодОрганаПФР) Тогда
			ОрганПФР = Справочники.ОрганыПФР.НайтиПоКоду(КодОрганаПФР);
			Если ЗначениеЗаполнено(ОрганПФР) Тогда
				ПараметрыФормы.Вставить("ОрганПФР", ОрганПФР);
			КонецЕсли;
		КонецЕсли;
		
		ИмяФормы = "Документ.ЗапросНаИнформационноеОбслуживаниеСтрахователя.Форма.ФормаДокумента";
		
	КонецЕсли;
	
	ПериодНачалаСобытия = ИнтерфейсыВзаимодействияБРОКлиентСервер.ДобавитьПериод(
		ПараметрыФормы.ПериодСобытия, ПараметрыЗадачи.Правило.Периодичность, -1);
	ПараметрыФормы.Вставить("ПериодНачалаСобытия", НачалоМесяца(ПериодНачалаСобытия));
	
	ОписаниеДействия = Новый Структура;
	ОписаниеДействия.Вставить("Наименование", НаименованиеДействия);
	ОписаниеДействия.Вставить("ИмяФормы", ИмяФормы);
	
	ЗапросНаСверкуСсылка = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ПолучитьСуществующуюСверку(ПараметрыФормы, Строка(КонтролирующийОрган));
	Если ЗапросНаСверкуСсылка = Неопределено Тогда
		ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	Иначе
		СведенияОСверке.СверкаВыполнена = Истина;
		ЗапросНаСверкуНаименование = ПредставлениеЗапросаНаСверку(ЗапросНаСверкуСсылка);
		ОписаниеДействия.Вставить("ПараметрыФормы", Новый Структура("Ключ", ЗапросНаСверкуСсылка));
	КонецЕсли;
	
	СведенияОСверке.ОписаниеДействияСверка     = ОписаниеДействия;
	СведенияОСверке.ЗапросНаСверкуСсылка       = ЗапросНаСверкуСсылка;
	СведенияОСверке.ЗапросНаСверкуНаименование = ЗапросНаСверкуНаименование;
	
	Возврат СведенияОСверке;
	
КонецФункции

// Функция-конструктор структуры, описывающей параметры сверки
//
Функция НовыйПараметрыЗадачиДляСверки() Экспорт
	
	ПараметрыЗадачиДляСверки = Новый Структура();
	
	ПараметрыЗадачиДляСверки.Вставить("Организация",                 Справочники.Организации.ПустаяСсылка());
	ПараметрыЗадачиДляСверки.Вставить("Правило",                     Неопределено);
	ПараметрыЗадачиДляСверки.Вставить("Периодичность",               Перечисления.Периодичность.ПустаяСсылка());
	ПараметрыЗадачиДляСверки.Вставить("ПериодСобытия",               '00010101');
	ПараметрыЗадачиДляСверки.Вставить("Срок",                        '00010101');
	ПараметрыЗадачиДляСверки.Вставить("РегистрацияВНалоговомОргане", Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка());
	ПараметрыЗадачиДляСверки.Вставить("ИдентификаторЗадачи",         "");
	
	Возврат ПараметрыЗадачиДляСверки;
	
КонецФункции

// Возвращает данные для платежа по декларации
//
// Параметры:
//  Правило - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов
//  ПолноеИмяПравила - Строка
//  Организация - СправочникСсылка.Организации
//  РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане
//  ПериодСобытия - Дата
//  Срок - Дата
//  ПоказательПериода - Строка
//
// Возвращаемое значение:
//  ДанныеДекларации - Структура - ключи см. ИнтерфейсыВзаимодействияБРО.ДанныеРеглОтчетаДляУплатыНалога()
//    * Налог - СправочникСсылка.ВидыНалоговИПлатежейВБюджет
//    * КодНалоговогоОргана - Строка
//    * Наименование - Строка
//
Функция ДанныеДляУплатыНалогаПоДекларации(Правило, ПолноеИмяПравила, Организация, РегистрацияВНалоговомОргане, ПериодСобытия, Срок, ПоказательПериода) Экспорт
	
	ЭтоНДС = (Правило.Владелец.Код = "НДС");
	НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Правило.Периодичность, ПериодСобытия);
	КонецПериода  = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Правило.Периодичность, ПериодСобытия);
	
	Показатели                  = ПоказателиБазовогоПериода(НачалоПериода, КонецПериода, Правило);
	ДлительностьБазовогоПериода = Показатели.ДлительностьБазовогоПериода;
	НачалоБазовогоПериода       = Показатели.НачалоБазовогоПериода;
	КонецБазовогоПериода        = Показатели.КонецБазовогоПериода;

	ДанныеДекларации = ИнтерфейсыВзаимодействияБРО.ДанныеРеглОтчетаДляУплатыНалога(
		ПолноеИмяПравила,
		Организация,
		РегистрацияВНалоговомОргане,
		КонецБазовогоПериода);
		
	Если ДанныеДекларации = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Удалим строки, не относящиеся к заданному периоду
	КоличествоСтрок = ДанныеДекларации.Платежи.Количество();
	
	ДанныеДекларации.Платежи.Колонки.Добавить("Налог", Новый ОписаниеТипов("СправочникСсылка.ВидыНалоговИПлатежейВБюджет"));
	ДанныеДекларации.Платежи.Колонки.Добавить("КодНалоговогоОргана", ОбщегоНазначения.ОписаниеТипаСтрока(20));
	ДанныеДекларации.Платежи.Колонки.Добавить("Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	
	// Для НДС отдельно добавим итог по декларации
	Если ЭтоНДС Тогда
		ДанныеДекларации.Вставить("СуммаНДСПоДекларации", ДанныеДекларации.Платежи.Итог("Сумма"));
	КонецЕсли;
	
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		Платеж = ДанныеДекларации.Платежи[КоличествоСтрок - НомерСтроки];
		Если ЭтоНДС И НачалоМесяца(Платеж.Период) = НачалоМесяца(Срок) Тогда
			// Особенность НДС в том, что он уплачивается несколькими платежами.
			// В данных декларации такие платежи отнесены к месяцам, в которых они уплачиваются.
			ПериодПлатежа = ПериодСобытия;
		Иначе
			ПериодПлатежа = Платеж.Период;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Платеж.ВидНалога) Тогда
			Платеж.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Платеж.ВидНалога);
		ИначеЕсли ЗначениеЗаполнено(Платеж.КБК) Тогда
			Платеж.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоКБК(Платеж.КБК);
		Иначе
			ВидНалога = РасчетыСБюджетом.ВидНалогаПоКодуЗадачи(Правило.Владелец.Код, Организация, ПериодСобытия);
			Платеж.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидНалога);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Платеж.КБК) Тогда
			
			Платеж.КБК = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(Платеж.Налог, , КонецПериода);
			
		КонецЕсли;
		
		Платеж.Наименование = Строка(Платеж.Налог);
		
		Платеж.КодНалоговогоОргана = ?(ДанныеДекларации.Свойство("КодНалоговогоОргана"),
			ДанныеДекларации.КодНалоговогоОргана, "");
			
		ЧужойПериод = ПериодПлатежа < НачалоПериода Или ПериодПлатежа > КонецПериода;
		Если ЧужойПериод Тогда
			ДанныеДекларации.Платежи.Удалить(Платеж);
		КонецЕсли;
	КонецЦикла;
	
	// Возможно, платежные документы уже созданы
	Если ДанныеДекларации.Платежи.Количество() > 0 Тогда
		СведенияПоДекларации = Новый Структура;
		СведенияПоДекларации.Вставить("Ссылка", ДанныеДекларации.Ссылка);
		СведенияПоДекларации.Вставить("ПоказательПериода", ПоказательПериода);
		ДополнитьНачисленияПлатежнымиДокументами(
			ДанныеДекларации.Платежи, Правило, ПериодСобытия, Организация, СведенияПоДекларации);
	КонецЕсли;
	
	Если ЭтоНДС Тогда
		// Особенность НДС в том, что он уплачивается несколькими платежами.
		// В данных декларации такие платежи отнесены к месяцам, в которых они уплачиваются.
		Для Каждого Платеж Из ДанныеДекларации.Платежи Цикл
			Если НачалоМесяца(Платеж.Период) = НачалоМесяца(Срок) Тогда
				Платеж.Период = ПериодСобытия;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// Удалим строки, по которым нет платежей
	Если ДанныеДекларации.Платежи.Количество() > 1 Тогда
		КоличествоСтрок = ДанныеДекларации.Платежи.Количество();
		Для НомерСтроки = 1 По КоличествоСтрок Цикл
			Платеж = ДанныеДекларации.Платежи[КоличествоСтрок - НомерСтроки];
			Если Платеж.Сумма = 0 И Не ЗначениеЗаполнено(Платеж.ПлатежноеПоручение) Тогда
				ДанныеДекларации.Платежи.Удалить(Платеж);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеДекларации;
	
КонецФункции

// Возвращает данные для уплаты страховых взносов
// 
// Параметры:
//  Правило - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов
//  Организация - СправочникСсылка.Организации
//  ПериодСобытия - Дата
//
// Возвращаемое значение:
//  Платежи - Структура - см. НовыйТаблицаПлатежи()
//
Функция ДанныеДляУплатыСтраховыхВзносов(Правило, Организация, ПериодСобытия) Экспорт
	
	НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Перечисления.Периодичность.Месяц, КонецМесяца(ПериодСобытия)+1);
	
	ПараметрыСтраховыхВзносов = ПараметрыСтраховыхВзносов(ПериодСобытия);
	
	СчетаСтраховыхВзносов = ПараметрыСтраховыхВзносов.ВыгрузитьКолонку("СчетУчета");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	
	ЗначенияСубконто = Новый Массив;
	ЗначенияСубконто.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Налог);
	ЗначенияСубконто.Добавить(Перечисления.ВидыПлатежейВГосБюджет.ВзносыБезСпецоценки);
	
	// Для получения остатков.
	Запрос.УстановитьПараметр("СчетаСтраховыхВзносов", СчетаСтраховыхВзносов);
	Запрос.УстановитьПараметр("ВидСубконто",      ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	Запрос.УстановитьПараметр("ЗначенияСубконто", ЗначенияСубконто);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет КАК СчетУчета,
	|	ХозрасчетныйОстатки.Субконто1 КАК ВидНалоговогоОбязательства,
	|	ХозрасчетныйОстатки.СуммаОстатокКт КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&НачалоПериода,
	|			Счет В (&СчетаСтраховыхВзносов),
	|			&ВидСубконто,
	|			Организация = &Организация
	|				И Субконто1 В (&ЗначенияСубконто)) КАК ХозрасчетныйОстатки";
	
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	
	КодТерритории = Справочники.Организации.КодТерриторииМестаРегистрации(Организация);
	КодыГосударственныхОрганов = Новый Соответствие; // Кешируем в функции
	
	Платежи   = НовыйТаблицаПлатежи();
	Пока Выборка.Следующий() Цикл
		Платеж = Платежи.Добавить();
		ЗаполнитьЗначенияСвойств(Платеж, Выборка);
		Платеж.Организация = Организация;
		Платеж.ОКАТО       = КодТерритории;
		Платеж.Аванс       = Истина;
		
		СтруктураПоиска = Новый Структура("СчетУчета, ВидНалоговогоОбязательства");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
		РеквизитыПоСчету = ПараметрыСтраховыхВзносов.НайтиСтроки(СтруктураПоиска);
		Если РеквизитыПоСчету.Количество() <> 0 Тогда
			ЗаполнитьЗначенияСвойств(Платеж, РеквизитыПоСчету[0], "КБК, Налог");
		КонецЕсли;
		
		ШаблонНаименования    = НСтр("ru = '%1%2'");
		НаименованиеНалога    = Строка(Платеж.Налог);
		УточнениеНаименования = "";
		Если Выборка.ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.ВзносыБезСпецоценки Тогда
			УточнениеНаименования = НСтр("ru = ' (без спецоценки)'");
		КонецЕсли;
		Платеж.Наименование = СтрШаблон(ШаблонНаименования, НаименованиеНалога, УточнениеНаименования);
		
		ВидГосударственногоОргана = ПлатежиВБюджетПереопределяемый.ВидГосударственногоОргана(Платеж.КБК);
		КодГосударственногоОргана = КодыГосударственныхОрганов[ВидГосударственногоОргана];
		Если КодГосударственногоОргана = Неопределено Тогда
			КодГосударственногоОргана =
				ДанныеГосударственныхОрганов.КодГосударственногоОрганаОрганизации(Организация, ВидГосударственногоОргана);
			КодыГосударственныхОрганов.Вставить(ВидГосударственногоОргана, КодГосударственногоОргана);
		КонецЕсли;
		Платеж.КодНалоговогоОргана = КодГосударственногоОргана;
	КонецЦикла;
	
	Если Платежи.Количество() > 0 Тогда
		ДополнитьНачисленияПлатежнымиДокументами(Платежи, Правило, ПериодСобытия, Организация);
	КонецЕсли;
		
	Возврат Платежи;
	
КонецФункции

// Возвращает данные для уплаты имущественных налогов (Транспортного и Земельного)
// 
// Параметры:
//  Правило - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов
//  Организация - СправочникСсылка.Организации
//  ПериодСобытия - Дата
//  Срок - Дата
//  РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане
//
// Возвращаемое значение:
//  Платежи - Структура - см. НовыйТаблицаПлатежи()
//
Функция ДанныеДляУплатыИмущественныхНалогов(Правило, Организация, ПериодСобытия, Срок, РегистрацияВНалоговомОргане) Экспорт
	
	ИмяЗадачи     = Правило.Владелец.Код;
	НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Правило.Периодичность, ПериодСобытия);
	КонецПериода  = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Правило.Периодичность, ПериодСобытия);
	ВидНалога     = РасчетыСБюджетом.ВидНалогаПоКодуЗадачи(ИмяЗадачи, Организация, КонецПериода);
	Налог         = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидНалога);
	КБК           = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(Налог, , КонецПериода);
	
	КодНалоговогоОргана = ДанныеГосударственныхОрганов.КодГосударственногоОрганаОрганизации(
		Организация,
		Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.УстановитьПараметр("НачалоПериода",  НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",   КонецПериода);
	Запрос.УстановитьПараметр("НалоговыйОрган", РегистрацияВНалоговомОргане);
	
	Если ИмяЗадачи = "ТранспортныйНалог" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РасчетТранспортногоНалога.ПериодРасчета КАК Период,
		|	РасчетТранспортногоНалога.КодПоОКТМО КАК ОКАТО,
		|	СУММА(РасчетТранспортногоНалога.СуммаНалогаКУплате) КАК Сумма,
		|	ЕСТЬNULL(РасчетТранспортногоНалога.ИФНС.Код, """") КАК КодНалоговогоОргана,
		|	"""" КАК КБК
		|ИЗ
		|	РегистрСведений.РасчетТранспортногоНалога КАК РасчетТранспортногоНалога
		|ГДЕ
		|	РасчетТранспортногоНалога.Организация = &Организация
		|	И РасчетТранспортногоНалога.ПериодРасчета МЕЖДУ &НачалоПериода И &КонецПериода
		|	И РасчетТранспортногоНалога.СуммаНалогаКУплате > 0
		|	И РасчетТранспортногоНалога.ИФНС = &НалоговыйОрган
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетТранспортногоНалога.ПериодРасчета,
		|	РасчетТранспортногоНалога.КодПоОКТМО,
		|	ЕСТЬNULL(РасчетТранспортногоНалога.ИФНС.Код, """")";
		
	ИначеЕсли ИмяЗадачи = "ЗемельныйНалог" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РасчетЗемельногоНалога.ПериодРасчета КАК Период,
		|	РасчетЗемельногоНалога.КодПоОКТМО КАК ОКАТО,
		|	СУММА(РасчетЗемельногоНалога.СуммаНалогаКУплате) КАК Сумма,
		|	РасчетЗемельногоНалога.КБК,
		|	ЕСТЬNULL(РасчетЗемельногоНалога.ИФНС.Код, """") КАК КодНалоговогоОргана
		|ИЗ
		|	РегистрСведений.РасчетЗемельногоНалога КАК РасчетЗемельногоНалога
		|ГДЕ
		|	РасчетЗемельногоНалога.Организация = &Организация
		|	И РасчетЗемельногоНалога.ПериодРасчета МЕЖДУ &НачалоПериода И &КонецПериода
		|	И РасчетЗемельногоНалога.СуммаНалогаКУплате > 0
		|	И РасчетЗемельногоНалога.ИФНС = &НалоговыйОрган
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетЗемельногоНалога.ПериодРасчета,
		|	РасчетЗемельногоНалога.КодПоОКТМО,
		|	РасчетЗемельногоНалога.КБК,
		|	ЕСТЬNULL(РасчетЗемельногоНалога.ИФНС.Код, """")";
		
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	
	Платежи   = НовыйТаблицаПлатежи();
	
	Пока Выборка.Следующий() Цикл
		Платеж = Платежи.Добавить();
		ЗаполнитьЗначенияСвойств(Платеж, Выборка);
		Платеж.Налог = Налог;
		Платеж.Наименование = Строка(Платеж.Налог);
		Платеж.КБК   = ?(ЗначениеЗаполнено(Выборка.КБК), Выборка.КБК, КБК);
		Платеж.КодНалоговогоОргана = ?(ЗначениеЗаполнено(Выборка.КодНалоговогоОргана),
			Выборка.КодНалоговогоОргана, КодНалоговогоОргана);
		Платеж.Аванс = Истина;
	КонецЦикла;
	
	Если Платежи.Количество() > 0 Тогда
		ДополнитьНачисленияПлатежнымиДокументами(Платежи, Правило, ПериодСобытия, Организация);
	КонецЕсли;
	
	Возврат Платежи;
	
КонецФункции

// Возвращает показатель периода для платежа по декларации
//
// Параметры:
//  Правило - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов
//  ПериодСобытия - Дата
//  Срок - Дата
//
// Возвращаемое значение:
//  ПоказательПериода - Строка
//
Функция ПоказательПериодаПлатежаПоДекларации(Правило, ПериодСобытия, Срок) Экспорт
	
	ЭтоНДС = (Правило.Владелец.Код = "НДС");
	
	// Определим период, к которому относится платеж,
	// в соответствии с классификатором, используемым в платежных поручениях
	НалоговыйПериодДляПлатежейВБюджет = Правило.Периодичность;
	Если ЭтоНДС Тогда
		// Особенность НДС в том, что он уплачивается несколькими (ежемесячными) платежами,
		// каждый из которых относится к одному и тому же периоду (кварталу).
		// Из текста правил оформления  документов нельзя сделать однозначный вывод, что указывать в данном случае - месяц или квартал.
		// Сейчас местные УФНС рекомендуют указывать значение "КВ" (квартал).
		НалоговыйПериодДляПлатежейВБюджет = Перечисления.Периодичность.Квартал;
		
	ИначеЕсли Правило.Владелец.Код = "НДФЛ_Предприниматель" Тогда
		
		// Если по годовому платежу предусматривается более одного срока уплаты налогового платежа
		// и установлены конкретные даты уплаты, то указываются эти даты.
		
		НалоговыйПериодДляПлатежейВБюджет = Неопределено;
		
	КонецЕсли;
	
	ПериодичностьПоКлассификатору = ПлатежиВБюджетПереопределяемый.ПериодичностьПоКлассификатору(НалоговыйПериодДляПлатежейВБюджет);
	Если ПериодичностьПоКлассификатору = ПлатежиВБюджетКлиентСервер.ПлатежПоКонкретнойДате() 
		Или НалоговыйПериодДляПлатежейВБюджет <> Правило.Периодичность Тогда
		ПоказательПериода = ПлатежиВБюджетКлиентСервер.НалоговыйПериод(Срок, ПериодичностьПоКлассификатору);
	Иначе
		ПоказательПериода = ПлатежиВБюджетКлиентСервер.НалоговыйПериод(ПериодСобытия, ПериодичностьПоКлассификатору);
	КонецЕсли;
	
	Возврат ПоказательПериода;
	
КонецФункции

// Записывает в журнал регистрации факт попытки пользователем выполнения действия.
//
// Параметры:
//	ТекстКомментария - Строка - Текст комментария записи журнала регистрации.
//
Процедура ЗарегистрироватьСобытиеВЖурнале(ТекстКомментария) Экспорт

	ЗаписьЖурналаРегистрации(
		СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,
		,
		,
		ТекстКомментария);

КонецПроцедуры

#КонецОбласти

#Область ВыполнениеДействий

// Описывает действие, которое необходимо выполнить для налогового платежа
//
// Параметры:
//  Событие - Структура - см. ВыполнениеЗадачБухгалтераКлиентСервер.НовыеПараметрыКомандЗадачи()
// Возвращаемое значение:
//  Структура - состав см. в теле функции
//
Функция ОписаниеДействияНалоговыйПлатеж(Событие)
	
	Правило   = Событие.Правило;
	ИмяЗадачи = Правило.Владелец.Код;
	Действие  = Правило.Действие;
	
	ПолноеИмяПравила = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПолноеИмяПравила(Правило);
	
	Если Действие = Перечисления.ВидыДействийКалендаряБухгалтера.Отчет Тогда
		
		Если (ПолноеИмяПравила = "СтраховыеВзносы.2013_ОтчетностьПФР"
			ИЛИ ПолноеИмяПравила = "СтраховыеВзносы.2014_ОтчетностьПФРБумажная"
			ИЛИ ПолноеИмяПравила = "СтраховыеВзносы.2014_ОтчетностьПФРЭлектронная")
			И ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии") Тогда
			
			// БЗКБ может обеспечить выполнение этого действия
			Возврат ОписаниеДействияОтчетПФР(Событие);
			
		ИначеЕсли ПолноеИмяПравила = "СтраховыеВзносы.2016_СведенияПФРЕжемесячные"
			Или ПолноеИмяПравила = "СтраховыеВзносы.2017_СведенияПФРЕжемесячные" Тогда
			
			// БЗКБ может обеспечить выполнение этого действия
			Возврат ОписаниеДействияСведенияПФРЕжемесячные(Событие);
			
		ИначеЕсли ПолноеИмяПравила = "СтраховыеВзносы.2017_СведенияСтажСотрудниковОрганизации"
			Или ПолноеИмяПравила = "СтраховыеВзносы.2017_СведенияСтажСотрудниковПредприниматели" Тогда
			
			// БЗКБ может обеспечить выполнение этого действия
			Возврат ОписаниеДействияСведенияПФРЕжегодные(Событие);
			
		ИначеЕсли ПолноеИмяПравила = "СтраховыеВзносы.2013_Отчет_Допвзносы_Накопительная_ПФР" Тогда
			
			// БЗКБ может обеспечить выполнение этого действия
			Возврат ОписаниеДействияРеестрДСВ3(Событие);
			
		ИначеЕсли ПолноеИмяПравила = "НДФЛ_Агент.2013_2НДФЛ" 
			Или ПолноеИмяПравила = "НДФЛ_Агент.2013_2НДФЛ_Неудержанный"
			Или ПолноеИмяПравила = "НДФЛ_Агент.2016_2НДФЛ_Неудержанный" Тогда
			
			// БЗКБ может обеспечить выполнение этого действия
			Возврат ОписаниеДействия2НДФЛ(Событие);
			
		ИначеЕсли ПолноеИмяПравила = "КосвенныеНалогиТамСоюз.2010_Статформа" Тогда
			
			// Открываем форму списка заявлений о ввозе
			Возврат ОписаниеДействияЗаявленияОВвозе(Событие);
			
		ИначеЕсли ПолноеИмяПравила = "НДС.СверкаНДС" Тогда
		
			// Открываем форму обработки "Сверка данных НДС"
			Возврат ОписаниеДействияСверкаНДС(Событие);
			
		ИначеЕсли ПолноеИмяПравила = "НДС.2015_ЖурналСчетовФактур" Тогда
			
			// Открываем форму документа "Журнал счетов-фактур для передачи в электронном виде"
			Возврат ОписаниеДействияЖурналСчетовФактур(Событие);
			
		ИначеЕсли ПолноеИмяПравила = "СтатистическаяОтчетность.ПроверитьПереченьФормФизлица"
			Или ПолноеИмяПравила = "СтатистическаяОтчетность.ПроверитьПереченьФормЮрлица" Тогда
			
			// Проверить можно, сформировав уведомление на специальном сайте Росстата
			Возврат Новый Структура("Переход", "http://statreg.gks.ru");
			
		ИначеЕсли ПравилоВыполняетсяПомощникомРасчетаНалогаУСН(Правило) Тогда
			
			// Открываем форму обработки "Помощник расчета налога УСН"
			Возврат ОписаниеДействияПомощникРасчетаУСН(Событие);
			
		ИначеЕсли ИмяЗадачи = "ЕНВД" Тогда
			
			Возврат ОписаниеДействияРасчетЕНВД(Событие);
			
		ИначеЕсли ПравилоВыполняетсяУниверсальнымПомощником(Правило) Тогда
			
			Возврат ОписаниеДействияПомощникУплатыНалога(Событие);
			
		ИначеЕсли ИмяЗадачи = "СтатистическаяОтчетность" Тогда
			
			// Отчеты, для которых бро не предоставляет возможности использовать "универсальный помощник",
			// могут быть предоставлены Росстату с помощью "универсального отчета".
			// Покажем пользователю информацию про универсальный отчет.
			Возврат Новый Структура("Переход", "http://buh.ru/articles/faq/40735/");
			
		КонецЕсли;
		
	ИначеЕсли Действие = Перечисления.ВидыДействийКалендаряБухгалтера.Зарплата Тогда
		
		Если ИмяЗадачи = "НДФЛ_Агент_Уплата" 
			И Константы.УчетЗарплатыИКадровСредствамиБухгалтерии.Получить() Тогда
			Если ПолноеИмяПравила = "НДФЛ_Агент_Уплата.Аванс" Тогда
				Возврат ОписаниеДействияВыплатаЗарплатыИУплатаНДФЛ(Событие, Истина);
			Иначе
				Возврат ОписаниеДействияВыплатаЗарплатыИУплатаНДФЛ(Событие, Ложь);
			КонецЕсли;
			
		Иначе
			Если Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Получить()
				И ПолноеИмяПравила = "НДФЛ_Агент_Уплата.Аванс" Тогда
				Возврат Новый Структура("Переход", "https://its.1c.ru/bmk/staff/advance");
			Иначе
				Возврат ОписаниеДействияФормированиеПлатежныхПорученийНаУплатуНалогов(Событие);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Действие = Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога Тогда
		Если ИмяЗадачи = "СтраховыеВзносы_Предприниматель" Тогда
			
			Возврат ОписаниеДействияРасчетСтраховыхВзносовИП(Событие);
		
		ИначеЕсли ПравилоВыполняетсяПомощникомРасчетаНалогаУСН(Правило) Тогда
			
			// Открываем форму обработки "Помощник расчета налога УСН"
			Возврат ОписаниеДействияПомощникРасчетаУСН(Событие);
			
		ИначеЕсли ИмяЗадачи = "ЕНВД" Тогда
			
			Возврат ОписаниеДействияРасчетЕНВД(Событие);
			
		ИначеЕсли ИмяЗадачи = "СтраховыеВзносы"
			И Константы.УчетЗарплатыИКадровСредствамиБухгалтерии.Получить()Тогда
			
			Возврат ОписаниеДействияВыплатаЗарплатыИУплатаНДФЛ(Событие, Ложь);
			
		ИначеЕсли ПравилоВыполняетсяУниверсальнымПомощником(Правило) Тогда
			
			Возврат ОписаниеДействияПомощникУплатыНалога(Событие);
			
		Иначе
			
			Возврат ОписаниеДействияФормированиеПлатежныхПорученийНаУплатуНалогов(Событие);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(Правило.Наименование) Тогда
		ОписаниеДействия = Новый Структура;
		ОписаниеДействия.Вставить("Предупреждение", Правило.Наименование);
		Возврат ОписаниеДействия;
	КонецЕсли;
	
	Возврат Новый Структура; // Никакое действие не можем выполнить
	
КонецФункции

Функция ОписаниеДействияЗаявленияОВвозе(Событие)
	
	ОписаниеДействия = Новый Структура;

	Отбор = Новый Структура;
	Отбор.Вставить("Организация", Событие.Организация);
	
	ОписаниеДействия.Вставить("ИмяФормы",       "Документ.ЗаявлениеОВвозеТоваров.ФормаСписка");
	ОписаниеДействия.Вставить("ПараметрыФормы", Новый Структура("Отбор", Отбор));
	
	Возврат ОписаниеДействия;

КонецФункции 

Функция ОписаниеДействияРегулярныйПлатеж(Событие)
	
	ОписаниеДействия = Новый Структура;
	ПараметрыФормы = Новый Структура;
	
	// В качестве шаблона для ввода новой платежки ищем последний введенный по текущему правилу документ.
	ШаблонПравила = РегистрыСведений.РегулярныеПлатежи.ШаблонПравила(
		Событие.Организация, Событие.Правило, Событие.ПериодСобытия);
	Если ШаблонПравила = Неопределено Тогда
		
		Возврат ОписаниеДействия;
		
	ИначеЕсли ШаблонПравила.ПериодСобытия = Событие.ПериодСобытия Тогда
		
		// Если по правилу вводился документ в ПериодСобытия, то открываем его
		ПараметрыФормы.Вставить("Ключ", ШаблонПравила.ПлатежноеПоручение);
		
	Иначе
		
		// Если в периоде документ не вводился, вводим новый копированием последнего введенного по правилу платежного поручения
		ПараметрыФормы.Вставить("ЗначениеКопирования", ШаблонПравила.ПлатежноеПоручение);
		
		ПараметрыФормы.Вставить("Правило",       Событие.Правило);
		ПараметрыФормы.Вставить("ПериодСобытия", Событие.ПериодСобытия);
		
	КонецЕсли;
	
	ОписаниеДействия.Вставить("ИмяФормы",       "Документ.ПлатежноеПоручение.ФормаОбъекта");
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияПлатежПоДаннымДекларации(Организация, РегистрацияВНалоговомОргане, СпособОплаты, Срок, Правило, ПериодСобытия, Описание) Экспорт
	
	ИмяФормыПлатежногоДокумента = Перечисления.СпособыУплатыНалогов.ИмяФормыПлатежногоДокумента(СпособОплаты);
	
	ОписаниеДействия = Новый Структура;
	НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Правило.Периодичность, ПериодСобытия);
	КонецПериода  = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Правило.Периодичность, ПериодСобытия);
	
	Показатели                  = ПоказателиБазовогоПериода(НачалоПериода, КонецПериода, Правило);
	ДлительностьБазовогоПериода = Показатели.ДлительностьБазовогоПериода;
	КонецБазовогоПериода        = Показатели.КонецБазовогоПериода;
	
	ИдентификаторЗадачи  = "";
	ИдентификаторПравила = "";
	ПолноеИмяПравила     = "";
	
	Идентификаторы = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ИдентификаторыПравилаИЗадачи(Правило);
	
	Если Идентификаторы <> Неопределено Тогда
		ИдентификаторЗадачи  = Идентификаторы.ИдентификаторЗадачи;
		ИдентификаторПравила = Идентификаторы.ИдентификаторПравила;
		ПолноеИмяПравила = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.СкомпоноватьПолноеИмяПравила(
			ИдентификаторЗадачи, ИдентификаторПравила);
	КонецЕсли;
	
	ОписаниеПлатежа = НовыйОписаниеПлатежа();
	ОписаниеПлатежа.Организация  = Организация;
	ОписаниеПлатежа.СпособОплаты = СпособОплаты;
	ОписаниеПлатежа.ИмяЗадачи    = Правило.Владелец.Код;
	ОписаниеПлатежа.ОКАТО        = Справочники.Организации.КодТерриторииМестаРегистрации(Организация);
	
	ПоказательПериода = ПоказательПериодаПлатежаПоДекларации(Правило, ПериодСобытия, Срок);
	ДанныеДекларации  = ДанныеДляУплатыНалогаПоДекларации(
		Правило,
		ПолноеИмяПравила,
		Организация,
		РегистрацияВНалоговомОргане,
		ПериодСобытия,
		Срок,
		ПоказательПериода);
	
	Если ДанныеДекларации = Неопределено Тогда
		
		// Декларации нет.
		// Надо предложить пользователю заполнить декларацию
		// Но быть готовым, что он не согласится и придется заполнять платежку без декларации.
		
		ШаблонТекста = НСтр("ru = 'Перед оформлением платежного документа рекомендуется подготовить отчет ""[Декларация] за [Период]"".
			|В этом случае сумма и реквизиты платежа будут взяты из отчета.'");
		ПараметрыТекста = Новый Структура;
		ПараметрыТекста.Вставить("Декларация", ИнтерфейсыВзаимодействияБРО.ПредставлениеФормыРегламентированногоОтчета(ПолноеИмяПравила, КонецБазовогоПериода));
		НачалоНалоговогоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Правило.ФинансовыйПериод, КонецБазовогоПериода);
		ПараметрыТекста.Вставить("Период",     КалендарьБухгалтера.ПредставлениеПериодаСобытия(НачалоНалоговогоПериода, КонецБазовогоПериода));
		
		ОписаниеДействия.Вставить("Вопрос",      СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонТекста, ПараметрыТекста));
		ОписаниеДействия.Вставить("ВариантДа",   НСтр("ru = 'Подготовить отчет'"));
		ОписаниеДействия.Вставить("ВариантНет",  НСтр("ru = 'Оформить платежный документ'"));
		ОписаниеДействия.Вставить("ДействиеДа",  Новый Структура);
		ОписаниеДействия.Вставить("ДействиеНет", Новый Структура);
		
		// Откроем форму отчета
		ОписаниеФормы = ИнтерфейсыВзаимодействияБРО.ОписаниеФормыРеглОтчета(
			ПолноеИмяПравила,
			Организация,
			РегистрацияВНалоговомОргане,
			НачалоНалоговогоПериода,
			КонецБазовогоПериода,
			ДлительностьБазовогоПериода);
		ОписаниеДействия.ДействиеДа.Вставить("ИмяФормы",       ОписаниеФормы.Имя);
		ОписаниеДействия.ДействиеДа.Вставить("ПараметрыФормы", ОписаниеФормы.Параметры);
		
		// Откроем пустой документ
		
		ОписаниеПлатежа.Период            = ПериодСобытия;
		ОписаниеПлатежа.ПоказательПериода = ПоказательПериода;
		
		ВидНалога = РасчетыСБюджетом.ВидНалогаПоКодуЗадачи(ОписаниеПлатежа.ИмяЗадачи, ОписаниеПлатежа.Организация, ОписаниеПлатежа.Период);
		
		ОписаниеПлатежа.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидНалога);
		
		ОписаниеПлатежа.КБК = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(ОписаниеПлатежа.Налог, , ОписаниеПлатежа.Период);
		
		ЗначенияЗаполнения = ЗначенияЗаполненияПлатежногоДокумента(ОписаниеПлатежа);
		
		ОписаниеДействия.ДействиеНет.Вставить("ИмяФормы", ИмяФормыПлатежногоДокумента);
		ОписаниеДействия.ДействиеНет.Вставить("ПараметрыФормы",
			Новый Структура("ЗначенияЗаполнения, ПериодСобытия, Правило",
				ЗначенияЗаполнения,
				ПериодСобытия,
				Правило));
		
		Возврат ОписаниеДействия;
		
	КонецЕсли;
	
	Если ДанныеДекларации.Платежи.Количество() = 0 Тогда
		
		ОписаниеДействия.Вставить("ИмяФормы", ИмяФормыПлатежногоДокумента);
		// По декларации ничего не надо платить.
		// Откроем пустую платежку
		
		ОписаниеПлатежа.Период              = ПериодСобытия;
		ОписаниеПлатежа.Декларация          = ДанныеДекларации.Ссылка;
		ОписаниеПлатежа.ДатаДекларации      = ДанныеДекларации.ДатаПодписи;
		ОписаниеПлатежа.КодНалоговогоОргана = ДанныеДекларации.КодНалоговогоОргана;
		ОписаниеПлатежа.ПоказательПериода   = ПоказательПериода;
		ОписаниеПлатежа.Описание            = Описание;
		
		ВидНалога = РасчетыСБюджетом.ВидНалогаПоКодуЗадачи(ОписаниеПлатежа.ИмяЗадачи, ОписаниеПлатежа.Организация, ОписаниеПлатежа.Период);
		
		ОписаниеПлатежа.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидНалога);
		
		ОписаниеПлатежа.КБК = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(ОписаниеПлатежа.Налог, , ОписаниеПлатежа.Период);
		
		ЗначенияЗаполнения = ЗначенияЗаполненияПлатежногоДокумента(ОписаниеПлатежа);
		
		ОписаниеДействия.Вставить("ПараметрыФормы", Новый Структура("ЗначенияЗаполнения, ПериодСобытия, Правило", ЗначенияЗаполнения, ПериодСобытия, Правило));
		
	ИначеЕсли ДанныеДекларации.Платежи.Количество() = 1 Тогда
		
		ОписаниеДействия.Вставить("ИмяФормы", ИмяФормыПлатежногоДокумента);
		
		Платеж = ДанныеДекларации.Платежи[0];
		Если ЗначениеЗаполнено(Платеж.ПлатежноеПоручение) Тогда
			
			// Откроем существующую платежку
			ОписаниеДействия.Вставить("ПараметрыФормы", Новый Структура("Ключ", Платеж.ПлатежноеПоручение));
			
		Иначе
			
			// Создадим платежку по данным декларации
			
			ОписаниеПлатежа.Период              = ПериодСобытия;
			ОписаниеПлатежа.ПоказательПериода   = ПоказательПериода;
			ОписаниеПлатежа.Аванс               = Платеж.Аванс;
			ОписаниеПлатежа.ОКАТО               = Платеж.ОКАТО;
			ОписаниеПлатежа.Сумма               = Платеж.Сумма;
			ОписаниеПлатежа.Описание            = Описание;
			ОписаниеПлатежа.Декларация          = ДанныеДекларации.Ссылка;
			ОписаниеПлатежа.ДатаДекларации      = ДанныеДекларации.ДатаПодписи;
			ОписаниеПлатежа.КодНалоговогоОргана = ДанныеДекларации.КодНалоговогоОргана;
			ОписаниеПлатежа.Налог               = Платеж.Налог;
			ОписаниеПлатежа.КБК                 = Платеж.КБК;
			
			ЗначенияЗаполнения = ЗначенияЗаполненияПлатежногоДокумента(ОписаниеПлатежа);
			
			ОписаниеДействия.Вставить("ПараметрыФормы", Новый Структура("ЗначенияЗаполнения, ПериодСобытия, Правило", ЗначенияЗаполнения, ПериодСобытия, Правило));
			
		КонецЕсли;
		
	Иначе
		
		// Откроем форму списка платежей
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация",       Организация);
		ПараметрыФормы.Вставить("ПериодСобытия",     ПериодСобытия);
		ПараметрыФормы.Вставить("Правило",           Правило);
		ПараметрыФормы.Вставить("СпособОплаты",      СпособОплаты);
		ПараметрыФормы.Вставить("Декларация",        ДанныеДекларации.Ссылка);
		ПараметрыФормы.Вставить("ДатаДекларации",    ДанныеДекларации.ДатаПодписи);
		ПараметрыФормы.Вставить("ОписаниеДействия",  Описание);
		ПараметрыФормы.Вставить("ПоказательПериода", ПоказательПериода);
		ПараметрыФормы.Вставить("ВидНалога",         РасчетыСБюджетом.ВидНалогаПоКодуЗадачи(ОписаниеПлатежа.ИмяЗадачи, ОписаниеПлатежа.Организация, ОписаниеПлатежа.Период));
		ПараметрыФормы.Вставить("Платежи",           ПоместитьВоВременноеХранилище(ДанныеДекларации.Платежи));
		
		ОписаниеДействия.Вставить("ИмяФормы",       "Обработка.ФормированиеПлатежныхПорученийНаУплатуНалогов.Форма.УплатаПоДекларации");
		ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
		
	КонецЕсли;
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияОтчетПФР(Событие)
	
	ОписаниеДействия = Новый Структура;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",    Событие.Организация);
	ПараметрыФормы.Вставить("ОтчетныйПериод", НачалоКвартала(Событие.ПериодСобытия));
	
	ОписаниеДействия.Вставить("ИмяФормы",       "Обработка.ПодготовкаКвартальнойОтчетностиВПФР.Форма");
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Процедура ЗаполнитьДействиеУчетВоВнешнейПрограмме(ОписаниеДействия, ПредставлениеОтчета)
	
	Если ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии") Тогда
		Возврат;
	КонецЕсли;
		
	ТекстПредупреждения = НСтр("ru = 'В настройках параметров учета указано, что учет заработной платы ведется во внешней программе.
		|Подготовьте %1 в той программе, в которой начисляете зарплату'");
	
	ОписаниеДействия.Вставить(
		"Предупреждение",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, ПредставлениеОтчета));
	
КонецПроцедуры

Функция ОписаниеДействияСведенияПФРЕжемесячные(Событие)
	
	ОписаниеДействия = Новый Структура;
	
	ЗаполнитьДействиеУчетВоВнешнейПрограмме(ОписаниеДействия, НСтр("ru = 'сведения'"));
	
	Если ЗначениеЗаполнено(ОписаниеДействия) Тогда
		Возврат ОписаниеДействия;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии") Тогда
		
		ТекстПредупреждения = НСтр("ru = 'В настройках параметров учета указано, что учет заработной платы ведется во внешней программе.
			|Подготовьте сведения в той программе, в которой начисляете зарплату'");
		
		ОписаниеДействия.Вставить("Предупреждение", ТекстПредупреждения);
		Возврат ОписаниеДействия;
		
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Организация",    Событие.Организация);
	Отбор.Вставить("ОтчетныйПериод", НачалоМесяца(Событие.ПериодСобытия));
	
	ОписаниеДействия.Вставить("ИмяФормы",       "Документ.СведенияОЗастрахованныхЛицахСЗВ_М.ФормаСписка");
	ОписаниеДействия.Вставить("ПараметрыФормы", Новый Структура("Отбор", Отбор));
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияСведенияПФРЕжегодные(Событие)
	
	ОписаниеДействия = Новый Структура;
	
	ЗаполнитьДействиеУчетВоВнешнейПрограмме(ОписаниеДействия, НСтр("ru = 'сведения'"));
	
	Если ЗначениеЗаполнено(ОписаниеДействия) Тогда
		Возврат ОписаниеДействия;
	КонецЕсли;
	
	ОписаниеДействия.Вставить("ИмяФормы",       "Документ.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.ФормаСписка");
	ОписаниеДействия.Вставить("ПараметрыФормы", Новый Структура("Отбор", Новый Структура));
	
	ОписаниеДействия.ПараметрыФормы.Отбор.Вставить("Организация",    Событие.Организация);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияРеестрДСВ3(Событие)
	
	ОписаниеДействия = Новый Структура;
	
	ЗаполнитьДействиеУчетВоВнешнейПрограмме(ОписаниеДействия, НСтр("ru = 'реестр ДСВ-3'"));
	
	Если ЗначениеЗаполнено(ОписаниеДействия) Тогда
		Возврат ОписаниеДействия;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Организация", Событие.Организация);
	
	ОписаниеДействия.Вставить("ИмяФормы",       "Документ.РеестрДСВ_3.ФормаСписка");
	ОписаниеДействия.Вставить("ПараметрыФормы", Новый Структура("Отбор", Отбор));
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействия2НДФЛ(Событие)
	
	ОписаниеДействия = Новый Структура;
	
	ЗаполнитьДействиеУчетВоВнешнейПрограмме(ОписаниеДействия, НСтр("ru = 'справки 2-НДФЛ'"));
	
	Если ЗначениеЗаполнено(ОписаниеДействия) Тогда
		Возврат ОписаниеДействия;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Организация",     Событие.Организация);
	Отбор.Вставить("НалоговыйПериод", Год(Событие.ПериодСобытия));
	
	ОписаниеДействия.Вставить("ИмяФормы",       "Документ.СправкиНДФЛДляПередачиВНалоговыйОрган.ФормаСписка");
	ОписаниеДействия.Вставить("ПараметрыФормы", Новый Структура("Отбор", Отбор));
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияФормированиеПлатежныхПорученийНаУплатуНалогов(Событие)
	
	ОписаниеДействия = Новый Структура;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Событие.Организация);
	
	ОписаниеДействия.Вставить("ИмяФормы",       "Обработка.ФормированиеПлатежныхПорученийНаУплатуНалогов.Форма");
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияРасчетСтраховыхВзносовИП(Событие)
	
	ОписаниеДействия = Новый Структура;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",   Событие.Организация);
	ПараметрыФормы.Вставить("ПериодСобытия", КонецКвартала(Событие.ПериодСобытия));
	ПараметрыФормы.Вставить("Правило",       Событие.Правило);
	ПараметрыФормы.Вставить("Срок",          Событие.Срок);
	
	// Конечное имя формы определяетя видом страховых взносов
	ОписаниеДействия.Вставить("ИмяФормы", "Обработка.РасчетСтраховыхВзносовИП.Форма");
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Процедура ДополнитьМассивСчетовУчета(ТаблицаСчетовСтраховыхВзносов, Налог, ВидНалоговогоОбязательства = Неопределено, ПериодСобытия)
	
	Если ВидНалоговогоОбязательства = Неопределено Тогда
		ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.Налог;
	КонецЕсли;
	
	СчетУчетаВзносов = Справочники.ВидыНалоговИПлатежейВБюджет.СчетУчета(Налог, ПериодСобытия);
	Если ЗначениеЗаполнено(СчетУчетаВзносов) Тогда
		НоваяСтрока = ТаблицаСчетовСтраховыхВзносов.Добавить();
		НоваяСтрока.Налог                      = Налог;
		НоваяСтрока.ВидНалоговогоОбязательства = ВидНалоговогоОбязательства;
		НоваяСтрока.СчетУчета                  = СчетУчетаВзносов;
		НоваяСтрока.КБК                        = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(Налог, ВидНалоговогоОбязательства, ПериодСобытия);
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыСтраховыхВзносов(Знач ПериодСобытия) Экспорт
	
	ТаблицаСчетовСтраховыхВзносов = Новый ТаблицаЗначений;
	ТаблицаСчетовСтраховыхВзносов.Колонки.Добавить("Налог",                      Новый ОписаниеТипов("СправочникСсылка.ВидыНалоговИПлатежейВБюджет"));
	ТаблицаСчетовСтраховыхВзносов.Колонки.Добавить("ВидНалоговогоОбязательства", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПлатежейВГосБюджет"));
	ТаблицаСчетовСтраховыхВзносов.Колонки.Добавить("СчетУчета",                  Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаСчетовСтраховыхВзносов.Колонки.Добавить("КБК",                        Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20)));
	ТаблицаСчетовСтраховыхВзносов.Колонки.Добавить("НазначениеПлатежа",          Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(210)));
	
	// 69.01
	ДополнитьМассивСчетовУчета(ТаблицаСчетовСтраховыхВзносов,
		Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.СтраховыеВзносы_ФСС),
		Перечисления.ВидыПлатежейВГосБюджет.Налог,
		ПериодСобытия);
		
	// 69.02.7
	ДополнитьМассивСчетовУчета(ТаблицаСчетовСтраховыхВзносов,
		Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.СтраховыеВзносы_ПФР_СтраховаяЧасть),
		Перечисления.ВидыПлатежейВГосБюджет.Налог,
		ПериодСобытия);
		
		// 69.11
	ДополнитьМассивСчетовУчета(ТаблицаСчетовСтраховыхВзносов,
		Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.СтраховыеВзносы_ФСС_НСиПЗ),
		,
		ПериодСобытия);
		
	// 69.03.1
	ДополнитьМассивСчетовУчета(ТаблицаСчетовСтраховыхВзносов,
		Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.СтраховыеВзносы_ФФОМС),
		Перечисления.ВидыПлатежейВГосБюджет.Налог,
		ПериодСобытия);

	Если УчетЗарплаты.ИспользуетсяТрудЧленовЛетныхЭкипажей() Тогда
		// 69.02.3
		ДополнитьМассивСчетовУчета(ТаблицаСчетовСтраховыхВзносов,
			Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.ДополнительныеВзносы_ПФР_ЛетныеЭкипажи),
			Перечисления.ВидыПлатежейВГосБюджет.Налог,
			ПериодСобытия);
	КонецЕсли;
	
	Если УчетЗарплаты.ИспользуетсяТрудШахтеров() Тогда	
		// 69.02.4
		ДополнитьМассивСчетовУчета(ТаблицаСчетовСтраховыхВзносов,
			Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.ДополнительныеВзносы_ПФР_Шахтеры),
			Перечисления.ВидыПлатежейВГосБюджет.Налог,
			ПериодСобытия);
	КонецЕсли;
	
	Если УчетЗарплаты.ИспользуютсяРаботыСДосрочнойПенсией() Тогда
		// 69.02.5
		ДополнитьМассивСчетовУчета(ТаблицаСчетовСтраховыхВзносов,
			Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.ДополнительныеВзносы_ПФР_ВредныеУсловия),
			Перечисления.ВидыПлатежейВГосБюджет.Налог,
			ПериодСобытия);
			
		ДополнитьМассивСчетовУчета(ТаблицаСчетовСтраховыхВзносов,
			Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.ДополнительныеВзносы_ПФР_ВредныеУсловия),
			Перечисления.ВидыПлатежейВГосБюджет.ВзносыБезСпецоценки,
			ПериодСобытия);
		
		// 69.02.6
		ДополнитьМассивСчетовУчета(ТаблицаСчетовСтраховыхВзносов,
			Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.ДополнительныеВзносы_ПФР_ТяжелыеУсловия),
			Перечисления.ВидыПлатежейВГосБюджет.Налог,
			ПериодСобытия);
			
		ДополнитьМассивСчетовУчета(ТаблицаСчетовСтраховыхВзносов,
			Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.ДополнительныеВзносы_ПФР_ТяжелыеУсловия),
			Перечисления.ВидыПлатежейВГосБюджет.ВзносыБезСпецоценки,
			ПериодСобытия);
	КонецЕсли;
	
	Если УчетЗарплаты.УдерживаютсяДобровольныеВзносыВПФР() Тогда
		// 69.05.2
		ДополнитьМассивСчетовУчета(ТаблицаСчетовСтраховыхВзносов,
			Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.СтраховыеВзносы_ПФР_Добровольные),
			Перечисления.ВидыПлатежейВГосБюджет.Налог,
			ПериодСобытия);
	КонецЕсли;
	
	Возврат ТаблицаСчетовСтраховыхВзносов;
	
КонецФункции

Функция ОписаниеДействияВыплатаЗарплатыИУплатаНДФЛ(Событие, Аванс)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",      Событие.Организация);
	ПараметрыФормы.Вставить("ПериодСобытия",    Событие.ПериодСобытия);
	ПараметрыФормы.Вставить("ОписаниеДействия", НСтр("ru = 'Выплата зарплаты и уплата НДФЛ'"));
	ПараметрыФормы.Вставить("Правило",          Событие.Правило);
	ПараметрыФормы.Вставить("Описание",         Событие.Наименование);
	ПараметрыФормы.Вставить("Аванс",            Аванс);
	
	ОписаниеДействия = Новый Структура;
	ОписаниеДействия.Вставить("ИмяФормы",       "Обработка.ПомощникУчетаЗарплаты.Форма.Форма");
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияСверкаНДС(Событие)
	
	ОписаниеДействия = Новый Структура;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",     Событие.Организация);
	ПараметрыФормы.Вставить("НалоговыйПериод", Событие.ПериодСобытия);
	
	ОписаниеДействия.Вставить("ИмяФормы",       "Обработка.СверкаДанныхУчетаНДС.Форма");
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияУплатаПатента(Организация, СпособОплаты, Срок, Правило, ПериодСобытия) Экспорт
	
	ИмяФормыПлатежногоДокумента = ?(СпособОплаты = Перечисления.СпособыУплатыНалогов.НаличнымиПоКвитанции,
		"Документ.РасходныйКассовыйОрдер.ФормаОбъекта", "Документ.ПлатежноеПоручение.ФормаОбъекта");
	
	ОписаниеДействия = Новый Структура;
	
	ОписаниеПлатежа = НовыйОписаниеПлатежа();
	ОписаниеПлатежа.Организация  = Организация;
	ОписаниеПлатежа.СпособОплаты = СпособОплаты;
	ОписаниеПлатежа.ИмяЗадачи    = "Патент_Уплата";
	
	ПериодичностьПоКлассификатору = ПлатежиВБюджетКлиентСервер.ПлатежПоКонкретнойДате();
	ПоказательПериода = ПлатежиВБюджетКлиентСервер.НалоговыйПериод(Срок, ПериодичностьПоКлассификатору);
	
	Платежи = ИнтерфейсыВзаимодействияБРО.НовыйТаблицаДанныхРеглОтчета();
	Платежи.Колонки.Добавить("КодНалоговогоОргана", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20)));
	
	Патент = Правило;
	
	РеквизитыПатента = Справочники.Патенты.ДанныеУплатаПатента(Патент, Срок);
	
	КБК = РеквизитыПатента.КБК;
	Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоКБК(КБК);
	ВидНалога = Налог.ВидНалога;
	
	СтрокаПлатежа = Платежи.Добавить();
	
	ЗаполнитьЗначенияСвойств(СтрокаПлатежа, РеквизитыПатента);
	НазначениеПлатежа = Справочники.ВидыНалоговИПлатежейВБюджет.НазначениеПлатежа(
			Налог, ВидНалога, ОписаниеПлатежа.Организация);
	РеквизитыПатента.Описание = НазначениеПлатежа+ РеквизитыПатента.Описание;
	ОписаниеПлатежа.Вставить("Описание", РеквизитыПатента.Описание);
	
	СтрокаПлатежа.КБК       = КБК;
	
	КоличествоСтрок = Платежи.Количество();
		
	// Возможно, платежные документы уже созданы
	Если Платежи.Количество() > 0 Тогда
		ДополнитьНачисленияПлатежнымиДокументами(Платежи, Правило, ПериодСобытия, Организация);
	КонецЕсли;
	
	// Удалим строки, по которым нет платежей
	Если КоличествоСтрок > 1 Тогда
		Для НомерСтроки = 1 По КоличествоСтрок Цикл
			Платеж = Платежи[КоличествоСтрок - НомерСтроки];
			Если Платеж.Сумма = 0 И Не ЗначениеЗаполнено(Платеж.ПлатежноеПоручение) Тогда
				Платежи.Удалить(Платеж);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Платежи.Количество() = 0 Тогда
		
		ОписаниеДействия.Вставить("ИмяФормы", ИмяФормыПлатежногоДокумента);
		// Откроем пустой платежный документ
		
		ОписаниеПлатежа.Период              = ПериодСобытия;
		ОписаниеПлатежа.ПоказательПериода   = ПоказательПериода;
		ОписаниеПлатежа.Налог               = Налог;
		ОписаниеПлатежа.КБК                 = КБК;
		
		ЗначенияЗаполнения = ЗначенияЗаполненияПлатежногоДокумента(ОписаниеПлатежа);
		
		ОписаниеДействия.Вставить("ПараметрыФормы", Новый Структура("ЗначенияЗаполнения, ПериодСобытия, Правило", ЗначенияЗаполнения, ПериодСобытия, Правило));
		
	ИначеЕсли Платежи.Количество() = 1 Тогда
		
		ОписаниеДействия.Вставить("ИмяФормы", ИмяФормыПлатежногоДокумента);
		
		Платеж = Платежи[0];
		Если ЗначениеЗаполнено(Платеж.ПлатежноеПоручение) Тогда
			
			// Откроем существующий платежный документ
			ОписаниеДействия.Вставить("ПараметрыФормы", Новый Структура("Ключ", Платеж.ПлатежноеПоручение));
			
		Иначе
			
			ОписаниеПлатежа.Период              = ПериодСобытия;
			ОписаниеПлатежа.ПоказательПериода   = ПоказательПериода;
			ОписаниеПлатежа.ОКАТО               = Платеж.ОКАТО;
			ОписаниеПлатежа.Сумма               = Платеж.Сумма;
			ОписаниеПлатежа.КодНалоговогоОргана = Платеж.КодНалоговогоОргана;
			ОписаниеПлатежа.Налог               = Налог;
			ОписаниеПлатежа.КБК                 = КБК;
			
			ЗначенияЗаполнения = ЗначенияЗаполненияПлатежногоДокумента(ОписаниеПлатежа);
			
			ОписаниеДействия.Вставить("ПараметрыФормы", Новый Структура("ЗначенияЗаполнения, ПериодСобытия, Правило", ЗначенияЗаполнения, ПериодСобытия, Правило));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОписаниеДействия;

КонецФункции

Функция ОписаниеДействияПомощникРасчетаУСН(Событие)
	
	ОписаниеДействия = Новый Структура;
	
	ОписаниеДействия.Вставить("ИмяФормы", "Обработка.ПомощникРасчетаНалогаУСН.Форма.Форма");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Правило",      Событие.Правило);
	ПараметрыФормы.Вставить("Организация",  Событие.Организация);
	ПараметрыФормы.Вставить("Период",       КонецКвартала(Событие.ПериодСобытия));
	ПараметрыФормы.Вставить("ВызовИзСпискаЗадач", Истина);
	
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияАвансовыйПлатежУСН(Организация, РегистрацияВНалоговомОргане, СпособОплаты, Срок, Правило, ПериодСобытия, Описание) Экспорт
	
	ВидНалога = РасчетыСБюджетом.ВидНалогаПоКодуЗадачи(Правило.Владелец.Код, Организация, КонецКвартала(ПериодСобытия));
	Налог     = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидНалога);
	КБК       = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(Налог, , КонецКвартала(ПериодСобытия));
	ОКТМО     = Справочники.Организации.КодТерриторииМестаРегистрации(Организация);
	
	КодНалоговогоОргана = ДанныеГосударственныхОрганов.КодГосударственногоОрганаОрганизации(Организация, Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган);
	
	ОписаниеПлатежа = ВыполнениеЗадачБухгалтера.НовыйОписаниеПлатежа();
	ОписаниеПлатежа.СпособОплаты = СпособОплаты;
	
	ОписаниеПлатежа.Организация = Организация;
	
	Платежи = Новый ТаблицаЗначений;
	НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Правило.Периодичность, ПериодСобытия);
	КонецПериода  = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Правило.Периодичность, ПериодСобытия);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("НачалоПериода",       НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",        КонецПериода);
	Запрос.УстановитьПараметр("КодНалоговогоОргана", КодНалоговогоОргана);
	Запрос.УстановитьПараметр("ОКТМО",               ОКТМО);
	Запрос.УстановитьПараметр("КБК",                 КБК);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасчетНалогаУСН.ПериодРасчета КАК Период,
	|	СУММА(РасчетНалогаУСН.НалогКУплате) КАК Сумма,
	|	&КодНалоговогоОргана,
	|	&КБК,
	|	&ОКТМО КАК ОКАТО
	|ИЗ
	|	РегистрСведений.РасчетНалогаУСН КАК РасчетНалогаУСН
	|ГДЕ
	|	РасчетНалогаУСН.Организация = &Организация
	|	И РасчетНалогаУСН.ПериодРасчета МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РасчетНалогаУСН.НалогКУплате > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетНалогаУСН.ПериодРасчета";
	
	Платежи = Запрос.Выполнить().Выгрузить();
	
	Платежи.Колонки.Добавить("Аванс", Новый ОписаниеТипов("Булево"));
	Платежи.Колонки.Добавить("Агент", Новый ОписаниеТипов("Булево"));
	
	Платежи.ЗаполнитьЗначения(Истина, "Аванс");
	
	ПоказательПериода = "";
	
	// Определим период, к которому относится платеж,
	// в соответствии с классификатором, используемым в платежных поручениях
	НалоговыйПериодДляПлатежейВБюджет = Правило.Периодичность;
	ПериодичностьПоКлассификатору = ПлатежиВБюджетПереопределяемый.ПериодичностьПоКлассификатору(НалоговыйПериодДляПлатежейВБюджет);
	
	Если ПериодичностьПоКлассификатору = ПлатежиВБюджетКлиентСервер.ПлатежПоКонкретнойДате() 
		Или НалоговыйПериодДляПлатежейВБюджет <> Правило.Периодичность Тогда
		ПоказательПериода = ПлатежиВБюджетКлиентСервер.НалоговыйПериод(Срок, ПериодичностьПоКлассификатору);
	Иначе
		ПоказательПериода = ПлатежиВБюджетКлиентСервер.НалоговыйПериод(КонецКвартала(ПериодСобытия), ПериодичностьПоКлассификатору);
	КонецЕсли;
	
	Если Платежи.Количество() <> 0 Тогда
		ДополнитьНачисленияПлатежнымиДокументами(Платежи, Правило, ПериодСобытия, Организация);
	КонецЕсли;
	
	ОписаниеДействия = Новый Структура;
	
	ОписаниеДействия.Вставить("ИмяФормы", Перечисления.СпособыУплатыНалогов.ИмяФормыПлатежногоДокумента(СпособОплаты));
	
	// В таблице не может быть несколько строк: либо одна, либо ни одной.
	Если Платежи.Количество() = 1 Тогда
		
		Платеж = Платежи[0];
		
		Если ЗначениеЗаполнено(Платеж.ПлатежноеПоручение) Тогда
			
			// Откроем существующую платежку
			ОписаниеДействия.Вставить("ПараметрыФормы", Новый Структура("Ключ", Платеж.ПлатежноеПоручение));
			
		Иначе
			
			// Создадим платежку по данным операции
			ОписаниеПлатежа.Налог               = Налог;
			ОписаниеПлатежа.Период              = Платеж.Период;
			ОписаниеПлатежа.ПоказательПериода   = ПоказательПериода;
			ОписаниеПлатежа.Аванс               = Платеж.Аванс;
			ОписаниеПлатежа.КБК                 = Платеж.КБК;
			ОписаниеПлатежа.ОКАТО               = Платеж.ОКАТО;
			ОписаниеПлатежа.Сумма               = Платеж.Сумма;
			ОписаниеПлатежа.Описание            = Описание;
			ОписаниеПлатежа.КодНалоговогоОргана = Платеж.КодНалоговогоОргана;
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполненияПлатежногоДокумента(ОписаниеПлатежа));
			ПараметрыФормы.Вставить("ПериодСобытия",      ПериодСобытия);
			ПараметрыФормы.Вставить("Правило",            Правило);
			
			ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
			
		КонецЕсли;
		
	Иначе
		
		// По операции ничего не надо платить.
		// Откроем пустую платежку.
		ОписаниеПлатежа.Период            = КонецКвартала(ПериодСобытия);
		ОписаниеПлатежа.ПоказательПериода = ПоказательПериода;
		ОписаниеПлатежа.ОКАТО             = ОКТМО;
		ОписаниеПлатежа.Налог             = Налог;
		ОписаниеПлатежа.КБК               = КБК;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполненияПлатежногоДокумента(ОписаниеПлатежа));
		ПараметрыФормы.Вставить("ПериодСобытия",      ПериодСобытия);
		ПараметрыФормы.Вставить("Правило",            Правило);
		
		ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
		
	КонецЕсли;
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияРасчетЕНВД(Событие)
	
	ОписаниеДействия = Новый Структура;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Событие.Организация);
	ПараметрыФормы.Вставить("Правило",     Событие.Правило);
	ПараметрыФормы.Вставить("Период",      Событие.ПериодСобытия);
	ПараметрыФормы.Вставить("ВызовИзСпискаЗадач", Истина);
	
	ОписаниеДействия.Вставить("ИмяФормы",       "Обработка.ПомощникРасчетаЕНВД.Форма");
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияПомощникУплатыНалога(Событие)
	
	ОписаниеДействия = Новый Структура;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",                 Событие.Организация);
	ПараметрыФормы.Вставить("РегистрацияВНалоговомОргане", Событие.РегистрацияВНалоговомОргане);
	ПараметрыФормы.Вставить("ПериодСобытия",               Событие.ПериодСобытия);
	ПараметрыФормы.Вставить("Правило",                     Событие.Правило);
	ПараметрыФормы.Вставить("Срок",                        Событие.Срок);
	ПараметрыФормы.Вставить("Описание",                    Событие.Наименование);
	ПараметрыФормы.Вставить("ЕстьИнформацияНаИТС",         Событие.ЕстьИнформацияНаИТС);
	ПараметрыФормы.Вставить("ИдентификаторЗадачи",         Событие.ИдентификаторЗадачи);
	
	ОписаниеДействия.Вставить("ИмяФормы",       "Обработка.ПомощникУплатыНалога.Форма.Форма");
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ПоказателиБазовогоПериода(НачалоПериода, КонецПериода, Правило) Экспорт
	
	Показатели = Новый Структура;
	
	СобытиеПозжеРелевантногоПериода = КалендарьБухгалтера.СрокИстекаетПослеОкончанияРелевантногоПериода(Правило);
	ПростойБазовыйПериод            = КалендарьБухгалтера.БазовыйПериодОпределяетсяПросто(Правило);
	
	ДлительностьБазовогоПериода = Правило.Периодичность;
	
	Если СобытиеПозжеРелевантногоПериода И ПростойБазовыйПериод Тогда
		// Базовый период и релевантный период совпадают
		НачалоБазовогоПериода = НачалоПериода;
		КонецБазовогоПериода  = КонецПериода;
	Иначе
		
		// Базовый и релевантный периоды не совпадают.
		// Базовый период включает в себя один или несколько релевантных.
		Если Не ПростойБазовыйПериод Тогда
			ДлительностьБазовогоПериода = Правило.БазовыйПериод;
		КонецЕсли;
		
		// Базовый период всегда предшествует сроку
		ОтставаниеБазовогоПериода = Правило.ОтставаниеБазовогоПериода;
		КалендарьБухгалтера.УточнитьОтставаниеБазовогоПериода(
			ОтставаниеБазовогоПериода,
			ДлительностьБазовогоПериода,
			Правило.СрокМесяцев);
		
		// авансы за первое полугодие 2013 платим по данным 2012 года. СрокМесяцев = 0, ОтставаниеБазовогоПериода = 0
		// прогноз на май даем в апреле по данным за март. СрокМесяцев = -2, ОтставаниеБазовогоПериода = 1 (или 0)
		// авансы в апреле платим по данным 1 квартала. СрокМесяцев = -1, ОтставаниеБазовогоПериода = 0
		// авансы в феврале платим по данным 3 квартала. СрокМесяцев = -1, ОтставаниеБазовогоПериода = 1
		ОпережениеРелевантногоПериода = 1 +  ОтставаниеБазовогоПериода;
		
		БазовыйПериод = ИнтерфейсыВзаимодействияБРОКлиентСервер.ДобавитьПериод(
			НачалоПериода,
			ДлительностьБазовогоПериода,
			-ОпережениеРелевантногоПериода);
		
		НачалоБазовогоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(ДлительностьБазовогоПериода, БазовыйПериод);
		КонецБазовогоПериода  = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(ДлительностьБазовогоПериода,  БазовыйПериод);
		
	КонецЕсли;
	
	Показатели.Вставить("ДлительностьБазовогоПериода", ДлительностьБазовогоПериода);
	Показатели.Вставить("НачалоБазовогоПериода", НачалоБазовогоПериода);
	Показатели.Вставить("КонецБазовогоПериода", КонецБазовогоПериода);
	
	Возврат Показатели;
	
КонецФункции

Функция ЗаполнитьПоДаннымНастройки(Настройка, ДанныеПлатежногоДокумента, ИмяИсходного, ИмяРеквизита = "")
	
	Если ПустаяСтрока(ИмяРеквизита) Тогда
		ИмяРеквизита = ИмяИсходного;
	КонецЕсли;
	
	РеквизитОбъектЗаполненИсходнымиДанными = Ложь;
	Если Настройка.Свойство(ИмяИсходного) И ЗначениеЗаполнено(Настройка[ИмяИсходного]) Тогда
		ДанныеПлатежногоДокумента.Вставить(ИмяРеквизита, Настройка[ИмяИсходного]);
		РеквизитОбъектЗаполненИсходнымиДанными = Истина;
	КонецЕсли;
	
	Возврат РеквизитОбъектЗаполненИсходнымиДанными;
	
КонецФункции

Функция ПравилоВыполняетсяПомощникомРасчетаНалогаУСН(Правило)
	
	ПолноеИмяПравила = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПолноеИмяПравила(Правило);
	
	Если ПолноеИмяПравила = "УСН.2013_ДекларацияОрганизация" 
		ИЛИ ПолноеИмяПравила = "УСН.2013_УплатаОрганизация"
		ИЛИ ПолноеИмяПравила = "УСН.2013_ДекларацияПредприниматель"
		ИЛИ ПолноеИмяПравила = "УСН.2013_УплатаПредприниматель"
		ИЛИ ПолноеИмяПравила = "УСН.2013_УплатаАвансов" Тогда
		
		Возврат Истина
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПравилоВыполняетсяУниверсальнымПомощником(Правило)
	
	ИмяЗадачи = Правило.Владелец.Код;
	ПолноеИмяПравила = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПолноеИмяПравила(Правило);
	
	Если ИмяЗадачи = "СтраховыеВзносы"
		ИЛИ ИмяЗадачи = "НДФЛ_Агент_Уплата"
		ИЛИ ПолноеИмяПравила = "ТранспортныйНалог.2013_УплатаАванс"
		ИЛИ ПолноеИмяПравила = "ЗемельныйНалог.2013_Аванс" 
		ИЛИ ПолноеИмяПравила = "ЗемельныйНалог.2015_Аванс" 
		ИЛИ ПолноеИмяПравила = "ТорговыйСбор.2015_Уплата"
		ИЛИ ИнтерфейсыВзаимодействияБРО.ТребованиеОбрабатывается(ПолноеИмяПравила) Тогда
		
		Возврат Истина
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область Статусы

Процедура ЗарегистрироватьИзменениеСтатусаЗадачи(Документ, СтатусОтправки) Экспорт
	
	Если СтатусОтправки = Перечисления.СтатусыОтправки.Сдан Тогда
		НовыйСтатус = "Сдано";
	Иначе
		НовыйСтатус = "";
	КонецЕсли;
	
	КодНалоговогоОргана = "";
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		
		ЗначенияДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ,
			"ИсточникОтчета, Организация, ДатаОкончания, КодНалоговогоОргана");
		
		ИдентификаторыТребований = СоответствияПравилИФормОтчетов().Скопировать(
			Новый Структура("ФормаОтчета", ЗначенияДокумента.ИсточникОтчета), "ИдентификаторПравила, ИдентификаторЗадачи");
		
		ПериодСобытия       = ЗначенияДокумента.ДатаОкончания;
		КодНалоговогоОргана = ЗначенияДокумента.КодНалоговогоОргана;
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.СправкиНДФЛДляПередачиВНалоговыйОрган") Тогда
		
		ИдентификаторыТребований = ИдентификаторыПравилСправкиНДФЛ();
		ЗначенияДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "Организация, НалоговыйПериодДата");
		
		ПериодСобытия = ЗначенияДокумента.НалоговыйПериодДата;
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.СведенияОЗастрахованныхЛицахСЗВ_М") Тогда
		
		ИдентификаторыТребований = ИдентификаторыПравилСведенияОЗастрахованныхЛицах();
		ЗначенияДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "Организация, ОтчетныйПериод");
		ПериодСобытия = НачалоДня(КонецМесяца(ЗначенияДокумента.ОтчетныйПериод));
		
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ИдентификаторыТребований.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НовыйСтатус",              НовыйСтатус);
	Запрос.УстановитьПараметр("ИдентификаторыТребований", ИдентификаторыТребований);
	Запрос.УстановитьПараметр("Организация",              ЗначенияДокумента.Организация);
	Запрос.УстановитьПараметр("ПериодСобытия",            ПериодСобытия);
	Запрос.УстановитьПараметр("КодНалоговогоОргана",      КодНалоговогоОргана);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИдентификаторыТребований.ИдентификаторПравила,
	|	ИдентификаторыТребований.ИдентификаторЗадачи
	|ПОМЕСТИТЬ ИдентификаторыТребований
	|ИЗ
	|	&ИдентификаторыТребований КАК ИдентификаторыТребований
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистрацииВНалоговомОргане.Ссылка
	|ПОМЕСТИТЬ НалоговыйОрган
	|ИЗ
	|	Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	|ГДЕ
	|	РегистрацииВНалоговомОргане.Код = &КодНалоговогоОргана
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИдентификаторыТребований.ИдентификаторЗадачи
	|ПОМЕСТИТЬ ОтборПоЗадаче
	|ИЗ
	|	ИдентификаторыТребований КАК ИдентификаторыТребований
	|
	|СГРУППИРОВАТЬ ПО
	|	ИдентификаторыТребований.ИдентификаторЗадачи
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ИдентификаторыТребований.ИдентификаторПравила = """") = ИСТИНА И
	|	МИНИМУМ(ИдентификаторыТребований.ИдентификаторПравила = """") = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Ссылка КАК Правило
	|ПОМЕСТИТЬ Правила
	|ИЗ
	|	ИдентификаторыТребований КАК ИдентификаторыТребований
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК ПравилаПредставленияОтчетовУплатыНалогов
	|		ПО ИдентификаторыТребований.ИдентификаторЗадачи = ПравилаПредставленияОтчетовУплатыНалогов.Владелец.Код
	|			И ИдентификаторыТребований.ИдентификаторПравила = ПравилаПредставленияОтчетовУплатыНалогов.Код
	|ГДЕ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.Отчет)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Ссылка
	|ИЗ
	|	ОтборПоЗадаче КАК ОтборПоЗадаче
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК ПравилаПредставленияОтчетовУплатыНалогов
	|		ПО ОтборПоЗадаче.ИдентификаторЗадачи = ПравилаПредставленияОтчетовУплатыНалогов.Владелец.Код
	|ГДЕ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.Отчет)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиБухгалтера.Организация,
	|	ЗадачиБухгалтера.Правило,
	|	ЗадачиБухгалтера.ПериодСобытия,
	|	ЗадачиБухгалтера.РегистрацияВНалоговомОргане,
	|	ЗадачиБухгалтера.Наименование
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|ГДЕ
	|	ЗадачиБухгалтера.Правило В
	|			(ВЫБРАТЬ
	|				Правила.Правило
	|			ИЗ
	|				Правила)
	|	И ЗадачиБухгалтера.Организация = &Организация
	|	И ЗадачиБухгалтера.ПериодСобытия = &ПериодСобытия
	|	И (ЗадачиБухгалтера.РегистрацияВНалоговомОргане = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			ИЛИ ЗадачиБухгалтера.РегистрацияВНалоговомОргане В
	|				(ВЫБРАТЬ
	|					НалоговыйОрган.Ссылка
	|				ИЗ
	|					НалоговыйОрган))
	|	И ЗадачиБухгалтера.Статус <> &НовыйСтатус";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	КлючиЗаписи = Новый Структура("Организация, Правило, ПериодСобытия, РегистрацияВНалоговомОргане");
	
	Пока Выборка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(КлючиЗаписи, Выборка);
		
		КлючЗаписи = РегистрыСведений.ЗадачиБухгалтера.СоздатьКлючЗаписи(КлючиЗаписи);
		
		Попытка
			
			ЗаблокироватьДанныеДляРедактирования(КлючЗаписи);
			
			МенеджерЗаписи = РегистрыСведений.ЗадачиБухгалтера.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, КлючиЗаписи);
			МенеджерЗаписи.Прочитать();
			Если МенеджерЗаписи.Выбран() Тогда
				МенеджерЗаписи.Статус = НовыйСтатус;
				МенеджерЗаписи.Записать();
			КонецЕсли;
			
			РазблокироватьДанныеДляРедактирования(КлючЗаписи);
			
		Исключение
			
			ТекстСобытия = НСтр("ru = 'Задачи бухгалтера'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ШаблонОшибки = НСтр("ru = 'Не удалось обновить статус задачи ""%1"" по причине:
				|%2'");
			ТекстОшибки = СтрШаблон(ШаблонОшибки, Выборка.Наименование, ПодробноеПредставлениеОшибки(ОписаниеОшибки()));
			ЗаписьЖурналаРегистрации(ТекстСобытия, УровеньЖурналаРегистрации.Ошибка, , Выборка.Наименование, ТекстОшибки);
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает идентификаторы правил, задачи по которым выполняются документом СведенияОЗастрахованныхЛицахСЗВ_М.
// 
//  Возвращаемое значение:
//   ТаблицаЗначений
//   * ИдентификаторЗадачи - Строка
//   * ИдентификаторПравила - Строка
//
Функция ИдентификаторыПравилСведенияОЗастрахованныхЛицах()
	
	Идентификаторы = Новый ТаблицаЗначений;
	Идентификаторы.Колонки.Добавить("ИдентификаторЗадачи",  ОбщегоНазначения.ОписаниеТипаСтрока(100));
	Идентификаторы.Колонки.Добавить("ИдентификаторПравила", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	
	НоваяСтрока = Идентификаторы.Добавить();
	НоваяСтрока.ИдентификаторЗадачи  = "СтраховыеВзносы";
	НоваяСтрока.ИдентификаторПравила = "2016_СведенияПФРЕжемесячные";
	
	НоваяСтрока = Идентификаторы.Добавить();
	НоваяСтрока.ИдентификаторЗадачи  = "СтраховыеВзносы";
	НоваяСтрока.ИдентификаторПравила = "2017_СведенияПФРЕжемесячные";
	
	Возврат Идентификаторы;
	
КонецФункции

// Возвращает идентификаторы правил, задачи по которым выполняются документом СправкиНДФЛДляПередачиВНалоговыйОрган.
// 
//  Возвращаемое значение:
//   ТаблицаЗначений
//   * ИдентификаторЗадачи - Строка
//   * ИдентификаторПравила - Строка
//
Функция ИдентификаторыПравилСправкиНДФЛ()
	
	Идентификаторы = Новый ТаблицаЗначений;
	Идентификаторы.Колонки.Добавить("ИдентификаторЗадачи",  ОбщегоНазначения.ОписаниеТипаСтрока(100));
	Идентификаторы.Колонки.Добавить("ИдентификаторПравила", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	
	НоваяСтрока = Идентификаторы.Добавить();
	НоваяСтрока.ИдентификаторЗадачи  = "НДФЛ_Агент";
	НоваяСтрока.ИдентификаторПравила = "2013_2НДФЛ";
	
	Возврат Идентификаторы;
	
КонецФункции

// Возвращает идентификаторы правил, задачи по которым выполняются не документом РегламентированныйОтчет.
// 
//  Возвращаемое значение:
//   ТаблицаЗначений
//   * ИдентификаторЗадачи - Строка
//   * ИдентификаторПравила - Строка
//
Функция ИдентификаторыПравилВыполняющихсяНеРеглОтчетами() Экспорт
	
	Идентификаторы = ИдентификаторыПравилСведенияОЗастрахованныхЛицах();
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ИдентификаторыПравилСправкиНДФЛ(), Идентификаторы);
	
	Возврат Идентификаторы;
	
КонецФункции

// Добавляет статусы задач бухгалтера по подготовке отчетов.
// Переданной таблице добавляется колонка Статус.
//
//  Параметры:
//   Задачи - ТаблицаЗначений:
//   * Организация                 - СправочникСсылка.Организации
//   * ПериодСобытия               - Дата
//   * Правило                     - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов
//   * РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане
//   * Действие                    - ПеречислениеСсылка.ВидыДействийКалендаряБухгалтера
//
Процедура ДобавитьСтатусыЗадач(Задачи) Экспорт
	
	Задачи.Колонки.Добавить("Статус", Новый ОписаниеТипов("Строка"));
	
	КлючиЗадачи = Новый Структура("Организация, Правило, ПериодСобытия, РегистрацияВНалоговомОргане");
	
	Для Каждого ВыполнениеЗадачи Из ВыполнениеЗадач(Задачи) Цикл
		
		ЗаполнитьЗначенияСвойств(КлючиЗадачи, ВыполнениеЗадачи);
		
		Для Каждого Задача Из Задачи.НайтиСтроки(КлючиЗадачи) Цикл
			Задача.Статус = СтатусЗадачиПоВыполнению(ВыполнениеЗадачи.Документы);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает статус задачи по переданному выполнению задачи.
//  Параметры:
//   ДокументыВыполнения - ТаблицаЗначений:
//   * Документ                 - ДокументСсылка.РегламентированныйОтчет
//   * Дата                     - Дата
//   * Статус                   - Строка - Статус документа
//   * СостояниеСдачиОтчетности - ПеречислениеСсылка.СостояниеСдачиОтчетности
//
//  Возвращаемое значение:
//   Статус - Строка
//
Функция СтатусЗадачиПоВыполнению(ДокументыВыполнения) Экспорт
	
	Если ДокументыВыполнения.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Статус = "";
	
	ПоложительныйРезультат = Перечисления.СостояниеСдачиОтчетности.ПоложительныйРезультатДокументооборота;
	
	Если ДокументыВыполнения.Найти(ПоложительныйРезультат, "СостояниеСдачиОтчетности") <> Неопределено Тогда
		Статус = "Сдано";
	КонецЕсли;
	
	Возврат Статус;
	
КонецФункции

// Возвращает статусы задач бухгалтера по подготовке отчетов.
//  Параметры:
//   Задачи - ТаблицаЗначений:
//   * Организация                 - СправочникСсылка.Организации
//   * ПериодСобытия               - Дата
//   * Правило                     - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов
//   * РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане
//   * Действие                    - ПеречислениеСсылка.ВидыДействийКалендаряБухгалтера
//
//  Возвращаемое значение:
//   ТаблицаЗначений
//   * Организация                 - СправочникСсылка.Организации
//   * ПериодСобытия               - Дата
//   * Правило                     - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов
//   * РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане
//   * Статус                      - Строка
//   * СостояниеСдачиОтчетности    - ПеречислениеСсылка.СостояниеСдачиОтчетности
//
Функция ВыполнениеЗадач(Знач Задачи) Экспорт
	
	ОтборПоДействиюОтчет = Новый Структура("Действие", Перечисления.ВидыДействийКалендаряБухгалтера.Отчет);
	
	ВыполнениеЗадачПоПодготовкеОтчетов = ВыполнениеЗадачПоПодготовкеОтчетов(Задачи.Скопировать(ОтборПоДействиюОтчет));
	
	Возврат ВыполнениеЗадачПоПодготовкеОтчетов;
	
КонецФункции

// Возвращает таблицу с документами, которыми выполняются задачи бухгалтера по подготовке отчетов.
//  Параметры:
//   Задачи - ТаблицаЗначений:
//   * Организация                 - СправочникСсылка.Организации
//   * ПериодСобытия               - Дата
//   * Правило                     - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов
//   * РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане
//
//  Возвращаемое значение:
//   ТаблицаЗначений
//   * Организация                 - СправочникСсылка.Организации
//   * ПериодСобытия               - Дата
//   * Правило                     - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов
//   * РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане
//   * Выполнение - ТаблицаЗначений:
//     * Документ                 - ДокументСсылка.РегламентированныйОтчет
//     * Дата                     - Дата документа
//     * Статус                   - Строка
//     * СостояниеСдачиОтчетности - ПеречислениеСсылка.СостояниеСдачиОтчетности
//
Функция ВыполнениеЗадачПоПодготовкеОтчетов(Задачи) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Задачи", Задачи);
	Запрос.УстановитьПараметр("СоответствияПравилИФормОтчетов", СоответствияПравилИФормОтчетов());
	Запрос.УстановитьПараметр("ИдентификаторыПравилВыполняющихсяНеРеглОтчетами",
		ИдентификаторыПравилВыполняющихсяНеРеглОтчетами().ВыгрузитьКолонку("ИдентификаторПравила"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоответствияПравилИФормОтчетов.ФормаОтчета,
	|	СоответствияПравилИФормОтчетов.ИдентификаторПравила,
	|	СоответствияПравилИФормОтчетов.ИдентификаторЗадачи
	|ПОМЕСТИТЬ СоответствияПравилИФормОтчетов
	|ИЗ
	|	&СоответствияПравилИФормОтчетов КАК СоответствияПравилИФормОтчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Задачи.Организация,
	|	Задачи.ПериодСобытия,
	|	ВЫРАЗИТЬ(Задачи.Правило КАК Справочник.ПравилаПредставленияОтчетовУплатыНалогов) КАК Правило,
	|	Задачи.РегистрацияВНалоговомОргане
	|ПОМЕСТИТЬ ЗадачиБезИдентификаторов
	|ИЗ
	|	&Задачи КАК Задачи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Задачи.Организация,
	|	Задачи.ПериодСобытия,
	|	Задачи.Правило,
	|	Задачи.РегистрацияВНалоговомОргане,
	|	Задачи.Правило.Код КАК ИдентификаторПравила,
	|	ЗадачиБухгалтера.Код КАК ИдентификаторЗадачи
	|ПОМЕСТИТЬ ПараметрыЗадач
	|ИЗ
	|	ЗадачиБезИдентификаторов КАК Задачи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|		ПО Задачи.Правило.Владелец = ЗадачиБухгалтера.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СоответствияПравилИФормОтчетовПоискПоПолномуИдентификатору.ФормаОтчета, СоответствияПравилИФормОтчетовПоискПоИдентификаторуЗадачи.ФормаОтчета) КАК ИсточникОтчета,
	|	ПараметрыЗадач.Организация,
	|	ПараметрыЗадач.ПериодСобытия,
	|	ПараметрыЗадач.Правило,
	|	ПараметрыЗадач.РегистрацияВНалоговомОргане,
	|	ПараметрыЗадач.ИдентификаторЗадачи,
	|	ПараметрыЗадач.ИдентификаторПравила
	|ПОМЕСТИТЬ Задачи
	|ИЗ
	|	ПараметрыЗадач КАК ПараметрыЗадач
	|		ЛЕВОЕ СОЕДИНЕНИЕ СоответствияПравилИФормОтчетов КАК СоответствияПравилИФормОтчетовПоискПоПолномуИдентификатору
	|		ПО ПараметрыЗадач.ИдентификаторЗадачи = СоответствияПравилИФормОтчетовПоискПоПолномуИдентификатору.ИдентификаторЗадачи
	|			И ПараметрыЗадач.ИдентификаторПравила = СоответствияПравилИФормОтчетовПоискПоПолномуИдентификатору.ИдентификаторПравила
	|		ЛЕВОЕ СОЕДИНЕНИЕ СоответствияПравилИФормОтчетов КАК СоответствияПравилИФормОтчетовПоискПоИдентификаторуЗадачи
	|		ПО ПараметрыЗадач.ИдентификаторЗадачи = СоответствияПравилИФормОтчетовПоискПоИдентификаторуЗадачи.ИдентификаторЗадачи
	|			И (СоответствияПравилИФормОтчетовПоискПоИдентификаторуЗадачи.ИдентификаторПравила = """")
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛОЖЬ КАК КорректирующийОтчет,
	|	Задачи.ИсточникОтчета,
	|	Задачи.Организация,
	|	Задачи.ПериодСобытия КАК ДатаОкончания,
	|	Задачи.Правило,
	|	Задачи.РегистрацияВНалоговомОргане,
	|	Задачи.ИдентификаторЗадачи,
	|	Задачи.ИдентификаторПравила
	|ИЗ
	|	Задачи КАК Задачи
	|ГДЕ
	|	НЕ Задачи.ИдентификаторПравила В (&ИдентификаторыПравилВыполняющихсяНеРеглОтчетами)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛОЖЬ КАК КорректирующийОтчет,
	|	Задачи.Организация,
	|	Задачи.ПериодСобытия,
	|	Задачи.Правило,
	|	Задачи.РегистрацияВНалоговомОргане,
	|	Задачи.ИдентификаторЗадачи,
	|	Задачи.ИдентификаторПравила
	|ИЗ
	|	Задачи КАК Задачи
	|ГДЕ
	|	Задачи.ИдентификаторПравила В(&ИдентификаторыПравилВыполняющихсяНеРеглОтчетами)";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВыполнениеЗадач = РезультатыЗапроса[4].Выгрузить();
	
	ИнтерфейсыВзаимодействияБРО.ЗаполнитьСсылкиНаРеглОтчеты(ВыполнениеЗадач);
	ВыполнениеЗадач.Колонки.ДатаОкончания.Имя = "ПериодСобытия";
	
	Если НЕ РезультатыЗапроса[5].Пустой() Тогда
		// Добавить выполнение задач БЗКБ: СведенияОЗастрахованныхЛицах И СправкиНДФЛ.
		
		ВыполнениеЗадачБЗКБ = РезультатыЗапроса[5].Выгрузить();
		
		ЗаполнитьВыполнениеЗадачПоПодготовкеОтчетовБЗКБ(ВыполнениеЗадачБЗКБ);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ВыполнениеЗадачБЗКБ, ВыполнениеЗадач);
		
	КонецЕсли;
	
	Возврат ВыполнениеЗадач;
	
КонецФункции

// Переданной таблице добавляет колонку с документами, которые связаны с задачей (набором параметров отчета)
//
//  Параметры:
//   ПараметрыОтчетов - ТаблицаЗначений:
//   * Организация                 - СправочникСсылка.Организации
//   * ПериодСобытия               - Дата
//   * Правило                     - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов
//   * РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане
//   * ИдентификаторЗадачи         - Строка
//   * ИдентификаторПравила        - Строка
//
Процедура ЗаполнитьВыполнениеЗадачПоПодготовкеОтчетовБЗКБ(ПараметрыОтчетов)
	
	// Индекс нужен для группировки нескольких документов по одному набору параметров.
	ПараметрыОтчетов.Колонки.Добавить("Индекс", Новый ОписаниеТипов("Число"));
	
	Для Каждого ПараметрыОтчета Из ПараметрыОтчетов Цикл
		ПараметрыОтчета.Индекс = ПараметрыОтчетов.Индекс(ПараметрыОтчета);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПараметрыОтчетов", ПараметрыОтчетов);
	
	Запрос.УстановитьПараметр("ИдентификаторыПравилСправкиНДФЛ",
		ИдентификаторыПравилСправкиНДФЛ().ВыгрузитьКолонку("ИдентификаторПравила"));
		
	Запрос.УстановитьПараметр("ИдентификаторыПравилСведенияОЗастрахованныхЛицах",
		ИдентификаторыПравилСведенияОЗастрахованныхЛицах().ВыгрузитьКолонку("ИдентификаторПравила"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Задачи.Индекс,
	|	Задачи.Организация,
	|	Задачи.ПериодСобытия,
	|	Задачи.Правило,
	|	Задачи.РегистрацияВНалоговомОргане,
	|	Задачи.ИдентификаторЗадачи,
	|	Задачи.ИдентификаторПравила
	|ПОМЕСТИТЬ Задачи
	|ИЗ
	|	&ПараметрыОтчетов КАК Задачи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Задачи.Индекс,
	|	Задачи.Организация,
	|	Задачи.ПериодСобытия,
	|	Задачи.Правило,
	|	Задачи.РегистрацияВНалоговомОргане,
	|	Задачи.ИдентификаторЗадачи,
	|	Задачи.ИдентификаторПравила
	|ПОМЕСТИТЬ ЗадачиСправкиНДФЛ
	|ИЗ
	|	Задачи КАК Задачи
	|ГДЕ
	|	Задачи.ИдентификаторПравила В(&ИдентификаторыПравилСправкиНДФЛ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Задачи.Индекс,
	|	Задачи.Организация,
	|	Задачи.ПериодСобытия,
	|	Задачи.Правило,
	|	Задачи.РегистрацияВНалоговомОргане,
	|	Задачи.ИдентификаторЗадачи,
	|	Задачи.ИдентификаторПравила
	|ПОМЕСТИТЬ ЗадачиСведенияОЗастрахованныхЛицах
	|ИЗ
	|	Задачи КАК Задачи
	|ГДЕ
	|	Задачи.ИдентификаторПравила В(&ИдентификаторыПравилСведенияОЗастрахованныхЛицах)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиСправкиНДФЛ.Индекс КАК Индекс,
	|	Справки2НДФЛ.Ссылка КАК Ссылка,
	|	Справки2НДФЛ.Дата КАК Дата,
	|	ЗадачиСправкиНДФЛ.Организация КАК Организация,
	|	ЗадачиСправкиНДФЛ.ПериодСобытия КАК ПериодСобытия,
	|	ЗадачиСправкиНДФЛ.Правило,
	|	ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка) КАК РегистрацияВНалоговомОргане,
	|	ЕСТЬNULL(ЖурналОтчетовСтатусы.Статус, """") КАК Статус,
	|	ЕСТЬNULL(ЖурналОтчетовСтатусы.СостояниеСдачиОтчетности, ЗНАЧЕНИЕ(Перечисление.СостояниеСдачиОтчетности.ПустаяСсылка)) КАК СостояниеСдачиОтчетности
	|ИЗ
	|	ЗадачиСправкиНДФЛ КАК ЗадачиСправкиНДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СправкиНДФЛДляПередачиВНалоговыйОрган КАК Справки2НДФЛ
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналОтчетовСтатусы КАК ЖурналОтчетовСтатусы
	|			ПО Справки2НДФЛ.Ссылка = ЖурналОтчетовСтатусы.Ссылка
	|				И Справки2НДФЛ.Организация = ЖурналОтчетовСтатусы.Организация
	|		ПО (Справки2НДФЛ.Организация = ЗадачиСправкиНДФЛ.Организация)
	|			И (Справки2НДФЛ.НалоговыйПериодДата = ЗадачиСправкиНДФЛ.ПериодСобытия)
	|			И (Справки2НДФЛ.Проведен)
	|ГДЕ
	|	НЕ Справки2НДФЛ.Ссылка ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗадачиСведенияОЗастрахованныхЛицах.Индекс,
	|	СведенияОЗастрахованныхЛицахСЗВ_М.Ссылка,
	|	СведенияОЗастрахованныхЛицахСЗВ_М.Дата,
	|	ЗадачиСведенияОЗастрахованныхЛицах.Организация,
	|	КОНЕЦПЕРИОДА(ЗадачиСведенияОЗастрахованныхЛицах.ПериодСобытия, МЕСЯЦ),
	|	ЗадачиСведенияОЗастрахованныхЛицах.Правило,
	|	ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка),
	|	ЕСТЬNULL(ЖурналОтчетовСтатусы.Статус, """"),
	|	ЕСТЬNULL(ЖурналОтчетовСтатусы.СостояниеСдачиОтчетности, ЗНАЧЕНИЕ(Перечисление.СостояниеСдачиОтчетности.ПустаяСсылка))
	|ИЗ
	|	ЗадачиСведенияОЗастрахованныхЛицах КАК ЗадачиСведенияОЗастрахованныхЛицах
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СведенияОЗастрахованныхЛицахСЗВ_М КАК СведенияОЗастрахованныхЛицахСЗВ_М
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналОтчетовСтатусы КАК ЖурналОтчетовСтатусы
	|			ПО (ЖурналОтчетовСтатусы.Ссылка = СведенияОЗастрахованныхЛицахСЗВ_М.Ссылка)
	|				И СведенияОЗастрахованныхЛицахСЗВ_М.Организация = ЖурналОтчетовСтатусы.Организация
	|		ПО ЗадачиСведенияОЗастрахованныхЛицах.Организация = СведенияОЗастрахованныхЛицахСЗВ_М.Организация
	|			И (НАЧАЛОПЕРИОДА(ЗадачиСведенияОЗастрахованныхЛицах.ПериодСобытия, МЕСЯЦ) = СведенияОЗастрахованныхЛицахСЗВ_М.ОтчетныйПериод)
	|			И (СведенияОЗастрахованныхЛицахСЗВ_М.Проведен)
	|ГДЕ
	|	НЕ СведенияОЗастрахованныхЛицахСЗВ_М.Ссылка ЕСТЬ NULL
	|ИТОГИ ПО
	|	Индекс";
	
	ПараметрыОтчетов.Колонки.Добавить("Документы", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	ТаблицаДокументы = Новый ТаблицаЗначений;
	ТаблицаДокументы.Колонки.Добавить("Ссылка");
	ТаблицаДокументы.Колонки.Добавить("Дата", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаДокументы.Колонки.Добавить("Статус", Новый ОписаниеТипов("Строка"));
	ТаблицаДокументы.Колонки.Добавить("СостояниеСдачиОтчетности",
		Новый ОписаниеТипов("ПеречислениеСсылка.СостояниеСдачиОтчетности"));
	
	ВыборкаИндекс = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаИндекс.Следующий() Цикл
		
		ПараметрыОтчета = ПараметрыОтчетов[ВыборкаИндекс.Индекс];
		
		ПараметрыОтчета.Документы = ТаблицаДокументы.СкопироватьКолонки();
		
		Выборка = ВыборкаИндекс.Выбрать();
		
		Пока Выборка.Следующий() И ЗначениеЗаполнено(Выборка.Ссылка) Цикл
			ЗаполнитьЗначенияСвойств(ПараметрыОтчета.Документы.Добавить(), Выборка);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПлатежныйКалендарь

Функция ЗадачиДляКалендаря(Организация, РабочаяДата, ГоризонтПланирования)
	
	Запрос = Новый Запрос;
	
	ИдентификаторыЗадачЗарплаты = Новый Массив;
	ИдентификаторыЗадачЗарплаты.Добавить("НДФЛ_Уплата");
	ИдентификаторыЗадачЗарплаты.Добавить("НДФЛ_Агент_Уплата");
	
	ДоступныеОрганизации = Справочники.Организации.ДоступныеОрганизацииДляОтбора(Организация);
	
	Запрос.УстановитьПараметр("СписокОрганизаций",           ДоступныеОрганизации);
	Запрос.УстановитьПараметр("РабочаяДата",                 РабочаяДата);
	Запрос.УстановитьПараметр("ГоризонтПланирования",        ГоризонтПланирования);
	Запрос.УстановитьПараметр("ИдентификаторыЗадачЗарплаты", ИдентификаторыЗадачЗарплаты);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗадачиБухгалтера.Организация КАК Организация,
	|	ЗадачиБухгалтера.Срок,
	|	ЗадачиБухгалтера.Наименование,
	|	ЗадачиБухгалтера.Правило КАК Правило,
	|	ЗадачиБухгалтера.Периодичность,
	|	ЗадачиБухгалтера.ПериодСобытия,
	|	ЗадачиБухгалтера.РегистрацияВНалоговомОргане,
	|	ЗадачиБухгалтера.НачалоВыполнения
	|ПОМЕСТИТЬ ЗадачиИзСписка
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|ГДЕ
	|	НЕ ЗадачиБухгалтера.ВАрхиве
	|	И ЗадачиБухгалтера.Срок <= &ГоризонтПланирования
	|	И ЗадачиБухгалтера.Организация В(&СписокОрганизаций)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Правило,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Правила.Ссылка,
	|	Правила.Владелец КАК Задача,
	|	Правила.Владелец.Наименование КАК НаименованиеЗадачиБухгалтера,
	|	Правила.Код КАК ИдентификаторПравила,
	|	Правила.Описание,
	|	Правила.ЕстьИнформацияНаИТС КАК ЕстьИнформацияНаИТС
	|ПОМЕСТИТЬ ПравилаУплатыНалогов
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК Правила
	|ГДЕ
	|	НЕ Правила.ПометкаУдаления
	|	И Правила.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.УплатаНалога)
	|	И НЕ Правила.Код В (&ИдентификаторыЗадачЗарплаты)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Правила.Ссылка,
	|	Правила.Владелец КАК Задача,
	|	Правила.Владелец.Наименование КАК НаименованиеЗадачиБухгалтера,
	|	Правила.Код КАК ИдентификаторПравила,
	|	Правила.Описание,
	|	Правила.ЕстьИнформацияНаИТС КАК ЕстьИнформацияНаИТС
	|ПОМЕСТИТЬ ПравилаВыплатыЗарплаты
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК Правила
	|ГДЕ
	|	НЕ Правила.ПометкаУдаления
	|	И Правила.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.Зарплата)
	|	И Правила.Код В(&ИдентификаторыЗадачЗарплаты)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Патенты.Владелец КАК Организация,
	|	Патенты.Ссылка
	|ПОМЕСТИТЬ Патенты
	|ИЗ
	|	Справочник.Патенты КАК Патенты
	|ГДЕ
	|	НЕ Патенты.ПометкаУдаления
	|	И Патенты.Владелец В(&СписокОрганизаций)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Правила.Организация,
	|	Правила.Ссылка КАК Правило,
	|	Правила.Периодичность,
	|	РегулярныеПлатежи.ПериодСобытия,
	|	РегулярныеПлатежи.ПлатежноеПоручение
	|ПОМЕСТИТЬ РегулярныеПлатежи
	|ИЗ
	|	Справочник.ПравилаРегулярныхПлатежей КАК Правила
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РегулярныеПлатежи КАК РегулярныеПлатежи
	|		ПО Правила.Ссылка = РегулярныеПлатежи.Правило
	|			И Правила.Организация = РегулярныеПлатежи.Организация
	|ГДЕ
	|	НЕ Правила.ПометкаУдаления
	|	И Правила.Выполняется
	|	И Правила.Организация В(&СписокОрганизаций)
	|	И РегулярныеПлатежи.ПериодСобытия <= &ГоризонтПланирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиИзСписка.Организация,
	|	ЗадачиИзСписка.Срок КАК ДатаПлатежа,
	|	ЗадачиИзСписка.Срок < &РабочаяДата КАК Просрочен,
	|	ЗадачиИзСписка.Правило,
	|	ЗадачиИзСписка.ПериодСобытия,
	|	ЗадачиИзСписка.Периодичность,
	|	ВЫБОР
	|		КОГДА ЗадачиИзСписка.ПериодСобытия = РегулярныеПлатежиПодходитПериод.ПериодСобытия
	|			ТОГДА РегулярныеПлатежиПодходитПериод.ПлатежноеПоручение
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ПлатежныйДокумент,
	|	ВЫБОР
	|		КОГДА ЗадачиИзСписка.ПериодСобытия = РегулярныеПлатежиПодходитПериод.ПериодСобытия
	|			ТОГДА РегулярныеПлатежиПодходитПериод.ПлатежноеПоручение
	|		ИНАЧЕ РегулярныеПлатежи.ПлатежноеПоручение
	|	КОНЕЦ КАК ПлатежноеПоручение
	|ПОМЕСТИТЬ РегулярныеПлатежиСПлатежкой
	|ИЗ
	|	ЗадачиИзСписка КАК ЗадачиИзСписка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегулярныеПлатежи КАК РегулярныеПлатежи
	|		ПО (РегулярныеПлатежи.Правило = ЗадачиИзСписка.Правило)
	|			И (РегулярныеПлатежи.Организация = ЗадачиИзСписка.Организация)
	|			И (РегулярныеПлатежи.ПериодСобытия = ДАТАВРЕМЯ(1, 1, 1))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегулярныеПлатежи КАК РегулярныеПлатежиПодходитПериод
	|		ПО (РегулярныеПлатежиПодходитПериод.Правило = ЗадачиИзСписка.Правило)
	|			И (РегулярныеПлатежиПодходитПериод.Организация = ЗадачиИзСписка.Организация)
	|			И (РегулярныеПлатежиПодходитПериод.ПериодСобытия = ЗадачиИзСписка.ПериодСобытия)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегулярныеПлатежи.Организация,
	|	РегулярныеПлатежи.ДатаПлатежа,
	|	РегулярныеПлатежи.Просрочен,
	|	РегулярныеПлатежи.Правило,
	|	РегулярныеПлатежи.ПериодСобытия,
	|	РегулярныеПлатежи.Периодичность,
	|	РегулярныеПлатежи.ПлатежныйДокумент,
	|	РегулярныеПлатежи.ПлатежноеПоручение,
	|	РегулярныеПлатежи.ПлатежноеПоручение.Контрагент КАК Расшифровка,
	|	РегулярныеПлатежи.ПлатежноеПоручение.Контрагент КАК Контрагент,
	|	РегулярныеПлатежи.ПлатежноеПоручение.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	РегулярныеПлатежи.ПлатежноеПоручение.СуммаДокумента КАК Сумма,
	|	""Регулярный платеж"" КАК Описание,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыУплатыНалогов.БанковскийПеревод) КАК СпособОплаты,
	|	ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка) КАК РегистрацияВНалоговомОргане
	|ИЗ
	|	РегулярныеПлатежиСПлатежкой КАК РегулярныеПлатежи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.УплатаНалога) КАК Действие,
	|	ЗадачиИзСписка.Организация,
	|	ЗадачиИзСписка.Срок,
	|	ЗадачиИзСписка.Срок КАК ДатаПлатежа,
	|	ЗадачиИзСписка.Срок < &РабочаяДата КАК Просрочен,
	|	ЗадачиИзСписка.Наименование,
	|	ЗадачиИзСписка.Наименование КАК НаименованиеЗадачиИзСписка,
	|	ЗадачиИзСписка.Правило,
	|	ЗадачиИзСписка.Периодичность,
	|	ЗадачиИзСписка.ПериодСобытия,
	|	ЗадачиИзСписка.РегистрацияВНалоговомОргане,
	|	Правила.Задача,
	|	Правила.НаименованиеЗадачиБухгалтера КАК Расшифровка,
	|	Правила.НаименованиеЗадачиБухгалтера,
	|	Правила.ИдентификаторПравила КАК ИдентификаторПравила,
	|	Правила.Задача.Код КАК ИдентификаторЗадачи,
	|	Правила.Описание КАК ОписаниеПравила,
	|	Правила.ЕстьИнформацияНаИТС,
	|	ЗадачиИзСписка.НачалоВыполнения
	|ИЗ
	|	ЗадачиИзСписка КАК ЗадачиИзСписка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПравилаУплатыНалогов КАК Правила
	|		ПО ЗадачиИзСписка.Правило = Правила.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.УплатаНалога),
	|	ЗадачиИзСписка.Организация,
	|	ЗадачиИзСписка.Срок,
	|	ЗадачиИзСписка.Срок,
	|	ЗадачиИзСписка.Срок < &РабочаяДата,
	|	ЗадачиИзСписка.Наименование,
	|	ЗадачиИзСписка.Наименование,
	|	ЗадачиИзСписка.Правило,
	|	ЗадачиИзСписка.Периодичность,
	|	ЗадачиИзСписка.ПериодСобытия,
	|	ЗадачиИзСписка.РегистрацияВНалоговомОргане,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ЗадачиИзСписка.НачалоВыполнения
	|ИЗ
	|	ЗадачиИзСписка КАК ЗадачиИзСписка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Патенты КАК Патенты
	|		ПО ЗадачиИзСписка.Организация = Патенты.Организация
	|			И ЗадачиИзСписка.Правило = Патенты.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.УплатаНалога) КАК Действие,
	|	ЕСТЬNULL(НачисленныеСуммы.СуммаОборотКт, 0) КАК Сумма,
	|	ЗадачиИзСписка.Организация,
	|	ЗадачиИзСписка.Срок КАК ДатаПлатежа,
	|	ЗадачиИзСписка.Срок < &РабочаяДата КАК Просрочен,
	|	ЗадачиИзСписка.Наименование КАК НаименованиеЗадачиИзСписка,
	|	ЗадачиИзСписка.Правило,
	|	ЗадачиИзСписка.Периодичность,
	|	ЗадачиИзСписка.ПериодСобытия,
	|	ЗадачиИзСписка.РегистрацияВНалоговомОргане,
	|	Правила.ИдентификаторПравила КАК ИдентификаторПравила,
	|	Правила.Задача.Код КАК ИдентификаторЗадачи,
	|	Правила.Задача,
	|	""Зарплата"" КАК Расшифровка,
	|	Правила.НаименованиеЗадачиБухгалтера,
	|	Правила.Описание КАК ОписаниеПравила,
	|	Правила.ЕстьИнформацияНаИТС
	|ИЗ
	|	ЗадачиИзСписка КАК ЗадачиИзСписка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПравилаВыплатыЗарплаты КАК Правила
	|		ПО ЗадачиИзСписка.Правило = Правила.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Обороты(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&РабочаяДата, МЕСЯЦ), МЕСЯЦ, -1), , Месяц, Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда), , Организация В (&СписокОрганизаций), , ) КАК НачисленныеСуммы
	|		ПО ЗадачиИзСписка.Организация = НачисленныеСуммы.Организация
	|			И (НАЧАЛОПЕРИОДА(ЗадачиИзСписка.ПериодСобытия, МЕСЯЦ) = НачисленныеСуммы.Период)";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ЗадачиБухгалтера = Новый Структура;
	
	ЗадачиБухгалтера.Вставить("РегулярныеПлатежи", РезультатЗапроса[6].Выгрузить());
	ЗадачиБухгалтера.Вставить("УплатаНалогов",     РезультатЗапроса[7].Выгрузить());
	ЗадачиБухгалтера.Вставить("Зарплата",          РезультатЗапроса[8].Выгрузить());
	
	Возврат ЗадачиБухгалтера;
	
КонецФункции

Функция РегулярныеПлатежи(Задачи)
	
	РегулярныеПлатежи = Обработки.ПлатежныйКалендарь.НоваяТаблицаПлатежи();
	
	Для Каждого Задача Из Задачи Цикл
		
		Платеж = РегулярныеПлатежи.Добавить();
		
		ЗаполнитьЗначенияСвойств(Платеж, Задача);
		
		Платеж.ПараметрыКоманды = ВыполнениеЗадачБухгалтераКлиентСервер.НовыеПараметрыКомандЗадачи();
		
		ЗаполнитьЗначенияСвойств(Платеж.ПараметрыКоманды, Задача);
		
	КонецЦикла;
	
	Возврат РегулярныеПлатежи;
	
КонецФункции

Функция ЗарплатныеПлатежи(Задачи)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Задачи", Задачи);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Задачи.Организация,
	|	НАЧАЛОПЕРИОДА(Задачи.ПериодСобытия, МЕСЯЦ) КАК ПериодРегистрации
	|ПОМЕСТИТЬ Задачи
	|ИЗ
	|	&Задачи КАК Задачи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВедомостьНаВыплатуЗарплатыВБанк.Ссылка КАК Ведомость,
	|	Задачи.Организация,
	|	Задачи.ПериодРегистрации КАК ПериодРегистрации
	|ПОМЕСТИТЬ Ведомости
	|ИЗ
	|	Задачи КАК Задачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВедомостьНаВыплатуЗарплатыВБанк КАК ВедомостьНаВыплатуЗарплатыВБанк
	|		ПО Задачи.Организация = ВедомостьНаВыплатуЗарплатыВБанк.Организация
	|			И (Задачи.ПериодРегистрации = НАЧАЛОПЕРИОДА(ВедомостьНаВыплатуЗарплатыВБанк.ПериодРегистрации, МЕСЯЦ))
	|ГДЕ
	|	ВедомостьНаВыплатуЗарплатыВБанк.Проведен
	|	И ВедомостьНаВыплатуЗарплатыВБанк.СуммаПоДокументу <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ведомости.Организация,
	|	Ведомости.ПериодРегистрации КАК Период
	|ИЗ
	|	Ведомости КАК Ведомости
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|		ПО (Ведомости.Ведомость = ПлатежноеПоручение.ДокументОснование
	|				ИЛИ Ведомости.Ведомость = ПлатежноеПоручение.ПлатежнаяВедомость)
	|ГДЕ
	|	НЕ ПлатежноеПоручение.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	Ведомости.Организация,
	|	Ведомости.ПериодРегистрации";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ПериодыЕстьПлатежка = РезультатЗапроса.Выгрузить();
	
	ЗарплатныеПлатежи = Обработки.ПлатежныйКалендарь.НоваяТаблицаПлатежи();
	
	Для Каждого Задача Из Задачи Цикл
		
		Платеж = ЗарплатныеПлатежи.Добавить();
		
		ЗаполнитьЗначенияСвойств(Платеж, Задача);
		
		Платеж.ПараметрыКоманды = ВыполнениеЗадачБухгалтераКлиентСервер.НовыеПараметрыКомандЗадачи();
		
		ЗаполнитьЗначенияСвойств(Платеж.ПараметрыКоманды, Задача);
		
		Если Платеж.Сумма = 0 И НЕ ЗначениеЗаполнено(Платеж.Примечание) Тогда
			Платеж.Примечание = РекомендацияПоНачислениюЗарплаты(Задача.Организация, Задача.ПериодСобытия);
		КонецЕсли;
		
		Если Платеж.Сумма <> 0 И ПериодыЕстьПлатежка.Количество() <> 0 Тогда
			
			ПараметрыОтбора = Новый Структура("Организация, Период", Задача.Организация, НачалоМесяца(Задача.ПериодСобытия));
			
			Платеж.ЕстьПлатежныйДокумент = ПериодыЕстьПлатежка.НайтиСтроки(ПараметрыОтбора).Количество() <> 0;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЗарплатныеПлатежи;
	
КонецФункции

Функция НалоговыеПлатежи(Задачи)
	
	НалоговыеПлатежи = Обработки.ПлатежныйКалендарь.НоваяТаблицаПлатежи();
	
	Для Каждого Задача Из Задачи Цикл
		
		Платеж = НалоговыеПлатежи.Добавить();
		
		ЗаполнитьЗначенияСвойств(Платеж, Задача);
		
		Платеж.Расшифровка = ВРег(Лев(Платеж.Расшифровка, 1)) + Сред(Платеж.Расшифровка, 2);
		
		Платеж.ПараметрыКоманды = ВыполнениеЗадачБухгалтераКлиентСервер.НовыеПараметрыКомандЗадачи();
		
		Если Задача.Просрочен Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Платеж.ПараметрыКоманды, Задача);
		
		ИмяЗадачи = Задача.ИдентификаторЗадачи;
		ПолноеИмяПравила = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПолноеИмяПравила(Задача.Правило);
		
		Если ИмяЗадачи = "СтраховыеВзносы" Тогда
			
			ДополнитьПлатежУплатаСтраховыхВзносов(Платеж, Задача);
			
		ИначеЕсли ПолноеИмяПравила = "ТранспортныйНалог.2013_УплатаАванс"
			Или ПолноеИмяПравила = "ЗемельныйНалог.2013_Аванс" 
			Или ПолноеИмяПравила = "ЗемельныйНалог.2015_Аванс" Тогда
			
			ДополнитьПлатежУплатаАвансовПоИмущественнымНалогам(Платеж, Задача);
			
		ИначеЕсли ИмяЗадачи = "СтраховыеВзносы_Предприниматель" Тогда
			
			ДополнитьПлатежУплатаСтраховыхВзносовИП(Платеж, Задача);
			
		ИначеЕсли ИмяЗадачи = "СтраховыеВзносыСДоходов_Предприниматель"Тогда
			
			ДополнитьПлатежУплатаСтраховыхВзносовСДоходовИП(Платеж, Задача);
			
		ИначеЕсли ПравилоВыполняетсяПомощникомРасчетаНалогаУСН(Задача.Правило) Тогда
			
			ДополнитьПлатежУплатаНалогаУСН(Платеж, Задача);
			
		ИначеЕсли ПолноеИмяПравила = "ТорговыйСбор.2015_Уплата" Тогда
			
			ДополнитьПлатежУплатаТорговогоСбора(Платеж, Задача);
			
		ИначеЕсли ИнтерфейсыВзаимодействияБРО.ТребованиеОбрабатывается(ПолноеИмяПравила) Тогда
			
			ДополнитьПлатежПоДаннымДекларации(Платеж, Задача);
			
		КонецЕсли;
		
		Если Платеж.Сумма = 0 И НЕ ЗначениеЗаполнено(Платеж.Примечание) Тогда
			Платеж.Примечание = НСтр("ru = 'Нет данных для определения суммы платежа'");
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НалоговыеПлатежи;
	
КонецФункции

Процедура ДополнитьПлатежПоДаннымДекларации(ПлатежПоЗадаче, Задача)
	
	Срок                        = Задача.ДатаПлатежа;
	Правило                     = Задача.Правило;
	Организация                 = Задача.Организация;
	ПериодСобытия               = Задача.ПериодСобытия;
	РегистрацияВНалоговомОргане = Задача.РегистрацияВНалоговомОргане;
	
	НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Правило.Периодичность, ПериодСобытия);
	КонецПериода  = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Правило.Периодичность, ПериодСобытия);
	
	Показатели                  = ПоказателиБазовогоПериода(НачалоПериода, КонецПериода, Правило);
	КонецБазовогоПериода        = Показатели.КонецБазовогоПериода;
	
	ПолноеИмяПравила  = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПолноеИмяПравила(Правило);
	
	ПоказательПериода = ПоказательПериодаПлатежаПоДекларации(Правило, ПериодСобытия, Срок);
	ДанныеДекларации  = ДанныеДляУплатыНалогаПоДекларации(Правило, ПолноеИмяПравила, Организация, РегистрацияВНалоговомОргане, ПериодСобытия, Срок, ПоказательПериода);
	
	Если ДанныеДекларации = Неопределено Тогда
		
		// В примечании надо указать на то, что нет деларации.
		
		ШаблонТекста = НСтр("ru = 'Рекомендуется подготовить отчет ""[Декларация] за [Период]"".
			|Тогда будет возможно определить сумму платежа.'");
		
		ПараметрыТекста = Новый Структура;
		ПараметрыТекста.Вставить("Декларация", ИнтерфейсыВзаимодействияБРО.ПредставлениеФормыРегламентированногоОтчета(ПолноеИмяПравила, КонецБазовогоПериода));
		НачалоНалоговогоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Правило.ФинансовыйПериод, КонецБазовогоПериода);
		ПараметрыТекста.Вставить("Период",     КалендарьБухгалтера.ПредставлениеПериодаСобытия(НачалоНалоговогоПериода, КонецБазовогоПериода));
		
		ПлатежПоЗадаче.Примечание = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонТекста, ПараметрыТекста);
		
		Возврат;
		
	КонецЕсли;
	
	ПлатежПоЗадаче.ЕстьПлатежныйДокумент = ЕстьПлатежныйДокумент(ДанныеДекларации.Платежи);
	ПлатежПоЗадаче.Сумма = ДанныеДекларации.Платежи.Итог("Сумма");
	
КонецПроцедуры

Процедура ДополнитьПлатежУплатаАвансовПоИмущественнымНалогам(ПлатежПоЗадаче, Задача)
	
	Срок          = Задача.Срок;
	Организация   = Задача.Организация;
	Правило       = Задача.Правило;
	ПериодСобытия = Задача.ПериодСобытия;
	
	Платежи = ДанныеДляУплатыИмущественныхНалогов(Правило, Организация, ПериодСобытия, Срок, Задача.РегистрацияВНалоговомОргане);
	ПлатежПоЗадаче.ЕстьПлатежныйДокумент = ЕстьПлатежныйДокумент(Платежи);
	ПлатежПоЗадаче.Сумма = Платежи.Итог("Сумма");
	
КонецПроцедуры

Процедура ДополнитьПлатежУплатаСтраховыхВзносов(ПлатежПоЗадаче, Задача)
	
	Организация   = Задача.Организация;
	ПериодСобытия = Задача.ПериодСобытия;
	Правило       = Задача.Правило;
	
	Если НЕ ОперацияНачисленияВзносовВыполнена(Организация, ПериодСобытия) Тогда
		
		ПлатежПоЗадаче.Примечание = РекомендацияПоНачислениюЗарплаты(Организация, ПериодСобытия);
		
		Возврат; // начислений нет.
	КонецЕсли;
	
	Платежи = ДанныеДляУплатыСтраховыхВзносов(Правило, Организация, ПериодСобытия);
	
	ПлатежПоЗадаче.ЕстьПлатежныйДокумент = ЕстьПлатежныйДокумент(Платежи);
	ПлатежПоЗадаче.Сумма = Платежи.Итог("Сумма")
	
КонецПроцедуры

Процедура ДополнитьПлатежУплатаСтраховыхВзносовИП(ПлатежПоЗадаче, Задача)
	
	// Фиксированная часть страховых взносов
	Взносы = УчетСтраховыхВзносовИП.ФиксированныеСтраховыеВзносыКУплате(
		Задача.Организация, Задача.ПериодСобытия, Задача.Периодичность);
	
	ПлатежПоЗадаче.Сумма = Взносы.СуммаВзносаПФР + Взносы.СуммаВзносаФФОМС + Взносы.СуммаВзносаФСС;
	
	Если ПлатежПоЗадаче.Сумма = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Поиск платежного поручения
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПлатежноеПоручение.Ссылка
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|ГДЕ
	|	НЕ ПлатежноеПоручение.ПометкаУдаления
	|	И ПлатежноеПоручение.Организация = &Организация
	|	И НАЧАЛОПЕРИОДА(ПлатежноеПоручение.Дата, КВАРТАЛ) = &НачалоВыполнения
	|	И ПлатежноеПоручение.Налог.ВидНалога В(&ВидыНалогов)
	|	И ПлатежноеПоручение.ВидНалоговогоОбязательства <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела)";
	
	ВидыНалогов = Новый Массив;
	ВидыНалогов.Добавить(Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть);
	ВидыНалогов.Добавить(Перечисления.ВидыНалогов.ФиксированныеВзносы_ФСС);
	ВидыНалогов.Добавить(Перечисления.ВидыНалогов.ФиксированныеВзносы_ФФОМС);
	
	Запрос.УстановитьПараметр("НачалоВыполнения", Задача.НачалоВыполнения);
	Запрос.УстановитьПараметр("Организация",      Задача.Организация);
	Запрос.УстановитьПараметр("ВидыНалогов",      ВидыНалогов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ПлатежПоЗадаче.ЕстьПлатежныйДокумент = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПлатежУплатаСтраховыхВзносовСДоходовИП(ПлатежПоЗадаче, Задача)
	
	Организация   = Задача.Организация;
	Период        = Задача.ПериодСобытия;
	Периодичность = Задача.Периодичность;
	
	СтруктураДоходов = УчетСтраховыхВзносовИП.СтруктураДоходовПоВидамДеятельности(
		Организация, НачалоГода(Период), КонецКвартала(Период));
	
	// Страховые взносы, исчисленные с суммы доходов
	Взносы = УчетСтраховыхВзносовИП.СтраховыеВзносыСДоходовКУплате(
		Организация, Период, Периодичность, СтруктураДоходов, Ложь);
	
	ПлатежПоЗадаче.Сумма = Взносы.СуммаВзносаПФРсДоходов;
	
	Если ПлатежПоЗадаче.Сумма = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Поиск платежного поручения
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПлатежноеПоручение.Ссылка
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|ГДЕ
	|	НЕ ПлатежноеПоручение.ПометкаУдаления
	|	И ПлатежноеПоручение.Организация = &Организация
	|	И НАЧАЛОПЕРИОДА(ПлатежноеПоручение.Дата, КВАРТАЛ) = &НачалоВыполнения
	|	И ПлатежноеПоручение.Налог.ВидНалога В(&ВидыНалогов)
	|	И ПлатежноеПоручение.ВидНалоговогоОбязательства = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела)";
	
	ВидыНалогов = Новый Массив;
	ВидыНалогов.Добавить(Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть);
	ВидыНалогов.Добавить(Перечисления.ВидыНалогов.ФиксированныеВзносы_ФСС);
	ВидыНалогов.Добавить(Перечисления.ВидыНалогов.ФиксированныеВзносы_ФФОМС);
	
	Запрос.УстановитьПараметр("НачалоВыполнения", Задача.НачалоВыполнения);
	Запрос.УстановитьПараметр("Организация",      Задача.Организация);
	Запрос.УстановитьПараметр("ВидыНалогов",      ВидыНалогов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ПлатежПоЗадаче.ЕстьПлатежныйДокумент = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПлатежУплатаНалогаУСН(ПлатежПоЗадаче, Задача)
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
	
	ПараметрыПроверки = Новый Структура;
	
	ПараметрыПроверки.Вставить("Организация",                               Задача.Организация);
	ПараметрыПроверки.Вставить("Период",                                    КонецКвартала(Задача.ПериодСобытия));
	ПараметрыПроверки.Вставить("ПроверятьКонстантуАктуальностиДанныхУчета", Ложь);
	ПараметрыПроверки.Вставить("АктуализироватьВесьПериод",                 Истина);
	ПараметрыПроверки.Вставить("УИДЗамера",                                 Неопределено);
	
	Обработки.ЗакрытиеМесяца.ПроверитьАктуальностьВФоне(ПараметрыПроверки, АдресХранилища);
	
	РезультатПроверки = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если Не РезультатПроверки.ТребуетсяАктуализация Тогда
		
		Показатели = Обработки.ПомощникРасчетаНалогаУСН.АктуальныеПоказатели(Задача.Организация, Задача.ПериодСобытия);
		
		ПлатежПоЗадаче.Сумма                 = Показатели.НалогКУплате;
		ПлатежПоЗадаче.ЕстьПлатежныйДокумент = Показатели.ЕстьДокументУплаты;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПлатежУплатаТорговогоСбора(ПлатежПоЗадаче, Задача)
	
	ТаблицаТорговыйСбор = ТорговыйСбор.СуммаТорговогоСбора(
	Задача.Организация, НачалоКвартала(Задача.ПериодСобытия), КонецКвартала(Задача.ПериодСобытия));
	
	ПлатежПоЗадаче.Сумма = ТаблицаТорговыйСбор.Итог("Сумма");
	
	// Поиск платежного поручения
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПлатежноеПоручение.Ссылка
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|ГДЕ
	|	НЕ ПлатежноеПоручение.ПометкаУдаления
	|	И ПлатежноеПоручение.Организация = &Организация
	|	И НАЧАЛОПЕРИОДА(ПлатежноеПоручение.Дата, КВАРТАЛ) = &НачалоВыполнения
	|	И ПлатежноеПоручение.Налог.ВидНалога В(&ВидыНалогов)";
	
	ВидыНалогов = Новый Массив;
	ВидыНалогов.Добавить(Перечисления.ВидыНалогов.ТорговыйСбор);
	
	Запрос.УстановитьПараметр("НачалоВыполнения", Задача.НачалоВыполнения);
	Запрос.УстановитьПараметр("Организация",      Задача.Организация);
	Запрос.УстановитьПараметр("ВидыНалогов",      ВидыНалогов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ПлатежПоЗадаче.ЕстьПлатежныйДокумент = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеВспомогательныеПроцедуры

Функция ОперацияНачисленияВзносовВыполнена(Организация, ПериодСобытия, ДокументЗарплаты = Неопределено, НесколькоДокументов = Ложь) Экспорт
	
	ОперацияВыполнена = Ложь;
	
	ИмяДокумента = ЗакрытиеМесяца.ВидДокументаНачисленияЗарплаты(Организация);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период",      ПериодСобытия);
	Запрос.УстановитьПараметр("Документ",    ИмяДокумента);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	НачислениеЗарплаты.Ссылка,
	|	НачислениеЗарплаты.Проведен КАК Проведен
	|ИЗ
	|	Документ.НачислениеЗарплаты КАК НачислениеЗарплаты
	|ГДЕ
	|	&Документ = ""НачислениеЗарплаты""
	|	И НЕ НачислениеЗарплаты.ПометкаУдаления
	|	И НачислениеЗарплаты.Организация = &Организация
	|	И НачислениеЗарплаты.МесяцНачисления МЕЖДУ НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Период, МЕСЯЦ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 2
	|	ОтражениеЗарплатыВБухучете.Ссылка,
	|	ОтражениеЗарплатыВБухучете.Проведен
	|ИЗ
	|	Документ.ОтражениеЗарплатыВБухучете КАК ОтражениеЗарплатыВБухучете
	|ГДЕ
	|	&Документ = ""ОтражениеЗарплатыВБухучете""
	|	И НЕ ОтражениеЗарплатыВБухучете.ПометкаУдаления
	|	И ОтражениеЗарплатыВБухучете.Организация = &Организация
	|	И ОтражениеЗарплатыВБухучете.ПериодРегистрации МЕЖДУ НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Период, МЕСЯЦ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 2
	|	ОтражениеЗарплатыВУчете.Ссылка,
	|	ОтражениеЗарплатыВУчете.Проведен
	|ИЗ
	|	Документ.ОтражениеЗарплатыВУчете КАК ОтражениеЗарплатыВУчете
	|ГДЕ
	|	&Документ = ""ОтражениеЗарплатыВУчете""
	|	И НЕ ОтражениеЗарплатыВУчете.ПометкаУдаления
	|	И ОтражениеЗарплатыВУчете.Организация = &Организация
	|	И ОтражениеЗарплатыВУчете.ПериодРегистрации МЕЖДУ НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Период, МЕСЯЦ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Проведен УБЫВ";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Если Выборка.Проведен Тогда
			ОперацияВыполнена = Истина;
		Иначе
			Если Выборка.Количество() = 1 Тогда
				ДокументЗарплаты = Выборка.Ссылка;
			ИначеЕсли Выборка.Количество() = 2 Тогда
				НесколькоДокументов = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОперацияВыполнена;
	
КонецФункции

Функция ЕстьПлатежныйДокумент(Платежи)
	
	Если Платежи.Колонки.Найти("ПлатежноеПоручение") = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВсеПлатежныеДокументы = Платежи.Скопировать(,"ПлатежноеПоручение");
	ВсеПлатежныеДокументы.Свернуть("ПлатежноеПоручение");
	
	Возврат ВсеПлатежныеДокументы.Количество() > 1 
		Или ВсеПлатежныеДокументы.Количество() = 1 И ЗначениеЗаполнено(ВсеПлатежныеДокументы[0].ПлатежноеПоручение);
	
КонецФункции

Функция РекомендацияПоНачислениюЗарплаты(Организация, ПериодСобытия)
	
	ИмяДокумента = ЗакрытиеМесяца.ВидДокументаНачисленияЗарплаты(Организация);
	
	Если ИмяДокумента = "НачислениеЗарплаты" Тогда
		// начисляем в БП
		
		Рекомендация = НСтр("ru = 'начислить зарплату'");
		
	ИначеЕсли ИмяДокумента = "ОтражениеЗарплатыВУчете" Тогда
		// загружаем из ЗУП 2.5
		
		Рекомендация = НСтр("ru = 'загрузить данные'");
		
	Иначе
		// вводим вручную
		Рекомендация = НСтр("ru = 'ввести данные'");
	КонецЕсли;
	
	ШаблонТекста = НСтр("ru = 'Рекомендуется [Рекомендация] за [Период]
		|Тогда будет возможно определить сумму платежа.'");
	
	ПараметрыТекста = Новый Структура;
	ПараметрыТекста.Вставить("Рекомендация", Рекомендация);
	ПараметрыТекста.Вставить("Период",
		КалендарьБухгалтера.ПредставлениеПериодаСобытия(НачалоМесяца(ПериодСобытия), КонецМесяца(ПериодСобытия)));
	
	Возврат СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонТекста, ПараметрыТекста);
	
КонецФункции

Функция ДополнитьТекстЗапросаПлатежиПоДекларации(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	|	СвязанныеДокументы.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ОтборПравило
	|ИЗ
	|	КритерийОтбора.СвязанныеДокументы(&Декларация) КАК СвязанныеДокументы
	|ГДЕ
	|	СвязанныеДокументы.Ссылка ССЫЛКА Документ.ПлатежноеПоручение
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗадачиБухгалтераНалоговыеПлатежи.ПлатежноеПоручение
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтераНалоговыеПлатежи КАК ЗадачиБухгалтераНалоговыеПлатежи
	|ГДЕ
	|	ЗадачиБухгалтераНалоговыеПлатежи.Организация = &Организация
	|	И ЗадачиБухгалтераНалоговыеПлатежи.Правило = &Правило
	|	И ЗадачиБухгалтераНалоговыеПлатежи.ПериодСобытия = &ПериодСобытия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка" + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ДополнитьТекстЗапросаПлатежи(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	|	ЗадачиБухгалтераНалоговыеПлатежи.ПлатежноеПоручение КАК Ссылка
	|ПОМЕСТИТЬ ОтборПравило
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтераНалоговыеПлатежи КАК ЗадачиБухгалтераНалоговыеПлатежи
	|ГДЕ
	|	ЗадачиБухгалтераНалоговыеПлатежи.Организация = &Организация
	|	И ЗадачиБухгалтераНалоговыеПлатежи.Правило = &Правило
	|	И ЗадачиБухгалтераНалоговыеПлатежи.ПериодСобытия = &ПериодСобытия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка" + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьКБКДляСверки(ИдентификаторЗадачи, Организация, Период)
	
	ВидыНалогов = РасчетыСБюджетом.ВидыНалоговПоКодуЗадачи(ИдентификаторЗадачи, Организация, Период);
	
	// Сформируем массив видов платежей, необходимый для получения необходимого КБК
	СписокВидовНалоговыхОбязательств = Новый Массив;
	СписокВидовНалоговыхОбязательств.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Налог);
	СписокВидовНалоговыхОбязательств.Добавить(Перечисления.ВидыПлатежейВГосБюджет.ПениСам);
	СписокВидовНалоговыхОбязательств.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Проценты);
	СписокВидовНалоговыхОбязательств.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Штраф);
	СписокВидовНалоговыхОбязательств.Добавить(Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела);
	
	КоличествоВидов = ВидыНалогов.Количество();
	Если КоличествоВидов > 1 Тогда
		ДанныеКлассификатора = Справочники.ВидыНалоговИПлатежейВБюджет.ПрочитатьПоставляемыеДанныеКлассификатора(Период,, Истина);
		ДанныеКлассификатора.Индексы.Добавить("ВидНалога");
	КонецЕсли;
	
	МассивКБК = Новый Массив;
	Для каждого ВидНалога Из ВидыНалогов Цикл
		Если КоличествоВидов = 1 Тогда
			// Если вид налога один, то получим данные из макета справочника
			ДанныеПоВидуНалога = Справочники.ВидыНалоговИПлатежейВБюджет.НайтиПоставляемыеДанные(ВидНалога,,, Период);
		Иначе
			// Если видов налога несколько, то получим данные из проиндексированной таблицы
			ДанныеПоВидуНалога = ДанныеКлассификатора.Найти(ВидНалога, "ВидНалога");
		КонецЕсли;
		
		Если ДанныеПоВидуНалога = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого ВидНалоговогоОбязательства Из СписокВидовНалоговыхОбязательств Цикл
			КодБК = Справочники.ВидыНалоговИПлатежейВБюджет.КБКПоВидуНалоговогоОбязательства(ДанныеПоВидуНалога.КодБК, ВидНалога, ВидНалоговогоОбязательства, Период);
			
			Если ПлатежиВБюджетКлиентСервер.КодПодвидаДоходов(КодБК) <> ПлатежиВБюджетКлиентСервер.ПустойКодПодвидаДоходов() Тогда
				МассивКБК.Добавить(КодБК);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивКБК);
	
КонецФункции

Функция ПредставлениеЗапросаНаСверку(ДокументСсылка)
	
	ТипДокумента = ТипЗнч(ДокументСсылка);
	
	Если ТипДокумента <> Тип("ДокументСсылка.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика")
		И ТипДокумента <> Тип("ДокументСсылка.ЗапросНаИнформационноеОбслуживаниеСтрахователя") Тогда 
		Возврат "";
	КонецЕсли;
	
	СостояниеОтправки = ПолучитьСостояниеОтправки(ДокументСсылка);
		
	ПредставлениеДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Запрос на сверку (%1)'"),
				СостояниеОтправки);
	
	Возврат ПредставлениеДокумента;
	
КонецФункции

Функция ПолучитьСостояниеОтправки(ДокументСсылка)
	
	СостояниеОтправки = "Не отправлено";
	
	СведенияПоВсемОтправкам = СведенияПоОтправкам.СведенияПоВсемОтправкам(ДокументСсылка);
	Если СведенияПоВсемОтправкам.Количество() > 0 Тогда 
		Идентификатор      = СведенияПоВсемОтправкам[0].ИдентификаторОтправки;
		СведенияПоОтправке = СведенияПоОтправкам.СведенияПоОтправке(ДокументСсылка, Идентификатор);
		СостояниеОтправки  = Строка(СведенияПоОтправке.Статус);
	КонецЕсли;
	
	Возврат СостояниеОтправки;
	
КонецФункции

Функция ОписаниеДействияЖурналСчетовФактур(Событие)
	
	ОписаниеДействия = Новый Структура;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",     Событие.Организация);
	ПараметрыФормы.Вставить("НалоговыйПериод", Событие.ПериодСобытия);
	
	ОписаниеДействия.Вставить("ИмяФормы",       "Документ.ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде.Форма.ФормаДокумента");
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
КонецФункции

Функция СобытиеЖурналаРегистрации()

	Возврат НСтр("ru = 'ЗадачиБухгалтера.ВыполнениеДействия'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());

КонецФункции

// Возвращает таблицу с соответствием форм регл отчетов и идентификаторами задач и правил подготовки отчетов.
// Возвращаемое значение:
//  ТаблицаЗначений
//   ФормаОтчета          - Строка
//   ИдентификаторПравила - Строка
//   ИдентификаторЗадачи  - Строка
//
Функция СоответствияПравилИФормОтчетов() Экспорт
	
	СоответствияПравилИФормОтчетов = Новый ТаблицаЗначений;
	
	СоответствияПравилИФормОтчетов.Колонки.Добавить("ФормаОтчета",          ОбщегоНазначения.ОписаниеТипаСтрока(100));
	СоответствияПравилИФормОтчетов.Колонки.Добавить("ИдентификаторПравила", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	СоответствияПравилИФормОтчетов.Колонки.Добавить("ИдентификаторЗадачи",  ОбщегоНазначения.ОписаниеТипаСтрока(100));
	
	Для Каждого ОтчетПравило Из ИнтерфейсыВзаимодействияБРО.РеглОтчетыИсполнителиТребований() Цикл
		
		НоваяСтрока = СоответствияПравилИФормОтчетов.Добавить();
		
		ЭлементыИмени = СтрРазделить(ОтчетПравило.Ключ, ".");
		ЭлементыИмени.Добавить(""); // На случай отсутствия имени правила в ключе.
		
		НоваяСтрока.ИдентификаторЗадачи  = ЭлементыИмени[0];
		НоваяСтрока.ИдентификаторПравила = ЭлементыИмени[1];
		НоваяСтрока.ФормаОтчета          = ОтчетПравило.Значение;
		
	КонецЦикла;
	
	Возврат СоответствияПравилИФормОтчетов;
	
КонецФункции

#КонецОбласти
