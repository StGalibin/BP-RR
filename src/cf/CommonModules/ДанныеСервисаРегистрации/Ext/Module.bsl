#Область ПрограммныйИнтерфейс

Функция КвитанцияНаОплатуГоспошлины(ТипПлатежа, ДанныеПлательщика, АдресОрганизацииЗначенияПолей, Сумма) Экспорт
	ОписаниеОшибки = "";
	ОбъектXDTO     = Неопределено;
	Прокси         = ПроксиСервиса(ОписаниеОшибки);
	Если Прокси <> Неопределено Тогда
		ВходныеПараметры = Прокси.ФабрикаXDTO.Создать(Прокси.ФабрикаXDTO.Тип(ПространствоИмен(), "getPaymentDocument"));
		ГоспошлинаЗаРегистрацию = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(
			Перечисления.ВидыНалогов.Госпошлина_ГосрегистрацияОрганизаций, Истина);
		ТипыПлатежа = ТипыПлатежа();
		ВходныеПараметры.Type = ТипыПлатежа[ТипПлатежа];
		ВходныеПараметры.KBK = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГоспошлинаЗаРегистрацию, "КодБК");
		ВходныеПараметры.Sum = Сумма;
		ВходныеПараметры.FirstName = ДанныеПлательщика.Имя;
		ВходныеПараметры.LastName = ДанныеПлательщика.Фамилия;
		Если ЗначениеЗаполнено(ДанныеПлательщика.Отчество) Тогда
			ВходныеПараметры.MiddleName = ДанныеПлательщика.Отчество;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеПлательщика.ИНН) Тогда
			ВходныеПараметры.INN = ДанныеПлательщика.ИНН;
		КонецЕсли;
		
		ВходныеПараметры.OrganizationAddress = ПолучитьАдресРФ(АдресОрганизацииЗначенияПолей, Прокси);
		ВходныеПараметры.LiveAddress = ПолучитьАдресРФ(ДанныеПлательщика.АдресПропискиЗначенияПолей, Прокси);
		
		Попытка
			ДвоичныеДанныеФайла = Прокси.getPaymentDocument(
				ВходныеПараметры.Type,
				ВходныеПараметры.KBK,
				ВходныеПараметры.Sum,
				ВходныеПараметры.FirstName,
				ВходныеПараметры.LastName,
				ВходныеПараметры.MiddleName,
				ВходныеПараметры.INN,
				ВходныеПараметры.OrganizationAddress,
				ВходныеПараметры.LiveAddress);
			Возврат ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла);
		Исключение
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПлатежныеРеквизитыОплатаГоспошлины(ДанныеПлательщика, АдресОрганизацииЗначенияПолей, Сумма) Экспорт
	ОписаниеОшибки = "";
	ОбъектXDTO     = Неопределено;
	Прокси         = ПроксиСервиса(ОписаниеОшибки);
	Если Прокси <> Неопределено Тогда
		Результат = НовыйРеквизитыПлатежа();
		ГоспошлинаЗаРегистрацию = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(
			Перечисления.ВидыНалогов.Госпошлина_ГосрегистрацияОрганизаций, Истина);
		Результат.КБК = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГоспошлинаЗаРегистрацию, "КодБК");
		Результат.Сумма = Сумма;
		
		ВходныеПараметры = Прокси.ФабрикаXDTO.Создать(Прокси.ФабрикаXDTO.Тип(ПространствоИмен(), "getPaymentRequisites"));
		ВходныеПараметры.Type = "CHARTER";
		ВходныеПараметры.KBK = Результат.КБК;
		ВходныеПараметры.Sum = Сумма;
		ВходныеПараметры.FirstName = ДанныеПлательщика.Имя;
		ВходныеПараметры.LastName = ДанныеПлательщика.Фамилия;
		ВходныеПараметры.OrganizationAddress = ПолучитьАдресРФ(АдресОрганизацииЗначенияПолей, Прокси);
		ВходныеПараметры.LiveAddress = ПолучитьАдресРФ(ДанныеПлательщика.АдресПропискиЗначенияПолей, Прокси);
		
		Попытка
			ПлатежныеРеквизитыИзСервиса = Прокси.getPaymentRequisites(
				ВходныеПараметры.Type,
				ВходныеПараметры.KBK,
				ВходныеПараметры.Sum,
				ВходныеПараметры.FirstName,
				ВходныеПараметры.LastName,
				ВходныеПараметры.MiddleName,
				ВходныеПараметры.INN,
				ВходныеПараметры.OrganizationAddress,
				ВходныеПараметры.LiveAddress);
			
			Результат.ОКТМО = ПлатежныеРеквизитыИзСервиса.OKTMO;
			Результат.ИНН = ПлатежныеРеквизитыИзСервиса.recipientINN;
			Результат.КПП = ПлатежныеРеквизитыИзСервиса.recipientKPP;
			Результат.НаименованиеПолучателя = ПлатежныеРеквизитыИзСервиса.RecipientName;
			Результат.НомерСчета = ПлатежныеРеквизитыИзСервиса.recipientBankPersAccount;
			Результат.БИК = ПлатежныеРеквизитыИзСервиса.recipientBankBIC;
			Результат.НаименованиеБанка = ПлатежныеРеквизитыИзСервиса.recipientBankName;
			Результат.КоррСчет = ПлатежныеРеквизитыИзСервиса.recipientBankCorrAccount;
			Если Результат.КоррСчет = "00000000000000000000" ИЛИ Результат.КоррСчет = Результат.НомерСчета Тогда
				Результат.КоррСчет = "";
			КонецЕсли;
			
			Возврат Результат;
		Исключение
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция НовыйРеквизитыПлатежа() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ОКТМО", "");
	Результат.Вставить("ИНН", "");
	Результат.Вставить("КПП");
	Результат.Вставить("НаименованиеПолучателя", "");
	Результат.Вставить("БИК", "");
	Результат.Вставить("НаименованиеБанка", "");
	Результат.Вставить("НомерСчета", "");
	Результат.Вставить("КоррСчет", "");
	Результат.Вставить("КБК", "");
	Результат.Вставить("Сумма", 0);
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеКодаПолученияИНН() Экспорт
	
	ОписаниеОшибки = "";
	ОбъектXDTO     = Неопределено;
	Прокси         = ПроксиСервисаИНН(ОписаниеОшибки);
	Если Прокси <> Неопределено Тогда
		Попытка
			
			ДанныеКодаПолученияИННXDTO = Прокси.getCaptcha();
			ДанныеКодаПолученияИНН = Новый Структура();
			ДанныеКодаПолученияИНН.Вставить("ДвоичныеДанныеКартинки", ДанныеКодаПолученияИННXDTO.Image);
			ДанныеКодаПолученияИНН.Вставить("Токен", ДанныеКодаПолученияИННXDTO.Token);
			
			Возврат ДанныеКодаПолученияИНН;
			
		Исключение
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Ошибка, , ,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ОпределитьИНН(ДанныеФизическогоЛица, Токен, КодПолучения) Экспорт
	
	ДанныеИНН = Новый Структура();
	ДанныеИНН.Вставить("ИНН",         Неопределено);
	ДанныеИНН.Вставить("Ошибка",      "");
	ДанныеИНН.Вставить("ТекстОшибки", "");
	
	ОписаниеОшибки = "";
	ОбъектXDTO     = Неопределено;
	Прокси         = ПроксиСервисаИНН(ОписаниеОшибки);
	Если Прокси <> Неопределено Тогда
		Попытка
			
			ВходныеПараметры = Прокси.ФабрикаXDTO.Создать(
				Прокси.ФабрикаXDTO.Тип(ПространствоИмен(), "getInn"));
			ВходныеПараметры.FirstName = ДанныеФизическогоЛица.Имя;
			ВходныеПараметры.LastName  = ДанныеФизическогоЛица.Фамилия;
			Если ЗначениеЗаполнено(ДанныеФизическогоЛица.Отчество) Тогда
				ВходныеПараметры.MiddleName = ДанныеФизическогоЛица.Отчество;
				ВходныеПараметры.NoMiddleName = Ложь;
			Иначе
				ВходныеПараметры.NoMiddleName = Истина
			КонецЕсли;
			
			ВходныеПараметры.DayOfBirth = ДанныеФизическогоЛица.ДатаРождения;
			ВходныеПараметры.DocumentType = "21";
			ВходныеПараметры.DocumentNumber = СтрШаблон(НСтр("ru = '%1 %2'"),
				ДанныеФизическогоЛица.ПаспортныеДанные.Серия,
				ДанныеФизическогоЛица.ПаспортныеДанные.Номер);
			ВходныеПараметры.DocumentDate = ДанныеФизическогоЛица.ПаспортныеДанные.ДатаВыдачи;
			ВходныеПараметры.CaptchaToken = Токен;
			ВходныеПараметры.CaptchaText  = КодПолучения;
			
			Результат = Прокси.getInn(ВходныеПараметры.FirstName, ВходныеПараметры.LastName,
				ВходныеПараметры.MiddleName, ВходныеПараметры.NoMiddleName,
				ВходныеПараметры.DayOfBirth, ВходныеПараметры.DocumentType,
				ВходныеПараметры.DocumentNumber, ВходныеПараметры.DocumentDate,
				ВходныеПараметры.CaptchaToken, ВходныеПараметры.CaptchaText);
			
			ДанныеИНН.ИНН = Результат;
			
			Возврат ДанныеИНН;
			
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка, , ,
				ПодробноеПредставлениеОшибки);
			Если СтрНайти(ПодробноеПредставлениеОшибки, "SERVER-1:") > 0 Тогда
				ДанныеИНН.Ошибка = "НеверныйКод";
			ИначеЕсли СтрНайти(ПодробноеПредставлениеОшибки, "SERVER-2:") > 0 Тогда
				ДанныеИНН.Ошибка = "НеверныйАдрес";
			ИначеЕсли СтрНайти(ПодробноеПредставлениеОшибки, "SERVER-10:") > 0 Тогда
				ДанныеИНН.Ошибка = "ОшибкаОбработкиЗапроса";
			ИначеЕсли СтрНайти(ПодробноеПредставлениеОшибки, "SERVER-20:") > 0 Тогда
				ДанныеИНН.Ошибка = "ВнутренняяОшибка";
			Иначе
				ДанныеИНН.Ошибка = "НеизвестнаяОшибка";
			КонецЕсли;
			ДанныеИНН.ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат ДанныеИНН;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПроксиСервиса(ОписаниеОшибки)
	
	Прокси = Неопределено;
	ПараметрыАутентификации = ПараметрыАутентификацииВСервисе();
	
	Если ПараметрыАутентификации = Неопределено Тогда
		
		// Служебный текст. Должен быть обработан на клиенте.
		ОписаниеОшибки = "НеУказаныПараметрыАутентификации"; 
		
	Иначе
		
		Попытка
			
			ПараметрыПодключения = ОбщегоНазначения.ПараметрыПодключенияWSПрокси();
			ПараметрыПодключения.АдресWSDL           = АдресСервиса();
			ПараметрыПодключения.URIПространстваИмен = ПространствоИмен();
			ПараметрыПодключения.ИмяСервиса          = "RegistrationWebServiceEndpointV2ImplService";
			ПараметрыПодключения.ИмяТочкиПодключения = "RegistrationWebServiceEndpointV2ImplPort";
			ПараметрыПодключения.ИмяПользователя     = ПараметрыАутентификации.login;
			ПараметрыПодключения.Пароль              = ПараметрыАутентификации.password;
			ПараметрыПодключения.Таймаут             = 30;
			
			Прокси = ОбщегоНазначения.СоздатьWSПрокси(ПараметрыПодключения);
			
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Прокси;
	
КонецФункции

Функция ПроксиСервисаИНН(ОписаниеОшибки)
	
	Прокси = Неопределено;
	ПараметрыАутентификации = ПараметрыАутентификацииВСервисе();
	
	Если ПараметрыАутентификации = Неопределено Тогда
		
		// Служебный текст. Должен быть обработан на клиенте.
		ОписаниеОшибки = "НеУказаныПараметрыАутентификации"; 
		
	Иначе
		
		Попытка
			
			ПараметрыПодключения = ОбщегоНазначения.ПараметрыПодключенияWSПрокси();
			ПараметрыПодключения.АдресWSDL           = АдресСервисаИНН();
			ПараметрыПодключения.URIПространстваИмен = ПространствоИмен();
			ПараметрыПодключения.ИмяСервиса          = "RegistrationWebServiceEndpointImplService";
			ПараметрыПодключения.ИмяТочкиПодключения = "RegistrationWebServiceEndpointImplPort";
			ПараметрыПодключения.ИмяПользователя     = ПараметрыАутентификации.login;
			ПараметрыПодключения.Пароль              = ПараметрыАутентификации.password;
			ПараметрыПодключения.Таймаут             = 30;
			
			Прокси = ОбщегоНазначения.СоздатьWSПрокси(ПараметрыПодключения);
			
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Прокси;
	
КонецФункции

Функция ПараметрыАутентификацииВСервисе()
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат Новый Структура("login,password", 
			"fresh", "fresh");
				
	Иначе
		ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		Если ДанныеАутентификации <> Неопределено Тогда
			Возврат Новый Структура("login,password", 
				ДанныеАутентификации.Логин, 
				ДанныеАутентификации.Пароль);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Функция АдресСервиса()
	
	Возврат "https://api.registrationservices.1c.ru/registrationservices/services/v2?wsdl";
	
КонецФункции

Функция АдресСервисаИНН()
	
	Возврат "https://api.registrationservices.1c.ru/registrationservices/services/v1?wsdl";
	
КонецФункции

Функция ПространствоИмен()
	
	Возврат "http://ws.registrationservices.company1c.com/";
	
КонецФункции

Функция ПолучитьАдресРФ(Строка, Прокси)
	
	Адрес = ОбщегоНазначения.ОбъектXDTOИзСтрокиXML(Строка, ФабрикаXDTO);
	СтрокаАдресРФ = ОбщегоНазначения.ОбъектXDTOВСтрокуXML(Адрес.Состав.Состав);
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаАдресРФ);
	
	Результат = Прокси.ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	Возврат Результат;
	
КонецФункции

Функция СобытиеЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Регистрация организации.Сервис'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Функция ТипыПлатежа()
	
	Результат = Новый Структура;
	Результат.Вставить("РегистрацияЮрлица", "ORGANIZATION");
	Результат.Вставить("РегистрацияИП", "ENTREPRENEUR");
	Результат.Вставить("ИзмененияВУставеЮрлица", "CHARTER");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти