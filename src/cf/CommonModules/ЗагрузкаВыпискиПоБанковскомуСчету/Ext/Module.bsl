#Область ПрограммныйИнтерфейс

Функция РаспознанныеДанныеИзБанка(ИмяФайла, Настройки, СведенияОВладельцеБанковскогоСчетаИзКонтекста = Неопределено, ОдиночныйРазделительСтрок = Ложь) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИмяФайла) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РезультатЧтенияФайла = ОбменСБанкомВФормате1С.ПрочитатьФайл(ИмяФайла, Настройки.Кодировка, ОдиночныйРазделительСтрок);
	
	Если Не ОдиночныйРазделительСтрок Тогда
		// Данные могут быть прочитаны неверно, если файл фактически содержит одиночный разделитель
		ДанныеФайлаПовреждены = 
			(РезультатЧтенияФайла.Протокол.Найти("ФайлСодержитНачальныйТег", "КодСобытия") = Неопределено)
			И (РезультатЧтенияФайла.Протокол.Найти("ФайлСодержитСтрокиДоНачальногоТега", "КодСобытия") <> Неопределено);
		Если ДанныеФайлаПовреждены Тогда
			// Предпримем попытку прочитать файл с одиночным разделителем строк
			РезультатЧтенияФайла = ОбменСБанкомВФормате1С.ПрочитатьФайл(ИмяФайла, Настройки.Кодировка, Истина);
		КонецЕсли;
	КонецЕсли;
	
	РазобратьНазначениеПлатежа(РезультатЧтенияФайла.ДанныеИзБанка);
	
	Если СведенияОВладельцеБанковскогоСчетаИзКонтекста = Неопределено Тогда
		СведенияОВладельцеБанковскогоСчетаИзКонтекста = Новый Структура;
		СведенияОВладельцеБанковскогоСчетаИзКонтекста.Вставить("Организация",               Новый Массив);
		СведенияОВладельцеБанковскогоСчетаИзКонтекста.Вставить("БанковскийСчетОрганизации", Новый Массив);
	КонецЕсли;
	
	УчастникиОпераций = ИдентификацияУчастниковБанковскихОпераций.НовыйУчастникиОпераций();
	
	ИдентификаторыУчастниковОпераций = ЗаполнитьИдентификаторыУчастниковОперацийПоДаннымИзБанка(
		УчастникиОпераций,
		РезультатЧтенияФайла.ДанныеИзБанка);
	ИдентификацияУчастниковБанковскихОпераций.НайтиВИнформационнойБазе(УчастникиОпераций, СведенияОВладельцеБанковскогоСчетаИзКонтекста);
	
	ПротоколГруппировкиВыписки = НовыйПротоколГруппировкиВыписки();
	Выписки = ВыпискиПоБанковскимСчетам(
		РезультатЧтенияФайла.ДанныеИзБанка,
		УчастникиОпераций,
		ИдентификаторыУчастниковОпераций,
		ПротоколГруппировкиВыписки);
	ИдентификаторыУчастниковОпераций = Неопределено; // Все данные помещены в коллекцию Выписки; использовать ИдентификаторыУчастниковОпераций более не следует
	
	РаспознанныеВыписки = РаспознатьВыписки(Выписки, УчастникиОпераций, Настройки);
	
	Возврат НовыйРаспознанныеДанныеИзБанка(
		Выписки,
		РаспознанныеВыписки,
		УчастникиОпераций,
		Настройки,
		РезультатЧтенияФайла.Протокол,
		ПротоколГруппировкиВыписки);
	
КонецФункции

Функция НовыйРаспознанныеДанныеИзБанка(Выписки, РаспознанныеВыписки, УчастникиОпераций, Настройки, ПротоколЧтенияФайла, ПротоколГруппировкиВыписки) Экспорт
	
	РаспознанныеДанныеИзБанка = Новый Структура;
	РаспознанныеДанныеИзБанка.Вставить("Выписки",                    Выписки);
	РаспознанныеДанныеИзБанка.Вставить("РаспознанныеВыписки",        РаспознанныеВыписки);
	РаспознанныеДанныеИзБанка.Вставить("УчастникиОпераций",          УчастникиОпераций);
	РаспознанныеДанныеИзБанка.Вставить("Настройки",                  Настройки);
	РаспознанныеДанныеИзБанка.Вставить("ПротоколЧтенияФайла",        ПротоколЧтенияФайла);
	РаспознанныеДанныеИзБанка.Вставить("ПротоколГруппировкиВыписки", ПротоколГруппировкиВыписки);
	
	Возврат РаспознанныеДанныеИзБанка;
	
КонецФункции

Функция ИмяСобытияЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = 'Загрузка выписки по банковскому счету'", Метаданные.ОсновнойЯзык.КодЯзыка);
	
КонецФункции

// Настройки - см. НовыйНастройкиОбменСБанком()
Функция РаспознатьВыписки(Выписки, УчастникиОпераций, Настройки) Экспорт
	
	РаспознанныеВыписки = Новый Соответствие; // Ключ - идентификатор выписки; Значение - см. НовыйРаспознаннаяВыписка()
	
	ПравилаОпределенияХозяйственныхОпераций = НовыйПравилаОпределенияХозяйственныхОпераций();
	ЗаполнитьПредопределенныеПравилаОпределенияХозяйственныхОпераций(ПравилаОпределенияХозяйственныхОпераций);

	Для Каждого КлючИЗначение Из Выписки Цикл
		
		Выписка = КлючИЗначение.Значение;
		
		РаспознаннаяВыписка = НовыйРаспознаннаяВыписка(Выписка.Идентификатор, УчастникиОпераций);
		РаспознанныеВыписки.Вставить(Выписка.Идентификатор, РаспознаннаяВыписка);
		
		Если Не БанковскийСчетВыпискиОпределен(РаспознаннаяВыписка, УчастникиОпераций) Тогда
			Продолжить;
		КонецЕсли;
		
		НайтиПлатежныеПоручения(РаспознаннаяВыписка, Выписка, УчастникиОпераций);
		НайтиРанееСозданныеДокументы(РаспознаннаяВыписка, Выписка, УчастникиОпераций);
		
		// Определим хозяйственные операции
		ПараметрыОпределенияХозяйственнойОперации = НовыйПараметрыОпределенияХозяйственнойОперации();
		ПараметрыОпределенияХозяйственнойОперации.ВладелецСчета                 = РаспознаннаяВыписка.ВладелецСчета;
		ПараметрыОпределенияХозяйственнойОперации.УчастникиОпераций             = УчастникиОпераций;
		
		Для Каждого Операция Из Выписка.Операции Цикл
			
			РаспознаннаяОперация = НайтиПоИдентификатору(РаспознаннаяВыписка.Операции, Операция.Идентификатор);
			
			Если ЗначениеЗаполнено(РаспознаннаяОперация.ПлатежноеПоручение)
				Или ЗначениеЗаполнено(РаспознаннаяОперация.Ссылка) Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьПараметрыОпределенияХозяйственнойОперации(ПараметрыОпределенияХозяйственнойОперации, Операция);
				
			РаспознаннаяОперация.ХозяйственнаяОперация = ХозяйственнаяОперация(
				ПараметрыОпределенияХозяйственнойОперации,
				ПравилаОпределенияХозяйственныхОпераций);
			
			ПодготовитьПредупрежденияПриВыбореСсылок(РаспознаннаяОперация, ПараметрыОпределенияХозяйственнойОперации);
			
		КонецЦикла;
		
		НайтиСчетНаОплатуПокупателю(РаспознаннаяВыписка, Выписка, УчастникиОпераций);
		
	КонецЦикла;
	
	Возврат РаспознанныеВыписки;
	
КонецФункции

// содержимое РаспознанныеДанныеИзБанка может быть дополнено (модифицировано)
// Настройки - см. НовыйНастройкиОбменСБанком()
Функция ХозяйственнаяОперацияПоВидуОперации(ВидОперации, ИдентификаторВыписки, ИдентификаторОперацииБанк, РаспознанныеДанныеИзБанка, Настройки) Экспорт
	
	Если Не ЗначениеЗаполнено(ВидОперации) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Операция = ОперацияВыписки(РаспознанныеДанныеИзБанка.Выписки, ИдентификаторВыписки, ИдентификаторОперацииБанк);
	Если Операция = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РаспознаннаяВыписка = РаспознанныеДанныеИзБанка.РаспознанныеВыписки[ИдентификаторВыписки];
	Если РаспознаннаяВыписка = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыОпределенияХозяйственнойОперации = НовыйПараметрыОпределенияХозяйственнойОперации();
	ПараметрыОпределенияХозяйственнойОперации.ВладелецСчета                 = РаспознаннаяВыписка.ВладелецСчета;
	ПараметрыОпределенияХозяйственнойОперации.УчастникиОпераций             = РаспознанныеДанныеИзБанка.УчастникиОпераций;
	
	ЗаполнитьПараметрыОпределенияХозяйственнойОперации(ПараметрыОпределенияХозяйственнойОперации, Операция);
	
	ПравилаОпределенияХозяйственныхОпераций = НовыйПравилаОпределенияХозяйственныхОпераций();
	ЗаполнитьПредопределенныеПравилаОпределенияХозяйственныхОпераций(ПравилаОпределенияХозяйственныхОпераций, ВидОперации);
	
	ХозяйственнаяОперация = ХозяйственнаяОперация(
		ПараметрыОпределенияХозяйственнойОперации,
		ПравилаОпределенияХозяйственныхОпераций,
		Истина);
		
	Возврат ХозяйственнаяОперация;
	
КонецФункции 

// Определяет свойства распознанной операции, одновременно соответствующие сведениям, указанным
// - в форме (пользователем)
// - в операции выписки (инициатором платежа).
// Если подходящих ссылок нет, то создает их, дополняя (модифицируя) содержимое РаспознанныеДанныеИзБанка.
//
// Для распознавания операции по виду операции следует использовать ХозяйственнаяОперацияПоВидуОперации()
//
// Параметры:
//  ДанныеВведенныеПользователем - Структура - Ключ - имя данных; Значение - значение данных. 
//     Допускаются ключи: "Контрагент", "ДоговорКонтрагента", "ВидОперацииДокумента"
//  ИдентификаторВыписки         - см. ТипИдентификатор()
//  ИдентификаторОперации        - см. ТипИдентификатор()
//  РаспознанныеДанныеИзБанка    - см. НовыйРаспознанныеДанныеИзБанка()
//  Настройки                    - см. НовыйНастройкиОбменСБанком()
// 
// Возвращаемое значение:
//  см. НовыйХозяйственнаяОперация() - значения уточненных свойств хозяйственной операции
//
Функция УточнитьХозяйственнуюОперациюДаннымиВведеннымиПользователем(ДанныеВведенныеПользователем, ИдентификаторВыписки, ИдентификаторОперации, РаспознанныеДанныеИзБанка, Настройки) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеВведенныеПользователем) Тогда
		Возврат Новый Структура;
	КонецЕсли;
	
	Операция = ОперацияВыписки(РаспознанныеДанныеИзБанка.Выписки, ИдентификаторВыписки, ИдентификаторОперации);
	Если Операция = Неопределено Тогда
		Возврат Новый Структура;
	КонецЕсли;
	
	РаспознаннаяВыписка = РаспознанныеДанныеИзБанка.РаспознанныеВыписки[ИдентификаторВыписки];
	Если РаспознаннаяВыписка = Неопределено Тогда
		Возврат Новый Структура;
	КонецЕсли;
	
	РаспознаннаяОперация = НайтиПоИдентификатору(РаспознаннаяВыписка.Операции, ИдентификаторОперации);
	Если РаспознаннаяОперация.ХозяйственнаяОперация = Неопределено Тогда
		ХозяйственнаяОперация = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ДанныеВведенныеПользователем);
	Иначе
		ХозяйственнаяОперация = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(РаспознаннаяОперация.ХозяйственнаяОперация);
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(
			ХозяйственнаяОперация,
			ДанныеВведенныеПользователем,
			Истина);
	КонецЕсли;
	
	ЗаменитьХозяйственнуюОперацию = ХозяйственнаяОперация.Свойство("Контрагент") 
		И ХозяйственнаяОперация.Свойство("ВидОперацииДокумента") 
		И ТипЗнч(ХозяйственнаяОперация.Контрагент) <> УчетДенежныхСредствКлиентСервер.ТипКонтрагентаПоВидуОперации(ХозяйственнаяОперация.ВидОперацииДокумента);
		
	Параметры = НовыйПараметрыОпределенияХозяйственнойОперации();
	Параметры.ВладелецСчета                 = РаспознаннаяВыписка.ВладелецСчета;
	Параметры.УчастникиОпераций             = РаспознанныеДанныеИзБанка.УчастникиОпераций;
	
	ЗаполнитьПараметрыОпределенияХозяйственнойОперации(Параметры, Операция);
	
	Если ЗаменитьХозяйственнуюОперацию Тогда
		
		ПравилаОпределенияХозяйственныхОпераций = НовыйПравилаОпределенияХозяйственныхОпераций();
		ЗаполнитьПредопределенныеПравилаОпределенияХозяйственныхОпераций(
			ПравилаОпределенияХозяйственныхОпераций,
			ДанныеВведенныеПользователем.ВидОперацииДокумента);
	
		ХозяйственнаяОперация = ХозяйственнаяОперация(Параметры, ПравилаОпределенияХозяйственныхОпераций, Истина);
		
	Иначе
		
		ЗаполнитьБанковскийСчет = ДанныеВведенныеПользователем.Свойство("Контрагент");
		ЗаполнитьДоговор        = ДанныеВведенныеПользователем.Свойство("ВидОперацииДокумента") Или ДанныеВведенныеПользователем.Свойство("Контрагент");
		ЗаполнитьПоДоговору     = ДанныеВведенныеПользователем.Свойство("ДоговорКонтрагента");
		ЗаполнитьСтатьюДДС      = ДанныеВведенныеПользователем.Свойство("ВидОперацииДокумента");
		
		Если ЗаполнитьБанковскийСчет Тогда
			
			// Банковский счет заполняем, только если его можно идентифицировать по данным файла
			ХозяйственнаяОперация.Удалить("БанковскийСчетКонтрагента");
			УстановитьБанковскийСчетКонтрагента(ХозяйственнаяОперация, Параметры);
			Если Не ХозяйственнаяОперация.Свойство("БанковскийСчетКонтрагента") Тогда
				ХозяйственнаяОперация.Вставить("БанковскийСчетКонтрагента", Справочники.БанковскиеСчета.ПустаяСсылка());
			КонецЕсли;
			
			ЗаполнитьДоговор = Истина;
			
		КонецЕсли;
		
		Если ЗаполнитьДоговор Тогда
			
			ХозяйственнаяОперация.Удалить("ДоговорКонтрагента");
			Если ХозяйственнаяОперация.Свойство("Контрагент")
				И ХозяйственнаяОперация.Свойство("ВидОперацииДокумента")
				И ЗначениеЗаполнено(ХозяйственнаяОперация.Контрагент)
				И ЗначениеЗаполнено(ХозяйственнаяОперация.ВидОперацииДокумента) Тогда
				
				// Логика заполнения договора использует коллекцию УчастникиОпераций.
				// Однако, контрагент может быть выбран пользователем среди тех, что не могут быть идентифицированы по данным файла,
				// а значит, отсутствуют в УчастникиОпераций.
				// Поэтому добавим в УчастникиОпераций контрагента, выбранного пользователем,
				// а затем дополним коллекцию всеми договорами этого контрагента.
				
				Идентификаторы = Параметры.Операция[Параметры.СторонаКонтрагента + "Идентификаторы"];
				ИдентификацияУчастниковБанковскихОпераций.ДополнитьУчастникиОперацийСсылкой(
					Параметры.УчастникиОпераций,
					ХозяйственнаяОперация.Контрагент,
					Новый Структура, // описание ссылки не должно использоваться
					Идентификаторы);
				ИдентификацияУчастниковБанковскихОпераций.НайтиДоговорыКонтрагентовВИнформационнойБазе(
					Параметры.УчастникиОпераций,
					ХозяйственнаяОперация.Контрагент);
				
				НайтиДоговорПоВидуОперации(
					ХозяйственнаяОперация,
					Параметры,
					ХозяйственнаяОперация.ВидОперацииДокумента);
				ЗаполнитьПоДоговору = Истина;
				
			КонецЕсли;
			
			Если Не ХозяйственнаяОперация.Свойство("ДоговорКонтрагента") Тогда
				ХозяйственнаяОперация.Вставить("ДоговорКонтрагента", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗаполнитьПоДоговору Тогда
			// Реквизиты, зависящие от договора
			УстановитьПоказателиРасчетов(ХозяйственнаяОперация, Параметры);
			УстановитьПоказателиНДС(ХозяйственнаяОперация, Параметры);
		КонецЕсли;
		
		Если ЗаполнитьСтатьюДДС Тогда
			ХозяйственнаяОперация.Вставить("СтатьяДвиженияДенежныхСредств",
				УчетДенежныхСредствБП.СтатьяДДСПоУмолчанию(ХозяйственнаяОперация.ВидОперацииДокумента));
		КонецЕсли;
			
	КонецЕсли;
	
	РаспознаннаяОперация.ХозяйственнаяОперация = ХозяйственнаяОперация;
	
	Возврат ХозяйственнаяОперация;
	
КонецФункции 

#КонецОбласти

#Область ISO20022

Функция ТипИдентификатор() Экспорт
	
	// Тип Max35Text часто используется в ISO 20022 для идентификаторов
	Возврат ОбщегоНазначения.ОписаниеТипаСтрока(35);
	
КонецФункции

Функция НовыйВыпискаПоБанковскомуСчету(Идентификатор) Экспорт
	
	// Представляет значения типа AccountStatement5 сообщения camt.053.001.05 (BankToCustomerStatementV05) стандарта ISO 20022
	// Где уместно, приводятся имена на русском языке в соответствии с проектом стандартов национальной практики применения платежных сообщений ISO 20022,
	// опубликованном Центральным банком РФ
	
	ТипСумма         = ОбщегоНазначения.ОписаниеТипаЧисло(15,2); // в рублях
	ТипИдентификатор = ТипИдентификатор();
	
	Выписка = Новый Структура;
	Выписка.Вставить("Идентификатор",         Идентификатор); // Identification
	Выписка.Вставить("НачалоПериода",         '0001-01-01');  // FromToDate.FromDateTime
	Выписка.Вставить("КонецПериода",          '0001-01-01');  // FromToDate.ToDateTime
	
	Выписка.Вставить("Сальдо", Новый ТаблицаЗначений); // Balance
	Выписка.Сальдо.Колонки.Добавить("Дата",  ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата)); // Balance.Date.DateTime; Принимаем, что для всех записей сальдо на начало дня; Balance.Type = OPBD
	Выписка.Сальдо.Колонки.Добавить("Сумма", ТипСумма);                                          // Balance.Amount; Принимаем, что это кредитовое сальдо по счету клиента банка; Balance.CreditDebitIndicator = CRDT
	
	Выписка.Вставить("ВсегоСписано",       0); // TransactionsSummary.TotalDebitEntries.Sum
	Выписка.Вставить("ВсегоПоступило",     0); // TransactionsSummary.TotalCreditEntries.Sum
	
	Выписка.Вставить("Операции", Новый ТаблицаЗначений); // Entry
	Выписка.Операции.Колонки.Добавить("Идентификатор",            ТипИдентификатор); // EntryReference Идентифицирует операцию в рамках выписки
	// Поле, аналогичное ПорядковыйНомерВФайле, не предусмотрено camt.053 и может использоваться только для заполнения коллекции
	// (не должно использоваться позднее).
	// Ограничение в 10 символов выбрано в соответствии с ОбщегоНазначенияБПВызовСервера.ПронумероватьТаблицу()
	Выписка.Операции.Колонки.Добавить("ПорядковыйНомерВФайле",    ОбщегоНазначения.ОписаниеТипаЧисло(10, 0, ДопустимыйЗнак.Неотрицательный));
	// В программе длину номера документа ограничиваем до 20 символов: только такие номера могут быть сохранены в ИБ. 
	// См.
	// - Метаданные.Документы.ПоступлениеНаРасчетныйСчет.Реквизиты.НомерВходящегоДокумента
	// - Метаданные.Документы.СписаниеСРасчетногоСчета.Реквизиты.НомерВходящегоДокумента
	Выписка.Операции.Колонки.Добавить("НомерДокумента",           ОбщегоНазначения.ОписаниеТипаСтрока(20)); // TransactionDetails.References.EndToEndIdentification Для идентификации используется номер и дата документа, передаваемые от плательщика получателю (или при прямом дебитовании - от получателя плательщику)
	Выписка.Операции.Колонки.Добавить("ДатаДокумента",            ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата)); 
	Выписка.Операции.Колонки.Добавить("НомерСчетаКонтрагента",    БанковскиеПравила.ТипНомерСчета()); // TransactionDetails.References.InstructionIdentification Для идентификации операции в цепочке "банк-владелец счета" используется часть номера и дата документа, которым идентифицирована транзакция, а также номер банковского счета контрагента
	Выписка.Операции.Колонки.Добавить("Сумма",                    ОбщегоНазначения.ОписаниеТипаЧисло(15,2)); // Amount
	Выписка.Операции.Колонки.Добавить("ПоступилоСписано",         ТипПоступилоСписано());   // "Поступило" или "Списано" - CreditDebitIndicator
	Выписка.Операции.Колонки.Добавить("ДатаИсполнения",           ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата)); // BookingDate; Принимаем, что Status = BOOK
	Выписка.Операции.Колонки.Добавить("ПлательщикИдентификаторы", Новый ОписаниеТипов("Массив")); // См. TransactionDetails.RelatedParties.Proprietary.Party.Identification.OrganisationIdentification.Other.Identification
	Выписка.Операции.Колонки.Добавить("ПолучательИдентификаторы", Новый ОписаниеТипов("Массив"));
	Выписка.Операции.Колонки.Добавить("ПлательщикРеквизиты",      Новый ОписаниеТипов("Структура")); // См. ОбменСБанкомВФормате1С.ЭлементыРеквизитовУчастника()
	Выписка.Операции.Колонки.Добавить("ПолучательРеквизиты",      Новый ОписаниеТипов("Структура")); // См. ОбменСБанкомВФормате1С.ЭлементыРеквизитовУчастника()
	Выписка.Операции.Колонки.Добавить("РеквизитыПлатежаВБюджет",  Новый ОписаниеТипов("Структура")); // См. TransactionDetails.RemittanceInformation.Structured.TaxRemittance; ЭлементыРеквизитовПлатежаВБюджет()
	// Описание банковской операции может содержать BankTransactionCode - указание на вид этой операции не в терминах банка,
	// а в терминах бизнеса получателя или отправителя платежа, его хозяйственной деятельности.
	// Стандарт предписывает передачу BankTransactionCode
	// 1. либо в централизованном формате Domain-Family-SubFamily в соответствии с External Code Set
	// 2. либо в соответствии с какой-либо проприетарной схемой.
	// Во втором случае может быть передан только один идентификатор по одной схеме.
	// Однако, в российской практике для идентификациии типа операции используются два понятия:
	// - ШифрОперации
	// - БалансовыйСчет
	// (см. 385-П - план счетов и Приложение 1)
	// Поэтому, для строгого соблюдения стандарта следует при подготовке данных в соответствии с ISO 20022 "перекодировать" 
	// из сочетания ШифрОперации + БалансовыйСчет в значения, описанные во внешнем наборе кодов.
	// В данном случае, поскольку нет необходимости строго соблюдать представления, заданные в стандарте,
	// такое "перекодирование" выполним позже, а в структуру данных поместим два поля отдельно.
	// То есть, сделаем вид, что стандарт позволяет передавать несколько идентификаторов по разным проприетарным схемам:
	Выписка.Операции.Колонки.Добавить("ШифрОперации",             Новый ОписаниеТипов("Число"));                 // BankTransactionCode.Proprietary
	Выписка.Операции.Колонки.Добавить("БалансовыйСчет",           БанковскиеПравила.ТипНомерБалансовогоСчета()); // BankTransactionCode.Proprietary
	// TransactionDetails.RemittanceInformation
	// Стандарт национальной практики применения платежных сообщений ISO 20022:
	//  "информация, которая позволят осуществить квитовку, т.е. сверку платежа с позициями,
	//  для оплаты которых данный платеж предназначен, 
	//  например, коммерческими счетами в системе учета дебиторской задолженности"
	// ISO20022: 
	//  "information that enables the matching, that is reconciliation, of a payment 
	//  with the items that the payment is intended to settle, such as commercial invoices in an account receivable system"
	Выписка.Операции.Колонки.Добавить("НазначениеПлатежа",          Новый ОписаниеТипов("Строка")); // может содержать разделители строки; каждая строка, ограниченная разделителем, должна иметь длину до 140 символов (по ISO), в то время как 383-П ограничивает общую длину строки 210 символами
	
	Выписка.Операции.Индексы.Добавить("Идентификатор");
	
	Возврат Выписка;
	
КонецФункции

Функция ВыпискаПоИдентификатору(Выписки, Идентификатор)
	
	Выписка = Выписки[Идентификатор];
	Если Выписка = Неопределено Тогда
		Выписка = НовыйВыпискаПоБанковскомуСчету(Идентификатор);
		Выписки.Вставить(Идентификатор, Выписка);
	КонецЕсли;
	
	Возврат Выписка;
	
КонецФункции

Функция ТипПоступилоСписано() Экспорт
	Возврат ОбщегоНазначения.ОписаниеТипаСтрока(9); // "Поступило" или "Списано" - CreditDebitIndicator - см. ВариантыПоступилоСписано()
КонецФункции

Функция ВариантыПоступилоСписано()
	
	ВариантыПоступилоСписано = Новый Массив;
	ВариантыПоступилоСписано.Добавить("Поступило");
	ВариантыПоступилоСписано.Добавить("Списано");
	
	Возврат ВариантыПоступилоСписано;
	
КонецФункции

#КонецОбласти

#Область ГруппировкаВыписки

// Данные из формата обмена 1С приближаем к общепринятому формату: 
// - группируем операции по выпискам
// - присваиваем формальные идентификаторы участникам операций
//
// Параметры:
//  ДанныеИзБанка				 - см. ОбменСБанкомВФормате1С.НовыйДанныеИзБанка()
//  УчастникиОпераций			 - см. ИдентификацияУчастниковБанковскихОпераций.НовыйУчастникиОпераций()
//  ИдентификаторыВсехДокументов - см. УчастникиОперацийЗаполнитьПоДаннымИзБанка()
//  Протокол					 - см. НовыйПротоколГруппировкиВыписки()
// 
// Возвращаемое значение:
//  Соответствие - Ключ: идентификатор; Значение: см. НовыйВыпискаПоБанковскомуСчету()
//
Функция ВыпискиПоБанковскимСчетам(ДанныеИзБанка, УчастникиОпераций, ИдентификаторыВсехДокументов, Протокол = Неопределено)
	
	Выписки         = Новый Соответствие; // Ключ - идентификатор; Значение - см. НовыйВыпискаПоБанковскомуСчету()
	СчетаВВыписке   = Новый Соответствие; // Ключ - номер счета (не идентификатор), значение - соответствие, которое содержит идентификаторы выписок с этим номером счета
	СчетаВЗаголовке = Новый Соответствие; // Ключ - номер счета (не идентификатор), значение - Истина
	
	// сначала в заголовке прочитаем только номера счетов, а после того, как обработаем документы - и остальные данные.
	Для Каждого НомерСчета Из ДанныеИзБанка.Условия.РасчСчет Цикл
		СчетаВВыписке.Вставить(НомерСчета, Новый Соответствие);
		СчетаВЗаголовке.Вставить(НомерСчета, Истина);
	КонецЦикла;
	
	Для Каждого Остаток Из ДанныеИзБанка.Остатки Цикл
		СчетаВВыписке.Вставить(Остаток.РасчСчет, Новый Соответствие);
	КонецЦикла;
	
	// ДОКУМЕНТЫ
	
	Стороны = Новый Структура;
	Стороны.Вставить("Поступило", "Получатель");
	Стороны.Вставить("Списано",   "Плательщик");
	
	ПриоритетыАргументовПоступилоСписано = Новый Массив; // По возрастанию приоритета
	ПриоритетыАргументовПоступилоСписано.Добавить("СчетВВыписке");   // Наименее надежный, так как зависит от порядка следования документов в файле
	ПриоритетыАргументовПоступилоСписано.Добавить("ДатаИсполнения"); // Этот признак часто непонятен разработчикам банковских систем и они ошибаются. Поэтому приоритет низкий
	ПриоритетыАргументовПоступилоСписано.Добавить("РедактированиеОрганизацииДоступно");
	ПриоритетыАргументовПоступилоСписано.Добавить("ОрганизацияВИнформационнойБазе");
	ПриоритетыАргументовПоступилоСписано.Добавить("СчетВЗаголовке"); // Это достаточно надежный признак, но заполнен не всегда
	
	// Для сравнения наборов аргументов потребуются веса аргументов, выраженные степенями двойки
	ВесаАргументовПоступилоСписано = Новый Структура;
	Для ИндексАргумента = 0 По ПриоритетыАргументовПоступилоСписано.ВГраница() Цикл
		ИмяАргумента = ПриоритетыАргументовПоступилоСписано[ИндексАргумента];
		ВесАргумента = Pow(2, ИндексАргумента);
		ВесаАргументовПоступилоСписано.Вставить(ИмяАргумента, ВесАргумента);
	КонецЦикла;
	
	КешИдентификаторовОрганизаций = Новый Соответствие; // Ключ - строка, набор идентификаторов; Значение - Структура с ключами Организации (набор ссылок) и РедактированиеДоступно (Булево)
	ДоступныеОрганизации          = УправлениеДоступомБП.ОрганизацииДанныеКоторыхДоступныПользователю(
		"Документ.СписаниеСРасчетногоСчета",
		Истина);

	// Каждый документ соотнесем с одним или несколькими банковскими счетами нашей организации
	Для Каждого Документ Из ДанныеИзБанка.Документы Цикл
		
		ПоступилоСписано          = Новый Структура; // Является ли конкретный документ поступлением на наш счет или списанием с нашего счета
		АргументыПоступилоСписано = Новый Структура; // Аргументы в отношении конкретного документа: считать его поступлением или списанием
		ИдентификаторыДокумента   = ИдентификаторыВсехДокументов.Найти(Документ.Идентификатор, "Документ");
		
		Для Каждого Сторона Из Стороны Цикл
			
			ИмяПоступилоСписано = Сторона.Ключ;
			ИмяСтороны          = Сторона.Значение;
			
			ПоступилоСписано.Вставить(ИмяПоступилоСписано, Ложь);
			АргументыПоступилоСписано.Вставить(ИмяПоступилоСписано, Новый Структура);
			
			Счет = Документ[ИмяСтороны + "Счет"];
			
			Если Не ЗначениеЗаполнено(Счет) Тогда
				// Не можем загрузить документ по неизвестному счету
				Продолжить;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ИдентификаторыДокумента[ИмяСтороны + "Счет"]) Тогда
				// Не можем загрузить документ по неизвестному счету
				Продолжить;
			КонецЕсли;
			
			Если СчетаВЗаголовке[Счет] <> Неопределено Тогда
				АргументыПоступилоСписано[ИмяПоступилоСписано].Вставить("СчетВЗаголовке");
			КонецЕсли;
			
			Если СчетаВВыписке[Счет] <> Неопределено Тогда
				АргументыПоступилоСписано[ИмяПоступилоСписано].Вставить("СчетВВыписке");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Документ["Дата" + ИмяПоступилоСписано]) Тогда
				АргументыПоступилоСписано[ИмяПоступилоСписано].Вставить("ДатаИсполнения");
			КонецЕсли;
			
			ИдентификаторыУчастникаОперации = ИдентификаторыДокумента[ИмяСтороны];
			
			ВсеИдентификаторыСтрокой = СтрСоединить(ИдентификаторыУчастникаОперации, "+");
			
			ОписаниеОрганизации = КешИдентификаторовОрганизаций[ВсеИдентификаторыСтрокой];
			Если ОписаниеОрганизации = Неопределено Тогда
				Отбор = Новый Структура("Тип", Тип("СправочникСсылка.Организации"));
				Организации = ИдентификацияУчастниковБанковскихОпераций.НайтиСсылки(
					ИдентификаторыУчастникаОперации,
					УчастникиОпераций,
					Отбор);
				ОписаниеОрганизации = Новый Структура;
				ОписаниеОрганизации.Вставить("Организации",            Организации);
				ОписаниеОрганизации.Вставить("РедактированиеДоступно", Ложь);
				Если ЗначениеЗаполнено(Организации) Тогда
					Для Каждого КлючИЗначение Из Организации Цикл
						ОписаниеОрганизации.РедактированиеДоступно = (ДоступныеОрганизации.Найти(КлючИЗначение.Ключ) <> Неопределено);
						Если ОписаниеОрганизации.РедактированиеДоступно Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				КешИдентификаторовОрганизаций.Вставить(ВсеИдентификаторыСтрокой, ОписаниеОрганизации);
			КонецЕсли;
				
			Если ЗначениеЗаполнено(ОписаниеОрганизации.Организации) Тогда
				АргументыПоступилоСписано[ИмяПоступилоСписано].Вставить("ОрганизацияВИнформационнойБазе");
				Если ОписаниеОрганизации.РедактированиеДоступно Тогда
					АргументыПоступилоСписано[ИмяПоступилоСписано].Вставить("РедактированиеОрганизацииДоступно");
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(АргументыПоступилоСписано.Поступило) И Не ЗначениеЗаполнено(АргументыПоступилоСписано.Списано) Тогда
			ПоступилоСписано.Поступило = Истина;
		ИначеЕсли ЗначениеЗаполнено(АргументыПоступилоСписано.Списано) И Не ЗначениеЗаполнено(АргументыПоступилоСписано.Поступило) Тогда
			ПоступилоСписано.Списано = Истина;
		ИначеЕсли ЗначениеЗаполнено(АргументыПоступилоСписано.Списано) И ЗначениеЗаполнено(АргументыПоступилоСписано.Поступило) Тогда
			
			ВесаАргументов  = Новый Структура;
			МаксимальныйВес = 0;
			Для Каждого Сторона Из Стороны Цикл
				Вес = 0;
				Для Каждого ОписаниеАргумента Из АргументыПоступилоСписано[Сторона.Ключ] Цикл
					Вес = Вес + ВесаАргументовПоступилоСписано[ОписаниеАргумента.Ключ];
				КонецЦикла;
				ВесаАргументов.Вставить(Сторона.Ключ, Вес);
				МаксимальныйВес = Макс(МаксимальныйВес, Вес);
			КонецЦикла;
			
			Для Каждого Сторона Из Стороны Цикл
				ПоступилоСписано[Сторона.Ключ] = (ВесаАргументов[Сторона.Ключ] >= МаксимальныйВес);
			КонецЦикла;
			
		КонецЕсли;
		
		Если Не ПоступилоСписано.Поступило И Не ПоступилоСписано.Списано Тогда
			// Такой документ не может быть включен в выписку
			Если Не АргументыПоступилоСписано.Поступило.Свойство("ДатаИсполнения")
				И Не АргументыПоступилоСписано.Списано.Свойство("ДатаИсполнения") Тогда
				ДополнитьПротоколГруппировкиВыписки(
					Протокол,
					ДанныеИзБанка,
					Документ.Идентификатор,
					НСтр("ru = 'Дата исполнения документа не указана'"));
			Иначе
				ДополнитьПротоколГруппировкиВыписки(
					Протокол,
					ДанныеИзБанка,
					Документ.Идентификатор,
					НСтр("ru = 'Документ не может быть включен в выписку ни по одному счету'"));
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Для Каждого КлючИЗначение Из Стороны Цикл
			
			ИмяПоступилоСписано = КлючИЗначение.Ключ;
			ИмяСтороны          = КлючИЗначение.Значение;
			
			Если Не ПоступилоСписано[ИмяПоступилоСписано] Тогда
				Продолжить;
			КонецЕсли;
			
			ДатаИсполнения = Документ["Дата" + ИмяПоступилоСписано];
			Если Не ЗначениеЗаполнено(ДатаИсполнения) Тогда
				// Может быть не заполнена в файле
				ДатаИсполнения = Документ.Дата;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ДатаИсполнения) Тогда
				ДополнитьПротоколГруппировкиВыписки(
					Протокол,
					ДанныеИзБанка,
					Документ.Идентификатор,
					НСтр("ru = 'Дата исполнения документа не указана'"));
				Продолжить;
			КонецЕсли;
			
			НомерСчета = Документ[ИмяСтороны + "Счет"];
			Если ПустаяСтрока(НомерСчета) Тогда
				ДополнитьПротоколГруппировкиВыписки(
					Протокол,
					ДанныеИзБанка,
					Документ.Идентификатор,
					НСтр("ru = 'Не указан номер счета, по которому проведена операция'"));
				Продолжить;
			КонецЕсли;
			
			ИдентификаторВыписки = ИдентификаторыДокумента[ИмяСтороны + "Счет"];
			Выписка = ВыпискаПоИдентификатору(Выписки, ИдентификаторВыписки);
			
			// Дополним перечень счетов в выписке и их идентификаторов.
			ИдентификаторыСчетаВВыписке = СчетаВВыписке[НомерСчета];
			Если ИдентификаторыСчетаВВыписке = Неопределено Тогда
				ИдентификаторыСчетаВВыписке = Новый Соответствие;
				СчетаВВыписке.Вставить(НомерСчета, ИдентификаторыСчетаВВыписке);
			КонецЕсли;
			ИдентификаторыСчетаВВыписке.Вставить(ИдентификаторВыписки);
			
			// Дополним выписку операцией
			Операция = Выписка.Операции.Добавить();
			ЗаполнитьЗначенияСвойств(Операция, Документ, "Идентификатор,Сумма,НазначениеПлатежа,ПлательщикРеквизиты,ПолучательРеквизиты");
			Операция.ПорядковыйНомерВФайле = ДанныеИзБанка.Документы.Индекс(Документ);
			Операция.ДатаДокумента  = Документ.Дата;
			Операция.НомерДокумента = Документ.Номер;
			Если СтрДлина(Документ.Номер) > СтрДлина(Операция.НомерДокумента) Тогда
				// В информационную базу нельзя записать такой длинный номер.
				// Так как наиболее точные разряды номера обычно справа, то номер обрежем слева.
				Операция.НомерДокумента = Прав(Документ.Номер, СтрДлина(Операция.НомерДокумента));
			КонецЕсли;
			
			Операция.ПоступилоСписано = ИмяПоступилоСписано;
			Операция.ДатаИсполнения   = ДатаИсполнения;
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Операция.ПлательщикИдентификаторы, ИдентификаторыДокумента.Плательщик);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Операция.ПолучательИдентификаторы, ИдентификаторыДокумента.Получатель);
			
			Операция.РеквизитыПлатежаВБюджет = Документ.РеквизитыПлатежаВБюджет;
			Если Операция.РеквизитыПлатежаВБюджет.Свойство("Налогоплательщик") 
				И ИдентификаторыДокумента.ТретьиЛица.Свойство("Налогоплательщик") Тогда
				Операция.РеквизитыПлатежаВБюджет.Налогоплательщик.Вставить("Идентификаторы", ИдентификаторыДокумента.ТретьиЛица.Налогоплательщик);
			КонецЕсли;
			Операция.ШифрОперации            = Документ.ВидОплаты;
			
			ИмяПротивоположнойСтороны = ?(ИмяПоступилоСписано = "Поступило", Стороны.Списано, Стороны.Поступило);
			НомерСчетаПротивоположнойСтороны = Документ[ИмяПротивоположнойСтороны + "Счет"];
			Операция.НомерСчетаКонтрагента = НомерСчетаПротивоположнойСтороны;
			
			// Балансовый счет
			Для Каждого ИдентификаторПротивоположнойСтороны Из Операция[ИмяПротивоположнойСтороны + "Идентификаторы"] Цикл
				ОписаниеИдентификатораПротивоположнойСтороны = ИдентификацияУчастниковБанковскихОпераций.ОписаниеИдентификатора(
					ИдентификаторПротивоположнойСтороны,
					УчастникиОпераций);
				Если ОписаниеИдентификатораПротивоположнойСтороны <> Неопределено 
					И ОписаниеИдентификатораПротивоположнойСтороны.Схема = "BBAN"
					И ОписаниеИдентификатораПротивоположнойСтороны.Состав.Свойство("БалансовыйСчет")
					И ЗначениеЗаполнено(ОписаниеИдентификатораПротивоположнойСтороны.Состав.БалансовыйСчет) Тогда
					Операция.БалансовыйСчет = ОписаниеИдентификатораПротивоположнойСтороны.Состав.БалансовыйСчет;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			// Расширим период выписки
			РасширитьПериод(Выписка.НачалоПериода, Выписка.КонецПериода, Операция.ДатаИсполнения);
			
		КонецЦикла;
		
	КонецЦикла;
	
	// В файле могут быть указаны номера счета как с БИК, так и без БИК.
	// В результате будет определено несколько выписок.
	// Объединим их.
	Для Каждого СчетВВыписке Из СчетаВВыписке Цикл
		
		Если СчетВВыписке.Значение.Количество() <> 2 Тогда
			// Объединить можем только один точный с одним неточным.
			Продолжить;
		КонецЕсли;
		
		ЧтоЗаменяем   = Неопределено;
		НаЧтоЗаменяем = Неопределено;
		Для Каждого ИдентификаторВыписки Из СчетВВыписке.Значение Цикл
			
			ОписаниеИдентификатора = ИдентификацияУчастниковБанковскихОпераций.ОписаниеИдентификатора(
				ИдентификаторВыписки.Ключ,
				УчастникиОпераций);
				
			Если ОписаниеИдентификатора = Неопределено Тогда
				Продолжить;
			КонецЕсли;
				
			Если ОписаниеИдентификатора.Точный Тогда
				НаЧтоЗаменяем = ОписаниеИдентификатора;
			Иначе
				ЧтоЗаменяем   = ОписаниеИдентификатора;
			КонецЕсли;
					
		КонецЦикла;
		
		Если ЧтоЗаменяем = Неопределено Или НаЧтоЗаменяем = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ВыпискаОбъединенная = Выписки[НаЧтоЗаменяем.Идентификатор];
		Если ВыпискаОбъединенная = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ВыпискаКУдалению = Выписки[ЧтоЗаменяем.Идентификатор];
		Если ВыпискаКУдалению = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		БИК = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НаЧтоЗаменяем.Состав, "БИК", ""); // Этим БИКом попробуем дополнить неточные идентификаторы
		
		ТребуетсяУпорядочить = Ложь;
		
		КоличествоОпераций = ВыпискаКУдалению.Операции.Количество();
		Для НомерСКонца = 1 По КоличествоОпераций Цикл
			
			ИндексОперации = КоличествоОпераций - НомерСКонца;
			Операция = ВыпискаКУдалению.Операции[ИндексОперации];
			
			Если ВыпискаОбъединенная.Операции.Найти(Операция.Идентификатор, "Идентификатор") <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			// Заменим на более точные идентификаторы счета, по которому выписка
			Для Каждого Сторона Из Стороны Цикл
				
				ИдентификаторыСтороны = Операция[Сторона.Значение + "Идентификаторы"];
				ИндексИдентификатора = ИдентификаторыСтороны.Найти(ЧтоЗаменяем.Идентификатор);
				
				Если ИндексИдентификатора = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ИдентификаторыСтороны[ИндексИдентификатора] = НаЧтоЗаменяем.Идентификатор;
				
			КонецЦикла;
			
			РасширитьПериод(ВыпискаОбъединенная.НачалоПериода, ВыпискаОбъединенная.КонецПериода, Операция.ДатаИсполнения);
			ЗаполнитьЗначенияСвойств(ВыпискаОбъединенная.Операции.Добавить(), Операция);
			ВыпискаКУдалению.Операции.Удалить(Операция);
			
			ТребуетсяУпорядочить = Истина; // Добавлением в конец нарушили порядок следования операций в файле
			
		КонецЦикла;
		
		Если ВыпискаКУдалению.Операции.Количество() = 0 Тогда
			Выписки.Удалить(ЧтоЗаменяем.Идентификатор);
			СчетВВыписке.Значение.Удалить(ЧтоЗаменяем.Идентификатор);
		КонецЕсли;
		
		Если ТребуетсяУпорядочить Тогда
			ВыпискаОбъединенная.Операции.Сортировать("ПорядковыйНомерВФайле");
		КонецЕсли;
		
	КонецЦикла;
	
	// Если операция внутри банка, то может быть не указан БИК в реквизитах корреспондирующего счета.
	// В таком случае попробуем дополнить идентификатор счета БИКом владельца счета.
	Для Каждого Выписка Из Выписки Цикл
		ОписаниеИдентификатораСчетаВыписки = ИдентификацияУчастниковБанковскихОпераций.ОписаниеИдентификатора(Выписка.Ключ, УчастникиОпераций);
		Если Не ОписаниеИдентификатораСчетаВыписки.Точный Тогда
			Продолжить;
		КонецЕсли;
		БИК = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ОписаниеИдентификатораСчетаВыписки.Состав, "БИК", ""); // Этим БИКом попробуем дополнить неточные идентификаторы
		
		Для Каждого Операция Из Выписка.Значение.Операции Цикл
			
			Для Каждого Сторона Из Стороны Цикл
				
				ИдентификаторыСтороны = Операция[Сторона.Значение + "Идентификаторы"];
				
				Для Каждого Идентификатор Из ИдентификаторыСтороны Цикл
					
					ТочныйИдентификатор = ИдентификацияУчастниковБанковскихОпераций.ДополнитьИдентификаторПоНомеруБанковскогоСчета(
						Идентификатор,
						БИК,
						УчастникиОпераций);
					Если ТочныйИдентификатор <> Неопределено 
						И ИдентификаторыСтороны.Найти(ТочныйИдентификатор) = Неопределено Тогда
						ИдентификаторыСтороны.Добавить(ТочныйИдентификатор);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	// ОСТАТКИ
	Для Каждого Остаток Из ДанныеИзБанка.Остатки Цикл
		
		НомерСчета = Остаток.РасчСчет;
		
		Если Не ЗначениеЗаполнено(НомерСчета) Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентификаторыСчета = СчетаВВыписке[НомерСчета];
		Если ИдентификаторыСчета = Неопределено Тогда
			
			ИдентификаторВыписки = ИдентификацияУчастниковБанковскихОпераций.ИдентификаторПоНомеруБанковскогоСчета(
				УчастникиОпераций,
				НомерСчета,
				Неопределено);
			
			ИдентификаторыСчета = Новый Соответствие;
			ИдентификаторыСчета.Вставить(ИдентификаторВыписки);
			СчетаВВыписке.Вставить(НомерСчета, ИдентификаторыСчета);
			
		КонецЕсли;
		
		Для Каждого ИдентификаторВыпискиКлючИЗначение Из ИдентификаторыСчета Цикл
		
			Выписка = ВыпискаПоИдентификатору(Выписки, ИдентификаторВыпискиКлючИЗначение.Ключ);
			
			Если ЗначениеЗаполнено(Остаток.ДатаНачала) Тогда
				Сальдо = Выписка.Сальдо.Добавить();
				Сальдо.Дата  = Остаток.ДатаНачала;
				Сальдо.Сумма = Остаток.НачальныйОстаток;
			КонецЕсли;
			
			Сальдо = Выписка.Сальдо.Добавить();
			// Дата конца может быть не заполнена в файле.
			// В этом случае позже заменим пустую дату, на дату окончания выписки.
			Если ЗначениеЗаполнено(Остаток.ДатаКонца) Тогда
				Сальдо.Дата = КонецДня(Остаток.ДатаКонца) + 1;
			КонецЕсли;
			Сальдо.Сумма = Остаток.КонечныйОстаток;
		
			Выписка.ВсегоПоступило = Выписка.ВсегоПоступило + Остаток.ВсегоПоступило;
			Выписка.ВсегоСписано   = Выписка.ВсегоСписано   + Остаток.ВсегоСписано;
			
			РасширитьПериод(Выписка.НачалоПериода, Выписка.КонецПериода, Остаток.ДатаНачала);
			РасширитьПериод(Выписка.НачалоПериода, Выписка.КонецПериода, Остаток.ДатаКонца);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого Выписка Из Выписки Цикл
		СтруктураВыписки = Выписка.Значение;
		Если НЕ СтруктураВыписки.Свойство("Сальдо") Тогда
			Продолжить;
		КонецЕсли;
		// Заменим пустую дату, на дату окончания выписки.
		Для Каждого СтрокаСальдо Из СтруктураВыписки.Сальдо.НайтиСтроки(Новый Структура("Дата", '00010101')) Цикл
			СтрокаСальдо.Дата = СтруктураВыписки.КонецПериода;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Выписки;
	
КонецФункции

// Назначение платежа может содержать структурированную информацию.
// Перенесем ее в предназначенные для этого поля.
//
Процедура РазобратьНазначениеПлатежа(ДанныеИзБанка)
	
	// При исполнении обязанности третьих лиц по уплате налогов действуют особые правила, установленные приложениями к Приказу 107н:
	// - в поле, которое обычно используется для идентификации плательщика указывается налоговый идентификатор (ИНН, КПП) третьего лица
	//   (прил. 1 п. 4)
	// - в назначении платежа указываются идентификаторы плательщика (лица, со счета которого списываются деньги) - ИНН, КПП, наименование
	//   (прил. 2 п. 13 пп. 5)
	//
	// Если идентифицируем документ, как содержащий информацию о применении этих особых правил,
	// то исправим его реквизиты в соответствии с этими правилами.
	
	ИННВладельцевСчетов = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Организации.ИНН КАК ИНН
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ИНН <> """"";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ИННВладельцевСчетов.Вставить(СокрЛП(Выборка.ИНН), Истина);
	КонецЦикла;
	
	Для Каждого Документ Из ДанныеИзБанка.Документы Цикл
		
		КБК = КБКНалога(Документ.РеквизитыПлатежаВБюджет);
		Если ПустаяСтрока(КБК) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеПлатежаТретьихЛиц = ПлатежиВБюджетКлиентСервер.РазобратьНазначениеПлатежаУплатыНалоговТретьихЛиц(Документ.НазначениеПлатежа);
		Если ДанныеПлатежаТретьихЛиц = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИННВладельцевСчетов[ДанныеПлатежаТретьихЛиц.ИНН] = Неопределено Тогда
			// Нет уверенности, что это валидные данные
			Продолжить;
		КонецЕсли;
		
		Налогоплательщик = Новый Структура;
		Налогоплательщик.Вставить("Наименование", ДанныеПлатежаТретьихЛиц.НаименованиеТретьегоЛица);
		Налогоплательщик.Вставить("ИНН",          Документ.ПлательщикИНН);
		Если Документ.РеквизитыПлатежаВБюджет.Свойство("ПлательщикКПП") Тогда
			Налогоплательщик.Вставить("КПП", Документ.РеквизитыПлатежаВБюджет.ПлательщикКПП);
		КонецЕсли;
		
		Документ.РеквизитыПлатежаВБюджет.Вставить("Налогоплательщик", Налогоплательщик);
		
		Документ.ПлательщикИНН = ДанныеПлатежаТретьихЛиц.ИНН;
		Если ДанныеПлатежаТретьихЛиц.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо
			И Не ПустаяСтрока(ДанныеПлатежаТретьихЛиц.КПП) Тогда
			Документ.ПлательщикРеквизиты.Вставить("КПП", ДанныеПлатежаТретьихЛиц.КПП);
		Иначе
			Документ.ПлательщикРеквизиты.Удалить("КПП");
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

Процедура РасширитьПериод(НачалоПериода, КонецПериода, Дата)
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Возврат;
	КонецЕсли;
	
	НачалоДня = НачалоДня(Дата);
	
	Если Не ЗначениеЗаполнено(НачалоПериода) Тогда
		НачалоПериода = НачалоДня;
	Иначе
		НачалоПериода = Мин(НачалоПериода, НачалоДня);
	КонецЕсли;
	
	КонецДня  = КонецДня(Дата);
	
	Если Не ЗначениеЗаполнено(КонецПериода) Тогда
		КонецПериода = КонецДня;
	Иначе
		КонецПериода = Макс(КонецПериода, КонецДня);
	КонецЕсли;
	
КонецПроцедуры

// "Плательщик" или "Получатель"
Функция СторонаКонтрагента(ПоступилоСписано)
	
	Если ПоступилоСписано = "Поступило" Тогда
		Возврат "Плательщик";
	Иначе
		Возврат "Получатель";
	КонецЕсли;
	
КонецФункции

Функция НовыйПротоколГруппировкиВыписки()
	
	Протокол = Новый ТаблицаЗначений;
	Протокол.Колонки.Добавить("Идентификатор",   ТипИдентификатор());
	Протокол.Колонки.Добавить("КраткоеОписание", Новый ОписаниеТипов("Строка"));
	Протокол.Колонки.Добавить("ПолноеОписание",  Новый ОписаниеТипов("Строка"));
	Возврат Протокол;
	
КонецФункции

Процедура ДополнитьПротоколГруппировкиВыписки(Протокол, ДанныеИзБанка, ИдентификаторДокумента, ОписаниеПроблемы)
	
	Документ = ДанныеИзБанка.Документы.Найти(ИдентификаторДокумента, "Идентификатор");
	Если Документ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыДокумента = Новый Массив;
	Если ЗначениеЗаполнено(Документ.Номер) Тогда
		РеквизитыДокумента.Добавить(СтрШаблон(НСтр("ru = 'номер %1'"), Документ.Номер));
	КонецЕсли;
	Если ЗначениеЗаполнено(Документ.Дата) Тогда
		РеквизитыДокумента.Добавить(СтрШаблон(НСтр("ru = 'от %1'"), Формат(Документ.Дата, "ДЛФ=D")));
	КонецЕсли;
	Если ЗначениеЗаполнено(Документ.Сумма) Тогда
		РеквизитыДокумента.Добавить(СтрШаблон(НСтр("ru = 'на сумму %1'"), Документ.Сумма));
	КонецЕсли;
	Если Не ЗначениеЗаполнено(РеквизитыДокумента) Тогда
		РеквизитыДокумента.Добавить(СтрШаблон(НСтр("ru = 'порядковый номер %1'"), Документ.Идентификатор));
	КонецЕсли;
	РеквизитыДокумента = СтрСоединить(РеквизитыДокумента, " ");
	
	ПолноеОписание = СтрШаблон(НСтр("ru = 'Пропущен документ %1. %2'"), РеквизитыДокумента, ОписаниеПроблемы);
	
	Запись = Протокол.Добавить();
	Запись.Идентификатор   = ИдентификаторДокумента;
	Запись.КраткоеОписание = ОписаниеПроблемы;
	Запись.ПолноеОписание  = ПолноеОписание;
	
КонецПроцедуры

#КонецОбласти

#Область Настройки

Функция НовыйНастройкиОбменСБанком() Экспорт
	
	Настройки = Новый Структура;
	Настройки.Вставить("СозданиеДокументов",            НовыйНастройкиСозданияДокументов());
	Настройки.Вставить("ЗаполнениеНовыхЭлементов",      Новый Соответствие); // Ключ - Тип ссылки; Значение - структура, содержащая значения заполнения
	Настройки.Вставить("Кодировка",                     Неопределено);       // Кодировка файла
	
	Возврат Настройки;
	
КонецФункции

// Заполняет Настройки переданными данными, обеспечивая целостность настроек.
//
// Параметры:
//  Настройки		 - см. НовыйНастройкиОбменСБанком()
//  ДанныеЗаполнения - см. НовыйНастройкиОбменСБанком(). Допускается передавать и другие значения (коллекции).
// 
// Возвращаемое значение:
//  Булево - Истина, если что-то заполнили; Ложь, если ДанныеЗаполнения пустые или не пригодны для заполнения.
//
Функция ЗаполнитьНастройкиОбменСБанком(Настройки, ДанныеЗаполнения) Экспорт
	
	Если ДанныеЗаполнения = Неопределено Или ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЧтоТоЗаполнили = Ложь;
	
	Если ДанныеЗаполнения.Свойство("СозданиеДокументов")
		И ТипЗнч(ДанныеЗаполнения.СозданиеДокументов) = Тип("Соответствие") Тогда
		
		Для Каждого Настройка Из Настройки.СозданиеДокументов Цикл
			ЗначениеСохраненнойНастройки = ДанныеЗаполнения.СозданиеДокументов[Настройка.Ключ];
			Если ТипЗнч(ЗначениеСохраненнойНастройки) <> Тип("Структура")
				Или Не ЗначениеЗаполнено(ЗначениеСохраненнойНастройки) Тогда
				Продолжить;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(Настройка.Значение, ЗначениеСохраненнойНастройки);
			ЧтоТоЗаполнили = Истина;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("ЗаполнениеНовыхЭлементов")
		И ТипЗнч(ДанныеЗаполнения.ЗаполнениеНовыхЭлементов) = Тип("Соответствие") Тогда
		
		Для Каждого СохраненнаяНастройка Из ДанныеЗаполнения.ЗаполнениеНовыхЭлементов Цикл
			Если ТипЗнч(СохраненнаяНастройка.Значение) <> Тип("Структура") 
				Или Не ЗначениеЗаполнено(СохраненнаяНастройка.Значение) Тогда
				Продолжить;
			КонецЕсли;
			Настройки.ЗаполнениеНовыхЭлементов.Вставить(СохраненнаяНастройка.Ключ, СохраненнаяНастройка.Значение);
		КонецЦикла;
		
		ЧтоТоЗаполнили = Истина;
		
	КонецЕсли;
	
	Возврат ЧтоТоЗаполнили;
	
КонецФункции

Функция НовыйНастройкиСозданияДокументов()
	
	Настройки = Новый Соответствие;
	Настройки.Вставить(Тип("ДокументСсылка.СписаниеСРасчетногоСчета"),   НовыйНастройкаСозданияДокументов());
	Настройки.Вставить(Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет"), НовыйНастройкаСозданияДокументов());
	
	Возврат Настройки;
	
КонецФункции

Функция НовыйНастройкаСозданияДокументов()
	
	Настройка = Новый Структура;
	Настройка.Вставить("ПроводитьДокумент", Истина);
	Возврат Настройка;
	
КонецФункции

Функция ЗначениеНастройкиСозданияДокументов(Настройки, Имя, ТипДокумента)
	
	Настройка = Настройки.СозданиеДокументов[ТипДокумента];
	Если Настройка = Неопределено Тогда
		Настройка = НовыйНастройкаСозданияДокументов();
	КонецЕсли;
	
	ЗначениеНастройки = Настройка[Имя];
	
	Возврат ЗначениеНастройки;
	
КонецФункции

#КонецОбласти

#Область ИдентификацияУчастниковОперации

Функция ЗаполнитьИдентификаторыУчастниковОперацийПоДаннымИзБанка(УчастникиОпераций, ДанныеИзБанка)
	
	// Содержит идентификаторы участников операций, информация о которых есть в секции Документы данных из банка.
	ИдентификаторыУчастников = Новый ТаблицаЗначений;
	ИдентификаторыУчастников.Колонки.Добавить("Документ",       ТипИдентификатор()); // Идентификатор документа
	ИдентификаторыУчастников.Колонки.Добавить("Плательщик",     Новый ОписаниеТипов("Массив")); // Массив строк - идентификаторов
	ИдентификаторыУчастников.Колонки.Добавить("Получатель",     Новый ОписаниеТипов("Массив")); // Массив строк - идентификаторов
	ИдентификаторыУчастников.Колонки.Добавить("ПлательщикСчет", Новый ОписаниеТипов("Строка")); // Идентификатор
	ИдентификаторыУчастников.Колонки.Добавить("ПолучательСчет", Новый ОписаниеТипов("Строка")); // Идентификатор
	ИдентификаторыУчастников.Колонки.Добавить("ТретьиЛица",     Новый ОписаниеТипов("Структура")); // Ключ - тип третьего лица; Значение - массив идентификаторов
	ИдентификаторыУчастников.Индексы.Добавить("Документ");
	
	Стороны = Новый Массив;
	Стороны.Добавить("Плательщик");// Порядок важен для УплатаНалогаТретьегоЛица
	Стороны.Добавить("Получатель");
	
	Для Каждого Документ Из ДанныеИзБанка.Документы Цикл
		
		ИдентификаторыДокумента = ИдентификаторыУчастников.Добавить();
		ИдентификаторыДокумента.Документ = Документ.Идентификатор;
		
		Для Каждого Сторона Из Стороны Цикл
			
			Счет            = Документ[Сторона + "Счет"];
			ИНН             = Документ[Сторона + "ИНН"];
			ДругиеРеквизиты = Документ[Сторона + "Реквизиты"];
			
			ИдентификаторыУчастника = ИдентификаторыДокумента[Сторона];
			
			// Разберем наименование
			Наименование = "";
			Если ДругиеРеквизиты.Свойство("Наименование") Тогда
				Наименование = ДругиеРеквизиты.Наименование;
			КонецЕсли;
			
			ИдентификаторыФизическогоЛица = ИдентификаторыФизическогоЛицаИзНаименования(Наименование, ИНН);
			Если ИдентификаторыФизическогоЛица.ЭтоФизическоеЛицо Тогда
				Идентификатор = ИдентификацияУчастниковБанковскихОпераций.ИдентификаторПоИмениФизическогоЛица(
					УчастникиОпераций,
					ИдентификаторыФизическогоЛица.Наименование);
				Если Идентификатор <> Неопределено Тогда
					ИдентификаторыУчастника.Добавить(Идентификатор);
				КонецЕсли;
			КонецЕсли;
			
			// TXID (Налоговый идентификатор)
			КПП = ?(ДругиеРеквизиты.Свойство("КПП"), ДругиеРеквизиты.КПП, "");
			Идентификатор = ИдентификацияУчастниковБанковскихОпераций.ИдентификаторПоИНН(УчастникиОпераций, ИНН, КПП);
			
			Если Идентификатор <> Неопределено Тогда
				ИдентификаторыУчастника.Добавить(Идентификатор);
			КонецЕсли;
			
			// BBAN (Basic Bank Account Number) или IBAN (International Bank Account Number)
			Идентификатор = ИдентификацияУчастниковБанковскихОпераций.ИдентификаторПоМеждународномуНомеруБанковскогоСчета(
				УчастникиОпераций,
				Счет);
			БалансовыйСчет = "";
			Если Идентификатор = Неопределено Тогда
				// Попробуем BBAN
				БИК = ?(ДругиеРеквизиты.Свойство("БИК"), ДругиеРеквизиты.БИК, "");
				// Расчеты могут вестись через корреспондентский счет, открытый в другой кредитной организации
				ИспользуетсяБанкДляРасчетов = (ДругиеРеквизиты.Свойство("РасчСчет") 
					И Не ПустаяСтрока(ДругиеРеквизиты.РасчСчет)
					И ДругиеРеквизиты.РасчСчет <> Счет);
				Идентификатор = ИдентификацияУчастниковБанковскихОпераций.ИдентификаторПоНомеруБанковскогоСчета(
					УчастникиОпераций,
					Счет,
					БИК,
					ИспользуетсяБанкДляРасчетов);
				Если ЗначениеЗаполнено(Идентификатор) Тогда
					ОписаниеИдентификатораBBAN = ИдентификацияУчастниковБанковскихОпераций.ОписаниеИдентификатора(Идентификатор, УчастникиОпераций);
					Если ОписаниеИдентификатораBBAN <> Неопределено Тогда
						ОписаниеИдентификатораBBAN.Состав.Свойство("БалансовыйСчет", БалансовыйСчет);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если Идентификатор <> Неопределено Тогда
				ИдентификаторыУчастника.Добавить(Идентификатор);
				ИдентификаторыДокумента[Сторона + "Счет"] = Идентификатор;
			КонецЕсли;
			
			Если Не ИдентификаторыФизическогоЛица.ЭтоФизическоеЛицо // Это может быть и физическое лицо, но из наименования это не удалось определить
				И ЗначениеЗаполнено(БалансовыйСчет) Тогда
				
				Если БанковскиеПравила.ЭтоСчетВнутрибанковскихОпераций(БалансовыйСчет)
					Или БанковскиеПравила.ЭтоСчетРасчетовСБанком(БалансовыйСчет) Тогда
					
					// Банк
					
					Если Не ЗначениеЗаполнено(ИНН) Тогда
					
						// BKNM (Наименование банка)
						Банк = ?(ДругиеРеквизиты.Свойство("Банк"), ДругиеРеквизиты.Банк, "");
						Идентификатор = ИдентификацияУчастниковБанковскихОпераций.ИдентификаторПоНаименованиюБанка(УчастникиОпераций, Банк, Наименование);
						
						Если Идентификатор <> Неопределено Тогда
							ИдентификаторыУчастника.Добавить(Идентификатор);
						КонецЕсли;
						
					КонецЕсли;
					
				ИначеЕсли БанковскиеПравила.ЭтоСчетДепозитовФизическихЛиц(БалансовыйСчет)
					Или БанковскиеПравила.ЭтоСчетПереводовФизическимЛицам(БалансовыйСчет) Тогда
					
					// Физическое лицо
					
					Идентификатор = ИдентификацияУчастниковБанковскихОпераций.ИдентификаторПоИмениФизическогоЛица(
						УчастникиОпераций,
						Наименование);
					Если Идентификатор <> Неопределено Тогда
						ИдентификаторыУчастника.Добавить(Идентификатор);
					КонецЕсли;
				
				КонецЕсли;
				
			КонецЕсли;
			
			// TXZN (Единица административно-территориального деления, к которой относится налоговый платеж) Национальная практика: ОКАТО (ОКТМО)
			Если Сторона = "Получатель"
				И Документ.РеквизитыПлатежаВБюджет.Свойство("ОКАТО")
				И ПлатежиВБюджетКлиентСервер.ЭтоКодОКТМО(Документ.РеквизитыПлатежаВБюджет.ОКАТО) Тогда
				
				Идентификатор = ИдентификацияУчастниковБанковскихОпераций.ИдентификаторПоОКТМО(УчастникиОпераций, Документ.РеквизитыПлатежаВБюджет.ОКАТО);
				
				Если Идентификатор <> Неопределено Тогда
					ИдентификаторыУчастника.Добавить(Идентификатор);
				КонецЕсли;
				
			КонецЕсли;
			
			// Здесь же может быть описано получение идентификаторов по другим данным.
			// Например, получателя можно идентифицировать по номеру карты, указанному в назначении платежа,
			// номеру счета физ. лица, указанному в наименовании или назначении платежа и другим признакам.
			
		КонецЦикла;
		
		// Третьи стороны
		// TXID (Налоговый идентификатор)
		Если Документ.РеквизитыПлатежаВБюджет.Свойство("Налогоплательщик") Тогда
			
			Налогоплательщик = Документ.РеквизитыПлатежаВБюджет.Налогоплательщик;
			КПП = ?(Налогоплательщик.Свойство("КПП"), Налогоплательщик.КПП, "");
			Идентификатор = ИдентификацияУчастниковБанковскихОпераций.ИдентификаторПоИНН(УчастникиОпераций, Налогоплательщик.ИНН, КПП);
			
			ИдентификаторыДокумента.ТретьиЛица.Вставить("Налогоплательщик", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Идентификатор));
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Кроме секции Документы в ДанныеИзБанка идентификаторы содержатся в заголовочной части.
	// Их также следует поместить в УчастникиОпераций, чтобы найти для них соответствия в информационной базе.
	// УСЛОВИЯ
	Для Каждого НомерБанковскогоСчета Из ДанныеИзБанка.Условия.РасчСчет Цикл
		ИдентификацияУчастниковБанковскихОпераций.ИдентификаторПоНомеруБанковскогоСчета(
			УчастникиОпераций,
			НомерБанковскогоСчета,
			Неопределено);
	КонецЦикла;
	
	// ОСТАТКИ
	Для Каждого ДанныеОбОстатках Из ДанныеИзБанка.Остатки Цикл
		ИдентификацияУчастниковБанковскихОпераций.ИдентификаторПоНомеруБанковскогоСчета(
			УчастникиОпераций,
			ДанныеОбОстатках.РасчСчет,
			Неопределено);
	КонецЦикла;
	
	Возврат ИдентификаторыУчастников;
	
КонецФункции

Функция ИдентификаторыФизическогоЛицаИзНаименования(Наименование, ИНН)
	
	Результат = Новый Структура;
	Результат.Вставить("ЭтоФизическоеЛицо",           Ложь);
	Результат.Вставить("Наименование",                Наименование);
	Результат.Вставить("Адрес",                       "");
	Результат.Вставить("ИННИдентифицируетПосредника", Ложь);
	
	//Приложение 1 к Положению Банка России от 19 июня 2012 года N 383-П
	//"О правилах осуществления перевода денежных средств"

	// При переводе денежных средств по банковскому счету ... 
	// в реквизите "Плательщик" после Ф.И.О. физического лица ...
	// - адрес места жительства (регистрации) или места пребывания.

	// Для выделения информации об адресе места нахождения,
	// адресе места жительства (регистрации) или места пребывания до и после адреса используется символ "//".

	// При переводе денежных средств без открытия банковского счета указываются полное или сокращенное наименование кредитной организации, 
	// филиала кредитной организации - отправителя распоряжения и информация о плательщике - физическом лице
	// Для выделения информации о плательщике - физическом лице используется символ "//".

	// После указания установленной настоящей графой соответствующей информации в реквизите "Плательщик" 
	// может указываться в соответствии с законодательством или договором, 
	// в том числе договором с получателем средств, договором доверительного управления, 
	// дополнительная информация, обеспечивающая возможность установить сведения о плательщике, 
	// при этом для их выделения используется символ "//"
	// <конец цитаты из нормативного документа>
	
	// На практике "//" используются для указания информации о физическом лице.
	// Хотя, в теории "//" могут использоваться и для возможности установить сведения о других плательщиках,
	// но о такой практике неизвестно.
	// Поддерживаем варианты:
	// - ИНН нет + "//" - отделен адрес от наименования (имени)
	// - ИНН 12 символов + "//" - отделен адрес от наименования (имени)
	// - ИНН 10 символов + "//" - отделено имя от названия банка
	
	Разделитель = "//";
	
	Если СтрНайти(Наименование, Разделитель) = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЭлементыНаименования = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Наименование, Разделитель, Ложь, Истина);// Здесь не следует использовать СтрРазделить, потому что она не умеет работать с разделителями, состоящими из нескольких символов
	Если Не ЗначениеЗаполнено(ЭлементыНаименования) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ИНН) 
		И ИдентификационныеНомераНалогоплательщиков.ЭтоИННЮридическогоЛица(ИНН) 
		И СтрНайти(ЭлементыНаименования[0], ",") > 0 Тогда
		// Это не похоже на имя физического лица. Возможно, это как раз тот случай, когда в наименовании юридического лица указали адрес
		Результат.Наименование = ЭлементыНаименования[0];
		Если ЭлементыНаименования.Количество() > 1 Тогда
			Результат.Адрес = ЭлементыНаименования[1];
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;
	
	Результат.ЭтоФизическоеЛицо = Истина;
	
	Если Не ПустаяСтрока(ИНН) И Не ИдентификационныеНомераНалогоплательщиков.ЭтоИННФизическогоЛица(ИНН) Тогда
		Результат.ИННИдентифицируетПосредника = Истина; 
	КонецЕсли;
	
	Если Результат.ИННИдентифицируетПосредника Тогда
		// В этом случае в наименовании первый элемент - наименование посредника
		УсловнаяДлинаНаименованияПосредника = 1;
	Иначе
		УсловнаяДлинаНаименованияПосредника = 0;
	КонецЕсли;
	
	ИндексНаименования = 0 + УсловнаяДлинаНаименованияПосредника;
	ИндексАдреса       = 1 + УсловнаяДлинаНаименованияПосредника;
	
	Если ЭлементыНаименования.ВГраница() >= ИндексНаименования Тогда
		Результат.Наименование = ЭлементыНаименования[ИндексНаименования];
	КонецЕсли;
	
	Если ЭлементыНаименования.ВГраница() >= ИндексАдреса Тогда
		Результат.Адрес = ЭлементыНаименования[ИндексАдреса];
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РаспознаваниеХозяйственныхОпераций

Функция НовыйРаспознаннаяВыписка(Идентификатор, УчастникиОпераций)
	
	РаспознаннаяВыписка = Новый Структура;
	РаспознаннаяВыписка.Вставить("Идентификатор",  Идентификатор);
	РаспознаннаяВыписка.Вставить("ВладелецСчета",  НовыйОписаниеВладельцаСчета(Идентификатор, УчастникиОпераций));
	РаспознаннаяВыписка.Вставить("Операции",       НовыйРаспознанныеОперации());
	РаспознаннаяВыписка.Вставить("Предупреждения", НовыйПредупрежденияПриРаспознавании());
	
	Возврат РаспознаннаяВыписка;
	
КонецФункции

Функция НовыйРаспознанныеОперации()
	
	РаспознанныеОперации = Новый ТаблицаЗначений;
	РаспознанныеОперации.Колонки.Добавить("Идентификатор",      ТипИдентификатор());
	РаспознанныеОперации.Колонки.Добавить("ПлатежноеПоручение", Новый ОписаниеТипов("ДокументСсылка.ПлатежноеПоручение"));
	РаспознанныеОперации.Колонки.Добавить("Ссылка",             ОписаниеТиповДокументыИсполнения());
	РаспознанныеОперации.Колонки.Добавить("ХозяйственнаяОперация"); // См. НовыйХозяйственнаяОперация()
	РаспознанныеОперации.Колонки.Добавить("Предупреждения"); // См. НовыйПредупрежденияПриРаспознавании()
	РаспознанныеОперации.Индексы.Добавить("Идентификатор");
	
	Возврат РаспознанныеОперации;
	
КонецФункции

Функция ОписаниеТиповДокументыИсполнения()
	Возврат Новый ОписаниеТипов("ДокументСсылка.СписаниеСРасчетногоСчета,ДокументСсылка.ПоступлениеНаРасчетныйСчет");
КонецФункции

Функция ХозяйственнаяОперация(Параметры, ПравилаОпределенияХозяйственныхОпераций, ВыполнитьПравилоОбязательно = Ложь)
	
	ДежурноеПравило = Неопределено; // Одно из правил выполним обязательно. Если не найдем ничего лучше, то последнее, прошедшее обязательные проверки.
	
	Для Каждого Правило Из ПравилаОпределенияХозяйственныхОпераций Цикл
		
		// Обязательные проверки, внешние по отношению к правилу (общие для всех правил)
		Если Правило.ПоступилоСписано <> Параметры.Операция.ПоступилоСписано Тогда
			Продолжить;
		КонецЕсли;
		
		РезультатОпределенияХозяйственнойОперации = ВыполнитьПравилоОпределенияХозяйственнойОперации(Параметры, Правило, Истина);
		
		Если РезультатОпределенияХозяйственнойОперации.Определена Тогда
			
			Возврат РезультатОпределенияХозяйственнойОперации.ХозяйственнаяОперация;
			
		Иначе
			
			ДежурноеПравило = Правило;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Все правила сообщили, что операции они не соответствуют.
	Если Не ВыполнитьПравилоОбязательно Или ДежурноеПравило = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Выполним дежурное правило
	РезультатОпределенияХозяйственнойОперации = ВыполнитьПравилоОпределенияХозяйственнойОперации(Параметры, ДежурноеПравило, Ложь);
		
	Если РезультатОпределенияХозяйственнойОперации.Определена Тогда
		
		Возврат РезультатОпределенияХозяйственнойОперации.ХозяйственнаяОперация;
		
	Иначе
		Возврат Неопределено; // Ничего не нашли
	КонецЕсли;
	
КонецФункции

Функция ВыполнитьПравилоОпределенияХозяйственнойОперации(Параметры, Правило, ПроверитьПрименимостьПравила)
	
	Параметры.Правило                      = Правило;
	Параметры.ПроверитьПрименимостьПравила = ПроверитьПрименимостьПравила;
	Параметры.ПротоколыВыбораСсылок.Очистить();
	
	Если Правило.ПоступилоСписано = "Поступило" Тогда
		РезультатОпределенияХозяйственнойОперации = ХозяйственнаяОперацияПоступило(Параметры);
	Иначе
		РезультатОпределенияХозяйственнойОперации = ХозяйственнаяОперацияСписано(Параметры);
	КонецЕсли;
	
	Если РезультатОпределенияХозяйственнойОперации.Определена Тогда
			
		УстановитьПоказателиРасчетов(РезультатОпределенияХозяйственнойОперации.ХозяйственнаяОперация, Параметры);
		УстановитьПоказателиНДС(РезультатОпределенияХозяйственнойОперации.ХозяйственнаяОперация, Параметры);
		УстановитьБанковскийСчетКонтрагента(РезультатОпределенияХозяйственнойОперации.ХозяйственнаяОперация, Параметры);
		
		Если Не РезультатОпределенияХозяйственнойОперации.ХозяйственнаяОперация.Свойство("СтатьяДвиженияДенежныхСредств") Тогда
			УстановитьСтатьюДвиженияДенежныхСредств(РезультатОпределенияХозяйственнойОперации.ХозяйственнаяОперация, Параметры);
		КонецЕсли;
		
		// Для ссылок на новые объекты, установленных в ХозяйственнаяОперация, дозаполним из выписки значения реквизитов
		ЗаполнитьРеквизитыНовыхОбъектов(
			Параметры.УчастникиОпераций, 
			РезультатОпределенияХозяйственнойОперации.ХозяйственнаяОперация,
			Параметры.Операция,
			Параметры.ИсточникиСсылок,
			Параметры.ВладелецСчета,
			Параметры.КешОбщихПараметров.РеквизитыНовыхОбъектовИнформационнойБазы);
			
	КонецЕсли;
	
	Возврат РезультатОпределенияХозяйственнойОперации;
	
КонецФункции

Функция НайтиПоИдентификатору(Коллекция, Идентификатор)
	
	Элемент = Коллекция.Найти(Идентификатор, "Идентификатор");
	Если Элемент = Неопределено Тогда
		Элемент = Коллекция.Добавить();
		Элемент.Идентификатор = Идентификатор;
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

Функция ОперацияВыписки(Выписки, ИдентификаторВыписки, ИдентификаторОперации)
	
	Выписка = Выписки[ИдентификаторВыписки];
	Если Выписка = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Операция = Выписка.Операции.Найти(ИдентификаторОперации, "Идентификатор");
	Если Операция = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Операция;
	
КонецФункции

Функция НовыйРезультатОпределенияХозяйственнойОперации(Определена = Ложь, Правило = Неопределено)
	
	Результат = Новый Структура;
	Результат.Вставить("Определена",            Определена);
	Результат.Вставить("ХозяйственнаяОперация", Неопределено); // Может быть инициализирована ниже
	
	Если Определена Тогда
		Результат.ХозяйственнаяОперация = НовыйХозяйственнаяОперация();
		Если Правило <> Неопределено И ЗначениеЗаполнено(Правило.ОсновнойВидОперации) Тогда
			Результат.ХозяйственнаяОперация.Вставить("ВидОперацииДокумента", Правило.ОсновнойВидОперации);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НовыйХозяйственнаяОперация()
	
	Возврат Новый Структура;
	
КонецФункции

Функция НовыйПараметрыОпределенияХозяйственнойОперации()
	
	Параметры = Новый Структура;
	// Коллекции дополняются в ходе распознавания:
	Параметры.Вставить("УчастникиОпераций");             // См. ИдентификацияУчастниковБанковскихОпераций.НовыйУчастникиОпераций()
	// Значения одинаковые для всех операций в выписке:
	Параметры.Вставить("ВладелецСчета");                 // См. НовыйОписаниеВладельцаСчета()
	Параметры.Вставить("КешОбщихПараметров",                  НовыйКешОбщихПараметров());
	// Значения следующих параметров заполняются (меняются) для каждой обрабатываемой операции
	// - См. ЗаполнитьПараметрыОпределенияХозяйственнойОперации()
	Параметры.Вставить("Операция",                            Неопределено);// Ссылка на операцию
	Параметры.Вставить("СторонаКонтрагента",                  ""); // "Плательщик" или "Получатель"
	Параметры.Вставить("ПлательщикЮридическоеФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ПустаяСсылка());
	Параметры.Вставить("ПлательщикКешИдентификаторов",        Неопределено); // Для использования в НайтиСсылку()
	Параметры.Вставить("ПолучательКешИдентификаторов",        Неопределено); // Для использования в НайтиСсылку()
	Параметры.Вставить("КешПроверенныхСвойствПравил",         Новый Структура);
	// Значения следующих параметров заполняются (меняются, модифицируются) при применении разных правил к одной операции
	// - для каждого правила присваиваются новые значения
	Параметры.Вставить("Правило",                             Неопределено); // Ссылка на строку таблицы НовыйПравилаОпределенияХозяйственныхОпераций() или Неопределено
	Параметры.Вставить("ПроверитьПрименимостьПравила",        Истина); // Истина означает, что Правило должно проверить, подходит ли оно для конкретной операции. Ложь означает, что правило следует выполнить, несмотря на условия (проверки), которые оно содержит. Например, если такая проверка уже выполнена с учетом вида операции, заданному пользователем явно.
	Параметры.Вставить("ПротоколыВыбораСсылок",               Новый Структура); // Ключ - имя свойства хозяйственной операции; Значение - см. НовыйПротоколВыбораСсылок()
	// - коллекция может дополняться
	Параметры.Вставить("ИсточникиСсылок",                     Новый Соответствие); // Ключ - ссылка, наденная при распознавании операции; Значение - сторона операции, к которой относится ссылка ("Плательщик" или "Получатель")
	
	Возврат Параметры;
	
КонецФункции

Процедура ЗаполнитьПараметрыОпределенияХозяйственнойОперации(Параметры, Операция)
	
	Параметры.Операция           = Операция;
	
	Параметры.СторонаКонтрагента = СторонаКонтрагента(Операция.ПоступилоСписано); // "Плательщик" или "Получатель"
	
	// У каждой операции свои наборы идентификаторов, поэтому следует сбросить кеши
	Параметры.ПлательщикКешИдентификаторов = Неопределено;
	Параметры.ПолучательКешИдентификаторов = Неопределено;
	Параметры.КешПроверенныхСвойствПравил  = Новый Структура;
	
	Параметры.ПлательщикЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ПустаяСсылка();
	
	// Инициализируем параметры, значения которых меняются в ходе выполнения правил
	Параметры.Правило                      = Неопределено;
	Параметры.ПроверитьПрименимостьПравила = Истина;
	Параметры.ИсточникиСсылок              = Новый Соответствие;
	
КонецПроцедуры

Функция НовыйПравилаОпределенияХозяйственныхОпераций()
	
	ТипВидыОпераций = Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийСписаниеДенежныхСредств, ПеречислениеСсылка.ВидыОперацийПоступлениеДенежныхСредств");
	
	Правила = Новый ТаблицаЗначений;
	Правила.Колонки.Добавить("Имя",                 Новый ОписаниеТипов("Строка"));
	Правила.Колонки.Добавить("ПоступилоСписано",    ТипПоступилоСписано());
	Правила.Колонки.Добавить("ОсновнойВидОперации", ТипВидыОпераций);
	Правила.Колонки.Добавить("ОсновнаяСтатьяДДС",   Новый ОписаниеТипов("СправочникСсылка.СтатьиДвиженияДенежныхСредств"));
	
	Возврат Правила;
	
КонецФункции

Функция НовыйОписаниеВладельцаСчета(ИдентификаторВыписки, УчастникиОпераций)
	
	ОписаниеВладельцаСчета = Новый Структура;
	ОписаниеВладельцаСчета.Вставить("Организация",               Справочники.Организации.ПустаяСсылка());
	ОписаниеВладельцаСчета.Вставить("БанковскийСчет",            Справочники.БанковскиеСчета.ПустаяСсылка());
	ОписаниеВладельцаСчета.Вставить("Подразделение",             Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	ОписаниеВладельцаСчета.Вставить("ЮридическоеФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ПустаяСсылка());
	ОписаниеВладельцаСчета.Вставить("ВалютаСчета",               Справочники.Валюты.ПустаяСсылка());
	ОписаниеВладельцаСчета.Вставить("БИК",                       "");
	ОписаниеВладельцаСчета.Вставить("ПротоколыВыбораСсылок",     Новый Структура); // Ключ - имя свойств описания; Значение - см. НовыйПротоколВыбораСсылок()
	ОписаниеВладельцаСчета.ПротоколыВыбораСсылок.Вставить("Организация",    ИдентификацияУчастниковБанковскихОпераций.НовыйПротоколВыбораСсылок());
	ОписаниеВладельцаСчета.ПротоколыВыбораСсылок.Вставить("БанковскийСчет", ИдентификацияУчастниковБанковскихОпераций.НовыйПротоколВыбораСсылок());
	
	Идентификаторы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторВыписки);
	
	Отбор = Новый Структура("Тип", Тип("СправочникСсылка.Организации"));
	ОписаниеОрганизации = ИдентификацияУчастниковБанковскихОпераций.НайтиСсылку(
		Идентификаторы,
		УчастникиОпераций,
		Отбор,
		,// ПриоритетнаяСсылка. Здесь не используется, см. СведенияОВладельцеБанковскогоСчетаИзКонтекста
		ОписаниеВладельцаСчета.ПротоколыВыбораСсылок.Организация);
	Если ОписаниеОрганизации = Неопределено Тогда
		Возврат ОписаниеВладельцаСчета;
	Иначе
		ОписаниеВладельцаСчета.Организация = ОписаниеОрганизации.Ссылка;
	КонецЕсли;
	
	ЮридическоеФизическоеЛицо = ОписаниеОрганизации.ОписаниеСсылки.ЮридическоеФизическоеЛицо;
	Если ЗначениеЗаполнено(ЮридическоеФизическоеЛицо) Тогда
		ОписаниеВладельцаСчета.ЮридическоеФизическоеЛицо = ЮридическоеФизическоеЛицо;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Тип",      Тип("СправочникСсылка.БанковскиеСчета"));
	Отбор.Вставить("Владелец", ОписаниеОрганизации.Ссылка);
	ОписаниеСчета = ИдентификацияУчастниковБанковскихОпераций.НайтиСсылку(
		Идентификаторы,
		УчастникиОпераций,
		Отбор,
		,// ПриоритетнаяСсылка. Здесь не используется, см. СведенияОВладельцеБанковскогоСчетаИзКонтекста
		ОписаниеВладельцаСчета.ПротоколыВыбораСсылок.БанковскийСчет);
	
	Если ОписаниеСчета <> Неопределено Тогда
		
		ОписаниеВладельцаСчета.БанковскийСчет = ОписаниеСчета.Ссылка;
		
		ПутиКРеквизитам = Новый Структура;
		ПутиКРеквизитам.Вставить("ВалютаСчета", "ВалютаДенежныхСредств");
		ПутиКРеквизитам.Вставить("БИК",         "Банк.Код");
		РеквизитыСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОписаниеВладельцаСчета.БанковскийСчет, ПутиКРеквизитам);
		
		ЗаполнитьЗначенияСвойств(ОписаниеВладельцаСчета, РеквизитыСчета);
		
	КонецЕсли;
	
	ОписаниеВладельцаСчета.Подразделение = Справочники.БанковскиеСчета.ПодразделениеПоУмолчанию(
		ОписаниеВладельцаСчета.Организация,
		ОписаниеВладельцаСчета.БанковскийСчет);
	
	Возврат ОписаниеВладельцаСчета;
	
КонецФункции

#Область ПредопределенныеПравилаОпределенияХозяйственныхОпераций

Процедура ЗаполнитьПредопределенныеПравилаОпределенияХозяйственныхОпераций(Правила, ОтборВидОперации = Неопределено)
	
	// Содержимое правил вызывается из
	// ХозяйственнаяОперацияСписано()
	// и
	// ХозяйственнаяОперацияПоступило()
	
	ИменаПравил = Новый Структура;
	ИменаПравил.Вставить("Списано",   Новый Массив);
	ИменаПравил.Вставить("Поступило", Новый Массив);
	
	ИменаПравил.Списано.Добавить("НалогТретьегоЛица");
	ИменаПравил.Списано.Добавить("Налог");
	ИменаПравил.Списано.Добавить("СнятиеНаличных");
	ИменаПравил.Списано.Добавить("ВыводПредпринимателемЛичныхСредств");
	ИменаПравил.Списано.Добавить("ПереводНаДругойСчет");
	ИменаПравил.Списано.Добавить("ЗаработнаяПлата");
	ИменаПравил.Списано.Добавить("ЗаработнаяПлатаПоВедомости"); // Применяется, только если явно указан соответствующий вид операции. В остальных случаях - "ЗаработнаяПлата"
	ИменаПравил.Списано.Добавить("КомиссияБанка");
	ИменаПравил.Списано.Добавить("ОплатаИзвестномуПоставщику");
	ИменаПравил.Списано.Добавить("ПрочиеВыплатыКонтрагентам");
	ИменаПравил.Списано.Добавить("ВозвратПокупателю");
	ИменаПравил.Списано.Добавить("ДругиеПлатежиГосОрганам");
	ИменаПравил.Списано.Добавить("ОплатаНовомуПоставщику");
	
	ИменаПравил.Поступило.Добавить("ПоступлениеНаличныхВБанк");
	ИменаПравил.Поступило.Добавить("ВыручкаРозничнойТорговлиЧерезПосредника");
	ИменаПравил.Поступило.Добавить("ВнесениеПредпринимателемЛичныхСредств");
	ИменаПравил.Поступило.Добавить("ПереводССобственногоСчета");
	ИменаПравил.Поступило.Добавить("ОплатаОтИзвестногоПокупателя");
	ИменаПравил.Поступило.Добавить("ВозвратОтПоставщика");
	ИменаПравил.Поступило.Добавить("ПрочиеПоступленияОтКонтрагентов");
	ИменаПравил.Поступило.Добавить("ОплатаОтНовогоПокупателя");
	
	Для Каждого ПоступилоСписано Из ИменаПравил Цикл
		
		Для Каждого ИмяПравила Из ПоступилоСписано.Значение Цикл
			
			ОсновнойВидОперации = ОсновнойВидОперацииПредопределенногоПравила(ПоступилоСписано.Ключ, ИмяПравила);
			
			Если ОтборВидОперации <> Неопределено И ОсновнойВидОперации <> ОтборВидОперации Тогда
				Продолжить;
			КонецЕсли;
			
			ОсновнаяСтатьяДДС = УчетДенежныхСредствБП.СтатьяДДСПоУмолчанию(?(ИмяПравила = "КомиссияБанка", "КомиссияБанка", ОсновнойВидОперации));
			
			Правило = Правила.Добавить();
			Правило.ПоступилоСписано    = ПоступилоСписано.Ключ;
			Правило.Имя                 = ИмяПравила;
			Правило.ОсновнойВидОперации = ОсновнойВидОперации;
			Правило.ОсновнаяСтатьяДДС   = ОсновнаяСтатьяДДС;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОсновнойВидОперацииПредопределенногоПравила(ПоступилоСписано, ИмяПравила)
	
	Если ПоступилоСписано = "Списано" Тогда
		
		Если ИмяПравила = "НалогТретьегоЛица" Тогда
			Возврат Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц;
		ИначеЕсли ИмяПравила = "Налог" Тогда
			Возврат Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога;
		ИначеЕсли ИмяПравила = "СнятиеНаличных" Тогда
			Возврат Перечисления.ВидыОперацийСписаниеДенежныхСредств.СнятиеНаличных;
		ИначеЕсли ИмяПравила = "КомиссияБанка" Тогда
			// Если предопределенный элемент расходов на услуги банка отсутствует, нельзя будет сформировать корректные проводки.
			// В этом случае, пользователь должен сам заполнить субконто.
			РасходыНаУслугиБанков = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.РасходыНаУслугиБанков");
			Если ЗначениеЗаполнено(РасходыНаУслугиБанков) Тогда
				Возврат Перечисления.ВидыОперацийСписаниеДенежныхСредств.КомиссияБанка;
			Иначе
				Возврат Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание;
			КонецЕсли;
		ИначеЕсли ИмяПравила = "ВыводПредпринимателемЛичныхСредств" Тогда
			Возврат Перечисления.ВидыОперацийСписаниеДенежныхСредств.ЛичныеСредстваПредпринимателя;
		ИначеЕсли ИмяПравила = "ПереводНаДругойСчет" Тогда
			Возврат Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет;
		ИначеЕсли ИмяПравила = "ЗаработнаяПлата" Тогда
			Возврат Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику;
		ИначеЕсли ИмяПравила = "ЗаработнаяПлатаПоВедомости" Тогда
			Возврат Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП;
		ИначеЕсли ИмяПравила = "ОплатаИзвестномуПоставщику" Тогда
			Возврат Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику;
		ИначеЕсли ИмяПравила = "ПрочиеВыплатыКонтрагентам" Тогда
			Возврат Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
		ИначеЕсли ИмяПравила = "ВозвратПокупателю" Тогда
			Возврат Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю;
		ИначеЕсли ИмяПравила = "ДругиеПлатежиГосОрганам" Тогда
			Возврат Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
		ИначеЕсли ИмяПравила = "ОплатаНовомуПоставщику" Тогда
			Возврат Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику;
		КонецЕсли;
		
	ИначеЕсли ПоступилоСписано = "Поступило" Тогда
		
		Если ИмяПравила = "ПоступлениеНаличныхВБанк" Тогда
			Если Константы.ИспользоватьИнкассацию.Получить() Тогда
				Возврат Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация;
			Иначе
				Возврат Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВзносНаличными;
			КонецЕсли;
		ИначеЕсли ИмяПравила = "ВзносНаличными" Тогда
			Возврат Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВзносНаличными;
		ИначеЕсли ИмяПравила = "ВыручкаРозничнойТорговлиЧерезПосредника" Тогда
			Возврат Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам;
		ИначеЕсли ИмяПравила = "ВнесениеПредпринимателемЛичныхСредств" Тогда
			Возврат Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ЛичныеСредстваПредпринимателя;
		ИначеЕсли ИмяПравила = "ПереводССобственногоСчета" Тогда
			Возврат Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПереводСДругогоСчета;
		ИначеЕсли ИмяПравила = "ОплатаОтИзвестногоПокупателя" Тогда
			Возврат Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя;
		ИначеЕсли ИмяПравила = "ВозвратОтПоставщика" Тогда
			Возврат Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика;
		ИначеЕсли ИмяПравила = "ПрочиеПоступленияОтКонтрагентов" Тогда
			Возврат Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
		ИначеЕсли ИмяПравила = "ОплатаОтНовогоПокупателя" Тогда
			Возврат Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#Область Списано

Функция ХозяйственнаяОперацияСписано(Параметры)
	
	// Эти правила должны быть объявлены в ЗаполнитьПредопределенныеПравилаОпределенияХозяйственныхОпераций()
	
	Если Параметры.Правило.Имя = "НалогТретьегоЛица" Тогда
		Возврат ХозяйственнаяОперацияНалогТретьегоЛица(Параметры);
		
	ИначеЕсли Параметры.Правило.Имя = "Налог" Тогда
		Возврат ХозяйственнаяОперацияНалог(Параметры);
		
	ИначеЕсли Параметры.Правило.Имя = "СнятиеНаличных" Тогда
		Возврат ХозяйственнаяОперацияСнятиеНаличных(Параметры);
		
	ИначеЕсли Параметры.Правило.Имя = "КомиссияБанка" Тогда
		Возврат ХозяйственнаяОперацияКомиссияБанка(Параметры);
		
	ИначеЕсли Параметры.Правило.Имя = "ВыводПредпринимателемЛичныхСредств" Тогда
		Возврат ХозяйственнаяОперацияВыводПредпринимателемЛичныхСредств(Параметры);
		
	ИначеЕсли Параметры.Правило.Имя = "ПереводНаДругойСчет" Тогда
		Возврат ХозяйственнаяОперацияПереводМеждуСобственнымиСчетами(Параметры);
		
	ИначеЕсли Параметры.Правило.Имя = "ЗаработнаяПлата" 
		Или Параметры.Правило.Имя = "ЗаработнаяПлатаПоВедомости" Тогда
		Возврат ХозяйственнаяОперацияЗаработнаяПлата(Параметры);
		
	ИначеЕсли Параметры.Правило.Имя = "ОплатаИзвестномуПоставщику" Тогда
		Возврат ХозяйственнаяОперацияПоВидуДоговора(Параметры);
		
	ИначеЕсли Параметры.Правило.Имя = "ПрочиеВыплатыКонтрагентам" Тогда
		Возврат ХозяйственнаяОперацияПоВидуДоговора(Параметры);
		
	ИначеЕсли Параметры.Правило.Имя = "ВозвратПокупателю" Тогда
		Возврат ХозяйственнаяОперацияПоВидуДоговора(Параметры);
		
	ИначеЕсли Параметры.Правило.Имя = "ДругиеПлатежиГосОрганам" Тогда
		Возврат ХозяйственнаяОперацияДругиеПлатежиГосОрганам(Параметры);
		
	ИначеЕсли Параметры.Правило.Имя = "ОплатаНовомуПолучателюПрочихВыплат" Тогда
		Возврат ХозяйственнаяОперацияОплатаНовомуПолучателюПрочихВыплат(Параметры);
		
	ИначеЕсли Параметры.Правило.Имя = "ОплатаНовомуПоставщику" Тогда
		Возврат ХозяйственнаяОперацияОплатаНовомуПоставщику(Параметры);
		
	Иначе
		Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		
	КонецЕсли;
	
КонецФункции

Функция КБКНалога(РеквизитыПлатежаВБюджет)
	
	Если Не ПлатежиВБюджетКлиентСервер.ЭтоПлатежВБюджет(РеквизитыПлатежаВБюджет) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не РеквизитыПлатежаВБюджет.Свойство("ПоказательКБК") Тогда
		Возврат "";
	КонецЕсли;
	
	КБК = РеквизитыПлатежаВБюджет.ПоказательКБК;
	
	Если Не ПлатежиВБюджетКлиентСервер.КБКЗадан(КБК) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПлатежиВБюджетКлиентСервер.ЭтоНалоговыеДоходы(КБК) Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат КБК;
	
КонецФункции

Функция ХозяйственнаяОперацияНалогТретьегоЛица(Параметры)
	
	// Классификация по ISO
	// Family    = "ICDT"; // Issued Credit Transfers
	// SubFamily = "TAXE"; // Taxes
	
	// Платеж за третье лицо - это когда идентификатор плательщика, который берет в расчет налоговая,
	// не соответствует идентификаторам владельца счета.
	// Идентификатор плательщика может поступить двумя способами:
	// - если из назначения платежа понятно, что это платеж за третье лицо, то в составе РеквизитыПлатежаВБюджет
	// - если непонятно, то в составе идентификаторов плательщика
	
	ИдентификаторыНалогоплательщика = Новый Массив;
	Если Параметры.Операция.РеквизитыПлатежаВБюджет.Свойство("Налогоплательщик") Тогда
		
		Для Каждого Идентификатор Из Параметры.Операция.РеквизитыПлатежаВБюджет.Налогоплательщик.Идентификаторы Цикл
			
			ИдентификаторыНалогоплательщика.Добавить(Идентификатор);
			
			Если Параметры.ПроверитьПрименимостьПравила Тогда
				ОписаниеИдентификатора = Параметры.УчастникиОпераций.Идентификаторы.Найти(Идентификатор, "Идентификатор");
				
				Если ОписаниеИдентификатора = Неопределено Тогда
					Возврат НовыйРезультатОпределенияХозяйственнойОперации();
				КонецЕсли;
				
				Если ОписаниеИдентификатора.Ссылки[Параметры.ВладелецСчета.Организация] <> Неопределено Тогда
					// Это уплата за самого себя, а не за третье лицо
					Возврат НовыйРезультатОпределенияХозяйственнойОперации();
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		// Это вообще налог?
		Если Параметры.ПроверитьПрименимостьПравила Тогда
			КБК = КБКНалога(Параметры.Операция.РеквизитыПлатежаВБюджет);
			Если ПустаяСтрока(КБК) Тогда
				Возврат НовыйРезультатОпределенияХозяйственнойОперации();
			КонецЕсли;
		КонецЕсли;
		
		// В расчет берем только налоговые
		ИдентификаторыНалогоплательщика = Новый Массив;
		Для Каждого Идентификатор Из Параметры.Операция.ПлательщикИдентификаторы Цикл
			
			ОписаниеИдентификатора = ИдентификацияУчастниковБанковскихОпераций.ОписаниеИдентификатора(
				Идентификатор,
				Параметры.УчастникиОпераций);
				
			Если ОписаниеИдентификатора = Неопределено Тогда
				Возврат НовыйРезультатОпределенияХозяйственнойОперации();
			КонецЕсли;
			
			Если ОписаниеИдентификатора.Схема <> "TXID" Тогда
				Продолжить;
			КонецЕсли;
			
			Если ОписаниеИдентификатора.Ссылки[Параметры.ВладелецСчета.Организация] <> Неопределено Тогда
				// Это уплата за самого себя, а не за третье лицо
				Если Параметры.ПроверитьПрименимостьПравила Тогда
					Возврат НовыйРезультатОпределенияХозяйственнойОперации();
				КонецЕсли;
			Иначе
				// Это реквизиты третьего лица
				ИдентификаторыНалогоплательщика.Добавить(Идентификатор);
			КонецЕсли;
				
		КонецЦикла;
		
	КонецЕсли;
		
	// Заполним свойства хозяйственной операции
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	// Налоговый орган
	НайденКонтрагент = НайтиГосОрган(Результат.ХозяйственнаяОперация, Параметры);
	
	Если Не НайденКонтрагент Тогда
		ОписаниеГосОргана = ОписаниеГосОргана(Параметры.Операция.РеквизитыПлатежаВБюджет);
		УстановитьНовогоКонтрагента(Результат.ХозяйственнаяОперация, ОписаниеГосОргана, Параметры);
	КонецЕсли;
	
	// Налогоплательщик
	// Общие методы не работают с третьими лицами, поэтому обрабатываем здесь в особом (упрощенном) порядке
	
	Параметры.КешПроверенныхСвойствПравил.Удалить("ДоговорыКонтрагентовПоВидам");// Не используем кеш
	
	// Ищем договор
	ВидыДоговоров = ОпределитьВидДоговораСКонтрагентом(Результат.ХозяйственнаяОперация.ВидОперацииДокумента, Параметры.КешОбщихПараметров);
	Если Не ЗначениеЗаполнено(ВидыДоговоров) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПротоколВыбораСсылок = ИдентификацияУчастниковБанковскихОпераций.НовыйПротоколВыбораСсылок();
		
	ОтборДоговор = ОтборДоговорКонтрагента(Параметры);
	
	Для Каждого ВидДоговора Из ВидыДоговоров Цикл
		
		ОтборДоговор.Вставить("ВидДоговора", ВидДоговора);
	
		ОписаниеДоговора = ИдентификацияУчастниковБанковскихОпераций.НайтиСсылку(
			ИдентификаторыНалогоплательщика,
			Параметры.УчастникиОпераций, 
			ОтборДоговор,
			,// ПриоритетнаяСсылка
			ПротоколВыбораСсылок);
		
		Если ОписаниеДоговора <> Неопределено Тогда
				
			Результат.ХозяйственнаяОперация.Вставить("Налогоплательщик",   ОписаниеДоговора.ОписаниеСсылки.Владелец);
			Результат.ХозяйственнаяОперация.Вставить("ДоговорКонтрагента", ОписаниеДоговора.Ссылка);
			
			Параметры.ПротоколыВыбораСсылок.Вставить("Налогоплательщик",   ПротоколВыбораСсылок);
			Параметры.ПротоколыВыбораСсылок.Вставить("ДоговорКонтрагента", ПротоколВыбораСсылок);
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не Результат.ХозяйственнаяОперация.Свойство("Налогоплательщик") Тогда
		
		// Ищем контрагента
		ОтборКонтрагент = Новый Структура;
		ОтборКонтрагент.Вставить("Тип", Тип("СправочникСсылка.Контрагенты"));
		
		ПротоколВыбораСсылок = ИдентификацияУчастниковБанковскихОпераций.НовыйПротоколВыбораСсылок();
		
		ОписаниеКонтрагента = ИдентификацияУчастниковБанковскихОпераций.НайтиСсылку(
			ИдентификаторыНалогоплательщика,
			Параметры.УчастникиОпераций, 
			ОтборКонтрагент,
			,// ПриоритетнаяСсылка
			ПротоколВыбораСсылок);
		
		Если ОписаниеКонтрагента <> Неопределено Тогда
			Параметры.ПротоколыВыбораСсылок.Вставить("Налогоплательщик", ПротоколВыбораСсылок);
			Результат.ХозяйственнаяОперация.Вставить("Налогоплательщик", ОписаниеКонтрагента.Ссылка);
		Иначе
			
			// Создаем контрагента-налогоплательщика 
			Налогоплательщик = ИдентификацияУчастниковБанковскихОпераций.СсылкаНового(
				ИдентификаторыНалогоплательщика,
				ОтборКонтрагент, 
				Тип("СправочникСсылка.Контрагенты"),
				Параметры.УчастникиОпераций);
				
			Если Налогоплательщик <> Неопределено Тогда
				
				Результат.ХозяйственнаяОперация.Вставить("Налогоплательщик", Налогоплательщик);
				
				Если Параметры.Операция.РеквизитыПлатежаВБюджет.Свойство("Налогоплательщик") Тогда
					// Содержит наименование налогоплательщика (третьего лица)
				
					ОписаниеНовогоОбъекта = ИдентификацияУчастниковБанковскихОпераций.ОписаниеНовогоОбъекта(
						Налогоплательщик,
						Параметры.УчастникиОпераций);
					Если ОписаниеНовогоОбъекта <> Неопределено Тогда
						ИдентификацияУчастниковБанковскихОпераций.ЗаполнитьПустыеРеквизитыНовогоОбъекта(
							ОписаниеНовогоОбъекта,
							Новый Структура("НаименованиеПолное", Параметры.Операция.РеквизитыПлатежаВБюджет.Налогоплательщик.Наименование),
							Параметры.КешОбщихПараметров.РеквизитыНовыхОбъектовИнформационнойБазы);
					КонецЕсли;
						
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Результат.ХозяйственнаяОперация.Свойство("Налогоплательщик") Тогда
			
			// Создаем договор
			ОтборДоговор = ОтборДоговорКонтрагента(Параметры);
			ОтборДоговор.Вставить("ВидДоговора", ВидыДоговоров[0]);
			ОтборДоговор.Вставить("Владелец",    Результат.ХозяйственнаяОперация.Налогоплательщик);
			
			ДоговорКонтрагента = ИдентификацияУчастниковБанковскихОпераций.СсылкаНового(
				ИдентификаторыНалогоплательщика,
				ОтборДоговор, 
				Тип("СправочникСсылка.ДоговорыКонтрагентов"),
				Параметры.УчастникиОпераций);
				
			Если ДоговорКонтрагента <> Неопределено Тогда
				
				Результат.ХозяйственнаяОперация.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияНалог(Параметры)
	
	// Классификация по ISO
	// Family    = "ICDT"; // Issued Credit Transfers
	// SubFamily = "TAXE"; // Taxes
	
	КБК = КБКНалога(Параметры.Операция.РеквизитыПлатежаВБюджет);
	
	Если Параметры.ПроверитьПрименимостьПравила И ПустаяСтрока(КБК) Тогда
		Возврат НовыйРезультатОпределенияХозяйственнойОперации();
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	НайденКонтрагент = НайтиГосОрган(Результат.ХозяйственнаяОперация, Параметры);
	
	Если Не НайденКонтрагент Тогда
		ОписаниеГосОргана = ОписаниеГосОргана(Параметры.Операция.РеквизитыПлатежаВБюджет);
		УстановитьНовогоКонтрагента(Результат.ХозяйственнаяОперация, ОписаниеГосОргана, Параметры);
	КонецЕсли;
	
	Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоКБК(КБК);
	Если ЗначениеЗаполнено(Налог) Тогда
		ВидНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Налог, "ВидНалога");
	КонецЕсли;
	Результат.ХозяйственнаяОперация.Вставить("Налог", Налог);
	
	Контрагент = ?(
		Результат.ХозяйственнаяОперация.Свойство("Контрагент"),
		Результат.ХозяйственнаяОперация.Контрагент,
		Справочники.Контрагенты.ПустаяСсылка());
		
	НастройкаПлатежейВБюджет = РегистрыСведений.РеквизитыУплатыНалоговИПлатежейВБюджет.НайтиПоРеквизитамПлатежа(
		КБК,
		Параметры.ВладелецСчета.Организация,
		Контрагент);
	
	Если НастройкаПлатежейВБюджет <> Неопределено Тогда
		Результат.ХозяйственнаяОперация.Вставить("Налог",                         НастройкаПлатежейВБюджет.Налог);
		Результат.ХозяйственнаяОперация.Вставить("СтатьяДвиженияДенежныхСредств", НастройкаПлатежейВБюджет.СтатьяДвиженияДенежныхСредств);
	КонецЕсли;
	
	// ВидНалоговогоОбязательства
	ВидНалоговогоОбязательства = Справочники.ВидыНалоговИПлатежейВБюджет.ВидНалоговогоОбязательстваПоКБК(
		КБК, Параметры.Операция.ДатаДокумента, ВидНалога);
	Результат.ХозяйственнаяОперация.Вставить("ВидНалоговогоОбязательства", ВидНалоговогоОбязательства);
	Если Параметры.Операция.ПлательщикРеквизиты.Свойство("КПП") Тогда
		Результат.ХозяйственнаяОперация.Вставить("КПППлательщика", Параметры.Операция.ПлательщикРеквизиты.КПП);
	КонецЕсли;
	
	// НалоговыйПериод
	Если Параметры.Операция.РеквизитыПлатежаВБюджет.Свойство("ПоказательПериода") Тогда
		
		ОписаниеПериода = ПлатежиВБюджетКлиентСервер.РазобратьНалоговыйПериод(Параметры.Операция.РеквизитыПлатежаВБюджет.ПоказательПериода);
		Если ОписаниеПериода.Периодичность = ПлатежиВБюджетКлиентСервер.НезаполненноеЗначение() Тогда
			НалоговыйПериод = НачалоМесяца(ДобавитьМесяц(Параметры.Операция.ДатаДокумента, -1));
		Иначе
			НалоговыйПериод = ОписаниеПериода.Дата;
		КонецЕсли;
		
		// Особые требования к значению поля НалоговыйПериод
		Если ЗначениеЗаполнено(Результат.ХозяйственнаяОперация.Налог) Тогда
			Если ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоФиксированныеВзносы(ВидНалога) Тогда
				НалоговыйПериод = НачалоГода(НалоговыйПериод);
			КонецЕсли;
		КонецЕсли;
		
		Результат.ХозяйственнаяОперация.Вставить("НалоговыйПериод", НалоговыйПериод);
		
	КонецЕсли;
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияСнятиеНаличных(Параметры)
	
	// Классификация по ISO2002
	// Family    = "CNTR"; // Counter Transactions
	// SubFamily = "CWDL"; // Cash Withdrawal
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		
		ЭтоСнятиеНаличных = БанковскиеПравила.ЭтоСчетКассыКредитнойОрганизации(Параметры.Операция.БалансовыйСчет)
			И (Не ЗначениеЗаполнено(Параметры.Операция.ШифрОперации)
				Или БанковскиеПравила.ЭтоДокументВыдачиБанкомНаличных(Параметры.Операция.ШифрОперации)
				Или БанковскиеПравила.ЭтоМемориальныйОрдер(Параметры.Операция.ШифрОперации));
		
		Если Не ЭтоСнятиеНаличных Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
КонецФункции

Функция ХозяйственнаяОперацияКомиссияБанка(Параметры)
	
	// Классификация по ISO2002
	// Family    = "RDDT"; // Received Direct Debits
	// SubFamily = "FEES"; // Fees
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		
		ЭтоКомиссияБанка = БанковскиеПравила.ЭтоСчетДоходовБанка(Параметры.Операция.БалансовыйСчет)
			Или БанковскиеПравила.ЭтоСчетРасчетовСБанком(Параметры.Операция.БалансовыйСчет)
			Или БанковскиеПравила.ЭтоБанковскийОрдер(Параметры.Операция.ШифрОперации);
		
		Если Не ЭтоКомиссияБанка Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	УстановитьБанк(Результат.ХозяйственнаяОперация, Параметры);
	
	// Аналитика для отнесения расходов
	// В операциях с видом ПрочееСписание стандартные методы заполнения счетов не применяются
	Результат.ХозяйственнаяОперация.Вставить("СчетДт",          ПланыСчетов.Хозрасчетный.ПрочиеРасходы);
	Результат.ХозяйственнаяОперация.Вставить("ПодразделениеДт", Параметры.ВладелецСчета.Подразделение);
	
	СтатьяРасходов = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.РасходыНаУслугиБанков");
	Если ЗначениеЗаполнено(СтатьяРасходов) Тогда
		Результат.ХозяйственнаяОперация.Вставить("СубконтоДт", Новый Соответствие);
		Результат.ХозяйственнаяОперация.СубконтоДт.Вставить(
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы,
			СтатьяРасходов);
	КонецЕсли;
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияВыводПредпринимателемЛичныхСредств(Параметры)
	
	// Классификация по ISO2002
	// Family    = "ICCN"; // Issued Cash Concentration
	// SubFamily = "COAT"; // Corporate Own Account Transfer
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		
		Если Параметры.ВладелецСчета.ЮридическоеФизическоеЛицо <> Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
	
		Если Не БанковскиеПравила.ЭтоСчетПереводовФизическимЛицам(Параметры.Операция.БалансовыйСчет) 
			И Не БанковскиеПравила.ЭтоСчетДепозитовФизическихЛиц(Параметры.Операция.БалансовыйСчет) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
	КонецЕсли;
	
	ПлательщикИПолучательОдноФизическоеЛицо = ПлательщикИПолучательОдноФизическоеЛицо(
		Параметры.Операция.ПлательщикИдентификаторы,
		Параметры.Операция.ПолучательИдентификаторы,
		Параметры.УчастникиОпераций);
	
	Если Параметры.ПроверитьПрименимостьПравила И Не ПлательщикИПолучательОдноФизическоеЛицо Тогда
		Возврат НовыйРезультатОпределенияХозяйственнойОперации();
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	УстановитьФизическоеЛицо(Результат.ХозяйственнаяОперация, Параметры);
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияЗаработнаяПлата(Параметры)
	
	// Классификация по ISO2002
	// Family    = "ICDT"; // Issued Credit Transfers
	// SubFamily = "SALA"; // Payroll/Salary Payment
	
	// Вывод денег на счет предпринимателя уже должен быть проверен
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		Если Не БанковскиеПравила.ЭтоСчетПереводовФизическимЛицам(Параметры.Операция.БалансовыйСчет)
			И Не БанковскиеПравила.ЭтоСчетДепозитовФизическихЛиц(Параметры.Операция.БалансовыйСчет) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	Если Результат.ХозяйственнаяОперация.ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП Тогда
		УстановитьКонтрагента(Результат.ХозяйственнаяОперация, Параметры);
	Иначе
		// указан сотрудник
		УстановитьФизическоеЛицо(Результат.ХозяйственнаяОперация, Параметры);
	КонецЕсли;
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияДругиеПлатежиГосОрганам(Параметры)
	
	// Применимость правила проверяем всегда - см. правило "ОплатаНовомуПолучателюПрочихВыплат"
	Если Не ПлатежиВБюджетКлиентСервер.ЭтоПлатежВБюджет(Параметры.Операция.РеквизитыПлатежаВБюджет) Тогда
		Возврат НовыйРезультатОпределенияХозяйственнойОперации();
	КонецЕсли;
	
	// Правило вызывается позже ХозяйственнаяОперацияНалог, поэтому проверили, что это не налог.
	// Правило вызывается позже других, ориентирующихся на вид договора, поэтому подходящего договора нет - нужно создать новый.
	// Но, в отличие от платежам обычным юридическим лицам, не госорганам, вид нового договора будет Прочее.
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	ОписаниеГосОргана = ОписаниеГосОргана(Параметры.Операция.РеквизитыПлатежаВБюджет); // Вид госоргана зависит от КБК
	УстановитьНовыйДоговорПоВидуОперации(Результат.ХозяйственнаяОперация, Параметры, ОписаниеГосОргана);
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияОплатаНовомуПоставщику(Параметры)
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило); // Самая последняя в списке правил.
	
	// Выполняем в том случае, если нет подходящих договоров
	УстановитьНовыйДоговорПоВидуОперации(Результат.ХозяйственнаяОперация, Параметры);
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияОплатаНовомуПолучателюПрочихВыплат(Параметры)
	
	// Используется в качестве дежурного правила, только когда вид операции документа указан пользователем явно.
	// Приводит к созданию нового договора с видом "Прочее".
	// Позволяет избежать выполнения правила "ДругиеПлатежиГосОрганам" (и, как следствие - создания контрагента с видом Гос.орган),
	// когда в операции не указаны реквизиты платежа в бюджет.
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		Возврат Ложь; // Обычно в качестве дежурного применяется правило "ОплатаНовомуПоставщику"
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	// Выполняем в том случае, если нет подходящих договоров
	УстановитьНовыйДоговорПоВидуОперации(Результат.ХозяйственнаяОперация, Параметры);
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Поступило

Функция ХозяйственнаяОперацияПоступило(Параметры)
	
	// Эти правила должны быть объявлены в ЗаполнитьПредопределенныеПравилаОпределенияХозяйственныхОпераций()
	
	Если Параметры.Правило.Имя = "ПоступлениеНаличныхВБанк" Тогда
		Возврат ХозяйственнаяОперацияПоступлениеНаличныхВБанк(Параметры);
		
	ИначеЕсли Параметры.Правило.Имя = "ВыручкаРозничнойТорговлиЧерезПосредника" Тогда
		Возврат ХозяйственнаяОперацияВыручкаРозничнойТорговлиЧерезПосредника(Параметры);
		
	ИначеЕсли Параметры.Правило.Имя = "ВнесениеПредпринимателемЛичныхСредств" Тогда
		Возврат ХозяйственнаяОперацияВнесениеПредпринимателемЛичныхСредств(Параметры);
		
	ИначеЕсли Параметры.Правило.Имя = "ПереводССобственногоСчета" Тогда
		Возврат ХозяйственнаяОперацияПереводМеждуСобственнымиСчетами(Параметры);
		
	ИначеЕсли Параметры.Правило.Имя = "ОплатаОтИзвестногоПокупателя" Тогда
		Возврат ХозяйственнаяОперацияПоВидуДоговора(Параметры);
		
	ИначеЕсли Параметры.Правило.Имя = "ПрочиеПоступленияОтКонтрагентов" Тогда
		Возврат ХозяйственнаяОперацияПоВидуДоговора(Параметры);
		
	ИначеЕсли Параметры.Правило.Имя = "ВозвратОтПоставщика" Тогда
		Возврат ХозяйственнаяОперацияПоВидуДоговора(Параметры);
		
	ИначеЕсли Параметры.Правило.Имя = "ОплатаОтНовогоПокупателя" Тогда
		Возврат ХозяйственнаяОперацияОплатаОтНовогоПокупателя(Параметры);
		
	Иначе
		Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		
	КонецЕсли;
	
КонецФункции

Функция ХозяйственнаяОперацияПоступлениеНаличныхВБанк(Параметры)
	
	// Классификация по ISO2002
	// Family    = "CNTR"; // Counter Transactions
	// SubFamily = "BCDP"; // Branch Deposit
	// SubFamily = "CDPT"; // Cash Deposit
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		
		ЭтоПоступлениеНаличныхВБанк = БанковскиеПравила.ЭтоСчетКассыКредитнойОрганизации(Параметры.Операция.БалансовыйСчет)
			Или БанковскиеПравила.ЭтоДокументПоступленияНаличныхВБанк(Параметры.Операция.ШифрОперации);
		
		Если Не ЭтоПоступлениеНаличныхВБанк Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	ВидОперацииДокумента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат.ХозяйственнаяОперация, "ВидОперацииДокумента");
	Если ВидОперацииДокумента = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация Тогда
		// В качестве контрагента обычно указан банк, но может быть и вноситель
		УстановитьКонтрагента(Результат.ХозяйственнаяОперация, Параметры);
	КонецЕсли;
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияВыручкаРозничнойТорговлиЧерезПосредника(Параметры)
	
	// Классификация по ISO2002
	// Family    = "MCRD"; // Merchant Card Transactions
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
		
		Если Не БанковскиеПравила.ЭтоСчетНезавершенныхРасчетов(Параметры.Операция.БалансовыйСчет) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
	КонецЕсли;
	
	ЮридическоеФизическоеЛицо = ИдентификацияУчастниковБанковскихОпераций.ЮридическоеФизическоеЛицоПоИдентификаторам(
		Параметры.Операция.ПлательщикИдентификаторы,
		Параметры.УчастникиОпераций);
		
	Если ЮридическоеФизическоеЛицо <> Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		// Посредник - банк или другая финансовая организация, а значит юридическое лицо.
		// В то же время, счета незавершенных расчетов могут использоваться для платежей физических лиц без открытия банковского счета.
		// В этих случаях данные о плательщике могут содержать идентификаторы как юридического, так и физического лица.
		Возврат НовыйРезультатОпределенияХозяйственнойОперации();
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	Результат.ХозяйственнаяОперация.Вставить("КурсВзаиморасчетов",      1);
	Результат.ХозяйственнаяОперация.Вставить("КратностьВзаиморасчетов", 1);
	Результат.ХозяйственнаяОперация.Вставить("СуммаВзаиморасчетов",     Параметры.Операция.Сумма);
	
	ДоговорНайден = НайтиДоговорПоВидуОперации(
		Результат.ХозяйственнаяОперация,
		Параметры,
		Результат.ХозяйственнаяОперация.ВидОперацииДокумента);
	
	Если Не ДоговорНайден Тогда
		УстановитьНовыйДоговорПоВидуОперации(Результат.ХозяйственнаяОперация, Параметры);
	КонецЕсли;
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияВнесениеПредпринимателемЛичныхСредств(Параметры)
	
	// Классификация по ISO2002
	// Family    = "RCCN"; // Received Cash Concentration
	// SubFamily = "COAT"; // Corporate Own Account Transfer
	
	Если Параметры.ПроверитьПрименимостьПравила Тогда
	
		Если Параметры.ВладелецСчета.ЮридическоеФизическоеЛицо <> Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		Если Не БанковскиеПравила.ЭтоСчетПереводовФизическимЛицам(Параметры.Операция.БалансовыйСчет) Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
		ПлательщикИПолучательОдноФизическоеЛицо = ПлательщикИПолучательОдноФизическоеЛицо(
			Параметры.Операция.ПлательщикИдентификаторы,
			Параметры.Операция.ПолучательИдентификаторы,
			Параметры.УчастникиОпераций);
		
		Если Не ПлательщикИПолучательОдноФизическоеЛицо Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	УстановитьФизическоеЛицо(Результат.ХозяйственнаяОперация, Параметры);
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияОплатаОтНовогоПокупателя(Параметры)
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило); // Дежурное правило
	
	// Выполняем в том случае, если нет подходящих договоров
	УстановитьНовыйДоговорПоВидуОперации(Результат.ХозяйственнаяОперация, Параметры);
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Общие

Функция ХозяйственнаяОперацияПоВидуДоговора(Параметры)
	
	// Служебная, следует вызывать из других ХозяйственнаяОперация...()
	// Проверяет, есть ли договоры, подходящие для переданного вида операции.
	// Если есть, то хозяйственная операция определяется переданным видом договора.
	
	Если Не ЗначениеЗаполнено(Параметры.Правило.ОсновнойВидОперации) Тогда
		Возврат НовыйРезультатОпределенияХозяйственнойОперации();
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	
	НайденДоговор = НайтиДоговорПоВидуОперации(
		Результат.ХозяйственнаяОперация,
		Параметры,
		Параметры.Правило.ОсновнойВидОперации);
		
	Если Не НайденДоговор Тогда
		Возврат НовыйРезультатОпределенияХозяйственнойОперации();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ХозяйственнаяОперацияПереводМеждуСобственнымиСчетами(Параметры)
	
	// Классификация по ISO2002
	// Family    = 
	//  "ICCN"; // Issued Cash Concentration
	// или
	//  "RCCN"; // Received Cash Concentration
	// SubFamily = "ICCT"; // Intra Company Transfer
	
	Отбор = Новый Структура;
	Отбор.Вставить("Тип",      Тип("СправочникСсылка.БанковскиеСчета"));
	Отбор.Вставить("Владелец", Параметры.ВладелецСчета.Организация);
	
	ОписаниеСчетаПолучателя = НайтиСсылку(Отбор, Параметры, "БанковскийСчетКонтрагента");
	
	Если ОписаниеСчетаПолучателя <> Неопределено Тогда
		СчетПолучателя = ОписаниеСчетаПолучателя.Ссылка;
	Иначе
		Если Параметры.ПроверитьПрименимостьПравила Тогда
			Возврат НовыйРезультатОпределенияХозяйственнойОперации();
		Иначе
			СчетПолучателя = Справочники.БанковскиеСчета.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Результат = НовыйРезультатОпределенияХозяйственнойОперации(Истина, Параметры.Правило);
	Результат.ХозяйственнаяОперация.Вставить("БанковскийСчетКонтрагента", СчетПолучателя);
	Результат.ХозяйственнаяОперация.Вставить("Контрагент",                Параметры.ВладелецСчета.Организация);
	
	УстановитьСтатьюДвиженияДенежныхСредств(Результат.ХозяйственнаяОперация, Параметры);
	
	Возврат Результат;
	
КонецФункции

Функция ПлательщикИПолучательОдноФизическоеЛицо(ПлательщикИдентификаторы, ПолучательИдентификаторы, УчастникиОпераций)
	
	// Проверим совпадение идентификаторов физического лица плательщика и получателя
	
	ПлательщикИПолучательОдноФизическоеЛицо = Ложь;
	Для Каждого ИдентификаторПлательщика Из ПлательщикИдентификаторы Цикл
		
		Если ИдентификацияУчастниковБанковскихОпераций.ЭтоИдентификаторФизическогоЛица(ИдентификаторПлательщика, УчастникиОпераций) 
			И ПолучательИдентификаторы.Найти(ИдентификаторПлательщика) <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция НовыйКешОбщихПараметров()

	Результат = Новый Структура();
	Результат.Вставить("ИспользоватьВалютныйУчет", 					ПолучитьФункциональнуюОпцию("ИспользоватьВалютныйУчет"));
	Результат.Вставить("ИспользоватьСтатьиДвиженияДенежныхСредств", ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиДвиженияДенежныхСредств"));
	Результат.Вставить("ВалютаРегламентированногоУчета", 			ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	// Заполняются по мере необходимости
	Результат.Вставить("ВидыДоговоровПоВидамОпераций", 				Новый Соответствие); // в ОпределитьВидДоговораСКонтрагентом()
	Результат.Вставить("РеквизитыНовыхОбъектовИнформационнойБазы", 	Новый Соответствие); // в ЗаполнитьПустыеРеквизитыНовогоОбъекта()
	
	Возврат Результат;	
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПоискУчастниковОпераций

// Следует использовать при распознавании хозяйственных операций.
// В отличие от методов из ИдентификацияУчастниковБанковскихОпераций,
// методы из этой области сохраняют в параметрах определения хозяйственной операции
// к какой стороне операции относится каждая ссылка.
// Это позволяет корректно заполнить реквизиты новых объектов, не участвующие в идентификации ссылок,
// сведениями, содержащимися в выписке.
// Например, с помощью этого подхода заполняется город банка или наименование контрагента.
// 
// При вызове методов из области ПоискУчастниковОпераций еще нет уверенности, что ссылка будет включена в распознанную операцию.
// Поэтому непосредственно заполнение реквизитов новых объектов выполняется по завершении распознавания хозяйственной операции,
// только для тех ссылок, которые фактически включены в распознанную операцию - см. ЗаполнитьРеквизитыНовыхОбъектов()
//

// Параметры:
//  Отбор           - Структура - для передачи в ИдентификацияУчастниковБанковскихОпераций.НайтиСсылку()
//  Параметры       - см. "НовыйПараметрыОпределенияХозяйственнойОперации"
//  ИмяПоля         - строка, используется для записи в протокол и получения данных документа
Функция НайтиСсылку(Отбор, Параметры, ИмяПоля)
	
	ПротоколВыбора = ИдентификацияУчастниковБанковскихОпераций.НовыйПротоколВыбораСсылок();
	
	ОписаниеСсылки = ИдентификацияУчастниковБанковскихОпераций.НайтиСсылку(
		Параметры.Операция[Параметры.СторонаКонтрагента + "Идентификаторы"],
		Параметры.УчастникиОпераций, 
		Отбор,
		,// ПриоритетнаяСсылка
		ПротоколВыбора,
		Параметры[Параметры.СторонаКонтрагента + "КешИдентификаторов"]);
	
	Если ОписаниеСсылки <> Неопределено Тогда
		
		ЗаписатьИсточникСсылки(Параметры.ИсточникиСсылок, ОписаниеСсылки.Ссылка, Параметры.СторонаКонтрагента);
		
	КонецЕсли;
	
	Параметры.ПротоколыВыбораСсылок.Вставить(ИмяПоля, ПротоколВыбора);
	
	Возврат ОписаниеСсылки;
	
КонецФункции

Функция НайтиСсылки(Отбор, Параметры)
	
	Возврат ИдентификацияУчастниковБанковскихОпераций.НайтиСсылки(
		Параметры.Операция[Параметры.СторонаКонтрагента + "Идентификаторы"],
		Параметры.УчастникиОпераций,
		Отбор,
		,
		Параметры[Параметры.СторонаКонтрагента + "КешИдентификаторов"]);
	
КонецФункции

Функция ВыбратьСсылку(НайденныеСсылки, Параметры, ИмяПоля)
	
	ПротоколВыбора = ИдентификацияУчастниковБанковскихОпераций.НовыйПротоколВыбораСсылок();
	
	ОписаниеСсылки = ИдентификацияУчастниковБанковскихОпераций.ВыбратьСсылку(
		НайденныеСсылки,
		Параметры.УчастникиОпераций,
		,// ПриоритетнаяСсылка
		ПротоколВыбора,
		Параметры[Параметры.СторонаКонтрагента + "КешИдентификаторов"]);
	
	Если ОписаниеСсылки <> Неопределено Тогда
		ЗаписатьИсточникСсылки(Параметры.ИсточникиСсылок, ОписаниеСсылки.Ссылка, Параметры.СторонаКонтрагента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПротоколВыбора) Тогда
		Параметры.ПротоколыВыбораСсылок.Вставить(ИмяПоля, ПротоколВыбора);
	КонецЕсли;
	
	Возврат ОписаниеСсылки;
	
КонецФункции

Функция СсылкаНового(Отбор, Тип, Параметры)
	
	Если Тип = Тип("СправочникСсылка.ДоговорыКонтрагентов")
		И Параметры.КешПроверенныхСвойствПравил.Свойство("ДоговорыКонтрагентовПоВидам") Тогда
		// При добавлении новой ссылки кеш устарел
		Параметры.КешПроверенныхСвойствПравил.Удалить("ДоговорыКонтрагентовПоВидам");
	КонецЕсли;
	
	Ссылка = ИдентификацияУчастниковБанковскихОпераций.СсылкаНового(
		Параметры.Операция[Параметры.СторонаКонтрагента + "Идентификаторы"],
		Отбор, 
		Тип,
		Параметры.УчастникиОпераций,
		Параметры[Параметры.СторонаКонтрагента + "КешИдентификаторов"]);
		
	ЗаписатьИсточникСсылки(Параметры.ИсточникиСсылок, Ссылка, Параметры.СторонаКонтрагента);
	
	Возврат Ссылка;
	
КонецФункции

#КонецОбласти

#Область Контрагенты

// Здесь под "контрагентами" понимаем другого участника операции.
//
// Это
// - плательщик, если речь идет о поступлении денег
// - получатель денег, если о списании.
//
// Как правило, это элемент справочника Контрагенты, но не только, например ФизическиеЛица или Организации.

Функция НайтиГосОрган(ХозяйственнаяОперация, Параметры, ВидДоговора = Неопределено)
	
	ВариантыГосОрган = Новый Массив; // Для того, чтобы найти элементы справочника, у которых флаг ГосОрган не установлен ошибочно
	ВариантыГосОрган.Добавить(Истина);
	ВариантыГосОрган.Добавить(Ложь);
	
	Отбор = Новый Структура;
	Отбор.Вставить("Тип",                       Тип("СправочникСсылка.Контрагенты"));
	Отбор.Вставить("ЮридическоеФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	
	Для Каждого ЭтоГосОрган Из ВариантыГосОрган Цикл
	
		Отбор.Вставить("ГосударственныйОрган", ЭтоГосОрган);
	
		Если ЗначениеЗаполнено(ВидДоговора) Тогда
			
			РезультатПоиска  = НайтиДоговорыКонтрагентов(Отбор, Параметры);
			ОписаниеДоговора = ВыбратьСсылку(РезультатПоиска, Параметры, "ДоговорКонтрагента");
			
			Если ОписаниеДоговора = Неопределено Тогда
				Возврат Ложь;
			Иначе
				УстановитьНайденныйДоговор(ХозяйственнаяОперация, ОписаниеДоговора, Параметры);
				Возврат Истина;
			КонецЕсли;
			
		Иначе
			
			ОписаниеКонтрагента = НайтиСсылку(Отбор, Параметры, "Контрагент");
			Если ОписаниеКонтрагента <> Неопределено Тогда
				ХозяйственнаяОперация.Вставить("Контрагент", ОписаниеКонтрагента.Ссылка);
				Возврат Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура УстановитьНайденныйДоговор(ХозяйственнаяОперация, ОписаниеДоговора, Параметры)
	
	ХозяйственнаяОперация.Вставить("Контрагент",         ОписаниеДоговора.ОписаниеСсылки.Владелец);
	ХозяйственнаяОперация.Вставить("ДоговорКонтрагента", ОписаниеДоговора.Ссылка);
	
	Если Параметры.ПротоколыВыбораСсылок.Свойство("ДоговорКонтрагента") Тогда
		Параметры.ПротоколыВыбораСсылок.Вставить("Контрагент", Параметры.ПротоколыВыбораСсылок.ДоговорКонтрагента); // Контрагента определили по договору
	КонецЕсли;
	
	ЗаписатьИсточникСсылки(Параметры.ИсточникиСсылок, ХозяйственнаяОперация.Контрагент, Параметры.СторонаКонтрагента);// Выбирается неявно - через Владелец
	
КонецПроцедуры

Функция НайтиДоговорПоВидуОперации(ХозяйственнаяОперация, Параметры, ВидОперации)
	
	ВидыДоговоров = ОпределитьВидДоговораСКонтрагентом(ВидОперации, Параметры.КешОбщихПараметров);
	
	Если Не ЗначениеЗаполнено(ВидыДоговоров) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Поиск договора по виду операции используется в разных правилах.
	// Поэтому как только понадобится искать договор по виду операции,
	// составим и поместим в кеш все договоры в разрезе видов операций.
	Если Параметры.КешПроверенныхСвойствПравил.Свойство("ДоговорыКонтрагентовПоВидам") Тогда
		ДоговорыПоВидам = Параметры.КешПроверенныхСвойствПравил.ДоговорыКонтрагентовПоВидам;
	Иначе
		ДоговорыПоВидам = Новый Структура;
		ДоговорыПоВидам.Вставить("УстановленныеОсновными", Новый Соответствие);
		ДоговорыПоВидам.Вставить("Обычные",                Новый Соответствие);
		
		ОтборДоговоров = Неопределено;
		Если ХозяйственнаяОперация.Свойство("Контрагент") И ЗначениеЗаполнено(ХозяйственнаяОперация.Контрагент) Тогда
			ОтборДоговоров = Новый Структура("Владелец", ХозяйственнаяОперация.Контрагент);
		КонецЕсли;
		
		Для Каждого КлючИЗначение Из НайтиДоговорыКонтрагентов(ОтборДоговоров, Параметры) Цикл
			
			ОписаниеСсылки = КлючИЗначение.Значение.ОписаниеСсылки;
			УстановленОсновным = ОписаниеСсылки.УстановленОсновным;
			ВидДоговора        = ОписаниеСсылки.ВидДоговора;
			
			ОтношениеКОсновным = ?(УстановленОсновным, "УстановленныеОсновными", "Обычные");
			
			НайденныеСсылки = ДоговорыПоВидам[ОтношениеКОсновным][ВидДоговора];
			
			Если НайденныеСсылки = Неопределено Тогда
				НайденныеСсылки = Новый Соответствие;
				ДоговорыПоВидам[ОтношениеКОсновным].Вставить(ВидДоговора, НайденныеСсылки);
			КонецЕсли;
			НайденныеСсылки.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			
		КонецЦикла;
		Параметры.КешПроверенныхСвойствПравил.Вставить("ДоговорыКонтрагентовПоВидам", ДоговорыПоВидам);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДоговорыПоВидам.УстановленныеОсновными) И Не ЗначениеЗаполнено(ДоговорыПоВидам.Обычные) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Ищем договоры
	ВидыОтношенияКОсновным = Новый Массив;
	ВидыОтношенияКОсновным.Добавить("УстановленныеОсновными"); // сначала ищем среди основных
	ВидыОтношенияКОсновным.Добавить("Обычные");
	Для Каждого ОтношениеКОсновным Из ВидыОтношенияКОсновным Цикл
		Для Каждого ВидДоговора Из ВидыДоговоров Цикл
			НайденныеСсылки = ДоговорыПоВидам[ОтношениеКОсновным][ВидДоговора];
			Если НайденныеСсылки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ОписаниеДоговора = ВыбратьСсылку(НайденныеСсылки, Параметры, "ДоговорКонтрагента");
			Если ОписаниеДоговора = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			УстановитьНайденныйДоговор(ХозяйственнаяОперация, ОписаниеДоговора, Параметры);
			Возврат Истина;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура УстановитьБанк(ХозяйственнаяОперация, Параметры, ВидДоговора = Неопределено)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Тип",                       Тип("СправочникСсылка.Контрагенты"));
	Отбор.Вставить("ЮридическоеФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	Отбор.Вставить("ГосударственныйОрган",      Ложь);
	
	ПоискКонтрагенты = НайтиСсылки(Отбор, Параметры);
	
	Если Не ЗначениеЗаполнено(ПоискКонтрагенты) Тогда
		УстановитьНовогоКонтрагента(ХозяйственнаяОперация, Отбор, Параметры, ВидДоговора);
		Возврат;
	КонецЕсли;
	
	Если ВидДоговора = Неопределено Тогда
		ОписаниеКонтрагента = ВыбратьСсылку(ПоискКонтрагенты, Параметры, "Контрагент");
		ХозяйственнаяОперация.Вставить("Контрагент", ОписаниеКонтрагента.Ссылка);
		Возврат;
	КонецЕсли;
	
	// Найдем или создадим договор
	Контрагент = Неопределено;
	Договор    = Неопределено;
	
	// Найдем договор этого вида. Возможно, и с контрагентом определимся.
	ОтборДоговор = Новый Структура;
	ОтборДоговор.Вставить("Тип", Тип("СправочникСсылка.ДоговорыКонтрагентов"));
	Для Каждого ОписаниеКонтрагента Из ПоискКонтрагенты Цикл
		ОтборДоговор.Вставить("Владелец", ОписаниеКонтрагента.Ссылка);
		ОписаниеДоговора = НайтиСсылку(ОтборДоговор, Параметры, "ДоговорКонтрагента");
		Если ОписаниеДоговора <> Неопределено Тогда
			Контрагент = ОписаниеДоговора.Владелец;
			Договор    = ОписаниеДоговора.Ссылка;
			Параметры.ПротоколыВыбораСсылок.Вставить("Контрагент", Параметры.ПротоколыВыбораСсылок.ДоговорКонтрагента); // Контрагента определили по договору
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Контрагент = Неопределено Тогда
		ОписаниеКонтрагента = ВыбратьСсылку(ПоискКонтрагенты, Параметры, "Контрагент");
		Контрагент = ОписаниеКонтрагента.Ссылка;
	КонецЕсли;
	
	ХозяйственнаяОперация.Вставить("Контрагент", Контрагент);
	
	Если Договор <> Неопределено Тогда
		ХозяйственнаяОперация.Вставить("ДоговорКонтрагента", Договор);
	Иначе
		ОтборДоговор.Вставить("Владелец", Контрагент);
		УстановитьНовыйДоговор(ХозяйственнаяОперация, ОтборДоговор, Параметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьФизическоеЛицо(ХозяйственнаяОперация, Параметры)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Тип", Тип("СправочникСсылка.ФизическиеЛица"));
	
	ОписаниеФизическогоЛица = НайтиСсылку(Отбор, Параметры, "Контрагент");
	
	Если ОписаниеФизическогоЛица <> Неопределено Тогда
		
		ФизическоеЛицо = ОписаниеФизическогоЛица.Ссылка;
		
	Иначе
		
		ФизическоеЛицо = СсылкаНового(Отбор, Отбор.Тип, Параметры);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		ХозяйственнаяОперация.Вставить("Контрагент", ФизическоеЛицо);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьНовыйДоговорПоВидуОперации(ХозяйственнаяОперация, Параметры, Знач Отбор = Неопределено)
	
	// Договор будет вида по умолчанию
	ВидыДоговоров = ОпределитьВидДоговораСКонтрагентом(ХозяйственнаяОперация.ВидОперацииДокумента, Параметры.КешОбщихПараметров);
	Если Не ЗначениеЗаполнено(ВидыДоговоров) Тогда
		Возврат;
	КонецЕсли;
	
	ВидДоговора = ВидыДоговоров[0];
	
	// Ищем контрагента
	Если Отбор = Неопределено Тогда
		Отбор = Новый Структура;
	Иначе
		Отбор = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(Отбор);
	КонецЕсли;
	Отбор.Вставить("Тип", Тип("СправочникСсылка.Контрагенты"));
	
	ОписаниеКонтрагента = НайтиСсылку(Отбор, Параметры, "Контрагент");
		
	Если ОписаниеКонтрагента = Неопределено Тогда
		УстановитьНовогоКонтрагента(ХозяйственнаяОперация, Отбор, Параметры, ВидДоговора);
		Возврат;
	КонецЕсли;
	
	ХозяйственнаяОперация.Вставить("Контрагент", ОписаниеКонтрагента.Ссылка);
	// Создадим только договор
	ОтборДоговор = Новый Структура;
	ОтборДоговор.Вставить("Владелец",    ОписаниеКонтрагента.Ссылка);
	ОтборДоговор.Вставить("ВидДоговора", ВидДоговора);
	УстановитьНовыйДоговор(ХозяйственнаяОперация, ОтборДоговор, Параметры);
	
КонецПроцедуры

Функция НайтиДоговорыКонтрагентов(Отбор, Параметры)
	
	ОтборДоговор = ОтборДоговорКонтрагента(Параметры);
	Если ЗначениеЗаполнено(Отбор) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ОтборДоговор, Отбор, Истина);
	КонецЕсли;
	
	Возврат НайтиСсылки(ОтборДоговор, Параметры);
	
КонецФункции

Процедура УстановитьБанковскийСчетКонтрагента(ХозяйственнаяОперация, Параметры)
	
	Если ХозяйственнаяОперация.Свойство("БанковскийСчетКонтрагента") 
		Или Не ХозяйственнаяОперация.Свойство("Контрагент") Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = ОтборБанковскийСчетКонтрагента(ХозяйственнаяОперация.Контрагент, Параметры.ВладелецСчета.ВалютаСчета);
	
	ОписаниеСчета = НайтиСсылку(Отбор, Параметры, "БанковскийСчетКонтрагента");
		
	Если ОписаниеСчета = Неопределено Тогда
		УстановитьНовыйБанковскийСчетКонтрагента(ХозяйственнаяОперация, Отбор, Параметры);
	Иначе
		ХозяйственнаяОперация.Вставить("БанковскийСчетКонтрагента", ОписаниеСчета.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Функция ОтборБанковскийСчетКонтрагента(Контрагент, ВалютаСчета)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Тип",                   Тип("СправочникСсылка.БанковскиеСчета"));
	Отбор.Вставить("Владелец",              Контрагент);
	Отбор.Вставить("ВалютаДенежныхСредств", ВалютаСчета);
	
	Возврат Отбор;
	
КонецФункции

Процедура УстановитьПоказателиРасчетов(ХозяйственнаяОперация, Параметры)
	
	Если Не ХозяйственнаяОперация.Свойство("ВидОперацииДокумента") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не УчетДенежныхСредствКлиентСервер.ЕстьРасчетыСКонтрагентами(ХозяйственнаяОперация.ВидОперацииДокумента)
		И Не УчетДенежныхСредствКлиентСервер.ЕстьРасчетыПоКредитам(ХозяйственнаяОперация.ВидОперацииДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = Параметры.КешОбщихПараметров.ВалютаРегламентированногоУчета;
	
	// ВалютаВзаиморасчетов
	ВалютаВзаиморасчетов = Неопределено;
	Если ХозяйственнаяОперация.Свойство("ДоговорКонтрагента")
		И ЗначениеЗаполнено(ХозяйственнаяОперация.ДоговорКонтрагента) Тогда
		ОписаниеДоговора = ИдентификацияУчастниковБанковскихОпераций.ОписаниеСсылки(
			ХозяйственнаяОперация.ДоговорКонтрагента,
			Параметры.УчастникиОпераций);
		Если ОписаниеДоговора <> Неопределено Тогда
			ВалютаВзаиморасчетов = ОписаниеДоговора.ВалютаВзаиморасчетов;
		КонецЕсли;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
		ВалютаВзаиморасчетов = Параметры.ВладелецСчета.ВалютаСчета;
	КонецЕсли;
	
	Если Не ХозяйственнаяОперация.Свойство("ВалютаВзаиморасчетов") Или ХозяйственнаяОперация.ВалютаВзаиморасчетов <> ВалютаВзаиморасчетов Тогда
		ХозяйственнаяОперация.Вставить("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
		ХозяйственнаяОперация.Удалить("КурсВзаиморасчетов");
		ХозяйственнаяОперация.Удалить("КратностьВзаиморасчетов");
	КонецЕсли;
	
	// КурсВзаиморасчетов, КратностьВзаиморасчетов
	Если Не ХозяйственнаяОперация.Свойство("КурсВзаиморасчетов") 
		Или Не ХозяйственнаяОперация.Свойство("КратностьВзаиморасчетов") Тогда
		
		Если ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета Тогда
			КурсКратность = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаВзаиморасчетов, Параметры.Операция.ДатаИсполнения);
			ХозяйственнаяОперация.Вставить("КурсВзаиморасчетов",      КурсКратность.Курс);
			ХозяйственнаяОперация.Вставить("КратностьВзаиморасчетов", КурсКратность.Кратность);
		Иначе
			ХозяйственнаяОперация.Вставить("КурсВзаиморасчетов",      1);
			ХозяйственнаяОперация.Вставить("КратностьВзаиморасчетов", 1);
		КонецЕсли;
		ХозяйственнаяОперация.Удалить("СуммаВзаиморасчетов");
		
	КонецЕсли;
	
	// СуммаВзаиморасчетов
	Если Не ХозяйственнаяОперация.Свойство("СуммаВзаиморасчетов") Тогда
		
		Если Параметры.ВладелецСчета.ВалютаСчета <> ВалютаРегламентированногоУчета Тогда
			КурсКратностьВалютыПлатежа = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
				Параметры.ВладелецСчета.ВалютаСчета,
				Параметры.Операция.ДатаИсполнения);
		Иначе
			КурсКратностьВалютыПлатежа = Новый Структура();
			КурсКратностьВалютыПлатежа.Вставить("Курс", 		1);
			КурсКратностьВалютыПлатежа.Вставить("Кратность", 	1);
		КонецЕсли;
			
		СуммаВзаиморасчетов = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
			Параметры.Операция.Сумма,
			Параметры.ВладелецСчета.ВалютаСчета,             // Из - Валюта
			ХозяйственнаяОперация.ВалютаВзаиморасчетов,      // В  - Валюта
			КурсКратностьВалютыПлатежа.Курс,                 // Из - Курс
			ХозяйственнаяОперация.КурсВзаиморасчетов,        // В  - Курс
			КурсКратностьВалютыПлатежа.Кратность,            // Из - Кратность
			ХозяйственнаяОперация.КратностьВзаиморасчетов);  // В  - Кратность
		
		ХозяйственнаяОперация.Вставить("СуммаВзаиморасчетов", СуммаВзаиморасчетов);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПоказателиНДС(ХозяйственнаяОперация, Параметры)
	
	Если Не ХозяйственнаяОперация.Свойство("ВидОперацииДокумента") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не УчетДенежныхСредствКлиентСервер.ЕстьРасчетыСКонтрагентами(ХозяйственнаяОперация.ВидОперацииДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ХозяйственнаяОперация.Свойство("СтавкаНДС") Тогда
		
		ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Параметры.ВладелецСчета.Организация, Параметры.Операция.ДатаИсполнения);
		СтавкаНДС     = УчетНДСКлиентСервер.СтавкаНДСПоУмолчанию(ПлательщикНДС);
		
		Если ПлательщикНДС И ХозяйственнаяОперация.Свойство("ДоговорКонтрагента") Тогда
			
			ОписаниеНовогоДоговора = ИдентификацияУчастниковБанковскихОпераций.ОписаниеНовогоОбъекта(
				ХозяйственнаяОперация.ДоговорКонтрагента,
				Параметры.УчастникиОпераций);
				
			Если ОписаниеНовогоДоговора = Неопределено Тогда
				// Это уже не новый договор и пользователь мог для него указать особенности исчисления ставки
				ОписаниеСсылки = ИдентификацияУчастниковБанковскихОпераций.ОписаниеСсылки(
					ХозяйственнаяОперация.ДоговорКонтрагента,
					Параметры.УчастникиОпераций);
				Если ОписаниеСсылки <> Неопределено Тогда
					СтавкаНДС = УчетНДСКлиентСервер.СтавкаНДСВДоговореКонтрагента(
						ОписаниеСсылки.ВидДоговора,
						ОписаниеСсылки.ПредъявляетНДС,
						ОписаниеСсылки.УчетАгентскогоНДС);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		ХозяйственнаяОперация.Вставить("СтавкаНДС", СтавкаНДС);
		ХозяйственнаяОперация.Удалить("СуммаНДС");
		
	КонецЕсли;
	
	Если Не ХозяйственнаяОперация.Свойство("СуммаНДС") Тогда
		
		ЗначениеСтавкиНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ХозяйственнаяОперация.СтавкаНДС);
		СуммаНДС          = Окр(УчетНДСКлиентСервер.РассчитатьСуммуНДС(Параметры.Операция.Сумма, Истина, ЗначениеСтавкиНДС), 2);
		ХозяйственнаяОперация.Вставить("СуммаНДС",  СуммаНДС);
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура УстановитьНовогоКонтрагента(ХозяйственнаяОперация, Отбор, Параметры, ВидДоговора = Неопределено)
	
	Контрагент = СсылкаНового(
		Отбор,
		Тип("СправочникСсылка.Контрагенты"),
		Параметры);
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	ХозяйственнаяОперация.Вставить("Контрагент", Контрагент);
	
	Если ЗначениеЗаполнено(ВидДоговора) Тогда
		ОтборДоговор = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(Отбор);
		ОтборДоговор.Вставить("Владелец",    Контрагент);
		ОтборДоговор.Вставить("ВидДоговора", ВидДоговора);
		УстановитьНовыйДоговор(ХозяйственнаяОперация, ОтборДоговор, Параметры);
	КонецЕсли;
	
	ОтборБанковскогоСчета = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(Отбор);
	ОтборБанковскогоСчета.Вставить("Владелец", Контрагент);
	
	УстановитьНовыйБанковскийСчетКонтрагента(ХозяйственнаяОперация, ОтборБанковскогоСчета, Параметры);
	
КонецПроцедуры

Процедура УстановитьКонтрагента(ХозяйственнаяОперация, Параметры)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Тип", Тип("СправочникСсылка.Контрагенты"));

	ОписаниеКонтрагента = НайтиСсылку(Отбор, Параметры, "Контрагент");
	Если ОписаниеКонтрагента <> Неопределено Тогда
		ХозяйственнаяОперация.Вставить("Контрагент", ОписаниеКонтрагента.Ссылка);
	Иначе
		УстановитьНовогоКонтрагента(ХозяйственнаяОперация, Отбор, Параметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьНовыйДоговор(ХозяйственнаяОперация, Отбор, Параметры)
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Отбор, ОтборДоговорКонтрагента(Параметры), Истина);
	
	Договор = СсылкаНового(
		Отбор,
		Тип("СправочникСсылка.ДоговорыКонтрагентов"),
		Параметры);
		
	Если ЗначениеЗаполнено(Договор) Тогда
		ХозяйственнаяОперация.Вставить("ДоговорКонтрагента", Договор);
	КонецЕсли;
	
КонецПроцедуры

Функция ОтборДоговорКонтрагента(Параметры)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Тип",         Тип("СправочникСсылка.ДоговорыКонтрагентов"));
	Отбор.Вставить("Организация", Параметры.ВладелецСчета.Организация);
	
	Если Параметры.КешОбщихПараметров.ИспользоватьВалютныйУчет Тогда
		
		Если Параметры.ВладелецСчета.ВалютаСчета = Параметры.КешОбщихПараметров.ВалютаРегламентированногоУчета Тогда
			// Оплата в национальной валюте, расчеты могут быть и в национальной валюте и в условных единицах.
			Отбор.Вставить("ОплатаВВалюте",        Ложь);
		Иначе
			// Оплата и расчеты в иностранной валюте
			Отбор.Вставить("ОплатаВВалюте",        Истина);
			Отбор.Вставить("ВалютаВзаиморасчетов", Параметры.ВладелецСчета.ВалютаСчета);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Отбор;
	
КонецФункции

Процедура УстановитьНовыйБанковскийСчетКонтрагента(ХозяйственнаяОперация, Отбор, Параметры)
	
	Отбор.Вставить("ВалютаДенежныхСредств", Параметры.ВладелецСчета.ВалютаСчета);
	
	БанковскийСчет = СсылкаНового(
		Отбор,
		Тип("СправочникСсылка.БанковскиеСчета"),
		Параметры);
	
	Если ЗначениеЗаполнено(БанковскийСчет) Тогда
		ХозяйственнаяОперация.Вставить("БанковскийСчетКонтрагента", БанковскийСчет);
	КонецЕсли;
	
КонецПроцедуры

Функция ОписаниеГосОргана(РеквизитыПлатежаВБюджет)
	
	Описание = Новый Структура;
	Описание.Вставить("Тип",                       Тип("СправочникСсылка.Контрагенты"));
	Описание.Вставить("ЮридическоеФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	Описание.Вставить("ГосударственныйОрган",      Истина);
	
	Если РеквизитыПлатежаВБюджет.Свойство("ПоказательКБК") Тогда
		КБК = РеквизитыПлатежаВБюджет.ПоказательКБК;
	Иначе
		КБК = "";
	КонецЕсли;
	
	ВидГосударственногоОргана = ПлатежиВБюджетПереопределяемый.ВидГосударственногоОргана(КБК);
	
	Если НЕ ЗначениеЗаполнено(ВидГосударственногоОргана) Тогда
		ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.Прочий;
	КонецЕсли;
	Описание.Вставить("ВидГосударственногоОргана", ВидГосударственногоОргана);
	
	Возврат Описание;
	
КонецФункции

Функция ОпределитьВидДоговораСКонтрагентом(ВидОперации, КешОбщихПараметров)
	
	Результат = КешОбщихПараметров.ВидыДоговоровПоВидамОпераций[ВидОперации];
	Если Результат = Неопределено Тогда
		Результат = УчетДенежныхСредствКлиентСервер.ОпределитьВидДоговораСКонтрагентом(ВидОперации);
		КешОбщихПараметров.ВидыДоговоровПоВидамОпераций.Вставить(ВидОперации, Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область РеквизитыНовыхОбъектов

Процедура ЗаписатьИсточникСсылки(ИсточникиСсылок, Ссылка, СторонаОперации)
	
	ИсточникиСсылок.Вставить(Ссылка, СторонаОперации);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыНовыхОбъектов(УчастникиОпераций, ХозяйственнаяОперация, Операция, ИсточникиСсылок, ВладелецСчета, КешОписанийРеквизитов = Неопределено)
	
	Для Каждого РеквизитОперации Из ХозяйственнаяОперация Цикл
		
		ОписаниеНовогоОбъекта = ИдентификацияУчастниковБанковскихОпераций.ОписаниеНовогоОбъекта(РеквизитОперации.Значение, УчастникиОпераций);
		Если ОписаниеНовогоОбъекта = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СторонаОперации = ИсточникиСсылок[ОписаниеНовогоОбъекта.Ссылка];
		Если СторонаОперации = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьПустыеРеквизитыНовогоОбъекта(ОписаниеНовогоОбъекта, Операция, СторонаОперации, ВладелецСчета, КешОписанийРеквизитов);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПустыеРеквизитыНовогоОбъекта(ОписаниеНовогоОбъекта, Операция, СторонаОперации, ВладелецСчета, КешОписанийРеквизитов = Неопределено)
	
	// из Операция выберем элементы для заполнения реквизитов объекта с учетом СторонаОперации
	ВсеРеквизиты = Операция[СторонаОперации + "Реквизиты"];
	
	РеквизитыНовогоОбъекта = Новый Структура;
	Если ТипЗнч(ОписаниеНовогоОбъекта.Ссылка) = Тип("СправочникСсылка.Контрагенты") Тогда
		ДополнитьРеквизитыНовогоОбъекта(РеквизитыНовогоОбъекта, ВсеРеквизиты, "НаименованиеПолное", "Наименование");
	ИначеЕсли ТипЗнч(ОписаниеНовогоОбъекта.Ссылка) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ДополнитьРеквизитыНовогоОбъекта(РеквизитыНовогоОбъекта, ВсеРеквизиты, "Наименование");
	ИначеЕсли ТипЗнч(ОписаниеНовогоОбъекта.Ссылка) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		// См. РаботаСБанкамиБП.УстановитьБанк()
		ДополнитьРеквизитыНовогоОбъекта(РеквизитыНовогоОбъекта, ВсеРеквизиты, "НаименованиеБанка", "Банк");
		ДополнитьРеквизитыНовогоОбъекта(РеквизитыНовогоОбъекта, ВсеРеквизиты, "ГородБанка",        "ГородБанка");
		ДополнитьРеквизитыНовогоОбъекта(РеквизитыНовогоОбъекта, ВсеРеквизиты, "КоррСчетБанка",     "КорСчет");
		// БИК банка может не поставляться, если операция внутри банка. В таком случае возьмем БИК владельца счета.
		Если Не ЗначениеЗаполнено(ОписаниеНовогоОбъекта.БИК) 
			И Не ЗначениеЗаполнено(ОписаниеНовогоОбъекта.ВозможныйБИК)
			И ЗначениеЗаполнено(ВладелецСчета.БИК) Тогда
			РеквизитыНовогоОбъекта.Вставить("ВозможныйБИК", ВладелецСчета.БИК);
		КонецЕсли;
	КонецЕсли;
	
	// заполним недостающие элементы в ОписаниеНовогоОбъекта
	ИдентификацияУчастниковБанковскихОпераций.ЗаполнитьПустыеРеквизитыНовогоОбъекта(
		ОписаниеНовогоОбъекта,
		РеквизитыНовогоОбъекта,
		КешОписанийРеквизитов);
	
КонецПроцедуры

Процедура ДополнитьРеквизитыНовогоОбъекта(РеквизитыНовогоОбъекта, ВсеРеквизиты, ИмяРеквизита, Знач ИмяРеквизитаВсеРеквизиты = "")
	
	Если ПустаяСтрока(ИмяРеквизитаВсеРеквизиты) Тогда
		ИмяРеквизитаВсеРеквизиты = ИмяРеквизита;
	КонецЕсли;
	
	Если Не ВсеРеквизиты.Свойство(ИмяРеквизитаВсеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыНовогоОбъекта.Вставить(ИмяРеквизита, ВсеРеквизиты[ИмяРеквизитаВсеРеквизиты]);
	
КонецПроцедуры

#КонецОбласти

#Область СтатьиДДС

Процедура УстановитьСтатьюДвиженияДенежныхСредств(ХозяйственнаяОперация, Параметры)
	
	Если Не Параметры.КешОбщихПараметров.ИспользоватьСтатьиДвиженияДенежныхСредств Тогда
		Возврат;
	КонецЕсли;
	
	СтатьяДвиженияДенежныхСредств = Параметры.Правило.ОсновнаяСтатьяДДС;
	
	Налог = "";
	ВидНалоговогоОбязательства = "";
	Если ХозяйственнаяОперация.Свойство("Налог", Налог)
		И ХозяйственнаяОперация.Свойство("ВидНалоговогоОбязательства", ВидНалоговогоОбязательства)
			И (ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.Налог 
			ИЛИ ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.НалогАкт
			ИЛИ ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.НалогСам) Тогда
		ВидНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Налог, "ВидНалога");
		Если ВидНалога = Перечисления.ВидыНалогов.НалогНаПрибыль_РегиональныйБюджет
			ИЛИ ВидНалога = Перечисления.ВидыНалогов.НалогНаПрибыль_ФедеральныйБюджет Тогда
			КонтекстОперации = "НалогНаПрибыль";
			СтатьяДвиженияДенежныхСредств = УчетДенежныхСредствБП.СтатьяДДСПоУмолчанию(КонтекстОперации);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтатьяДвиженияДенежныхСредств) Тогда
		Возврат;
	КонецЕсли;
	
	ХозяйственнаяОперация.Вставить("СтатьяДвиженияДенежныхСредств", СтатьяДвиженияДенежныхСредств);
	
КонецПроцедуры

#КонецОбласти	

#Область Документы

Функция ТипДокументаОперацииВыписки(Операция)
	
	Если Операция.ПоступилоСписано = "Списано" Тогда
		Возврат Тип("ДокументСсылка.СписаниеСРасчетногоСчета");
	ИначеЕсли Операция.ПоступилоСписано = "Поступило" Тогда
		Возврат Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет");
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#Область ПоискРанееСозданныхДокументов

#Область Описание
// Алгоритм поиска документов
//
// 0. Выполняем для каждой выписки раздельно. При этом отдельно ищем
//    a. платежные поручения (в терминах ISO 20022 - initiation documents; серия документов pain)
//    b. ранее созданные документы поступления на счет и списания со счета (в ISO 20022 - серия документов camt)
// Для тех записей выписки, для которых нашли платежные поручения, документы списания со счета не ищем - 
// устанавливаем через связи документов в ИБ (документы-основания).
//
// 1. Платежные поручения
//
// 1.1.  Поиск ссылок
//
// 1.1.1 Из информационной базы выбираем все платежные поручения по тому счету, выписку по которому обрабатываем,
//       за период, определенный по загружаемому файлу.
//       Период определяется исходя из дат документов, а не дат движения по банковскому счету.
//
// 1.1.2 Для каждого выбранного из ИБ документа определяем набор идентификаторов.
//
//       Формат обмена не обеспечивает однозначной идентификации:
//       - в информационной базе документы имеют префикс, а в банк передаются без префикса
//       - при передаче в банк и из банка длина идентификатора может быть сокращена до 6 символов
//       - нецифровые символы в номере в информационной системе банка могут быть утрачены
//
//       Поэтому сначала выбираем документы по наименее строгим критериям (минимально необходимому идентификатору, о нем - ниже),
//       а если таких документов оказывается несколько, то среди них выбираем наиболее соответствующие друг другу.
//
//       Набор идентификаторов документа такой:
//      a. Номер документа без префикса (т.е. такой, который передается в банк или печатается в платежном поручении)
//      b. "Чистый" номер документа - без префикса, не более 6 символов, по возможности состоящий из цифр
//          (если в правых 6 символах есть цифры, то в "чистый номер" включаются только они;
//           если нет ни одной цифры, то выбираются все 6 правых символов).
//      c. Минимально необходимый идентификатор - строка, которая включает
//          Дату; Номер счета получателя; "чистый номер".
//          
// 1.1.3 Те же идентификаторы определяем для каждой записи файла, которая похожа на платежное поручение, оформленное владельцем счета.
//
// 1.1.4 Сопоставляем документы по минимальному необходимому идентификатору.
//       Получаем пары:
//       - идентификатор (порядковый номер) записи в файле
//       - ссылка.
//
//       В этих парах одной записи в файле может соответствовать несколько ссылок и наоборот.
//
// 1.1.5 Для каждой пары определяем "вес" или степень соответствия записи в файле и ссылки.
//
//       Скажем, степень соответствия может быть повышена при 
//       - точном соответствим номера документа без префикса
//       - ИНН получателя денег
//       - суммы
//       Также степень соответствия может быть повышена, если документ в информационной базе более "готовый" - скажем, проведен.
//
//       В протокол фиксируем, какие признаки ссылки и записи файла определили степень соответствия.
//
// 1.2. Выбор наиболее подходящих пар - см. ВыбратьЛучшиеСоответствияДокументовОперациям()
//
// 2. Часть записей в выписке не инициированы владельцем счета. Для таких платежек в базе нет.
//    Для инициированных владельцем счета платежей также в ИБ могут отсутствовать документы "Платежное поручение".
//
//    Для всех таких записей следует попытаться найти в информационной базе соответствующие документы -
//    "Поступление на счет" и "Списание со счета"
//    При этом, искать следует только среди таких документов информацинной базы, которые не связаны с платежками,
//    потому что связанные с платежками должны быть найдены на шаге 1.
//
// 2.1. Ищем ссылки, примерно так, как описано в п. 1.1.
//      Ищем дважды - отдельно для списания, отдельно для поступления.
//      Особенности:
// 2.1.1 Ищем все документы по конкретному счету, причем те, для которых нет платежек.
//       Период определяем по выписке.
//
// 2.1.2 Минимально необходимый идентификатор включает
//       - Дату проведения операции банком
//       - Номер документа "как есть", однако ограниченный предельной длиной, допустимой в ИБ и стандартом
//          
// 2.1.3 При определении веса учитываем
//
//       - совпадение даты входящего документа
//       - совпадение ИНН контрагента и его номера счета, в следующих комбинациях (по убыванию приоритета)
//         - совпадает и ИНН и номер счета
//         - ИНН совпадает, но номер счета неизвестен
//         - ИНН совпадает, но номер счета нет
//         - совпадает только номер счета, но не ИНН
//       - равенство сумм
//
// 2.2. Выбираем наиболее подходящие пары - также, как в п. 1.1.
//      При этом один документ в базе данных может быть представлен только одной записью в файле.
//
#КонецОбласти

Процедура НайтиПлатежныеПоручения(РаспознаннаяВыписка, Выписка, УчастникиОпераций)
	
	// Выберем из выписки те строки, что могут быть результатом проведения банком распоряжений владельца счета (платежных поручений).
	// Одновременно определим период, за который эти платежные поручения. 
	// Предполагаем, что выписка содержит документы за непрерывный период.
	// Не используем значения свойств выписки НачалоПериода и КонецПериода, 
	// так как они соответствуют дате исполнения платежки, а не дате ее оформления.
	ОперацииДляПоискаДокументов = Новый Соответствие; // Ключ - ключ поиска; Значение - массив Операций
	НачалоПериода               = Неопределено;
	КонецПериода                = Неопределено;
	
	Для Каждого Операция Из Выписка.Операции Цикл
		
		Если Не ОперацияМоглаБытьВыполненаНаОснованииПлатежногоПоручения(Операция) Тогда
			Продолжить;
		КонецЕсли;
		
		НомерБанковскогоСчетаКонтрагента = Операция.НомерСчетаКонтрагента;
		
		КлючПоиска = КлючПоискаПлатежногоПоручения(
			Операция.ДатаДокумента,
			Операция.НомерДокумента,
			НомерБанковскогоСчетаКонтрагента);
			// В платежках можно включать в ключ номер счета, но в строках выписки - нет.
			// Потому что контрагент в созданных документах - это не достаточно надежный признак для поиска документов.
			// На него надо опираться, но искать и документы с другими контрагентами (с меньшим приоритетом).
			// Например, потому что пользователь может указать "сводного контрагента" - т.е. не такого, как в файлах выписки.
			
		ОперацииПоКлючу = ОперацииДляПоискаДокументов[КлючПоиска];
		Если ОперацииПоКлючу = Неопределено Тогда
			ОперацииПоКлючу = Новый Массив;
			ОперацииДляПоискаДокументов.Вставить(КлючПоиска, ОперацииПоКлючу);
		КонецЕсли;
		
		ОперацииПоКлючу.Добавить(Операция);
		РасширитьПериод(НачалоПериода, КонецПериода, Операция.ДатаДокумента);
			
	КонецЦикла;
	
	Если НачалоПериода = Неопределено Или КонецПериода = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Найдем платежные поручения владельца счета за период
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",               РаспознаннаяВыписка.ВладелецСчета.Организация);
	Запрос.УстановитьПараметр("БанковскийСчетОрганизации", РаспознаннаяВыписка.ВладелецСчета.БанковскийСчет);
	Запрос.УстановитьПараметр("НачалоПериода",             НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",              КонецДня(КонецПериода));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПлатежноеПоручение.Ссылка КАК ПлатежноеПоручение,
	|	ПлатежноеПоручение.Дата КАК Дата,
	|	ПлатежноеПоручение.Номер КАК Номер,
	|	ПлатежноеПоручение.СчетКонтрагента.НомерСчета КАК НомерБанковскогоСчетаКонтрагента,
	|	ПлатежноеПоручение.Проведен КАК Проведен,
	|	ПлатежноеПоручение.Контрагент КАК Контрагент,
	|	ПлатежноеПоручение.СчетКонтрагента КАК СчетКонтрагента,
	|	ПлатежноеПоручение.ИННПолучателя КАК ИННКонтрагента,
	|	ПлатежноеПоручение.СуммаДокумента КАК Сумма,
	|	ЕСТЬNULL(СписаниеСРасчетногоСчетаПодчиненное.Ссылка, ЕСТЬNULL(СписаниеСРасчетногоСчетаОснование.Ссылка, НЕОПРЕДЕЛЕНО)) КАК ДокументИсполнения,
	|	НАЧАЛОПЕРИОДА(ЕСТЬNULL(СписаниеСРасчетногоСчетаПодчиненное.Дата, ЕСТЬNULL(СписаниеСРасчетногоСчетаОснование.Дата, ДАТАВРЕМЯ(1, 1, 1))), ДЕНЬ) КАК ДатаИсполнения,
	|	ЕСТЬNULL(СписаниеСРасчетногоСчетаПодчиненное.СуммаДокумента, ЕСТЬNULL(СписаниеСРасчетногоСчетаОснование.СуммаДокумента, 0)) КАК СуммаИсполнения
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчетаОснование
	|		ПО ПлатежноеПоручение.ДокументОснование = СписаниеСРасчетногоСчетаОснование.Ссылка
	|			И (НЕ СписаниеСРасчетногоСчетаОснование.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчетаПодчиненное
	|		ПО ПлатежноеПоручение.Ссылка = СписаниеСРасчетногоСчетаПодчиненное.ДокументОснование
	|			И (НЕ СписаниеСРасчетногоСчетаПодчиненное.ПометкаУдаления)
	|ГДЕ
	|	ПлатежноеПоручение.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ПлатежноеПоручение.СчетОрганизации = &БанковскийСчетОрганизации
	|	И ПлатежноеПоручение.Организация = &Организация
	|	И НЕ ПлатежноеПоручение.ПометкаУдаления
	|ИТОГИ
	|	СУММА(Сумма),
	|	СУММА(СуммаИсполнения)
	|ПО
	|	ПлатежноеПоручение";
	
	СоответствиеДокументовБанкаКлиента = НовыйСоответствиеДокументовБанкаКлиента();
	
	ИдентификаторОперацииКлиент = 0; // Пронумеруем строки результата запроса
	
	СуммыПлатежныхПоручений = Новый Соответствие;
	ВыборкаПлатежныхПоручений = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПлатежныхПоручений.Следующий() Цикл
		
		НомерБезПрефикса                 = СокрЛП(ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаПлатежныхПоручений.Номер, Истина, Истина));
		ДатаПлатежногоПоручения          = НачалоДня(ВыборкаПлатежныхПоручений.Дата);
		НомерБанковскогоСчетаКонтрагента = Строка(ВыборкаПлатежныхПоручений.НомерБанковскогоСчетаКонтрагента);
		
		КлючПоиска = КлючПоискаПлатежногоПоручения(ДатаПлатежногоПоручения, НомерБезПрефикса, НомерБанковскогоСчетаКонтрагента);
		
		ОперацииПоКлючуБанк = ОперацииДляПоискаДокументов[КлючПоиска];
		Если ОперацииПоКлючуБанк = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СуммыПлатежныхПоручений.Вставить(
			ВыборкаПлатежныхПоручений.ПлатежноеПоручение,
			ВыборкаПлатежныхПоручений.Сумма - ВыборкаПлатежныхПоручений.СуммаИсполнения);
		
		// Каждый элемент выборки содержит "операцию": сочетание документов "Платежное поручение" и "Списание с расчетного счета".
		// Для работы алгоритма ниже, также нужны сочетания всех платежных поручений с незаполненным "Списанием...".
		// Однако, в выборке такие будут только в случае, когда нет ни одного "Списания", соответствующего платежке.
		// Поэтому, при необходимости будем дополнять данные запроса записями с незаполненными "Списаниями".
		ВыбраноПлатежноеПоручениеБезДокументаИсполнения = Ложь;
		
		ВыборкаОперацийКлиент = ВыборкаПлатежныхПоручений.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаОперацийКлиент.Следующий() Цикл
			
			ВыбраноПлатежноеПоручениеБезДокументаИсполнения = ВыбраноПлатежноеПоручениеБезДокументаИсполнения 
				Или Не ЗначениеЗаполнено(ВыборкаОперацийКлиент.ДокументИсполнения);
			
			ДобавитьСоответствияПлатежныхПорученийБанкаКлиента(
				СоответствиеДокументовБанкаКлиента,
				ОперацииПоКлючуБанк,
				ИдентификаторОперацииКлиент,
				ВыборкаПлатежныхПоручений,
				НомерБезПрефикса,
				ВыборкаОперацийКлиент,
				УчастникиОпераций);
			
		КонецЦикла;
		
		Если Не ВыбраноПлатежноеПоручениеБезДокументаИсполнения Тогда
			ДобавитьСоответствияПлатежныхПорученийБанкаКлиента(
				СоответствиеДокументовБанкаКлиента,
				ОперацииПоКлючуБанк,
				ИдентификаторОперацииКлиент,
				ВыборкаПлатежныхПоручений,
				НомерБезПрефикса,
				Неопределено,
				УчастникиОпераций);
		КонецЕсли;
		
	КонецЦикла;
	
	ВыбратьЛучшиеСоответствияДокументовОперациям(СоответствиеДокументовБанкаКлиента, СуммыПлатежныхПоручений);
	
	Для Каждого СоответствиеДокументаОперации Из СоответствиеДокументовБанкаКлиента Цикл
		
		РаспознаннаяОперация = НайтиПоИдентификатору(РаспознаннаяВыписка.Операции, СоответствиеДокументаОперации.ИдентификаторОперацииБанк);
		РаспознаннаяОперация.ПлатежноеПоручение = СоответствиеДокументаОперации.ПлатежноеПоручение;
		РаспознаннаяОперация.Ссылка 			= СоответствиеДокументаОперации.ДокументИсполнения;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСоответствияПлатежныхПорученийБанкаКлиента(СоответствиеДокументовБанкаКлиента, ОперацииБанк, ИдентификаторОперацииКлиент, ПлатежноеПоручение, НомерБезПрефикса, ОперацияКлиент, УчастникиОпераций)
	
	ИдентификаторОперацииКлиент = ИдентификаторОперацииКлиент + 1;
	
	Для Каждого Операция Из ОперацииБанк Цикл
		
		Если ОперацияКлиент = Неопределено Тогда
			// Нет сведений об исполнении операции.
			ДатаИсполнения     = Неопределено;
			СуммаИсполнения    = Неопределено;
			ДокументИсполнения = Неопределено;
		Иначе
			ДатаИсполнения     = ОперацияКлиент.ДатаИсполнения;
			СуммаИсполнения    = ОперацияКлиент.СуммаИсполнения;
			ДокументИсполнения = ОперацияКлиент.ДокументИсполнения;
		КонецЕсли;
		
		Соответствие = СоответствиеДокументовБанкаКлиента.Добавить();
		
		Соответствие.ИдентификаторОперацииБанк 	 = Операция.Идентификатор;
		Соответствие.ОперацияБанк      			 = Операция;
		Соответствие.СуммаОперацииБанк           = Операция.Сумма;
		
		Соответствие.ИдентификаторОперацииКлиент = ИдентификаторОперацииКлиент;
		Соответствие.ПлатежноеПоручение          = ПлатежноеПоручение.ПлатежноеПоручение;
		Соответствие.ДокументИсполнения		     = ДокументИсполнения;
		Соответствие.СуммаОперацииКлиент         = СуммаИсполнения;
					
		Оценщик = НачатьОценкуСоответствия();
		ОценитьСоответствиеПоКритерию(Оценщик, ПлатежноеПоручение.Проведен);
		ОценитьСоответствиеПоКритерию(Оценщик, НомерБезПрефикса         = Операция.НомерДокумента);
		ОценитьСоответствиеПоКритерию(Оценщик, ПлатежноеПоручение.Номер = Операция.НомерДокумента);
		
		ОценитьСоответствиеПоКритерию(Оценщик, ДатаИсполнения  = Операция.ДатаИсполнения);
		ОценитьСоответствиеПоКритерию(Оценщик, СуммаИсполнения = Операция.Сумма);
				
		НайденКонтрагент = ИдентификацияУчастниковБанковскихОпераций.ЭтоИдентификаторыСсылки(
			Операция.ПолучательИдентификаторы,
			ПлатежноеПоручение.Контрагент,
			УчастникиОпераций);
		ОценитьСоответствиеПоКритерию(Оценщик, НайденКонтрагент);
				
		ОценитьСоответствиеПоКритерию(Оценщик, Не ЗначениеЗаполнено(ПлатежноеПоручение.ИННКонтрагента));
		ОценитьСоответствиеПоКритерию(Оценщик, ПлатежноеПоручение.Сумма = Операция.Сумма);
		ОценитьСоответствиеПоКритерию(Оценщик, ПлатежноеПоручение.Сумма > Операция.Сумма);
				
		Соответствие.Приоритет = Оценщик.Приоритет;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НайтиРанееСозданныеДокументы(РаспознаннаяВыписка, Выписка, УчастникиОпераций)
	
	// Выберем из выписки строки без платежных поручений - то есть те, что 
	// - либо были инициированы не владельцем счета (входящие платежи, прямое дебитование)
	// - либо были инициированы из другой программы (например, непосредственно на сайте банка)
	// 
	// Для этих строк установим соответствие документов в информационной базе по реквизитам документов.
	//
	// Для строк с платежными поручениями соответствие установим вне этой процедуры другим способом - 
	// по связи в информационной базе между платежкой и документами движений по банковскому счету.
	//
	// Алгоритм поиска описан в области "Описание"
	
	// Ищем раздельно среди поступлений на счет и списаний.
	Для Каждого ПоступилоСписано Из ВариантыПоступилоСписано() Цикл
		
		ОперацииДляПоискаДокументов = Новый Соответствие; // Ключ - ключ поиска; Значение - массив Операций
		// Одновременно определим период, за который искать документы.
		// Предполагаем, что выписка содержит документы за непрерывный период.
		// Не используем значения свойств выписки НачалоПериода и КонецПериода, чтобы по возможности сократить выборку.
		НачалоПериода               = Неопределено;
		КонецПериода                = Неопределено;
		
		Для Каждого Операция Из Выписка.Операции Цикл
			
			РаспознаннаяОперация = НайтиПоИдентификатору(РаспознаннаяВыписка.Операции, Операция.Идентификатор);
			
			Если ЗначениеЗаполнено(РаспознаннаяОперация.ПлатежноеПоручение) Тогда 
				// Ссылку получили из платежного поручения
				Продолжить;
			КонецЕсли;
			
			КлючПоиска = КлючПоискаДокументаДвиженияПоБанковскомуСчету(Операция.ДатаИсполнения, Операция.НомерДокумента);
			// В общем случае документы могут исходить от разных контрагентов и нумероваться независимо.
			// Поэтому для идентификации документа недостаточно даты и номера - нужны еще и данные о контрагенте.
			// Их учтем ниже в виде приоритетов.
			
			ОперацииПоКлючу = ОперацииДляПоискаДокументов[КлючПоиска];
			Если ОперацииПоКлючу = Неопределено Тогда
				ОперацииПоКлючу = Новый Массив;
				ОперацииДляПоискаДокументов.Вставить(КлючПоиска, ОперацииПоКлючу);
			КонецЕсли;
			
			ОперацииПоКлючу.Добавить(Операция);
			РасширитьПериод(НачалоПериода, КонецПериода, Операция.ДатаИсполнения);
			
		КонецЦикла;
		
		Если НачалоПериода = Неопределено Или КонецПериода = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Найдем документы за период
		
		// Ищем только среди документов, которые не связаны с документами инициации платежа.
		// Потому что по документам инициации платежа ищем отдельно и важно исключить нахождение (подбор)
		// для разных строк выписки одного и того же документа разными способами.
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация",               РаспознаннаяВыписка.ВладелецСчета.Организация);
		Запрос.УстановитьПараметр("БанковскийСчетОрганизации", РаспознаннаяВыписка.ВладелецСчета.БанковскийСчет);
		Запрос.УстановитьПараметр("НачалоПериода",             НачалоПериода);
		Запрос.УстановитьПараметр("КонецПериода",              КонецДня(КонецПериода));
		
		Если ПоступилоСписано = "Поступило" Тогда
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Документы.Ссылка КАК Ссылка,
			|	НАЧАЛОПЕРИОДА(Документы.Дата, ДЕНЬ) КАК ДатаИсполнения,
			|	Документы.ДатаВходящегоДокумента КАК ДатаДокумента,
			|	Документы.НомерВходящегоДокумента КАК Номер,
			|	Документы.ПометкаУдаления КАК ПометкаУдаления,
			|	Документы.Проведен КАК Проведен,
			|	Документы.СуммаДокумента КАК Сумма,
			|	Документы.Контрагент КАК Контрагент,
			|	Документы.СчетКонтрагента КАК СчетКонтрагента,
			|	ЕСТЬNULL(Документы.Контрагент.ИНН, """") КАК ИННКонтрагента,
			|	ЕСТЬNULL(Документы.СчетКонтрагента.НомерСчета, """") КАК НомерСчетаКонтрагента,
			|	Документы.РеквизитыКонтрагента.(
			|		Реквизит,
			|		Значение
			|	) КАК РеквизитыКонтрагента
			|ИЗ
			|	Документ.ПоступлениеНаРасчетныйСчет КАК Документы
			|ГДЕ
			|	Документы.Дата МЕЖДУ &НачалоПериода И &КонецПериода
			|	И Документы.СчетОрганизации = &БанковскийСчетОрганизации
			|	И Документы.Организация = &Организация
			|	И НЕ Документы.ПометкаУдаления";
			
		Иначе
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Документы.Ссылка КАК Ссылка,
			|	НАЧАЛОПЕРИОДА(Документы.Дата, ДЕНЬ) КАК ДатаИсполнения,
			|	Документы.ДатаВходящегоДокумента КАК ДатаДокумента,
			|	Документы.НомерВходящегоДокумента КАК Номер,
			|	Документы.ПометкаУдаления КАК ПометкаУдаления,
			|	Документы.Проведен КАК Проведен,
			|	Документы.СуммаДокумента КАК Сумма,
			|	Документы.Контрагент КАК Контрагент,
			|	Документы.СчетКонтрагента КАК СчетКонтрагента,
			|	ЕСТЬNULL(Документы.Контрагент.ИНН, """") КАК ИННКонтрагента,
			|	ЕСТЬNULL(Документы.СчетКонтрагента.НомерСчета, """") КАК НомерСчетаКонтрагента,
			|	Документы.РеквизитыКонтрагента.(
			|		Реквизит,
			|		Значение
			|	) КАК РеквизитыКонтрагента
			|ИЗ
			|	Документ.СписаниеСРасчетногоСчета КАК Документы
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение КАК ПлатежноеПоручениеПодчиненное
			|		ПО Документы.Ссылка = ПлатежноеПоручениеПодчиненное.ДокументОснование
			|			И (НЕ ПлатежноеПоручениеПодчиненное.ПометкаУдаления)
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение КАК ПлатежноеПоручениеОснование
			|		ПО Документы.ДокументОснование = ПлатежноеПоручениеОснование.Ссылка
			|			И (НЕ ПлатежноеПоручениеОснование.ПометкаУдаления)
			|ГДЕ
			|	Документы.Дата МЕЖДУ &НачалоПериода И &КонецПериода
			|	И Документы.СчетОрганизации = &БанковскийСчетОрганизации
			|	И Документы.Организация = &Организация
			|	И ПлатежноеПоручениеПодчиненное.ДокументОснование ЕСТЬ NULL 
			|	И ПлатежноеПоручениеОснование.Ссылка ЕСТЬ NULL 
			|	И НЕ Документы.ПометкаУдаления";
		
		КонецЕсли;
		
		ИмяКонтрагента = СторонаКонтрагента(ПоступилоСписано);
		
		СоответствиеДокументовОперациям = НовыйСоответствиеДокументовБанкаКлиента();
		
		Выборка = Запрос.Выполнить().Выбрать();
		ИдентификаторОперацииКлиент = 0; // Соответствует каждой строке выборки
		Пока Выборка.Следующий() Цикл
			
			КлючПоиска = КлючПоискаДокументаДвиженияПоБанковскомуСчету(Выборка.ДатаИсполнения, Выборка.Номер);
			
			ОперацииПоКлючуБанк = ОперацииДляПоискаДокументов[КлючПоиска];
			Если ОперацииПоКлючуБанк = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ИдентификаторОперацииКлиент = ИдентификаторОперацииКлиент + 1;
			
			Для Каждого Операция Из ОперацииПоКлючуБанк Цикл
				
				Соответствие = СоответствиеДокументовОперациям.Добавить();
				Соответствие.ИдентификаторОперацииБанк   = Операция.Идентификатор;
				Соответствие.ОперацияБанк                = Операция;
				Соответствие.СуммаОперацииБанк           = Операция.Сумма;
				
				Соответствие.ИдентификаторОперацииКлиент = ИдентификаторОперацииКлиент;
				Соответствие.ДокументИсполнения          = Выборка.Ссылка;
				Соответствие.СуммаОперацииКлиент         = Выборка.Сумма;
				
				Оценщик = НачатьОценкуСоответствия();
				
				ОценитьСоответствиеПоКритерию(Оценщик, Выборка.Сумма = Операция.Сумма);
				ОценитьСоответствиеПоКритерию(Оценщик, Выборка.Проведен);
				ОценитьСоответствиеПоКритерию(Оценщик, Выборка.ДатаДокумента = Операция.ДатаДокумента);
				
				ОценщикДоСравненияКонтрагента = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(Оценщик);
				
				ИдентификаторыКонтрагента = Операция[ИмяКонтрагента + "Идентификаторы"];
				НайденКонтрагент = ИдентификацияУчастниковБанковскихОпераций.ЭтоИдентификаторыСсылки(
					ИдентификаторыКонтрагента,
					Выборка.Контрагент,
					УчастникиОпераций);
				ОценитьСоответствиеПоКритерию(Оценщик, НайденКонтрагент);
				
				НайденСчетКонтрагента = ИдентификацияУчастниковБанковскихОпераций.ЭтоИдентификаторыСсылки(
					ИдентификаторыКонтрагента,
					Выборка.СчетКонтрагента,
					УчастникиОпераций);
				ОценитьСоответствиеПоКритерию(Оценщик, НайденСчетКонтрагента);
				
				ОтменитьСоответствие = Ложь;
				Если Не ОценкаПовысилась(Оценщик, ОценщикДоСравненияКонтрагента) Тогда
					// В документе указан совсем другой контрагент, чем в файле.
					// Возможно, это совсем другой документ - от другого контрагента, но с тем же номером и датой.
					// А возможно, у документа в информационной базе после загрузки уточнили контрагента.
					// Чтобы отличить один случай от другого, обратимся к реквизитам хранящегося в информационной базе документа,
					// переданным банком.
					КоличествоСовпадающихРеквизитов = 0;
					ВыборкаРеквизитыКонтрагента = Выборка.РеквизитыКонтрагента.Выбрать();
					
					Пока ВыборкаРеквизитыКонтрагента.Следующий() Цикл
						
						Если ВыборкаРеквизитыКонтрагента.Реквизит <> "Идентификатор" Тогда
							Продолжить;
						КонецЕсли;
						
						Если ИдентификаторыКонтрагента.Найти(ВыборкаРеквизитыКонтрагента.Значение) <> Неопределено Тогда
							КоличествоСовпадающихРеквизитов = КоличествоСовпадающихРеквизитов + 1;
							ОценитьСоответствиеПоКритерию(Оценщик, Истина);
						КонецЕсли;
						
					КонецЦикла;
					
					Если КоличествоСовпадающихРеквизитов = 0 Тогда
						// Отменим соответствие
						Соответствие.Приоритет = -1;
						Продолжить;
					КонецЕсли;
					
				КонецЕсли;
				
				ОценитьСоответствиеПоКритерию(Оценщик, Не ЗначениеЗаполнено(Выборка.ИННКонтрагента));
				ОценитьСоответствиеПоКритерию(Оценщик, Не ЗначениеЗаполнено(Выборка.НомерСчетаКонтрагента));
			
				Соответствие.Приоритет = Оценщик.Приоритет;
				
			КонецЦикла;
			
		КонецЦикла;
		
		// Удалим записи, для которых соответствие отменено
		КУдалению = СоответствиеДокументовОперациям.НайтиСтроки(Новый Структура("Приоритет", -1));
		Для Каждого ЗаписьКУдалению Из КУдалению Цикл
			СоответствиеДокументовОперациям.Удалить(ЗаписьКУдалению);
		КонецЦикла;	
		
		ВыбратьЛучшиеСоответствияДокументовОперациям(СоответствиеДокументовОперациям);
		
		Для Каждого СоответствиеДокументаОперации Из СоответствиеДокументовОперациям Цикл
			
			РаспознаннаяОперация = НайтиПоИдентификатору(РаспознаннаяВыписка.Операции, СоответствиеДокументаОперации.ИдентификаторОперацииБанк);
			РаспознаннаяОперация.Ссылка = СоответствиеДокументаОперации.ДокументИсполнения;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция НовыйСоответствиеДокументовБанкаКлиента()
	
	СоответствиеДокументовОперациям = Новый ТаблицаЗначений;

	// Данные из банка
	СоответствиеДокументовОперациям.Колонки.Добавить("ИдентификаторОперацииБанк", ТипИдентификатор());
	СоответствиеДокументовОперациям.Колонки.Добавить("СуммаОперацииБанк", 	      ОбщегоНазначения.ОписаниеТипаЧисло(15, 2)); // Сумма операции по данным банка
	СоответствиеДокументовОперациям.Колонки.Добавить("ОперацияБанк");
	// Данные клиента (имеющиеся в информационной базе)
	// Операцией считаем факт исполнения платежного поручения (т.е.  сочетание платежного поручения и документа его исполнения)
	// либо неисполненное платежное поручение.
	// Другими словами, каждая комбинация полей ПлатежноеПоручение и ДокументИсполнения 
	// получит свой идентификатор операции со стороны информационной базы.
	СоответствиеДокументовОперациям.Колонки.Добавить("ИдентификаторОперацииКлиент", Новый ОписаниеТипов("Число"));
	СоответствиеДокументовОперациям.Колонки.Добавить("СуммаОперацииКлиент", 	    ОбщегоНазначения.ОписаниеТипаЧисло(15, 2)); // Сумма документа в базе.
	СоответствиеДокументовОперациям.Колонки.Добавить("ПлатежноеПоручение",          Новый ОписаниеТипов("ДокументСсылка.ПлатежноеПоручение"));
	СоответствиеДокументовОперациям.Колонки.Добавить("ДокументИсполнения", 	        ОписаниеТиповДокументыИсполнения());
	// Сочетание данных бана и клиента
	СоответствиеДокументовОперациям.Колонки.Добавить("Приоритет",     	            Новый ОписаниеТипов("Число"));
	
	Возврат СоответствиеДокументовОперациям;
	
КонецФункции

Функция КлючПоискаПлатежногоПоручения(ДатаДокумента, НомерДокумента, НомерБанковскогоСчетаКонтрагента)
	
	//	в ключ поиска входит номер 
	//  1. без префикса
	//  2. не более 6 символов, по возможности состоящий из цифр
	//  (если в правых 6 символах есть цифры, то в "чистый номер" включаются только они;
	//  лидирующие нули игнорируются;
	//  если нет ни одной цифры, то выбираются все 6 правых символов).
	
	СодержательнаяЧастьНомераДокумента = "";
	
	НомерБезПрефикса = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(НомерДокумента, Истина, Истина);
	ОграниченныйНомерБезПрефикса = Прав(НомерБезПрефикса, БанковскиеПравила.ДлинаНомераПлатежногоПоручения());
	ЕстьЗначащиеЦифры = Ложь;
	Для НомерСимвола = 1 По СтрДлина(ОграниченныйНомерБезПрефикса) Цикл
		
		Символ = Сред(ОграниченныйНомерБезПрефикса, НомерСимвола, 1);
		
		Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Символ) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЕстьЗначащиеЦифры Тогда
			Если Символ = "0" Тогда
				Продолжить;
			КонецЕсли;
			ЕстьЗначащиеЦифры = Истина;
		КонецЕсли;
		
		СодержательнаяЧастьНомераДокумента = СодержательнаяЧастьНомераДокумента + Символ;
		
	КонецЦикла;
	
	Если ПустаяСтрока(СодержательнаяЧастьНомераДокумента) Тогда
		СодержательнаяЧастьНомераДокумента = ОграниченныйНомерБезПрефикса;
	КонецЕсли;
	
	Возврат СокрЛП(НомерБанковскогоСчетаКонтрагента) + "/" + Формат(ДатаДокумента, "ДФ=yyyy-MM-dd") + "/" + СодержательнаяЧастьНомераДокумента;
	
КонецФункции

Функция КлючПоискаДокументаДвиженияПоБанковскомуСчету(ДатаИсполнения, НомерДокумента)
	
	// В отличие от поиска платежек не включаем в ключ номер счета,
	// потому что после загрузки документа контрагент (и счет) в нем могут быть изменены
	// (например, пользователь может указать "сводного контрагента").
	
	Возврат Формат(ДатаИсполнения, "ДФ=yyyy-MM-dd") + "/" + СокрЛП(НомерДокумента);
	
КонецФункции

Функция ОперацияМоглаБытьВыполненаНаОснованииПлатежногоПоручения(Операция)
		
	Если Операция.ПоступилоСписано <> "Списано" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Операция.ШифрОперации) И Не БанковскиеПравила.ЭтоПлатежноеПоручение(Операция.ШифрОперации) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Операция.ДатаДокумента) Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

Функция НачатьОценкуСоответствия()
	
	Оценщик = Новый Структура;
	Оценщик.Вставить("Приоритет",                     0);
	Оценщик.Вставить("КоличествоВыполненныхПроверок", 0);
	
	Возврат Оценщик;
	
КонецФункции

Процедура ОценитьСоответствиеПоКритерию(Оценщик, СоответствуетЛучше)
	
	Оценщик.КоличествоВыполненныхПроверок = Оценщик.КоличествоВыполненныхПроверок + 1;
	Оценщик.Приоритет                     = Оценщик.Приоритет * 2; // Сдвигаем на 1 бит влево
	
	Если Не СоответствуетЛучше Тогда
		Возврат;
	КонецЕсли;
	
	Оценщик.Приоритет = Оценщик.Приоритет + 1; // Устанавливаем новый (самый правый) бит
	
КонецПроцедуры

Функция ОценкаПовысилась(НовыйОценщик, СтарыйОценщик)
	
	// Пересчитаем приоритет с учетом нового количества выполненных проверок
	КоличествоДополнительныхПроверок = НовыйОценщик.КоличествоВыполненныхПроверок - СтарыйОценщик.КоличествоВыполненныхПроверок;
	Если КоличествоДополнительныхПроверок < 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// ... сдвинем приоритет на несколько бит слева
	СкорректированныйПриоритет = СтарыйОценщик.Приоритет * Pow(2, КоличествоДополнительныхПроверок);
	
	Возврат НовыйОценщик.Приоритет > СкорректированныйПриоритет;
	
КонецФункции

// Выбирает из таблицы с соответствиями документов и операций те, которые в наибольшей степени
// подходят друг другу по приоритетам.
//
// Параметры:
//	СоответствиеДокументовОперациям - см. НовыйСоответствиеДокументовОперациям(), модифицируется в ходе выполнения
//  СуммыПлатежныхПоручений - Соответствие, Неопределено. Если передано Соответствие, то при поиске платежному поручению 
//               могут быть сопоставлены несколько документов исполнения, с учетом суммы документов: 
//               общая сумма подобранных документов исполнения не будет превышать переданной суммы остатка платежного поручения.
//               Ключ соответствия - ДокументСсылка.ПлатежноеПоручение, 
//               Значение соответствия - Число, сумма платежного поручения за вычетом имеющихся в базе документов исполнения этого платежного поручения.
//
Процедура ВыбратьЛучшиеСоответствияДокументовОперациям(СоответствиеДокументовОперациям, СуммыПлатежныхПоручений = Неопределено)
	
	Если СоответствиеДокументовОперациям.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// В общем случае соответствия могут быть многие-ко-многим.
	// Среди них могут быть:
	// 1. однозначные, когда идентификатор со стороны клиента и идентификатор со стороны банка встречается только один раз
	// 2. один-ко-многим, когда одному идентификатору со стороны клиента соответствует несколько со стороны банка
	// 3. многие-к-одному, когда многим идентификаторам со стороны банка соответствуют один со стороны клиента.
	// Также могут быть ситуации, когда одни и те же идентификаторы одновременно участвуют в (2) и (3).
	
	// Среди лучших могут быть не все из них.
	//
	// Во-первых, связи один-ко-многим не могут быть выбраны: одному идентификатору со стороны банка может соответствовать
	// не более одного идентификатора со стороны клиента.
	// Потому что одной транзакцией банк выполняет только одно поручение клиента, не несколько.
	//
	// Во-вторых, стремимся к тому, чтобы как можно больше операций со стороны клиента считать лучшими.
	// Потому что операции, отраженные на стороне клиента,
	// с большой вероятностью должны быть отражены и на стороне банка (зачем-то их пользователь ввел в базу).
	//
	// В-третьих, некоторые связи многие-к-одному допускаются: со стороны клиента есть платежное поручение,
	// но нет соответствующего ему документа об исполнении.
	// Такому платежному поручению может соответствовать несколько операций со стороны банка.
	// Однако, сумма таких исполнений не должна превышать суммы платежки.
	//
	// Наконец, следует учитывать степень соответствия идентификаторов друг-другу (приоритет соответствий).
	
	// Для поиска лучших соответствий упрощаем связи - сводим их к один-к-одному и, когда это допускается, - многие-к-одному.
	// Для этого может понадобиться несколько итераций, поскольку связи могут быть цепными и циклическими.
	// Пример цепной связи: A1, B1, B2, C2, C3
	// Пример цикличной: A1, A2, B2, B3, C3, C1
	// (Здесь идентификаторы со стороны клиента обозначены цифрами, а со стороны банка - буквами).
	
	// Алгоритм такой:
	// 1. Для каждого клиентского идентификатора определяем количество соответствующих ему банковских (C - capacity).
	//    Ниже, по мере того, как будем исключать лучшие и отвергнутые, уточняем, поддерживаем эти значения. 
	// 2. Все соответствия считаем неоднозначными и выделяем среди них лучшие и отвергнутые итерационно,
	//    до тех пор, пока неоднозначных не останется.
	// 2.1. Обходим по убыванию приоритета те, у кого C = 1.
	//      Записываем каждый из них в лучшие.
	//      Для каждого, который сочли лучшим, отвергаем (вытессняем) те, 
	//      что имеют тот же идентификатор со стороны банка (см. "во-первых").
	// 2.2. Если после 2.1 появились новые C = 1, то повторяем 2.1.
	// 2.3. Далее остаются соответствия с C > 1. Обходим их по убыванию приоритета снова.
	//      Автоматически считаем их лучшими, однако каждый клиентский идентификатор автоматически считаем лучшим только один раз.
	//      Для этого выбранным устанавливаем C=0: если C<1 то клиентский идентификатор встретился повторно, и соответствия с ним требуют 
	//      дополнительной проверки (см. "в-третьих") и могут быть либо выбраны либо отвергнуты.
	//      Так же, как и на шаге 2.1, если кого-то выбрали, то вытесняем все остальные с таким же идентификатором со стороны банка.
	//      Если в какой-то момент у какого-то идентификатора стало C = 1, то сразу возвращаемся на п.2.1.
	
	ЕмкостьИдентификаторовОперацииКлиент  = Новый Соответствие; // Ключ - идентификатор со стороны клиента; значение - Число (выше обозначено как C)
	// Подготовительный этап - 1.
	Для Каждого Соответствие Из СоответствиеДокументовОперациям Цикл
		
		Емкость = ЕмкостьИдентификаторовОперацииКлиент[Соответствие.ИдентификаторОперацииКлиент];
		Если Емкость = Неопределено Тогда
			ЕмкостьИдентификаторовОперацииКлиент.Вставить(Соответствие.ИдентификаторОперацииКлиент, 1);
		Иначе
			ЕмкостьИдентификаторовОперацииКлиент.Вставить(Соответствие.ИдентификаторОперацииКлиент, Емкость + 1);
		КонецЕсли;
		
	КонецЦикла;
	
	// Основной (итерационный) этап - 2
	Лучшие = СоответствиеДокументовОперациям.СкопироватьКолонки();
	// На каждой итерации будем выделять Лучшие и удалять отвергнутые из СоответствиеДокументовОперациям.
	// В конце процедуры заменим СоответствиеДокументовОперациям на Лучшие.
	
	
	СоответствиеДокументовОперациям.Сортировать("Приоритет");// Коллекцию будем обходить с конца, потому что удаляем в цикле
	СоответствиеДокументовОперациям.Индексы.Добавить("ИдентификаторОперацииБанк");
	
	Пока СоответствиеДокументовОперациям.Количество() > 0 Цикл
		
		НадоВыполнитьПервыйЭтап = Истина;
		Пока НадоВыполнитьПервыйЭтап Цикл
			
			// 2.1
			ВыбранныеИдентификаторыОперацииБанк = Новый Соответствие; // Ключ - идентификатор со стороны банка;  значение - Истина
			КоличествоСтрок = СоответствиеДокументовОперациям.Количество();
			Для НомерСКонца = 1 По КоличествоСтрок Цикл
				
				Индекс       = КоличествоСтрок - НомерСКонца;
				Соответствие = СоответствиеДокументовОперациям[Индекс];
				
				Если ЕмкостьИдентификаторовОперацииКлиент[Соответствие.ИдентификаторОперацииКлиент] <> 1 Тогда
					Продолжить;
				КонецЕсли;
				
				Если ВыбранныеИдентификаторыОперацииБанк[Соответствие.ИдентификаторОперацииБанк] <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ВыбранныеИдентификаторыОперацииБанк.Вставить(Соответствие.ИдентификаторОперацииБанк, Истина);
				ЗаполнитьЗначенияСвойств(Лучшие.Добавить(), Соответствие);
				
			КонецЦикла;
			
			// Удаляем из списка неоднозначных все выбранные и вытесненные ими
			НадоВыполнитьПервыйЭтап = Ложь;
			Для НомерСКонца = 1 По КоличествоСтрок Цикл
				
				Индекс       = КоличествоСтрок - НомерСКонца;
				Соответствие = СоответствиеДокументовОперациям[Индекс];
				
				Если ВыбранныеИдентификаторыОперацииБанк[Соответствие.ИдентификаторОперацииБанк] = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Емкость = ЕмкостьИдентификаторовОперацииКлиент[Соответствие.ИдентификаторОперацииКлиент] - 1;
				Если Емкость = 1 Тогда
					НадоВыполнитьПервыйЭтап = Истина;
				КонецЕсли;
				ЕмкостьИдентификаторовОперацииКлиент[Соответствие.ИдентификаторОперацииКлиент] = Емкость;
				СоответствиеДокументовОперациям.Удалить(Соответствие);
				
			КонецЦикла;
			
		КонецЦикла; // по НадоВыполнитьПервыйЭтап
			
			
		// 2.3.
		КоличествоСтрок = СоответствиеДокументовОперациям.Количество();
		Пока КоличествоСтрок > 0 Цикл
			
			Соответствие = СоответствиеДокументовОперациям[КоличествоСтрок - 1];
			
			Если СуммыПлатежныхПоручений = Неопределено Тогда
				СуммаПлатежногоПоручения = Неопределено;
			Иначе
				СуммаПлатежногоПоручения = СуммыПлатежныхПоручений[Соответствие.ПлатежноеПоручение];
			КонецЕсли;
				
			Если ЕмкостьИдентификаторовОперацииКлиент[Соответствие.ИдентификаторОперацииКлиент] > 0 Тогда
				Выбрано = Истина;
				ЕмкостьИдентификаторовОперацииКлиент[Соответствие.ИдентификаторОперацииКлиент] = 0;
				Если СуммаПлатежногоПоручения <> Неопределено И Не ЗначениеЗаполнено(Соответствие.ДокументИсполнения) Тогда
					СуммыПлатежныхПоручений[Соответствие.ПлатежноеПоручение] = СуммаПлатежногоПоручения - Соответствие.СуммаОперацииБанк;
				КонецЕсли;
			Иначе
				// Этот идентификатор со стороны клиента попал в выборку повторно. Проверим, допускается ли это.
				Если ЗначениеЗаполнено(Соответствие.ДокументИсполнения) Тогда
					Выбрано = Ложь;
				ИначеЕсли СуммаПлатежногоПоручения = Неопределено Тогда
					Выбрано = Ложь;
				ИначеЕсли СуммаПлатежногоПоручения < Соответствие.СуммаОперацииБанк Тогда
					Выбрано = Ложь;
				Иначе
					Выбрано = Истина;
					СуммыПлатежныхПоручений[Соответствие.ПлатежноеПоручение] = СуммаПлатежногоПоручения - Соответствие.СуммаОперацииБанк;
				КонецЕсли;
			КонецЕсли;
			
			Если Не Выбрано Тогда
				// Удалим отвергнутую строку
				ЕмкостьИдентификаторовОперацииКлиент[Соответствие.ИдентификаторОперацииКлиент] =
					ЕмкостьИдентификаторовОперацииКлиент[Соответствие.ИдентификаторОперацииКлиент] - 1;
				СоответствиеДокументовОперациям.Удалить(Соответствие);
				КоличествоСтрок = КоличествоСтрок - 1;
			Иначе
				ЗаполнитьЗначенияСвойств(Лучшие.Добавить(), Соответствие);
				ЕмкостьИдентификаторовОперацииКлиент[Соответствие.ИдентификаторОперацииКлиент] = 0; // Отметили, что выбрана
				
				// Вытесим все записи с выбранным идентификатором со стороны банка.
				Отбор = Новый Структура("ИдентификаторОперацииБанк", Соответствие.ИдентификаторОперацииБанк);
				// При этом может оказаться, что нужна еще одна итерация
				НужнаЕщеИтерация = Ложь;
				КУдалению = СоответствиеДокументовОперациям.НайтиСтроки(Отбор);
				Для Каждого Соответствие Из КУдалению Цикл
					
					Емкость = ЕмкостьИдентификаторовОперацииКлиент[Соответствие.ИдентификаторОперацииКлиент] - 1;
					Если Емкость = 1 Тогда
						НужнаЕщеИтерация = Истина;
					КонецЕсли;
					ЕмкостьИдентификаторовОперацииКлиент[Соответствие.ИдентификаторОперацииКлиент] = Емкость;
					СоответствиеДокументовОперациям.Удалить(Соответствие);
					КоличествоСтрок = КоличествоСтрок - 1;
					
				КонецЦикла;
				
				Если НужнаЕщеИтерация Тогда
					Прервать;
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЦикла;
		
	КонецЦикла;
	
	СоответствиеДокументовОперациям = Лучшие;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейсЗаполнениеДокументов

Функция ЭтоДанныеБанка(ДанныеЗаполнения) Экспорт
	
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ДанныеЗаполнения.Свойство("ВидДанныхЗаполнения") Или ДанныеЗаполнения.ВидДанныхЗаполнения <> "ДанныеБанка" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ЗаполнитьДаннымиБанкаОперация(Документ, ДанныеЗаполнения) Экспорт
	
	ЗаполнитьРеквизит(Документ, "Дата",                    ДанныеЗаполнения.Операция, "ДатаИсполнения");
	Если НЕ ПолучитьФункциональнуюОпцию("ФиксированноеВремяВДокументах") Тогда
		Документ.УстановитьВремя(РежимАвтоВремя.ТекущееИлиПоследним, Истина);
	КонецЕсли;
	
	ЗаполнитьРеквизит(Документ, "СуммаДокумента",          ДанныеЗаполнения.Операция, "Сумма");
	ЗаполнитьРеквизит(Документ, "ДатаВходящегоДокумента",  ДанныеЗаполнения.Операция, "ДатаДокумента");
	ЗаполнитьРеквизит(Документ, "НомерВходящегоДокумента", ДанныеЗаполнения.Операция, "НомерДокумента");
	ЗаполнитьРеквизит(Документ, "НазначениеПлатежа",       ДанныеЗаполнения.Операция);
	
	Документ.Комментарий = НСтр("ru = 'Загружен из Клиент-Банка'");
	
	// Записываем "сырые" сведения об операции
	Документ.РеквизитыКонтрагента.Очистить();
	СторонаКонтрагента = СторонаКонтрагента(ДанныеЗаполнения.Операция.ПоступилоСписано);
	ИмяКолонкиИдентификаторыКонтрагента = СторонаКонтрагента + "Идентификаторы";
	ИмяКолонкиРеквизитыКонтрагента      = СторонаКонтрагента + "Реквизиты";
	
	ИдентификаторыКонтрагента = ДанныеЗаполнения.Операция[ИмяКолонкиИдентификаторыКонтрагента];
	Для Каждого Идентификатор Из ИдентификаторыКонтрагента Цикл
		ОписаниеРеквизита = Документ.РеквизитыКонтрагента.Добавить();
		ОписаниеРеквизита.Реквизит = "Идентификатор";
		ОписаниеРеквизита.Значение = Идентификатор;
	КонецЦикла;
	
	РеквизитыКонтрагента = ДанныеЗаполнения.Операция[ИмяКолонкиРеквизитыКонтрагента];
	Для Каждого КлючИЗначение Из РеквизитыКонтрагента Цикл
		ОписаниеРеквизита = Документ.РеквизитыКонтрагента.Добавить();
		ОписаниеРеквизита.Реквизит = КлючИЗначение.Ключ;
		ОписаниеРеквизита.Значение = КлючИЗначение.Значение;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДаннымиБанкаРаспознаннаяОперация(Документ, ДанныеЗаполнения)
	
	ЗаполнитьРеквизит(Документ, "Организация",              ДанныеЗаполнения.ВладелецСчета);
	ЗаполнитьРеквизит(Документ, "СчетОрганизации",          ДанныеЗаполнения.ВладелецСчета, "БанковскийСчет");
	ЗаполнитьРеквизит(Документ, "ПодразделениеОрганизации", ДанныеЗаполнения.ВладелецСчета, "Подразделение");
	ЗаполнитьРеквизит(Документ, "ВалютаДокумента",          ДанныеЗаполнения.ВладелецСчета, "ВалютаСчета");
	
	Если ДанныеЗаполнения.ХозяйственнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРеквизит(Документ, "ВидОперации",              ДанныеЗаполнения.ХозяйственнаяОперация, "ВидОперацииДокумента");
	ЗаполнитьРеквизит(Документ, "Контрагент",               ДанныеЗаполнения.ХозяйственнаяОперация);
	ЗаполнитьРеквизит(Документ, "Налогоплательщик",         ДанныеЗаполнения.ХозяйственнаяОперация);
	ЗаполнитьРеквизит(Документ, "СчетКонтрагента",          ДанныеЗаполнения.ХозяйственнаяОперация, "БанковскийСчетКонтрагента");
	
	// Реквизиты, которые могут быть в списке РасшифровкаПлатежа
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Документ.Ссылка);
	ИспользуетсяРасшифровкаПлатежа = МенеджерОбъекта.ЕстьРасшифровкаПлатежа(Документ.ВидОперации, Ложь);
	
	Если Не ИспользуетсяРасшифровкаПлатежа Тогда
		
		ЗаполнитьРеквизит(Документ, "СтатьяДвиженияДенежныхСредств",  ДанныеЗаполнения.ХозяйственнаяОперация);
		
	Иначе
		
		Если Документ.РасшифровкаПлатежа.Количество() > 1 Тогда
			Документ.РасшифровкаПлатежа.Очистить();
		КонецЕсли;
		Если Документ.РасшифровкаПлатежа.Количество() = 0 Тогда
			Документ.РасшифровкаПлатежа.Добавить();
		КонецЕсли;
		
		СтрокаРасшифровки = Документ.РасшифровкаПлатежа[0];
		
		ЗаполнитьРеквизит(СтрокаРасшифровки, "СтатьяДвиженияДенежныхСредств",  ДанныеЗаполнения.ХозяйственнаяОперация);
		ЗаполнитьРеквизит(СтрокаРасшифровки, "ДоговорКонтрагента",             ДанныеЗаполнения.ХозяйственнаяОперация);
		ЗаполнитьРеквизит(СтрокаРасшифровки, "СтавкаНДС",                      ДанныеЗаполнения.ХозяйственнаяОперация);
		ЗаполнитьРеквизит(СтрокаРасшифровки, "СуммаНДС",                       ДанныеЗаполнения.ХозяйственнаяОперация);
		ЗаполнитьРеквизит(СтрокаРасшифровки, "КурсВзаиморасчетов",             ДанныеЗаполнения.ХозяйственнаяОперация);
		ЗаполнитьРеквизит(СтрокаРасшифровки, "КратностьВзаиморасчетов",        ДанныеЗаполнения.ХозяйственнаяОперация);
		ЗаполнитьРеквизит(СтрокаРасшифровки, "СуммаВзаиморасчетов",            ДанныеЗаполнения.ХозяйственнаяОперация);
		ЗаполнитьРеквизит(СтрокаРасшифровки, "СуммаПлатежа",                   ДанныеЗаполнения.Операция,              "Сумма");
		ЗаполнитьРеквизит(СтрокаРасшифровки, "СчетНаОплату",                   ДанныеЗаполнения.ХозяйственнаяОперация);
		
	КонецЕсли;
	
	// В налоговых платежах, для получения данных о РегистрацииВНалоговомОргане, требуется знать КПП организации.
	Если ДанныеЗаполнения.ХозяйственнаяОперация.Свойство("КПППлательщика") Тогда
		СтрокаРеквизиты = Документ.РеквизитыКонтрагента.Добавить();
		СтрокаРеквизиты.Реквизит = "КПППлательщика";
		СтрокаРеквизиты.Значение = ДанныеЗаполнения.ХозяйственнаяОперация.КПППлательщика;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьЗаполнениеДаннымиБанка(Документ, ДанныеЗаполнения) Экспорт
	
	ЗаполнитьДаннымиБанкаОперация(Документ, ДанныеЗаполнения);
	ЗаполнитьДаннымиБанкаРаспознаннаяОперация(Документ, ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ЗавершитьЗаполнениеДаннымиБанка(Документ, ДанныеЗаполнения) Экспорт
	
	ДанныеЗаполнения.Очистить();// Предотвращаем ошибочное использование специализированных данных универсальными механизмами
	
КонецПроцедуры

Процедура ЗаполнитьРеквизит(Приемник, ИмяСвойстваПриемника, Источник, Знач ИмяСвойстваИсточника = "") Экспорт
	
	Если ПустаяСтрока(ИмяСвойстваИсточника) Тогда
		ИмяСвойстваИсточника = ИмяСвойстваПриемника;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("Структура") Тогда
		// Проверим что свойство задано
		Если Не Источник.Свойство(ИмяСвойстваИсточника) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Приемник[ИмяСвойстваПриемника] = Источник[ИмяСвойстваИсточника];
	
КонецПроцедуры

Функция НовыйДанныеЗаполнения(Операция, ПлатежноеПоручение, ХозяйственнаяОперация, ВладелецСчета)
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ВидДанныхЗаполнения",   "ДанныеБанка");
	ДанныеЗаполнения.Вставить("Операция",              Операция);
	ДанныеЗаполнения.Вставить("ПлатежноеПоручение",    ПлатежноеПоручение);
	ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", ХозяйственнаяОперация);
	ДанныеЗаполнения.Вставить("ВладелецСчета",         ВладелецСчета);
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

#КонецОбласти

#Область СозданиеДокументов

// Отбор - Массив идентификаторов операций в выписке
Функция СоздатьДокументы(Выписка, РаспознаннаяВыписка, Настройки, Отбор = Неопределено) Экспорт
	
	РезультатСозданияДокументов = Новый Соответствие; // Ключ - идентификатор операции, значение - см. НовыйРезультатЗаписиДокумента()
	
	Для Каждого Операция Из Выписка.Операции Цикл
		
		Если Отбор <> Неопределено И Отбор.Найти(Операция.Идентификатор) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		РаспознаннаяОперация = РаспознаннаяВыписка.Операции.Найти(Операция.Идентификатор, "Идентификатор");
		Если РаспознаннаяОперация = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ХозяйственнаяОперация = РаспознаннаяОперация.ХозяйственнаяОперация;
		Если ХозяйственнаяОперация = Неопределено 
			И Не ЗначениеЗаполнено(РаспознаннаяОперация.ПлатежноеПоручение)
			И Не ЗначениеЗаполнено(РаспознаннаяОперация.Ссылка) Тогда
			// Записывать такой документ не имеет смысла
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РаспознаннаяОперация.Ссылка) Тогда
			// 1. Может быть "распознана" пользователем. В этом случае следует записать результат его работы.
			// 2. Банковский документ может быть создан вручную, при загрузке получаем только отметку подтверждения выпиской банка.
			ОбъектДокумента = РаспознаннаяОперация.Ссылка.ПолучитьОбъект();
			
			// Если документ уже подтвержден выпиской банка, то отметку не изменяем, чтобы не устанавливалась "модифицированность" документа,
			// т.к. в ЗаписатьДокумент() если документ модифицирован, он обязательно будет перезаписан,
			// а это замедляет загрузку Выписки и сбивает Последовательность документов.
			// А также может привести к тому, что у документов будет отменено проведение, если в Настройках не установлено,
			// что документы нужно Проводить после загрузки.
			Если Операция.ПоступилоСписано = "Списано" И НЕ ОбъектДокумента.НеПодтвержденоВыпискойБанка Тогда
				ОбъектДокумента.НеПодтвержденоВыпискойБанка = Ложь;
			КонецЕсли;
		Иначе
			
			ТипСсылки = ТипДокументаОперацииВыписки(Операция);
			Если ТипСсылки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Новый(ТипСсылки));
			Если МенеджерДокумента = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ОбъектДокумента = МенеджерДокумента.СоздатьДокумент();
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(РаспознаннаяОперация.Ссылка) Или ХозяйственнаяОперация <> Неопределено Тогда
			ДанныеЗаполнения = НовыйДанныеЗаполнения(
				Операция,
				РаспознаннаяОперация.ПлатежноеПоручение,
				ХозяйственнаяОперация,
				РаспознаннаяВыписка.ВладелецСчета);
			ОбъектДокумента.Заполнить(ДанныеЗаполнения);
		КонецЕсли;
		
		Проводить = ЗначениеНастройкиСозданияДокументов(Настройки, "ПроводитьДокумент", ТипЗнч(ОбъектДокумента.Ссылка));
		РезультатСозданияДокумента = ЗаписатьДокумент(ОбъектДокумента, Проводить);
		
		Если ЗначениеЗаполнено(РезультатСозданияДокумента.Ссылка) Тогда
			РаспознаннаяОперация.Ссылка = РезультатСозданияДокумента.Ссылка;
		КонецЕсли;
		
		РезультатСозданияДокументов.Вставить(Операция.Идентификатор, РезультатСозданияДокумента);
		
	КонецЦикла;
	
	Возврат РезультатСозданияДокументов;
	
КонецФункции

// Перед созданием документов следует избавиться от ссылок на не созданные новые объекты,
// чтобы в созданных документов не было "битых" ссылок.
// При работе формы в режиме "не создавать элементы автоматически" новые объекты не создаются, но документы должны быть созданы.
Процедура УдалитьНовыеОбъекты(РаспознанныеОперации, УчастникиОпераций) Экспорт
	
	Для Каждого РаспознаннаяОперация Из РаспознанныеОперации Цикл
		
		СвойстваКУдалению = Новый Массив;
		
		Если РаспознаннаяОперация.ХозяйственнаяОперация = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СвойствоОперации Из РаспознаннаяОперация.ХозяйственнаяОперация Цикл
			
			ТипСвойства = ТипЗнч(СвойствоОперации.Значение);
			
			НовыеОбъектыПоТипу = УчастникиОпераций.НовыеОбъекты[ТипСвойства];
			Если НовыеОбъектыПоТипу = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если НовыеОбъектыПоТипу.Найти(СвойствоОперации.Значение, "Ссылка") <> Неопределено Тогда
				СвойстваКУдалению.Добавить(СвойствоОперации.Ключ);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого ИмяСвойства Из СвойстваКУдалению Цикл
			РаспознаннаяОперация.ХозяйственнаяОперация.Удалить(ИмяСвойства);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаписатьДокумент(Документ, Проводить)
	
	Результат = НовыйРезультатЗаписиДокумента();
	Результат.Успешно       = Истина;
	Результат.Ссылка        = Документ.Ссылка;
	Результат.Идентификатор = Документ.НомерВходящегоДокумента;
	
	Если Документ.ПометкаУдаления Тогда
		Документ.ПометкаУдаления = Ложь;
	КонецЕсли;
	
	// Проверим, надо ли что-то записывать
	Если Не Документ.Модифицированность()
		И Не Документ.ЭтоНовый()
		И (Не Проводить Или Документ.Проведен) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ОписаниеОшибки = "";
	Отказ = ДатыЗапретаИзменения.ИзменениеЗапрещено(Документ,, ОписаниеОшибки);
	Если Отказ Тогда
		Результат.Успешно = Ложь;
		
		Результат.КраткоеПредставлениеОшибки   = ОписаниеОшибки;
		Результат.ПодробноеПредставлениеОшибки = ОписаниеОшибки;
		
		Возврат Результат;
	Иначе
		Документ.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
	КонецЕсли;
	
	Если Проводить Тогда
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
	ИначеЕсли Документ.Проведен Тогда
		РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
	Иначе
		РежимЗаписи = РежимЗаписиДокумента.Запись;
	КонецЕсли;
	
	// Подготовим элементы описания ошибки
	ШаблонСообщенияОбОшибке = НСтр("ru = 'Не удалось %1 документ %2 по причине: 
                                    |%3'"); // "создать", "записать", "провести"
	
	Если Не Документ.ЭтоНовый() Тогда
		ПредставлениеДокумента = Строка(Документ.Ссылка);
	Иначе
		// Стандартное представление не подходит, поэтому сконструируем нестандартное
		ШаблонПредставления = НСтр("ru = '%1 № %2 от %3'");
		ПредставлениеДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонПредставления,
			Документ.Метаданные().Синоним,
			Документ.НомерВходящегоДокумента,
			Формат(Документ.ДатаВходящегоДокумента, "ДЛФ=D"));
	КонецЕсли;
	
	// Проверим возможность проведения
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		СообщенияДоПроверкиЗаполнения = ПолучитьСообщенияПользователю(Истина); // Для перехвата сообщений в ходе проверки
		
		Если Не Документ.ПроверитьЗаполнение() Тогда
			
			Результат.Успешно = Ложь;
			
			СообщенияПроверкиЗаполнения = ПолучитьСообщенияПользователю(Истина);
			ТекстыСообщений = Новый Массив;
			Для Каждого СообщениеПользователю Из СообщенияПроверкиЗаполнения Цикл
				ТекстыСообщений.Добавить(СообщениеПользователю.Текст);
			КонецЦикла;
			
			Если ЗначениеЗаполнено(ТекстыСообщений) Тогда
				Результат.КраткоеПредставлениеОшибки = СтрСоединить(ТекстыСообщений, Символы.ПС);
			Иначе
				Результат.КраткоеПредставлениеОшибки = НСтр("ru = 'Документ заполнен неверно'");
			КонецЕсли;
			
			Результат.ПодробноеПредставлениеОшибки = Результат.КраткоеПредставлениеОшибки;
			
		КонецЕсли;
		
		Для Каждого СообщениеПользователю Из СообщенияДоПроверкиЗаполнения Цикл
			// Вернем в стек сообщений те, что были направлены пользователю до начала проверки
			СообщениеПользователю.Сообщить();
		КонецЦикла;
		
	КонецЕсли;
	
	// Запишем документ
	Если Результат.Успешно Тогда
		
		Попытка
			Документ.Записать(РежимЗаписи);
		Исключение
			
			Результат.Успешно = Ложь;
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			Результат.ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			Результат.КраткоеПредставлениеОшибки   = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			
		КонецПопытки;
		
	КонецЕсли;
	
	Если Результат.Успешно Тогда
		Результат.Ссылка = Документ.Ссылка;
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Проведение И Не ТранзакцияАктивна() Тогда
		// Если не удалось провести документ, то хотя бы запишем. Сделать это можем только, если запись выполняется вне транзакции.
		РезультатЗаписи = ЗаписатьДокумент(Документ, Ложь);
		Если Не РезультатЗаписи.Успешно Тогда
			Возврат РезультатЗаписи;
		Иначе
			// Все равно считаем операцию не успешной
			Результат.Ссылка       = Документ.Ссылка;
			ПредставлениеДокумента = Строка(Результат.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	// Оформим результат операции
	Если Не Результат.Успешно Тогда
		
		УровеньОшибкиЖР = УровеньЖурналаРегистрации.Ошибка;
		Если Не ЗначениеЗаполнено(Результат.Ссылка) Тогда
			Действие = НСтр("ru = 'создать'");
		ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			Действие = НСтр("ru = 'провести'");
			
			// Документ может не проводится из-за того, что не полностью заполнен.
			// Это не является "ошибкой" базы (или файла), поэтому такие сообщения выводим для информации.
			УровеньОшибкиЖР = УровеньЖурналаРегистрации.Предупреждение;
		Иначе
			Действие = НСтр("ru = 'записать'");
		КонецЕсли;
		
		Результат.ТекстСообщенияПользователю  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщенияОбОшибке,
			Действие,
			ПредставлениеДокумента,
			Результат.КраткоеПредставлениеОшибки);
		
		ТекстЖурналаРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщенияОбОшибке,
			Действие,
			ПредставлениеДокумента,
			Результат.ПодробноеПредставлениеОшибки);
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(),
			УровеньОшибкиЖР,
			Документ.Метаданные(),
			Документ.Ссылка,
			ТекстЖурналаРегистрации);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НовыйРезультатЗаписиДокумента()
	
	Результат = Новый Структура;
	Результат.Вставить("Успешно",                      Ложь);
	Результат.Вставить("Ссылка",                       Неопределено);
	Результат.Вставить("Идентификатор",                "");
	Результат.Вставить("ТекстСообщенияПользователю",   "");
	Результат.Вставить("ПодробноеПредставлениеОшибки", "");
	Результат.Вставить("КраткоеПредставлениеОшибки",   "");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПредупреждениеОПроблемах

Функция БанковскийСчетВыпискиОпределен(РаспознаннаяВыписка, УчастникиОпераций)
	
	Протокол = Неопределено;
	Если Не ЗначениеЗаполнено(РаспознаннаяВыписка.ВладелецСчета.Организация) Тогда
		Протокол = РаспознаннаяВыписка.ВладелецСчета.ПротоколыВыбораСсылок.Организация;
	ИначеЕсли Не ЗначениеЗаполнено(РаспознаннаяВыписка.ВладелецСчета.БанковскийСчет) Тогда
		Протокол = РаспознаннаяВыписка.ВладелецСчета.ПротоколыВыбораСсылок.БанковскийСчет;
	КонецЕсли;
	
	Если Протокол = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Предупреждение = УстановитьПредупреждениеПриРаспознавании(РаспознаннаяВыписка, "БанковскийСчетНеНайден");
	Предупреждение.Текст = НСтр("ru = 'Не найден банковский счет.'");
	
	Для Каждого ЗаписьПротокола Из Протокол Цикл
		Если ЗаписьПротокола.ПричинаОтказа = "НетИдентификаторов" Тогда
			Предупреждение.Текст = НСтр("ru = 'Не указаны реквизиты банковского счета.'");
			Прервать;
		ИначеЕсли ЗначениеЗаполнено(ЗаписьПротокола.Идентификатор) Тогда
			ОписаниеИдентификатора = ИдентификацияУчастниковБанковскихОпераций.ОписаниеИдентификатора(
				ЗаписьПротокола.Идентификатор,
				УчастникиОпераций);
			Если ОписаниеИдентификатора <> Неопределено И ОписаниеИдентификатора.Схема = "BBAN" Тогда
					
				Предупреждение.ДетальныеДанные = ЗаписьПротокола.Идентификатор;
				
				ПредставлениеИдентификатора = ИдентификацияУчастниковБанковскихОпераций.ПредставлениеИдентификатора(
					ЗаписьПротокола.Идентификатор,
					УчастникиОпераций);
					
				Если Не ПустаяСтрока(ПредставлениеИдентификатора) Тогда
					Предупреждение.Текст = СтрШаблон(НСтр("ru = 'В файле указан расчетный счет, не принадлежащий организации: %1.'"), ПредставлениеИдентификатора);
				КонецЕсли;

				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура ПодготовитьПредупрежденияПриВыбореСсылок(РаспознаннаяОперация, Параметры)
	
	Если РаспознаннаяОперация.ХозяйственнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.ПротоколыВыбораСсылок) Тогда
		Возврат;
	КонецЕсли;
	
	Контрагент = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РаспознаннаяОперация.ХозяйственнаяОперация, "Контрагент");
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не КонтрагентДолженБытьОпределенТочно(Параметры.Операция.ПоступилоСписано, РаспознаннаяОперация.ХозяйственнаяОперация) Тогда
		Возврат;
	КонецЕсли;
	
	ПротоколВыбора = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры.ПротоколыВыбораСсылок, "Контрагент");
		
	Если ПротоколВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ДанныеОПроблеме = ПротоколВыбора.НайтиСтроки(Новый Структура("ПричинаОтказа", "СлучайныйВыбор"));
	
	Если Не ЗначениеЗаполнено(ДанныеОПроблеме) Тогда
		Возврат;
	КонецЕсли;
	
	Ссылки = Новый Массив;
	Ссылки.Добавить(Контрагент);
	
	ЕстьСсылкиНовыхОбъектов = Ложь;
	Для Каждого Проблема Из ДанныеОПроблеме Цикл
		
		Ссылка = Проблема.Ссылка;
		
		// Контрагенты могли быть определены поиском среди договоров.
		Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			ОписаниеСсылки = ИдентификацияУчастниковБанковскихОпераций.ОписаниеСсылки(Ссылка, Параметры.УчастникиОпераций);
			Если ОписаниеСсылки <> Неопределено Тогда
				Ссылка = ОписаниеСсылки.Владелец;
			КонецЕсли;
		КонецЕсли;
		
		Ссылки.Добавить(Ссылка);
		
		Если ЕстьСсылкиНовыхОбъектов Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеНовогоОбъекта = ИдентификацияУчастниковБанковскихОпераций.ОписаниеНовогоОбъекта(
			Ссылка,
			Параметры.УчастникиОпераций);
		
		ЕстьСсылкиНовыхОбъектов = ОписаниеНовогоОбъекта <> Неопределено;
		
	КонецЦикла;
	
	Ссылки = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Ссылки);
	Если Ссылки.Количество() < 2 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЕстьСсылкиНовыхОбъектов Тогда
		Текст = НСтр("ru = 'Проверьте, верно ли указан контрагент: указанные реквизиты не позволяют достоверно его определить.'");
	Иначе
		ШаблонТекста = НСтр("ru = 'Проверьте, верно ли указан контрагент: указанным реквизитам соответствуют %1.'");
		КоличествоСсылок = ЧислоПрописью(
			Ссылки.Количество(),
			"",
			НСтр("ru = 'контрагент, контрагента, контрагентов, м,,,,,0'"));
		Текст = СтрШаблон(ШаблонТекста, НРег(КоличествоСсылок));
	КонецЕсли;
	
	Предупреждение = УстановитьПредупреждениеПриРаспознавании(РаспознаннаяОперация, "СлучайныйВыбор");
	Предупреждение.Текст           = Текст;
	Предупреждение.ДетальныеДанные = Ссылки;
	
КонецПроцедуры

Функция КонтрагентДолженБытьОпределенТочно(ПоступилоСписано, ХозяйственнаяОперация)
	
	ВидОперации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ХозяйственнаяОперация, "ВидОперацииДокумента");
	Если ВидОперации = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПоступилоСписано = "Поступило" Тогда
		Возврат Документы.ПоступлениеНаРасчетныйСчет.КонтрагентДолженБытьЗаполнен(ВидОперации);
	ИначеЕсли ПоступилоСписано = "Списано" Тогда
		Возврат Документы.СписаниеСРасчетногоСчета.КонтрагентДолженБытьЗаполнен(ВидОперации);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция НовыйПредупрежденияПриРаспознавании()
	
	Предупреждения = Новый ТаблицаЗначений;
	Предупреждения.Колонки.Добавить("КодПроблемы", Новый ОписаниеТипов("Строка"));
	Предупреждения.Колонки.Добавить("Текст",       Новый ОписаниеТипов("Строка"));
	Предупреждения.Колонки.Добавить("ДетальныеДанные");
	
	Возврат Предупреждения;
	
КонецФункции

Функция УстановитьПредупреждениеПриРаспознавании(Контекст, КодПроблемы)
	
	Если Контекст.Предупреждения = Неопределено Тогда
		Контекст.Предупреждения = НовыйПредупрежденияПриРаспознавании();
	КонецЕсли;
	
	НоваяЗапись = Контекст.Предупреждения.Добавить();
	НоваяЗапись.КодПроблемы = КодПроблемы;
	
	Возврат НоваяЗапись;
	
КонецФункции

#КонецОбласти

#Область ПоискСчетовНаОплатуПокупателюВНазначенииПлатежа

Функция РеквизитыПокупателей(РаспознаннаяВыписка)
	
	РеквизитыПокупателей = Новый ТаблицаЗначений;
	РеквизитыПокупателей.Колонки.Добавить("Организация",        Новый ОписаниеТипов("СправочникСсылка.Организации"));
	РеквизитыПокупателей.Колонки.Добавить("Контрагент",         Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	РеквизитыПокупателей.Колонки.Добавить("ДоговорКонтрагента", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	
	Для каждого Операция Из РаспознаннаяВыписка.Операции Цикл
		Если Операция.ХозяйственнаяОперация <> Неопределено И НЕ ЗначениеЗаполнено(Операция.ПлатежноеПоручение) Тогда
			Если НЕ ЭтоХозяйственнаяОперацияОплатаПокупателя(Операция.ХозяйственнаяОперация) Тогда
				Продолжить;
			КонецЕсли;
			Если ЗначениеЗаполнено(Операция.ХозяйственнаяОперация.Контрагент) И ЗначениеЗаполнено(Операция.ХозяйственнаяОперация.ДоговорКонтрагента)
				И РеквизитыПокупателей.НайтиСтроки(Новый Структура("Контрагент, ДоговорКонтрагента",
					Операция.ХозяйственнаяОперация.Контрагент, Операция.ХозяйственнаяОперация.ДоговорКонтрагента)).Количество() = 0 Тогда
				НоваяСтрока = РеквизитыПокупателей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Операция.ХозяйственнаяОперация);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РеквизитыПокупателей;
	
КонецФункции

Процедура НайтиСчетНаОплатуПокупателю(РаспознаннаяВыписка, Выписка, УчастникиОпераций)
	
	СтруктураПоискаПоступило = Новый Структура("ПоступилоСписано", "Поступило");
	ТаблицаПоступило         = Выписка.Операции.Скопировать(СтруктураПоискаПоступило);
	
	НеоплаченныеСтатусы = Новый Массив;
	НеоплаченныеСтатусы.Добавить(Перечисления.СтатусОплатыСчета.НеОплачен);
	НеоплаченныеСтатусы.Добавить(Перечисления.СтатусОплатыСчета.ОплаченЧастично);
	
	РеквизитыПокупателей = РеквизитыПокупателей(РаспознаннаяВыписка);
	Если РеквизитыПокупателей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Организация = РаспознаннаяВыписка.ВладелецСчета.Организация;
	РеквизитыПокупателей.ЗаполнитьЗначения(Организация, "Организация");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПериодАктуальности",   ДобавитьМесяц(НачалоДня(Выписка.КонецПериода), -12)); // Счета, которым больше года считаем неактуальными и не рассматриваем.
	Запрос.УстановитьПараметр("Организация",          Организация);
	Запрос.УстановитьПараметр("Статусы",              НеоплаченныеСтатусы);
	Запрос.УстановитьПараметр("РеквизитыПокупателей", РеквизитыПокупателей);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеквизитыПокупателей.Организация КАК Организация,
	|	РеквизитыПокупателей.Контрагент КАК Контрагент,
	|	РеквизитыПокупателей.ДоговорКонтрагента КАК Договор
	|ПОМЕСТИТЬ ВТ_РеквизитыПокупателей
	|ИЗ
	|	&РеквизитыПокупателей КАК РеквизитыПокупателей
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Контрагент,
	|	Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Документ КАК Документ,
	|	ВложенныйЗапрос.Дата КАК Дата,
	|	ВложенныйЗапрос.Номер КАК Номер,
	|	ВложенныйЗапрос.Организация КАК Организация,
	|	ВложенныйЗапрос.Контрагент КАК Контрагент,
	|	ВложенныйЗапрос.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВложенныйЗапрос.Статус КАК Статус,
	|	ВложенныйЗапрос.Сумма КАК Сумма,
	|	ВложенныйЗапрос.Проведен КАК Проведен
	|ПОМЕСТИТЬ ВТ_Счета
	|ИЗ
	|	(ВЫБРАТЬ
	|		СчетНаОплатуПокупателю.Ссылка КАК Документ,
	|		СчетНаОплатуПокупателю.Дата КАК Дата,
	|		СчетНаОплатуПокупателю.Номер КАК Номер,
	|		СчетНаОплатуПокупателю.Организация КАК Организация,
	|		СчетНаОплатуПокупателю.Контрагент КАК Контрагент,
	|		СчетНаОплатуПокупателю.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|		ЕСТЬNULL(СтатусыДокументов.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусОплатыСчета.НеОплачен)) КАК Статус,
	|		МАКСИМУМ(СчетНаОплатуПокупателю.СуммаДокумента) КАК Сумма,
	|		СчетНаОплатуПокупателю.Проведен КАК Проведен
	|	ИЗ
	|		Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументов КАК СтатусыДокументов
	|			ПО СчетНаОплатуПокупателю.Ссылка = СтатусыДокументов.Документ
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РеквизитыПокупателей КАК ВТ_РеквизитыПокупателей
	|			ПО СчетНаОплатуПокупателю.Организация = ВТ_РеквизитыПокупателей.Организация
	|				И СчетНаОплатуПокупателю.Контрагент = ВТ_РеквизитыПокупателей.Контрагент
	|				И СчетНаОплатуПокупателю.ДоговорКонтрагента = ВТ_РеквизитыПокупателей.Договор
	|	ГДЕ
	|		НЕ СчетНаОплатуПокупателю.ПометкаУдаления
	|		И СчетНаОплатуПокупателю.Организация = &Организация
	|		И СчетНаОплатуПокупателю.Дата >= &ПериодАктуальности
	|		И ВТ_РеквизитыПокупателей.Контрагент ЕСТЬ НЕ NULL 
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СчетНаОплатуПокупателю.Проведен,
	|		СчетНаОплатуПокупателю.Дата,
	|		СчетНаОплатуПокупателю.Номер,
	|		ЕСТЬNULL(СтатусыДокументов.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусОплатыСчета.НеОплачен)),
	|		СчетНаОплатуПокупателю.Организация,
	|		СчетНаОплатуПокупателю.Контрагент,
	|		СчетНаОплатуПокупателю.ДоговорКонтрагента,
	|		СчетНаОплатуПокупателю.Ссылка) КАК ВложенныйЗапрос
	|ГДЕ
	|	ВложенныйЗапрос.Статус В(&Статусы)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Счета.Документ КАК Документ,
	|	ВТ_Счета.Дата КАК Дата,
	|	ВТ_Счета.Номер КАК Номер,
	|	ВТ_Счета.Контрагент КАК Контрагент,
	|	ВТ_Счета.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТ_Счета.Статус КАК Статус,
	|	МАКСИМУМ(ВТ_Счета.Сумма) КАК Сумма,
	|	СУММА(ЕСТЬNULL(ОплатаСчетов.Сумма, 0)) КАК УжеОплаченнаяСумма,
	|	ВТ_Счета.Проведен КАК Проведен
	|ИЗ
	|	ВТ_Счета КАК ВТ_Счета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОплатаСчетов КАК ОплатаСчетов
	|		ПО ВТ_Счета.Организация = ОплатаСчетов.Организация
	|			И ВТ_Счета.Документ = ОплатаСчетов.СчетНаОплату
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Счета.Документ,
	|	ВТ_Счета.Дата,
	|	ВТ_Счета.Номер,
	|	ВТ_Счета.Контрагент,
	|	ВТ_Счета.ДоговорКонтрагента,
	|	ВТ_Счета.Статус,
	|	ВТ_Счета.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Контрагент,
	|	Дата УБЫВ";
	
	ТаблицаСчетов = Запрос.Выполнить().Выгрузить();
	ТаблицаСчетов.Индексы.Добавить("Контрагент");
	
	СуммыСчетов = Новый Соответствие;
	
	Для каждого Операция Из ТаблицаПоступило Цикл
		РаспознаннаяОперация = НайтиПоИдентификатору(РаспознаннаяВыписка.Операции, Операция.Идентификатор);
		
		// Счета заполняем только в "новых" документах.
		Если РаспознаннаяОперация.ХозяйственнаяОперация = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЭтоХозяйственнаяОперацияОплатаПокупателя(РаспознаннаяОперация.ХозяйственнаяОперация) Тогда
			Продолжить;
		КонецЕсли;
		
		СчетНаОплату = Неопределено;
		Если РаспознаннаяОперация.ХозяйственнаяОперация.Свойство("СчетНаОплату", СчетНаОплату) И ЗначениеЗаполнено(СчетНаОплату) Тогда
			СуммыСчетов.Вставить(СчетНаОплату, РаспознаннаяОперация.ХозяйственнаяОперация.СуммаВзаиморасчетов);
			Продолжить;
		КонецЕсли;
		
		Счета = ТаблицаСчетов.НайтиСтроки(Новый Структура("Контрагент, ДоговорКонтрагента",
			РаспознаннаяОперация.ХозяйственнаяОперация.Контрагент, РаспознаннаяОперация.ХозяйственнаяОперация.ДоговорКонтрагента));
		Если Счета.Количество() = 0 Тогда
			Продолжить;
		ИначеЕсли Счета.Количество() = 1 Тогда
			// Если неоплачен только один Счет, то без дополнительной проверки в Назначении платежа считаем, что оплата пришла по нему.
			СуммыСчетов.Вставить(Счета[0].Документ, РаспознаннаяОперация.ХозяйственнаяОперация.СуммаВзаиморасчетов);
			РаспознаннаяОперация.ХозяйственнаяОперация.Вставить("СчетНаОплату", Счета[0].Документ);
			Продолжить;
		КонецЕсли;
		
		НазначениеПлатежа = ВРег(СокрЛП(Операция.НазначениеПлатежа));
		
		ВсеРазделителиИзНазначения = РазделителиИзТекста(НазначениеПлатежа);
		ВсеСловаНазначения         = СтрРазделить(НазначениеПлатежа, ВсеРазделителиИзНазначения, Ложь);
		
		НайденныеСчета = Новый Соответствие;
		
		Для каждого РеквизитыСчета Из Счета Цикл
			НомерБезПрефикса = ВРег(СокрЛП(ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыСчета.Номер, Истина, Ложь)));
			Если СтрНайти(НазначениеПлатежа, НомерБезПрефикса) = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(НомерБезПрефикса) Тогда
				СловаНазначения = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ВсеСловаНазначения);
			Иначе
				// В номере есть нецифровой символ, возможно он содержится в разделителях.
				// Уберем его из разделителей и заново получим слова Назначения платежа.
				РазделителиНазначенияСУчетомНомера = ВсеРазделителиИзНазначения;
				РазделителиИзНомера = СокрЛП(РазделителиИзТекста(НомерБезПрефикса));
				ДлинаРазделителейИзНомера = СтрДлина(РазделителиИзНомера);
				Если ДлинаРазделителейИзНомера = 1 Тогда
					РазделителиНазначенияСУчетомНомера = СтрЗаменить(РазделителиНазначенияСУчетомНомера, РазделителиИзНомера, "");
				Иначе
					Для сч = 1 По ДлинаРазделителейИзНомера Цикл
						Разделитель = Сред(РазделителиИзНомера, сч, 1);
						РазделителиНазначенияСУчетомНомера = СтрЗаменить(РазделителиНазначенияСУчетомНомера, Разделитель, "");
					КонецЦикла;
				КонецЕсли;
				
				СловаНазначения = СтрРазделить(НазначениеПлатежа, РазделителиНазначенияСУчетомНомера, Ложь);
			КонецЕсли;
			
			ВхожденияНомера = ВхожденияНомераВТексте(СловаНазначения, НомерБезПрефикса);
			
			Оценщик = НачатьОценкуСоответствия();
			Если ВхожденияНомера.ЕстьТочноеСоответствиеИЗнакНомера Тогда
				ОценитьНайденныйСчет(НайденныеСчета, Оценщик, РаспознаннаяОперация, Операция, РеквизитыСчета, СуммыСчетов);
			ИначеЕсли ВхожденияНомера.ПозицииТочногоВхожденияНомера.Количество() > 0 Тогда
				Если ЭтоНомерПоОкрестностиНомераВТексте(ВхожденияНомера.ПозицииТочногоВхожденияНомера, СловаНазначения) Тогда
					// Исследование окрестностей предполагаемого номера показало, что это не "номер".
					Продолжить;
				КонецЕсли;
				
				ОценитьНайденныйСчет(НайденныеСчета, Оценщик, РаспознаннаяОперация, Операция, РеквизитыСчета, СуммыСчетов);
			ИначеЕсли ВхожденияНомера.ЕстьТолькоЧастичноеСоответствие Тогда
				Продолжить;
			КонецЕсли;
		КонецЦикла;
		
		ЛучшийСчет = ВыбратьЛучшийСчет(НайденныеСчета);
		Если ЗначениеЗаполнено(ЛучшийСчет.Счет) Тогда
			РаспознаннаяОперация.ХозяйственнаяОперация.Вставить("СчетНаОплату", ЛучшийСчет.Счет);
			СуммыСчетов.Вставить(ЛучшийСчет.Счет, ЛучшийСчет.Сумма);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // НайтиСчетНаОплатуПокупателю

Процедура ОценитьНайденныйСчет(НайденныеСчета, Оценщик, РаспознаннаяОперация, Операция, РеквизитыСчета, СуммыСчетов)
	
	НеоплаченнаяСумма = РеквизитыСчета.Сумма - РеквизитыСчета.УжеОплаченнаяСумма;
	
	Если СуммыСчетов[РеквизитыСчета.Документ] <> Неопределено
		И (СуммыСчетов[РеквизитыСчета.Документ] + РаспознаннаяОперация.ХозяйственнаяОперация.СуммаВзаиморасчетов) >= НеоплаченнаяСумма Тогда
		Возврат; // Оплата для этого Счета была найдена ранее.
	КонецЕсли;
	
	ОценитьСоответствиеПоКритерию(Оценщик, Год(РеквизитыСчета.Дата) = Год(Операция.ДатаДокумента));
	ОценитьСоответствиеПоКритерию(Оценщик, НеоплаченнаяСумма = РаспознаннаяОперация.ХозяйственнаяОперация.СуммаВзаиморасчетов);
	ОценитьСоответствиеПоКритерию(Оценщик, Год(РеквизитыСчета.Дата) = (Год(Операция.ДатаДокумента) - 1));
	ОценитьСоответствиеПоКритерию(Оценщик, НеоплаченнаяСумма < РаспознаннаяОперация.ХозяйственнаяОперация.СуммаВзаиморасчетов);
	ОценитьСоответствиеПоКритерию(Оценщик, РеквизитыСчета.Проведен);
	
	НайденныеСчета.Вставить(РеквизитыСчета.Документ, Новый Структура("Сумма, Оценщик", НеоплаченнаяСумма, Оценщик));
	
КонецПроцедуры

Функция ВыбратьЛучшийСчет(НайденныеСчета)
	Перем Счет, Сумма;
	
	СчетаОдногоПриоритета = Новый Массив;
	МаксимальныйПриоритет = 0;
	Для каждого КлючИЗначение Из НайденныеСчета Цикл
		Если МаксимальныйПриоритет < КлючИЗначение.Значение.Оценщик.Приоритет Тогда
			МаксимальныйПриоритет = КлючИЗначение.Значение.Оценщик.Приоритет;
			Счет  = КлючИЗначение.Ключ;
			Сумма = КлючИЗначение.Значение.Сумма;
			
			СчетаОдногоПриоритета = Новый Массив;
			СчетаОдногоПриоритета.Добавить(Счет);
		ИначеЕсли МаксимальныйПриоритет = КлючИЗначение.Значение.Оценщик.Приоритет Тогда
			СчетаОдногоПриоритета.Добавить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Если СчетаОдногоПриоритета.Количество() = 1 Тогда // Выбираем только самые надёжные случаи.
		Возврат Новый Структура("Счет, Сумма", Счет, Сумма);
	Иначе
		Возврат Новый Структура("Счет, Сумма", Неопределено, Неопределено);
	КонецЕсли;
	
КонецФункции

Функция ВхожденияНомераВТексте(СловаНазначения, НомерБезПрефикса)
	
	ВхожденияНомера = Новый Структура("ПозицииТочногоВхожденияНомера, ЕстьТочноеСоответствиеИЗнакНомера, ЕстьТолькоЧастичноеСоответствие",
		Новый Массив, Ложь, Ложь);
	
	Для инд = 0 По СловаНазначения.ВГраница() Цикл
		Слово = СловаНазначения[инд];
		Если Слово = НомерБезПрефикса Тогда
			ВхожденияНомера.ПозицииТочногоВхожденияНомера.Добавить(инд);
		ИначеЕсли СтрНайти(Слово, НомерБезПрефикса) > 0 Тогда
			НайтиПозициюЗнакаНомер    = СтрНайти(Слово, СимволНомера());
			НайтиПозициюЗнакаЛатНомер = СтрНайти(Слово, СимволЛатНомера());
			Если НайтиПозициюЗнакаНомер > 0 И Сред(Слово, НайтиПозициюЗнакаНомер + 1) = НомерБезПрефикса
				ИЛИ НайтиПозициюЗнакаЛатНомер > 0 И Сред(Слово, НайтиПозициюЗнакаЛатНомер + 1) = НомерБезПрефикса Тогда
				ВхожденияНомера.ЕстьТочноеСоответствиеИЗнакНомера = Истина;
				Возврат ВхожденияНомера;
			Иначе
				ВхожденияНомера.ЕстьТолькоЧастичноеСоответствие = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВхожденияНомера;
	
КонецФункции

Функция РазделителиИзТекста(Знач НазначениеПлатежа)
	
	НазначениеПлатежа = СтрЗаменить(НазначениеПлатежа, " ", ""); // Будем искать разделители только в "значащих" символах.
	Разделители = "";
	Для сч = 1 По СтрДлина(НазначениеПлатежа) Цикл
		Символ = Сред(НазначениеПлатежа, сч, 1);
		Если Символ = СимволНомера() // Символ номера "№" необходимо сохранить в тексте.
			ИЛИ СтрНайти(Разделители, Символ) > 0 // Этот символ уже включен в разделители.
			ИЛИ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Символ)
			ИЛИ СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(Символ)
			ИЛИ СтроковыеФункцииКлиентСервер.ТолькоЛатиницаВСтроке(Символ) Тогда
			Продолжить;
		КонецЕсли;
		Разделители = Разделители + Символ;
	КонецЦикла;
	
	Возврат " " + Разделители; // Добавим пробел к остальным разделителям
	
КонецФункции

Функция СловаУдовлетворяютТребованиям(СловоСправа, СловоСлева)
	
	Результат = Истина;
	Если НЕ ПустаяСтрока(СловоСправа) И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Лев(СловоСправа, 1)) Тогда
		// Слово справа от предполагаемого номера начинается с цифры, возможно эти слова являются частью Даты, Суммы или составного номера.
		Результат = Ложь;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СловоСлева) И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Прав(СловоСлева, 1)) Тогда
		// Слово слева от предполагаемого номера заканчивается на цифру, возможно эти слова являются частью Даты, Суммы или составного номера.
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СимволНомера()
	Возврат "№";
КонецФункции

Функция СимволЛатНомера()
	Возврат "N";
КонецФункции

Функция ЭтоНомерПоОкрестностиНомераВТексте(ПозицииНомера, СловаНазначения)
	
	КоличествоСлов = СловаНазначения.ВГраница();
	Для каждого Позиция Из ПозицииНомера Цикл
		СловоСправа = "";
		СловоСлева  = "";
		Если Позиция = 0 Тогда // Номер найден в начале Назначения платежа, поэтому исследуем только область "справа".
			СловоСправа = СловаНазначения[Позиция + 1];
		ИначеЕсли Позиция = КоличествоСлов Тогда // Номер найден в конце Назначения платежа, поэтому исследуем только область "слева".
			СловоСлева  = СловаНазначения[Позиция - 1];
		Иначе
			СловоСправа = СловаНазначения[Позиция + 1];
			СловоСлева  = СловаНазначения[Позиция - 1];
		КонецЕсли;
		
		Если СловаУдовлетворяютТребованиям(СловоСправа, СловоСлева) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЭтоХозяйственнаяОперацияОплатаПокупателя(ХозяйственнаяОперация)
	
	Если НЕ ХозяйственнаяОперация.Свойство("ВидОперацииДокумента")
		ИЛИ НЕ ХозяйственнаяОперация.Свойство("Контрагент")
		ИЛИ НЕ ХозяйственнаяОперация.Свойство("ДоговорКонтрагента") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ХозяйственнаяОперация.ВидОперацииДокумента <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти
