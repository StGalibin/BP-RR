
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

///////////////////////////////////////////////////////////////////////////////
// Определение вида документа платежа

Функция ЕстьАвансыПокупателей(ВидОперации) Экспорт

	ЕстьАвансы = (ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика);

	Возврат ЕстьАвансы;

КонецФункции

Функция ЕстьПрочиеРасчетыПоДоходам(ВидОперации) Экспорт

	ЕстьРасчетыДоходы = (ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратЗаймаКонтрагентом
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеЗайма
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеКредита
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаКонтрагентом
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеЗайма
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеКредита);

	Возврат ЕстьРасчетыДоходы;

КонецФункции

Функция ЕстьПрочиеРасчетыПоРасходам(ВидОперации) Экспорт

	ЕстьРасчетыРасходы = (ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратЗайма
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратКредита
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаЗаймаКонтрагенту
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗайма
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратКредита
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаКонтрагенту);
		
	Возврат ЕстьРасчетыРасходы;

КонецФункции

Функция ТребуетсяНастройкаДоходовПоПрочимРасчетам(ВидОперации) Экспорт

	ТребуетсяНастройкаДоходов = (ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратЗаймаКонтрагентом
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаКонтрагентом);

	Возврат ТребуетсяНастройкаДоходов;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Заполнение документов платежа

Процедура УстановитьПатентАванса(ДокументОбъект) Экспорт
	
	Если УчетнаяПолитика.ПрименяетсяУСНПатент(ДокументОбъект.Организация, ДокументОбъект.Дата) Тогда
		
		Если ЕстьАвансыПокупателей(ДокументОбъект.ВидОперации) Тогда		
			
			ДокументОбъект.Патент = Справочники.Патенты.ПустаяСсылка();
			
			Для каждого СтрокаПлатеж Из ДокументОбъект.РасшифровкаПлатежа Цикл			
				Если ТипЗнч(СтрокаПлатеж.ПорядокОтраженияАванса) = Тип("СправочникСсылка.Патенты") Тогда				
					// авансы могут быть отражены только по одному патенту, выбор нескольких патентов исключен при проверке заполнения
					ДокументОбъект.Патент = СтрокаПлатеж.ПорядокОтраженияАванса;
					Прервать;
				КонецЕсли; 
			КонецЦикла; 
			
		ИначеЕсли ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка Тогда
			СпособУчетаВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(ДокументОбъект.Организация, ДокументОбъект.Дата);
			Если НЕ (ДокументОбъект.ВыручкаСНТТ 
				И СпособУчетаВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости) Тогда
				
				ДокументОбъект.Патент = Справочники.Патенты.ПустаяСсылка();
				
			КонецЕсли;
		Иначе
			ДокументОбъект.Патент = Справочники.Патенты.ПустаяСсылка();
		КонецЕсли;
	Иначе
		ДокументОбъект.Патент = Справочники.Патенты.ПустаяСсылка();
	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПОСТУПЛЕНИЕ РАСХОДОВ УСН

Процедура ПоступлениеРасходовУСН(ТаблицаРасходы, ТаблицаРеквизиты, СуммаСторноРасхода, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыПоступлениеРасходовУСН(ТаблицаРасходы, ТаблицаРеквизиты);
	Если Параметры.Реквизиты.Количество() = 0
		ИЛИ Параметры.ТаблицаРасходы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	ПрименяетсяУСНДоходыМинусРасходы = УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Реквизиты.Организация, Реквизиты.Период);
	Если НЕ ПрименяетсяУСНДоходыМинусРасходы Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СуммаСторноРасхода) Тогда
		СуммаСторноРасхода = 0;
	КонецЕсли;

	ТоварыПоОплате    = (УчетнаяПолитика.ПорядокПризнанияРасходовПоТоварам(Реквизиты.Организация, Реквизиты.Период) =
				Перечисления.ПорядокПризнанияРасходовПоТоварам.ПоОплатеПоставщику);
	РасходыПоОтгрузке = (УчетнаяПолитика.ПорядокПризнанияРасходовПоТоварам(Реквизиты.Организация, Реквизиты.Период) =
				Перечисления.ПорядокПризнанияРасходовПоТоварам.ПоФактуРеализации);
	МатериалыПоОплате = (УчетнаяПолитика.ПорядокПризнанияМатериальныхРасходов(Реквизиты.Организация, Реквизиты.Период) =
				Перечисления.ПорядокПризнанияМатериальныхРасходов.ПоОплатеПоставщику);
	ДопРасходыПоОплате = (УчетнаяПолитика.ПорядокПризнанияДопРасходов(Реквизиты.Организация, Реквизиты.Период) =
				Перечисления.ПорядокПризнанияДопРасходов.ПоОплатеПоставщику);
	ТаможенныеПлатежиПоОплате = (УчетнаяПолитика.ПорядокПризнанияТаможенныхПлатежей(Реквизиты.Организация, Реквизиты.Период) =
				Перечисления.ПорядокПризнанияТаможенныхПлатежей.ПоОплате);
	ВыделятьНДСУСН = (УчетнаяПолитика.ПорядокПризнанияРасходовПоНДС(Реквизиты.Организация, Реквизиты.Период) =
				Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику);

	ДвиженияРасхода = Движения.РасходыПриУСН;
	НомерСтроки = 0;
	Для Каждого СтрокаТаблицы Из Параметры.ТаблицаРасходы Цикл

		НомерСтроки     = НомерСтроки + 1;
		ДвижениеРасхода = ДвиженияРасхода.Добавить();
		ЗаполнитьЗначенияСвойств(ДвижениеРасхода, Реквизиты);
		ЗаполнитьЗначенияСвойств(ДвижениеРасхода, СтрокаТаблицы);

		ДвижениеРасхода.НомерСтрокиДокумента = НомерСтроки;
		ДвижениеРасхода.РасчетныйДокумент    = Реквизиты.Регистратор;

		Если Реквизиты.ЭтоВозврат ИЛИ Реквизиты.РасходыПредпринимателя Тогда
			РасходыПоОплате = ((ТоварыПоОплате И СтрокаТаблицы.ЭтоТовар) ИЛИ (МатериалыПоОплате И СтрокаТаблицы.ЭтоМатериал));
			Если Реквизиты.РасходыПредпринимателя И РасходыПоОплате Тогда
				ДвижениеРасхода.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписаноПринято;
			Иначе
				ДвижениеРасхода.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписано;
			КонецЕсли;
		ИначеЕсли ДвижениеРасхода.ВидРасхода = Перечисления.ВидыРасходовУСН.Номенклатура
					ИЛИ ДвижениеРасхода.ВидРасхода = Перечисления.ВидыРасходовУСН.РБП Тогда
			ДвижениеРасхода.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено;
		ИначеЕсли ДвижениеРасхода.ВидРасхода = Перечисления.ВидыРасходовУСН.ДопРасходы Тогда
			Если ДопРасходыПоОплате Тогда
				ДвижениеРасхода.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеОплачено;
			Иначе
				ДвижениеРасхода.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено;
			КонецЕсли;
		ИначеЕсли ДвижениеРасхода.ВидРасхода = Перечисления.ВидыРасходовУСН.ТаможенныеПлатежи Тогда
			Если ТаможенныеПлатежиПоОплате Тогда
				ДвижениеРасхода.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеОплачено;
			Иначе
				ДвижениеРасхода.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено;
			КонецЕсли;
		ИначеЕсли ДвижениеРасхода.ВидРасхода = Перечисления.ВидыРасходовУСН.НДС_ТС Тогда
			Если ВыделятьНДСУСН Тогда
				ДвижениеРасхода.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеОплачено;
			Иначе
				ДвижениеРасхода.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено;
			КонецЕсли;
		Иначе
			ДвижениеРасхода.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеОплачено;
		КонецЕсли;

		Если Реквизиты.УчетАгентскогоНДС Тогда

			ДвижениеРасходаНДС = ДвиженияРасхода.Добавить();
			ДвижениеРасходаНДС.Период				= Реквизиты.Период;
			ДвижениеРасходаНДС.Организация			= Реквизиты.Организация;
			ДвижениеРасходаНДС.Валюта 				= Реквизиты.Валюта;
			ДвижениеРасходаНДС.РасчетныйДокумент 	= Реквизиты.Регистратор;
			ДвижениеРасходаНДС.ВидРасхода 			= Перечисления.ВидыРасходовУСН.Налоги;
			ДвижениеРасходаНДС.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеОплачено;
			ДвижениеРасходаНДС.СчетУчета 			= ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента;
			ДвижениеРасходаНДС.НомерСтрокиДокумента = НомерСтроки;
			ДвижениеРасходаНДС.ОтражениеВУСН        = ДвижениеРасхода.ОтражениеВУСН;
			ДвижениеРасходаНДС.Сумма                = ДвижениеРасхода.НДС;
			
			ДвижениеРасхода.Сумма = ДвижениеРасхода.Сумма - ДвижениеРасхода.НДС;
			ДвижениеРасхода.НДС = 0;

		КонецЕсли;

		Если Реквизиты.ЭтоВозврат И ДвижениеРасхода.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются Тогда
			ДвижениеРасхода.НДС = 0;
			Если РасходыПоОплате Тогда // Если по оплате, ...
				ДвижениеРасхода.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписаноПринято;
			Иначе // Если по отгрузке, ... (товары или материалы)
				СуммаСторноРасхода = СуммаСторноРасхода + ДвижениеРасхода.Сумма;
			КонецЕсли;
		КонецЕсли;
		
		Если ВыделятьНДСУСН
			И (СтрокаТаблицы.ВидРасхода <> Перечисления.ВидыРасходовУСН.ОС)
			И (СтрокаТаблицы.ВидРасхода <> Перечисления.ВидыРасходовУСН.НМА)
			И (СтрокаТаблицы.ВидРасхода <> Перечисления.ВидыРасходовУСН.ТаможенныеПлатежи)
			И (СтрокаТаблицы.ВидРасхода <> Перечисления.ВидыРасходовУСН.НДС_ТС) Тогда
			ДвижениеРасхода.Сумма = ДвижениеРасхода.Сумма - ДвижениеРасхода.НДС;
		КонецЕсли;
		
	КонецЦикла;

	Движения.РасходыПриУСН.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыПоступлениеРасходовУСН(ТаблицаРасходы, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"					// <Дата> - дата документа
	+ "Регистратор,"			// <ДокументСсылка> - документ-регистратор движений
	+ "Организация,"			// <СправочникСсылка.Организации> - из документа
	+ "ДоговорКонтрагента,"		// <СправочникСсылка.ДоговорыКонтрагентов> - из документа
	+ "УчетАгентскогоНДС,"		// <Булево> - из реквизита договора "УчетАгентскогоНДС"
	+ "ЭтоВозврат,"				// <Булево> - является ли документ возвратом?
	+ "РасходыПредпринимателя," // <Булево>
	+ "Валюта"					// <СправочникСсылка.Валюты> - из реквизита договора "ВалютаВзаиморасчетов"
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы содержимого документа:
	СписокОбязательныхКолонок = ""
	+ "ВидРасхода," 		// <ПеречислениеСсылка.ВидыРасходовУСН>
	+ "СтатусыПартийУСН," 	// <ПеречислениеСсылка.СтатусыПартийУСН>
	+ "ЭлементРасхода," 	// <Неопределенно, СправочникСсылка.ОсновныеСредства, //СправочникСсылка.НематериальныеАктивы, //СправочникСсылка.РасходыБудущихПериодов, //СправочникСсылка.Номенклатура, //СправочникСсылка.ФизическиеЛица>
	+ "ЭтоТовар," 			//<Булево> - обычно определяется по счету учета
	+ "ЭтоМатериал,"		//<Булево> - обычно определяется по счету учета
	+ "СчетУчета,"			// <ПланСчетовСсылка.Хозрасчетный >
	+ "Партия,"				// <ДокументСсылка.ХХХ >
	+ "Количество,"			// <Число>
	+ "Сумма,"				// <Число> - в валюте взаиморасчетов и всегда с НДС в т.ч. В случае отгрузки и реализации – сумма реализации. В случае возврата – сумма себестоимости.
	+ "НДС,"			    // <Число> - в валюте взаиморасчетов
	+ "ОтражениеВУСН"		// <перечислениеСсылка.ОтраженияВУСН> -
	;
	Параметры.Вставить("ТаблицаРасходы", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРасходы, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура КорректировкаПоступленияПоступлениеРасходовУСН(ТаблицаРасходы, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыКорректировкаПоступленияПоступлениеРасходовУСН(ТаблицаРасходы, ТаблицаРеквизиты);
	Если Параметры.Реквизиты.Количество() = 0
		ИЛИ Параметры.ТаблицаРасходы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	ПрименяетсяУСНДоходыМинусРасходы = УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Реквизиты.Организация, Реквизиты.Период);
	Если НЕ ПрименяетсяУСНДоходыМинусРасходы Тогда
		Возврат;
	КонецЕсли;
	
	// при корректировке поступления приход производим по правилам учетной политики на дату исходного документа
	ТоварыПоОплате    = (УчетнаяПолитика.ПорядокПризнанияРасходовПоТоварам(Реквизиты.Организация, Реквизиты.ДокументПоступленияДата) =
				Перечисления.ПорядокПризнанияРасходовПоТоварам.ПоОплатеПоставщику);
	РасходыПоОтгрузке = (УчетнаяПолитика.ПорядокПризнанияРасходовПоТоварам(Реквизиты.Организация, Реквизиты.ДокументПоступленияДата) =
				Перечисления.ПорядокПризнанияРасходовПоТоварам.ПоФактуРеализации);
	МатериалыПоОплате = (УчетнаяПолитика.ПорядокПризнанияМатериальныхРасходов(Реквизиты.Организация, Реквизиты.ДокументПоступленияДата) =
				Перечисления.ПорядокПризнанияМатериальныхРасходов.ПоОплатеПоставщику);
	ДопРасходыПоОплате = (УчетнаяПолитика.ПорядокПризнанияДопРасходов(Реквизиты.Организация, Реквизиты.ДокументПоступленияДата) =
				Перечисления.ПорядокПризнанияДопРасходов.ПоОплатеПоставщику);
	ВыделятьНДСУСН = (УчетнаяПолитика.ПорядокПризнанияРасходовПоНДС(Реквизиты.Организация, Реквизиты.ДокументПоступленияДата) =
				Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику);

	ДвиженияРасхода = Движения.РасходыПриУСН;
	НомерСтроки = 0;
	Для Каждого СтрокаТаблицы Из Параметры.ТаблицаРасходы Цикл

		НомерСтроки     = НомерСтроки + 1;
		ДвижениеРасхода = ДвиженияРасхода.Добавить();
		ЗаполнитьЗначенияСвойств(ДвижениеРасхода, Реквизиты);
		ЗаполнитьЗначенияСвойств(ДвижениеРасхода, СтрокаТаблицы);

		ДвижениеРасхода.НомерСтрокиДокумента = НомерСтроки;
		// при корректировке поступления расчетным документом является корректируемый документ
		ДвижениеРасхода.РасчетныйДокумент    = Реквизиты.ДокументПоступленияСсылка;

		Если Реквизиты.ЭтоВозврат Тогда
			ДвижениеРасхода.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписано;
		ИначеЕсли (ДвижениеРасхода.ВидРасхода = Перечисления.ВидыРасходовУСН.Номенклатура)				
					ИЛИ (ДвижениеРасхода.ВидРасхода = Перечисления.ВидыРасходовУСН.РБП) Тогда
			ДвижениеРасхода.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено;
		ИначеЕсли (ДвижениеРасхода.ВидРасхода = Перечисления.ВидыРасходовУСН.ДопРасходы) 
					И ДопРасходыПоОплате Тогда
			ДвижениеРасхода.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеОплачено;
		ИначеЕсли (ДвижениеРасхода.ВидРасхода = Перечисления.ВидыРасходовУСН.ДопРасходы) 
					И (НЕ ДопРасходыПоОплате) Тогда
			ДвижениеРасхода.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено;
		Иначе
			ДвижениеРасхода.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеОплачено;
		КонецЕсли;

		Если Реквизиты.УчетАгентскогоНДС Тогда

			ДвижениеРасходаНДС = ДвиженияРасхода.Добавить();
			ДвижениеРасходаНДС.Период				= Реквизиты.Период;
			ДвижениеРасходаНДС.Организация			= Реквизиты.Организация;
			ДвижениеРасходаНДС.Валюта 				= Реквизиты.Валюта;
			ДвижениеРасходаНДС.РасчетныйДокумент 	= Реквизиты.ДокументПоступленияСсылка;
			ДвижениеРасходаНДС.ВидРасхода 			= Перечисления.ВидыРасходовУСН.Налоги;
			ДвижениеРасходаНДС.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеОплачено;
			ДвижениеРасходаНДС.СчетУчета 			= ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента;
			ДвижениеРасходаНДС.НомерСтрокиДокумента = НомерСтроки;
			ДвижениеРасходаНДС.ОтражениеВУСН        = ДвижениеРасхода.ОтражениеВУСН;
			ДвижениеРасходаНДС.Сумма                = ДвижениеРасхода.НДС;
			
			ДвижениеРасхода.Сумма = ДвижениеРасхода.Сумма - ДвижениеРасхода.НДС;
			ДвижениеРасхода.НДС = 0;

		КонецЕсли;

		Если Реквизиты.ЭтоВозврат И ДвижениеРасхода.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются Тогда
			ДвижениеРасхода.НДС = 0;
			РасходыПоОплате = ((ТоварыПоОплате И СтрокаТаблицы.ЭтоТовар) ИЛИ (МатериалыПоОплате И СтрокаТаблицы.ЭтоМатериал));
			Если РасходыПоОплате Тогда // Если по оплате, ...
				ДвижениеРасхода.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписаноПринято;
			КонецЕсли;
		КонецЕсли;

		Если ВыделятьНДСУСН И
			(СтрокаТаблицы.ВидРасхода <> Перечисления.ВидыРасходовУСН.ОС) И
			(СтрокаТаблицы <> Перечисления.ВидыРасходовУСН.НМА) Тогда
			ДвижениеРасхода.Сумма = ДвижениеРасхода.Сумма - ДвижениеРасхода.НДС;
		КонецЕсли;
		
	КонецЦикла;

	Движения.РасходыПриУСН.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыКорректировкаПоступленияПоступлениеРасходовУСН(ТаблицаРасходы, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"					   // <Дата> - дата документа корректировки
	+ "Регистратор,"			   // <ДокументСсылка> - документ-регистратор движений
	+ "Организация,"			   // <СправочникСсылка.Организации> - из документа
	+ "ДоговорКонтрагента,"		   // <СправочникСсылка.ДоговорыКонтрагентов> - из документа
	+ "ДокументПоступленияСсылка," // <ДокументСсылка.ПоступлениеТоваровУслуг> - корректируемый документ
	+ "ДокументПоступленияДата,"   // <Дата> - дата корректируемого документа поступления
	+ "УчетАгентскогоНДС,"		   // <Булево> - из реквизита договора "УчетАгентскогоНДС"
	+ "ЭтоВозврат,"				   // <Булево> - является ли документ возвратом?
	+ "Валюта"					   // <СправочникСсылка.Валюты> - из реквизита договора "ВалютаВзаиморасчетов"
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы содержимого документа:
	СписокОбязательныхКолонок = ""
	+ "ВидРасхода," 		// <ПеречислениеСсылка.ВидыРасходовУСН>
	+ "СтатусыПартийУСН," 	// <ПеречислениеСсылка.СтатусыПартийУСН>
	+ "ЭлементРасхода," 	// <Неопределенно, СправочникСсылка.ОсновныеСредства, //СправочникСсылка.НематериальныеАктивы, //СправочникСсылка.РасходыБудущихПериодов, //СправочникСсылка.Номенклатура, //СправочникСсылка.ФизическиеЛица>
	+ "ЭтоТовар," 			//<Булево> - обычно определяется по счету учета
	+ "ЭтоМатериал,"		//<Булево> - обычно определяется по счету учета
	+ "СчетУчета,"			// <ПланСчетовСсылка.Хозрасчетный >
	+ "Партия,"				// <ДокументСсылка.ХХХ >
	+ "Количество,"			// <Число>
	+ "Сумма,"				// <Число> - в валюте взаиморасчетов и всегда с НДС в т.ч. В случае отгрузки и реализации – сумма реализации. В случае возврата – сумма себестоимости.
	+ "НДС,"			    // <Число> - в валюте взаиморасчетов
	+ "ОтражениеВУСН"		// <перечислениеСсылка.ОтраженияВУСН> -
	;
	Параметры.Вставить("ТаблицаРасходы", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРасходы, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ДВИЖЕНИЯ КУДиР УСН

Процедура СформироватьДвиженияКнигаУчетаДоходовИРасходов(ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыКнигаУчетаДоходовИРасходов(ТаблицаРеквизиты);
	
	Если Параметры.Реквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];

	УСН	= УчетнаяПолитика.ПрименяетсяУСН(Реквизиты.Организация, Реквизиты.Период) 
			ИЛИ УчетнаяПолитика.ПрименяетсяУСНДоходы(Реквизиты.Организация, Реквизиты.Период);
			
	Если НЕ УСН Тогда
		Возврат;
	КонецЕсли;	
	
	СтрокаКниги  = Движения.КнигаУчетаДоходовИРасходов.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаКниги, Реквизиты);
	СтрокаКниги.РеквизитыПервичногоДокумента = НалоговыйУчетУСН.РеквизитыПервичногоДокумента(Реквизиты.Регистратор);
    СтрокаКниги.Содержание = Реквизиты.Содержание + Реквизиты.НомерГТД;
	
	Движения.КнигаУчетаДоходовИРасходов.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыКнигаУчетаДоходовИРасходов(ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"		 // <Дата> - дата документа
	+ "Регистратор," // <ДокументСсылка> - документ-регистратор движений
	+ "Организация," // <СправочникСсылка.Организации> - из документа
	+ "Графа4,"		 // <Число,15,2>
	+ "Графа5,"		 // <Число,15,2>
	+ "Графа6,"		 // <Число,15,2>
	+ "Графа7,"		 // <Число,15,2>
	+ "Содержание,"  // <Строка>
	+ "НомерГТД,"    // <СправочникСсылка.НомераГТД>
	+ "НДС"			 // <Число,15,2>
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// КОРРЕКТИРОВКА ПОСТУПЛЕНИЯ - ОТРАЖЕНИЕ В УСН

Функция ПодготовитьПараметрыКорректировкаПоступленияУСН(ТаблицаРеквизиты) Экспорт

	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"						      // <Дата> - дата документа
	+ "Регистратор,"			          // <ДокументСсылка> - документ-регистратор движений
	+ "Организация,"				      // <СправочникСсылка.Организации> - из документа
	+ "ПрименяетсяУСН,"                   // <Булево> из учетной политики на дату корректируемого документа
	+ "ПрименяетсяУСНДоходыМинусРасходы," // <Булево> из учетной политики на дату корректируемого документа
	+ "ПорядокПризнанияРасходовПоНДС,"    // <ПеречислениеСсылка.ПорядокПризнанияРасходовПоНДС> из учетной политики на дату корректируемого документа
	+ "ЭтоКорректировкаПрошлогоПериода,"  // <Булево> признак, что корректируется документ прошлого года
	+ "Контрагент,"					      // <СправочникСсылка.Контрагенты> - из документа
	+ "ДоговорКонтрагента,"			      // <СправочникСсылка.ДоговорыКонтрагентов> - из документа
	+ "ДокументПоступленияСсылка,"        // <ДокументСсылка.ПоступлениеТоваровУслуг> - корректируемый документ
	+ "ДокументПоступленияДата,"          // <Дата> - дата корректироемого документа
	+ "Валюта,"                           // <СправочникСсылка.Валюты> - из реквизита договора "ВалютаВзаиморасчетов"
	+ "КурсДокумента,"                    // <Число(10, 4)> - курс валюты корректируемого документа
	+ "КратностьДокумента,"               // <Число(10, 0)> - кратность  корректируемого документа
	+ "УчетАгентскогоНДС"			      // <Булево> - из реквизита договора "УчетАгентскогоНДС"
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// КОРРЕКТИРОВКА РЕАЛИЗАЦИИ - ОТРАЖЕНИЕ В УСН

Функция ПодготовитьПараметрыКорректировкаРеализацииУСН(ТаблицаРеквизиты) Экспорт

	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"						      // <Дата> - дата документа
	+ "Регистратор,"			          // <ДокументСсылка> - документ-регистратор движений
	+ "Организация,"				      // <СправочникСсылка.Организации> - из документа
	+ "ПрименяетсяУСН,"                   // <Булево> из учетной политики на дату корректируемого документа
	+ "ПрименяетсяУСНДоходыМинусРасходы," // <Булево> из учетной политики на дату корректируемого документа
	+ "ПорядокПризнанияРасходовПоНДС,"    // <ПеречислениеСсылка.ПорядокПризнанияРасходовПоНДС> из учетной политики на дату корректируемого документа
	+ "ЭтоКорректировкаПрошлогоПериода,"  // <Булево> признак, что корректируется документ прошлого года
	+ "Контрагент,"					      // <СправочникСсылка.Контрагенты> - из документа
	+ "ДоговорКонтрагента,"			      // <СправочникСсылка.ДоговорыКонтрагентов> - из документа
	+ "ДокументРеализацииСсылка,"        // <ДокументСсылка.РеализацияТоваровУслуг> - корректируемый документ
	+ "ДокументРеализацииДата,"          // <Дата> - дата корректироемого документа
	+ "Валюта,"                           // <СправочникСсылка.Валюты> - из реквизита договора "ВалютаВзаиморасчетов"
	+ "СуммаВключаетНДС"			      // <Булево> - из реквизита документа "СуммаВключаетНДС"
	;
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ИСКЛЮЧЕНИЕ ДОБРОВОЛЬНО НАЧИСЛЕННОГО НДС ПО РЕАЛИЗАЦИИ ИЗ ДОХОДОВ

// Возвращает сведения о суммах предъявленного НДС (в рублях)
// по собственным товарам и услугам в оплачиваемых документах реализации
//
Функция ПодготовитьТаблицуНДСПоРеализацииНеплательщиком(ТаблицаВзаиморасчетов, ТаблицаРеквизитов) Экспорт
	
	Если Не (ПолучитьФункциональнуюОпцию("ИспользуетсяОСНО")
			Или ПолучитьФункциональнуюОпцию("ИспользуетсяНДФЛИП")
			Или ПолучитьФункциональнуюОпцию("УплачиватьНДСспецРежимы")) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицыНДСПоРеализацииНеплательщиком(ТаблицаВзаиморасчетов, ТаблицаРеквизитов);
	
	Если Параметры.Реквизиты.Количество() = 0
		Или Параметры.Взаиморасчеты.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Если Реквизиты.ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя
		И Реквизиты.ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам
		И Реквизиты.ВидОперации <> Перечисления.ВидыОперацийПКО.ОплатаПокупателя
		И Реквизиты.ВидОперации <> Перечисления.ВидыОперацийКорректировкаДолга.ЗачетАвансов
		И Реквизиты.ВидОперации <> Перечисления.ВидыОперацийКорректировкаДолга.ЗачетЗадолженности
		И Реквизиты.ВидОперации <> Перечисления.ВидыОперацийКорректировкаДолга.Прочее Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период)
		Или Не УчетНДС.ВедетсяУчетНДСНеплательщиковПоФЗ84(Реквизиты.Период) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ДокументыРасчетов = ОбщегоНазначения.ВыгрузитьКолонку(Параметры.Взаиморасчеты, "ДокументРасчетов", Истина);
	
	ДокументыПродажиСНДС = СоздатьВТНачисленияНДСПоРеализации(
		МенеджерВременныхТаблиц,
		Реквизиты.Период,
		Реквизиты.Организация,
		ДокументыРасчетов);
	
	Если ДокументыПродажиСНДС.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СоздатьВТСуммыДокументовПродажи(МенеджерВременныхТаблиц, ДокументыПродажиСНДС);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",
		ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВТ_НачисленныйНДС.ДокументРасчетов КАК ДокументРасчетов,
	|	ВТ_НачисленныйНДС.СуммаБезНДС КАК СуммаБезНДС,
	|	ВТ_НачисленныйНДС.НДС КАК НДС,
	|	ЕСТЬNULL(ВТ_СуммыДокументов.ВалютаДокумента, &ВалютаРегламентированногоУчета) КАК ВалютаРеализации,
	|	ЕСТЬNULL(ВТ_СуммыДокументов.КурсДокумента, 1) КАК КурсРеализации,
	|	ЕСТЬNULL(ВТ_СуммыДокументов.КратностьДокумента, 1) КАК КратностьРеализации,
	|	ВЫБОР
	|		КОГДА НЕ ВТ_СуммыДокументов.СуммаДокумента ЕСТЬ NULL
	|			ТОГДА ВТ_СуммыДокументов.СуммаДокумента
	|		ИНАЧЕ ВТ_НачисленныйНДС.СуммаБезНДС + ВТ_НачисленныйНДС.НДС
	|	КОНЕЦ КАК ВыручкаВсего
	|ИЗ
	|	ВТ_НачисленныйНДС КАК ВТ_НачисленныйНДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СуммыДокументов КАК ВТ_СуммыДокументов
	|		ПО ВТ_НачисленныйНДС.ДокументРасчетов = ВТ_СуммыДокументов.Ссылка"
	;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПодготовитьПараметрыТаблицыНДСПоРеализацииНеплательщиком(ТаблицаВзаиморасчетов, ТаблицаРеквизитов)

	Параметры = Новый Структура;

	// Подготовка таблицы Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"          // <Дата>
	+ "Регистратор,"     // <ДокументСсылка>
	+ "Организация,"     // <СправочникСсылка.Организации>
	+ "ВидОперации";     // <ПеречислениеСсылка.*> - вид операции документа

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));

	// Подготовка таблицы Взаиморасчеты

	СписокОбязательныхКолонок = ""
	+ "ДокументРасчетов"; // <ДокументСсылка> - оплачиваемый документ реализации с выделенным НДС
	
	Параметры.Вставить("Взаиморасчеты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВзаиморасчетов, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция СоздатьВТНачисленияНДСПоРеализации(МенеджерВременныхТаблиц, Период, Организация, ДокументыРеализации)
	
	Запрос = Новый Запрос;
	запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("КонецПериода",        Период);
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("ДокументыРеализации", ДокументыРеализации);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НДСЗаписиКнигиПродажОбороты.СчетФактура КАК ДокументРасчетов,
	|	НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КАК СуммаБезНДС,
	|	НДСЗаписиКнигиПродажОбороты.НДСОборот КАК НДС
	|ПОМЕСТИТЬ ВТ_НачисленныйНДС
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|			,
	|			&КонецПериода,
	|			,
	|			Организация = &Организация
	|				И Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПродажи.Реализация)
	|				И СчетФактура В (&ДокументыРеализации)) КАК НДСЗаписиКнигиПродажОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументРасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_НачисленныйНДС.ДокументРасчетов КАК ДокументРасчетов
	|ИЗ
	|	ВТ_НачисленныйНДС КАК ВТ_НачисленныйНДС"
	;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ДокументРасчетов");
	
КонецФункции

Функция СоздатьВТСуммыДокументовПродажи(МенеджерВременныхТаблиц, ДокументыПродажиСНДС)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ТекстыЗапросов = Новый Массив;
	
	ТекстыЗапросов.Добавить(ТекстЗапросаПоляТаблицыДокументов());
	
	ДокументыПоТипам = ДокументыПоТипам(ДокументыПродажиСНДС);
	
	Для Каждого КлючИЗначение Из ДокументыПоТипам Цикл
		
		МетаданныеДокумента = Метаданные.НайтиПоТипу(КлючИЗначение.Ключ);
		
		ТекстыЗапросов.Добавить(ТекстЗапросаДанныеДокумента(МетаданныеДокумента));
		
		Запрос.УстановитьПараметр("Документы" + МетаданныеДокумента.Имя, КлючИЗначение.Значение);
		
	КонецЦикла;
	
	Запрос.Текст =
		СтрСоединить(ТекстыЗапросов, ТекстОбъединениеЗапросов())
		+ ТекстИндексыТаблицыСуммДокументов();
	
	Запрос.Выполнить();
	
КонецФункции

Функция ДокументыПоТипам(Документы)
	
	ДокументыПоТипам = Новый Соответствие;
	
	Для Каждого Документ Из Документы Цикл
		
		ТипДокумента = ТипЗнч(Документ);
		
		ДокументыПоТипу = ДокументыПоТипам[ТипДокумента];
		
		Если ДокументыПоТипу = Неопределено Тогда
			ДокументыПоТипам.Вставить(ТипДокумента, Новый Массив);
			ДокументыПоТипу = ДокументыПоТипам[ТипДокумента];
		КонецЕсли;
		
		ДокументыПоТипу.Добавить(Документ);
	
	КонецЦикла;
	
	Возврат ДокументыПоТипам;
	
КонецФункции

Функция ТекстЗапросаПоляТаблицыДокументов()
	
	Возврат
		"ВЫБРАТЬ
		|	NULL КАК Ссылка,
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаДокумента,
		|	0 КАК КурсДокумента,
		|	0 КАК КратностьДокумента,
		|	0 КАК СуммаДокумента
		|ПОМЕСТИТЬ ВТ_СуммыДокументов";
	
КонецФункции

Функция ТекстЗапросаДанныеДокумента(МетаданныеДокумента)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка,
	|	&ИмяПоляВалюта,
	|	&ИмяПоляКурс,
	|	&ИмяПоляКратность,
	|	&ИмяПоляСумма
	|ИЗ
	|	&ИмяТаблицыДокумента КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В(&ПараметрДокументы)"
	;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПоляВалюта",    ИмяПоляВалютаДокумента(МетаданныеДокумента));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПоляКурс",      ИмяПоляКурсДокумента(МетаданныеДокумента));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПоляКратность", ИмяПоляКратностьДокумента(МетаданныеДокумента));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПоляСумма",     ИмяПоляСуммаДокумента(МетаданныеДокумента));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицыДокумента", "Документ." + МетаданныеДокумента.Имя);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПараметрДокументы", "Документы" + МетаданныеДокумента.Имя);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ИмяПоляВалютаДокумента(МетаданныеДокумента)
	
	ИмяПоля = "NULL"; // По умолчанию
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВалютаДокумента", МетаданныеДокумента) Тогда
		ИмяПоля = "ТаблицаДокумента.ВалютаДокумента";
	ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("ДокументОтгрузки", МетаданныеДокумента) Тогда
		ИмяПоля = "ТаблицаДокумента.ДокументОтгрузки.ВалютаДокумента";
	КонецЕсли;
	
	Возврат ИмяПоля;
	
КонецФункции

Функция ИмяПоляКурсДокумента(МетаданныеДокумента)
	
	ИмяПоля = "NULL"; // По умолчанию
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("КурсВзаиморасчетов", МетаданныеДокумента) Тогда
		ИмяПоля = "ТаблицаДокумента.КурсВзаиморасчетов";
	ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("ДокументОтгрузки", МетаданныеДокумента) Тогда
		ИмяПоля = "ТаблицаДокумента.ДокументОтгрузки.КурсВзаиморасчетов";
	КонецЕсли;
	
	Возврат ИмяПоля;
	
КонецФункции

Функция ИмяПоляКратностьДокумента(МетаданныеДокумента)
	
	ИмяПоля = "NULL"; // По умолчанию
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("КратностьВзаиморасчетов", МетаданныеДокумента) Тогда
		ИмяПоля = "ТаблицаДокумента.КратностьВзаиморасчетов";
	ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("ДокументОтгрузки", МетаданныеДокумента) Тогда
		ИмяПоля = "ТаблицаДокумента.ДокументОтгрузки.КратностьВзаиморасчетов";
	КонецЕсли;
	
	Возврат ИмяПоля;
	
КонецФункции

Функция ИмяПоляСуммаДокумента(МетаданныеДокумента)
	
	ИмяПоля = "NULL"; // По умолчанию
	
	Если МетаданныеДокумента.Имя = "ОтчетКомитентуОПродажах" Тогда
		ИмяПоля = "ТаблицаДокумента.СуммаВознаграждения";
	ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("СуммаДокумента", МетаданныеДокумента) Тогда
		ИмяПоля = "ТаблицаДокумента.СуммаДокумента";
	КонецЕсли;
	
	Возврат ИмяПоля;
	
КонецФункции

Функция ТекстОбъединениеЗапросов()
	
	Возврат "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|";
	
КонецФункции

Функция ТекстИндексыТаблицыСуммДокументов()
	
	Возврат "
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка";
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПЕРЕОЦЕНКА ВАЛЮТНЫХ ОСТАТКОВ

Процедура СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаВалютныхОстатков, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыПереоценкаВалютныхОстатков(ТаблицаВалютныхОстатков, ТаблицаРеквизиты);
	Если Параметры.Реквизиты.Количество() = 0
		ИЛИ Параметры.ТаблицаПереоценка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты	= Параметры.Реквизиты[0];
	
	ТаблицаПереоценка	= Параметры.ТаблицаПереоценка;
	
	ПрименяетсяУСН						= УчетнаяПолитика.ПрименяетсяУСН(Реквизиты.Организация, Реквизиты.Период);
	ПрименяетсяУСНДоходы				= УчетнаяПолитика.ПрименяетсяУСНДоходы(Реквизиты.Организация, Реквизиты.Период);
	ПрименяетсяУСНДоходыМинусРасходы	= УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Реквизиты.Организация, Реквизиты.Период);
	
	Если НЕ ПрименяетсяУСН Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПереоценка.Свернуть("ВалютаПредставление, Счет, СчетПредставление, СчетНаименование, НомерБанковскогоСчета", "СуммаПереоценки");
	
	// с 2013 доходы и расходы от переоценки валютных ценностей при исчислении УСН не определяются и не учитываются
	Если Реквизиты.Период >= '20130101' Тогда
		Возврат;
	КонецЕсли;
	
	СчетаПереоценкиУСН = СчетаПереоценкиУСН();
	РеквизитыПервичногоДокумента	= НалоговыйУчетУСН.РеквизитыПервичногоДокумента(Реквизиты.Регистратор);
	
	Для Каждого СтрокаПереоценка Из ТаблицаПереоценка Цикл
		
		Если СчетаПереоценкиУСН.Найти(СтрокаПереоценка.Счет) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаПереоценка.СуммаПереоценки > 0 Тогда
			
			Если НЕ ПустаяСтрока(СтрокаПереоценка.НомерБанковскогоСчета) Тогда
				Содержание	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Доход от переоценки %1 на счете %2, расчетный счет № ""%3""'"),
					СтрокаПереоценка.ВалютаПредставление, СтрокаПереоценка.СчетПредставление, СтрокаПереоценка.НомерБанковскогоСчета);
			Иначе
				Содержание	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Доход от переоценки %1 на счете %2 ""%3""'"),
					СтрокаПереоценка.ВалютаПредставление, СтрокаПереоценка.СчетПредставление, СтрокаПереоценка.СчетНаименование);
			КонецЕсли;
			
			ЗаписьКУДиР	= Движения.КнигаУчетаДоходовИРасходов.Добавить();
			ЗаписьКУДиР.Период			= Реквизиты.Период;
			ЗаписьКУДиР.Активность		= Истина;
			ЗаписьКУДиР.Организация		= Реквизиты.Организация;
			ЗаписьКУДиР.Графа4			= СтрокаПереоценка.СуммаПереоценки;
			ЗаписьКУДиР.Графа5			= СтрокаПереоценка.СуммаПереоценки;
			ЗаписьКУДиР.Графа6			= 0;
			ЗаписьКУДиР.Графа7			= 0;
			ЗаписьКУДиР.НДС				= 0;
			ЗаписьКУДиР.ЭтапПроведения	=-1;
			ЗаписьКУДиР.Содержание		= Содержание;
			ЗаписьКУДиР.РеквизитыПервичногоДокумента	= РеквизитыПервичногоДокумента;
			
		ИначеЕсли СтрокаПереоценка.СуммаПереоценки < 0 И ПрименяетсяУСНДоходыМинусРасходы Тогда
			
			Если НЕ ПустаяСтрока(СтрокаПереоценка.НомерБанковскогоСчета) Тогда
				Содержание	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Расходы от переоценки %1 на счете %2, расчетный счет № ""%3""'"),
					СтрокаПереоценка.ВалютаПредставление, СтрокаПереоценка.СчетПредставление, СтрокаПереоценка.НомерБанковскогоСчета);
			Иначе
				Содержание	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Расходы от переоценки %1 на счете %2 ""%3""'"),
					СтрокаПереоценка.ВалютаПредставление, СтрокаПереоценка.СчетПредставление, СтрокаПереоценка.СчетНаименование);
			КонецЕсли;
			
			ЗаписьКУДиР	= Движения.КнигаУчетаДоходовИРасходов.Добавить();
			ЗаписьКУДиР.Период			= Реквизиты.Период;
			ЗаписьКУДиР.Активность		= Истина;
			ЗаписьКУДиР.Организация		= Реквизиты.Организация;
			ЗаписьКУДиР.Графа4			= 0;
			ЗаписьКУДиР.Графа5			= 0;
			ЗаписьКУДиР.Графа6			=-СтрокаПереоценка.СуммаПереоценки;
			ЗаписьКУДиР.Графа7			=-СтрокаПереоценка.СуммаПереоценки;
			ЗаписьКУДиР.НДС				= 0;
			ЗаписьКУДиР.ЭтапПроведения	=-1;
			ЗаписьКУДиР.Содержание		= Содержание;
			ЗаписьКУДиР.РеквизитыПервичногоДокумента	= РеквизитыПервичногоДокумента;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.КнигаУчетаДоходовИРасходов.Записывать	= Истина;
		
КонецПроцедуры

Функция ПодготовитьПараметрыПереоценкаВалютныхОстатков(ТаблицаВалютныхОстатков, ТаблицаРеквизиты)

	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "Период,"				// <Дата> - счет по дебету проводки (счет учета денежных средств)
	+ "Регистратор,"		// <ДокументСсылка...> - документ, записывающий движения в регистры
	+ "Организация"			// <СправочникСсылка.Организации> - организация документа
	;
	
	Параметры.Вставить("Реквизиты", 
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы :
	СписокОбязательныхКолонок = ""
	+ "Счет,"					// <ПланСчетовСсылка.Хозрасчетный> - переоцениваемый счет
	+ "СчетПредставление,"		// <Строка> -код  переоцениваемого счета
	+ "СчетНаименование,"		// <Строка> - наименование переоцениваемого счета
	+ "Субконто1,"				// <> - значение аналитики переоцениваемого счета
	+ "Субконто2,"				// <> - значение аналитики переоцениваемого счета
	+ "Субконто3,"				// <> - значение аналитики переоцениваемого счета
	+ "Валюта,"					// <СправочникСсылка.Валюты> - переоцениваемая валюта
	+ "ВалютаПредставление,"	// <Строка> - представление перецениваемой валюты
	+ "НомерБанковскогоСчета,"	// <Строка> - номер банковского счета (Субконто1)
	+ "СуммаПереоценки"			// <Число(15,2)> - сумма переоценки
	;
	Параметры.Вставить("ТаблицаПереоценка", 
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаВалютныхОстатков, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция СчетаПереоценкиУСН()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Валютный
	|		И Хозрасчетный.Ссылка В ИЕРАРХИИ 
	|		(ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Касса), 
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетныеСчета), 
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВалютныеСчета), 
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СпециальныеСчета), 
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПереводыВПути_))";
	
	ТаблицаСчетов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаСчетов.ВыгрузитьКолонку("Счет");
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ РЕГЛАМЕНТИРОВАННОЙ ОТЧЕТНОСТИ

Процедура ПолучитьСведенияОПоказателяхОтчетаУСНФормаОтчета2009Кв1(ПоказателиОтчета) Экспорт
	
	// Раздел 1
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010003003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010004003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010005003", Истина, Ложь);
	
	// Раздел 2
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020021003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020022003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020023003", Истина, Ложь);
	//РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020026003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020028003", Истина, Ложь);
	
КонецПроцедуры

Процедура ПолучитьСведенияОПоказателяхОтчетаУСНФормаОтчета2014Кв1(ПоказателиОтчета) Экспорт

	// Раздел 2.1
	
	// признак налогоплательщика
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210010203", Истина, Ложь);
	
	// доходы
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210011003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210011103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210011203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210011303", Истина, Ложь);
	
	// ставка налога
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210012003", Истина, Ложь);
	
	// расходы, уменьшающие налог
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210014003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210014103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210014203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210014303", Истина, Ложь);
	
	// Раздел 2.2
	
	// доходы
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220021003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220021103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220021203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220021303", Истина, Ложь);
	
	// расходы
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220022003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220022103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220022203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220022303", Истина, Ложь);
	
	// ставка налога
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220026003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220026103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220026203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220026303", Истина, Ложь);
	
	// убытки прошлых лет
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220023003", Истина, Ложь);

КонецПроцедуры

Процедура ПолучитьСведенияОПоказателяхОтчетаУСНФормаОтчета2015Кв1(ПоказателиОтчета) Экспорт

	// Раздел 2.1.1
	
	// признак налогоплательщика
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002110010203", Истина, Ложь);
	
	// доходы
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002110011003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002110011103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002110011203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002110011303", Истина, Ложь);
	
	// ставки налога
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002110012003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002110012103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002110012203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002110012303", Истина, Ложь);
	
	// расходы, уменьшающие налог
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002110014003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002110014103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002110014203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002110014303", Истина, Ложь);
	
	// Раздел 2.1.2
	
	// доходы ТС
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002120011003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002120011103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002120011203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002120011303", Истина, Ложь);
	
	// расходы, уменьшающие налог по ТС
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002120014003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002120014103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002120014203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002120014303", Истина, Ложь);
	
	// Уплаченный торговый сбор
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002120015003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002120015103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002120015203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002120015303", Истина, Ложь);
	
	// Раздел 2.2
	
	// доходы
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220021003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220021103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220021203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220021303", Истина, Ложь);
	
	// расходы
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220022003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220022103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220022203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220022303", Истина, Ложь);
	
	// ставка налога
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220026003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220026103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220026203", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220026303", Истина, Ложь);
	
	// убытки прошлых лет
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220023003", Истина, Ложь);

КонецПроцедуры

Процедура ЗаполнитьОтчетУСНФормаОтчета2009Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	Если НЕ УчетнаяПолитика.Существует(ПараметрыОтчета.Организация, ПараметрыОтчета.мДатаКонцаПериодаОтчета, Истина) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыОтчета.Организация,
											"РегистрацияВНалоговомОргане, КодНалоговогоОргана, ЮридическоеФизическоеЛицо");
	РегистрацияВНалоговомОргане = РеквизитыОрганизации.РегистрацияВНалоговомОргане;
	КодНалоговогоОргана = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РегистрацияВНалоговомОргане, "Код");		
			
	Ставка = Контейнер.Раздел2.П000020020103;
	Раздел1 = Контейнер.Раздел1;
	Раздел2 = Контейнер.Раздел2;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамОрганизация",           ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("парамНачалоГода",            НачалоГода(ПараметрыОтчета.мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("парамКонецОтчетногоПериода", КонецДня(ПараметрыОтчета.мДатаКонцаПериодаОтчета));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КнигаУчетаДоходовИРасходовОбороты.Графа5Оборот,
	|	КнигаУчетаДоходовИРасходовОбороты.Графа7Оборот
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&парамНачалоГода, &парамКонецОтчетногоПериода, , Организация = &парамОрганизация) КАК КнигаУчетаДоходовИРасходовОбороты";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Доходы = 0;
	Расходы = 0;
	Пока Выборка.Следующий() Цикл
		Доходы = Доходы + ?(Выборка.Графа5Оборот = Null, 0, Выборка.Графа5Оборот);
		Расходы = Расходы + ?(Выборка.Графа7Оборот = Null, 0, Выборка.Графа7Оборот);
	КонецЦикла;
	
	ПрименяетсяУСНДоходы = Ложь;
	 		
	// Учтем возможные сценарии:
	// 1. Единственная запись в учетной политике организации введена не с начала отчетного года.
	// 2. В течение года организация утратила право на применение УСН.	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиСистемыНалогообложенияСрезПоследних.ПрименяетсяУСНДоходы КАК ПрименяетсяУСНДоходы
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения.СрезПоследних(
	|			&парамКонецОтчетногоПериода,
	|			Организация = &парамОрганизация
	|				И ПрименяетсяУСН) КАК НастройкиСистемыНалогообложенияСрезПоследних";
	
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		ПрименяетсяУСНДоходы = ВыборкаДетальныеЗаписи.ПрименяетсяУСНДоходы;	
	КонецЕсли;
	
	Если ПрименяетсяУСНДоходы Тогда // Объект налогообложения "Доходы"
		Раздел2.П000020021003 = Доходы;
		Раздел2.П000020022003 = 0;
		
		ВзносыПФ = 0;
		
		Если Год(ПараметрыОтчета.мДатаКонцаПериодаОтчета) >= 2013 Тогда
			
			// взносы и иные выплаты, уменьшающие сумму налога, с 2013 г. отражаются в 4 разделе документа "ЗаписьКУДиР"
			
			ДатаНачалоГода = НачалоГода(ПараметрыОтчета.мДатаКонцаПериодаОтчета);
			ДатаКонецГода  = КонецГода(ПараметрыОтчета.мДатаКонцаПериодаОтчета);
			
			ЭтоИПБезРаботников = Ложь;
			
			Если РеквизитыОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
				
				// для ИП - проверим, производились ли выплаты работникам и прочим физлицам (письмо Минфина РФ от 21 мая 2013 г. N 03-11-11/17926)
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ХозрасчетныйОбороты.Организация КАК Организация
				|ИЗ
				|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоГода, &КонецОтчетногоПериода, , Счет = &СчетЗарплаты, , Организация = &Организация, , ) КАК ХозрасчетныйОбороты
				|ГДЕ
				|	ХозрасчетныйОбороты.СуммаОборотКт <> 0
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ХозрасчетныйОбороты.Организация
				|ИЗ
				|	РегистрБухгалтерии.Хозрасчетный.Обороты(
				|			&НачалоГода,
				|			&КонецОтчетногоПериода,
				|			,
				|			Счет В (&СчетаВзносов),
				|			&ВидСубконтоВидыПлатежей,
				|			Организация = &Организация
				|				И Субконто1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог),
				|			,
				|			) КАК ХозрасчетныйОбороты
				|ГДЕ
				|	ХозрасчетныйОбороты.СуммаОборотКт <> 0"
				;
				
				Запрос.УстановитьПараметр("Организация",             ПараметрыОтчета.Организация);
				Запрос.УстановитьПараметр("НачалоГода",              ДатаНачалоГода);
				Запрос.УстановитьПараметр("КонецОтчетногоПериода",   ДатаКонецГода);
				Запрос.УстановитьПараметр("СчетЗарплаты",            ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда);
				Запрос.УстановитьПараметр("ВидСубконтоВидыПлатежей", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
				
				СчетаВзносов = Новый Массив;
				СчетаВзносов.Добавить(ПланыСчетов.Хозрасчетный.ПФР_страх);	// 69.02.1 - до 2014 года
				СчетаВзносов.Добавить(ПланыСчетов.Хозрасчетный.ПФР_нак);	// 69.02.2 - до 2014 года
				СчетаВзносов.Добавить(ПланыСчетов.Хозрасчетный.ПФР_ОПС);	// 69.02.7 - с 2014 года
				
				Запрос.УстановитьПараметр("СчетаВзносов", СчетаВзносов);
				
				Результат = Запрос.Выполнить();
				
				ЭтоИПБезРаботников = Результат.Пустой();
				
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Организация",           ПараметрыОтчета.Организация);
			Запрос.УстановитьПараметр("НачалоГода",            ДатаНачалоГода);
			Запрос.УстановитьПараметр("КонецОтчетногоПериода", ДатаКонецГода);
			Запрос.УстановитьПараметр("ЭтоИПБезРаботников",    ЭтоИПБезРаботников);
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ЕСТЬNULL(СУММА(КнигаРаздел4.ПФРОборот + КнигаРаздел4.ФОМСОборот + ВЫБОР
			|				КОГДА &ЭтоИПБезРаботников
			|					ТОГДА 0
			|				ИНАЧЕ КнигаРаздел4.ФССОборот + КнигаРаздел4.ФСС_НСОборот + КнигаРаздел4.БольничныеОборот + КнигаРаздел4.ДобровольноеСтрахованиеОборот
			|			КОНЕЦ), 0) КАК СуммаКУменьшениюНалога
			|ИЗ
			|	РегистрНакопления.КнигаУчетаДоходовИРасходовРаздел4.Обороты(&НачалоГода, &КонецОтчетногоПериода, , Организация = &Организация) КАК КнигаРаздел4";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			
			ВзносыПФ = Выборка.СуммаКУменьшениюНалога;
			
			Строка080 = Доходы * Ставка / 100;
			Если ЭтоИПБезРаботников Тогда
				// Для ИП, не производивших выплаты работникам и прочим физлицам, ограничение в 50% не действует (Письмо Минфина от 02.04.2013 N 03-11-09/10547)
				ВзносыПФ = Мин(Строка080, ВзносыПФ);
			Иначе
				ВзносыПФ = Мин((Строка080 - 0.5 * Строка080), ВзносыПФ);
			КонецЕсли;
			
		Иначе
			// до 2012 года включительно - старый порядок заполнения
			НачДатаОплаты = НачалоГода(ПараметрыОтчета.мДатаКонцаПериодаОтчета) + 15*86400;
			КонДатаОплаты = КонецДня(ПараметрыОтчета.мДатаКонцаПериодаОтчета) + 15*86400;
			
			Счета = Новый Массив;
			Счета.Добавить(ПланыСчетов.Хозрасчетный.ПФР_нак);
			Счета.Добавить(ПланыСчетов.Хозрасчетный.ПФР_страх);
			
			Если ПараметрыОтчета.мДатаКонцаПериодаОтчета > '20100101' Тогда
				Счета.Добавить(ПланыСчетов.Хозрасчетный.ФСС);
				Счета.Добавить(ПланыСчетов.Хозрасчетный.ФФОМС);
				Счета.Добавить(ПланыСчетов.Хозрасчетный.ТФОМС);
				Счета.Добавить(ПланыСчетов.Хозрасчетный.ФСС_НСиПЗ);
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("парамОрганизация", 	ПараметрыОтчета.Организация);
			Запрос.УстановитьПараметр("парамНачалоГода", 	НачДатаОплаты);
			Запрос.УстановитьПараметр("парамКонецОтчетногоПериода", КонДатаОплаты);
			Запрос.УстановитьПараметр("Счета", Счета);
			Запрос.Текст =                                     
			"ВЫБРАТЬ
			|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт,
			|	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт,
			|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
			|			&парамНачалоГода,
			|			&парамКонецОтчетногоПериода,
			|			,
			|			,
			|			Счет В (&Счета),
			|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
			|			Субконто1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог)
			|				И Организация = &парамОрганизация) КАК ХозрасчетныйОстаткиИОбороты";
			
			Выборка = Запрос.Выполнить().Выбрать();
			ВзносыПФ = 0;
			Пока Выборка.Следующий() Цикл
				ВзносыПФ = ВзносыПФ + ?(Выборка.СуммаНачальныйОстатокДт = Null, 0, Выборка.СуммаНачальныйОстатокДт);
				ВзносыПФ = ВзносыПФ + ?(Выборка.СуммаОборотДт = Null, 0, Выборка.СуммаОборотДт);
				ВзносыПФ = ВзносыПФ - ?(Выборка.СуммаКонечныйОстатокДт = Null, 0, Выборка.СуммаКонечныйОстатокДт);
			КонецЦикла;
			
			Строка080 = Доходы * Ставка / 100;
			ВзносыПФ = Мин((Строка080 - 0.5 * Строка080), ВзносыПФ);
			
			// взносы по стоимости страхового года
			Счета = Новый Массив;
			Счета.Добавить(ПланыСчетов.Хозрасчетный.ПФР_Страх_СтраховойГод);
			Счета.Добавить(ПланыСчетов.Хозрасчетный.ПФР_Нак_СтраховойГод);
			Счета.Добавить(ПланыСчетов.Хозрасчетный.ФОМС_СтраховойГод);
			
			Запрос.УстановитьПараметр("Счета", Счета);
			Запрос.Текст =                                     
			"ВЫБРАТЬ
			|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт,
			|	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт,
			|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
			|			&парамНачалоГода,
			|			&парамКонецОтчетногоПериода,
			|			,
			|			,
			|			Счет В (&Счета),
			|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
			|			Субконто1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог)
			|				И Организация = &парамОрганизация) КАК ХозрасчетныйОстаткиИОбороты";
			
			Выборка = Запрос.Выполнить().Выбрать();
			ИПВзносыПФ = 0;
			Пока Выборка.Следующий() Цикл
				ИПВзносыПФ = ИПВзносыПФ + ?(Выборка.СуммаНачальныйОстатокДт = Null, 0, Выборка.СуммаНачальныйОстатокДт);
				ИПВзносыПФ = ИПВзносыПФ + ?(Выборка.СуммаОборотДт = Null, 0, Выборка.СуммаОборотДт);
				ИПВзносыПФ = ИПВзносыПФ - ?(Выборка.СуммаКонечныйОстатокДт = Null, 0, Выборка.СуммаКонечныйОстатокДт);
			КонецЦикла;
			
			Если ИПВзносыПФ <> 0 Тогда
				ВзносыПФ = ВзносыПФ + ИПВзносыПФ;
				Если ПараметрыОтчета.мДатаКонцаПериодаОтчета > '20120101' Тогда					
					ВзносыПФ = Мин(Строка080, ВзносыПФ);
				Иначе
					ВзносыПФ = Мин((Строка080 - 0.5 * Строка080), ВзносыПФ);
				КонецЕсли;					
			КонецЕсли;
			
		КонецЕсли;
		
		Раздел2.П000020028003 = ВзносыПФ;
		
	Иначе // Объект налогообложения "Доходы минус расходы"
		
		УбыткиПрошлыхЛет = ПеренесенныеУбыткиПрошлыхЛет(ПараметрыОтчета.Организация,
			НачалоГода(ПараметрыОтчета.мДатаКонцаПериодаОтчета), КонецДня(ПараметрыОтчета.мДатаКонцаПериодаОтчета));
		
		СуммаНеПеренесенныхУбытков       = УбыткиПрошлыхЛет.ПеренесенныеУбытки;
		УбытокОтУплатыМинимальногоНалога = УбыткиПрошлыхЛет.УбытокОтУплатыМинимальногоНалога;
		
		НалоговаяБазаТекПериод  = Доходы - Расходы - УбытокОтУплатыМинимальногоНалога;
		УменьшениеНалоговойБазы = ?(НалоговаяБазаТекПериод > 0, Мин(НалоговаяБазаТекПериод, СуммаНеПеренесенныхУбытков), 0);
		
		Раздел2.П000020021003 = Доходы;
		Раздел2.П000020022003 = Расходы + УбытокОтУплатыМинимальногоНалога;
		Раздел2.П000020023003 = УменьшениеНалоговойБазы;
		Раздел2.П000020028003 = 0;
		
	КонецЕсли;
	
	// заполним авансовые платежи
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",  ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("НачалоГода",   НачалоГода(ПараметрыОтчета.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("КонецПериода", КонецКвартала(ДобавитьМесяц(ПараметрыОтчета.мДатаКонцаПериодаОтчета, -3)));
	
	Запрос.УстановитьПараметр("СчетОтраженияНалога",  ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД); // Дт 99.01.1
	Запрос.УстановитьПараметр("СчетНачисленияНалога", ПланыСчетов.Хозрасчетный.ЕНприУСН); // Кт 68.12

	ВидыПлатежей = Новый Массив;
	ВидыПлатежей.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Налог);
	ВидыПлатежей.Добавить(Перечисления.ВидыПлатежейВГосБюджет.НалогАкт);
	ВидыПлатежей.Добавить(Перечисления.ВидыПлатежейВГосБюджет.НалогСам);
	Запрос.УстановитьПараметр("ВидыПлатежейВГосБюджет", ВидыПлатежей);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.СуммаОборот КАК АвансовыйПлатеж,
	|	КВАРТАЛ(ХозрасчетныйОборотыДтКт.Период) КАК НомерКвартала
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачалоГода,
	|			&КонецПериода,
	|			Квартал,
	|			СчетДт = &СчетОтраженияНалога,
	|			,
	|			СчетКт = &СчетНачисленияНалога,
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
	|			Организация = &Организация
	|				И СубконтоКт1 В (&ВидыПлатежейВГосБюджет)) КАК ХозрасчетныйОборотыДтКт
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерКвартала"
	;
	
	АвансовыеПлатежи = Запрос.Выполнить().Выгрузить();
	
	ПлатежиНарастающимИтогом = 0;
	
	Для НомерКвартала = 1 По 3 Цикл
		
		СтрокаПлатежа = АвансовыеПлатежи.Найти(НомерКвартала, "НомерКвартала");
		Если СтрокаПлатежа <> Неопределено Тогда
			ПлатежиНарастающимИтогом = ПлатежиНарастающимИтогом + СтрокаПлатежа.АвансовыйПлатеж;
		КонецЕсли;
		
		НомерГрафы = "П00001000"+ (НомерКвартала + 2) + "003";
		Раздел1[НомерГрафы] = ПлатежиНарастающимИтогом;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОтчетУСНФормаОтчета2014Кв1(ПараметрыОтчета, Контейнер) Экспорт
	// Замер длительности автозаполнения: начало
	ВремяНачалаОперации = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Если НЕ УчетнаяПолитика.Существует(ПараметрыОтчета.Организация, ПараметрыОтчета.мДатаКонцаПериодаОтчета, Истина) Тогда
		Возврат;
	КонецЕсли;

	НачалоПериода       = НачалоГода(ПараметрыОтчета.мДатаНачалаПериодаОтчета);
	КонецПериода        = КонецГода(ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	КонецПериодаГраница = Новый Граница(КонецПериода, ВидГраницы.Включая);

	ПрименяетсяУСНДоходы = Ложь;

	// Учтем возможные сценарии:
	// 1. Единственная запись в учетной политике организации введена не с начала отчетного года.
	// 2. В течение года организация утратила право на применение УСН.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",           ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("КонецОтчетногоПериода", КонецПериода);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиСистемыНалогообложенияСрезПоследних.ПрименяетсяУСНДоходы КАК ПрименяетсяУСНДоходы
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения.СрезПоследних(
	|			&КонецОтчетногоПериода,
	|			Организация = &Организация
	|				И ПрименяетсяУСН) КАК НастройкиСистемыНалогообложенияСрезПоследних";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ПрименяетсяУСНДоходы = Выборка.ПрименяетсяУСНДоходы;
	КонецЕсли;
	
	// Необходимо учесть, что торговый сбор в 1 квартале уплачивается за квартал, относящийся к предыдущему налоговому периоду
	УменьшатьНалогНаТорговыйСбор = ПрименяетсяУСНДоходы
		И УчетнаяПолитика.ПлательщикТорговогоСбораЗаПериод(
			ПараметрыОтчета.Организация,
			ДобавитьМесяц(НачалоПериода, -12),
			КонецПериода);
	
	ЭтоИПБезВыплатФизлицам = НЕ ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(ПараметрыОтчета.Организация)
		И НЕ УчетЗарплаты.ИПИспользуетТрудНаемныхРаботников(ПараметрыОтчета.Организация);

	// периоды и ставки налога для поквартальных расчетов
	ДанныеПериодов = Новый ТаблицаЗначений;
	ДанныеПериодов.Колонки.Добавить("НомерКвартала", ОбщегоНазначения.ОписаниеТипаЧисло(1, 0, ДопустимыйЗнак.Неотрицательный));
	ДанныеПериодов.Колонки.Добавить("Период",        ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ДанныеПериодов.Колонки.Добавить("СтавкаНалога",  ОбщегоНазначения.ОписаниеТипаЧисло(5, 2, ДопустимыйЗнак.Неотрицательный));

	Если ПрименяетсяУСНДоходы Тогда
		// ставка налога общая для всей декларации
		СтавкаИзУП = УчетнаяПолитика.СтавкаНалогаУСН(ПараметрыОтчета.Организация, КонецПериода);
		Контейнер.Раздел21["П000210012003"] = СтавкаИзУП;
	КонецЕсли;
	
	Для НомерКвартала = 1 По 4 Цикл
		
		ДатаНачалаКвартала = НачалоКвартала(ДобавитьМесяц(НачалоПериода, (НомерКвартала-1)*3));
		СтрокаПериода = ДанныеПериодов.Добавить();
		СтрокаПериода.НомерКвартала = НомерКвартала;
		СтрокаПериода.Период        = ДатаНачалаКвартала;
		
		Если ПрименяетсяУСНДоходы Тогда
			СтрокаПериода.СтавкаНалога = Контейнер.Раздел21["П000210012003"];
		Иначе
			// ставки налога задаются для каждого из отчетных периодов
			ДатаОкончанияКвартала = КонецКвартала(ДобавитьМесяц(НачалоПериода, (НомерКвартала-1)*3));
			СтавкаИзУП = УчетнаяПолитика.СтавкаНалогаУСН(ПараметрыОтчета.Организация, ДатаОкончанияКвартала);
			ИмяЯчейки = "П000220026" + (НомерКвартала - 1) + "03";
			Контейнер.Раздел22[ИмяЯчейки] = СтавкаИзУП;
			СтрокаПериода.СтавкаНалога    = СтавкаИзУП;
		КонецЕсли;
		
	КонецЦикла;
	
	// показатели налоговой базы по данным ИБ
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",       НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",        КонецПериода);
	Запрос.УстановитьПараметр("КонецПериодаГраница", КонецПериодаГраница);
	Запрос.УстановитьПараметр("Организация",         ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("ДанныеПериодов",      ДанныеПериодов);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеПериодов.Период КАК Период,
	|	ДанныеПериодов.НомерКвартала
	|ПОМЕСТИТЬ ВТ_Периоды
	|ИЗ
	|	&ДанныеПериодов КАК ДанныеПериодов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Периоды.НомерКвартала,
	|	ВТ_Периоды.Период КАК Период,
	|	ЕСТЬNULL(КнигаУчетаДоходовИРасходовОбороты.Графа5Оборот, 0) КАК Доходы,
	|	ЕСТЬNULL(КнигаУчетаДоходовИРасходовОбороты.ДоходТорговыйСборОборот, 0) КАК ДоходыТорговыйСбор,
	|	ЕСТЬNULL(КнигаУчетаДоходовИРасходовОбороты.Графа7Оборот, 0) КАК Расходы
	|ИЗ
	|	ВТ_Периоды КАК ВТ_Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачалоПериода, &КонецПериодаГраница, Квартал, Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОбороты
	|		ПО (ВТ_Периоды.Период = НАЧАЛОПЕРИОДА(КнигаУчетаДоходовИРасходовОбороты.Период, КВАРТАЛ))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_Периоды.НомерКвартала"
	+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Если ПрименяетсяУСНДоходы Тогда
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(КнигаРаздел4.Период, КВАРТАЛ) КАК Период,
		|	КнигаРаздел4.ДеятельностьНаТорговомСборе,
		|	КнигаРаздел4.ПФРОборот КАК ПФР,
		|	КнигаРаздел4.ФССОборот КАК ФСС,
		|	КнигаРаздел4.ФОМСОборот КАК ФОМС,
		|	КнигаРаздел4.ФСС_НСОборот КАК ФСС_НС,
		|	КнигаРаздел4.БольничныеОборот КАК Больничные,
		|	КнигаРаздел4.ДобровольноеСтрахованиеОборот КАК ДобровольноеСтрахование
		|ПОМЕСТИТЬ ВТ_Раздел4Обороты
		|ИЗ
		|	РегистрНакопления.КнигаУчетаДоходовИРасходовРаздел4.Обороты(&НачалоПериода, &КонецПериодаГраница, Квартал, Организация = &Организация) КАК КнигаРаздел4
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Периоды.НомерКвартала КАК НомерКвартала,
		|	ВТ_Периоды.Период,
		|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.ПФР, 0)) КАК ПФР,
		|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.ФСС, 0)) КАК ФСС,
		|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.ФОМС, 0)) КАК ФОМС,
		|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.ФСС_НС, 0)) КАК ФСС_НС,
		|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.Больничные, 0)) КАК Больничные,
		|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.ДобровольноеСтрахование, 0)) КАК ДобровольноеСтрахование
		|ИЗ
		|	ВТ_Периоды КАК ВТ_Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Раздел4Обороты КАК ВТ_Раздел4Обороты
		|		ПО ВТ_Периоды.Период = ВТ_Раздел4Обороты.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Периоды.НомерКвартала,
		|	ВТ_Периоды.Период
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерКвартала"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
		Если УменьшатьНалогНаТорговыйСбор Тогда
			ТекстЗапроса = ТекстЗапроса +
			"ВЫБРАТЬ
			|	ВТ_Периоды.НомерКвартала КАК НомерКвартала,
			|	ВТ_Периоды.Период,
			|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.ПФР, 0)) КАК ПФР,
			|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.ФСС, 0)) КАК ФСС,
			|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.ФОМС, 0)) КАК ФОМС,
			|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.ФСС_НС, 0)) КАК ФСС_НС,
			|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.Больничные, 0)) КАК Больничные,
			|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.ДобровольноеСтрахование, 0)) КАК ДобровольноеСтрахование
			|ИЗ
			|	ВТ_Периоды КАК ВТ_Периоды
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Раздел4Обороты КАК ВТ_Раздел4Обороты
			|		ПО ВТ_Периоды.Период = ВТ_Раздел4Обороты.Период
			|			И (ВТ_Раздел4Обороты.ДеятельностьНаТорговомСборе)
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТ_Периоды.НомерКвартала,
			|	ВТ_Периоды.Период
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерКвартала"
			+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
		КонецЕсли;
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапросаНалоговаяБаза = Запрос.ВыполнитьПакет();

	УбыткиПрошлыхЛет = Неопределено;
	Если НЕ ПрименяетсяУСНДоходы Тогда
		УбыткиПрошлыхЛет = ПеренесенныеУбыткиПрошлыхЛет(ПараметрыОтчета.Организация, НачалоПериода, КонецПериода);
	КонецЕсли;
	
	УплаченныйТорговыйСбор = Неопределено;
	Если УменьшатьНалогНаТорговыйСбор Тогда
		УплаченныйТорговыйСбор = СведенияОбУплатеТорговогоСбораПоКварталамНарастающимИтогом(
			ПараметрыОтчета.Организация,
			НачалоПериода,
			КонецПериода);
	КонецЕсли;
	
	// заполнение показателей отчета
	
	ИтогоДоходы  = 0;
	ИтогоРасходы = 0;
	ИтогоРасходыУменьшающиеНалог = 0;
	
	ИтогоДоходыТС                  = 0;
	ИтогоРасходыУменьшающиеНалогТС = 0;
	
	ТаблицаДоходыРасходы = РезультатЗапросаНалоговаяБаза[1].Выгрузить();
	
	Если ПрименяетсяУСНДоходы Тогда // объект налогообложения "доходы"
		
		РазрядностьОкругления = РазрядностьОкругленияПоказателейПриРасчетеНалога(КонецПериода);
		
		ЗаполняемыйРаздел = Контейнер.Раздел21;
		
		КоэффМаксУменьшенияНалога = ?(ЭтоИПБезВыплатФизлицам, 1, 0.5);
		ЗаполняемыйРаздел["П000210010203"] = ?(ЭтоИПБезВыплатФизлицам, "2", "1");
		
		ТаблицаРасходыУменьшающиеНалог = РезультатЗапросаНалоговаяБаза[3].Выгрузить();
		
		ТаблицаРасходыУменьшающиеНалогТС = Неопределено;
		Если УменьшатьНалогНаТорговыйСбор Тогда
			ТаблицаРасходыУменьшающиеНалогТС = РезультатЗапросаНалоговаяБаза[4].Выгрузить();
		КонецЕсли;
		
		Для каждого СтрокаПериода Из ДанныеПериодов Цикл
			
			ИдКвартала = Строка(СтрокаПериода.НомерКвартала - 1);
			
			СтрокаДоходов = ТаблицаДоходыРасходы[СтрокаПериода.НомерКвартала-1];
			ИтогоДоходы   = ИтогоДоходы   + СтрокаДоходов.Доходы;
			ИтогоДоходыТС = ИтогоДоходыТС + СтрокаДоходов.ДоходыТорговыйСбор;
			
			СтрокаРасходовУменьшающихНалог = ТаблицаРасходыУменьшающиеНалог[СтрокаПериода.НомерКвартала-1];
			ИтогоРасходыУменьшающиеНалог   = ИтогоРасходыУменьшающиеНалог
				+ СтрокаРасходовУменьшающихНалог.ПФР + СтрокаРасходовУменьшающихНалог.ФОМС
				+?(ЭтоИПБезВыплатФизлицам, 0, СтрокаРасходовУменьшающихНалог.ФСС + СтрокаРасходовУменьшающихНалог.ФСС_НС
					+ СтрокаРасходовУменьшающихНалог.Больничные + СтрокаРасходовУменьшающихНалог.ДобровольноеСтрахование);
			
			НалоговаяБаза    = Окр(ИтогоДоходы, РазрядностьОкругления);
			НалогОтБазы      = Окр(ИтогоДоходы*СтрокаПериода.СтавкаНалога/100, РазрядностьОкругления);
			УменьшениеНалога = Мин(Окр(НалогОтБазы*КоэффМаксУменьшенияНалога, РазрядностьОкругления), ИтогоРасходыУменьшающиеНалог);
			
			// Плательщики торгового сбора могут уменьшить налог на уплаченный торговый сбор.
			// Уменьшение налога в соответствии с п. 8 статьи 346.21 НК определяется в рамках показателей по деятельности на торговом сборе.
			// В соответствии письмом ФНС от 14 августа 2015 г. N ГД-4-3/14386@ суммы вычитаемого из налога торгового сбора добавляются к строкам 140-143.
			Если УменьшатьНалогНаТорговыйСбор Тогда
				
				СтрокаРасходовУменьшающихНалогТС = ТаблицаРасходыУменьшающиеНалогТС[СтрокаПериода.НомерКвартала-1];
				СтрокаУплаченногоТорговогоСбора  = УплаченныйТорговыйСбор[СтрокаПериода.НомерКвартала - 1];
				
				ИтогоРасходыУменьшающиеНалогТС   = ИтогоРасходыУменьшающиеНалогТС
					+ СтрокаРасходовУменьшающихНалогТС.ПФР + СтрокаРасходовУменьшающихНалогТС.ФОМС
					+?(ЭтоИПБезВыплатФизлицам, 0, СтрокаРасходовУменьшающихНалогТС.ФСС + СтрокаРасходовУменьшающихНалогТС.ФСС_НС
						+ СтрокаРасходовУменьшающихНалогТС.Больничные + СтрокаРасходовУменьшающихНалогТС.ДобровольноеСтрахование);
				
				НалоговаяБазаТС    = Окр(ИтогоДоходыТС, РазрядностьОкругления);
				НалогОтБазыТС      = Окр(НалоговаяБазаТС*СтрокаПериода.СтавкаНалога/100, РазрядностьОкругления);
				УменьшениеНалогаТС = Мин(Окр(НалогОтБазыТС*КоэффМаксУменьшенияНалога, РазрядностьОкругления), ИтогоРасходыУменьшающиеНалогТС);
				НалогТСКУплате     = НалогОтБазыТС - УменьшениеНалогаТС;
				
				ТорговыйСборУплаченоНачислено = СтрокаУплаченногоТорговогоСбора.НачисленоУплаченоСНачалаГода;
				ТорговыйСборВычитаемый = Мин(НалогТСКУплате, ТорговыйСборУплаченоНачислено);
				
				// добавляем вычитаемый торговый сбор к показателю строки 14х
				УменьшениеНалога = Мин(УменьшениеНалога + ТорговыйСборВычитаемый, НалогОтБазы);
				
			КонецЕсли;
			
			ЗаполняемыйРаздел["П000210011" + ИдКвартала + "03"] = ИтогоДоходы;
			ЗаполняемыйРаздел["П000210014" + ИдКвартала + "03"] = УменьшениеНалога;
			
		КонецЦикла;
		
	Иначе // объект налогообложения "доходы минус расходы"
		
		ЗаполняемыйРаздел = Контейнер.Раздел22;
		
		Для каждого СтрокаПериода Из ДанныеПериодов Цикл
			
			ИдКвартала = Строка(СтрокаПериода.НомерКвартала - 1);
			
			СтрокаДоходовРасходов = ТаблицаДоходыРасходы[СтрокаПериода.НомерКвартала-1];
		
			ИтогоДоходы  = ИтогоДоходы + СтрокаДоходовРасходов.Доходы;
			ИтогоРасходы = ИтогоРасходы + СтрокаДоходовРасходов.Расходы;
			
			// в последнем квартела года учтем перенесенные убытки прошлых лет
			Если СтрокаПериода.НомерКвартала = 4 Тогда
				ИтогоРасходы = ИтогоРасходы + УбыткиПрошлыхЛет.УбытокОтУплатыМинимальногоНалога;
				НалоговаяБаза  = ИтогоДоходы - ИтогоРасходы;
				УменьшениеНалоговойБазы = Макс(0, Мин(НалоговаяБаза, УбыткиПрошлыхЛет.ПеренесенныеУбытки));
				ЗаполняемыйРаздел["П000220023003"] = УменьшениеНалоговойБазы;
			КонецЕсли;
			
			ЗаполняемыйРаздел["П000220021" + ИдКвартала + "03"] = ИтогоДоходы;
			ЗаполняемыйРаздел["П000220022" + ИдКвартала + "03"] = ИтогоРасходы;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Замер длительности автозаполнения: окончание
	ВремяОкончанияОперации = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Длительность = ВремяОкончанияОперации - ВремяНачалаОперации;
	ИмяСобытия = СтрШаблон(
		НСтр("ru = 'Заполнение регламентированных отчетов.Декларация по УСН за %1 год'"),
		Формат(Год(КонецПериода), "ЧГ=0"));
	
	ЗаписьЖурналаРегистрации(ИмяСобытия,
							 УровеньЖурналаРегистрации.Информация,
							 Метаданные.Отчеты.РегламентированныйОтчетУСН.Формы.ФормаОтчета2014Кв1,
							 ,
							 СтрШаблон(НСтр("ru = 'Результат операции (%1 мс)'"), Длительность),
							 РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
	
	
КонецПроцедуры

Процедура ЗаполнитьОтчетУСНФормаОтчета2015Кв1(ПараметрыОтчета, Контейнер) Экспорт

	// Замер длительности автозаполнения: начало
	ВремяНачалаОперации = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Если НЕ УчетнаяПолитика.Существует(ПараметрыОтчета.Организация, ПараметрыОтчета.мДатаКонцаПериодаОтчета, Истина) Тогда
		Возврат;
	КонецЕсли;

	НачалоПериода       = НачалоГода(ПараметрыОтчета.мДатаНачалаПериодаОтчета);
	КонецПериода        = КонецГода(ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	КонецПериодаГраница = Новый Граница(КонецПериода, ВидГраницы.Включая);

	ПрименяетсяУСНДоходы = Ложь;

	// Учтем возможные сценарии:
	// 1. Единственная запись в учетной политике организации введена не с начала отчетного года.
	// 2. В течение года организация утратила право на применение УСН.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",           ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("КонецОтчетногоПериода", КонецПериода);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиСистемыНалогообложенияСрезПоследних.ПрименяетсяУСНДоходы КАК ПрименяетсяУСНДоходы
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения.СрезПоследних(
	|			&КонецОтчетногоПериода,
	|			Организация = &Организация
	|				И ПрименяетсяУСН) КАК НастройкиСистемыНалогообложенияСрезПоследних";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ПрименяетсяУСНДоходы = Выборка.ПрименяетсяУСНДоходы;
	КонецЕсли;
	
	// Необходимо учесть, что торговый сбор в 1 квартале уплачивается за квартал, относящийся к предыдущему налоговому периоду
	УменьшатьНалогНаТорговыйСбор = ПрименяетсяУСНДоходы
		И УчетнаяПолитика.ПлательщикТорговогоСбораЗаПериод(
			ПараметрыОтчета.Организация,
			ДобавитьМесяц(НачалоПериода, -12),
			КонецПериода);
	
	ЭтоИПБезВыплатФизлицам = НЕ ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(ПараметрыОтчета.Организация)
		И НЕ УчетЗарплаты.ИПИспользуетТрудНаемныхРаботников(ПараметрыОтчета.Организация);

	// периоды и ставки налога для поквартальных расчетов
	ДанныеПериодов = Новый ТаблицаЗначений;
	ДанныеПериодов.Колонки.Добавить("НомерКвартала", ОбщегоНазначения.ОписаниеТипаЧисло(1, 0, ДопустимыйЗнак.Неотрицательный));
	ДанныеПериодов.Колонки.Добавить("Период",        ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ДанныеПериодов.Колонки.Добавить("СтавкаНалога",  ОбщегоНазначения.ОписаниеТипаЧисло(5, 2, ДопустимыйЗнак.Неотрицательный));
	
	Для НомерКвартала = 1 По 4 Цикл
		
		ДатаНачалаКвартала = НачалоКвартала(ДобавитьМесяц(НачалоПериода, (НомерКвартала-1)*3));
		СтрокаПериода = ДанныеПериодов.Добавить();
		СтрокаПериода.НомерКвартала = НомерКвартала;
		СтрокаПериода.Период        = ДатаНачалаКвартала;
		
		// ставки налога задаются для каждого из отчетных периодов
		ДатаОкончанияКвартала = КонецКвартала(ДобавитьМесяц(НачалоПериода, (НомерКвартала-1)*3));
		СтавкаИзУП = УчетнаяПолитика.СтавкаНалогаУСН(ПараметрыОтчета.Организация, ДатаОкончанияКвартала);
		СтрокаПериода.СтавкаНалога = СтавкаИзУП;
		
		Если ПрименяетсяУСНДоходы Тогда
			ИмяЯчейки = "П002110012" + (НомерКвартала - 1) + "03";
			Контейнер.Раздел21[ИмяЯчейки] = СтавкаИзУП;
		Иначе
			ИмяЯчейки = "П000220026" + (НомерКвартала - 1) + "03";
			Контейнер.Раздел22[ИмяЯчейки] = СтавкаИзУП;
		КонецЕсли;
		
	КонецЦикла;
	
	// Показатели налоговой базы по данным ИБ
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",       НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",        КонецПериода);
	Запрос.УстановитьПараметр("КонецПериодаГраница", КонецПериодаГраница);
	Запрос.УстановитьПараметр("Организация",         ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("ДанныеПериодов",      ДанныеПериодов);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеПериодов.Период КАК Период,
	|	ДанныеПериодов.НомерКвартала
	|ПОМЕСТИТЬ ВТ_Периоды
	|ИЗ
	|	&ДанныеПериодов КАК ДанныеПериодов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Периоды.НомерКвартала,
	|	ВТ_Периоды.Период КАК Период,
	|	ЕСТЬNULL(КнигаУчетаДоходовИРасходовОбороты.Графа5Оборот, 0) КАК Доходы,
	|	ЕСТЬNULL(КнигаУчетаДоходовИРасходовОбороты.ДоходТорговыйСборОборот, 0) КАК ДоходыТорговыйСбор,
	|	ЕСТЬNULL(КнигаУчетаДоходовИРасходовОбороты.Графа7Оборот, 0) КАК Расходы
	|ИЗ
	|	ВТ_Периоды КАК ВТ_Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачалоПериода, &КонецПериодаГраница, Квартал, Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОбороты
	|		ПО (ВТ_Периоды.Период = НАЧАЛОПЕРИОДА(КнигаУчетаДоходовИРасходовОбороты.Период, КВАРТАЛ))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_Периоды.НомерКвартала"
	+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Если ПрименяетсяУСНДоходы Тогда
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(КнигаРаздел4.Период, КВАРТАЛ) КАК Период,
		|	КнигаРаздел4.ДеятельностьНаТорговомСборе,
		|	КнигаРаздел4.ПФРОборот КАК ПФР,
		|	КнигаРаздел4.ФССОборот КАК ФСС,
		|	КнигаРаздел4.ФОМСОборот КАК ФОМС,
		|	КнигаРаздел4.ФСС_НСОборот КАК ФСС_НС,
		|	КнигаРаздел4.БольничныеОборот КАК Больничные,
		|	КнигаРаздел4.ДобровольноеСтрахованиеОборот КАК ДобровольноеСтрахование
		|ПОМЕСТИТЬ ВТ_Раздел4Обороты
		|ИЗ
		|	РегистрНакопления.КнигаУчетаДоходовИРасходовРаздел4.Обороты(&НачалоПериода, &КонецПериодаГраница, Квартал, Организация = &Организация) КАК КнигаРаздел4
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Периоды.НомерКвартала КАК НомерКвартала,
		|	ВТ_Периоды.Период,
		|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.ПФР, 0)) КАК ПФР,
		|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.ФСС, 0)) КАК ФСС,
		|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.ФОМС, 0)) КАК ФОМС,
		|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.ФСС_НС, 0)) КАК ФСС_НС,
		|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.Больничные, 0)) КАК Больничные,
		|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.ДобровольноеСтрахование, 0)) КАК ДобровольноеСтрахование
		|ИЗ
		|	ВТ_Периоды КАК ВТ_Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Раздел4Обороты КАК ВТ_Раздел4Обороты
		|		ПО ВТ_Периоды.Период = ВТ_Раздел4Обороты.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Периоды.НомерКвартала,
		|	ВТ_Периоды.Период
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерКвартала"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
		Если УменьшатьНалогНаТорговыйСбор Тогда
			ТекстЗапроса = ТекстЗапроса +
			"ВЫБРАТЬ
			|	ВТ_Периоды.НомерКвартала КАК НомерКвартала,
			|	ВТ_Периоды.Период,
			|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.ПФР, 0)) КАК ПФР,
			|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.ФСС, 0)) КАК ФСС,
			|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.ФОМС, 0)) КАК ФОМС,
			|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.ФСС_НС, 0)) КАК ФСС_НС,
			|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.Больничные, 0)) КАК Больничные,
			|	СУММА(ЕСТЬNULL(ВТ_Раздел4Обороты.ДобровольноеСтрахование, 0)) КАК ДобровольноеСтрахование
			|ИЗ
			|	ВТ_Периоды КАК ВТ_Периоды
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Раздел4Обороты КАК ВТ_Раздел4Обороты
			|		ПО ВТ_Периоды.Период = ВТ_Раздел4Обороты.Период
			|			И (ВТ_Раздел4Обороты.ДеятельностьНаТорговомСборе)
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТ_Периоды.НомерКвартала,
			|	ВТ_Периоды.Период
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерКвартала"
			+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
		КонецЕсли;
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапросаНалоговаяБаза = Запрос.ВыполнитьПакет();

	УбыткиПрошлыхЛет = Неопределено;
	Если НЕ ПрименяетсяУСНДоходы Тогда
		УбыткиПрошлыхЛет = ПеренесенныеУбыткиПрошлыхЛет(ПараметрыОтчета.Организация, НачалоПериода, КонецПериода);
	КонецЕсли;
	
	УплаченныйТорговыйСбор = Неопределено;
	Если УменьшатьНалогНаТорговыйСбор Тогда
		УплаченныйТорговыйСбор = СведенияОбУплатеТорговогоСбораПоКварталамНарастающимИтогом(
			ПараметрыОтчета.Организация,
			НачалоПериода,
			КонецПериода);
	КонецЕсли;
	
	// заполнение показателей отчета
	
	ИтогоДоходы  = 0;
	ИтогоРасходы = 0;
	ИтогоРасходыУменьшающиеНалог = 0;
	
	ИтогоДоходыТС                  = 0;
	ИтогоРасходыУменьшающиеНалогТС = 0;
	
	ТаблицаДоходыРасходы = РезультатЗапросаНалоговаяБаза[1].Выгрузить();
	
	Если ПрименяетсяУСНДоходы Тогда // объект налогообложения "доходы"
		
		ЗаполняемыйРаздел = Контейнер.Раздел21;
		
		КоэффМаксУменьшенияНалога = ?(ЭтоИПБезВыплатФизлицам, 1, 0.5);
		ЗаполняемыйРаздел["П002110010203"] = ?(ЭтоИПБезВыплатФизлицам, "2", "1");
		
		ТаблицаРасходыУменьшающиеНалог = РезультатЗапросаНалоговаяБаза[3].Выгрузить();
		
		ТаблицаРасходыУменьшающиеНалогТС = Неопределено;
		Если УменьшатьНалогНаТорговыйСбор Тогда
			ТаблицаРасходыУменьшающиеНалогТС = РезультатЗапросаНалоговаяБаза[4].Выгрузить();
		КонецЕсли;
		
		Для каждого СтрокаПериода Из ДанныеПериодов Цикл
			
			ИдКвартала = Строка(СтрокаПериода.НомерКвартала - 1);
			
			СтрокаДоходов = ТаблицаДоходыРасходы[СтрокаПериода.НомерКвартала-1];
			ИтогоДоходы   = ИтогоДоходы + СтрокаДоходов.Доходы;
			ИтогоДоходыТС = ИтогоДоходыТС + СтрокаДоходов.ДоходыТорговыйСбор;
			
			СтрокаРасходовУменьшающихНалог = ТаблицаРасходыУменьшающиеНалог[СтрокаПериода.НомерКвартала-1];
			ИтогоРасходыУменьшающиеНалог   = ИтогоРасходыУменьшающиеНалог
				+ СтрокаРасходовУменьшающихНалог.ПФР + СтрокаРасходовУменьшающихНалог.ФОМС
				+?(ЭтоИПБезВыплатФизлицам, 0, СтрокаРасходовУменьшающихНалог.ФСС + СтрокаРасходовУменьшающихНалог.ФСС_НС
					+ СтрокаРасходовУменьшающихНалог.Больничные + СтрокаРасходовУменьшающихНалог.ДобровольноеСтрахование);
			
			НалоговаяБаза    = Окр(ИтогоДоходы, 0);
			НалогОтБазы      = Окр(НалоговаяБаза*СтрокаПериода.СтавкаНалога/100, 0);
			УменьшениеНалога = Мин(Окр(НалогОтБазы*КоэффМаксУменьшенияНалога, 0), ИтогоРасходыУменьшающиеНалог);
			
			// Плательщики торгового сбора могут уменьшить налог на уплаченный торговый сбор.
			// Уменьшение налога в соответствии с п. 8 статьи 346.21 НК определяется в рамках показателей по деятельности на торговом сборе.
			// В соответствии письмом ФНС от 14 августа 2015 г. N ГД-4-3/14386@ суммы вычитаемого из налога торгового сбора добавляются к строкам 140-143.
			Если УменьшатьНалогНаТорговыйСбор Тогда
				
				СтрокаРасходовУменьшающихНалогТС = ТаблицаРасходыУменьшающиеНалогТС[СтрокаПериода.НомерКвартала-1];
				СтрокаУплаченногоТорговогоСбора  = УплаченныйТорговыйСбор[СтрокаПериода.НомерКвартала - 1];
				
				ИтогоРасходыУменьшающиеНалогТС   = ИтогоРасходыУменьшающиеНалогТС
					+ СтрокаРасходовУменьшающихНалогТС.ПФР + СтрокаРасходовУменьшающихНалогТС.ФОМС
					+?(ЭтоИПБезВыплатФизлицам, 0, СтрокаРасходовУменьшающихНалогТС.ФСС + СтрокаРасходовУменьшающихНалогТС.ФСС_НС
						+ СтрокаРасходовУменьшающихНалогТС.Больничные + СтрокаРасходовУменьшающихНалогТС.ДобровольноеСтрахование);
				
				НалоговаяБазаТС    = Окр(ИтогоДоходыТС, 0);
				НалогОтБазыТС      = Окр(НалоговаяБазаТС*СтрокаПериода.СтавкаНалога/100, 0);
				УменьшениеНалогаТС = Мин(Окр(НалогОтБазыТС*КоэффМаксУменьшенияНалога, 0), ИтогоРасходыУменьшающиеНалогТС);
				
				ТорговыйСборУплаченоНачислено = СтрокаУплаченногоТорговогоСбора.НачисленоУплаченоСНачалаГода;
				
				ЗаполняемыйРаздел["П002120011" + ИдКвартала + "03"] = ИтогоДоходыТС;
				ЗаполняемыйРаздел["П002120014" + ИдКвартала + "03"] = УменьшениеНалогаТС;
				ЗаполняемыйРаздел["П002120015" + ИдКвартала + "03"] = ТорговыйСборУплаченоНачислено;
				
			КонецЕсли;
			
			ЗаполняемыйРаздел["П002110011" + ИдКвартала + "03"] = ИтогоДоходы;
			ЗаполняемыйРаздел["П002110014" + ИдКвартала + "03"] = УменьшениеНалога;
			
		КонецЦикла;
		
	Иначе // объект налогообложения "доходы минус расходы"
		
		ЗаполняемыйРаздел = Контейнер.Раздел22;
		
		Для каждого СтрокаПериода Из ДанныеПериодов Цикл
			
			ИдКвартала = Строка(СтрокаПериода.НомерКвартала - 1);
			
			СтрокаДоходовРасходов = ТаблицаДоходыРасходы[СтрокаПериода.НомерКвартала-1];
		
			ИтогоДоходы  = ИтогоДоходы + СтрокаДоходовРасходов.Доходы;
			ИтогоРасходы = ИтогоРасходы + СтрокаДоходовРасходов.Расходы;
			
			// в последнем квартела года учтем перенесенные убытки прошлых лет
			Если СтрокаПериода.НомерКвартала = 4 Тогда
				ИтогоРасходы = ИтогоРасходы + УбыткиПрошлыхЛет.УбытокОтУплатыМинимальногоНалога;
				НалоговаяБаза  = ИтогоДоходы - ИтогоРасходы;
				УменьшениеНалоговойБазы = Макс(0, Мин(НалоговаяБаза, УбыткиПрошлыхЛет.ПеренесенныеУбытки));
				ЗаполняемыйРаздел["П000220023003"] = УменьшениеНалоговойБазы;
			КонецЕсли;
			
			ЗаполняемыйРаздел["П000220021" + ИдКвартала + "03"] = ИтогоДоходы;
			ЗаполняемыйРаздел["П000220022" + ИдКвартала + "03"] = ИтогоРасходы;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Замер длительности автозаполнения: окончание
	ВремяОкончанияОперации = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Длительность = ВремяОкончанияОперации - ВремяНачалаОперации;
	ИмяСобытия = СтрШаблон(
		НСтр("ru = 'Заполнение регламентированных отчетов.Декларация по УСН за %1 год'"),
		Формат(Год(КонецПериода), "ЧГ=0"));
	
	ЗаписьЖурналаРегистрации(ИмяСобытия,
							 УровеньЖурналаРегистрации.Информация,
							 Метаданные.Отчеты.РегламентированныйОтчетУСН.Формы.ФормаОтчета2014Кв1,
							 ,
							 СтрШаблон(НСтр("ru = 'Результат операции (%1 мс)'"), Длительность),
							 РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОТРАЖЕНИЕ ОПЕРАЦИЙ ПО ПЕРЕХОДУ НА УСН

Процедура ОтразитьВыполнениеОперацииПереходаНаУСН(СтруктураПараметров, ФиксироватьУстаревшие = Ложь, Отказ = Ложь) Экспорт

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Ответственный = Пользователи.ТекущийПользователь();
	
	Набор = РегистрыСведений.ВыполнениеОперацийИзмененияНалоговогоРежима.СоздатьНаборЗаписей();
	
	Набор.Отбор.ВидОперации.Установить(СтруктураПараметров.ВидОперации);
	Набор.Отбор.Организация.Установить(СтруктураПараметров.Организация);
	Набор.Отбор.ДатаПерехода.Установить(СтруктураПараметров.ДатаПерехода);
	Набор.Отбор.НаправлениеПерехода.Установить(СтруктураПараметров.НаправлениеПерехода);	
	
	Запись = Набор.Добавить();
	Запись.Активность          = Истина;
	Запись.ВидОперации         = СтруктураПараметров.ВидОперации;
	Запись.Организация         = СтруктураПараметров.Организация;
	Запись.ДатаПерехода        = СтруктураПараметров.ДатаПерехода;
	Запись.НаправлениеПерехода = СтруктураПараметров.НаправлениеПерехода;
	Запись.Состояние           = СтруктураПараметров.Состояние;
	Запись.Ответственный       = Ответственный;
	Запись.Актуальность        = Истина;
	
	Набор.Записать();
	
	// сохраняем ссылки на документы операции
	Если СтруктураПараметров.Свойство("ДокументыОперации") Тогда
		ДокументыОперации = СтруктураПараметров.ДокументыОперации;
		Если ДокументыОперации.Количество() > 0 Тогда					
			
			НаборДокументы = РегистрыСведений.ДокументыОперацийИзмененияНалоговогоРежима.СоздатьНаборЗаписей();
			НаборДокументы.Отбор.Организация.Установить(СтруктураПараметров.Организация);
			НаборДокументы.Отбор.НаправлениеПерехода.Установить(СтруктураПараметров.НаправлениеПерехода);
			НаборДокументы.Отбор.ДатаПерехода.Установить(СтруктураПараметров.ДатаПерехода);
			НаборДокументы.Отбор.ВидОперации.Установить(СтруктураПараметров.ВидОперации); 
			
			Для каждого ДокументОперации Из ДокументыОперации Цикл								
				Запись = НаборДокументы.Добавить();
				Запись.Активность = Истина;
				ЗаполнитьЗначенияСвойств(Запись, СтруктураПараметров);
				Запись.ДокументОперации = ДокументОперации;
			КонецЦикла; 
			
			НаборДокументы.Записать();
			
		КонецЕсли; 
	КонецЕсли;
	
	Если ФиксироватьУстаревшие Тогда
		ЗафиксироватьУстаревшиеОперацииПереходаНаУСН(СтруктураПараметров, Отказ); 		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОтменитьВыполнениеОперацииПереходаНаУСН(СтруктураПараметров, ФиксироватьУстаревшие = Ложь, Отказ = Ложь) Экспорт

	Если Отказ Тогда			
		Возврат;
	КонецЕсли; 
	
	Ответственный = Пользователи.ТекущийПользователь();
	
	Набор = РегистрыСведений.ВыполнениеОперацийИзмененияНалоговогоРежима.СоздатьНаборЗаписей();
	
	Набор.Отбор.ВидОперации.Установить(СтруктураПараметров.ВидОперации);
	Набор.Отбор.Организация.Установить(СтруктураПараметров.Организация);
	Набор.Отбор.ДатаПерехода.Установить(СтруктураПараметров.ДатаПерехода);
	Набор.Отбор.НаправлениеПерехода.Установить(СтруктураПараметров.НаправлениеПерехода);	
	
	Запись = Набор.Добавить();
	Запись.Активность          = Истина;
	Запись.ВидОперации         = СтруктураПараметров.ВидОперации;
	Запись.Организация         = СтруктураПараметров.Организация;
	Запись.ДатаПерехода        = СтруктураПараметров.ДатаПерехода;
	Запись.НаправлениеПерехода = СтруктураПараметров.НаправлениеПерехода;
	Запись.Состояние           = СтруктураПараметров.Состояние;
	Запись.Ответственный       = Ответственный;
	Запись.Актуальность        = Ложь;		 
	
	Набор.Записать();
	
	// обработаем ссылки на документы операции и сами документы в зависимости от переданных параметров:
	// Если СтруктураПараметров.СпособОбработкиДокументовОперации = "ПометитьНаУдаление" - помечаем на удаление
	// Если СтруктураПараметров.СпособОбработкиДокументовОперации = "ОтменитьПроведение" - делаем не проведенными
	ОбрабатыватьДокументыОперации = Ложь;
	СтруктураПараметров.Свойство("ОбрабатыватьДокументыОперации", ОбрабатыватьДокументыОперации);
	ОчиститьСсылкиНаДокументы = Ложь;
	СтруктураПараметров.Свойство("ОчиститьСсылкиНаДокументы", ОчиститьСсылкиНаДокументы);
	
	Если ОбрабатыватьДокументыОперации Тогда
		
		НаборДокументы = РегистрыСведений.ДокументыОперацийИзмененияНалоговогоРежима.СоздатьНаборЗаписей();
		НаборДокументы.Отбор.Организация.Установить(СтруктураПараметров.Организация);
		НаборДокументы.Отбор.НаправлениеПерехода.Установить(СтруктураПараметров.НаправлениеПерехода);
		НаборДокументы.Отбор.ДатаПерехода.Установить(СтруктураПараметров.ДатаПерехода);
		НаборДокументы.Отбор.ВидОперации.Установить(СтруктураПараметров.ВидОперации);
		
		НаборДокументы.Прочитать(); 
		
		Если НаборДокументы.Количество() > 0 Тогда
			
			Для каждого ЗаписьПоДокументу Из НаборДокументы Цикл
				
				ДокументОперации = ЗаписьПоДокументу.ДокументОперации.ПолучитьОбъект();
				
				Если СтруктураПараметров.СпособОбработкиДокументовОперации = "ПометитьНаУдаление" Тогда
					
					ДокументОперации.УстановитьПометкуУдаления(Истина);
					
				ИначеЕсли СтруктураПараметров.СпособОбработкиДокументовОперации = "ОтменитьПроведение" Тогда
					
					Если ДокументОперации.Проведен Тогда						
						ДокументОперации.Записать(РежимЗаписиДокумента.ОтменаПроведения);
					Иначе // Операция (БУ и НУ), требуется очистить движения
						ДвиженияДокумента = ДокументОперации.Движения;
						Для каждого НаборДвижений Из ДвиженияДокумента Цикл							
							НаборДвижений.Записать(Истина); 
						КонецЦикла; 
					КонецЕсли; 
				КонецЕсли; 
				
			КонецЦикла; 
			
			// Если требуется - очистим ссылки на документы операции
			Если ОчиститьСсылкиНаДокументы Тогда			
				НаборДокументы.Очистить();
				НаборДокументы.Записать();			
			КонецЕсли; 
			
		КонецЕсли; 		
		
	КонецЕсли;
	
	Если ФиксироватьУстаревшие Тогда
		ЗафиксироватьУстаревшиеОперацииПереходаНаУСН(СтруктураПараметров, Отказ);		 				
	КонецЕсли;

КонецПроцедуры

Процедура ЗафиксироватьУстаревшиеОперацииПереходаНаУСН(СтруктураПараметров, Отказ = Ложь) Экспорт
	
	ИндексТекущейОперации = Перечисления.ВидыОперацийПереходаНаУСН.Индекс(СтруктураПараметров.ВидОперации);
	СледующиеВидыОпераций = Новый Массив;
	
	Для Инд = ИндексТекущейОперации + 1 По Перечисления.ВидыОперацийПереходаНаУСН.Количество() - 1 Цикл			
		СледующиеВидыОпераций.Добавить(Перечисления.ВидыОперацийПереходаНаУСН.Получить(Инд));
	КонецЦикла; 
	
	Если СледующиеВидыОпераций.Количество() > 0 Тогда			
		
		Ответственный = Пользователи.ТекущийПользователь();
		
		Набор = РегистрыСведений.ВыполнениеОперацийИзмененияНалоговогоРежима.СоздатьНаборЗаписей();
		
		Набор.Отбор.Организация.Установить(СтруктураПараметров.Организация);
		Набор.Отбор.ДатаПерехода.Установить(СтруктураПараметров.ДатаПерехода);
		Набор.Отбор.НаправлениеПерехода.Установить(СтруктураПараметров.НаправлениеПерехода);
		
		Для каждого СледующийВидОперации Из СледующиеВидыОпераций Цикл
			
			Набор.Отбор.ВидОперации.Установить(СледующийВидОперации);
			Набор.Прочитать();
			
			Если Набор.Количество() = 0 Тогда					
				Продолжить;
			КонецЕсли; 
			
			// если есть записи о выполненных следующих операциях, пометим их как неактуальные
			Если Набор.Количество() = 1 Тогда // есть запись про следующую операцию
				
				Запись = Набор[0];
				Запись.Ответственный = Ответственный;
				Запись.Актуальность  = Ложь;
				
			Иначе
				
				Если Набор.Количество() > 1 Тогда
					
					Набор.Очистить();
					Запись = Набор.Добавить();
					Запись.ВидОперации         = СледующийВидОперации;
					Запись.Организация         = СтруктураПараметров.Организация;
					Запись.ДатаПерехода        = СтруктураПараметров.ДатаПерехода;
					Запись.НаправлениеПерехода = СтруктураПараметров.НаправлениеПерехода;
					Запись.Состояние           = Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено;
					Запись.Ответственный       = Ответственный;
					Запись.Актуальность        = Ложь;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Набор.Записать();
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДокументСозданПриИзмененииНалоговогоРежима(Ссылка) Экспорт

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокументыОперацийИзмененияНалоговогоРежима.ДокументОперации
	|ИЗ
	|	РегистрСведений.ДокументыОперацийИзмененияНалоговогоРежима КАК ДокументыОперацийИзмененияНалоговогоРежима
	|ГДЕ
	|	ДокументыОперацийИзмененияНалоговогоРежима.ДокументОперации = &ДокументСсылка"
	;
	
	Возврат Не Запрос.Выполнить().Пустой();

КонецФункции

Функция ЭтоПервыйДеньПримененияУСНПослеУплатыНалогаНаПрибыль(Организация, Период) Экспорт

	Если НачалоДня(Период) = НачалоГода(Период)
		И УчетнаяПолитика.ПрименяетсяУСН(Организация, Период)
		И УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, НачалоДня(Период) - 1) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПАТЕНТНАЯ СИСТЕМА НАЛОГООБЛОЖЕНИЯ

Функция ДатаНачалаДействияПатентнойСистемы() Экспорт 
	
	Возврат '20130101';
	
КонецФункции

// Возвращает потенциально возможный доход в течение года по полученным патентам
// Если массив пустой - считаем по всем патентам
//
Функция ПотенциальноВозможныйДоход(Организация, ДатаНачала, ДатаОкончания, МассивПатентов = Неопределено, СообщатьОбОшибках = Истина) Экспорт
	
	ПотенциальноВозможныйДоход = 0;
	
	Если Не УчетнаяПолитика.ПрименяетсяУСНПатентЗаПериод(Организация, ДатаНачала, ДатаОкончания) Тогда
		Возврат ПотенциальноВозможныйДоход;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.УстановитьПараметр("ДатаНачала",     ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",  ДатаОкончания);
	Запрос.УстановитьПараметр("МассивПатентов", МассивПатентов);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Патенты.Ссылка,
	|	Патенты.ДатаНачала,
	|	Патенты.ДатаОкончания,
	|	Патенты.ПотенциальноВозможныйГодовойДоход
	|ИЗ
	|	Справочник.Патенты КАК Патенты
	|ГДЕ
	|	Патенты.Владелец = &Организация
	|	И (Патенты.ДатаОкончания МЕЖДУ &ДатаНачала И &ДатаОкончания
	|			ИЛИ Патенты.ДатаНачала МЕЖДУ &ДатаНачала И &ДатаОкончания
	|			ИЛИ &ДатаНачала МЕЖДУ Патенты.ДатаНачала И Патенты.ДатаОкончания
	|			ИЛИ &ДатаОкончания МЕЖДУ Патенты.ДатаНачала И Патенты.ДатаОкончания)";
	
	Если МассивПатентов <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	И Ссылка В (&МассивПатентов)";
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ПотенциальноВозможныйГодовойДоход <> 0 Тогда
			ПотенциальноВозможныйДоход = ПотенциальноВозможныйДоход + УчетУСНКлиентСервер.РассчитатьПотенциальноВозможныйДоход(
				Выборка.ПотенциальноВозможныйГодовойДоход, Макс(ДатаНачала, Выборка.ДатаНачала), Мин(ДатаОкончания, Выборка.ДатаОкончания));
		Иначе
			Если СообщатьОбОшибках Тогда
				СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Для патента ""%1"" не указан потенциально возможный доход'"), Выборка.Ссылка);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке, Выборка.Ссылка, "ПотенциальноВозможныйГодовойДоход");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПотенциальноВозможныйДоход;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ОТРАЖЕНИЕ РАСХОДОВ НА УПЛАТУ СТРАХОВЫХ ВЗНОСОВ ЗА СЕБЯ

Функция ПодготовитьТаблицуРасходовНаУплатуСтраховыхВзносов(ТаблицаРеквизитов) Экспорт
	
	Параметры = ПодготовитьПараметрыТаблицыРасходовНаУплатуСтраховыхВзносов(ТаблицаРеквизитов);
	Если Параметры.Реквизиты.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	Если НЕ УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаРасходов = УчетСтраховыхВзносовИП.ПодготовитьТаблицуРасходовНаУплатуСтраховыхВзносов(Реквизиты.Организация, Реквизиты.Период);
	
	Если УчетЕНВД.НалогУменьшаетсяНаФиксированныеВзносыИПРаботодателей(Реквизиты.Период)
		И УчетнаяПолитика.ПлательщикЕНВД(Реквизиты.Организация, Реквизиты.Период) Тогда
		
		// С 2017 года при совмещении с ЕНВД страховые взносы распределяются между уменьшением ЕНВД и расходами по основной деятельности.
		// Необходимо исключить из расходов сумму, учтенную в уменьшении ЕНВД.
		
		КоэффициентЕНВД = УчетРасходовУменьшающихОтдельныеНалоги.КоэффициентДоходовЕНВДДляРаспределенияФиксированныхВзносов(
			Реквизиты.Организация, Реквизиты.Период);
		
		Для каждого СтраховойВзнос Из ТаблицаРасходов Цикл
			СтраховойВзнос.Сумма = СтраховойВзнос.Сумма - Окр(СтраховойВзнос.Сумма * КоэффициентЕНВД, 2);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТаблицаРасходов;
	
КонецФункции

Функция ПодготовитьПараметрыТаблицыРасходовНаУплатуСтраховыхВзносов(ТаблицаРеквизитов) Экспорт
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"      // <Дата> - период движений - дата документа
		+ "Регистратор," // <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация"; // <СправочникСсылка.Организации> - оранизация
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;
	
КонецФункции

Процедура СформироватьДвиженияОтражениеРасходовНаУплатуСтраховыхВзносов(ТаблицаРасходов, ТаблицаРеквизитов, ДокументОбъект, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыОтраженияРасходовНаУплатуСтраховыхВзносов(ТаблицаРасходов, ТаблицаРеквизитов);
	Если Параметры.Реквизиты.Количество() = 0 ИЛИ Параметры.СтраховыеВзносы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	Если НЕ УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект.Движения.ПрочиеРасчеты.Записывать = Истина;
	
	СтруктураТаблицУСН = Новый Структура("ТаблицаВзносовИП", Параметры.СтраховыеВзносы);
	
	Параметры = Новый Структура;
	Параметры.Вставить("Ссылка", Реквизиты.Регистратор);
	Параметры.Вставить("Объект", ДокументОбъект);
	Параметры.Вставить("Организация", Реквизиты.Организация);
	Параметры.Вставить("Дата", Реквизиты.Период);
	Параметры.Вставить("ОтражатьВНалоговомУчетеУСН", Истина);
	Параметры.Вставить("ОтражатьВНалоговомУчетеУСНДоходы", Ложь);
	Параметры.Вставить("ОтражатьВНалоговомУчетеУСНПатент", Ложь);
	
	НалоговыйУчетУСН.ОтразитьВУСН(Реквизиты.Регистратор, "НачислениеСтраховыхВзносовИП", Параметры,, СтруктураТаблицУСН);

КонецПроцедуры

Функция ПодготовитьПараметрыОтраженияРасходовНаУплатуСтраховыхВзносов(ТаблицаРасходов, ТаблицаРеквизитов)

	Параметры = Новый Структура;

	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = ""
	+ "СчетУчета,"           // <ПланСчетовСсылка.Хозрасчетный> - счет учета страховых взносов
	+ "ВидПлатежаВГосБюджет," // <ПеречислениеСсылка.ВидыПлатежейВГосБюджет> - вид платежа в бюджет
	+ "СтраховойПериод,"     // <Дата> - страховой год
	+ "ДокументОплаты,"      // <ДокументСсылка.*> - документ оплаты
	+ "Сумма";               // <Число, 15, 2>
	;
	Параметры.Вставить("СтраховыеВзносы", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРасходов, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"			// <Дата> - период движений - дата документа
		+ "Регистратор,"	// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация";	// <СправочникСсылка.Организации> - оранизация
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// НАЧИСЛЕНИЕ ИМУЩЕСТВЕННЫХ НАЛОГОВ

Функция ПодготовитьТаблицуРасходовПоИмущественномуНалогу(ТаблицаНалогов, ТаблицаРеквизитов) Экспорт

	Параметры = ПодготовитьПараметрыТаблицыРасходовПоИмущественномуНалогу(ТаблицаНалогов, ТаблицаРеквизитов);
	Если Параметры.Реквизиты.Количество() = 0 ИЛИ Параметры.ТаблицаНалогов.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	Если НЕ УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если Реквизиты.Период < '20150101' И Реквизиты.ВидНалога = Перечисления.ВидыИмущественныхНалогов.НалогНаИмущество Тогда
		// налог на имущество до 2015 года при применении УСН не начисляется и в расходах не отражается
		Возврат Неопределено;
	КонецЕсли;
	
	ПлательщикЕНВД = УчетнаяПолитика.ПлательщикЕНВД(Реквизиты.Организация, Реквизиты.Период);
	
	Налоги = Параметры.ТаблицаНалогов;
	
	Налоги.Колонки.Добавить("ВидНалога", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыИмущественныхНалогов"));
	Налоги.ЗаполнитьЗначения(Реквизиты.ВидНалога, "ВидНалога");
	
	Налоги.Свернуть("ВидНалога, СчетКт, ОтражениеВУСН", "Сумма");
	Налоги.Колонки.СчетКт.Имя = "СчетУчета";
	
	Для каждого СтрокаНалога Из Налоги Цикл
		Если СтрокаНалога.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Распределяются Тогда
			Если НЕ ПлательщикЕНВД Тогда
				// Если нет ЕНВД - расходы не могут быть распределяемыми
				СтрокаНалога.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
			ИначеЕсли Реквизиты.ВидНалога = Перечисления.ВидыИмущественныхНалогов.НалогНаИмущество Тогда
				// расходы по налогу на имущество не могут быть распределяемыми,
				// т.к. налог на имущество при совмещении с ЕНВД начисляется только в части основного режима налогообложения
				СтрокаНалога.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Налоги;
	
КонецФункции

Функция ПодготовитьПараметрыТаблицыРасходовПоИмущественномуНалогу(ТаблицаНалогов, ТаблицаРеквизитов)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаНалогов
	
	СписокОбязательныхКолонок = ""
		+ "СчетКт,"				// <ПланСчетовСсылка.Хозрасчетный> - счет учета налога
		+ "ОтражениеВУСН,"		// <ПеречислениеСсылка.ОтражениеВУСН> - отражение налога в УСН
		+ "Сумма";				// <Число, 15, 2> - сумма налога
		
	Параметры.Вставить("ТаблицаНалогов", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаНалогов, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"			// <Дата> - период движений - дата документа
		+ "Регистратор,"	// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация,"	// <СправочникСсылка.Организации> - оранизация
		+ "ВидНалога";		// <ПеречислениеСсылка.ВидыИмущественныхНалогов> - вид начисляемого налога
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияОтражениеРасходовПоИмущественнымНалогам(
	ТаблицаРасходов, ТаблицаПлатон, ТаблицаРеквизитов, ДокументОбъект, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыОтраженияРасходовПоИмущественнымНалогам(ТаблицаРасходов, ТаблицаПлатон, ТаблицаРеквизитов);
	Если Параметры.Реквизиты.Количество() = 0 
		ИЛИ (Параметры.ТаблицаРасходов.Количество() = 0 И Параметры.ТаблицаПлатон.Количество() = 0 )Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	Если НЕ УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.ТаблицаРасходов.Количество() > 0 Тогда
	
		ДокументОбъект.Движения.ПрочиеРасчеты.Записывать = Истина;
		
		СтруктураТаблицУСН = Новый Структура("ТаблицаРасходов", Параметры.ТаблицаРасходов);
		
		ПараметрыОтражения = Новый Структура;
		ПараметрыОтражения.Вставить("Ссылка", Реквизиты.Регистратор);
		ПараметрыОтражения.Вставить("Объект", ДокументОбъект);
		ПараметрыОтражения.Вставить("Организация", Реквизиты.Организация);
		ПараметрыОтражения.Вставить("Дата", Реквизиты.Период);
		ПараметрыОтражения.Вставить("ОтражатьВНалоговомУчетеУСН", Истина);
		ПараметрыОтражения.Вставить("ОтражатьВНалоговомУчетеУСНДоходы", Ложь);
		ПараметрыОтражения.Вставить("ОтражатьВНалоговомУчетеУСНПатент", Ложь);
		
		НалоговыйУчетУСН.ОтразитьВУСН(Реквизиты.Регистратор, "НачислениеИмущественныхНалогов", ПараметрыОтражения,, СтруктураТаблицУСН);
		
	КонецЕсли;
	
	Если Параметры.ТаблицаПлатон.Количество() > 0 Тогда
	
		ДокументОбъект.Движения.КнигаУчетаДоходовИРасходов.Записывать = Истина;
	
		Для Каждого СтрокаТаблицы Из Параметры.ТаблицаПлатон Цикл
			
			Если СтрокаТаблицы.СуммаРасхода = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ШаблонСодержания = НСтр("ru = 'Признаны в расходах НУ платежи в систему ""Платон"" по транспортному средству ""%1""'");
			Содержание = СтрШаблон(ШаблонСодержания, СтрокаТаблицы.ОсновноеСредство);
			
			ЗаписьКУДиР = ДокументОбъект.Движения.КнигаУчетаДоходовИРасходов.Добавить();
			
			ЗаполнитьЗначенияСвойств(ЗаписьКУДиР, Реквизиты);
			
			ЗаписьКУДиР.Активность = Истина;
			ЗаписьКУДиР.Содержание = Содержание;
			ЗаписьКУДиР.РеквизитыПервичногоДокумента = НалоговыйУчетУСН.РеквизитыПервичногоДокумента(Реквизиты.Регистратор);
			ЗаписьКУДиР.Графа7 = СтрокаТаблицы.СуммаРасхода;
			
		КонецЦикла;
	
	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыОтраженияРасходовПоИмущественнымНалогам(ТаблицаРасходов, ТаблицаПлатон, ТаблицаРеквизитов)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаРасходов
	
	СписокОбязательныхКолонок = ""
		+ "ВидНалога,"			// <ПеречислениеСсылка.ВидыИмущественныхНалогов> - вид начисляемого налога
		+ "СчетУчета,"			// <ПланСчетовСсылка.Хозрасчетный> - счет учета налога
		+ "ОтражениеВУСН,"		// <ПеречислениеСсылка.ОтражениеВУСН> - отражение налога в УСН
		+ "Сумма";				// <Число, 15, 2> - сумма налога
		
	Параметры.Вставить("ТаблицаРасходов", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРасходов, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.ТаблицаПлатон
	
	СписокОбязательныхКолонок = ""
		+ "ОсновноеСредство,"	// <СправочникСсылка.ОсновныеСредства> - ТС, по которому признается расход
		+ "СуммаРасхода";		// <Число, 15, 2> - сумма, признаваемая в расходах
		
	Параметры.Вставить("ТаблицаПлатон", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаПлатон, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"			// <Дата> - период движений - дата документа
		+ "Регистратор,"	// <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация";	// <СправочникСсылка.Организации> - организация
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// НАЧИСЛЕНИЕ ТОРГОВОГО СБОРА

Функция ПодготовитьТаблицуРасходовПоТорговомуСбору(ТаблицаПроводок, ТаблицаРеквизитов) Экспорт
	
	Параметры = ПодготовитьПараметрыТаблицыРасходовПоТорговомуСбору(ТаблицаПроводок, ТаблицаРеквизитов);
	Если Параметры.Реквизиты.Количество() = 0 ИЛИ Параметры.ТаблицаДанныеТорговыйСбор.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	Если Реквизиты.Период < '20150701' Тогда
		// торговый сбор действует с июля 2015 года
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеТорговыйСбор = Параметры.ТаблицаДанныеТорговыйСбор;
	ДанныеТорговыйСбор.Свернуть("СчетКт", "Сумма");
	ДанныеТорговыйСбор.Колонки.СчетКт.Имя = "СчетУчета";
	ДанныеТорговыйСбор.Колонки.Добавить("ОтражениеВУСН",
		Новый ОписаниеТипов("ПеречислениеСсылка.ОтражениеВУСН"));
	ДанныеТорговыйСбор.ЗаполнитьЗначения(Перечисления.ОтражениеВУСН.Принимаются,"ОтражениеВУСН");
	
	Возврат ДанныеТорговыйСбор;
	
КонецФункции

Функция ПодготовитьПараметрыТаблицыРасходовПоТорговомуСбору(ТаблицаПроводок, ТаблицаРеквизитов)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаНалогов
	
	СписокОбязательныхКолонок = ""
		+ "СчетКт," // <ПланСчетовСсылка.Хозрасчетный> - счет учета сбора
		+ "Сумма";  // <Число, 15, 2> - сумма сбора
	
	Параметры.Вставить("ТаблицаДанныеТорговыйСбор", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаПроводок, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"      // <Дата> - период движений - дата документа
		+ "Регистратор," // <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация," // <СправочникСсылка.Организации> - оранизация
		;
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияОтражениеРасходовПоТорговомуСбору(ТаблицаРасходов, ТаблицаРеквизитов, ДокументОбъект, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыОтраженияРасходовПоТорговомуСбору(ТаблицаРасходов, ТаблицаРеквизитов);
	Если Параметры.Реквизиты.Количество() = 0 Или Параметры.ТаблицаРасходов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	Если НЕ УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект.Движения.ПрочиеРасчеты.Записывать = Истина;
	
	СтруктураТаблицУСН = Новый Структура("ТаблицаРасходов", Параметры.ТаблицаРасходов);
	
	Параметры = Новый Структура;
	Параметры.Вставить("Ссылка", Реквизиты.Регистратор);
	Параметры.Вставить("Объект", ДокументОбъект);
	Параметры.Вставить("Организация", Реквизиты.Организация);
	Параметры.Вставить("Дата", Реквизиты.Период);
	Параметры.Вставить("ОтражатьВНалоговомУчетеУСН", Истина);
	Параметры.Вставить("ОтражатьВНалоговомУчетеУСНДоходы", Ложь);
	Параметры.Вставить("ОтражатьВНалоговомУчетеУСНПатент", Ложь);
	
	НалоговыйУчетУСН.ОтразитьВУСН(Реквизиты.Регистратор, "НачислениеТорговогоСбора", Параметры,, СтруктураТаблицУСН);

КонецПроцедуры

Функция ПодготовитьПараметрыОтраженияРасходовПоТорговомуСбору(ТаблицаРасходов, ТаблицаРеквизитов)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаРасходов
	
	СписокОбязательныхКолонок = ""
		+ "СчетУчета,"     // <ПланСчетовСсылка.Хозрасчетный> - счет учета сбора
		+ "ОтражениеВУСН," // <ПеречислениеСсылка.ОтражениеВУСН> - отражение сбора в УСН
		+ "Сумма";         // <Число, 15, 2> - сумма налога
	
	Параметры.Вставить("ТаблицаРасходов", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРасходов, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"      // <Дата> - период движений - дата документа
		+ "Регистратор," // <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация"; // <СправочникСсылка.Организации> - организация
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции

Процедура РаспределитьРасходыПоДеятельностиНаТорговомСборе(ТаблицаРасходов, Реквизиты)

	Если ТаблицаРасходов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Необходимо учесть, что торговый сбор в 1 квартале уплачивается за квартал, относящийся к предыдущему налоговому периоду.
	НачалоПериода = НачалоГода(ДобавитьМесяц(Реквизиты.Период, -3));
	КонецПериода  = КонецКвартала(Реквизиты.Период);
	ЭтоНачалоГода = (НачалоГода(Реквизиты.Период) = НачалоКвартала(Реквизиты.Период));
	
	Если Не УчетнаяПолитика.ПлательщикТорговогоСбораЗаПериод(Реквизиты.Организация, НачалоПериода, КонецПериода) Тогда
		Возврат;
	КонецЕсли;
	
	БазаРаспределения = ДоходыНарастающимИтогом(КонецПериода, Реквизиты.Организация, Перечисления.Периодичность.Месяц);
	
	Если ЭтоНачалоГода Тогда
		БазаРаспределенияПредыдущийПериод = ДоходыНарастающимИтогом(
			КонецГода(НачалоПериода),
			Реквизиты.Организация,
			Перечисления.Периодичность.Месяц);
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(БазаРаспределенияПредыдущийПериод, БазаРаспределения);
	КонецЕсли;
	
	БазаРаспределения.Индексы.Добавить("Период");
	
	РасходыДоРаспределения = ТаблицаРасходов.Скопировать();
	ТаблицаРасходов.Очистить();
	
	Для каждого Расход Из РасходыДоРаспределения Цикл
		
		КоэффУСН = 1;
		КоэффТС  = 0;
		
		ПериодРасхода = ?(ЗначениеЗаполнено(Расход.ПериодНачисления),
			КонецМесяца(Расход.ПериодНачисления), КонецПериода);
		
		ОтборБазы = Новый Структура("Период", ПериодРасхода);
		СтрокиБазы = БазаРаспределения.НайтиСтроки(ОтборБазы);
		
		Если СтрокиБазы.Количество() > 0 Тогда
			БазаТекущегоПериода = СтрокиБазы[0];
			КоэффТС = ?(БазаТекущегоПериода.ДоходыУСН = 0, 0, БазаТекущегоПериода.ДоходыТорговыйСбор / БазаТекущегоПериода.ДоходыУСН);
			КоэффТС = Мин(Макс(КоэффТС, 0), 1);
			КоэффУСН = 1 - КоэффТС;
		КонецЕсли;
		
		// расходы, относящиеся к деятельности УСН на торговом сборе
		Если КоэффТС > 0 Тогда
			
			НоваяСтрокаРасхода = ТаблицаРасходов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРасхода, Расход);
			
			НоваяСтрокаРасхода.ДеятельностьНаТорговомСборе = Истина;
			
			Если КоэффТС < 1 Тогда
				НоваяСтрокаРасхода.ПФР                     = Окр(Расход.ПФР*КоэффТС, 2);
				НоваяСтрокаРасхода.ФСС                     = Окр(Расход.ФСС*КоэффТС, 2);
				НоваяСтрокаРасхода.ФОМС                    = Окр(Расход.ФОМС*КоэффТС, 2);
				НоваяСтрокаРасхода.ФСС_НС                  = Окр(Расход.ФСС_НС*КоэффТС, 2);
				НоваяСтрокаРасхода.Больничные              = Окр(Расход.Больничные*КоэффТС, 2);
				НоваяСтрокаРасхода.ДобровольноеСтрахование = Окр(Расход.ДобровольноеСтрахование*КоэффТС, 2);
			КонецЕсли;
			
		КонецЕсли;
		
		// расходы, относящиеся к "обычной" УСН
		Если КоэффУСН > 0 Тогда
			
			НоваяСтрокаРасхода = ТаблицаРасходов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРасхода, Расход);
			
			НоваяСтрокаРасхода.ДеятельностьНаТорговомСборе = Ложь;
			
			Если КоэффУСН < 1 Тогда
				НоваяСтрокаРасхода.ПФР                     = Окр(Расход.ПФР*КоэффУСН, 2);
				НоваяСтрокаРасхода.ФСС                     = Окр(Расход.ФСС*КоэффУСН, 2);
				НоваяСтрокаРасхода.ФОМС                    = Окр(Расход.ФОМС*КоэффУСН, 2);
				НоваяСтрокаРасхода.ФСС_НС                  = Окр(Расход.ФСС_НС*КоэффУСН, 2);
				НоваяСтрокаРасхода.Больничные              = Окр(Расход.Больничные*КоэффУСН, 2);
				НоваяСтрокаРасхода.ДобровольноеСтрахование = Окр(Расход.ДобровольноеСтрахование*КоэффУСН, 2);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Функция ДоходыНарастающимИтогом(Период, Организация, Периодичность = "Период")
	
	НачалоПериода = НачалоГода(Период);
	КонецПериода  = КонецДня(Период);
	
	Периоды = Новый ТаблицаЗначений;
	Периоды.Колонки.Добавить("НачалоПериода", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	Периоды.Колонки.Добавить("КонецПериода",  ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	
	ТекущийПериод = НачалоПериода;
	
	Пока ТекущийПериод < КонецПериода Цикл
		
		НоваяСтрока = Периоды.Добавить();
		НоваяСтрока.НачалоПериода = НачалоПериода;
		
		Если Периодичность = "Период" Тогда
			ТекущийПериод = КонецПериода;
		Иначе
			ТекущийПериод = ИнтерфейсыВзаимодействияБРОКлиентСервер.ДобавитьПериод(ТекущийПериод, Периодичность);
		КонецЕсли;
		
		НоваяСтрока.КонецПериода = ТекущийПериод - 1;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("НачалоПериода",   НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",    КонецПериода);
	Запрос.УстановитьПараметр("Организация",     Организация);
	Запрос.УстановитьПараметр("ТаблицаПериодов", Периоды);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОНЕЦПЕРИОДА(КУДиРОбороты.Период, Квартал) КАК Период,
	|	КУДиРОбороты.Графа5Оборот КАК ДоходыУСН,
	|	КУДиРОбороты.ДоходЕНВДОборот КАК ДоходыЕНВД,
	|	КУДиРОбороты.ДоходТорговыйСборОборот КАК ДоходыТорговыйСбор
	|ПОМЕСТИТЬ ВТ_ОборотыПоПериодам
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачалоПериода, &КонецПериода, Квартал, Организация = &Организация) КАК КУДиРОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПериодов.НачалоПериода,
	|	ТаблицаПериодов.КонецПериода
	|ПОМЕСТИТЬ ВТ_Периоды
	|ИЗ
	|	&ТаблицаПериодов КАК ТаблицаПериодов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Периоды.КонецПериода КАК Период,
	|	СУММА(ЕСТЬNULL(ВТ_ОборотыПоПериодам.ДоходыУСН, 0)) КАК ДоходыУСН,
	|	СУММА(ЕСТЬNULL(ВТ_ОборотыПоПериодам.ДоходыЕНВД, 0)) КАК ДоходыЕНВД,
	|	СУММА(ЕСТЬNULL(ВТ_ОборотыПоПериодам.ДоходыТорговыйСбор, 0)) КАК ДоходыТорговыйСбор
	|ИЗ
	|	ВТ_Периоды КАК ВТ_Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОборотыПоПериодам КАК ВТ_ОборотыПоПериодам
	|		ПО (ВТ_ОборотыПоПериодам.Период МЕЖДУ ВТ_Периоды.НачалоПериода И ВТ_Периоды.КонецПериода)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Периоды.КонецПериода
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период"
	;
	
	Если Периодичность = "Период" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"КОНЕЦПЕРИОДА(КУДиРОбороты.Период, Квартал) КАК Период,",
			"&КонецПериода КАК Период,");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Квартал", Строка(Периодичность));
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ПустаяТаблицаДвиженийПоРазделу4КУДиР()

	ТаблицаДвижений = Новый ТаблицаЗначений;

	ТаблицаДвижений.Колонки.Добавить("Период", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТаблицаДвижений.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаДвижений.Колонки.Добавить("ДокументРасхода", Документы.ТипВсеСсылки());
	ТаблицаДвижений.Колонки.Добавить("ДеятельностьНаТорговомСборе", Новый ОписаниеТипов("Булево"));
	ТаблицаДвижений.Колонки.Добавить("ДокументРасходаДата", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТаблицаДвижений.Колонки.Добавить("ПериодНачисления", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаДвижений.Колонки.Добавить("ПериодНачисленияПредставление", ОбщегоНазначения.ОписаниеТипаСтрока(20));
	ТаблицаДвижений.Колонки.Добавить("РеквизитыПервичногоДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаДвижений.Колонки.Добавить("ПФР", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаДвижений.Колонки.Добавить("ФОМС", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаДвижений.Колонки.Добавить("ФСС", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаДвижений.Колонки.Добавить("ФСС_НС", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаДвижений.Колонки.Добавить("Больничные", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаДвижений.Колонки.Добавить("ДобровольноеСтрахование", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	Возврат ТаблицаДвижений;
	
КонецФункции

Функция ВидыРасходовУменьшающихНалогПоСчетамУчета()

	СоответствиеСчетов = Новый Соответствие;
	УсловияОтбораСубсчетов = БухгалтерскийУчет.НовыеУсловияОтбораСубсчетов();
	УсловияОтбораСубсчетов.Забалансовый = Ложь;
	
	// ПФР
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПФР_страх);  // 69.02.1 (до 2014 года)
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПФР_нак);    // 69.02.2 (до 2014 года)
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПФР_ОПС);    // 69.02.7 (с 2014 года)
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПФР_ОПС_ИП); // 69.06.5 - страховые взносы ИП в ПФР
	
	СчетаПФР = БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(МассивСчетов, УсловияОтбораСубсчетов);
	
	Для каждого Счет Из СчетаПФР Цикл
		СоответствиеСчетов.Вставить(Счет, "ПФР");
	КонецЦикла;
	
	// ФОМС
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ФОМС);              // 69.03
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ФОМС_СтраховойГод); // 69.06.3
	
	СчетаФОМС = БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(МассивСчетов, УсловияОтбораСубсчетов);
	
	Для каждого Счет Из СчетаФОМС Цикл
		СоответствиеСчетов.Вставить(Счет, "ФОМС");
	КонецЦикла;
	
	// ФСС
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ФСС);               // 69.01
	
	СчетаФСС = БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(МассивСчетов, УсловияОтбораСубсчетов);
	
	Для каждого Счет Из СчетаФСС Цикл
		СоответствиеСчетов.Вставить(Счет, "ФСС");
	КонецЦикла;
	
	// ФСС_НС
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ФСС_НСиПЗ);         // 69.11
	
	СчетаФСС_НС = БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(МассивСчетов, УсловияОтбораСубсчетов);
	
	Для каждого Счет Из СчетаФСС_НС Цикл
		СоответствиеСчетов.Вставить(Счет, "ФСС_НС");
	КонецЦикла;
	
	// Больничные
	СоответствиеСчетов.Вставить(ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда, "Больничные");
	
	Возврат СоответствиеСчетов;

КонецФункции

Процедура СформироватьДвиженияКУДиРРаздел4(ТаблицаДвижений, ТаблицаРеквизитов, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыДвиженийКУДиРРаздел4(ТаблицаДвижений, ТаблицаРеквизитов);
	Если Параметры.Реквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Если Не Реквизиты.ПрименяетсяУСНДоходы Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.ТаблицаДвижений.Количество() > 0 Тогда
		
		Движения.КнигаУчетаДоходовИРасходовРаздел4.Записывать = Истина;
		
		Для каждого СтрокаЗаписи Из Параметры.ТаблицаДвижений Цикл
			
			Запись = Движения.КнигаУчетаДоходовИРасходовРаздел4.Добавить();
			
			ЗаполнитьЗначенияСвойств(Запись, СтрокаЗаписи);
			ЗаполнитьЗначенияСвойств(Запись, Реквизиты);
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыДвиженийКУДиРРаздел4(ТаблицаДвижений, ТаблицаРеквизитов)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"      // <Дата> - период движений - дата документа
		+ "Регистратор," // <ДокументСсылка> - документ-регистратор движений
		+ "Организация,"
		+ "ПрименяетсяУСНДоходы"; // <СправочникСсылка.Организации> - организация
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.ТаблицаДвижений
	
	СписокОбязательныхКолонок = ""
		+ "ДокументРасхода,"               // <ДокументСсылка> - документ-основание для отражения операции в КУДиР
		+ "ПериодНачисления,"              // <Дата> - дата периода начисления
		+ "ПериодНачисленияПредставление," // <Строка> - текстовое представление периода начисления
		+ "ДеятельностьНаТорговомСборе,"   // <Булево> - если Истина, расходы относятся к деятельности, облагаемой торговым сбором
		+ "РеквизитыПервичногоДокумента,"  // <Строка> - реквизиты (дата и номер) документа-основания для операции
		+ "ПФР,"                           // <Число, 15, 2> - сумма взносов в ПФР
		+ "ФОМС,"                          // <Число, 15, 2> - сумма взносов в ФОМС
		+ "ФСС,"                           // <Число, 15, 2> - сумма взносов в ФСС
		+ "ФСС_НС,"                        // <Число, 15, 2> - сумма взносов в ФСС от несчастных случаев и проф. заболеваний
		+ "Больничные,"                    // <Число, 15, 2> - сумма выплаченных больничных за счет работодтеля
		+ "ДобровольноеСтрахование";       // <Число, 15, 2> - сумма расходов на добровольное страхование
		
	Параметры.Вставить("ТаблицаДвижений", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаДвижений, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура ВыявитьУчетныеОшибкиРасходовУменьшающихНалогУСН(Ошибки, Период, Организация) Экспорт

	Если Не УчетнаяПолитика.ПрименяетсяУСНДоходы(Организация, Период) Тогда
		Возврат;
	КонецЕсли;

	Если Не ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация)
		И Не УчетЗарплаты.ИПИспользуетТрудНаемныхРаботников(Организация) Тогда
		// у ИП без работников взносы с ФОТ не уплачиваются, проверки не требуются
		// Ошибки уплаты фиксированных взносов уже выявлены в операции "Начисление страховых взносов ИП"
		Возврат;
	КонецЕсли;

	НачалоПериода = НачалоКвартала(Период);
	КонецПериода  = КонецКвартала(Период);

	ПроверитьПериодУплатыВзносовЗаРаботников(Ошибки, НачалоПериода, КонецПериода, Организация);

КонецПроцедуры

Процедура ПроверитьПериодУплатыВзносовЗаРаботников(Ошибки, НачалоПериода, КонецПериода, Организация)

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", Новый Граница(НачалоПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КонецПериода",  Новый Граница(КонецПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("СчетаВзносов",  СчетаУчетаВзносовСФОТ());
	Запрос.УстановитьПараметр("ВидыПлатежей",  Перечисления.ВидыПлатежейВГосБюджет.ВидыНалоговыхПлатежей());
	
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизации); // 50.01
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);   // 51
	УсловияОтбора = БухгалтерскийУчет.НовыеУсловияОтбораСубсчетов();
	УсловияОтбора.Забалансовый = Ложь;
	Запрос.УстановитьПараметр("СчетаУчетаДС",
		БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(МассивСчетов, УсловияОтбора));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.Регистратор КАК ДокументОплаты,
	|	ХозрасчетныйОборотыДтКт.СчетДт КАК СчетУчета
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Регистратор,
	|			СчетДт В (&СчетаВзносов),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
	|			СчетКт В (&СчетаУчетаДС),
	|			,
	|			Организация = &Организация
	|				И СубконтоДт1 В (&ВидыПлатежей)) КАК ХозрасчетныйОборотыДтКт
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОборотыДтКт.Регистратор) = ТИП(Документ.СписаниеСРасчетногоСчета)
	|					И ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.СписаниеСРасчетногоСчета).ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога)
	|				ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.СписаниеСРасчетногоСчета).НалоговыйПериод, ДЕНЬ) = ДАТАВРЕМЯ(1, 1, 1)
	|			КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОборотыДтКт.Регистратор) = ТИП(Документ.РасходныйКассовыйОрдер)
	|					И ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.РасходныйКассовыйОрдер).ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.УплатаНалога)
	|				ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.РасходныйКассовыйОрдер).НалоговыйПериод, ДЕНЬ) = ДАТАВРЕМЯ(1, 1, 1)
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Ошибка = ВыводСообщенийОбОшибках.ДобавитьПростоеОписаниеОшибки(Ошибки);
	Ошибка.Описание     = НСтр("ru = 'Не указан период, за который уплачивается страховой взнос.'");
	Ошибка.Рекомендация = НСтр("ru = 'Укажите период уплаты взноса.'");
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТекстОшибки = НСтр("ru = 'В документе [Документ] не указан период уплаты взноса'");
		
		ПараметрыСтроки = Новый Структура;
		ПараметрыСтроки.Вставить("Документ", Строка(Выборка.ДокументОплаты));
		
		МестоОшибки = Ошибка.ЛокализацияДетально.Добавить();
		МестоОшибки.Локализация = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстОшибки, ПараметрыСтроки);
		МестоОшибки.Ссылка      = Выборка.ДокументОплаты;
		
	КонецЦикла;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// НАЧИСЛЕНИЕ НАЛОГА (АВАНСОВОГО ПЛАТЕЖА ПО НАЛОГУ), УПЛАЧИВАЕМОГО ПРИ УСН

Функция ПодготовитьТаблицыНачисленияНалогаУСН(ТаблицаРеквизитов) Экспорт

	СтруктураТаблиц = Новый Структура();
	СтруктураТаблиц.Вставить("ТаблицаПроводок", Неопределено);
	СтруктураТаблиц.Вставить("ТаблицаСправкиРасчета", Неопределено);
	
	Параметры = ПодготовитьПараметрыТаблицыНачисленияНалогаУСН(ТаблицаРеквизитов);
	Если Параметры.Реквизиты.Количество() = 0 Тогда
		Возврат СтруктураТаблиц;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	Если НЕ Реквизиты.ПрименяетсяУСН Тогда
		Возврат СтруктураТаблиц;
	КонецЕсли;
	
	ТаблицаПроводок  = ПустаяТаблицаОтраженияНалогаУСН();
	ТаблицаСправкиРасчета = ПустаяТаблицаСправкаРасчетНалогаУСН();
	
	Если Реквизиты.ПрименяетсяУСНДоходы Тогда
		РассчитатьНалогУСНОбъектДоходы(Реквизиты, ТаблицаПроводок, ТаблицаСправкиРасчета);
	Иначе
		РассчитатьНалогУСНОбъектДоходыМинусРасходы(Реквизиты, ТаблицаПроводок, ТаблицаСправкиРасчета);
	КонецЕсли;
	
	СтруктураТаблиц.Вставить("ТаблицаПроводок", ТаблицаПроводок);
	СтруктураТаблиц.Вставить("ТаблицаСправкиРасчета", ТаблицаСправкиРасчета);
	
	Возврат СтруктураТаблиц;
	
КонецФункции

Функция ПодготовитьПараметрыТаблицыНачисленияНалогаУСН(ТаблицаРеквизитов)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"                           // <Дата> - период движений - дата документа
		+ "Регистратор,"                      // <ДокументСсылка.РегламентнаяОперация> - документ-регистратор движений
		+ "Организация,"                      // <СправочникСсылка.Организации> - организация
		+ "НачалоГода,"                       // <Дата> - дата начала года
		+ "КонДата,"                          // <Дата> - конец текущего квартала
		+ "СтавкаНалогаУСН,"                  // <Число, 5, 2> - налоговая ставка
		+ "ПрименяетсяУСН,"                   // <Булево> - признак применения УСН
		+ "ПрименяетсяУСНДоходы,"             // <Булево> - признак применения УСН с объектом налогообложения "Доходы"
		+ "ПрименяетсяУСНДоходыМинусРасходы," // <Булево> - признак применения УСН с объектом "Доходы минус расходы"
		+ "ПлательщикТорговогоСбораЗаПериод," // <Булево> - если Истина, организация уплачивает торговый сбор
		+ "ЭтоНачалоГода,"                    // <Булево> - признак, что текущее начисление первое в году
		+ "ЭтоКонецГода";                     // <Булево> - признак, что текущее начисление последнее в году
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

Процедура РассчитатьНалогУСНОбъектДоходы(Реквизиты, ТаблицаПроводок, ТаблицаСправкиРасчета)

	СчетНачисленияНалога = ПланыСчетов.Хозрасчетный.ЕНприУСН;             // Кт 68.12
	СчетОтраженияНалога  = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД; // Дт 99.01.1
	
	РазрядностьОкругленияПоказателей = РазрядностьОкругленияПоказателейПриРасчетеНалога(Реквизиты.Период);
	
	ИндивидуальныйПредприниматель = НЕ ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Реквизиты.Организация);
	
	ЕстьНаемныеРаботники = ?(ИндивидуальныйПредприниматель,
		УчетЗарплаты.ИПИспользуетТрудНаемныхРаботников(Реквизиты.Организация),
		Истина);
	
	УменьшатьНалогНаТорговыйСбор = Реквизиты.ПлательщикТорговогоСбораЗаПериод;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",          Реквизиты.Организация);
	Запрос.УстановитьПараметр("НачалоПериода",        Реквизиты.НачалоГода);
	Запрос.УстановитьПараметр("КонецПериода",         Реквизиты.КонДата);
	Запрос.УстановитьПараметр("ЕстьНаемныеРаботники", ЕстьНаемныеРаботники);
	
	Если НЕ Реквизиты.ЭтоНачалоГода Тогда
		
		Запрос.УстановитьПараметр("КонецПредыдущегоКвартала",
			Новый Граница(КонецКвартала(ДобавитьМесяц(Реквизиты.КонДата, -3)), ВидГраницы.Включая));
		
		ВидыПлатежейВБюджет = Новый Массив;
		ВидыПлатежейВБюджет.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Налог);
		ВидыПлатежейВБюджет.Добавить(Перечисления.ВидыПлатежейВГосБюджет.НалогАкт);
		ВидыПлатежейВБюджет.Добавить(Перечисления.ВидыПлатежейВГосБюджет.НалогСам);
		Запрос.УстановитьПараметр("ВидыПлатежейВГосБюджет", ВидыПлатежейВБюджет);
		
		Запрос.УстановитьПараметр("СчетНачисленияНалога", СчетНачисленияНалога);
		Запрос.УстановитьПараметр("СчетОтраженияНалога",  СчетОтраженияНалога);
		
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КнигаУчетаДоходовИРасходовОбороты.Графа5Оборот КАК Доходы,
	|	КнигаУчетаДоходовИРасходовОбороты.ДоходТорговыйСборОборот КАК ДоходыТорговыйСбор
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачалоПериода, &КонецПериода, , Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Раздел4Обороты.ПФРОборот + Раздел4Обороты.ФОМСОборот + ВЫБОР
	|		КОГДА &ЕстьНаемныеРаботники
	|			ТОГДА Раздел4Обороты.ФССОборот + Раздел4Обороты.ФСС_НСОборот + Раздел4Обороты.БольничныеОборот + Раздел4Обороты.ДобровольноеСтрахованиеОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РасходыУменьшающиеНалог,
	|	Раздел4Обороты.ДеятельностьНаТорговомСборе
	|ПОМЕСТИТЬ ВТ_Раздел4
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходовРаздел4.Обороты(&НачалоПериода, &КонецПериода, , Организация = &Организация) КАК Раздел4Обороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВТ_Раздел4.РасходыУменьшающиеНалог), 0) КАК РасходыУменьшающиеНалог
	|ИЗ
	|	ВТ_Раздел4 КАК ВТ_Раздел4
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВТ_Раздел4.РасходыУменьшающиеНалог), 0) КАК РасходыУменьшающиеНалог
	|ИЗ
	|	ВТ_Раздел4 КАК ВТ_Раздел4
	|ГДЕ
	|	ВТ_Раздел4.ДеятельностьНаТорговомСборе"
	;
	
	Если НЕ Реквизиты.ЭтоНачалоГода Тогда
		ТекстЗапроса = ТекстЗапроса
			+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета()
			+ "ВЫБРАТЬ
			|	ЕСТЬNULL(ХозрасчетныйОборотыДтКт.СуммаОборот, 0) КАК ИсчисленоЗаПредыдущиеПериоды
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
			|			&НачалоПериода,
			|			&КонецПредыдущегоКвартала,
			|			,
			|			СчетДт = &СчетОтраженияНалога,
			|			,
			|			СчетКт = &СчетНачисленияНалога,
			|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
			|			Организация = &Организация
			|				И СубконтоКт1 В (&ВидыПлатежейВГосБюджет)) КАК ХозрасчетныйОборотыДтКт"
			;
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.ВыполнитьПакет();
	
	// Расчет налога
	Доходы                       = 0;
	ДоходыТС                     = 0;
	РасходыУменьшающиеНалог      = 0;
	ИсчисленоЗаПредыдущиеПериоды = 0;
	МаксПроцентУменьшенияНалога  = ?(ЕстьНаемныеРаботники, 50, 100);
	
	ВыборкаНалоговаяБаза = Результат[0].Выбрать();
	Если ВыборкаНалоговаяБаза.Следующий() Тогда
		Доходы = ?(ЗначениеЗаполнено(ВыборкаНалоговаяБаза.Доходы), ВыборкаНалоговаяБаза.Доходы, 0);
		Доходы = Окр(Доходы, РазрядностьОкругленияПоказателей);
		
		ДоходыТС = ?(ЗначениеЗаполнено(ВыборкаНалоговаяБаза.ДоходыТорговыйСбор), ВыборкаНалоговаяБаза.ДоходыТорговыйСбор, 0);
		ДоходыТС = Окр(ДоходыТС, РазрядностьОкругленияПоказателей);
	КонецЕсли;
	
	ВыборкаУменьшениеНалога = Результат[2].Выбрать();
	Если ВыборкаУменьшениеНалога.Следующий() Тогда
		РасходыУменьшающиеНалог = Окр(ВыборкаУменьшениеНалога.РасходыУменьшающиеНалог, РазрядностьОкругленияПоказателей);
	КонецЕсли;
	
	Если НЕ Реквизиты.ЭтоНачалоГода Тогда
		ВыборкаПредыдущиеПериоды = Результат[4].Выбрать();
		Если ВыборкаПредыдущиеПериоды.Следующий() Тогда
			ИсчисленоЗаПредыдущиеПериоды = ВыборкаПредыдущиеПериоды.ИсчисленоЗаПредыдущиеПериоды;
		КонецЕсли;
	КонецЕсли;
	
	НалогСНачалаГодаВсего = Окр(Доходы * Реквизиты.СтавкаНалогаУСН / 100, РазрядностьОкругленияПоказателей);
	УменьшениеНалога = Мин(РасходыУменьшающиеНалог,
		Окр(НалогСНачалаГодаВсего * МаксПроцентУменьшенияНалога / 100, РазрядностьОкругленияПоказателей));
	НалогСначалаГодаИсчисленный = НалогСНачалаГодаВсего - УменьшениеНалога;
	
	ТорговыйСборУплаченоНачислено = 0;
	ТорговыйСборКВычету           = 0;
	
	// Рассчитаем налог отдельно по деятельности на торговом сборе, если она есть
	Если УменьшатьНалогНаТорговыйСбор И ДоходыТС > 0 Тогда
		РасходыУменьшающиеНалогТС = 0;
		
		ВыборкаУменьшениеНалогаТС = Результат[3].Выбрать();
		Если ВыборкаУменьшениеНалогаТС.Следующий() Тогда
			РасходыУменьшающиеНалогТС = Окр(ВыборкаУменьшениеНалогаТС.РасходыУменьшающиеНалог, РазрядностьОкругленияПоказателей);
		КонецЕсли;
		
		НалогТСВсего = Окр(ДоходыТС * Реквизиты.СтавкаНалогаУСН / 100, РазрядностьОкругленияПоказателей);
		УменьшениеНалогаТС = Мин(РасходыУменьшающиеНалогТС,
			Окр(НалогТСВсего * МаксПроцентУменьшенияНалога / 100, РазрядностьОкругленияПоказателей));
		
		НалогТСКУплате = НалогТСВсего - УменьшениеНалогаТС;
		
		РасчетыПоТС = СведенияОбУплатеТорговогоСбора(Реквизиты);
		
		// Уплаченный торговый сбор ограничиваем исчисленными суммами
		Если РасчетыПоТС.ТорговыйСборУплаченный > 0 Тогда
			ТорговыйСборУплаченоНачислено = Мин(РасчетыПоТС.ТорговыйСборУплаченный,
				РасчетыПоТС.ТорговыйСборУплаченный - (РасчетыПоТС.ПереплатаНаКонец - РасчетыПоТС.ПереплатаНаНачало));
			ТорговыйСборУплаченоНачислено = Окр(ТорговыйСборУплаченоНачислено, РазрядностьОкругленияПоказателей);
		КонецЕсли;
		
		ТорговыйСборКВычету = Мин(НалогТСКУплате, ТорговыйСборУплаченоНачислено);
		
		// Запись Справки-расчета в части налога по деятельности на торговом сборе
		СтрокаСправки = ТаблицаСправкиРасчета.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСправки, Реквизиты);
		
		СтрокаСправки.ПериодРасчета                = Реквизиты.Период;
		СтрокаСправки.ОбъектНалогообложения        = Перечисления.ОбъектыНалогообложенияПоУСН.Доходы;
		СтрокаСправки.ДеятельностьНаТорговомСборе  = Истина;
		СтрокаСправки.Доходы                       = ДоходыТС;
		СтрокаСправки.НалоговаяБаза                = ДоходыТС;
		СтрокаСправки.НалогВсего                   = НалогТСВсего;
		СтрокаСправки.РасходыУменьшающиеНалог      = РасходыУменьшающиеНалогТС;
		СтрокаСправки.ПроцентУменьшенияНалога      = МаксПроцентУменьшенияНалога;
		СтрокаСправки.УменьшениеНалогаФакт         = УменьшениеНалогаТС;
		СтрокаСправки.НалогИсчисленныйВсего        = НалогТСКУплате;
		СтрокаСправки.УплаченныйТорговыйСбор       = ТорговыйСборУплаченоНачислено;
		СтрокаСправки.ТорговыйСборУменьшающийНалог = ТорговыйСборКВычету;
		СтрокаСправки.АвансовыеПлатежи             = 0;
		СтрокаСправки.НалогКУплате                 = 0;
		
	КонецЕсли;
	
	ТорговыйСборВычитаемыйИзНалога = Мин(НалогСначалаГодаИсчисленный, ТорговыйСборКВычету);
	НалогСначалаГодаИсчисленный    = НалогСначалаГодаИсчисленный - ТорговыйСборВычитаемыйИзНалога;
	НалогКУплате = Окр(НалогСначалаГодаИсчисленный - ИсчисленоЗаПредыдущиеПериоды, 0);
	
	// Данные для проводки по начислению налога
	// (проводку формируем только при ненулевом налоге)
	Если НалогКУплате <> 0 Тогда
		
		СтрокаПроводки = ТаблицаПроводок.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПроводки, Реквизиты);
		
		СтрокаПроводки.СчетДт					= СчетОтраженияНалога;
		СтрокаПроводки.СчетКт					= СчетНачисленияНалога;
		СтрокаПроводки.ПрибылиИУбытки			= Перечисления.ПрибылиИУбытки.НалогНаПрибыль;
		СтрокаПроводки.ВидыПлатежейВГосБюджет	= Перечисления.ВидыПлатежейВГосБюджет.Налог;
		СтрокаПроводки.Сумма					= НалогКУплате;
		СтрокаПроводки.Содержание				= СодержаниеПроводкиНачислениеНалогаУСН(Реквизиты, НалогКУплате);
		
	КонецЕсли;
	
	// Запись справки-расчета по налогу
	СтрокаСправки = ТаблицаСправкиРасчета.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаСправки, Реквизиты);
	
	СтрокаСправки.ПериодРасчета                = Реквизиты.Период;
	СтрокаСправки.ОбъектНалогообложения        = Перечисления.ОбъектыНалогообложенияПоУСН.Доходы;
	СтрокаСправки.ДеятельностьНаТорговомСборе  = Ложь;
	СтрокаСправки.Доходы                       = Доходы;
	СтрокаСправки.НалоговаяБаза                = Доходы;
	СтрокаСправки.НалогВсего                   = НалогСНачалаГодаВсего;
	СтрокаСправки.РасходыУменьшающиеНалог      = РасходыУменьшающиеНалог;
	СтрокаСправки.ПроцентУменьшенияНалога      = МаксПроцентУменьшенияНалога;
	СтрокаСправки.УменьшениеНалогаФакт         = УменьшениеНалога;
	СтрокаСправки.УплаченныйТорговыйСбор       = ТорговыйСборУплаченоНачислено;
	СтрокаСправки.ТорговыйСборУменьшающийНалог = ТорговыйСборВычитаемыйИзНалога;
	СтрокаСправки.НалогИсчисленныйВсего        = НалогСначалаГодаИсчисленный;
	СтрокаСправки.АвансовыеПлатежи             = ИсчисленоЗаПредыдущиеПериоды;
	СтрокаСправки.НалогКУплате                 = НалогКУплате;
	
КонецПроцедуры

Процедура РассчитатьНалогУСНОбъектДоходыМинусРасходы(Реквизиты, ТаблицаПроводок, ТаблицаСправкаРасчет)
	
	СчетОтраженияНалога  = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД; // Дт 99.01.1
	СчетНачисленияНалога = ПланыСчетов.Хозрасчетный.ЕНприУСН;			  // Кт 68.12
	
	РазрядностьОкругленияПоказателей = РазрядностьОкругленияПоказателейПриРасчетеНалога(Реквизиты.Период);
	
	НалоговыеКаникулы = НЕ ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Реквизиты.Организация)
		И УчетнаяПолитика.НалоговыеКаникулыУСН(Реквизиты.Организация, Реквизиты.КонДата);
	
	Доходы						 = 0;
	Расходы						 = 0;
	ИсчисленоЗаПредыдущиеПериоды = 0;
	
	ПеренесенныеУбытки				 = 0;
	УбытокОтУплатыМинимальногоНалога = 0;
	УчтенныеУбытки					 = 0;
	
	МинимальныйНалог	= 0;
	ЭтоМинимальныйНалог = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Реквизиты.Организация);
	Запрос.УстановитьПараметр("НачалоПериода", Реквизиты.НачалоГода);
	Запрос.УстановитьПараметр("КонецПериода",  Реквизиты.КонДата);
	
	Если НЕ Реквизиты.ЭтоНачалоГода Тогда
		
		Запрос.УстановитьПараметр("КонецПредыдущегоКвартала",
			Новый Граница(КонецКвартала(ДобавитьМесяц(Реквизиты.КонДата, -3)), ВидГраницы.Включая));
		
		ВидыПлатежейВБюджет = Новый Массив;
		ВидыПлатежейВБюджет.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Налог);
		ВидыПлатежейВБюджет.Добавить(Перечисления.ВидыПлатежейВГосБюджет.НалогАкт);
		ВидыПлатежейВБюджет.Добавить(Перечисления.ВидыПлатежейВГосБюджет.НалогСам);
		Запрос.УстановитьПараметр("ВидыПлатежейВГосБюджет", ВидыПлатежейВБюджет);
		
		Запрос.УстановитьПараметр("СчетНачисленияНалога", СчетНачисленияНалога);
		Запрос.УстановитьПараметр("СчетОтраженияНалога",  СчетОтраженияНалога);
		
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	КнигаУчетаДоходовИРасходовОбороты.Графа5Оборот КАК Доходы,
	|	КнигаУчетаДоходовИРасходовОбороты.Графа7Оборот КАК Расходы
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачалоПериода, &КонецПериода, , Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОбороты"
	;
	
	Если НЕ Реквизиты.ЭтоНачалоГода Тогда 
		ТекстЗапроса = ТекстЗапроса
			+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета()
			+ "ВЫБРАТЬ
			|	ЕСТЬNULL(ХозрасчетныйОборотыДтКт.СуммаОборот, 0) КАК ИсчисленоЗаПредыдущиеПериоды
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
			|			&НачалоПериода,
			|			&КонецПредыдущегоКвартала,
			|			,
			|			СчетДт = &СчетОтраженияНалога,
			|			,
			|			СчетКт = &СчетНачисленияНалога,
			|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
			|			Организация = &Организация
			|				И СубконтоКт1 В (&ВидыПлатежейВГосБюджет)) КАК ХозрасчетныйОборотыДтКт"
		;
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.ВыполнитьПакет();
	
	// Перенесенные на текущий период убытки прошлых лет учитываются только при расчете налога по итогам года
	Если Реквизиты.ЭтоКонецГода Тогда
		Убытки = ПеренесенныеУбыткиПрошлыхЛет(Реквизиты.Организация, Реквизиты.НачалоГода, Реквизиты.КонДата);
		ПеренесенныеУбытки = Окр(Убытки.ПеренесенныеУбытки, РазрядностьОкругленияПоказателей);
		УбытокОтУплатыМинимальногоНалога = Убытки.УбытокОтУплатыМинимальногоНалога;
	КонецЕсли;
	
	// Расчет налога
	
	ВыборкаНалоговаяБаза = Результат[0].Выбрать();
	Если ВыборкаНалоговаяБаза.Следующий() Тогда
		
		Доходы  = ?(ЗначениеЗаполнено(ВыборкаНалоговаяБаза.Доходы), ВыборкаНалоговаяБаза.Доходы, 0);
		Доходы  = Окр(Доходы, РазрядностьОкругленияПоказателей);
		
		Расходы = ?(ЗначениеЗаполнено(ВыборкаНалоговаяБаза.Расходы), ВыборкаНалоговаяБаза.Расходы, 0);
		// Округление расходов производится после учета в их составе убытка от уплаты минимального налога
		
	КонецЕсли;
	
	Если НЕ Реквизиты.ЭтоНачалоГода Тогда
		ВыборкаПредыдущиеПериоды = Результат[1].Выбрать();
		Если ВыборкаПредыдущиеПериоды.Следующий() Тогда
			ИсчисленоЗаПредыдущиеПериоды = ВыборкаПредыдущиеПериоды.ИсчисленоЗаПредыдущиеПериоды;
		КонецЕсли;
	КонецЕсли;
	
	// Увеличиваем расходы на сумму разницы между уплаченным в прошлых периодах минимальным налогом и рассчитанным в общем порядке
	Расходы = Окр(Расходы + УбытокОтУплатыМинимальногоНалога, РазрядностьОкругленияПоказателей);
	
	НалоговаяБаза  = Макс(Доходы - Расходы, 0);
	Если Реквизиты.ЭтоКонецГода Тогда
		УчтенныеУбытки = Мин(НалоговаяБаза, ПеренесенныеУбытки);
		НалоговаяБаза  = НалоговаяБаза - УчтенныеУбытки;
		МинимальныйНалог = ?(НалоговыеКаникулы,
							0,                     // для ИП на налоговых каникулах минимальный налог не рассчитывается
							Окр(Доходы / 100, 0)); // 1% от доходов за год
	КонецЕсли;
	
	НалогСНачалаГода = Окр(НалоговаяБаза * Реквизиты.СтавкаНалогаУСН / 100, 0);
	НалогКУплате     = Окр(НалогСначалаГода - ИсчисленоЗаПредыдущиеПериоды, 0);
	
	// Если налог, рассчитанный в общем порядке по итогам года, меньше минимального налога
	// - требуется исчислить минимальный налог (1% от доходов).
	// Минимальный налог уменьшается на сумму исчисленных авансовых платежей за 9 месяцев (с учетом сумм "к уменьшению")
	// и уплачивается только в случае, если получившаяся разница положительная.
	Если Реквизиты.ЭтоКонецГода И МинимальныйНалог > НалогСНачалаГода Тогда
		НалогКУплате = Окр(МинимальныйНалог - ИсчисленоЗаПредыдущиеПериоды, 0);
		ЭтоМинимальныйНалог = НалогКУплате > 0;
	КонецЕсли;
	
	// Данные для проводки по начислению налога
	// (проводку формируем только при ненулевом налоге)
	Если НалогКУплате <> 0 Тогда
		
		СтрокаПроводки = ТаблицаПроводок.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПроводки, Реквизиты);
		
		СтрокаПроводки.СчетДт					= СчетОтраженияНалога;
		СтрокаПроводки.СчетКт					= СчетНачисленияНалога;
		СтрокаПроводки.ПрибылиИУбытки			= Перечисления.ПрибылиИУбытки.НалогНаПрибыль;
		СтрокаПроводки.ВидыПлатежейВГосБюджет	= Перечисления.ВидыПлатежейВГосБюджет.Налог;
		СтрокаПроводки.Сумма					= НалогКУплате;
		СтрокаПроводки.Содержание				= СодержаниеПроводкиНачислениеНалогаУСН(Реквизиты, НалогКУплате, ЭтоМинимальныйНалог);
		
	КонецЕсли;
	
	// Данные для справки-расчета
	СтрокаСправки = ТаблицаСправкаРасчет.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаСправки, Реквизиты);
	
	СтрокаСправки.ПериодРасчета			= Реквизиты.Период;
	СтрокаСправки.ОбъектНалогообложения	= Перечисления.ОбъектыНалогообложенияПоУСН.ДоходыМинусРасходы;
	СтрокаСправки.Доходы				= Доходы;
	СтрокаСправки.Расходы				= Расходы;
	СтрокаСправки.ПеренесенныеУбытки	= УчтенныеУбытки;
	СтрокаСправки.НалоговаяБаза			= НалоговаяБаза;
	СтрокаСправки.НалогВсего			= НалогСНачалаГода;
	СтрокаСправки.НалогИсчисленныйВсего	= НалогСНачалаГода;
	СтрокаСправки.МинимальныйНалог		= МинимальныйНалог;
	СтрокаСправки.АвансовыеПлатежи		= ИсчисленоЗаПредыдущиеПериоды;
	СтрокаСправки.НалогКУплате			= НалогКУплате;
	
КонецПроцедуры

Функция СведенияОбУплатеТорговогоСбора(Реквизиты)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сведения = Новый Структура;
	Сведения.Вставить("ПереплатаНаНачало",      0);
	Сведения.Вставить("ТорговыйСборУплаченный", 0);
	Сведения.Вставить("ПереплатаНаКонец",       0);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоГода(Реквизиты.Период));
	Запрос.УстановитьПараметр("КонецПериода",  КонецКвартала(Реквизиты.Период));
	Запрос.УстановитьПараметр("Организация",   Реквизиты.Организация);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстаток > 0
	|			ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПереплатаНаНачало,
	|	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт КАК ТорговыйСборУплаченный,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстаток > 0
	|			ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПереплатаНаКонец
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТорговыйСбор),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
	|			Организация = &Организация
	|				И Субконто1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог)) КАК ХозрасчетныйОстаткиИОбороты"
	;
	
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Сведения, Выборка);
	КонецЕсли;
	
	Возврат Сведения;
	
КонецФункции

Функция СведенияОбУплатеТорговогоСбораПоКварталамНарастающимИтогом(Организация, НачалоПериода, КонецПериода)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Приводим период к границам квартала
	НачальнаяДата = НачалоКвартала(НачалоПериода);
	КонечнаяДата  = КонецКвартала(КонецПериода);
	
	Периоды = Новый ТаблицаЗначений;
	Периоды.Колонки.Добавить("НомерКвартала", ОбщегоНазначения.ОписаниеТипаЧисло(1, 0, ДопустимыйЗнак.Неотрицательный));
	Периоды.Колонки.Добавить("Период",        ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	
	ТекущийПериод = НачальнаяДата;
	
	Пока ТекущийПериод < КонечнаяДата Цикл
		
		НоваяСтрока = Периоды.Добавить();
		НоваяСтрока.Период        = ТекущийПериод;
		НоваяСтрока.НомерКвартала = Цел((Месяц(ТекущийПериод) - 1) / 3 + 1);
		
		ТекущийПериод = ИнтерфейсыВзаимодействияБРОКлиентСервер.ДобавитьПериод(ТекущийПериод, Перечисления.Периодичность.Квартал);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("НачалоПериода",   НачальнаяДата);
	Запрос.УстановитьПараметр("КонецПериода",    КонечнаяДата);
	Запрос.УстановитьПараметр("Организация",     Организация);
	Запрос.УстановитьПараметр("ТаблицаПериодов", Периоды);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПериодов.Период КАК Период,
	|	ТаблицаПериодов.НомерКвартала
	|ПОМЕСТИТЬ ВТ_Периоды
	|ИЗ
	|	&ТаблицаПериодов КАК ТаблицаПериодов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ХозрасчетныйОстаткиИОбороты.Период, КВАРТАЛ) КАК Период,
	|	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт КАК ТорговыйСборУплачено,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстаток > 0
	|			ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПереплатаНаНачало,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстаток > 0
	|			ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПереплатаНаКонец
	|ПОМЕСТИТЬ ВТ_РасчетыПоТорговомуСбору
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Квартал,
	|			,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТорговыйСбор),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
	|			Организация = &Организация
	|				И Субконто1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог)) КАК ХозрасчетныйОстаткиИОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Периоды.Период,
	|	ВТ_Периоды.НомерКвартала КАК НомерКвартала,
	|	ЕСТЬNULL(ВТ_РасчетыПоТорговомуСбору.ТорговыйСборУплачено, 0) КАК ТорговыйСборУплачено,
	|	ЕСТЬNULL(ВТ_РасчетыПоТорговомуСбору.ПереплатаНаНачало, 0) КАК ПереплатаНаНачало,
	|	ЕСТЬNULL(ВТ_РасчетыПоТорговомуСбору.ПереплатаНаКонец, 0) КАК ПереплатаНаКонец
	|ИЗ
	|	ВТ_Периоды КАК ВТ_Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РасчетыПоТорговомуСбору КАК ВТ_РасчетыПоТорговомуСбору
	|		ПО ВТ_Периоды.Период = ВТ_РасчетыПоТорговомуСбору.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерКвартала"
	;
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	ТаблицаРезультат.Колонки.Добавить("УплаченоСНачалаГода");
	ТаблицаРезультат.Колонки.Добавить("НачисленоУплаченоСНачалаГода");
	
	УплаченоСНачалаГода = 0;
	НачальнаяПереплата  = 0;
	
	Для каждого СтрокаРезультат Из ТаблицаРезультат Цикл
		
		НачальнаяПереплата  = НачальнаяПереплата + ?(СтрокаРезультат.НомерКвартала = 1, СтрокаРезультат.ПереплатаНаНачало, 0);
		УплаченоСНачалаГода = УплаченоСНачалаГода + СтрокаРезультат.ТорговыйСборУплачено;
		КонечнаяПереплата   = СтрокаРезультат.ПереплатаНаКонец;
		
		СтрокаРезультат.УплаченоСНачалагода = УплаченоСНачалаГода;
		СтрокаРезультат.НачисленоУплаченоСНачалаГода = Мин(УплаченоСНачалаГода,
				УплаченоСНачалаГода - (КонечнаяПереплата - НачальнаяПереплата));
	
	КонецЦикла;
	
	ТаблицаРезультат.Колонки.Удалить("ПереплатаНаНачало");
	ТаблицаРезультат.Колонки.Удалить("ПереплатаНаКонец");
	
	Возврат ТаблицаРезультат;
	
КонецФункции

Функция ПустаяТаблицаОтраженияНалогаУСН()

	ПустаяТаблица = Новый ТаблицаЗначений;
	
	ПустаяТаблица.Колонки.Добавить("Период",
		ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ПустаяТаблица.Колонки.Добавить("Организация",            Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ПустаяТаблица.Колонки.Добавить("СчетДт",                 Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ПустаяТаблица.Колонки.Добавить("СчетКт",                 Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ПустаяТаблица.Колонки.Добавить("ПрибылиИУбытки",         Новый ОписаниеТипов("ПеречислениеСсылка.ПрибылиИУбытки"));
	ПустаяТаблица.Колонки.Добавить("ВидыПлатежейВГосБюджет", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПлатежейВГосБюджет"));
	ПустаяТаблица.Колонки.Добавить("Сумма",                  ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ПустаяТаблица.Колонки.Добавить("Содержание",             ОбщегоНазначения.ОписаниеТипаСтрока(150));
	
	Возврат ПустаяТаблица;

КонецФункции

Функция ПустаяТаблицаСправкаРасчетНалогаУСН()
	
	ТипСтандартнаяСумма                = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2);
	ТипСтандартнаяСуммаНеотрицательная = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2, ДопустимыйЗнак.Неотрицательный);
	
	ПустаяТаблица = Новый ТаблицаЗначений;
	
	ПустаяТаблица.Колонки.Добавить("ПериодРасчета", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ПустаяТаблица.Колонки.Добавить("Организация",   Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ПустаяТаблица.Колонки.Добавить("ОбъектНалогообложения",
		Новый ОписаниеТипов("ПеречислениеСсылка.ОбъектыНалогообложенияПоУСН"));
	ПустаяТаблица.Колонки.Добавить("ДеятельностьНаТорговомСборе", Новый ОписаниеТипов("Булево"));
	
	ПустаяТаблица.Колонки.Добавить("Доходы",                       ТипСтандартнаяСумма);
	ПустаяТаблица.Колонки.Добавить("Расходы",                      ТипСтандартнаяСумма);
	ПустаяТаблица.Колонки.Добавить("ПеренесенныеУбытки",           ТипСтандартнаяСуммаНеотрицательная);
	ПустаяТаблица.Колонки.Добавить("НалоговаяБаза",                ТипСтандартнаяСуммаНеотрицательная);
	ПустаяТаблица.Колонки.Добавить("СтавкаНалогаУСН",
		ОбщегоНазначения.ОписаниеТипаЧисло(5, 2, ДопустимыйЗнак.Неотрицательный));
	ПустаяТаблица.Колонки.Добавить("НалогВсего",                   ТипСтандартнаяСуммаНеотрицательная);
	ПустаяТаблица.Колонки.Добавить("РасходыУменьшающиеНалог",      ТипСтандартнаяСуммаНеотрицательная);
	ПустаяТаблица.Колонки.Добавить("УплаченныйТорговыйСбор",       ТипСтандартнаяСуммаНеотрицательная);
	ПустаяТаблица.Колонки.Добавить("ТорговыйСборУменьшающийНалог", ТипСтандартнаяСуммаНеотрицательная);
	ПустаяТаблица.Колонки.Добавить("ПроцентУменьшенияНалога",
		ОбщегоНазначения.ОписаниеТипаЧисло(3, 0, ДопустимыйЗнак.Неотрицательный));
	ПустаяТаблица.Колонки.Добавить("УменьшениеНалогаФакт",         ТипСтандартнаяСуммаНеотрицательная);
	ПустаяТаблица.Колонки.Добавить("НалогИсчисленныйВсего",        ТипСтандартнаяСуммаНеотрицательная);
	ПустаяТаблица.Колонки.Добавить("МинимальныйНалог",             ТипСтандартнаяСуммаНеотрицательная);
	ПустаяТаблица.Колонки.Добавить("АвансовыеПлатежи",             ТипСтандартнаяСуммаНеотрицательная);
	ПустаяТаблица.Колонки.Добавить("НалогКУплате",                 ТипСтандартнаяСумма);
	
	Возврат ПустаяТаблица;
	
КонецФункции

Функция СодержаниеПроводкиНачислениеНалогаУСН(Реквизиты, НалогКУплате = 0, ЭтоМинимальныйНалог = Ложь)
	
	Содержание = "";
	
	ПредставлениеПериода = ?(Реквизиты.ЭтоКонецГода,
		ПредставлениеПериода(Реквизиты.НачалоГода, Реквизиты.КонДата, "ФП=Истина"),
		ПредставлениеПериода(НачалоКвартала(Реквизиты.КонДата), Реквизиты.КонДата, "ФП=Истина"));
		
	Если НалогКУплате >= 0 Тогда
		Если Реквизиты.ЭтоКонецГода Тогда
			СтрВидНалога = ?(ЭтоМинимальныйНалог, НСтр("ru = ' минимальный'"), "");
			Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Начислен%1 налог, уплачиваемый в связи с применением УСН, за %2'"),
				СтрВидНалога,
				ПредставлениеПериода);
		Иначе
			Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Начислен авансовый платеж по налогу, уплачиваемому в связи с применением УСН, за %1'"),
				ПредставлениеПериода);
		КонецЕсли;
	Иначе
		СтрВидПлатежа = ?(Реквизиты.ЭтоКонецГода,
			НСтр("ru = 'Налог, уплачиваемый в связи с применением УСН,'"),
			НСтр("ru = 'Авансовый платеж по налогу, уплачиваемому в связи с применением УСН,'"));
		Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 к уменьшению за %2'"),
				СтрВидПлатежа,
				ПредставлениеПериода);
	КонецЕсли;
	
	Возврат Содержание;
	
КонецФункции

Процедура СформироватьДвиженияНачислениеНалогаУСН(ТаблицаПроводок, ТаблицаСправкиРасчета, ТаблицаРеквизитов, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыНачисленияНалогаУСН(ТаблицаПроводок, ТаблицаСправкиРасчета, ТаблицаРеквизитов);
	Если Параметры.Реквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];

	// проводка по начислению налога
	Для каждого СтрокаПроводки Из Параметры.Проводки Цикл
	
		Проводка = Движения.Хозрасчетный.Добавить();
		
		ЗаполнитьЗначенияСвойств(Проводка, СтрокаПроводки);
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПрибылиИУбытки", СтрокаПроводки.ПрибылиИУбытки);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ВидыПлатежейВГосБюджет", СтрокаПроводки.ВидыПлатежейВГосБюджет);
		
		Движения.Хозрасчетный.Записывать = Истина;
		
	КонецЦикла;
	
	// данные для справки-расчета
	ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(Движения, Параметры.СправкаРасчет, Параметры.Реквизиты, "РасчетНалогаУСН");
	
КонецПроцедуры

Функция ПодготовитьПараметрыНачисленияНалогаУСН(ТаблицаПроводок, ТаблицаСправкиРасчета, ТаблицаРеквизитов)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"								// <Дата> - период движений - дата документа
		+ "Регистратор,"						// <ДокументСсылка.РегламентнаяОперация> - документ-регистратор движений
		+ "Организация,"						// <СправочникСсылка.Организации> - организация
		+ "НачалоГода,"							// <Дата> - дата начала года
		+ "КонДата,"							// <Дата> - конец текущего квартала
		+ "СтавкаНалогаУСН,"					// <Число, 5, 2> - налоговая ставка
		+ "ПрименяетсяУСН,"						// <Булево> - признак применения УСН
		+ "ПрименяетсяУСНДоходы,"				// <Булево> - признак применения УСН с объектом налогообложения "Доходы"
		+ "ПрименяетсяУСНДоходыМинусРасходы";	// <Булево> - признак применения УСН с объектом "Доходы минус расходы"
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Проводки
	
	СписокОбязательныхКолонок = ""
		+ "Период,"					// <Дата> - период проводок - дата документа
		+ "Организация,"			// <СправочникСсылка.Организации> - организация
		+ "СчетДт,"					// <ПланСчетовСсылка.Хозрасчетный> - счет дебета
		+ "СчетКт,"					// <ПланСчетовСсылка.Хозрасчетный> - счет кредита
		+ "ПрибылиИУбытки,"			// <ПеречислениеСсылка.ПрибылиИУбытки> - субконто счета дебета
		+ "ВидыПлатежейВГосБюджет,"	// <ПеречислениеСсылка.ВидыПлатежейВГосБюджет> - субконто кредита
		+ "Сумма,"					// <Число, 15, 2> - сумма проводки
		+ "Содержание";				// <Строка, 150> - содержание проводки
		
	Параметры.Вставить("Проводки", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаПроводок, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.СправкаРасчет
	
	СписокОбязательныхКолонок = ""
		+ "ПериодРасчета,"                // <Дата> - период расчета (конец квартала)
		+ "Организация,"                  // <СправочникСсылка.Организации> - организация
		+ "ОбъектНалогообложения,"        // <ПеречислениеСсылка.ОбъектыНалогообложенияПоУСН> - объект налогообложения
		+ "ДеятельностьНаТорговомСборе,"  // <Булево> - если Ложь, запись по налогу УСН в целом; если Истина - запись по налогу от деятельности на торговом сборе
		+ "Доходы,"                       // <Число, 15, 2> - сумма доходов за период (с начала года)
		+ "Расходы,"                      // <Число, 15, 2> - сумма расходов за период (с начала года)
		+ "ПеренесенныеУбытки,"           // <Число, 15, 2> - сумма убытков, перенесенных на текущий налоговый период и уменьшающих налоговую базу
		+ "НалоговаяБаза,"                // <Число, 15, 2> - налоговая база с начала года
		+ "СтавкаНалогаУСН,"              // <Число,  5, 2> - ставка налога УСН
		+ "НалогВсего,"                   // <Число, 15, 2> - сумма налога, рассчитанного от налоговой базы и ставки с начала года
		+ "РасходыУменьшающиеНалог,"      // <Число, 15, 2> - сумма расходов по взносам, больничным и т.п., уменьшающих налог при УСН-доходы (с начала года)
		+ "ПроцентУменьшенияНалога,"      // <Число,  3, 0> - максимально допустимый процент уменьшения налога на расходы по взносам, больничным и т.п. при УСН-Доходы
		+ "УменьшениеНалогаФакт,"         // <Число, 15, 2> - сумма расходов по взносам, больничным и т.п., на которую фактически уменьшен налог (при УСН-доходы) с учетом процента ограничения
		+ "УплаченныйТорговыйСбор,"       // <Число, 15, 2> - сумма уплаченного в течение периода торгового сбора (в пределах исчисленного)
		+ "ТорговыйСборУменьшающийНалог," // <Число, 15, 2> - сумма торгового сбора, на которую можно уменьшить налог в дополнение к расходам по взносам, больничным и т.п.
		+ "НалогИсчисленныйВсего,"        // <Число, 15, 2> - сумма фактически исчисленного налога с начала года по текущий квартал включительно
		+ "МинимальныйНалог,"             // <Число, 15, 2> - сумма минимального налога (при УСН доходы-расходы) по итогам налогового периода
		+ "АвансовыеПлатежи,"             // <Число, 15, 2> - сумма исчисленных в предыдущих кварталах (с начала года) авансовых платежей по налогу
		+ "НалогКУплате";                 // <Число, 15, 2> - сумма налога (авансового платежа), начисленного к уплате в текущем периоде
		
	Параметры.Вставить("СправкаРасчет", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаСправкиРасчета, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// УПЛАТА НАЛОГА (АВАНСОВОГО ПЛАТЕЖА)

Функция ДанныеДляУплатыНалога(Организация, ПериодУплаты) Экспорт

	Перем Платежи;
	
	КонецПериода = КонецКвартала(ПериодУплаты);
	
	Если НЕ УчетнаяПолитика.ПрименяетсяУСН(Организация, КонецПериода) Тогда
		Возврат Платежи;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ГраницаОстатков", Новый Граница(КонецПериода, ВидГраницы.Включая));
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ХозрасчетныйОстатки.Счет КАК СчетУчета,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог) КАК Субконто1,
	|	ХозрасчетныйОстатки.СуммаОстатокКт КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ГраницаОстатков,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ЕНприУСН),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
	|			Организация = &Организация
	|				И Субконто1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог)) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.СуммаОстатокКт > 0"
	;

	ВыборкаОстатки = Запрос.Выполнить().Выбрать();
	Если ВыборкаОстатки.Следующий() Тогда
		// в результате запроса всегда либо 1 запись, либо 0
		Платежи = Обработки.ФормированиеПлатежныхПорученийНаУплатуНалогов.НоваяТаблицаПлатежей();
		НоваяСтрока = Платежи.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаОстатки);
		Обработки.ФормированиеПлатежныхПорученийНаУплатуНалогов.ЗаполнитьВидыНалогов(
			Платежи, Организация, КонецПериода);
	КонецЕсли;
	
	Возврат Платежи;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Параметры объекта для настройки отражения в УСН при программной обработке
//
Функция СтруктураПараметровОбъектаДляУСН(Объект) Экспорт

	ПараметрыУСН = УчетУСНКлиентСервер.ПараметрыНастройкиУСН();
	
	// общие параметры
	ПараметрыУСН.Вставить("ПрименениеУСН", УчетнаяПолитика.ПрименяетсяУСН(Объект.Организация, Объект.Дата));
	ПараметрыУСН.Вставить("ПрименениеУСНДоходы", УчетнаяПолитика.ПрименяетсяУСНДоходы(Объект.Организация, Объект.Дата));
	
	Если Не ПараметрыУСН.ПрименениеУСН Тогда
		Возврат ПараметрыУСН;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ПараметрыУСН, Объект);
	
	МетаданныеОбъекта = Объект.Метаданные();
	
	ПараметрыУСН.Вставить("ВалютаРегламентированногоУчета",
		ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	
	СтруктураКурса = Новый Структура("Курс, Кратность", 1, 1);
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВалютаДокумента", МетаданныеОбъекта) Тогда
		ПараметрыУСН.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		Если Объект.ВалютаДокумента <> ПараметрыУСН.ВалютаРегламентированногоУчета Тогда
			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		КонецЕсли;
	Иначе
		ПараметрыУСН.Вставить("ВалютаДокумента", ПараметрыУСН.ВалютаРегламентированногоУчета);
	КонецЕсли;

	ПараметрыУСН.КурсДокумента      = СтруктураКурса.Курс;
	ПараметрыУСН.КратностьДокумента = СтруктураКурса.Кратность;
	
	// специфичные параметры
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВидОперации", МетаданныеОбъекта) Тогда
		
		ПараметрыУСН.Вставить("ВидОперации", Объект.ВидОперации);
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка Тогда
			
			ПараметрыУСН.НТТПоПродажнымЦенам = Объект.ВыручкаСНТТ
				И (УчетнаяПолитика.СпособОценкиТоваровВРознице(Объект.Организация, Объект.Дата)
					= Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости);
			
			РозничнаяТорговляОблагаетсяЕНВД = УчетнаяПолитика.РозничнаяТорговляОблагаетсяЕНВД(Объект.Организация, Объект.Дата);
			СчетаДоходовРасходов = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаВНТТ(Объект.Организация, Объект.Контрагент, Объект.Дата,
				Новый Структура("РозничнаяТорговляОблагаетсяЕНВД", РозничнаяТорговляОблагаетсяЕНВД));
			
			ПараметрыУСН.НТТНаЕНВД = БухгалтерскийУчетПовтИсп.СчетОтноситсяКДеятельностиЕНВД(СчетаДоходовРасходов.СчетДоходовОтРеализации);
			
		КонецЕсли;
		
		// В банковских и кассовых документах договор контрагента хранится в ТЧ "РасшифровкаПлатежа"
		Если (ЕстьПрочиеРасчетыПоДоходам(Объект.ВидОперации)
			Или ЕстьПрочиеРасчетыПоРасходам(Объект.ВидОперации))
			И Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
		
			ПараметрыУСН.Вставить("ДоговорКонтрагента", Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента);
		
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПараметрыУСН;
	
КонецФункции

Функция СодержаниеУСНРедактируетсяПользователем(ДокументОбъект) Экспорт

	Результат = Ложь;
	
	// учтем возможное отсутствие нужных реквизитов
	ДанныеОбъекта = Новый Структура("ВидОперации, СчетУчетаРасчетовСКонтрагентом, СубконтоДт1");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ДокументОбъект);
	
	Если ДанныеОбъекта.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление
		ИЛИ ДанныеОбъекта.ВидОперации = Перечисления.ВидыОперацийПКО.ПрочийПриход
		ИЛИ ДанныеОбъекта.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание
		ИЛИ ДанныеОбъекта.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.КомиссияБанка
		ИЛИ ДанныеОбъекта.ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход Тогда
		
		Результат = Истина;
		
	ИначеЕсли (ДанныеОбъекта.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога
		ИЛИ ДанныеОбъекта.ВидОперации = Перечисления.ВидыОперацийРКО.УплатаНалога) Тогда
		
		Если ЗначениеЗаполнено(ДанныеОбъекта.СчетУчетаРасчетовСКонтрагентом) Тогда
			
			СчетНалога = ДанныеОбъекта.СчетУчетаРасчетовСКонтрагентом;
			
			СчетаНалоговИВзносов  = СчетаУчетаАвтоначисляемыхНалоговВключаемыхВРасходы();
			СчетаНалоговИзПрибыли = СчетаУчетаНалоговУменьшающихПрибыль();
			
			ЭтоНалогИлиВзнос  = СчетаНалоговИВзносов.Найти(СчетНалога) <> Неопределено;
			ЭтоНалогИзПрибыли = СчетаНалоговИзПрибыли.Найти(СчетНалога) <> Неопределено;
			
			НалогНачисленВручную = НЕ (ЭтоНалогИлиВзнос ИЛИ ЭтоНалогИзПрибыли);
			
			ЭтоНеНалог = Ложь;
			Если НЕ НалогНачисленВручную И ТипЗнч(ДанныеОбъекта.СубконтоДт1) = Тип("ПеречислениеСсылка.ВидыПлатежейВГосбюджет") Тогда
				ВидыНалоговыхПлатежей = Перечисления.ВидыПлатежейВГосБюджет.ВидыНалоговыхПлатежей();
				ЭтоНеНалог = ВидыНалоговыхПлатежей.Найти(ДанныеОбъекта.СубконтоДт1) = Неопределено;
			КонецЕсли;
			
			Результат = (НалогНачисленВручную ИЛИ ЭтоНеНалог);
			
		Иначе
			
			Результат = Истина;
			
		КонецЕсли;
	КонецЕсли; 
	
	Возврат Результат;

КонецФункции

Функция СуммаДохода(Организация, ДатаНачала, ДатаОкончания) Экспорт
	
	СуммаДохода = 0;
	
	Если Не УчетнаяПолитика.ПрименяетсяУСНЗаПериод(Организация, ДатаНачала, ДатаОкончания) Тогда
		Возврат СуммаДохода;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("ДатаНачала",    НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания", Новый Граница(КонецДня(ДатаОкончания), ВидГраницы.Включая));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КнигаУчетаДоходовИРасходовОбороты.Графа5Оборот КАК СуммаДохода
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&ДатаНачала, &ДатаОкончания, , Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОбороты";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СуммаДохода = Выборка.СуммаДохода;
	КонецЕсли;
	
	Возврат СуммаДохода;
	
КонецФункции

Функция ДатаНачалаАктуальногоПериодаДляПереходаНаУпрощеннуюНастройкуКУДиР() Экспорт 
	
	Возврат '20131001';
	
КонецФункции

Функция ПеренесенныеУбыткиПрошлыхЛет(Организация, НачалоПериода, КонецПериода) Экспорт

	СтруктураУбытков = Новый Структура("ПеренесенныеУбытки, УбытокОтУплатыМинимальногоНалога, Ссылка", 0, 0, Неопределено);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(РегистрацияСуммыУбыткаУСН.СуммаНеПеренесенныхУбытков) КАК СуммаНеПеренесенныхУбытков,
	|	РегистрацияСуммыУбыткаУСН.Ссылка
	|ПОМЕСТИТЬ НеперенесенныеУбытки
	|ИЗ
	|	Документ.РегистрацияСуммыУбыткаУСН.Убытки КАК РегистрацияСуммыУбыткаУСН
	|ГДЕ
	|	РегистрацияСуммыУбыткаУСН.Ссылка.Организация = &Организация
	|	И РегистрацияСуммыУбыткаУСН.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РегистрацияСуммыУбыткаУСН.Ссылка.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	РегистрацияСуммыУбыткаУСН.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(РегистрацияСуммыУбыткаУСН.УбытокОтУплатыМинимальногоНалога), 0) КАК УбытокОтУплатыМинимальногоНалога,
	|	ЕСТЬNULL(СУММА(НеперенесенныеУбытки.СуммаНеПеренесенныхУбытков), 0) КАК СуммаНеПеренесенныхУбытков,
	|	ЕСТЬNULL(РегистрацияСуммыУбыткаУСН.Ссылка, ЗНАЧЕНИЕ(Документ.РегистрацияСуммыУбыткаУСН.ПустаяСсылка)) КАК Ссылка
	|ИЗ
	|	НеперенесенныеУбытки КАК НеперенесенныеУбытки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РегистрацияСуммыУбыткаУСН КАК РегистрацияСуммыУбыткаУСН
	|		ПО НеперенесенныеУбытки.Ссылка = РегистрацияСуммыУбыткаУСН.Ссылка
	|СГРУППИРОВАТЬ ПО
	|	РегистрацияСуммыУбыткаУСН.Ссылка"
	;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураУбытков.ПеренесенныеУбытки               = Выборка.СуммаНеПеренесенныхУбытков;
		СтруктураУбытков.УбытокОтУплатыМинимальногоНалога = Выборка.УбытокОтУплатыМинимальногоНалога;
		СтруктураУбытков.Ссылка                           = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат СтруктураУбытков;

КонецФункции

Процедура ЗаполнитьПоступлениеНаРасчетныйСчет(Документ) Экспорт
	
	ПорядокОтраженияАванса = НалоговыйУчетУСН.ПорядокОтраженияАванса(Документ.Организация, Документ.Дата);
	
	Для Каждого СтрокаРасшифровки Из Документ.РасшифровкаПлатежа Цикл
		СтрокаРасшифровки.ПорядокОтраженияАванса = ПорядокОтраженияАванса;
	КонецЦикла;
	
	Если ЕстьАвансыПокупателей(Документ.ВидОперации) Тогда
		УстановитьПатентАванса(Документ);
	КонецЕсли;
	
	ПараметрыУСН = СтруктураПараметровОбъектаДляУСН(Документ);
	НалоговыйУчетУСН.ЗаполнитьОтражениеДокументаВУСН(Документ, ПараметрыУСН);
	Если СодержаниеУСНРедактируетсяПользователем(Документ) Тогда
		НалоговыйУчетУСН.ЗаполнитьОтображаемоеСодержаниеКУДиР(Документ, ПараметрыУСН);
	Иначе
		Содержание_УСН = НалоговыйУчетУСН.СодержаниеОперацииДляКУДиР(ПараметрыУСН);
		Документ.Содержание_УСН = Содержание_УСН;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСписаниеСРасчетногоСчета(Документ, ЗаполнитьСодержаниеУСН) Экспорт
	
	ПараметрыУСН = СтруктураПараметровОбъектаДляУСН(Документ);
	НалоговыйУчетУСН.ЗаполнитьОтражениеДокументаВУСН(Документ, ПараметрыУСН);
	Если ЗаполнитьСодержаниеУСН Тогда
		Если СодержаниеУСНРедактируетсяПользователем(Документ) Тогда
			НалоговыйУчетУСН.ЗаполнитьОтображаемоеСодержаниеКУДиР(Документ, ПараметрыУСН);
		Иначе
			Документ.Содержание_УСН = НалоговыйУчетУСН.СодержаниеОперацииДляКУДиР(ПараметрыУСН);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция РазрядностьОкругленияПоказателейПриРасчетеНалога(ДатаРасчета)

	// С 1 квартала 2015 года расчет налога при выполнении "Закрытия месяца" производится в соответствии с
	// порядком заполнения деларации по УСН, опубликованным 17 декабря 2014 г. (приказ ФНС РФ № ММВ-7-3/352@):
	// промежуточные показатели, влияющие на налог и на авансовые платежи, перед расчетом округляются до целых рублей.
	//
	// Алгоритм расчета, применявшийся в регламентной операции до конца 2014 г., не изменяется.
	
	Возврат ?(ДатаРасчета >= '20150101', 0, 2);

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// РАСЧЕТ РАСХОДОВ, УМЕНЬШАЮЩИХ НАЛОГ УСН (ФОРМИРОВАНИЕ IV РАЗДЕЛА КУДИР)

Функция ПодготовитьТаблицуДвиженийПоРазделу4КУДиР(ТаблицаРасходов, ТаблицаРеквизитов) Экспорт
	
	ТаблицаРаздел4КУДиР = ПустаяТаблицаДвиженийПоРазделу4КУДиР();
	
	Параметры = ПодготовитьПараметрыДвиженийПоРазделу4КУДиР(ТаблицаРеквизитов);
	Если Параметры.Реквизиты.Количество() = 0 Тогда
		Возврат ТаблицаРаздел4КУДиР;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Если Не Реквизиты.ПрименяетсяУСНДоходы Тогда
		Возврат ТаблицаРаздел4КУДиР;
	КонецЕсли;
	
	ВидыРасходовПоСчетам = ВидыРасходовУменьшающихНалогПоСчетамУчета();
	
	Для каждого СтрокаРасхода Из ТаблицаРасходов Цикл
			
		Если СтрокаРасхода.СуммаРасхода = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ВидРасхода = ВидыРасходовПоСчетам[СтрокаРасхода.СчетУчета];
		
		Если НЕ ЗначениеЗаполнено(ВидРасхода) Тогда
			// Расходы по данному счету учета не уменьшают налог УСН
			Продолжить;
		КонецЕсли;
		
		ЗаписьРаздела = ТаблицаРаздел4КУДиР.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьРаздела, СтрокаРасхода);
		
		ЗаписьРаздела[ВидРасхода] = СтрокаРасхода.СуммаРасхода;
		
		ФорматПериодаНачисления = "ДФ='MMMM yyyy'";
		
		Если Реквизиты.ЭтоИндивидуальныйПредприниматель
			И (ВидРасхода = "ПФР" Или ВидРасхода = "ФОМС")
			И УчетСтраховыхВзносовИП.ЭтоСчетУчетаСтраховыхВзносовИП(СтрокаРасхода.СчетУчета) Тогда
			
			ФорматПериодаНачисления = "ДФ='yyyy ''г.'''";
			
			// Переопределяем период начисления для корректного распределения по деятельности на торговом сборе.
			// Для взносов ИП за прошлый год период начисления - конец прошлого года.
			// Для взносов за текущий год - конец текущего квартала.
			ЗаписьРаздела.ПериодНачисления = Мин(КонецГода(СтрокаРасхода.ПериодНачисления), КонецКвартала(Реквизиты.Период));
			
		КонецЕсли;
		
		ЗаписьРаздела.ПериодНачисленияПредставление = Формат(СтрокаРасхода.ПериодНачисления, ФорматПериодаНачисления);
		
		ЗаписьРаздела.РеквизитыПервичногоДокумента =
			ПредставлениеДокументаРасхода(СтрокаРасхода.ПервичныйДокументНомер, СтрокаРасхода.ПервичныйДокументДата);
			
	КонецЦикла;
	
	// У плательщика торгового сбора расходы необходимо разделить между деятельностью на торговом сборе и остальной.
	РаспределитьРасходыПоДеятельностиНаТорговомСборе(ТаблицаРаздел4КУДиР, Реквизиты);
	
	// Приведем таблицу движений регистра в надлежащий для записи вид.
	ТаблицаРаздел4КУДиР.Свернуть("Период, Организация, ПериодНачисления, ПериодНачисленияПредставление,
							|ДеятельностьНаТорговомСборе, ДокументРасхода, ДокументРасходаДата, РеквизитыПервичногоДокумента",
							"ПФР, ФСС, ФОМС, ФСС_НС, Больничные, ДобровольноеСтрахование");
	
	ТаблицаРаздел4КУДиР.Сортировать(
		"ДокументРасходаДата, ДокументРасхода, ПериодНачисления, ДеятельностьНаТорговомСборе",
		Новый СравнениеЗначений);
		
	Возврат ТаблицаРаздел4КУДиР;
	
КонецФункции

Функция ПодготовитьПараметрыДвиженийПоРазделу4КУДиР(ТаблицаРеквизитов) 

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"                            // <Дата> - период движений - дата документа
		+ "Регистратор,"                       // <ДокументСсылка.РегламентнаяОперация> - документ-регистратор движений
		+ "Организация,"                       // <СправочникСсылка.Организации> - организация
		+ "ПрименяетсяУСНДоходы,"              // <Булево> - признак применения УСН с объектом налогообложения "Доходы"
		+ "ЭтоИндивидуальныйПредприниматель,"  // <Булево> - признак: организация является индивидуальным предпринимателем
		+ "ЭтоНачалоГода";                     // <Булево> - признак: текущий расчет первый в году
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

Функция ПредставлениеДокументаРасхода(НомерДокумента, ДатаДокумента)
	
	ПечНомер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(НомерДокумента, Истина, Истина);
	ПечДата  = Формат(ДатаДокумента, "ДФ=dd.MM.yyyy");
	
	ПредставлениеРезультат  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '№ %1 от %2'"), ПечНомер, ПечДата);
		
	Возврат ПредставлениеРезультат;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПОМОЩНИК РАСЧЕТА НАЛОГА УСН

// Возвращает описание действий Помощника по УСН
//
// Параметры:
//   Организация - СправочникСсылка.Организации
//   РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане
//   СпособОплаты - ПеречислениеСсылка.СпособыУплатыНалогов
//   Период - Дата - налоговый период
//   ТекстОшибки - Строка - возвращаемый параметр
//
// Возвращаемое значение:
//   Структура
//     * Декларация - Структура, Неопределено
//     * ПлатежПоДаннымДекларации - Структура, Неопределено
//
Функция ОписанияДействийПомощника(Организация, СпособОплаты, Период, ТекстОшибки = "") Экспорт
	
	РегистрацияВНалоговомОргане = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "РегистрацияВНалоговомОргане");
	
	ОписанияДействий = Новый Структура("Декларация, Платеж");
	
	Если УчетнаяПолитика.ПрименяетсяУСНДоходы(Организация, Период) Тогда
		ВидНалога = Перечисления.ВидыНалогов.УСН_Доходы;
	Иначе
		ВидНалога = Перечисления.ВидыНалогов.УСН_ДоходыМинусРасходы;
	КонецЕсли;
	
	Порядок = РегистрыСведений.ЗадачиБухгалтера.ПорядокПредоставленияОтчетаУплатыНалогаЗаПериод(
		Организация, ВидНалога, КонецКвартала(Период));
	
	Если Порядок <> Неопределено Тогда
		
		Если УчетнаяПолитика.ПрименяетсяУСН(Организация, Период) Тогда
			
			ОписанияДействий.Декларация = ОписаниеДействияДекларация(
				Организация, РегистрацияВНалоговомОргане, Порядок.Отчет);
				
			ОписанияДействий.Платеж = ОписаниеДействияПлатеж(
				Организация, РегистрацияВНалоговомОргане, Порядок.Уплата, СпособОплаты);
			
		Иначе
			ТекстОшибки = НСтр("ru = 'Организация не применяет УСН.'");
		КонецЕсли;
		
	Иначе
		
		ТекстОшибки = НСтр("ru = 'Порядок уплаты налога не определен'");
		
	КонецЕсли;
	
	Возврат ОписанияДействий;
	
КонецФункции

Функция ОписаниеДействияДекларация(Организация, РегистрацияВНалоговомОргане, ПорядокУплаты)
	
	Если ПорядокУплаты = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОписаниеДействия = ВыполнениеЗадачБухгалтера.ОписаниеДействияДекларация(
		ПорядокУплаты.Правило,
		ПорядокУплаты.ПериодСобытия,
		Организация,
		РегистрацияВНалоговомОргане);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияПлатеж(Организация, РегистрацияВНалоговомОргане, ПорядокУплаты, СпособОплаты)
	
	Если ПорядокУплаты = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если КонецКвартала(ПорядокУплаты.ПериодСобытия) = КонецГода(ПорядокУплаты.ПериодСобытия) Тогда
		// Платеж по итогам года
		
		ОписаниеДействия = ВыполнениеЗадачБухгалтера.ОписаниеДействияПлатежПоДаннымДекларации(
			Организация,
			РегистрацияВНалоговомОргане,
			СпособОплаты,
			ПорядокУплаты.Срок,
			ПорядокУплаты.Правило,
			ПорядокУплаты.ПериодСобытия,
			ПорядокУплаты.Наименование);
		
	Иначе
		// Авансовый платеж
		
		ОписаниеДействия = ВыполнениеЗадачБухгалтера.ОписаниеДействияАвансовыйПлатежУСН(
			Организация,
			РегистрацияВНалоговомОргане,
			СпособОплаты,
			ПорядокУплаты.Срок,
			ПорядокУплаты.Правило,
			ПорядокУплаты.ПериодСобытия,
			ПорядокУплаты.Наименование);
		
	КонецЕсли;
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ДоходыЗаПериодНеЗависятОтПоследовательности(Организация, НачалоПериода, КонецПериода) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Счета, движения по которым являются признаком возможных взаимозависимостей.
	СчетаУСН = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.УСНВспомогательныеСчета);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонтролируемыеСчета", СчетаУСН);
	Запрос.УстановитьПараметр("НачалоПериода",       НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",        КонецПериода);
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ХозрасчетныйОстаткиИОбороты.Организация
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, , , Счет В (&КонтролируемыеСчета), , Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты";
	
	НеоблагаемыеРасчетыОтсутствуют = Запрос.Выполнить().Пустой();
	
	Если НеоблагаемыеРасчетыОтсутствуют
		И Не УчетнаяПолитика.ТолькоОсновнаяСистемаНалогообложенияЗаПериод(Организация, НачалоПериода, КонецПериода) Тогда
		
		// Даже при явном отсутствии расчетов по необлагаемой деятельности (счета УСН.хх) возможен сценарий:
		// применялась только УСН, но вводились документы с отнесением выручки к особому порядку налогообложения;
		// затем "задним числом" добавили систему налогообложения ЕНВД или патент.
		//
		// В этом случае при перепроведении доходы могут перераспределиться между УСН и необлагаемой деятельностью.
		// Нужно проверить, что такие документы отсутствуют.
		
		СчетаВыручкиОсобыйПорядок = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ВыручкаЕНВД);
		Запрос.УстановитьПараметр("КонтролируемыеСчета", СчетаВыручкиОсобыйПорядок);
		НеоблагаемыеРасчетыОтсутствуют = Запрос.Выполнить().Пустой();
		
	КонецЕсли;
	
	Возврат НеоблагаемыеРасчетыОтсутствуют;
	
КонецФункции

#Область СчетаУчета

// Возвращает массив счетов учета налогов и взносов,
// расчет и отражение которых производится автоматически
Функция СчетаУчетаАвтоначисляемыхНалоговВключаемыхВРасходы() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ 
	|		(ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДФЛ),
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ЗемельныйНалог),
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТранспортныйНалог),
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НалогНаИмущество),
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТорговыйСбор),
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСНалоговогоАгента),
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСТаможенныйСоюзКУплате),
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоСоциальномуСтрахованию))
	|	И НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках"
	;

	ТаблицаСчетов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаСчетов.ВыгрузитьКолонку("Счет");
	
КонецФункции

// Возвращает массив счетов учета налогов, уменьшающих прибыль
Функция СчетаУчетаНалоговУменьшающихПрибыль()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ 
	|		(ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ЕНВД),
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ЕНприУСН))
	|	И НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках"
	;

	ТаблицаСчетов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаСчетов.ВыгрузитьКолонку("Счет");
	
КонецФункции

Функция СчетаУчетаВзносовСФОТ() Экспорт

	СчетаВзносов = Новый Массив;
	
	СчетаВзносов.Добавить(ПланыСчетов.Хозрасчетный.ПФР_страх); // 69.02.1 (до 2014 года)
	СчетаВзносов.Добавить(ПланыСчетов.Хозрасчетный.ПФР_нак);   // 69.02.2 (до 2014 года)
	СчетаВзносов.Добавить(ПланыСчетов.Хозрасчетный.ПФР_ОПС);   // 69.02.7 (с 2014 года)
	СчетаВзносов.Добавить(ПланыСчетов.Хозрасчетный.ФСС);       // 69.01
	СчетаВзносов.Добавить(ПланыСчетов.Хозрасчетный.ФСС_НСиПЗ); // 69.11
	СчетаВзносов.Добавить(ПланыСчетов.Хозрасчетный.ФОМС);      // 69.03.1
	
	УсловияОтбора = БухгалтерскийУчет.НовыеУсловияОтбораСубсчетов();
	УсловияОтбора.Забалансовый = Ложь;
	
	Возврат БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(СчетаВзносов, УсловияОтбора);
	
КонецФункции

Процедура ЗаполнитьУведомлениеОПереходеНаУСН(ПараметрыОтчета, Контейнер) Экспорт
	
	Организация = ПараметрыОтчета.Организация;
	ТекущийПериод    = ТекущаяДатаСеанса();
	ПредыдущийПериод = НачалоМесяца(ДобавитьМесяц(ТекущийПериод, -1));
	СледующийПериод  = НачалоГода(ДобавитьМесяц(ТекущийПериод,12));
	
	Контейнер.Вставить("ГОД_ПОДАЧИ_УВЕДОМЛЕНИЯ", Формат(ТекущийПериод,"ДФ=гггг"));
	
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, 
		"ОГРН,ДатаРегистрации,КодНалоговогоОргана");
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.ПараметрыЗаполнения)
		И ТипЗнч(ПараметрыОтчета.ПараметрыЗаполнения) = Тип("Структура")
		И ПараметрыОтчета.ПараметрыЗаполнения.Свойство("КОД_НО")
		И ЗначениеЗаполнено(ПараметрыОтчета.ПараметрыЗаполнения.КОД_НО) Тогда
		
		Контейнер.Вставить("КОД_НО", ПараметрыОтчета.ПараметрыЗаполнения.КОД_НО);
		
	ИначеЕсли ЗначениеЗаполнено(РеквизитыОрганизации.КодНалоговогоОргана) Тогда
		
		Контейнер.Вставить("КОД_НО", РеквизитыОрганизации.КодНалоговогоОргана);
		
	КонецЕсли;
	
	#Область ПризнакНалогоплательщика
	
	ПРИЗНАК_НП = "1"; // Первичная регистрация
	Если ЗначениеЗаполнено(РеквизитыОрганизации.ОГРН)
		ИЛИ ЗначениеЗаполнено(РеквизитыОрганизации.ДатаРегистрации) Тогда
		Если (УчетнаяПолитика.ПрименяетсяОсобыйПорядокНалогообложения(Организация, ПредыдущийПериод)
			И УчетнаяПолитика.ПлательщикЕНВД(Организация, ПредыдущийПериод))
			И НЕ УчетнаяПолитика.ПлательщикЕНВД(Организация, ТекущийПериод) Тогда
			ПРИЗНАК_НП = "2"; // Переход с ЕНВД
		Иначе
			ПРИЗНАК_НП = "3"; // Переход с других режимов
		КонецЕсли;
	КонецЕсли;
	
	Контейнер.Вставить("ПРИЗНАК_НП", ПРИЗНАК_НП);
	
	#КонецОбласти
	
	#Область ПорядокПерехода
	
	КОД_ПЕРЕХОДА = "";
	Если ПРИЗНАК_НП = "1" Тогда
		КОД_ПЕРЕХОДА = "2";
	ИначеЕсли ПРИЗНАК_НП = "2" Тогда
		КОД_ПЕРЕХОДА = "3";
		Контейнер.Вставить("ДАТА_ПЕРЕХОДА", НачалоМесяца(ТекущийПериод));
	ИначеЕсли ПРИЗНАК_НП = "3" Тогда
		КОД_ПЕРЕХОДА = "1";
		Контейнер.Вставить("ГОД_ПЕРЕХОДА_1", Формат(СледующийПериод,"ДФ=гггг"));
	КонецЕсли;
	
	Контейнер.Вставить("КОД_ПЕРЕХОДА", КОД_ПЕРЕХОДА);
	
	#КонецОбласти
	
	#Область ОбъектНалогообложения
	
	КОД_ОБЪЕКТА_НАЛОГООБЛОЖЕНИЯ = "";
	
	Если ПРИЗНАК_НП = "1" 
		ИЛИ ПРИЗНАК_НП = "2" Тогда
		ПериодДанных = ТекущийПериод;
	ИначеЕсли ПРИЗНАК_НП = "3" Тогда
		ПериодДанных = СледующийПериод;
	КонецЕсли;
	
	Если УчетнаяПолитика.ПрименяетсяУСНДоходы(Организация, ПериодДанных) Тогда
		КОД_ОБЪЕКТА_НАЛОГООБЛОЖЕНИЯ = "1";
	ИначеЕсли УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Организация, ПериодДанных) Тогда
		КОД_ОБЪЕКТА_НАЛОГООБЛОЖЕНИЯ = "2";
	КонецЕсли;
	
	Контейнер.Вставить("КОД_ОБЪЕКТА_НАЛОГООБЛОЖЕНИЯ", КОД_ОБЪЕКТА_НАЛОГООБЛОЖЕНИЯ);
	
	#КонецОбласти
	
КонецПроцедуры

#КонецОбласти
