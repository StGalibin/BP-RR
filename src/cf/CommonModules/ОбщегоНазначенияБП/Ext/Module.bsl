////////////////////////////////////////////////////////////////////////////////
// БАЗОВАЯ ФУНКЦИОНАЛЬНОСТЬ
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Установка варианта интерфейса "Такси" пользователю, выполняющему обновление на версию БП 3.0.51.
//
Процедура УстановкаПараметровСеанса(ИменаПараметровСеанса) Экспорт

	Если ИменаПараметровСеанса = Неопределено
		И НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		ВерсияКонфигурацииИБ = ОбновлениеИнформационнойБазы.ВерсияИБ(ИмяКонфигурацииБП());
		Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияКонфигурацииИБ, "3.0.51.14") < 0 Тогда
			НастройкиКлиента = ХранилищеСистемныхНастроек.Загрузить("Общее/НастройкиКлиентскогоПриложения");
			Если НастройкиКлиента = Неопределено Тогда
				НастройкиКлиента = Новый НастройкиКлиентскогоПриложения;
			КонецЕсли;
			НастройкиКлиента.ВариантИнтерфейсаКлиентскогоПриложения = ВариантИнтерфейсаКлиентскогоПриложения.Такси;
			ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиКлиентскогоПриложения", , НастройкиКлиента);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Возвращает структуру параметров, необходимых для работы клиентского кода
// при запуске конфигурации, т.е. в обработчиках событий
// - ПередНачаломРаботыСистемы,
// - ПриНачалеРаботыСистемы
//
// Важно: при запуске недопустимо использовать команды сброса кэша
// повторно используемых модулей, иначе запуск может привести
// к непредсказуемым ошибкам и лишним серверным вызовам
//
// Параметры:
//   Параметры - Структура - (возвращаемое значение) структура параметров работы клиента при запуске.
//
// Пример реализации:
//   Для установки параметров работы клиента можно использовать шаблон:
//
//     Параметры.Вставить(<ИмяПараметра>, <код получения значения параметра>);
//
//
Процедура ПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	НастройкиКлиента  = ХранилищеСистемныхНастроек.Загрузить("Общее/НастройкиКлиентскогоПриложения");
	ВариантИнтерфейса = ?(ТипЗнч(НастройкиКлиента) = Тип("НастройкиКлиентскогоПриложения"),
		НастройкиКлиента.ВариантИнтерфейсаКлиентскогоПриложения,
		ВариантИнтерфейсаКлиентскогоПриложения.Такси);
		
	// Помощник перехода с редации 2.0
	Обработки.ПомощникПереходаСРедакции20.ПараметрыРаботыКлиентаПриЗапуске(Параметры);
	
	// Информация о необходимости обновить конфигурацию
	Параметры.Вставить("ПоказатьПредложитьОбновитьВерсиюПрограммы", ПредлагатьОбновитьВерсиюПрограммы(Параметры));
	
	// Предложение включить основной интерфейс
	ВариантПредложения = Неопределено;
	Параметры.Вставить("ПоказатьВключитьОсновнойИнтерфейс",
		ПредлагатьВключитьОсновнойИнтерфейс(ВариантИнтерфейса, ВариантПредложения));
	Параметры.Вставить("ВариантПредложенияВключитьОсновнойИнтерфейс", ВариантПредложения);
	
	// Знакомство с редакцией 3.0
	ПоказатьЗнакомствоСРедакциейВ30 = ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных()
		И ОбновлениеСПредыдущейРедакции.ИнформационнаяБазаОбновленаС20()
		И ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НачалоРаботыВ30", "Показывать", Истина);
	
	ИмяОбработкиЗнакомствоСРедакциейВ30 = "";
	Если ПоказатьЗнакомствоСРедакциейВ30 Тогда
		
		ИмяОбработкиЗнакомствоСРедакциейВ30 = ?(
			ВариантИнтерфейса = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2,
			"НачинаемРаботатьВ30_82",
			"НачинаемРаботатьВ30");
			
		Если Не ПравоДоступа("Использование", Метаданные.Обработки[ИмяОбработкиЗнакомствоСРедакциейВ30]) Тогда
			ПоказатьЗнакомствоСРедакциейВ30 = Ложь;
		КонецЕсли;
	
	КонецЕсли;
	
	// Для сервиса регистрации используется специальный набор форм при открытии.
	Если ИспользуетсяСервисРегистрации() Тогда
		
		ПодготовитьСтруктуруНавигацииПомощника();
		
		ЭтоНачалоРаботы = ПолучитьФункциональнуюОпцию("НачалоРаботы");
		
		РегистрацияНеЗавершена = ЭтоНачалоРаботы
			Или ПолучитьФункциональнуюОпцию("РегистрацияНеЗавершена");
			
		РежимРаботы          = Обработки.НачалоРаботы.РежимРаботыВыборПользователя();
		ЗначенияРежимаРаботы = Обработки.НачалоРаботы.НовыйРежимРаботыПользователя();
		
		Если РежимРаботы = ЗначенияРежимаРаботы.БыстрыйСтарт Тогда
			// Если пользователь выбрал работу в программе, 
			// но не закончил этап Быстрый старт, то открываем его снова.
			Параметры.Вставить("ПоказыватьБыстрыйСтартПриРегистрации", ЭтоНачалоРаботы);
		ИначеЕсли РежимРаботы = ЗначенияРежимаРаботы.Регистрация
			Или РежимРаботы = ЗначенияРежимаРаботы.ВнесениеИзменений Тогда
			// Если пользователь выбрал регистрацию,
			// но не закончил её, то открываем помощник на последнем шаге.
			Параметры.Вставить("ОткрытьПомощникРегистрации", РегистрацияНеЗавершена);
			Параметры.Вставить("НавигацияНомерШага",         Обработки.РегистрацияОрганизации.НомерШагаПомощника());
		КонецЕсли;
		
	КонецЕсли;
	
	Параметры.Вставить("ПоказатьЗнакомствоСРедакциейВ30",     ПоказатьЗнакомствоСРедакциейВ30);
	Параметры.Вставить("ИмяОбработкиЗнакомствоСРедакциейВ30", ИмяОбработкиЗнакомствоСРедакциейВ30);
	
	// Начало работы в сервисе Бизнес-Старт и Предприниматель 2015
	ПоказатьНачалоРаботыПредпринимательВСервисе = 
		ПолучитьФункциональнуюОпцию("ПредпринимательВСервисе")
		И РольДоступна("ПолныеПрава")
		И ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НачалоРаботыПредпринимательВСервисе", "Показывать", Истина)
		И НЕ ПолучитьФункциональнуюОпцию("ИнтерфейсТаксиПростой")
		И НЕ Константы.НачалоРаботы.Получить();
	Параметры.Вставить("ПоказатьНачалоРаботыПредпринимательВСервисе", ПоказатьНачалоРаботыПредпринимательВСервисе);
	
	// Путеводитель по демо-базе
	ИмяОбработкиПутеводительПоДемоБазе = ИмяОбработкиПутеводительПоДемоБазе();
	ПоказатьПутеводительПоДемоБазе = ИмяОбработкиПутеводительПоДемоБазе <> Неопределено;
	Параметры.Вставить("ПоказатьПутеводительПоДемоБазе",     ПоказатьПутеводительПоДемоБазе);
	Параметры.Вставить("ИмяОбработкиПутеводительПоДемоБазе", ИмяОбработкиПутеводительПоДемоБазе);
	
	// Свертка базы (продолжение работы)
	Параметры.Вставить("ПоказатьСвертку", ТребуетсяОткрытьСверткуБазы());
	
	// Разрешение на открытие окон при запуске
	Параметры.Вставить("ОткрыватьДополнительныеОкнаПриЗапуске", ОткрыватьДополнительныеОкнаПриЗапуске());
	
	// Использование программы для учета компании, ведущей деятельность 
	Если ТарификацияБП.УстановитьРазрешенУчетРегулярнойДеятельности(Истина) Тогда
		Параметры.Вставить("ОбновитьИнтерфейс", Истина);
	КонецЕсли;
	Параметры.Вставить("РазрешенУчетРегулярнойДеятельности", ТарификацияБПВызовСервераПовтИсп.РазрешенУчетРегулярнойДеятельности());
	Если Не Параметры.РазрешенУчетРегулярнойДеятельности 
		И ПравоДоступа("Просмотр", Метаданные.Обработки.МониторНалоговИОтчетности) Тогда
		// В базе только разрешена сдача "нулевой" отчетности, показываем сразу монитор налогов и отчетов.
		Параметры.Вставить("ОткрытьМониторНалоговИОтчетности", Истина);
	КонецЕсли;
	
	// Сообщение об изменившихся реквизитах налоговой
	НастройкиСообщения = ХранилищеОбщихНастроек.Загрузить("СообщениеОСтарыхРеквизитахНалоговой", "");
	Параметры.Вставить("ПоказатьСообщениеОСтарыхРеквизитахНалоговой", НастройкиСообщения = Истина);
	
	// Сообщение об ошибке в декларации по налогу на прибыль 2016
	НастройкиСообщения = ХранилищеОбщихНастроек.Загрузить("СообщениеОбИсправленииКодаПериодаДекларации2016", "");
	Параметры.Вставить("ПоказатьСообщениеОбИсправленииКодаПериодаДекларации2016", НастройкиСообщения = Истина);
	
	УстановитьСведенияОРекомендуемойВерсииПлатформы(Параметры);
	
	УстановитьПараметрыНачалаРаботы(Параметры);
	
КонецПроцедуры

// Установка набора видимых подсистем командного интерфейса 
// и настроек всем пользователям вида интерфейса (Такси / в закладках).
//
// Параметры:
//  Режим - Строка - ИнтерфейсТакси / ИнтерфейсВерсии82 / ИнтерфейсВерсии77 - соответствует константе, которая будет установлена в Истину
//
Процедура УстановитьРежимКомандногоИнтерфейса(Режим) Экспорт
	
	Если НЕ ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	// Установка констант
	
	РежимТакси        = ВРег(Режим) = ВРег("ИнтерфейсТакси");
	РежимТаксиПростой = Врег(Режим) = ВРег("ИнтерфейсТаксиПростой");
	Режим82           = ВРег(Режим) = ВРег("ИнтерфейсВерсии82");
	Режим77           = ВРег(Режим) = ВРег("ИнтерфейсВерсии77");
	
	Если НЕ РежимТакси
		И НЕ Режим82
		И НЕ Режим77
		И НЕ РежимТаксиПростой Тогда
		Возврат;
	КонецЕсли;
	
	Если ДоступенПростойИнтерфейс()
		И (Режим82 ИЛИ Режим77) Тогда
		// Если доступен простой интерфейс, то переключаться
		// на режим 8.2 или 7.7 нельзя.
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	РежимСоответствуетТекущему = РежимТакси = Константы.ИнтерфейсТакси.Получить()
		И Режим82 = Константы.ИнтерфейсВерсии82.Получить()
		И Режим77 = Константы.ИнтерфейсВерсии82.Получить()
		И РежимТаксиПростой = Константы.ИнтерфейсТаксиПростой.Получить();
	
	Константы.ИнтерфейсТакси.Установить(РежимТакси);
	Константы.ИнтерфейсВерсии82.Установить(Режим82);
	Константы.ИнтерфейсВерсии77.Установить(Режим77);
	Константы.ИнтерфейсТаксиПростой.Установить(РежимТаксиПростой);
	
	УстановитьОпциюСтандартныйИнтерфейсВМоделиСервиса();
	
	Константы.ПредпринимательВСервисеСтандартныйИнтерфейс.Установить(
		Константы.ПредпринимательВСервисе.Получить()
		И НЕ Константы.ИнтерфейсТаксиПростой.Получить());
	
	ОтображатьПодсистемуУчетаЗарплатыИКадров = УчетЗарплаты.ИспользуетсяПодсистемаУчетаЗарплатыИКадров();
	
	Константы.ОтображатьПодсистемуСотрудникиИЗарплата82.Установить(ОтображатьПодсистемуУчетаЗарплатыИКадров И Режим82);
	Константы.ОтображатьПодсистемуЗарплатаИКадры.Установить(ОтображатьПодсистемуУчетаЗарплатыИКадров И РежимТакси);
	Константы.ОтображатьПодсистемуСотрудники.Установить(ОтображатьПодсистемуУчетаЗарплатыИКадров И РежимТаксиПростой);
	
	УстановитьОпциюВеденияУчетаПоОрганизациям();
	
	// Установка настроек по умолчанию всем пользователям
	
	ВсеПользователи = ПользователиИнформационнойБазы.ПолучитьПользователей();
	НовыйИнтерфейсПользователей = ?(РежимТакси ИЛИ РежимТаксиПростой, ВариантИнтерфейсаКлиентскогоПриложения.Такси, 
	ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2);
		
	Если ВсеПользователи.Количество() > 0 Тогда
		Для каждого ПользовательИБ Из ВсеПользователи Цикл
			УстановитьНачальныеНастройки = Истина;
			Если РежимСоответствуетТекущему Тогда
				// Не меняем настройки, если интерфейс пользователя и ранее соответствовал устанавливаемому.
				НастройкиКлиента = ХранилищеСистемныхНастроек.Загрузить("Общее/НастройкиКлиентскогоПриложения", , , ПользовательИБ.Имя);
				Если НастройкиКлиента <> Неопределено Тогда
					ТекущийИнтерфейсПользователя = НастройкиКлиента.ВариантИнтерфейсаКлиентскогоПриложения;
					УстановитьНачальныеНастройки = ТекущийИнтерфейсПользователя <> НовыйИнтерфейсПользователей;
				КонецЕсли;
			КонецЕсли;
			Если УстановитьНачальныеНастройки Тогда
				ПользователиСлужебный.УстановитьНачальныеНастройки(ПользовательИБ.Имя);
			КонецЕсли;
		КонецЦикла;
	Иначе
		УстановитьНачальныеНастройки = Истина;
		Если РежимСоответствуетТекущему Тогда
			// Не меняем настройки, если интерфейс пользователя и ранее соответствовал устанавливаемому.
			НастройкиКлиента = ХранилищеСистемныхНастроек.Загрузить("Общее/НастройкиКлиентскогоПриложения", , , "");
			Если НастройкиКлиента <> Неопределено Тогда
				ТекущийИнтерфейсПользователя = НастройкиКлиента.ВариантИнтерфейсаКлиентскогоПриложения;
				УстановитьНачальныеНастройки = ТекущийИнтерфейсПользователя <> НовыйИнтерфейсПользователей;
			КонецЕсли;
		КонецЕсли;
		Если УстановитьНачальныеНастройки Тогда
			ПользователиСлужебный.УстановитьНачальныеНастройки("");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция ЭтоБазоваяВерсияКонфигурации() Экспорт
	Возврат СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации();
КонецФункции

Функция ЭтоКОРПВерсияКонфигурации() Экспорт
	Возврат СтрНайти(ВРег(ИмяКонфигурацииБП()), "КОРП") > 0;
КонецФункции

Функция ЭтоПрофВерсияКонфигурации() Экспорт
	Возврат НЕ (ЭтоБазоваяВерсияКонфигурации() ИЛИ ЭтоКОРПВерсияКонфигурации());
КонецФункции

Функция ИмяКонфигурацииБП() Экспорт
	
	ИмяКонфигурации = Метаданные.Имя;
	ОбщегоНазначенияБППереопределяемый.УстановитьИмяКонфигурацииБП(ИмяКонфигурации);
	Возврат ИмяКонфигурации;
	
КонецФункции

// Возвращает имя источника для обменов данными с другими программами.
//
Функция ИмяКонфигурацииИсточника() Экспорт
	
	Возврат "БухгалтерияПредприятия";
	
КонецФункции

// Подтверждает, что переданная организация входит в список доступных для пользователя.
//
// Параметры:
//  Организация  - СправочникСсылка.Организации - проверяемая организация. Может быть пустым значением.
//  ВключатьОбособленныеПодразделения - Булево - признак добавления в список доступных обособленных подразделений.
//	ПравоНаИзменение - Булево - Истина, если список будет использоваться в алгоритмах изменения данных.
//
// Возвращаемое значение:
//   Массив      - список из всех доступных, если было передано пустое значение;
//               - список из Организация и её доступных обособленных подразделений;
//               - пустой список, если организация недоступна для пользователя.
//
Функция СписокДоступныхОрганизаций(Организация, ВключатьОбособленныеПодразделения = Ложь, ПравоНаИзменение = Ложь) Экспорт
	
	ДоступныеОрганизации = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(ПравоНаИзменение);
	
	Если ЗначениеЗаполнено(Организация) Тогда // проверяем конкретную организацию
		
		Если ВключатьОбособленныеПодразделения
		   И ПолучитьФункциональнуюОпцию("ВестиУчетПоПодразделениям") Тогда
			
			СписокОбособленныхПодразделений = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьСписокОбособленныхПодразделений(Организация);
			ОбособленныеПодразделения = СписокОбособленныхПодразделений.ВыгрузитьЗначения();
			НедоступныеОрганизации = ОбщегоНазначенияКлиентСервер.СократитьМассив(ОбособленныеПодразделения, ДоступныеОрганизации);
			СписокОрганизаций = ОбщегоНазначенияКлиентСервер.СократитьМассив(ОбособленныеПодразделения, НедоступныеОрганизации);
			
		Иначе
			
			СписокОрганизаций = Новый Массив;
			
		КонецЕсли;
		
		Если ДоступныеОрганизации.Найти(Организация) <> Неопределено
		   И СписокОрганизаций.Найти(Организация) = Неопределено Тогда
			СписокОрганизаций.Вставить(0, Организация);
		КонецЕсли;
		
		ДоступныеОрганизации = СписокОрганизаций;
		
	КонецЕсли;
	
	Возврат ДоступныеОрганизации;
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕРКИ НЕОБХОДИМОСТИ ВЫПОЛНЕНИЯ ДЕЙСТВИЙ ПРИ ЗАПУСКЕ

Функция ПредлагатьВключитьОсновнойИнтерфейс(ВариантИнтерфейса, ВариантПредложения)

	Если НЕ ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Интерфейс77 = Константы.ИнтерфейсВерсии77.Получить();
	Интерфейс82 = Константы.ИнтерфейсВерсии82.Получить();
	
	Если НЕ Интерфейс77 И НЕ Интерфейс82 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДатаСменыИнтерфейса = ХранилищеОбщихНастроек.Загрузить(ВРег("ДатаСменыИнтерфейса"));
	Если ЗначениеЗаполнено(ДатаСменыИнтерфейса) 
		И ТипЗнч(ДатаСменыИнтерфейса) = Тип("Дата") 
		И НачалоДня(ТекущаяДатаСеанса()) >= НачалоДня(ДатаСменыИнтерфейса) Тогда
		ДнейСПоследнегоПоказа = (НачалоДня(ТекущаяДатаСеанса()) - НачалоДня(ДатаСменыИнтерфейса)) / (60*60*24);
	Иначе
		ДнейСПоследнегоПоказа = 99999;
	КонецЕсли; 
	
	НадоПредлагать = (Интерфейс77 ИЛИ Интерфейс82) И ДнейСПоследнегоПоказа >= 7;
	
	Если НадоПредлагать Тогда
		 ВариантПредложения = ?(ВариантИнтерфейса = ВариантИнтерфейсаКлиентскогоПриложения.Такси, 
		 	"ИзменитьКомандныйИнтерфейс", "ВключитьСтандартныйИнтерфейс");
	КонецЕсли;
	
	Возврат НадоПредлагать;

КонецФункции

Функция ПредлагатьОбновитьВерсиюПрограммы(Параметры)
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Параметры.Вставить("ЭтоАдминистраторСистемы", ОбщегоНазначенияПовтИсп.РежимРаботыПрограммы().ЭтоАдминистраторСистемы);
	ДатаТекущейВерсии = Константы.ДатаТекущейВерсии.Получить();
	НадоПредлагать = ЗначениеЗаполнено(ДатаТекущейВерсии) 
		И ТекущаяДатаСеанса() > ДобавитьМесяц(ДатаТекущейВерсии, 2);
	Возврат НадоПредлагать;
	
КонецФункции

// Возвращает имя внешней обработки путеводителя по демо-базе или пустое значение, если путеводитель запускать не требуется
// 
Функция ИмяОбработкиПутеводительПоДемоБазе()
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если Не ПравоДоступа("Чтение", Метаданные.Справочники.ДополнительныеОтчетыИОбработки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПоказыватьПриСтарте = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ПутеводительПоДемоБазе", "Показывать", Истина);
	
	Если НЕ ПоказыватьПриСтарте Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ВнешниеОбработки.Ссылка
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки КАК ВнешниеОбработки
	|ГДЕ
	|	ВнешниеОбработки.ИмяОбъекта = &ИмяОбъекта";
	
	Запрос.УстановитьПараметр("ИмяОбъекта", "ПутеводительПоДемонстрационнойБазе");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат ДополнительныеОтчетыИОбработки.ПодключитьВнешнююОбработку(Выборка.Ссылка);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает значение: требуется ли запускать обработку "Свертка информационной базы" или нет.
// 
Функция ТребуетсяОткрытьСверткуБазы()
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не РольДоступна("ПолныеПрава") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗначениеХранилища = Константы.СтатусСверткиИнформационнойБазы.Получить();
	
	ПоказыватьПриСтарте	= Ложь;
	
	Если ЗначениеХранилища <> Неопределено Тогда
		Статус = ЗначениеХранилища.Получить();
		Если Статус <> Неопределено Тогда
			ПоказыватьПриСтарте	= Статус.ПоказыватьПриСтарте;
		КонецЕсли;
	Иначе
		ПоказыватьПриСтарте	= Ложь;
	КонецЕсли;
	
	Возврат ПоказыватьПриСтарте;
	
КонецФункции

Функция ОткрыватьДополнительныеОкнаПриЗапуске() Экспорт
	
	Если Не ПравоДоступа("Чтение", Метаданные.Справочники.Организации) Тогда
		// Дополнительные окна предназначены только для регулярных пользователей
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Организация.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организация";
	
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура УстановитьСведенияОРекомендуемойВерсииПлатформы(Параметры)
	
	КонфигурацияМоделиСервиса = ОбщегоНазначенияПовтИсп.РазделениеВключено()
		Или ПолучитьФункциональнуюОпцию("РаботаВАвтономномРежиме");
	
	Если КонфигурацияМоделиСервиса Тогда
		Возврат;
	КонецЕсли;
	
	Если Пользователи.ЭтоПолноправныйПользователь(,Истина) Тогда
		
		РекомендуемаяВерсия = "8.3.8";
		РекомендуемаяВерсияДляПроверки = "8.3.8.0";
		
		СистемнаяИнформация = Новый СистемнаяИнформация;
		СообщитьОРекомендуемойВерсииПлатформы =
				ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, РекомендуемаяВерсияДляПроверки) < 0;
		
		Если СообщитьОРекомендуемойВерсииПлатформы Тогда
			Параметры.Вставить("СообщитьОРекомендуемойВерсииПлатформы", Ложь);
			Параметры.Вставить("РекомендуемаяВерсияПлатформы", РекомендуемаяВерсия);
			Параметры.Вставить("ТекстСообщенияОРекомендуемойВерсииПлатформы",
					НСтр("ru='Для работы с версией 3.0.44 конфигурации ""Бухгалтерии предприятия"" необходимо использовать версию платформы 8.3.8'"));
						
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПараметрыНачалаРаботы(Параметры)
	
	ПоказыватьБыстрыйСтарт = ПолучитьФункциональнуюОпцию("НачалоРаботы") 
		И ОбщегоНазначенияБПВызовСервера.ПроверитьНаличиеДоступныхОрганизаций();
		
	Параметры.Вставить("ПоказыватьБыстрыйСтарт", ПоказыватьБыстрыйСтарт);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕРКИ НАЛИЧИЯ И ЗАПОЛНЕНИЯ РЕВИЗИТОВ

// Позволяет определить есть ли табличная часть документа с переданным именем.
//
// Параметры:
//  ИмяТабЧасти - строковое имя искомой табличной части,
//  МетаданныеДокумента - объект описания метаданных документа, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция ЕстьТабЧастьДокумента(ИмяТабЧасти, МетаданныеДокумента) Экспорт

	Возврат НЕ (МетаданныеДокумента.ТабличныеЧасти.Найти(ИмяТабЧасти) = Неопределено);
	
КонецФункции // ЕстьТабЧастьДокумента()

// Позволяет определить есть ли среди реквизитов табличной части документа
// реквизит с переданным именем.
//
// Параметры:
//  ИмяРеквизита - строковое имя искомого реквизита,
//  МетаданныеДокумента - объект описания метаданных документа, среди реквизитов которого производится поиск.
//  ИмяТабЧасти  - строковое имя табличной части документа, среди реквизитов которого производится поиск
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция ЕстьРеквизитТабЧастиДокумента(ИмяРеквизита, МетаданныеДокумента, ИмяТабЧасти) Экспорт

	ТабЧасть = МетаданныеДокумента.ТабличныеЧасти.Найти(ИмяТабЧасти);

	Если ТабЧасть = Неопределено Тогда // Нет такой таб. части в документе
		Возврат Ложь;

	Иначе
		Возврат НЕ (ТабЧасть.Реквизиты.Найти(ИмяРеквизита) = Неопределено);

	КонецЕсли;

КонецФункции // ЕстьРеквизитТабЧастиДокумента()

// Позволяет определить заполнен ли реквизит в документе.
//
// Параметры:
//  ИмяРеквизита - Строка - Строковое имя искомого реквизита.
//  ДокументОбъект - ДокументОбъект - Объект, в котором проверяется заполненность реквизита.
//  МетаданныеДокумента - Метаданные - Объект описания метаданных документа, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Булево.
//
Функция ЕстьНезаполненныйРеквизитДокумента(ИмяРеквизита, ДокументОбъект, МетаданныеДокумента) Экспорт

	Результат =
		ОбщегоНазначения.ЕстьРеквизитОбъекта(ИмяРеквизита, МетаданныеДокумента)
		И НЕ ЗначениеЗаполнено(ДокументОбъект[ИмяРеквизита]);

	Возврат Результат;

КонецФункции

Функция ЕстьНезаполненныйРеквизитТабЧастиДокумента(ИмяРеквизита, СтрокаТабЧасти, МетаданныеДокумента, ИмяТабЧасти) Экспорт

	Результат =
		ЕстьРеквизитТабЧастиДокумента(ИмяРеквизита, МетаданныеДокумента, ИмяТабЧасти)
	   И НЕ ЗначениеЗаполнено(СтрокаТабЧасти[ИмяРеквизита]);

	Возврат Результат;

КонецФункции

// Удаляет из списка проверяемых реквизитов табличные части, если хотя бы одна из них заполнена
//
// Параметры:
//  Объект - ДокументОбъект, СправочникОбъект - объект с табличными частями
//  ИменаТабличныхЧастей - Массив, Строка - Перечень имен проверяемых табличных частей
//  ПроверяемыеРеквизиты - Массив - Перечень проверяемых реквизитов
Процедура ИсключитьИзПроверкиОсновныеТабличныеЧасти(Объект, Знач ИменаТабличныхЧастей, ПроверяемыеРеквизиты) Экспорт
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если ТипЗнч(ИменаТабличныхЧастей) = Тип("Строка") Тогда
		ИменаТабличныхЧастей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаТабличныхЧастей);
	КонецЕсли;
	
	ЕстьЗаписи = Ложь;
	Для Каждого ИмяТабличнойЧасти Из ИменаТабличныхЧастей Цикл
		
		Если Объект[СокрЛП(ИмяТабличнойЧасти)].Количество() > 0 Тогда
			ЕстьЗаписи = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьЗаписи Тогда
		Для Каждого ИмяТабличнойЧасти Из ИменаТабличныхЧастей Цикл
			МассивНепроверяемыхРеквизитов.Добавить(СокрЛП(ИмяТабличнойЧасти));
		КонецЦикла;
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

// Удаляет из списка проверяемых реквизитов неиспользуемые табличные части и все их реквизиты
//
// Параметры:
//  ПроверяемыеРеквизиты - Массив - Перечень проверяемых реквизитов
//  НеИспользуемыеТабличныеЧасти - Массив - Перечень имен неиспользуемых табличных частей
Процедура ИсключитьИзПроверкиНеиспользуемыеТабличныеЧасти(ПроверяемыеРеквизиты, НеИспользуемыеТабличныеЧасти) Экспорт
	
	// Исключим из проверки сами списки
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НеИспользуемыеТабличныеЧасти);
	
	// Исключим из проверки колонки списков
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Для Каждого ИмяТабличнойЧасти Из НеИспользуемыеТабличныеЧасти Цикл
		ПрефиксРеквизита = ИмяТабличнойЧасти + ".";
		ДлинаПрефикса = СтрДлина(ПрефиксРеквизита);
		Для Каждого ПроверяемыйРеквизит Из ПроверяемыеРеквизиты Цикл
			Если СтрДлина(ПроверяемыйРеквизит) > ДлинаПрефикса 
			   И Лев(ПроверяемыйРеквизит, ДлинаПрефикса) = ПрефиксРеквизита Тогда
			   МассивНепроверяемыхРеквизитов.Добавить(ПроверяемыйРеквизит);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ОчиститьНеиспользуемыеТабличныеЧасти(Объект, ИменаТабличныхЧастей) Экспорт
	
	Для Каждого ИмяТабличнойЧасти Из ИменаТабличныхЧастей Цикл
		
		ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
		
		Если ТабличнаяЧасть.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТабличнаяЧасть.Очистить();
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает значение второго параметра в случае, если значение первого параметра NULL.
// В противном случае будет возвращено значение первого параметра
//
// Параметры:
//  ПроверяемоеЗначение  - произвольный тип - проверяемое значение
//  ВозвращаемоеЗначение - произвольный тип - возвращаемое значение, если значение ПроверяемоеЗначение есть NULL
//
// Возвращаемое значение:
//  ПроверяемоеЗначение - если его значение не NULL, ВозвращаемоеЗначение - в ином случае.
//
Функция ЕстьNull(Знач ПроверяемоеЗначение, ВозвращаемоеЗначение) Экспорт
	
	Если ПроверяемоеЗначение = Null Тогда
		Возврат ВозвращаемоеЗначение;
	Иначе
		Возврат ПроверяемоеЗначение;
	КонецЕсли;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОЛУЧЕНИЯ И УСТАНОВКИ НАСТРОЕК ПОЛЬЗОВАТЕЛЕЙ

// Устарела. Необходимо использовать функцию БСП ОбщегоНазначения.ТекущаяДатаПользователя()
//
Функция ПолучитьРабочуюДату() Экспорт
	
	Возврат ОбщегоНазначения.ТекущаяДатаПользователя();
	
КонецФункции

// Определяет конфигурации с основной функциональностью
//
// Возвращаемое значение:
//  Булево
//
Функция ЭтоВерсияСОсновнойФункциональностью() Экспорт
	
	Возврат ОбщегоНазначенияПовтИсп.РазделениеВключено() ИЛИ СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации();
	
КонецФункции

// Возвращает признак использования функциональности.
//
// Параметры:
//  ИмяФункциональности - Строка - имя проверяемой функциональности.
//
// Возвращаемое значение:
//  Булево
//
Функция ПолучитьЗначениеФункциональности(Знач ИмяФункциональности) Экспорт
	
	ИмяФункциональности = Врег(ИмяФункциональности);
	Если ИмяФункциональности = ВРег("ПользовательУправляетСчетамиУчета") Тогда
		Результат = СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета();
	ИначеЕсли ИмяФункциональности = ВРег("ЭтоБазоваяВерсияКонфигурации") Тогда
		Результат = ОбщегоНазначенияБП.ЭтоБазоваяВерсияКонфигурации();
	ИначеЕсли ИмяФункциональности = ВРег("ЭтоПрофВерсияКонфигурации") Тогда
		Результат = ОбщегоНазначенияБП.ЭтоПрофВерсияКонфигурации();
	ИначеЕсли ИмяФункциональности = ВРег("ЭтоКорпВерсияКонфигурации") Тогда
		Результат = ОбщегоНазначенияБП.ЭтоКорпВерсияКонфигурации();
	ИначеЕсли Метаданные.ФункциональныеОпции.Найти(ИмяФункциональности) <> Неопределено Тогда
		Результат = ПолучитьФункциональнуюОпцию(ИмяФункциональности);
	Иначе
		Результат = Истина;
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Описание изменений системы'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,,
			СтрШаблон("Не найдена функциональная опция %1", ИмяФункциональности));
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Замена ссылок по информационной базе

// Принимает Соответствие между замещаемыми ссылками и заменителями и заменяет ссылки по информационной базе
Процедура ЗаменитьСсылки(ПарыЗамен) Экспорт
	ДвиженияССубконтоИмя = ?(Метаданные.ВариантВстроенногоЯзыка = Метаданные.СвойстваОбъектов.ВариантВстроенногоЯзыка.Английский,
		".RecordsWithExtDimensions", ".ДвиженияССубконто");
	
	ЗаменяемыеСсылки = Новый Массив;
	Для Каждого Пара Из ПарыЗамен Цикл
		ЗаменяемыеСсылки.Добавить(Пара.Ключ);
	КонецЦикла;
	РезультатыПоиска = НайтиПоСсылкам(ЗаменяемыеСсылки);
	// (.Ссылка: исходная ссылка; .Данные: ссылающийся объект; .Метаданные: метаданные ссылающегося объекта)
	КешПолей = Новый Соответствие;
 	Для Каждого Результат Из РезультатыПоиска Цикл
		Замещаемое = Результат.Ссылка;
		// объект, ссылающийся сам на себя не трогаем!
		Если Замещаемое = Результат.Данные Тогда
			Продолжить;
		КонецЕсли;
		
		ТипЗамещаемого = ТипЗнч(Замещаемое);
		Заменитель = ПарыЗамен[Результат.Ссылка];		
		
		Если ЭтоСсылочныйОбъектМетаданных(Результат.Метаданные) Тогда
			// обработка самого объекта
			ОбъектДанных = Результат.Данные.ПолучитьОбъект();
			ИменаПолей = ИменаПолейСТипом(Результат.Метаданные.ПолноеИмя(), ТипЗамещаемого, КешПолей, "Ссылка, Ref");
			ЗаменитьЗначение(ОбъектДанных, ИменаПолей, Замещаемое, Заменитель);
			// обработка табчастей объекта
			Для Каждого Табчасть Из Результат.Метаданные.ТабличныеЧасти Цикл
				ИменаПолей = ИменаПолейСТипом(Результат.Метаданные.ПолноеИмя()+"."+Табчасть.Имя, ТипЗамещаемого, КешПолей, "Ссылка, Ref");
				Для Каждого Табстрока Из ОбъектДанных[Табчасть.Имя] Цикл
					ЗаменитьЗначение(Табстрока, ИменаПолей, Замещаемое, Заменитель);
				КонецЦикла;
			КонецЦикла;
			// обработка стандартных табчастей объекта
			Если Метаданные.ПланыСчетов.Содержит(Результат.Метаданные) Или Метаданные.ПланыВидовРасчета.Содержит(Результат.Метаданные) Тогда
				Для Каждого Табчасть Из Результат.Метаданные.СтандартныеТабличныеЧасти Цикл
					ИменаПолей = ИменаПолейСТипом(Результат.Метаданные.ПолноеИмя()+"."+Табчасть.Имя, ТипЗамещаемого, КешПолей, "Ссылка, Ref");
					Для Каждого Табстрока Из ОбъектДанных[Табчасть.Имя] Цикл
						ЗаменитьЗначение(Табстрока, ИменаПолей, Замещаемое, Заменитель);
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			ЗаписатьДанные(ОбъектДанных);
			ОбъектДанных = Неопределено;
			// обработка движений документа
			Если Метаданные.Документы.Содержит(Результат.Метаданные) Тогда
				Для Каждого Движение Из Результат.Метаданные.Движения Цикл
					Если Метаданные.РегистрыБухгалтерии.Содержит(Движение) Тогда
						ДопТаблица = ДвиженияССубконтоИмя;
						Регистр = РегистрыБухгалтерии[Движение.Имя];
						ИменаПолей = ИменаПолейСТипом(Движение.ПолноеИмя(), ТипЗамещаемого, КешПолей, "Регистратор, Recorder");
						Набор = НаборЗаписей(Регистр, Новый Структура("Регистратор", Результат.Данные));
						ЗначениеЗаменено = Ложь;
						Для Каждого Запись Из Набор Цикл
							ЗаменитьЗначение(Запись, ИменаПолей, Замещаемое, Заменитель, ЗначениеЗаменено);
							ЗаменыЗначенийСубконто = Новый Соответствие();
							Для Каждого Субконто ИЗ Запись.СубконтоДт Цикл
								Если Субконто.Значение = Замещаемое Тогда
									ЗаменыЗначенийСубконто.Вставить(Субконто.Ключ, Заменитель);
								КонецЕсли;
							КонецЦикла;
							Для Каждого Замена Из ЗаменыЗначенийСубконто Цикл
								Запись.СубконтоДт.Вставить(Замена.Ключ, Замена.Значение);
							КонецЦикла;
							ЗаменыЗначенийСубконто.Очистить();
							Для Каждого Субконто ИЗ Запись.СубконтоКт Цикл
								Если Субконто.Значение = Замещаемое Тогда
									ЗаменыЗначенийСубконто.Вставить(Субконто.Ключ, Заменитель);
								КонецЕсли;
							КонецЦикла;
							Для Каждого Замена Из ЗаменыЗначенийСубконто Цикл
								Запись.СубконтоКт.Вставить(Замена.Ключ, Замена.Значение);
							КонецЦикла;
						КонецЦикла;
						
						ЗаписатьДанные(Набор, ЗначениеЗаменено);
						
					Иначе
						Если Метаданные.РегистрыНакопления.Содержит(Движение) Тогда
							Регистр = РегистрыНакопления[Движение.Имя];
						ИначеЕсли Метаданные.РегистрыСведений.Содержит(Движение) Тогда
							Регистр = РегистрыСведений[Движение.Имя];
						ИначеЕсли Метаданные.РегистрыРасчета.Содержит(Движение) Тогда
							Регистр = РегистрыРасчета[Движение.Имя];
						КонецЕсли;
						ИменаПолей = ИменаПолейСТипом(Движение.ПолноеИмя(), ТипЗамещаемого, КешПолей, "Регистратор, Recorder");
						Набор = НаборЗаписей(Регистр, Новый Структура("Регистратор", Результат.Данные));
						ЗначениеЗаменено = Ложь;
						Для Каждого Запись Из Набор Цикл
							ЗаменитьЗначение(Запись, ИменаПолей, Замещаемое, Заменитель, ЗначениеЗаменено);
						КонецЦикла;
						ЗаписатьДанные(Набор, ЗначениеЗаменено);
					КонецЕсли;
				КонецЦикла;
				// обработка последовательностей, включающих документ
				Для Каждого Последовательность Из Метаданные.Последовательности Цикл
					Если Последовательность.Документы.Содержит(Результат.Метаданные) Тогда
						ИменаПолей = ИменаПолейСТипом(Последовательность.ПолноеИмя(), ТипЗамещаемого, КешПолей, "Регистратор, Recorder");
						Набор = НаборЗаписей(Последовательности[Последовательность.Имя], Новый Структура("Регистратор", Результат.Данные));
						Для Каждого Запись Из Набор Цикл
							ЗаменитьЗначение(Запись, ИменаПолей, Замещаемое, Заменитель);
						КонецЦикла;
						ЗаписатьДанные(Набор);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		// константы
		ИначеЕсли Метаданные.Константы.Содержит(Результат.Метаданные) Тогда
			Константы[Результат.Метаданные.Имя].Установить(Заменитель);
		// регистры сведений (необъектные таблицы)
		ИначеЕсли Метаданные.РегистрыСведений.Содержит(Результат.Метаданные) Тогда
			ИменаПолей = ИменаПолейСТипом(Результат.Метаданные.ПолноеИмя(), ТипЗамещаемого, КешПолей);
			Отборы = ОтборыРегистраСведений(Результат.Метаданные, Результат.Данные);
			Набор = НаборЗаписей(РегистрыСведений[Результат.Метаданные.Имя], Отборы);
			
			Таблица = Набор.Выгрузить();
			Набор.Очистить();
			ЗаписатьДанные(Набор);

			ЗаменитьЗначение(Таблица[0], ИменаПолей, Замещаемое, Заменитель);
			Для Каждого ИмяПоля Из ИменаПолей Цикл
				Если Отборы.Свойство(ИмяПоля) И Отборы[ИмяПоля] = Замещаемое Тогда
					Набор.Отбор[ИмяПоля].Установить(Заменитель);
				КонецЕсли
			КонецЦикла;
			Набор.Загрузить(Таблица);
			ЗаписатьДанные(Набор);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ИменаПолейСТипом(ИмяТаблицы, ТипДанных, КешПолейТаблиц=Неопределено, СтрокаИсключений=Неопределено)
	ИменаПолей = Новый Массив;
	
	ТекстЗапроса = СтрЗаменить("ВЫБРАТЬ Т.* ИЗ ТаблицаВыборки КАК Т ГДЕ Ложь", "ТаблицаВыборки", ИмяТаблицы);
	Если Неопределено<>КешПолейТаблиц Тогда
		ПоляТаблицы = КешПолейТаблиц.Получить(ИмяТаблицы);
		Если Неопределено=ПоляТаблицы Тогда
			Запрос = Новый Запрос(ТекстЗапроса);
			ПоляТаблицы = Запрос.Выполнить().Колонки;
			КешПолейТаблиц.Вставить(ИмяТаблицы, ПоляТаблицы);
		КонецЕсли;
	Иначе
		Запрос = Новый Запрос(ТекстЗапроса);
		ПоляТаблицы = Запрос.Выполнить().Колонки;
	КонецЕсли;
	
	Исключения = Новый Структура(СтрокаИсключений);
	Для Каждого Поле Из ПоляТаблицы Цикл
		Если Поле.ТипЗначения.СодержитТип(ТипДанных) И Не Исключения.Свойство(Поле.Имя) Тогда
			ИменаПолей.Добавить(Поле.Имя);
		КонецЕсли;
	КонецЦикла;
	
    Возврат ИменаПолей;
КонецФункции

Процедура ЗаменитьЗначение(Данные, ИменаПолей, Замещаемое, Заменитель, ЗначениеЗаменено=Ложь)
	Для Каждого ИмяПоля Из ИменаПолей Цикл
		Если Данные[ИмяПоля] = Замещаемое Тогда
			Данные[ИмяПоля] = Заменитель;
			ЗначениеЗаменено = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаписатьДанные(Данные, Принудительно=Ложь)
	Если Данные.Модифицированность() Или Принудительно Тогда
		Данные.ОбменДанными.Загрузка = Истина;
		Данные.Записать();
	КонецЕсли;
КонецПроцедуры

Функция ОтборыРегистраСведений(МетаданныеРегистра, Запись)
	Отборы = Новый Структура;
	Если МетаданныеРегистра.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
		Отборы.Вставить("Период", Запись.Период);
	КонецЕсли;
	Для Каждого Измерение Из МетаданныеРегистра.Измерения Цикл
		Отборы.Вставить(Измерение.Имя, Запись[Измерение.Имя]);
	КонецЦикла;
	Возврат Отборы;
КонецФункции

Функция НаборЗаписей(МенеджерРегистра, Отборы)
	Набор = МенеджерРегистра.СоздатьНаборЗаписей();
	Для Каждого Отбор Из Отборы Цикл
		Набор.Отбор[Отбор.Ключ].Установить(Отбор.Значение);
	КонецЦикла;
	Набор.Прочитать();
	Возврат Набор;
КонецФункции

Функция ЭтоСсылочныйОбъектМетаданных(ОбъектМетаданных)
	Возврат Метаданные.Справочники.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.Документы.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.Перечисления.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.ПланыВидовРасчета.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.БизнесПроцессы.Содержит(ОбъектМетаданных)
		//ИЛИ БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().СодержитТип(Тип)
		ИЛИ Метаданные.Задачи.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.ПланыОбмена.Содержит(ОбъектМетаданных);
КонецФункции

// Заменяет отбор, установленный пользователем в сохраненной настройке списка, на отбор, установленный программно при создании формы списка.
// Вызывается при восстановлении пользовательских настроек динамического списка
// из обработчика списка ПередЗагрузкойПользовательскихНастроекНаСервере.
//
// Параметры:
//  Список      - ДинамическийСписок - Динамический список, для которого устанавливается отбор.
//  Настройки   - ПользовательскиеНастройкиКомпоновкиДанных - Восстанавливаемые настройки списка.
//  ИмяОтбора   - Строка - Имя элемента отбора.
//
Процедура ВосстановитьОтборСписка(Список, Настройки, ИмяОтбора) Экспорт

	Отборы = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(
		Список.КомпоновщикНастроек.Настройки.Отбор, ИмяОтбора);
	
	Если Отборы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементОтбора = Отборы[0];
	ИдентификаторНастройки = ЭлементОтбора.ИдентификаторПользовательскойНастройки;
	
	Для каждого ЭлементНастроек Из Настройки.Элементы Цикл
		Если ТипЗнч(ЭлементНастроек) = Тип("ЭлементОтбораКомпоновкиДанных") 
			И ЭлементНастроек.ИдентификаторПользовательскойНастройки = ИдентификаторНастройки Тогда
			ЭлементНастроек.ПравоеЗначение = ЭлементОтбора.ПравоеЗначение;
			ЭлементНастроек.Использование  = ЭлементОтбора.Использование;
			Прервать;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С СОХРАНЕНИЕМ И ОТПРАВКОЙ ДОКУМЕНТОВ ПО ЭЛ.ПОЧТЕ

// Процедура формирует имя сохраняемого файла путем формирования представления документа и удаления из него символов "точка"
Процедура УстановитьИмяСохраняемогоФайла(ОбъектыПечати, КоллекцияПечатныхФорм)
	
	Если НЕ КоллекцияПечатныхФорм.Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПечатнаяФорма = КоллекцияПечатныхФорм[0];
	ИмяФайлаПечатнойФормы = Новый Соответствие;
	
	Для Каждого ОбъектПечати Из ОбъектыПечати Цикл
		ПредставлениеДокументаДляПечатнойФормы = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(
			ОбъектПечати.Значение, ПечатнаяФорма.СинонимМакета);
		ПредставлениеДокументаДляПечатнойФормы = СтрЗаменить(ПредставлениеДокументаДляПечатнойФормы, ".", "");
		ИмяФайлаПечатнойФормы.Вставить(ОбъектПечати.Значение, ПредставлениеДокументаДляПечатнойФормы);
	КонецЦикла;
	
	ПечатнаяФорма.ИмяФайлаПечатнойФормы = ИмяФайлаПечатнойФормы;
	
КонецПроцедуры

// Устанавливает имя сохраняемого файла.
//
// Параметры:
//  МассивОбъектов - Массив - Массив объектов печати.
//  КоллекцияПечатныхФорм - Массив - Коллекция печатных форм.
//  ОбъектыПечати - Массив - Массив объектов печати.
//  ПараметрыВывода - Структура - Параметры вывода печатной формы.
//
Процедура ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати,
			ПараметрыВывода = Неопределено) Экспорт
	
	Если ТипЗнч(ПараметрыВывода) = Тип("Структура") И ПараметрыВывода.Свойство("НеПереопределятьИмяФайла") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьИмяСохраняемогоФайла(ОбъектыПечати, КоллекцияПечатныхФорм);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ СО СТАТУСОМ ДОКУМЕНТОВ

// Позволяет получить индекс картинки состояния документа из коллекции СостоянияДокумента
// по свойствам Проведен/ПометкаУдаления/РучнаяКорректировка
//
// Параметры:
// Объект - основной реквизит формы документа, с типом ДанныеФормыСтруктура
//
Функция СостояниеДокумента(Объект) Экспорт
	
	РучнаяКорректировка = Неопределено;
	
	Если Объект.Свойство("РучнаяКорректировка", РучнаяКорректировка) Тогда
		Если Объект.РучнаяКорректировка Тогда
			Если Объект.ПометкаУдаления Тогда
				СостояниеДокумента = 10;
			ИначеЕсли НЕ Объект.Проведен Тогда
				СостояниеДокумента = 9;
			Иначе
				СостояниеДокумента = 8;
			КонецЕсли;
		Иначе
			Если Объект.ПометкаУдаления Тогда
				СостояниеДокумента = 2;
			ИначеЕсли Объект.Проведен Тогда
				СостояниеДокумента = 1;
			Иначе
				СостояниеДокумента = 0;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если Объект.ПометкаУдаления Тогда
			СостояниеДокумента = 2;
		ИначеЕсли Объект.Проведен Тогда
			СостояниеДокумента = 1;
		Иначе
			СостояниеДокумента = 0;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СостояниеДокумента;
	
КонецФункции

#Область УстаревшийПрограммныйИнтерфейс

// Устарела. Следует использовать ОбщегоНазначения.ЕстьРеквизитОбъекта
// Позволяет определить есть ли среди реквизитов шапки документа
// реквизит с переданным именем.
//
// Параметры:
//  ИмяРеквизита - строковое имя искомого реквизита,
//  МетаданныеДокумента - объект описания метаданных документа, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция ЕстьРеквизитДокумента(ИмяРеквизита, МетаданныеДокумента) Экспорт

	Возврат НЕ (МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) = Неопределено);

КонецФункции // ЕстьРеквизитДокумента()

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ НАСТРОЙКИ ПАРАМЕТРОВ УЧЕТА

Функция ОпределитьПараметрыУчета() Экспорт

	ПараметрыУчета = Новый Структура;
	ПараметрыУчета.Вставить("ВестиПартионныйУчет",               Ложь);
	ПараметрыУчета.Вставить("СкладскойУчет",                     0);
	ПараметрыУчета.Вставить("ИспользоватьОборотнуюНоменклатуру", Ложь);
	ПараметрыУчета.Вставить("РазделятьПоСтавкамНДС",             Ложь);
	ПараметрыУчета.Вставить("ВестиУчетПоСтатьямДДС",             Ложь);
	ПараметрыУчета.Вставить("ВестиУчетНДСПоСпособам",            Ложь);
	
	//Работники
	ПараметрыУчета.Вставить("ВестиУчетПоРаботникам",
		?(БухгалтерскийУчетПереопределяемый.ВедетсяУчетРасчетовПоЗарплатеСводно(), 0, 1));
	ПараметрыУчета.Вставить("УчетЗарплатыИКадровВоВнешнейПрограмме",
		БухгалтерскийУчетПереопределяемый.УчетЗарплатыИКадровВоВнешнейПрограмме());
	ПараметрыУчета.Вставить("КадровыйУчет", БухгалтерскийУчетПереопределяемый.ВедетсяКадровыйУчет());
	
	// Элементы затрат
	Для Каждого ИмяПараметра Из ЭлементыЗатратНастройкаПараметровУчета.ПараметрыУчета() Цикл
		ПараметрыУчета.Вставить(ИмяПараметра, Ложь);
	КонецЦикла;
	ЭлементыЗатратНастройкаПараметровУчета.ПрочитатьЗначенияПараметровУчета(ПараметрыУчета);
	
	// Запасы
	БУ = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.Товары);
	ВестиСкладскойУчет = Ложь;
	ВестиСуммовойУчетПоСкладам = Ложь;
	Для НомерСубконто = 1 По БУ.КоличествоСубконто Цикл
		
		ВидСубконто = БУ["ВидСубконто" + НомерСубконто];
		
		Если ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии Тогда
			ПараметрыУчета.ВестиПартионныйУчет = Истина;
		ИначеЕсли ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады Тогда
			ВестиСкладскойУчет = Истина;
			ВестиСуммовойУчетПоСкладам = БУ["ВидСубконто" + НомерСубконто + "Суммовой"];
		КонецЕсли;

	КонецЦикла;
	ПараметрыУчета.СкладскойУчет = ?(ВестиСкладскойУчет, ?(ВестиСуммовойУчетПоСкладам, 2, 1), 0);

	//Розница
	БУ = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ);
	Для НомерСубконто = 1 По БУ.КоличествоСубконто Цикл
		
		ВидСубконто = БУ["ВидСубконто" + НомерСубконто];
		
		Если ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура Тогда
			ПараметрыУчета.ИспользоватьОборотнуюНоменклатуру = Истина;
		ИначеЕсли ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС Тогда
			ПараметрыУчета.РазделятьПоСтавкамНДС = Истина;
		КонецЕсли;

	КонецЦикла;
	
	//Раздельный учет НДС
	БУ = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымЦенностям);
	Для НомерСубконто = 1 По БУ.КоличествоСубконто Цикл
		
		Если БУ["ВидСубконто" + НомерСубконто] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СпособыУчетаНДС Тогда
			ПараметрыУчета.ВестиУчетНДСПоСпособам = Истина;
			Прервать;
		КонецЕсли;

	КонецЦикла;
	
	//Денежные средства
	БУ = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.Касса);
	Для НомерСубконто = 1 По БУ.КоличествоСубконто Цикл
		
		Если БУ["ВидСубконто" + НомерСубконто] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств Тогда
			ПараметрыУчета.ВестиУчетПоСтатьямДДС = Истина;
			Прервать;
		КонецЕсли;

	КонецЦикла;
		
	Возврат ПараметрыУчета;

КонецФункции

Процедура ПрименитьПараметрыУчета(ПараметрыУчета, ИзмененыПараметрыСубконто = Ложь, Отказ = Ложь) Экспорт
	
	ПризнакиУчета             = ПолучитьСтруктуруПризнаковУчетаСубконто();
	ДействияИзмененияСубконто = ПолучитьДействияИзмененияСубконто(ПараметрыУчета); // Иерархическая коллекция: на первом уровне действия с субконто на каждом из счетов, на втором - действия с призаками учета.
	
	// Сгруппируем изменения по счетам, так как записывать будем именно счет
	СчетаКИзменению = ОбщегоНазначения.ВыгрузитьКолонку(ДействияИзмененияСубконто, "Счет", Истина);
	ДействияИзмененияСубконто.Индексы.Добавить("Счет");
	Отбор = Новый Структура("Счет");
	
	НачатьТранзакцию();

	Для Каждого Счет Из СчетаКИзменению Цикл
		
		Отбор.Счет = Счет;
		ДействияДляСчета = ДействияИзмененияСубконто.НайтиСтроки(Отбор);
		
		Объект = Счет.ПолучитьОбъект();
		
		ПротоколИзменений = Новый Массив;
		
		Для Каждого Действие Из ДействияДляСчета Цикл
			
			// Действие: -1 удалить; 0 - не менять; 1 - установить
			
			// Действия с видом субконто
			Если Действие.Действие = 1 Тогда
				
				// Добавить субконто
				
				Если Счет = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда Тогда
					ВидыСубконтоСтрока = Объект.ВидыСубконто.Вставить(0);
				Иначе				
					ВидыСубконтоСтрока = Объект.ВидыСубконто.Добавить();
				КонецЕсли;
			
				ВидыСубконтоСтрока.ВидСубконто = Действие.Субконто;
				
				ДобавитьВПротоколИзменениеСубконто(ПротоколИзменений, ВидыСубконтоСтрока.ВидСубконто, Действие.Действие);
				
			Иначе
				
				ВидыСубконтоСтрока = Объект.ВидыСубконто.Найти(Действие.Субконто, "ВидСубконто");
				Если ВидыСубконтоСтрока = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			Если Действие.Действие = -1 Тогда
				
				ДобавитьВПротоколИзменениеСубконто(ПротоколИзменений, ВидыСубконтоСтрока.ВидСубконто, Действие.Действие);
				
				Объект.ВидыСубконто.Удалить(ВидыСубконтоСтрока);
				
				Продолжить;
				
			КонецЕсли;
			
			// Действия с признаками учета
			
			Для Каждого ПризнакУчета Из ПризнакиУчета Цикл
				
				ДействиеСПризнаком = Действие[ПризнакУчета.Ключ];

				Если ДействиеСПризнаком = 1 Тогда
					ЗначениеПризнака = Истина;
				ИначеЕсли ДействиеСПризнаком = -1 Тогда
					ЗначениеПризнака = Ложь;
				Иначе
					Продолжить;
				КонецЕсли;
				
				Если ВидыСубконтоСтрока[ПризнакУчета.Ключ] = ЗначениеПризнака Тогда
					Продолжить;
				КонецЕсли;
				
				ВидыСубконтоСтрока[ПризнакУчета.Ключ] = ЗначениеПризнака;
				
				ДобавитьВПротоколИзменениеПризнакаУчета(
					ПротоколИзменений, 
					ВидыСубконтоСтрока.ВидСубконто, 
					ПризнакУчета.Значение, 
					ДействиеСПризнаком);
				
			КонецЦикла; // По признакам учета
			
		КонецЦикла; // По ДействияДляСчета
		
		Если Не Объект.Модифицированность() Тогда
			Продолжить;
		КонецЕсли;
		
		ПротоколИзмененийСтрокой = СтрСоединить(ПротоколИзменений, Символы.ПС);
		
		Попытка
			Объект.Записать();
		Исключение
			ОписаниеОшибки = ИнформацияОбОшибке();
			ОтменитьТранзакцию();
			
			Отказ = Истина;
			
			ШаблонТекста = НСтр("ru = 'Ошибка при записи счета [КодСчета]:
				|[ОписаниеОшибки]
				|Ошибка произошла при попытке выполнить следующие изменения:
				|[ПротоколИзменений]'");
				
			ПараметрыТекста = Новый Структура;
			ПараметрыТекста.Вставить("КодСчета",          Объект.Код);
			ПараметрыТекста.Вставить("ПротоколИзменений", ПротоколИзмененийСтрокой);
			
			// В журнал регистрации выведем подробную информацию
			ПараметрыТекста.Вставить("ОписаниеОшибки", ПодробноеПредставлениеОшибки(ОписаниеОшибки));
			
			Текст = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонТекста, ПараметрыТекста);
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрацииПараметрыУчета(),
				УровеньЖурналаРегистрации.Ошибка,
				Счет.Метаданные(),
				Счет, // Данные
				Текст);
				
			// Пользователю выведем краткое сообщение
			ШаблонТекста = НСтр("ru = 'Ошибка при записи счета [КодСчета]
				|Подробности см. в Журнале регистрации.'");
			Текст = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонТекста, ПараметрыТекста);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
			
			Возврат;
			
		КонецПопытки;
		
		// Запишем в журнал регистрации подробную информацию об изменениях
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрацииПараметрыУчета(),
			УровеньЖурналаРегистрации.Информация, 
			Счет.Метаданные(),
			Счет,
			ПротоколИзмененийСтрокой,
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		
	КонецЦикла; // По СчетаКИзменению

	БухгалтерскийУчетПереопределяемый.УстановитьПараметрыУчетаРасчетовПоЗарплате(?(ПараметрыУчета.ВестиУчетПоРаботникам = 1, Ложь, Истина));
	БухгалтерскийУчетПереопределяемый.УстановитьУчетЗарплатыИКадровВоВнешнейПрограмме(?(ПараметрыУчета.УчетЗарплатыИКадровВоВнешнейПрограмме = 1, Истина, Ложь));
	БухгалтерскийУчетПереопределяемый.УстановитьНастройкиКадровогоУчета(ПараметрыУчета.КадровыйУчет, ?(ПараметрыУчета.УчетЗарплатыИКадровВоВнешнейПрограмме = 0, Истина, Ложь));
	
	ЗафиксироватьТранзакцию();
	ОбновитьПовторноИспользуемыеЗначения();

КонецПроцедуры

Функция ПолучитьДействияИзмененияСубконто(ПараметрыУчетаФормы, ТолькоМПЗ = Ложь) Экспорт

	ПараметрыУчета = Новый Структура;
	Для каждого КлючИЗначение Из ПараметрыУчетаФормы Цикл
		ПараметрыУчета.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	// Учет МПЗ
	Если НЕ ПараметрыУчета.Свойство("ВестиСкладскойУчет") Тогда
		ПараметрыУчета.Вставить("ВестиСкладскойУчет", ПараметрыУчета.СкладскойУчет > 0);
	КонецЕсли;
	Если НЕ ПараметрыУчета.Свойство("ВестиСуммовойУчетПоСкладам") Тогда
		ПараметрыУчета.Вставить("ВестиСуммовойУчетПоСкладам", ПараметрыУчета.СкладскойУчет > 1);
	КонецЕсли;

	ПараметрыСубконто = ПолучитьСоответствиеСубконтоПараметрамУчета(ТолькоМПЗ);

	ПризнакиУчета = ПолучитьСтруктуруПризнаковУчетаСубконто();

	ТипДействия = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Любой));
	// -1 удалить; 0 - не менять; 1 - установить

	ТаблицаДействий = Новый ТаблицаЗначений;
	ТаблицаДействий.Колонки.Добавить("Счет", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаДействий.Колонки.Добавить("Субконто", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные"));
	ТаблицаДействий.Колонки.Добавить("Действие", ТипДействия);
	Для каждого ПризнакУчета Из ПризнакиУчета Цикл
		ТаблицаДействий.Колонки.Добавить(ПризнакУчета.Ключ, ТипДействия);
	КонецЦикла;

	Для каждого ОписаниеГруппыСчетов Из ПараметрыСубконто Цикл

		СчетаВСписке = Новый Массив;
		СчетаВИерархии = Новый Массив;
		СчетаНеВИерархии = ОписаниеГруппыСчетов.ИсключенияИерархии;

		Для каждого ОписаниеСчета Из ОписаниеГруппыСчетов.Счета Цикл
			Если ОписаниеСчета.СПодчиненными Тогда
				СчетаВИерархии.Добавить(ОписаниеСчета.Счет);
			Иначе
				СчетаВСписке.Добавить(ОписаниеСчета.Счет);
			КонецЕсли;
		КонецЦикла;

		// Получим список счетов для обработки
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СчетаВСписке", СчетаВСписке);
		Запрос.УстановитьПараметр("СчетаВИерархии", СчетаВИерархии);
		Запрос.УстановитьПараметр("СчетаНеВИерархии", СчетаНеВИерархии);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет,
		|	Хозрасчетный.Порядок КАК Порядок,
		|	Хозрасчетный.Код,
		|	Хозрасчетный.Валютный,
		|	Хозрасчетный.Количественный,
		|	Хозрасчетный.ВидыСубконто.(
		|		НомерСтроки КАК НомерСтроки,
		|		ВидСубконто,
		|		ТолькоОбороты,
		|		Суммовой,
		|		Валютный,
		|		Количественный
		|	)
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	(Хозрасчетный.Ссылка В (&СчетаВСписке)
		|			ИЛИ Хозрасчетный.Ссылка В ИЕРАРХИИ (&СчетаВИерархии)
		|				И (НЕ Хозрасчетный.Ссылка В ИЕРАРХИИ (&СчетаНеВИерархии)))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок,
		|	Счет,
		|	НомерСтроки";

		ВыборкаСчетов = Запрос.Выполнить().Выбрать();
		Пока ВыборкаСчетов.Следующий() Цикл

			ПараметрыСчета = ПолучитьЗначенияПараметровУчетаДляСчета(ПараметрыУчета,
				ОписаниеГруппыСчетов.Параметры, ВыборкаСчетов.Счет);

			ВидыСубконто = ВыборкаСчетов.ВидыСубконто.Выгрузить();

			Для каждого ОписаниеСубконто Из ОписаниеГруппыСчетов.Субконто Цикл
				СтрокаДействия = Неопределено;

				ИспользованиеСубконто = ПолучитьЗначениеПараметраУчетаСубконто(ОписаниеСубконто.Параметр,
					ПараметрыСчета, ВыборкаСчетов);

				Если ИспользованиеСубконто = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				СтрокаСубконто = ВидыСубконто.Найти(ОписаниеСубконто.Вид, "ВидСубконто");
				Если ИспользованиеСубконто Тогда
					Если СтрокаСубконто = Неопределено Тогда
						СтрокаДействия = ТаблицаДействий.Добавить();
						СтрокаДействия.Счет = ВыборкаСчетов.Счет;
						СтрокаДействия.Субконто = ОписаниеСубконто.Вид;
						СтрокаДействия.Действие = 1;						
					КонецЕсли;

					// проверим признаки учета
					Для каждого ПризнакУчета Из ПризнакиУчета Цикл
						ЗначениеПризнака = ПолучитьЗначениеПараметраУчетаСубконто(ОписаниеСубконто[ПризнакУчета.Ключ],
							ПараметрыСчета, ВыборкаСчетов);
						Если ЗначениеПризнака = Неопределено Тогда
							Продолжить;
						КонецЕсли;

						Если СтрокаСубконто = Неопределено
							ИЛИ СтрокаСубконто[ПризнакУчета.Ключ] <> ЗначениеПризнака Тогда

							Если СтрокаДействия = Неопределено Тогда
								СтрокаДействия = ТаблицаДействий.Добавить();
								СтрокаДействия.Счет = ВыборкаСчетов.Счет;
								СтрокаДействия.Субконто = ОписаниеСубконто.Вид;
							КонецЕсли;
							Если ЗначениеПризнака Тогда
								СтрокаДействия[ПризнакУчета.Ключ] = 1;
							Иначе
								СтрокаДействия[ПризнакУчета.Ключ] = -1;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				Иначе
					Если СтрокаСубконто = Неопределено Тогда
						Продолжить;
					Иначе
						СтрокаДействия = ТаблицаДействий.Добавить();
						СтрокаДействия.Счет = ВыборкаСчетов.Счет;
						СтрокаДействия.Субконто = ОписаниеСубконто.Вид;
						СтрокаДействия.Действие = -1;
					КонецЕсли;
				КонецЕсли;

			КонецЦикла;

		КонецЦикла;
	КонецЦикла;

	Возврат ТаблицаДействий;

КонецФункции

Функция ПолучитьСоответствиеСубконтоПараметрамУчета(ТолькоМПЗ = Ложь) Экспорт

	// Структура параметров

	Результат = Новый ТаблицаЗначений; // Структуры СтруктураПараметров
	Результат.Колонки.Добавить("Счета"); // Счета для обработки, таблица значений со структурой КолонкиСчетов
	Результат.Колонки.Добавить("ИсключенияИерархии", Новый ОписаниеТипов("Массив")); // Массив счетов
		// которые не должны обрабатываться при обработке подчиненных счетов
	Результат.Колонки.Добавить("Субконто"); // Параметры субконто, таблица значений со структурой КолонкиСубконто
	Результат.Колонки.Добавить("Параметры", Новый ОписаниеТипов("ТаблицаЗначений")); // Список параметров и
		// значения исключений, таблица значений со структурой КолонкиПараметров

	КолонкиСчетов = Новый ТаблицаЗначений;
	КолонкиСчетов.Колонки.Добавить("Счет", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	КолонкиСчетов.Колонки.Добавить("СПодчиненными", Новый ОписаниеТипов("Булево")); // Обрабатывать все субсчета

	// Имя параметра, константа типа Булево или строка "ПоСчету" (только для признаков учета Количественный и Валютный)
	// Неопределено - не менять
	ТипПараметра = Новый ОписаниеТипов("Неопределено, Строка, Булево", , Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная));

	КолонкиСубконто = Новый ТаблицаЗначений;
	КолонкиСубконто.Колонки.Добавить("Вид", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные"));
	КолонкиСубконто.Колонки.Добавить("Параметр", ТипПараметра); // Необходимость включения субконто
	КолонкиСубконто.Колонки.Добавить("Количественный", ТипПараметра);
	КолонкиСубконто.Колонки.Добавить("Суммовой", ТипПараметра);
	КолонкиСубконто.Колонки.Добавить("ТолькоОбороты", ТипПараметра);
	КолонкиСубконто.Колонки.Добавить("Валютный", ТипПараметра);

	КолонкиПараметров = Новый ТаблицаЗначений; // Описания параметров учета
	// Имя параметра учета
	КолонкиПараметров.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	КолонкиПараметров.Колонки.Добавить("Исключения", Новый ОписаниеТипов("ТаблицаЗначений")); // Счета, для которых будут
		//использоваться константные значения вместо значений параметров

	КолонкиИсключений = Новый ТаблицаЗначений;
	КолонкиИсключений.Колонки.Добавить("Счет", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	КолонкиИсключений.Колонки.Добавить("СПодчиненными", Новый ОписаниеТипов("Булево"));
	КолонкиИсключений.Колонки.Добавить("Значение", Новый ОписаниеТипов("Неопределено, Булево"));

	////////////////////////////////////////////////////////////////
	// Учет МПЗ
	СтрокаРезультата = Результат.Добавить();

	// Счета
	Счета = КолонкиСчетов.СкопироватьКолонки();
	СтрокаРезультата.Счета = Счета;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке;
	СтрокаСчета.СПодчиненными = Истина;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ПриобретениеКомпонентовОсновныхСредств;
	СтрокаСчета.СПодчиненными = Истина;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.Полуфабрикаты;
	СтрокаСчета.СПодчиненными = Истина;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.Товары;
	СтрокаСчета.СПодчиненными = Истина;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ГотоваяПродукция;
	СтрокаСчета.СПодчиненными = Истина;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.Материалы;
	СтрокаСчета.СПодчиненными = Истина;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ТоварыОтгруженные;
	СтрокаСчета.СПодчиненными = Истина;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ТоварыНаСкладе;
	СтрокаСчета.СПодчиненными = Истина;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.МатериалыПринятыеВПереработку;
	СтрокаСчета.СПодчиненными = Истина;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
	СтрокаСчета.СПодчиненными = Ложь;

	// Исключения иерархии
	ИсключенияИерархии = Новый Массив;
	СтрокаРезультата.ИсключенияИерархии = ИсключенияИерархии;

	ИсключенияИерархии.Добавить(ПланыСчетов.Хозрасчетный.СпецоснасткаИСпецодеждаВЭксплуатации);
	ИсключенияИерархии.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ);
	ИсключенияИерархии.Добавить(ПланыСчетов.Хозрасчетный.СпецодеждаВЭксплуатации);
	ИсключенияИерархии.Добавить(ПланыСчетов.Хозрасчетный.СпецоснасткаВЭксплуатации);
	ИсключенияИерархии.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ);
	ИсключенияИерархии.Добавить(ПланыСчетов.Хозрасчетный.ПереданныеОбъектыНедвижимости);
	
	// Субконто
	Субконто = КолонкиСубконто.СкопироватьКолонки();
	СтрокаРезультата.Субконто = Субконто;

	СтрокаСубконто = Субконто.Добавить();
	СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура;
	СтрокаСубконто.Параметр = Истина;
	СтрокаСубконто.Количественный = Истина;
	СтрокаСубконто.Суммовой = Истина;
	СтрокаСубконто.ТолькоОбороты = Ложь;
	СтрокаСубконто.Валютный = Неопределено;

	СтрокаСубконто = Субконто.Добавить();
	СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС;
	СтрокаСубконто.Параметр = Ложь;
	СтрокаСубконто.Количественный = Истина;
	СтрокаСубконто.Суммовой = Истина;
	СтрокаСубконто.ТолькоОбороты = Ложь;
	СтрокаСубконто.Валютный = Неопределено;

	СтрокаСубконто = Субконто.Добавить();
	СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии;
	СтрокаСубконто.Параметр = "ВестиПартионныйУчет";
	СтрокаСубконто.Количественный = Истина;
	СтрокаСубконто.Суммовой = Истина;
	СтрокаСубконто.ТолькоОбороты = Ложь;
	СтрокаСубконто.Валютный = Неопределено;

	СтрокаСубконто = Субконто.Добавить();
	СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады;
	СтрокаСубконто.Параметр = "ВестиСкладскойУчет";
	СтрокаСубконто.Количественный = Истина;
	СтрокаСубконто.Суммовой = "ВестиСуммовойУчетПоСкладам";
	СтрокаСубконто.ТолькоОбороты = Ложь;
	СтрокаСубконто.Валютный = Неопределено;

	// Параметры
	Параметры = КолонкиПараметров.СкопироватьКолонки();
	СтрокаРезультата.Параметры = Параметры;

	СтрокаПараметра = Параметры.Добавить();
	СтрокаПараметра.Имя = "ВестиПартионныйУчет";
	СтрокаПараметра.Исключения = КолонкиИсключений.Скопировать();

		СтрокаИсключения = СтрокаПараметра.Исключения.Добавить();
		СтрокаИсключения.Счет = ПланыСчетов.Хозрасчетный.ТоварыПринятыеНаКомиссию;
		СтрокаИсключения.СПодчиненными = Истина;
		СтрокаИсключения.Значение = Истина;

		СтрокаИсключения = СтрокаПараметра.Исключения.Добавить();
		СтрокаИсключения.Счет = ПланыСчетов.Хозрасчетный.МатериалыПринятыеВПереработку;
		СтрокаИсключения.СПодчиненными = Ложь;
		СтрокаИсключения.Значение = Неопределено;

	СтрокаПараметра = Параметры.Добавить();
	СтрокаПараметра.Имя = "ВестиСкладскойУчет";
	СтрокаПараметра.Исключения = КолонкиИсключений.Скопировать();

		СтрокаИсключения = СтрокаПараметра.Исключения.Добавить();
		СтрокаИсключения.Счет = ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку;
		СтрокаИсключения.СПодчиненными = Истина;
		СтрокаИсключения.Значение = Неопределено;

		СтрокаИсключения = СтрокаПараметра.Исключения.Добавить();
		СтрокаИсключения.Счет = ПланыСчетов.Хозрасчетный.ТоварыОтгруженные;
		СтрокаИсключения.СПодчиненными = Истина;
		СтрокаИсключения.Значение = Неопределено;

		СтрокаИсключения = СтрокаПараметра.Исключения.Добавить();
		СтрокаИсключения.Счет = ПланыСчетов.Хозрасчетный.ТоварыПереданныеНаКомиссию;
		СтрокаИсключения.СПодчиненными = Ложь;
		СтрокаИсключения.Значение = Неопределено;

		СтрокаИсключения = СтрокаПараметра.Исключения.Добавить();
		СтрокаИсключения.Счет = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ;
		СтрокаИсключения.СПодчиненными = Ложь;
		СтрокаИсключения.Значение = Истина;

		СтрокаИсключения = СтрокаПараметра.Исключения.Добавить();
		СтрокаИсключения.Счет = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
		СтрокаИсключения.СПодчиненными = Ложь;
		СтрокаИсключения.Значение = Истина;

	СтрокаПараметра = Параметры.Добавить();
	СтрокаПараметра.Имя = "ВестиСуммовойУчетПоСкладам";
	СтрокаПараметра.Исключения = КолонкиИсключений.Скопировать();

		СтрокаИсключения = СтрокаПараметра.Исключения.Добавить();
		СтрокаИсключения.Счет = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ;
		СтрокаИсключения.СПодчиненными = Ложь;
		СтрокаИсключения.Значение = Истина;

		СтрокаИсключения = СтрокаПараметра.Исключения.Добавить();
		СтрокаИсключения.Счет = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
		СтрокаИсключения.СПодчиненными = Ложь;
		СтрокаИсключения.Значение = Истина;

	Если ТолькоМПЗ Тогда
		Возврат Результат;
	КонецЕсли;

	////////////////////////////////////////////////////////////////
	// Розничная торговля
	СтрокаРезультата = Результат.Добавить();

	// Счета
	Счета = КолонкиСчетов.СкопироватьКолонки();
	СтрокаРезультата.Счета = Счета;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ;
	СтрокаСчета.СПодчиненными = Ложь;

	// Субконто
	Субконто = КолонкиСубконто.СкопироватьКолонки();
	СтрокаРезультата.Субконто = Субконто;

	СтрокаСубконто = Субконто.Добавить();
	СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура;
	СтрокаСубконто.Параметр = "ИспользоватьОборотнуюНоменклатуру";
	СтрокаСубконто.Количественный = Ложь;
	СтрокаСубконто.Суммовой = Истина;
	СтрокаСубконто.ТолькоОбороты = Истина;
	СтрокаСубконто.Валютный = Неопределено;

	СтрокаСубконто = Субконто.Добавить();
	СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС;
	СтрокаСубконто.Параметр = "РазделятьПоСтавкамНДС";
	СтрокаСубконто.Количественный = Ложь;
	СтрокаСубконто.Суммовой = Истина;
	СтрокаСубконто.ТолькоОбороты = Ложь;
	СтрокаСубконто.Валютный = Неопределено;

	СтрокаСубконто = Субконто.Добавить();
	СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии;
	СтрокаСубконто.Параметр = Ложь;
	СтрокаСубконто.Количественный = Истина;
	СтрокаСубконто.Суммовой = Истина;
	СтрокаСубконто.ТолькоОбороты = Ложь;
	СтрокаСубконто.Валютный = Неопределено;

	СтрокаСубконто = Субконто.Добавить();
	СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады;
	СтрокаСубконто.Параметр = Истина;
	СтрокаСубконто.Количественный = Ложь;
	СтрокаСубконто.Суммовой = Истина;
	СтрокаСубконто.ТолькоОбороты = Ложь;
	СтрокаСубконто.Валютный = Неопределено;

	// Параметры
	Параметры = КолонкиПараметров.СкопироватьКолонки();
	СтрокаРезультата.Параметры = Параметры;

	СтрокаПараметра = Параметры.Добавить();
	СтрокаПараметра.Имя = "ИспользоватьОборотнуюНоменклатуру";
	СтрокаПараметра.Исключения = КолонкиИсключений.Скопировать();

		СтрокаИсключения = СтрокаПараметра.Исключения.Добавить();
		СтрокаИсключения.Счет = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ;
		СтрокаИсключения.СПодчиненными = Ложь;
		СтрокаИсключения.Значение = Ложь;

	СтрокаПараметра = Параметры.Добавить();
	СтрокаПараметра.Имя = "РазделятьПоСтавкамНДС";
	СтрокаПараметра.Исключения = КолонкиИсключений.Скопировать();

	////////////////////////////////////////////////////////////////
	// Денежные средства
	СтрокаРезультата = Результат.Добавить();

	// Счета
	Счета = КолонкиСчетов.СкопироватьКолонки();
	СтрокаРезультата.Счета = Счета;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.Касса;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.КассаОрганизации;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ОперационнаяКасса;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.КассаПлатежногоАгента;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.КассаОрганизацииВал;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ВалютныеСчета;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.СпециальныеСчета;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.Аккредитивы;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ЧековыеКнижки;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ДепозитныеСчета;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ПрочиеСпециальныеСчета;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.АккредитивыВал;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ДепозитныеСчетаВал;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ПрочиеСпециальныеСчетаВал;
	СтрокаСчета.СПодчиненными = Ложь;
	
	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ПереводыВПути;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ПереводыВПутиВал;
	СтрокаСчета.СПодчиненными = Ложь;
	
	// Субконто
	Субконто = КолонкиСубконто.СкопироватьКолонки();
	СтрокаРезультата.Субконто = Субконто;

	СтрокаСубконто = Субконто.Добавить();
	СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств;
	СтрокаСубконто.Параметр = "ВестиУчетПоСтатьямДДС";
	СтрокаСубконто.Количественный = Ложь;
	СтрокаСубконто.Суммовой = Истина;
	СтрокаСубконто.ТолькоОбороты = Истина;
	СтрокаСубконто.Валютный = Истина;

	// Параметры
	Параметры = КолонкиПараметров.СкопироватьКолонки();
	СтрокаРезультата.Параметры = Параметры;

	СтрокаПараметра = Параметры.Добавить();
	СтрокаПараметра.Имя = "ВестиУчетПоСтатьямДДС";
	СтрокаПараметра.Исключения = КолонкиИсключений.Скопировать();

	////////////////////////////////////////////////////////////////
	// Зарплата

	СтрокаРезультата = Результат.Добавить();

	// Счета
	Счета = КолонкиСчетов.СкопироватьКолонки();
	СтрокаРезультата.Счета = Счета;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
	СтрокаСчета.СПодчиненными = Истина;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.РасчетыПоДепонированнымСуммам;
	СтрокаСчета.СПодчиненными = Истина;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.РасходыНаОплатуТрудаБудущихПериодов;
	СтрокаСчета.СПодчиненными = Истина;

	// Субконто
	Субконто = КолонкиСубконто.СкопироватьКолонки();
	СтрокаРезультата.Субконто = Субконто;

	СтрокаСубконто = Субконто.Добавить();
	СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций;
	СтрокаСубконто.Параметр = "ВестиУчетПоРаботникам";
	СтрокаСубконто.Количественный = "Количественный";
	СтрокаСубконто.Суммовой = Истина;
	СтрокаСубконто.ТолькоОбороты = Ложь;
	СтрокаСубконто.Валютный = Ложь;

	// Параметры
	Параметры = КолонкиПараметров.СкопироватьКолонки();
	СтрокаРезультата.Параметры = Параметры;

	СтрокаПараметра = Параметры.Добавить();
	СтрокаПараметра.Имя = "ВестиУчетПоРаботникам";
	СтрокаПараметра.Исключения = КолонкиИсключений.Скопировать();

	////////////////////////////////////////////////////////////////
	// Раздельный учет НДС
	
	СтрокаРезультата = Результат.Добавить();

	// Счета
	Счета = КолонкиСчетов.СкопироватьКолонки();
	СтрокаРезультата.Счета = Счета;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымЦенностям;
	СтрокаСчета.СПодчиненными = Истина;

	// Исключения иерархии
	ИсключенияИерархии = Новый Массив;
	СтрокаРезультата.ИсключенияИерархии = ИсключенияИерархии;

	ИсключенияИерархии.Добавить(ПланыСчетов.Хозрасчетный.АкцизыПоОплаченнымМатериальнымЦенностям);
	ИсключенияИерархии.Добавить(ПланыСчетов.Хозрасчетный.НДСПоТоварамРеализованнымПоСтавке0);
	
	// Субконто
	Субконто = КолонкиСубконто.СкопироватьКолонки();
	СтрокаРезультата.Субконто = Субконто;

	СтрокаСубконто = Субконто.Добавить();
	СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СпособыУчетаНДС;
	СтрокаСубконто.Параметр = "ВестиУчетНДСПоСпособам";
	СтрокаСубконто.Количественный = Истина;
	СтрокаСубконто.Суммовой = Истина;
	СтрокаСубконто.ТолькоОбороты = Ложь;
	СтрокаСубконто.Валютный = Неопределено;

	// Параметры
	Параметры = КолонкиПараметров.СкопироватьКолонки();
	СтрокаРезультата.Параметры = Параметры;

	СтрокаПараметра = Параметры.Добавить();
	СтрокаПараметра.Имя = "ВестиУчетНДСПоСпособам";
	СтрокаПараметра.Исключения = КолонкиИсключений.Скопировать();
	
	////////////////////////////////////////////////////////////////
	// Элементы затрат
	
	ЭлементыЗатратНастройкаПараметровУчета.ДобавитьОписаниеРазрезовУчета(
		Результат, 
		КолонкиСчетов, 
		КолонкиСубконто, 
		КолонкиПараметров, 
		КолонкиИсключений);
	
	Возврат Результат;

КонецФункции

Функция СобытиеЖурналаРегистрацииПараметрыУчета() Экспорт

	Возврат НСтр("ru = 'Настройка параметров учета'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка())

КонецФункции

Процедура ДобавитьВПротоколИзменениеСубконто(ПротоколИзменений, ВидСубконто, Изменение)
	
	Если Изменение = 1 Тогда
		ШаблонТекста = НСтр("ru = 'Добавлено субконто ""%1""'");
	ИначеЕсли Изменение = -1 Тогда
		ШаблонТекста = НСтр("ru = 'Удалено субконто ""%1""'");
	Иначе
		ШаблонТекста = НСтр("ru = 'Изменено субконто ""%1""'");
	КонецЕсли;
	
	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, ВидСубконто);
	ПротоколИзменений.Добавить(Текст);
		
КонецПроцедуры

Процедура ДобавитьВПротоколИзменениеПризнакаУчета(ПротоколИзменений, ВидСубконто, ПризнакУчета, Изменение)
	
	// В интерфейсе признаки учета называем "видами"
	Если Изменение = 1 Тогда
		ШаблонТекста = НСтр("ru = 'У субконто ""%1"" установлен вид учета %2'");
	ИначеЕсли Изменение = -1 Тогда
		ШаблонТекста = НСтр("ru = 'У субконто ""%1"" снят вид учета %2'");
	Иначе
		ШаблонТекста = НСтр("ru = 'У субконто ""%1"" изменен вид учета %2'");
	КонецЕсли;
	
	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, ВидСубконто, ПризнакУчета);
	ПротоколИзменений.Добавить(Текст);
		
КонецПроцедуры

Функция ПолучитьЗначенияПараметровУчетаДляСчета(ПараметрыУчета, ПараметрыГруппыСчетов, Счет)

	Результат = Новый Структура;

	Для каждого СтрокаПараметра Из ПараметрыГруппыСчетов Цикл
		ЗначениеУстановлено = Ложь;
		Для каждого СтрокаИсключения Из СтрокаПараметра.Исключения Цикл
			Если СтрокаИсключения.Счет = Счет Тогда
				ЗначениеПараметра = СтрокаИсключения.Значение;
				ЗначениеУстановлено = Истина;
				Прервать;
			Иначе
				Если СтрокаИсключения.СПодчиненными
					И БухгалтерскийУчетПовтИсп.СчетВИерархии(Счет, СтрокаИсключения.Счет) Тогда

					ЗначениеПараметра = СтрокаИсключения.Значение;
					ЗначениеУстановлено = Истина;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		Если НЕ ЗначениеУстановлено Тогда
			ЗначениеПараметра = ПараметрыУчета[СтрокаПараметра.Имя];
		КонецЕсли;
		Результат.Вставить(СтрокаПараметра.Имя, ЗначениеПараметра);
	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция ПолучитьСтруктуруПризнаковУчетаСубконто()

	ПризнакиУчета = Новый Структура;
	ПризнакиУчета.Вставить("Количественный", НСтр("ru = 'Количественный'"));
	ПризнакиУчета.Вставить("Суммовой", НСтр("ru = 'Суммовой'"));
	ПризнакиУчета.Вставить("ТолькоОбороты", НСтр("ru = 'Только обороты'"));
	ПризнакиУчета.Вставить("Валютный", НСтр("ru = 'Валютный'"));

	Возврат ПризнакиУчета;

КонецФункции

Функция ПолучитьЗначениеПараметраУчетаСубконто(Параметр, ЗначенияПараметровУчетаДляСчета, СтрокаСчета)

	Если Параметр = Неопределено ИЛИ ТипЗнч(Параметр) = Тип("Булево") Тогда
		Возврат Параметр;
	Иначе
		Если ЗначенияПараметровУчетаДляСчета.Свойство(Параметр) Тогда
			Возврат ЗначенияПараметровУчетаДляСчета[Параметр];
		Иначе
			Возврат СтрокаСчета[Параметр];
		КонецЕсли;
	КонецЕсли;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ПЛАНАМИ ОБМЕНА

// Проверяет, используются ли планы обмена.
// Параметры:
//  ОтборРаспределеннаяИнформационнаяБаза - <Булево> - Если Истина, то проверяются
//  только распределенные информационные базы, если Ложь, то обмены с другими
//  программами.
Функция ИспользуютсяПланыОбмена(ОтборРаспределеннаяИнформационнаяБаза) Экспорт
      
     Результат = Ложь; 
      
     ПланыОбменаПодсистемы = Новый Массив; 
     ОбменДаннымиПереопределяемый.ПолучитьПланыОбмена(ПланыОбменаПодсистемы); 
	 
	 Для каждого ПланОбмена Из ПланыОбменаПодсистемы Цикл 
		 
		Если ПланОбмена.РаспределеннаяИнформационнаяБаза <> ОтборРаспределеннаяИнформационнаяБаза Тогда 
			Продолжить; 
		КонецЕсли; 
		   
		Запрос = Новый Запрос; 
		ТекстЗапроса =  
		"ВЫБРАТЬ 
		|     ПроверяемыйПланОбмена.Ссылка 
		|ИЗ 
		|     ПланОбмена.%1 КАК ПроверяемыйПланОбмена 
		|ГДЕ 
		|     ПроверяемыйПланОбмена.ПометкаУдаления = ЛОЖЬ И ПроверяемыйПланОбмена.ЭтотУзел = Ложь"; 

		ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, ПланОбмена.Имя); 
		Запрос.Текст = ТекстЗапроса; 
		РезультатЗапроса = Запрос.Выполнить(); 
		Если НЕ РезультатЗапроса.Пустой() Тогда 
		   Результат = Истина; 
		   Прервать; 
	   КонецЕсли; 
	   
     КонецЦикла; 
      
	Возврат Результат;    
	
КонецФункции

// Устанавливает значения общих констант загрузке данных из сервиса
//
Процедура УстановитьЗначенияКонстантПоставкиПослеЗагрузкиДанных() Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		// Значения общих констант устанавливаются при включении разделения по областям данных
		УстановитьОпциюСтандартныйИнтерфейсВМоделиСервиса();
		Константы.ПредпринимательВСервисеСтандартныйИнтерфейс.Установить(
			Константы.ПредпринимательВСервисе.Получить());
	Иначе
		Если Константы.ПредпринимательВСервисе.Получить() Тогда
			// Данные загружены из 1С:Предприниматель 2015
			Константы.ПредпринимательВСервисе.Установить(Ложь);
			Константы.ПредпринимательВСервисеСтандартныйИнтерфейс.Установить(
				Константы.ПредпринимательВСервисе.Получить());
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ИнтерфейсТаксиПростой") Тогда
			// Данные загружены из 1С:БизнесСтарт
			УстановитьРежимКомандногоИнтерфейса("ИнтерфейсТакси");
			ХранилищеОбщихНастроек.Сохранить(ВРег("ДатаСменыИнтерфейса"),,
				ТекущаяДатаСеанса());
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает значения общих констант при включении разделения
//
Процедура УстановитьЗначенияКонстантПоставкиПриВключенииРазделенияПоОбластямДанных() Экспорт
	
	Константы.ПредпринимательВСервисе.Установить(СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации());
	
КонецПроцедуры

// Обработчик обновления ИБ
//
Процедура ЗаполнитьКонстантуПредпринимательВСервисеПриОбновлении() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	МенеджерЗначения = Константы.ПредпринимательВСервисе.СоздатьМенеджерЗначения();
	МенеджерЗначения.Значение = ОбщегоНазначенияПовтИсп.РазделениеВключено() И СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации();
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения, Истина);
	
КонецПроцедуры

// Возвращает массив сообщений пользователю, из которого исключены служебные сообщения БСП,
// используемые для отображения прогресса выполнения фонового задания.
//
// Параметры:
//	УдалятьПолученные - Булево - Если Истина, то сообщения будут удалены из очереди после получения.
//	ИдентификаторЗадания - УникальныйИдентификатор, Неопределено - Идентификатор фонового задания,
//		сообшения из которого получать. Если не указан, то возвращает сообщения из основного сеанса.
//
// Возвращаемое значение:
//	ФиксированныйМассив - Массив сообщений пользователю.
//
Функция ПолучитьСообщенияПользователюБезСлужебных(УдалятьПолученные = Ложь, ИдентификаторЗадания = Неопределено) Экспорт

	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
		Если ФоновоеЗадание <> Неопределено Тогда
			СообщенияПользователю = ФоновоеЗадание.ПолучитьСообщенияПользователю(УдалятьПолученные);
		КонецЕсли;
	Иначе
		СообщенияПользователю = ПолучитьСообщенияПользователю(УдалятьПолученные);
	КонецЕсли;

	Результат = Новый Массив;

	Для Каждого СообщениеПользователю Из СообщенияПользователю Цикл
		Если СтрНачинаетсяС(СообщениеПользователю.Текст, "{СтандартныеПодсистемы.ДлительныеОперации}") Тогда
			// Это служебное сообщение БСП, его исключаем.
			Продолжить;
		КонецЕсли;
		Результат.Добавить(СообщениеПользователю);
	КонецЦикла;
	
	Возврат Новый ФиксированныйМассив(Результат);

КонецФункции

Процедура УстановитьОпциюВеденияУчетаПоОрганизациям() Экспорт
	
	// Установка опции ведения учета по организациям вызывается
	// из формы установки интерфейса и при обновлении конфигурации.
	
	ЭтоБазоваяВерсияКонфигурации = СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации();
	
	РежимТакси = Константы.ИнтерфейсТакси.Получить();
	Режим82    = Константы.ИнтерфейсВерсии82.Получить() ИЛИ Константы.ИнтерфейсВерсии77.Получить();
	
	УчетПоОрганизациям = НЕ ЭтоБазоваяВерсияКонфигурации ИЛИ Справочники.Организации.КоличествоОрганизаций() > 1;
	
	ВестиУчетПоОрганизациям = Константы.ВестиУчетПоОрганизациям.СоздатьМенеджерЗначения();
	ВестиУчетПоОрганизациям.Значение = УчетПоОрганизациям И РежимТакси;
	ВестиУчетПоОрганизациям.ОбменДанными.Загрузка = Истина;
	ВестиУчетПоОрганизациям.Записать();
	
	НеВестиУчетПоОрганизациям = Константы.НеВестиУчетПоОрганизациям.СоздатьМенеджерЗначения();
	НеВестиУчетПоОрганизациям.Значение = НЕ УчетПоОрганизациям И РежимТакси;
	НеВестиУчетПоОрганизациям.ОбменДанными.Загрузка = Истина;
	НеВестиУчетПоОрганизациям.Записать();
	
	ВестиУчетПоОрганизациям82 = Константы.ВестиУчетПоОрганизациям82.СоздатьМенеджерЗначения();
	ВестиУчетПоОрганизациям82.Значение = УчетПоОрганизациям И Режим82;
	ВестиУчетПоОрганизациям82.ОбменДанными.Загрузка = Истина;
	ВестиУчетПоОрганизациям82.Записать();
	
	НеВестиУчетПоОрганизациям82 = Константы.НеВестиУчетПоОрганизациям82.СоздатьМенеджерЗначения();
	НеВестиУчетПоОрганизациям82.Значение = НЕ УчетПоОрганизациям И Режим82;
	НеВестиУчетПоОрганизациям82.ОбменДанными.Загрузка = Истина;
	НеВестиУчетПоОрганизациям82.Записать();
	
КонецПроцедуры

Функция ДоступенПростойИнтерфейс() Экспорт
	
	Возврат ОбщегоНазначенияПовтИсп.РазделениеВключено() 
		И ВРЕГ(Метаданные.Имя) = ВРЕГ("БухгалтерияПредприятияБазовая1")
		И Константы.ПредпринимательВСервисе.Получить();
	
КонецФункции

Процедура УстановитьОпциюСтандартныйИнтерфейсВМоделиСервиса() Экспорт
	
	Константы.СтандартныйИнтерфейсВМоделиСервиса.Установить(
		ОбщегоНазначенияПовтИсп.РазделениеВключено()
		И НЕ ПолучитьФункциональнуюОпцию("ИнтерфейсТаксиПростой"));
	
КонецПроцедуры
	
Функция НастройкиСоставаИнтерфейсаКлиентскогоПриложения() Экспорт
	
	НастройкиСостава = Новый НастройкиСоставаИнтерфейсаКлиентскогоПриложения;
	
	Если ПолучитьФункциональнуюОпцию("ИнтерфейсТаксиПростой") Тогда
		Верх = Новый ГруппаНастройкиСоставаИнтерфейсаКлиентскогоПриложения;
		Верх.Добавить(Новый ЭлементНастройкиСоставаИнтерфейсаКлиентскогоПриложения("ПанельФункцийТекущегоРаздела"));
		Верх.Добавить(Новый ЭлементНастройкиСоставаИнтерфейсаКлиентскогоПриложения("ПанельИнструментов"));
		НастройкиСостава.Верх.Добавить(Верх);
		НастройкиСостава.Низ.Добавить(Новый ЭлементНастройкиСоставаИнтерфейсаКлиентскогоПриложения("ПанельОткрытых"));
	Иначе
		Верх = Новый ГруппаНастройкиСоставаИнтерфейсаКлиентскогоПриложения;
		Верх.Добавить(Новый ЭлементНастройкиСоставаИнтерфейсаКлиентскогоПриложения("ПанельИнструментов"));
		Верх.Добавить(Новый ЭлементНастройкиСоставаИнтерфейсаКлиентскогоПриложения("ПанельОткрытых"));
		НастройкиСостава.Верх.Добавить(Верх);
		НастройкиСостава.Лево.Добавить(Новый ЭлементНастройкиСоставаИнтерфейсаКлиентскогоПриложения("ПанельРазделов"));
	КонецЕсли;
	
	Возврат НастройкиСостава;
	
КонецФункции

Функция ДомашняяСтраницаСервиса() Экспорт
	
	ДомашняяСтраница = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.ИнформационныеСсылкиДляФорм.ДомашняяСтраница, "Наименование");
	Если ДомашняяСтраница = "Домашняя страница" Тогда
		ДомашняяСтраница = "";
	КонецЕсли;
	
	Возврат ДомашняяСтраница;
	
КонецФункции

Функция ВыбиратьВариантНачалаРаботы() Экспорт
	
	Возврат ИспользуетсяСервисРегистрации()
	
КонецФункции

Функция ИспользуетсяСервисРегистрации() Экспорт
	
	Возврат Обработки.РегистрацияОрганизации.Используется();
	
КонецФункции

Процедура ПодготовитьСтруктуруНавигацииПомощника()
	
	СтруктураНавигации = Обработки.РегистрацияОрганизации.СтруктураНавигацииПомощника();
	
	// Если навигация определена, то используем её.
	Если СтруктураНавигации <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗапускаПриложения = ВРег(ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("ПараметрЗапуска"));
	ПараметрЗапускаПомощника = "";
	Для Каждого КлючЗапуска Из Обработки.РегистрацияОрганизации.МассивКлючейЗапуска() Цикл
		Если СтрНайти(ПараметрЗапускаПриложения, КлючЗапуска) > 0 Тогда
			ПараметрЗапускаПомощника = КлючЗапуска;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ПараметрЗапускаПомощника) Тогда
		Обработки.РегистрацияОрганизации.ПодготовитьСтруктуруНавигацииПомощника(ПараметрЗапускаПомощника);
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоМедленныйРежимРаботы() Экспорт
	
	ОперативнаяПамять 	= ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("ОперативнаяПамять");
	СтрокаСоединенияИБ 	= ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("СтрокаСоединенияИнформационнойБазы");
	РекомендуемыйОбъем 	= ОбщегоНазначения.ОбщиеПараметрыБазовойФункциональности().РекомендуемыйОбъемОперативнойПамяти;
	
	ИБФайловая = СтрНайти(ВРег(СтрокаСоединенияИБ), "FILE=") = 1;

	// Проверка объема доступной оперативной памяти.
	Если ИБФайловая Тогда
		Если ЗначениеЗаполнено(ОперативнаяПамять)
			И ОперативнаяПамять < РекомендуемыйОбъем Тогда
			Возврат Истина;
		КонецЕсли;
	Иначе
		// В клиент-серверной базе данных проверим режим низкой скорости соединения.
		СкоростьТекущегоСоединения = ПолучитьСкоростьКлиентскогоСоединения();
		Возврат СкоростьТекущегоСоединения = СкоростьКлиентскогоСоединения.Низкая;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Раскладывает переданный список значений или массив на соотвествие по типам значений
//
// Параметры:
//  СписокОбъектов - Массив - ссылки на объекты метаданных.
//
// Возвращаемое значение:
//  Соответствие - соответствие в котором:
//   Ключ - Тип - тип объекта метаданных.
//   Значение - Массив - массив объектов типа.
//
Функция РазложитьСписокПоТипамОбъектов(СписокОбъектов) Экспорт
	
	СтруктураТипов = Новый Соответствие;
	
	Для Каждого Объект Из СписокОбъектов Цикл
		
		МетаданныеОбъекта = Объект.Метаданные();
		
		Если СтруктураТипов.Получить(МетаданныеОбъекта) = Неопределено Тогда
			
			МассивОбъектов = Новый Массив;
			СтруктураТипов.Вставить(МетаданныеОбъекта, МассивОбъектов);
			
		КонецЕсли;
		
		СтруктураТипов[МетаданныеОбъекта].Добавить(Объект);
		
	КонецЦикла;
	
	Возврат СтруктураТипов;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ НАСТРОЙКИ ПАРАМЕТРОВ УЧЕТА

// Функция возвращает новую структуру параметров учета.
//
// Параметры:
//
// Возвращаемое значение:
//	Структура - Новая структура параметров учета.
//
Функция СтруктураПараметровУчета() Экспорт

	ПараметрыУчета = Новый Структура(
		"ВестиПартионныйУчет,
		|СкладскойУчет,
		|ИспользоватьОборотнуюНоменклатуру,
		|РазделятьПоСтавкамНДС,
		|ВестиУчетПоСтатьямДДС,
		|ВестиУчетПоРаботникам,
		|УчетЗарплатыИКадровВоВнешнейПрограмме,
		|КадровыйУчет,
		|ВестиУчетНДСПоСпособам");
		
	Для Каждого ИмяПараметра Из ЭлементыЗатратНастройкаПараметровУчета.ПараметрыУчета() Цикл
		ПараметрыУчета.Вставить(ИмяПараметра);
	КонецЦикла;

	Возврат ПараметрыУчета;
	
КонецФункции


Функция НастройкиСообщенияОСтарыхРеквизитахНалоговой() Экспорт
	
	РасчетныеСчетаДляПроверки = Новый ТаблицаЗначений;
	РасчетныеСчетаДляПроверки.Колонки.Добавить("ИмяСекции",              Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)));
	РасчетныеСчетаДляПроверки.Колонки.Добавить("РасчетныйСчет",          Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(20)));
	РасчетныеСчетаДляПроверки.Колонки.Добавить("БИК",                    Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(9)));
	РасчетныеСчетаДляПроверки.Колонки.Добавить("НаименованиеБанка",      Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)));
	РасчетныеСчетаДляПроверки.Колонки.Добавить("НовыйРасчетныйСчет",     Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(20)));
	РасчетныеСчетаДляПроверки.Колонки.Добавить("НовыйБИК",               Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(9)));
	
	ДатаНачалаДействияРеквизитов = Дата(2017, 02, 06);
	
	РасчетныйСчетДляПроверки = РасчетныеСчетаДляПроверки.Добавить();
	РасчетныйСчетДляПроверки.ИмяСекции              = "РеквизитыМосква";
	РасчетныйСчетДляПроверки.РасчетныйСчет          = "40101810800000010041";
	РасчетныйСчетДляПроверки.БИК                    = "044583001";
	РасчетныйСчетДляПроверки.НовыйРасчетныйСчет     = "40101810045250010041";
	РасчетныйСчетДляПроверки.НовыйБИК               = "044525000";
	
	РасчетныйСчетДляПроверки = РасчетныеСчетаДляПроверки.Добавить();
	РасчетныйСчетДляПроверки.ИмяСекции              = "РеквизитыМО";
	РасчетныйСчетДляПроверки.РасчетныйСчет          = "40101810600000010102";
	РасчетныйСчетДляПроверки.БИК                    = "044583001";
	РасчетныйСчетДляПроверки.НовыйРасчетныйСчет     = "40101810845250010102";
	РасчетныйСчетДляПроверки.НовыйБИК               = "044525000";
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Параметры.Вставить("ТаблицаСчетов", РасчетныеСчетаДляПроверки);
	Запрос.Параметры.Вставить("ДатаНачалаДействия", ДатаНачалаДействияРеквизитов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаСчетов.ИмяСекции,
	|	ТаблицаСчетов.РасчетныйСчет,
	|	ТаблицаСчетов.БИК,
	|	ТаблицаСчетов.НовыйРасчетныйСчет,
	|	ТаблицаСчетов.НовыйБИК
	|ПОМЕСТИТЬ ТаблицаСчетовИсходная
	|ИЗ
	|	&ТаблицаСчетов КАК ТаблицаСчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСчетов.ИмяСекции,
	|	БанковскиеСчета.Ссылка КАК НовыйРасчетныйСчетСсылка,
	|	ТаблицаСчетов.НовыйРасчетныйСчет,
	|	ТаблицаСчетов.НовыйБИК,
	|	БанковскиеСчета.Владелец КАК НовыйКонтрагентСсылка
	|ПОМЕСТИТЬ ТаблицаСчетовНовых
	|ИЗ
	|	ТаблицаСчетовИсходная КАК ТаблицаСчетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ПО ТаблицаСчетов.НовыйРасчетныйСчет = БанковскиеСчета.НомерСчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Банки КАК Банки
	|		ПО ТаблицаСчетов.НовыйБИК = Банки.Код
	|			И (БанковскиеСчета.Банк = Банки.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСчетов.ИмяСекции,
	|	БанковскиеСчета.Ссылка КАК РасчетныйСчетСсылка,
	|	ТаблицаСчетов.НовыйРасчетныйСчет,
	|	ТаблицаСчетов.НовыйБИК,
	|	БанковскиеСчета.Владелец КАК КонтрагентСсылка,
	|	ТаблицаСчетов.РасчетныйСчет,
	|	ТаблицаСчетов.БИК
	|ПОМЕСТИТЬ ТаблицаСчетовСтарых
	|ИЗ
	|	ТаблицаСчетовИсходная КАК ТаблицаСчетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ПО ТаблицаСчетов.РасчетныйСчет = БанковскиеСчета.НомерСчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Банки КАК Банки
	|		ПО ТаблицаСчетов.БИК = Банки.Код
	|			И (БанковскиеСчета.Банк = Банки.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСчетовСтарых.ИмяСекции,
	|	ТаблицаСчетовСтарых.КонтрагентСсылка,
	|	ТаблицаСчетовСтарых.РасчетныйСчетСсылка,
	|	ТаблицаСчетовСтарых.РасчетныйСчет,
	|	ТаблицаСчетовСтарых.БИК,
	|	ТаблицаСчетовНовых.НовыйРасчетныйСчетСсылка,
	|	ТаблицаСчетовСтарых.НовыйРасчетныйСчет,
	|	ТаблицаСчетовСтарых.НовыйБИК
	|ПОМЕСТИТЬ ТаблицаСчетов
	|ИЗ
	|	ТаблицаСчетовСтарых КАК ТаблицаСчетовСтарых
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСчетовНовых КАК ТаблицаСчетовНовых
	|		ПО ТаблицаСчетовСтарых.НовыйРасчетныйСчет = ТаблицаСчетовНовых.НовыйРасчетныйСчет
	|			И ТаблицаСчетовСтарых.НовыйБИК = ТаблицаСчетовНовых.НовыйБИК
	|			И ТаблицаСчетовСтарых.КонтрагентСсылка = ТаблицаСчетовНовых.НовыйКонтрагентСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаСчетов.ИмяСекции,
	|	ПлатежноеПоручение.Ссылка КАК ПлатежноеПоручение,
	|	ПлатежноеПоручение.Дата КАК ДатаПлатежногоПоручения,
	|	ПлатежноеПоручение.Организация КАК Организация,
	|	ПлатежноеПоручение.Организация.Наименование КАК НаименованиеОрганизации,
	|	ТаблицаСчетов.КонтрагентСсылка,
	|	ТаблицаСчетов.РасчетныйСчетСсылка,
	|	ТаблицаСчетов.РасчетныйСчет,
	|	ТаблицаСчетов.БИК,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручение.Дата >= &ДатаНачалаДействия
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СтарыйСчетВНовомПериоде
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаСчетов КАК ТаблицаСчетов
	|		ПО ПлатежноеПоручение.СчетКонтрагента = ТаблицаСчетов.РасчетныйСчетСсылка
	|ГДЕ
	|	НЕ ПлатежноеПоручение.ПометкаУдаления
	|	И ПлатежноеПоручение.ПеречислениеВБюджет
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПлатежноеПоручение.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТаблицаСчетов.ИмяСекции
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаСчетов КАК ТаблицаСчетов
	|		ПО ПлатежноеПоручение.СчетКонтрагента = ТаблицаСчетов.НовыйРасчетныйСчетСсылка
	|ГДЕ
	|	НЕ ПлатежноеПоручение.ПометкаУдаления
	|	И ПлатежноеПоручение.ПеречислениеВБюджет";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	// Предпоследняя таблица в запросе
	ПлатежныеПорученияСоСтарымиСчетами = РезультатЗапроса[РезультатЗапроса.Количество() - 2].Выгрузить();
	
	// Последняя таблица в запросе
	ПлатежныеПорученияСНовымиСчетами = РезультатЗапроса[РезультатЗапроса.Количество() - 1].Выгрузить();
	
	НастройкиСообщения = Новый Структура();
	
	Если ПлатежныеПорученияСоСтарымиСчетами.Количество() = 0 Тогда
		// В информационной базе нет плохих счетов
		Возврат НастройкиСообщения;
	КонецЕсли;
	
	СтарыеПлатежныеПорученияВНовомПериоде = ПлатежныеПорученияСоСтарымиСчетами.Скопировать(Новый Структура("СтарыйСчетВНовомПериоде", Истина));
	
	Если СтарыеПлатежныеПорученияВНовомПериоде.Количество() > 0 Тогда
		
		// Разделим таблицу по именам секций
		ИменаСекций = СтарыеПлатежныеПорученияВНовомПериоде.Скопировать(, "ИмяСекции");
		ИменаСекций.Свернуть("ИмяСекции", "");
		
		Для Каждого СтрокаСекции Из ИменаСекций Цикл
			НастройкиСообщения.Вставить(СтрокаСекции.ИмяСекции,
				СтарыеПлатежныеПорученияВНовомПериоде.Скопировать(Новый Структура("ИмяСекции", СтрокаСекции.ИмяСекции)));
		КонецЦикла;
		
	Иначе
		
		ИменаСекций = ПлатежныеПорученияСоСтарымиСчетами.Скопировать(, "ИмяСекции");
		ИменаСекций.Свернуть("ИмяСекции", "");
		
		Для Каждого СтрокаСекции Из ИменаСекций Цикл
			НастройкиСообщения.Вставить(СтрокаСекции.ИмяСекции, Новый ТаблицаЗначений);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат НастройкиСообщения;
	
КонецФункции
