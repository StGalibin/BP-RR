////////////////////////////////////////////////////////////////////////////////
// ПоступлениеНаРасчетныйСчетФормы: клиент-серверные процедуры и функции, вызываемые из форм
// документа "Поступление на расчетный счет".
//  
////////////////////////////////////////////////////////////////////////////////

#Область ОбщиеПроцедурыИФункции

Функция ДокументМожетБытьОформленВВалюте(ВидОперации) Экспорт
	
	Возврат ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаРаботником")
		  И ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаКонтрагентом")
		  И ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты");
	
КонецФункции

Функция ФормаДокументаОднострочная(Форма) Экспорт
	
	Возврат СтрНайти(Форма.ИмяФормы, "ФормаДокументаОднострочная") > 0;
	
КонецФункции

Функция ФормаРасшифровкиПлатежа(Форма) Экспорт
	
	Возврат СтрНайти(Форма.ИмяФормы, "ФормаРасшифровкаПлатежа") > 0;
	
КонецФункции

Функция РеквизитДокумента(Форма, ИмяРеквизита) Экспорт
	
	Если ФормаРасшифровкиПлатежа(Форма) Тогда
		// Это дополнительная форма редактирования табличной части.
		// Необходимые реквизиты документа хранятся в ней в качестве отдельных реквизитов.
		Объект = Форма;
	Иначе
		// Это основная форма документа, у нее есть реквизит Объект.
		Объект = Форма.Объект;
	КонецЕсли;
	
	Возврат Объект[ИмяРеквизита];
	
КонецФункции

Функция ПолучитьРасшифровкаПлатежа(Форма) Экспорт
	
	Возврат РеквизитДокумента(Форма, "РасшифровкаПлатежа");
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс

Функция ПараметрыУстановкиСвойствСубконто(Форма, Префикс = "", Постфикс = "") Экспорт
	
	Результат = БухгалтерскийУчетКлиентСервер.ПараметрыУстановкиСвойствСубконтоПоШаблону(
		Префикс + "СубконтоКт" + Постфикс,
		Префикс + "ПодразделениеКт" + Постфикс,
		"СубконтоКт",
		"ПодразделениеКт",
		"СчетУчетаРасчетовСКонтрагентом");
	
	Результат.ДопРеквизиты.Вставить("Организация", Форма.Объект.Организация);
	
	Если Постфикс = "УслугиБанка" Тогда
		Результат.ЗначенияПоУмолчанию.Вставить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы"),
			ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.РасходыНаУслугиБанков"));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыВыбораПолейСубконто(Форма) Экспорт
	
	Объект     = Форма.Объект;
	Элементы   = Форма.Элементы;
	Префикс    = "";
	Постфикс   = "";
	
	ОбъектОбработки = Неопределено;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление") Тогда
		Постфикс = "Прочие";
		ОбъектОбработки = Объект;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.Инкассация") Тогда
		Если ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
			Постфикс = "Инкассация";
			ОбъектОбработки = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма);
		Иначе
			Префикс         = "РасшифровкаПлатежаИнкассация";
			ОбъектОбработки = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма, Префикс);
		КонецЕсли;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам") Тогда
		Если НЕ ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ФормаРасшифровкиПлатежа(Форма)
			И СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
			Постфикс = "УслугиБанка";
			ОбъектОбработки = Объект;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый Структура("Объект, Префикс, Постфикс", ОбъектОбработки, Префикс, Постфикс);
	
КонецФункции

Функция ТекущиеПараметрыОбъекта(Форма) Экспорт
	
	ПараметрыОбъекта = Новый Структура(
		"Дата, ВидОперации, Организация, СчетОрганизации, ВалютаДокумента,
		|Контрагент, СчетКонтрагента, СчетБанк, ОтражатьРазницуВКурсеВСоставеОперационныхРасходов");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Форма.Объект);
	
	Если ФормаДокументаОднострочная(Форма) Тогда
		ПараметрыОбъекта.Вставить("ДоговорКонтрагента",            Форма.РасшифровкаПлатежаДоговорКонтрагента);
	Иначе
		ПараметрыОбъекта.Вставить("ДоговорКонтрагента",
			?(Форма.СвойстваПлатежа = Неопределено, Неопределено,  Форма.СвойстваПлатежа.ДоговорКонтрагента));
	КонецЕсли;
	
	ПараметрыОбъекта.Вставить("ВалютаРегламентированногоУчета", Форма.ВалютаРегламентированногоУчета);
	ПараметрыОбъекта.Вставить("ОплатаВВалюте",                  Форма.ОплатаВВалюте);
	ПараметрыОбъекта.Вставить("КурсДокумента",                  Форма.КурсДокумента);
	ПараметрыОбъекта.Вставить("КратностьДокумента",             Форма.КратностьДокумента);
	ПараметрыОбъекта.Вставить("ПрименениеУСН",                  Форма.ПрименениеУСН);
	ПараметрыОбъекта.Вставить("ПрименяетсяОсобыйПорядокНалогообложения", Форма.ПрименяетсяОсобыйПорядокНалогообложения);
	
	СтатьяДДС = УчетДенежныхСредствВызовСервера.СтатьяДДСПоУмолчанию(Форма.Объект.ВидОперации);
	Если НЕ ЗначениеЗаполнено(СтатьяДДС) Тогда
		Если ФормаДокументаОднострочная(Форма) Тогда
			ПараметрыОбъекта.Вставить("СтатьяДвиженияДенежныхСредств", Форма.РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств);
		Иначе
			ПараметрыОбъекта.Вставить("СтатьяДвиженияДенежныхСредств",
			?(Форма.СвойстваПлатежа = Неопределено, Неопределено, Форма.СвойстваПлатежа.СтатьяДвиженияДенежныхСредств));
		КонецЕсли;
	Иначе
		ПараметрыОбъекта.Вставить("СтатьяДвиженияДенежныхСредств", СтатьяДДС);
	КонецЕсли;
	
	Возврат ПараметрыОбъекта;
	
КонецФункции

Процедура ОбновитьИтоги(Форма) Экспорт
	
	Если ФормаДокументаОднострочная(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	РасшифровкаПлатежа = ПолучитьРасшифровкаПлатежа(Форма);
	
	ИтогоСуммаПлатежа = РасшифровкаПлатежа.Итог("СуммаПлатежа");
	ИтогоВсегоНДС     = РасшифровкаПлатежа.Итог("СуммаНДС");
	
	Если НЕ ФормаРасшифровкиПлатежа(Форма) Тогда
		Форма.ИтогоСуммаПлатежа = РасшифровкаПлатежа.Итог("СуммаПлатежа");
		Форма.ИтогоВсегоНДС     = РасшифровкаПлатежа.Итог("СуммаНДС");
	КонецЕсли;
	
	Элементы.РасшифровкаПлатежаСуммаПлатежа.ТекстПодвала = Формат(ИтогоСуммаПлатежа, "ЧЦ=12; ЧДЦ=2");
	Элементы.РасшифровкаПлатежаСуммаНДС.ТекстПодвала     = Формат(ИтогоВсегоНДС,     "ЧЦ=12; ЧДЦ=2");
	
КонецПроцедуры

Процедура ОбновитьИтогиУСН(Форма) Экспорт
	
	Если Форма.ПрименениеУСН Тогда
		Объект = Форма.Объект;
		Если ФормаДокументаОднострочная(Форма) Тогда
			Объект.Графа5_УСН = Форма.РасшифровкаПлатежаДоходыУСН;
		Иначе
			РасшифровкаПлатежа = ПолучитьРасшифровкаПлатежа(Форма);
			Объект.Графа5_УСН = РасшифровкаПлатежа.Итог("ДоходыУСН");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВидимостьДоступностьПолейПриИзмененииСпособаПогашения(Форма) Экспорт
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	НазваниеТабличнойЧасти = НазваниеТаблицыРасшифровкиПлатежа(Объект.ВидОперации);
	Если НазваниеТабличнойЧасти <> "РасшифровкаПлатежа" Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПлатежа = РасшифровкаПлатежаТекущиеДанные(Форма);
	
	Элементы.СчетУчетаРасчетовСКонтрагентом.Доступность =
		СтрокаПлатежа.СпособПогашенияЗадолженности <> ПредопределенноеЗначение("Перечисление.СпособыПогашенияЗадолженности.НеПогашать");
	Элементы.ГруппаСделка.Видимость = СтрокаПлатежа.СпособПогашенияЗадолженности = ПредопределенноеЗначение("Перечисление.СпособыПогашенияЗадолженности.ПоДокументу");
	
КонецПроцедуры

Функция НазваниеТаблицыРасшифровкиПлатежа(ВидОперации) Экспорт
	Перем НазваниеТабличнойЧасти;
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.Инкассация") Тогда
		НазваниеТабличнойЧасти = Неопределено;
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам") Тогда
		НазваниеТабличнойЧасти = "РасшифровкаПлатежаПлатежныеКарты";
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты") Тогда
		НазваниеТабличнойЧасти = "РасшифровкаПлатежаПокупкаВалюты";
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты") Тогда
		НазваниеТабличнойЧасти = "РасшифровкаПлатежаПродажаВалюты";
	Иначе
		НазваниеТабличнойЧасти = "РасшифровкаПлатежа";
	КонецЕсли;
	
	Возврат НазваниеТабличнойЧасти;
	
КонецФункции

Процедура СформироватьПрочееТекстДоходыУСН(Форма) Экспорт
	
	Если НЕ Форма.ПрименениеУСН Тогда
		Форма.ПрочееТекстДоходыУСН = "";
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	ВалютаРегл = Форма.ВалютаРегламентированногоУчета;
	СтрФорматСумм = "Л=ru; ЧРД=,; ЧРГ=' '; ЧН=0; ЧГ=3,0";
	
	СуммаДоходыВсего = Объект.Графа4_УСН;
	
	ТекстДоходы = "";
	
	СуммаДоходыНеПринимаемые = СуммаДоходыВсего - Объект.Графа5_УСН;
	Если СуммаДоходыВсего = 0 Тогда
		ТекстДоходы = НСтр("ru = 'Сумма документа не указана'");
	ИначеЕсли СуммаДоходыНеПринимаемые = 0 Тогда
		ТекстДоходы = НСтр("ru = 'Доходы принимаются полностью'");
	ИначеЕсли Объект.Графа5_УСН = 0 Тогда
		ТекстДоходы = НСтр("ru = 'Принимаемые доходы отсутствуют'");
	Иначе
		ТекстДоходы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Непринимаемые доходы: %1 %2'"),
			Формат(СуммаДоходыНеПринимаемые, СтрФорматСумм), ВалютаРегл);
	КонецЕсли;
		
	Форма.ПрочееТекстДоходыУСН = ТекстДоходы;
	
КонецПроцедуры

Процедура ЗаполнитьОтражениеСтрокиВУСН(СтрокаПлатеж, Форма) Экспорт
	
	Если Форма.ПрименениеУСН Тогда
		ПараметрыУСН = УчетУСНКлиентСервер.ПараметрыФормыДокументаДляУСН(Форма);
		ДанныеСтроки = Новый Структура("СуммаПлатежа, ДоходыУСН, СчетУчетаРасчетовСКонтрагентом");
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаПлатеж);
		ПоступлениеНаРасчетныйСчетФормыВызовСервера.ЗаполнитьОтражениеСтрокиВУСННаСервере(ДанныеСтроки, ПараметрыУСН);
		ЗаполнитьЗначенияСвойств(СтрокаПлатеж, ДанныеСтроки);
		
		ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(Форма, Истина, СтрокаПлатеж);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПустыеКурсыВалют(СтрокаПлатеж, Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Форма.КурсДокумента      = ?(ЗначениеЗаполнено(Форма.КурсДокумента),      Форма.КурсДокумента,      1);
	Форма.КратностьДокумента = ?(ЗначениеЗаполнено(Форма.КратностьДокумента), Форма.КратностьДокумента, 1);
	
	Если СтрокаПлатеж <> Неопределено Тогда
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты") Тогда
			СтрокаПлатеж.КурсВзаиморасчетов      = ?(ЗначениеЗаполнено(СтрокаПлатеж.КурсВзаиморасчетов),      СтрокаПлатеж.КурсВзаиморасчетов,      Форма.КурсДокумента);
			СтрокаПлатеж.КратностьВзаиморасчетов = ?(ЗначениеЗаполнено(СтрокаПлатеж.КратностьВзаиморасчетов), СтрокаПлатеж.КратностьВзаиморасчетов, Форма.КратностьДокумента);
		Иначе
			СтрокаПлатеж.КурсВзаиморасчетов      = ?(ЗначениеЗаполнено(СтрокаПлатеж.КурсВзаиморасчетов),      СтрокаПлатеж.КурсВзаиморасчетов,      1);
			СтрокаПлатеж.КратностьВзаиморасчетов = ?(ЗначениеЗаполнено(СтрокаПлатеж.КратностьВзаиморасчетов), СтрокаПлатеж.КратностьВзаиморасчетов, 1);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьСуммуНДС(СтрокаПлатеж) Экспорт
	
	ЗначениеСтавкиНДС     = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаПлатеж.СтавкаНДС);
	СтрокаПлатеж.СуммаНДС = СтрокаПлатеж.СуммаПлатежа * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);
	
КонецПроцедуры

Процедура РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, Форма, Знач ПересчитатьКурсВзаиморасчетов = Ложь) Экспорт
	
	Объект = Форма.Объект;
	ЗаполнитьПустыеКурсыВалют(СтрокаПлатеж, Форма);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты") Тогда
		Если ПересчитатьКурсВзаиморасчетов Тогда
			СтрокаПлатеж.КурсВзаиморасчетов =
				?(СтрокаПлатеж.СуммаВзаиморасчетов = 0, 0, Окр(СтрокаПлатеж.СуммаПлатежа / СтрокаПлатеж.СуммаВзаиморасчетов, 4));
		Иначе
			СтрокаПлатеж.СуммаПлатежа = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
											СтрокаПлатеж.СуммаВзаиморасчетов, СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов,
											Объект.ВалютаДокумента,
											СтрокаПлатеж.КурсВзаиморасчетов,      Форма.КурсДокумента,
											СтрокаПлатеж.КратностьВзаиморасчетов, Форма.КратностьДокумента);
		КонецЕсли;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты") Тогда
		Объект.КурсНаДатуПриобретенияРеализацииВалюты = ?(
			Объект.КурсНаДатуПриобретенияРеализацииВалюты = 0, Форма.КурсДокумента, Объект.КурсНаДатуПриобретенияРеализацииВалюты);
		Если ПересчитатьКурсВзаиморасчетов Тогда
			СтрокаПлатеж.КурсВзаиморасчетов =
				?(СтрокаПлатеж.СуммаПлатежа = 0, 0, Окр(СтрокаПлатеж.СуммаВзаиморасчетов / СтрокаПлатеж.СуммаПлатежа, 4));
		Иначе
			СтрокаПлатеж.СуммаВзаиморасчетов = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
											СтрокаПлатеж.СуммаПлатежа, Объект.ВалютаДокумента,
											СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов,
											СтрокаПлатеж.КурсВзаиморасчетов,      1,
											СтрокаПлатеж.КратностьВзаиморасчетов, 1);
		КонецЕсли;
	Иначе
		СтрокаПлатеж.СуммаВзаиморасчетов = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
											СтрокаПлатеж.СуммаПлатежа, Объект.ВалютаДокумента,
											СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов,
											Форма.КурсДокумента,      СтрокаПлатеж.КурсВзаиморасчетов,
											Форма.КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНадписиВРасшифровке(СтрокаПлатеж) Экспорт
	
	СтрокаПлатеж.НадписьКурс   = НСтр("ru = 'Курс'");
	СтрокаПлатеж.НадписьСумма  = НСтр("ru = 'Сумма'");
	
КонецПроцедуры

#КонецОбласти

#Область РасшифровкаПлатежа

Функция СтруктураРеквизитовРасшифровкаПлатежа()
	
	Возврат Новый Структура("ДоговорКонтрагента,
		|СпособПогашенияЗадолженности,
		|Сделка,
		|СтатьяДвиженияДенежныхСредств,
		|КурсВзаиморасчетов,
		|КратностьВзаиморасчетов,
		|СуммаПлатежа,
		|СуммаУслуг,
		|СуммаВзаиморасчетов,
		|СтавкаНДС,
		|СуммаНДС,
		|СчетНаОплату,
		|СчетУчетаРасчетовСКонтрагентом,
		|СчетУчетаРасчетовПоАвансам,
		|СубконтоКт1,
		|СубконтоКт2,
		|СубконтоКт3,
		|КурсНаДатуПриобретенияРеализацииВалюты,
		|ДоговорКонтрагентаВалютаВзаиморасчетов,
		|ПодразделениеКт,
		|ПорядокОтраженияАванса,
		|ПолеОтражениеАванса,
		|ДоходыУСН"
		);
	
КонецФункции

Процедура ЗаполнитьРеквизитыРасшифровкаПлатежа(Форма, ЗаполнитьРеквизитыФормы = Ложь, СтрокаПлатежа = Неопределено) Экспорт
	
	Если НЕ ЗаполнитьРеквизитыФормы И НЕ Форма.Модифицированность Тогда
		// Если ничего не менялось в документе, то и программно не модифицируем.
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	
	Если НЕ ФормаДокументаОднострочная(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		Если НЕ ЗаполнитьРеквизитыФормы Тогда
			Возврат;
		ИначеЕсли СтрокаПлатежа = Неопределено Тогда
			Возврат;
		КонецЕсли;
	ИначеЕсли Объект.РасшифровкаПлатежа.Количество() > 1 Тогда
		Если НЕ ЗаполнитьРеквизитыФормы И СтрокаПлатежа = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Для каждого КлючИЗначение Из СтруктураРеквизитовРасшифровкаПлатежа() Цикл
		Если ЗаполнитьРеквизитыФормы Тогда
			Если СтрокаПлатежа <> Неопределено Тогда
				СтрокаПлатежа.Свойство(КлючИЗначение.Ключ, Форма["РасшифровкаПлатежа" + КлючИЗначение.Ключ]);
			Иначе
				Форма["РасшифровкаПлатежа" + КлючИЗначение.Ключ] = Объект.РасшифровкаПлатежа[0][КлючИЗначение.Ключ];
			КонецЕсли;
		Иначе
			Объект.РасшифровкаПлатежа[0][КлючИЗначение.Ключ] = Форма["РасшифровкаПлатежа" + КлючИЗначение.Ключ];
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЗаполнитьРеквизитыФормы Тогда
		Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
			Объект.СуммаДокумента = Форма.РасшифровкаПлатежаСуммаПлатежа;
			Объект.СуммаУслуг     = Форма.РасшифровкаПлатежаСуммаУслуг;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеРасшифровкиПлатежаОднострочнойФормы(Форма) Экспорт
	
	Результат = Новый Структура();
	
	// Реквизиты табличной части документа
	Результат.Вставить("ДоговорКонтрагента",             Форма.РасшифровкаПлатежаДоговорКонтрагента);
	Результат.Вставить("СпособПогашенияЗадолженности",   Форма.РасшифровкаПлатежаСпособПогашенияЗадолженности);
	Результат.Вставить("Сделка",                         Форма.РасшифровкаПлатежаСделка);
	Результат.Вставить("СуммаПлатежа",                   Форма.Объект.СуммаДокумента);
	Результат.Вставить("СуммаУслуг",                     Форма.Объект.СуммаУслуг);
	Результат.Вставить("КурсВзаиморасчетов",             Форма.РасшифровкаПлатежаКурсВзаиморасчетов);
	Результат.Вставить("КратностьВзаиморасчетов",        Форма.РасшифровкаПлатежаКратностьВзаиморасчетов);
	Результат.Вставить("СуммаВзаиморасчетов",            Форма.РасшифровкаПлатежаСуммаВзаиморасчетов);
	Результат.Вставить("СтавкаНДС",                      Форма.РасшифровкаПлатежаСтавкаНДС);
	Результат.Вставить("СуммаНДС",                       Форма.РасшифровкаПлатежаСуммаНДС);
	Результат.Вставить("СчетНаОплату",                   Форма.РасшифровкаПлатежаСчетНаОплату);
	Результат.Вставить("СтатьяДвиженияДенежныхСредств",  Форма.РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств);
	Результат.Вставить("СчетУчетаРасчетовСКонтрагентом", Форма.РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом);
	Результат.Вставить("СчетУчетаРасчетовПоАвансам",     Форма.РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам);
	Результат.Вставить("СубконтоКт1",                    Форма.РасшифровкаПлатежаСубконтоКт1);
	Результат.Вставить("СубконтоКт2",                    Форма.РасшифровкаПлатежаСубконтоКт2);
	Результат.Вставить("СубконтоКт3",                    Форма.РасшифровкаПлатежаСубконтоКт3);
	Результат.Вставить("ПодразделениеКт",                Форма.РасшифровкаПлатежаПодразделениеКт);
	Результат.Вставить("ПорядокОтраженияАванса",         Форма.РасшифровкаПлатежаПорядокОтраженияАванса);
	Результат.Вставить("ДоходыУСН",                      Форма.РасшифровкаПлатежаДоходыУСН);
	Результат.Вставить("КурсНаДатуПриобретенияРеализацииВалюты",     Форма.РасшифровкаПлатежаКурсНаДатуПриобретенияРеализацииВалюты);
	
	// Временные реквизиты формы
	Результат.Вставить("ДоговорКонтрагентаВалютаВзаиморасчетов",     Форма.РасшифровкаПлатежаДоговорКонтрагентаВалютаВзаиморасчетов);
	Результат.Вставить("ДоговорКонтрагентаРасчетыВУсловныхЕдиницах", Форма.ЕстьРасчетыВУсловныхЕдиницах);
	Результат.Вставить("ПолеОтражениеАванса",                        Форма.РасшифровкаПлатежаПолеОтражениеАванса);
	
	Возврат Результат;
	
КонецФункции

Функция РасшифровкаПлатежаТекущиеДанные(Форма, ТабличнаяЧасть = "РасшифровкаПлатежа") Экспорт
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Результат = Неопределено;
	Если ФормаДокументаОднострочная(Форма) Тогда
		Результат = ДанныеРасшифровкиПлатежаОднострочнойФормы(Форма);
	Иначе
		РасшифровкаПлатежа = ПолучитьРасшифровкаПлатежа(Форма);
		Если Элементы.Найти(ТабличнаяЧасть) <> Неопределено
			И Элементы[ТабличнаяЧасть].ТекущаяСтрока <> Неопределено Тогда
			Результат = РасшифровкаПлатежа.НайтиПоИдентификатору(Элементы[ТабличнаяЧасть].ТекущаяСтрока);
		КонецЕсли;
		
		Если Результат = Неопределено Тогда
			Если РасшифровкаПлатежа.Количество() = 0 Тогда
				РасшифровкаПлатежа.Добавить();
			КонецЕсли;
			
			Результат = РасшифровкаПлатежа[0];
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПустаяСтруктураСвойстваПлатежа() Экспорт
	
	СвойстваПлатежа = Новый Структура("ДоговорКонтрагента,
		|СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам,
		|ДоговорКонтрагентаВалютаВзаиморасчетов, ДоговорКонтрагентаРасчетыВУсловныхЕдиницах,
		|ВалютаДокумента,
		|СпособПогашенияЗадолженности, СтавкаНДС,
		|КурсВзаиморасчетов, КратностьВзаиморасчетов,
		|КурсНаДатуПриобретенияРеализацииВалюты,
		|ПорядокОтраженияАванса,
		|СтатьяДвиженияДенежныхСредств");
	
	Возврат СвойстваПлатежа;
	
КонецФункции

Функция СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, ПолучатьДоговор) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПараметрыОбъекта.ВидОперации)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.Организация)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.Дата)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.Контрагент)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.ВалютаДокумента)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.ДоговорКонтрагента) И НЕ ПолучатьДоговор Тогда
		
		СвойстваПлатежа = ПустаяСтруктураСвойстваПлатежа();
		СвойстваПлатежа.СпособПогашенияЗадолженности = ПредопределенноеЗначение("Перечисление.СпособыПогашенияЗадолженности.Автоматически");
		
		Возврат СвойстваПлатежа;
		
	Иначе
		
		ПараметрыПлатежа = Новый Структура("ВидОперации, Организация, Дата, Контрагент, ДоговорКонтрагента,
			|ПрименениеУСН, ПрименяетсяОсобыйПорядокНалогообложения,
			|ОтражатьРазницуВКурсеВСоставеОперационныхРасходов,
			|СтатьяДвиженияДенежныхСредств");
		
		ЗаполнитьЗначенияСвойств(ПараметрыПлатежа, ПараметрыОбъекта);
		
		Если ПараметрыОбъекта.ВалютаДокумента = ПараметрыОбъекта.ВалютаРегламентированногоУчета Тогда
			ПараметрыПлатежа.Вставить("ОплатаВВалюте",   Ложь);
			ПараметрыПлатежа.Вставить("ВалютаДокумента", ПараметрыОбъекта.ВалютаРегламентированногоУчета);
		Иначе
			ПараметрыПлатежа.Вставить("ОплатаВВалюте",   Истина);
			ПараметрыПлатежа.Вставить("ВалютаДокумента", ПараметрыОбъекта.ВалютаДокумента);
		КонецЕсли;
		
		Возврат ПоступлениеНаРасчетныйСчетФормыВызовСервера.СвойстваСтрокРасшифровкиПлатежаСервер(ПараметрыПлатежа, ПолучатьДоговор);
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СчетаУчета

Функция НачатьЗаполнениеСчетовУчета(ПричиныИзменения, Объект = Неопределено, СтрокаСписка = Неопределено, КонтейнерОбъект = Неопределено, КонтейнерСтрокаСписка = Неопределено) Экспорт
	
	// Код этой функции сформирован автоматически с помощью СчетаУчетаВДокументах.КодФункцииНачатьЗаполнениеСчетовУчета()
	
	ПараметрыЗаполнения = СчетаУчетаВДокументахКлиентСервер.НовыйПараметрыЗаполнения(
		"ПоступлениеНаРасчетныйСчет",
		ПричиныИзменения,
		Объект,
		СтрокаСписка,
		КонтейнерОбъект,
		КонтейнерСтрокаСписка);
	
	// 1. Заполняемые реквизиты
	// ВалютаДокумента
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВалютаДокумента") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетБанк");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СубконтоКт1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СубконтоКт2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СубконтоКт3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.ПодразделениеКт");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
	КонецЕсли;
	
	// ВидОперации
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВидОперации") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СубконтоКт1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СубконтоКт2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СубконтоКт3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.ПодразделениеКт");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоКт1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоКт2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоКт3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ПодразделениеКт");
	КонецЕсли;
	
	// РасшифровкаПлатежа.СпособПогашенияЗадолженности
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.СпособПогашенияЗадолженности") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
	КонецЕсли;
	
	// Организация
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.ПодразделениеКт");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоКт1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоКт2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоКт3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ПодразделениеКт");
	КонецЕсли;
	
	// Контрагент
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Контрагент") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
	КонецЕсли;
	
	// РасшифровкаПлатежа.ДоговорКонтрагента
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.ДоговорКонтрагента") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
	КонецЕсли;
	
	// РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СубконтоКт1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СубконтоКт2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СубконтоКт3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.ПодразделениеКт");
	КонецЕсли;
	
	// ОтражатьРазницуВКурсеВСоставеОперационныхРасходов
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ОтражатьРазницуВКурсеВСоставеОперационныхРасходов") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
	КонецЕсли;
	
	// РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СубконтоКт1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СубконтоКт2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СубконтоКт3");
	КонецЕсли;
	
	// ПодразделениеОрганизации
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ПодразделениеОрганизации") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.ПодразделениеКт");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ПодразделениеКт");
	КонецЕсли;
	
	// Дата
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Дата") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоКт1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоКт2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоКт3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ПодразделениеКт");
	КонецЕсли;
	
	// СчетУчетаРасчетовСКонтрагентом
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетУчетаРасчетовСКонтрагентом") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоКт1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоКт2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоКт3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ПодразделениеКт");
	КонецЕсли;
	
	// 2. (если требуется) Передадим на сервер данные, необходимые для заполнения
	Если ПараметрыЗаполнения.Свойство("Контейнер") Тогда
		// ВалютаДокумента
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВалютаДокумента") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетБанк");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособПогашенияЗадолженности");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ОтражатьРазницуВКурсеВСоставеОперационныхРасходов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоКт1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СтатьяДвиженияДенежныхСредств");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоКт2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоКт3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ПодразделениеКт");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеОрганизации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
		КонецЕсли;
		
		// ВидОперации
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВидОперации") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособПогашенияЗадолженности");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ОтражатьРазницуВКурсеВСоставеОперационныхРасходов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоКт1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СтатьяДвиженияДенежныхСредств");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоКт2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоКт3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ПодразделениеКт");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеОрганизации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоКт1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоКт2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоКт3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеКт");
		КонецЕсли;
		
		// РасшифровкаПлатежа.СпособПогашенияЗадолженности
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.СпособПогашенияЗадолженности") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособПогашенияЗадолженности");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ОтражатьРазницуВКурсеВСоставеОперационныхРасходов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
		КонецЕсли;
		
		// Организация
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособПогашенияЗадолженности");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ОтражатьРазницуВКурсеВСоставеОперационныхРасходов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ПодразделениеКт");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеОрганизации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоКт1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоКт2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоКт3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеКт");
		КонецЕсли;
		
		// Контрагент
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Контрагент") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособПогашенияЗадолженности");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ОтражатьРазницуВКурсеВСоставеОперационныхРасходов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
		КонецЕсли;
		
		// РасшифровкаПлатежа.ДоговорКонтрагента
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.ДоговорКонтрагента") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособПогашенияЗадолженности");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ОтражатьРазницуВКурсеВСоставеОперационныхРасходов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
		КонецЕсли;
		
		// РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособПогашенияЗадолженности");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоКт1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СтатьяДвиженияДенежныхСредств");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоКт2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоКт3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ПодразделениеКт");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеОрганизации");
		КонецЕсли;
		
		// ОтражатьРазницуВКурсеВСоставеОперационныхРасходов
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ОтражатьРазницуВКурсеВСоставеОперационныхРасходов") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ОтражатьРазницуВКурсеВСоставеОперационныхРасходов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособПогашенияЗадолженности");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
		КонецЕсли;
		
		// РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СтатьяДвиженияДенежныхСредств");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоКт1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоКт2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СубконтоКт3");
		КонецЕсли;
		
		// ПодразделениеОрганизации
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ПодразделениеОрганизации") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеОрганизации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ПодразделениеКт");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеКт");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
		КонецЕсли;
		
		// Дата
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Дата") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоКт1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоКт2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоКт3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеКт");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеОрганизации");
		КонецЕсли;
		
		// СчетУчетаРасчетовСКонтрагентом
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетУчетаРасчетовСКонтрагентом") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоКт1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоКт2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоКт3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеКт");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеОрганизации");
		КонецЕсли;
		
	КонецЕсли; // Нужно передавать на сервер данные заполнения
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

#КонецОбласти
