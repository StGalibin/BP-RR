////////////////////////////////////////////////////////////////////////////////
// СписаниеСРасчетногоСчетаФормы: клиентские процедуры и функции, 
// вызываемые из форм документа "Списание с расчетного счета".
//  
////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

Процедура ПередЗакрытием(Форма, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка) Экспорт
	
	Если ЗавершениеРаботы И Форма.Модифицированность Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Форма.Модифицированность Тогда
		Отказ = Истина;
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("Форма", Форма);
		
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗакрытиемЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Форма, Отказ, ПараметрыЗаписи) Экспорт
	
	Объект = Форма.Объект;
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		Если Объект.НеПодтвержденоВыпискойБанка Тогда
			Отказ = Истина;
			ТекстВопроса = НСтр("ru = 'Проведение документа возможно только после установки флага ""Подтверждено выпиской банка"".
				|Записать документ без проведения?'");
			
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("Форма", Форма);
			ДополнительныеПараметры.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
			
			Оповещение = Новый ОписаниеОповещения("ВопросПередЗаписьюЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
		Иначе
			КлючеваяОперация = "ПроведениеСписаниеСРасчетногоСчета";
			ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеЗаписи(Форма, ПараметрыЗаписи) Экспорт
	
	Объект = Форма.Объект;
	
	// Оповестим оплачиваемые документы выплаты зарплаты
	Если Объект.ВидОперации = Форма.ВидОперацииПеречислениеЗП И Объект.Проведен Тогда
		Для каждого СтрокаПлатеж Из Объект.ПеречислениеЗаработнойПлаты Цикл
			Оповестить("ОбновитьФорму",, СтрокаПлатеж.Ведомость);
		КонецЦикла;
	КонецЕсли;
	
	Оповестить("ОбновитьФорму", Форма.ВладелецФормы, Объект.Ссылка);
	ОповеститьОбИзменении(Тип("ДокументСсылка.ПлатежноеПоручение"));
	
	Если ПараметрыЗаписи.Свойство("ОплаченныеСчета") И ПараметрыЗаписи.ОплаченныеСчета.Количество() > 0 Тогда
		ОповеститьОбИзменении(Тип("ДокументСсылка.СчетНаОплатуПоставщика"));
		Оповестить("ИзмененСтатусДокументов", ПараметрыЗаписи.ОплаченныеСчета, Объект.Ссылка);
	КонецЕсли;
	
	Оповестить("ИзменениеВыписки");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

Процедура ВидОперацииАвтоПодбор(ВидОперации, ДанныеВыбора, Ожидание, СтандартнаяОбработка, ЭтоПлатежноеПоручение = Ложь) Экспорт
	
	Если Ожидание = 0 Тогда
		СтандартнаяОбработка = Ложь;
		ОплатаПоставщику = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику");
		КомиссияБанка    = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.КомиссияБанка");
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.Добавить(ОплатаПоставщику);
		Если НЕ ЭтоПлатежноеПоручение Тогда
			ДанныеВыбора.Добавить(КомиссияБанка);
		КонецЕсли;
		Если ЗначениеЗаполнено(ВидОперации) И ВидОперации <> ОплатаПоставщику И ВидОперации <> КомиссияБанка Тогда
			ДанныеВыбора.Добавить(ВидОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВедомостьЗарплатаРаботникуНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Объект = Форма.Объект;
	
	Если Форма.УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация",  Объект.Организация);
		ПараметрыФормы.Вставить("ВидМестаВыплаты", ПредопределенноеЗначение("Перечисление.ВидыМестВыплатыЗарплаты.БанковскийСчет"));
		ОткрытьФорму("Документ.ВедомостьНаВыплатуЗарплаты.ФормаВыбора",
			Новый Структура("ПараметрыОтбораСписка, ТекущаяСтрока", ПараметрыФормы, Объект.ПлатежнаяВедомость), Элемент);
		
	Иначе
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация", Объект.Организация);
		ОткрытьФорму("Документ.ВедомостьНаВыплатуЗарплатыВБанк.ФормаВыбора",
			Новый Структура("Отбор, ТекущаяСтрока", ПараметрыФормы, Объект.ПлатежнаяВедомость), Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НадписьПлатежноеПоручениеНажатие(Форма, Элемент, СтандартнаяОбработка) Экспорт
	
	Объект = Форма.Объект;
	Параметры = Форма.Параметры;
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Параметры.Ключ) ИЛИ Форма.Модифицированность Тогда
		ОбъектЗаписан = Форма.Записать();
		
		Если НЕ ОбъектЗаписан Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.ПлатежноеПоручение) Тогда
		ПоказатьЗначение(, Форма.ПлатежноеПоручение);
	Иначе
		Если Объект.ПометкаУдаления Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Нельзя вводить платежное поручение на основании документа, помеченного на удаление!'"));
			Возврат;
		КонецЕсли;
		
		ПараметрыСписания = Новый Структура("Основание, ВидОперации", Параметры.Ключ, Объект.ВидОперации);
		ОткрытьФорму("Документ.ПлатежноеПоручение.ФормаОбъекта", ПараметрыСписания, Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура НалогАвтоПодбор(Форма, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка) Экспорт
	
	Если СтрДлина(Текст) > 13 Тогда
		
		СтрокаПоискаПоКБК = СтрЗаменить(ПараметрыПолученияДанных.СтрокаПоиска, " ", "");
		
		Если СтрДлина(СтрокаПоискаПоКБК) <= 20 И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаПоискаПоКБК) Тогда
			
			// Строка поиска похожа на КБК. Код включает код подвида доходов.
			ДанныеВыбора = СписаниеСРасчетногоСчетаФормыВызовСервера.ДанныеВыбораНалогаПоКБК(СтрокаПоискаПоКБК);
			
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НалогОкончаниеВводаТекста(Форма, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка) Экспорт
	
	Если СтрДлина(Текст) > 13 Тогда
		
		СтрокаПоискаПоКБК = СтрЗаменить(ПараметрыПолученияДанных.СтрокаПоиска, " ", "");
		
		Если СтрДлина(СтрокаПоискаПоКБК) <= 20 И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаПоискаПоКБК) Тогда
			
			// Строка поиска похожа на КБК. Код включает код подвида доходов.
			ДанныеВыбора = СписаниеСРасчетногоСчетаФормыВызовСервера.ДанныеВыбораНалогаПоКБК(СтрокаПоискаПоКБК);
			
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НалоговыйПериодРегулирование(Форма, Элемент, Направление, СтандартнаяОбработка) Экспорт
	
	ИзменениеПериодаУплаты(Форма, "Объект.НалоговыйПериод", "НалоговыйПериодСтрока", Направление);
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

Процедура НалоговыйПериодПриИзменении(Форма, Элемент) Экспорт
	
	ИзменениеПериодаУплаты(Форма, "Объект.НалоговыйПериод", "НалоговыйПериодСтрока");
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

Процедура НалоговыйПериодНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Объект = Форма.Объект;
	
	Значение = Объект.НалоговыйПериод;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Форма", Форма);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("НалоговыйПериодНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ВыборПериода",
		Новый Структура("Значение, РежимВыбораПериода, ЗапрашиватьРежимВыбораПериодаУВладельца", Значение, "Месяц", Ложь),
		Форма,,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ПодразделениеОрганизацииПриИзменении(Форма, Элемент) Экспорт
	
	Объект = Форма.Объект;
	
	Если ЗначениеЗаполнено(Объект.ПодразделениеОрганизации) Тогда
		СписаниеСРасчетногоСчетаФормыКлиентСервер.УстановитьПодразделениеДт(Форма);
	Иначе
		Объект.ПодразделениеДт = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодтвержденоВыпискойБанкаПриИзменении(Форма, Элемент) Экспорт
	
	Объект = Форма.Объект;
	
	Объект.НеПодтвержденоВыпискойБанка = НЕ Форма.ПодтвержденоВыпискойБанка;
	
КонецПроцедуры

Процедура ПорядокОтраженияБУНажатие(Форма, Элемент, СтандартнаяОбработка) Экспорт
	
	Объект = Форма.Объект;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТолькоПросмотр", Форма.ТолькоПросмотр);
	
	ПараметрыФормы.Вставить("Период",      Объект.Дата);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("Счет",        Объект.СчетУчетаРасчетовСКонтрагентом);
	ПараметрыФормы.Вставить("Субконто1",   Объект.СубконтоДт1);
	ПараметрыФормы.Вставить("Субконто2",   Объект.СубконтоДт2);
	ПараметрыФормы.Вставить("Субконто3",   Объект.СубконтоДт3);
	ПараметрыФормы.Вставить("Направление", "Дт");
	
	Если Объект.СчетУчетаРасчетовСКонтрагентом = ПредопределенноеЗначение(
			"ПланСчетов.Хозрасчетный.НДСНалоговогоАгента") Тогда
		ПараметрыФормы.Вставить("АдресТаблицыНалоговыйАгентНДСВХранилище", 
			СписаниеСРасчетногоСчетаФормыВызовСервера.ПоместитьРасшифровкуНалоговыйАгентНДСВХранилище(Объект));
	КонецЕсли;
		
	ПараметрыФормы.Вставить("СуммаПоПлатежномуПоручению", Объект.СуммаДокумента);
	ПараметрыФормы.Вставить("НазначениеПлатежа",          Объект.НазначениеПлатежа);
	ПараметрыФормы.Вставить("ДокументСсылка",             Объект.Ссылка);
	
	ОткрытьФорму("ОбщаяФорма.ПорядокОтраженияБУ", ПараметрыФормы, Форма);
	
КонецПроцедуры

Процедура ПрочееРасходыУСНПриИзменении(Форма, Элемент) Экспорт
	
	ОграничитьПринимаемыеРасходыДляУСН(Форма);
	ОграничитьНДСДляУСН(Форма);
	
	СписаниеСРасчетногоСчетаФормыКлиентСервер.УправлениеЭлементамиОтраженияВУСН(Форма);
	
КонецПроцедуры

Процедура ПрочееНДСУСНПриИзменении(Форма, Элемент) Экспорт
	ОграничитьНДСДляУСН(Форма);
КонецПроцедуры

Процедура СубконтоДтПрочиеПриИзменении(Форма, Элемент, НомерСубконто, Постфикс = "") Экспорт
	
	ПриИзмененииСубконто(Форма, НомерСубконто, Постфикс);
	
КонецПроцедуры

Процедура СубконтоДтПрочиеНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка, Постфикс = "") Экспорт
	
	НачалоВыбораСубконто(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка, Постфикс);
	
КонецПроцедуры

Процедура СчетУчетаЗадержкаЗарплатыПриИзменении(Форма, Элемент) Экспорт
	
	Объект = Форма.Объект;
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
		Форма, Форма.Объект, СписаниеСРасчетногоСчетаФормыКлиентСервер.ПараметрыУстановкиСвойствСубконто(Форма, "ЗадержкаЗарплаты"));
	
КонецПроцедуры

Процедура СубконтоДтЗадержкаЗарплатыПриИзменении(Форма, Элемент, НомерСубконто, Постфикс = "") Экспорт
	
	ПриИзмененииСубконто(Форма, НомерСубконто, Постфикс);
	
КонецПроцедуры

Процедура СубконтоДтЗадержкаЗарплатыНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка, Постфикс = "") Экспорт
	
	НачалоВыбораСубконто(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка, Постфикс);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

Процедура РеестрУплатыНДФЛ(Форма, Команда) Экспорт
	
	Объект = Форма.Объект;
	
	ОчиститьСообщения();
	
	Если НЕ Объект.Проведен ИЛИ Форма.Модифицированность Тогда
		ТекстСообщения = НСтр("ru = 'Печать реестра уплаты НДФЛ возможна только после проведения документа.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраНДФЛ(Новый Структура("МенеджерПечати, Ссылка, Форма",
		"Документ.СписаниеСРасчетногоСчета", Объект.Ссылка, Форма));
	
КонецПроцедуры

#КонецОбласти

#Область ЗавершениеНемодальныхВызовов

Процедура ВопросПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПараметрыЗаписи = Новый Структура("Закрыть", Истина);
		Если Форма.Записать(ПараметрыЗаписи) Тогда
			Форма.Закрыть();
		КонецЕсли;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Форма.Модифицированность = Ложь;
		Форма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура ВопросПередЗаписьюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	ИсходныеПараметрыЗаписи = ДополнительныеПараметры.ПараметрыЗаписи;
	Объект = Форма.Объект;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		РежимЗаписи = ?(Объект.Проведен, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись);
		ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписи);
		Форма.Записать(ПараметрыЗаписи);
		Если ИсходныеПараметрыЗаписи.Свойство("Закрыть") Тогда
			Форма.Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НалоговыйПериодНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	Объект = Форма.Объект;
	
	НалоговыйПериод = РезультатЗакрытия;
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "НалоговыйПериодСтрока", Формат(НалоговыйПериод, "ДФ='MMMM yyyy'"));
	Если Объект.НалоговыйПериод <> НалоговыйПериод Тогда
		Объект.НалоговыйПериод = НалоговыйПериод;
		Форма.Модифицированность = Истина;
		Форма.ОбновитьОтображениеДанных();
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	СтрокаПлатеж = ДополнительныеПараметры.СтрокаПлатеж;
	Форма        = ДополнительныеПараметры.Форма;
	
	СтруктураКурсаИКратности = РезультатЗакрытия;
	
	Если СтруктураКурсаИКратности <> Неопределено Тогда
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;
	КонецЕсли;
	
	СписаниеСРасчетногоСчетаФормыКлиентСервер.РассчитатьСуммуВзаиморасчетов(Форма, СтрокаПлатеж);
	СписаниеСРасчетногоСчетаФормыКлиентСервер.ЗаполнитьЗначенияТекущиеДанныеРасшифровкаПлатежа(Форма, СтрокаПлатеж);
	
	Форма.Модифицированность = Истина;
	Форма.ОбновитьОтображениеДанных();
	
КонецПроцедуры

#КонецОбласти

#Область РасшифровкаПлатежа

Процедура РасшифровкаПлатежаПриНачалеРедактирования(Форма, Элемент, НоваяСтрока, Копирование) Экспорт
	
	Элементы = Форма.Элементы;
	
	Если НоваяСтрока И НЕ Копирование Тогда
		ЗаполнитьЗначенияСвойств(Элементы.РасшифровкаПлатежа.ТекущиеДанные, Форма.СвойстваПлатежа);
	КонецЕсли;
	
	Если НоваяСтрока И Форма.ЕстьРасчетыВУсловныхЕдиницах Тогда
		СписаниеСРасчетногоСчетаФормыКлиентСервер.ЗаполнитьНадписиВРасшифровке(Элементы.РасшифровкаПлатежа.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПередУдалением(Форма, Элемент, Отказ) Экспорт
	
	Если СписаниеСРасчетногоСчетаФормыКлиентСервер.ФормаРасшифровкиПлатежа(Форма) Тогда
		РасшифровкаПлатежа = Форма.РасшифровкаПлатежа;
	Иначе
		РасшифровкаПлатежа = Форма.Объект.РасшифровкаПлатежа;
	КонецЕсли;
	
	Отказ = РасшифровкаПлатежа.Количество() = 1;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДоговорКонтрагентаОткрытие(Форма, Элемент, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ОткрытьДоговорКонтрагента(Форма);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДоговорКонтрагентаОбработкаВыбора(Форма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	Объект = Форма.Объект;
	
	ПараметрыДоговора = Новый Структура;
	ПараметрыДоговора.Вставить("Организация", Объект.Организация);
	ПараметрыДоговора.Вставить("Владелец", Объект.Контрагент);
	ПараметрыДоговора.Вставить("ВидДоговора", ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
	
	РаботаСДоговорамиКонтрагентовБПКлиент.ДоговорОбработкаВыбора(Элемент, ВыбранноеЗначение, ПараметрыДоговора, СтандартнаяОбработка);
КонецПроцедуры

Процедура РасшифровкаПлатежаДоговорКонтрагентаАвтоПодбор(Форма, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)Экспорт
	
	РаботаСДоговорамиКонтрагентовБПКлиент.ЗаполнитьСписокВыбора(Элемент, Текст, Форма.ПредлагатьНовыйДоговор, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСтатьяДвиженияДенежныхСредствПриИзменении(Форма, Элемент) Экспорт
	
	СтрокаПлатеж = СписаниеСРасчетногоСчетаФормыКлиентСервер.ТекущиеДанныеРасшифровкаПлатежа(Форма);
	
	Если СтрокаПлатеж.СтатьяДвиженияДенежныхСредств <> Форма.СвойстваПлатежа.СтатьяДвиженияДенежныхСредств Тогда
		Форма.СвойстваПлатежа.СтатьяДвиженияДенежныхСредств = СтрокаПлатеж.СтатьяДвиженияДенежныхСредств;
		
		СписаниеСРасчетногоСчетаФормыКлиентСервер.ЗаполнитьЗначенияТекущиеДанныеРасшифровкаПлатежа(Форма, СтрокаПлатеж);
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаВидПлатежаПоКредитамЗаймамПриИзменении(Форма, Элемент) Экспорт
	
	Объект = Форма.Объект;
	
	СтрокаПлатеж = СписаниеСРасчетногоСчетаФормыКлиентСервер.ТекущиеДанныеРасшифровкаПлатежа(Форма);
	
	Если СтрокаПлатеж.ВидПлатежаПоКредитамЗаймам <> Форма.СвойстваПлатежа.ВидПлатежаПоКредитамЗаймам
		ИЛИ НЕ ЗначениеЗаполнено(СтрокаПлатеж.СтатьяДвиженияДенежныхСредств) Тогда
		
		Форма.СвойстваПлатежа.ВидПлатежаПоКредитамЗаймам = СтрокаПлатеж.ВидПлатежаПоКредитамЗаймам;
		
		Если СтрокаПлатеж.ВидПлатежаПоКредитамЗаймам = ПредопределенноеЗначение("Перечисление.ВидыПлатежейПоКредитамЗаймам.ПогашениеДолга") Тогда
			СтрокаПлатеж.СтатьяДвиженияДенежныхСредств =
				УчетДенежныхСредствВызовСервера.СтатьяДДСПоУмолчанию("ПогашениеДолга");
		ИначеЕсли СтрокаПлатеж.ВидПлатежаПоКредитамЗаймам = ПредопределенноеЗначение("Перечисление.ВидыПлатежейПоКредитамЗаймам.УплатаПроцентов") Тогда
			СтрокаПлатеж.СтатьяДвиженияДенежныхСредств =
				УчетДенежныхСредствВызовСервера.СтатьяДДСПоУмолчанию("УплатаПроцентов");
		КонецЕсли;
		
		Форма.СвойстваПлатежа.СтатьяДвиженияДенежныхСредств = СтрокаПлатеж.СтатьяДвиженияДенежныхСредств;
		
	КонецЕсли;
	
	СписаниеСРасчетногоСчетаФормыКлиентСервер.ЗаполнитьОтражениеСтрокиВУСН(Форма, СтрокаПлатеж);
	РасходыУСНПриИзменении(Форма, СтрокаПлатеж);
	
	ПараметрыЗаполненияСчетовУчета = СписаниеСРасчетногоСчетаФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(
		"РасшифровкаПлатежа.ВидПлатежаПоКредитамЗаймам", Объект, СтрокаПлатеж);
	СчетаУчетаВДокументахКлиент.ЗаполнитьПриИзменении(ПараметрыЗаполненияСчетовУчета);
	
	СписаниеСРасчетногоСчетаФормыКлиентСервер.ЗаполнитьЗначенияТекущиеДанныеРасшифровкаПлатежа(Форма, СтрокаПлатеж);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСпособПогашенияЗадолженностиПриИзменении(Форма, Элемент) Экспорт
	
	Объект = Форма.Объект;
	
	СтрокаПлатеж = СписаниеСРасчетногоСчетаФормыКлиентСервер.ТекущиеДанныеРасшифровкаПлатежа(Форма);
	Если СтрокаПлатеж.СпособПогашенияЗадолженности <> ПредопределенноеЗначение("Перечисление.СпособыПогашенияЗадолженности.ПоДокументу") Тогда
		СтрокаПлатеж.Сделка = Неопределено;
	КонецЕсли;
	
	ПараметрыЗаполненияСчетовУчета = СписаниеСРасчетногоСчетаФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(
		"РасшифровкаПлатежа.СпособПогашенияЗадолженности", Объект, СтрокаПлатеж);
	СчетаУчетаВДокументахКлиент.ЗаполнитьПриИзменении(ПараметрыЗаполненияСчетовУчета);
	
	СписаниеСРасчетногоСчетаФормыКлиентСервер.ЗаполнитьЗначенияТекущиеДанныеРасшифровкаПлатежа(Форма, СтрокаПлатеж);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСделкаНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Объект = Форма.Объект;
	
	СтандартнаяОбработка = Ложь;
	СтрокаПлатеж = СписаниеСРасчетногоСчетаФормыКлиентСервер.ТекущиеДанныеРасшифровкаПлатежа(Форма);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю") Тогда
		СчетУчета = СтрокаПлатеж.СчетУчетаРасчетовПоАвансам;
	Иначе
		СчетУчета = СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не указана дата.'"));
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не указана организация.'"));
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не указан контрагент.'"));
		Возврат;
	ИначеЕсли Форма.ВестиУчетПоДоговорам И НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не указан договор.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("Дата",               Объект.Дата);
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента", СтрокаПлатеж.ДоговорКонтрагента);
	ПараметрыОбъекта.Вставить("Контрагент",         Объект.Контрагент);
	ПараметрыОбъекта.Вставить("Организация",        Объект.Организация);
	ПараметрыОбъекта.Вставить("ОстаткиОбороты",     "Кт");
	ПараметрыОбъекта.Вставить("ТипыДокументов",     "Метаданные.Документы.СписаниеСРасчетногоСчета.ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты.Сделка.Тип");
	Если ЗначениеЗаполнено(СчетУчета) Тогда
		ПараметрыОбъекта.Вставить("РежимОтбораДокументов", ПредопределенноеЗначение("Перечисление.РежимОтбораДокументов.ПоОстаткам"));
		ПараметрыОбъекта.Вставить("СчетУчета",             СчетУчета);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовПриИзменении(Форма, Элемент) Экспорт
	
	СтрокаПлатеж = СписаниеСРасчетногоСчетаФормыКлиентСервер.ТекущиеДанныеРасшифровкаПлатежа(Форма);
	СписаниеСРасчетногоСчетаФормыКлиентСервер.РассчитатьСуммуВзаиморасчетов(Форма, СтрокаПлатеж);
	СписаниеСРасчетногоСчетаФормыКлиентСервер.ЗаполнитьЗначенияТекущиеДанныеРасшифровкаПлатежа(Форма, СтрокаПлатеж);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Объект = Форма.Объект;
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаПлатеж = СписаниеСРасчетногоСчетаФормыКлиентСервер.ТекущиеДанныеРасшифровкаПлатежа(Форма);
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для выбора курса взаиморасчетов нужно выбрать договор контрагента.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыДокумента = Новый Структура("ДоговорКонтрагента, КурсВзаиморасчетов, КратностьВзаиморасчетов, Дата");
	ЗаполнитьЗначенияСвойств(ПараметрыДокумента, СтрокаПлатеж);
	ПараметрыДокумента.Дата = Объект.Дата;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СтрокаПлатеж", СтрокаПлатеж);
	ДополнительныеПараметры.Вставить("Форма",        Форма);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Общаяформа.ФормаВводаКурсаИКратности", ПараметрыДокумента,,,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Форма, Элемент) Экспорт
	
	СтрокаПлатеж = СписаниеСРасчетногоСчетаФормыКлиентСервер.ТекущиеДанныеРасшифровкаПлатежа(Форма);
	СписаниеСРасчетногоСчетаФормыКлиентСервер.ЗаполнитьПустыеКурсыВалют(Форма, СтрокаПлатеж);
	
	Если СтрокаПлатеж.СуммаВзаиморасчетов <> 0 И Форма.КратностьДокумента <> 0 Тогда
		СуммаРуб = СтрокаПлатеж.СуммаПлатежа * Форма.КурсДокумента / Форма.КратностьДокумента;
		СтрокаПлатеж.КурсВзаиморасчетов = СуммаРуб / СтрокаПлатеж.СуммаВзаиморасчетов * СтрокаПлатеж.КратностьВзаиморасчетов;
	КонецЕсли;
	
	СписаниеСРасчетногоСчетаФормыКлиентСервер.ЗаполнитьЗначенияТекущиеДанныеРасшифровкаПлатежа(Форма, СтрокаПлатеж);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСтавкаНДСПриИзменении(Форма, Элемент) Экспорт
	
	СтрокаПлатеж = СписаниеСРасчетногоСчетаФормыКлиентСервер.ТекущиеДанныеРасшифровкаПлатежа(Форма);
	СписаниеСРасчетногоСчетаФормыКлиентСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);
	СписаниеСРасчетногоСчетаФормыКлиентСервер.ЗаполнитьЗначенияТекущиеДанныеРасшифровкаПлатежа(Форма, СтрокаПлатеж);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентомПриИзменении(Форма, Элемент) Экспорт
	
	СтрокаПлатеж = СписаниеСРасчетногоСчетаФормыКлиентСервер.ТекущиеДанныеРасшифровкаПлатежа(Форма);
	СписаниеСРасчетногоСчетаФормыКлиентСервер.ЗаполнитьОтражениеСтрокиВУСН(Форма, СтрокаПлатеж);
	СписаниеСРасчетногоСчетаФормыКлиентСервер.ЗаполнитьЗначенияТекущиеДанныеРасшифровкаПлатежа(Форма, СтрокаПлатеж);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаНДСУСНПриИзменении(Форма, Элемент) Экспорт
	
	СтрокаПлатеж = СписаниеСРасчетногоСчетаФормыКлиентСервер.ТекущиеДанныеРасшифровкаПлатежа(Форма);
	ОграничитьСуммуНДСДляУСНПоСтроке(СтрокаПлатеж);
	СписаниеСРасчетногоСчетаФормыКлиентСервер.ЗаполнитьЗначенияТекущиеДанныеРасшифровкаПлатежа(Форма, СтрокаПлатеж);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаРасходыУСНПриИзменении(Форма, Элемент) Экспорт
	
	СтрокаПлатеж = СписаниеСРасчетногоСчетаФормыКлиентСервер.ТекущиеДанныеРасшифровкаПлатежа(Форма);
	
	РасходыУСНПриИзменении(Форма, СтрокаПлатеж);
	
	СписаниеСРасчетногоСчетаФормыКлиентСервер.ЗаполнитьЗначенияТекущиеДанныеРасшифровкаПлатежа(Форма, СтрокаПлатеж);
	
КонецПроцедуры

Процедура ИнициализироватьСвойстваПлатежа(Форма) Экспорт
	
	Если Форма.СвойстваПлатежа = Неопределено Тогда
		Форма.СвойстваПлатежа = СписаниеСРасчетногоСчетаФормыКлиентСервер.ПустаяСтруктураСвойстваПлатежа();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьДоговорКонтрагента(Форма)
	
	Объект = Форма.Объект;
	
	ТекущиеДанные = СписаниеСРасчетногоСчетаФормыКлиентСервер.ТекущиеДанныеРасшифровкаПлатежа(Форма);
	
	ЗначенияЗаполнения = Новый Структура;
	ВидыДоговора   = УчетДенежныхСредствКлиентСервер.ОпределитьВидДоговораСКонтрагентом(Объект.ВидОперации);
	ЗначенияЗаполнения.Вставить("Организация", Объект.Организация);
	ЗначенияЗаполнения.Вставить("Владелец", Объект.Контрагент);
	ЗначенияЗаполнения.Вставить("ВидДоговора", Новый ФиксированныйМассив(ВидыДоговора));
	ЗначенияЗаполнения.Вставить("ОплатаВВалюте", Форма.ОплатаВВалюте);
	Если Форма.ОплатаВВалюте ИЛИ НЕ СписаниеСРасчетногоСчетаФормыКлиентСервер.ДокументМожетБытьОформленВВалюте(Объект.ВидОперации) Тогда
		ЗначенияЗаполнения.Вставить("ВалютаВзаиморасчетов", Объект.ВалютаДокумента);
		ЗначенияЗаполнения.Вставить("Валютный", Форма.ОплатаВВалюте);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ТекущиеДанные.ДоговорКонтрагента);
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", ПараметрыФормы, Форма);
	
КонецПроцедуры

#КонецОбласти

#Область ПеречислениеЗаработнойПлаты

Процедура ПеречислениеЗаработнойПлатыПриНачалеРедактирования(Форма, Элемент, НоваяСтрока, Копирование) Экспорт
	
	Элементы = Форма.Элементы;
	
	Если НоваяСтрока И НЕ Копирование Тогда
		
		ТекущиеДанные = Элементы.ПеречислениеЗаработнойПлаты.ТекущиеДанные;
		
		СписаниеСРасчетногоСчетаФормыКлиентСервер.УстановитьПустоеЗначениеПеречислениеЗаработнойПлатыВедомость(
			Форма, ТекущиеДанные.Ведомость);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПеречислениеЗаработнойПлатыПриОкончанииРедактирования(Форма, Элемент, НоваяСтрока, ОтменаРедактирования) Экспорт
	
	Элементы = Форма.Элементы;
	
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элементы.ПеречислениеЗаработнойПлаты.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ТекущаяВедомость = ТекущиеДанные.Ведомость;
			Если ПроверитьДублиВедомостей(Форма, ТекущаяВедомость) Тогда
				СписаниеСРасчетногоСчетаФормыКлиентСервер.УстановитьПустоеЗначениеПеречислениеЗаработнойПлатыВедомость(
					Форма, ТекущиеДанные.Ведомость);
				ТекущиеДанные.СуммаПлатежа = 0;
				ОтменаРедактирования = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПеречислениеЗаработнойПлатыВедомостьНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Объект = Форма.Объект;
	
	Если Форма.УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация",     Объект.Организация);
		ПараметрыФормы.Вставить("ВидМестаВыплаты", ПредопределенноеЗначение("Перечисление.ВидыМестВыплатыЗарплаты.ЗарплатныйПроект"));
		ОткрытьФорму("Документ.ВедомостьНаВыплатуЗарплаты.ФормаВыбора", Новый Структура("ПараметрыОтбораСписка", ПараметрыФормы), Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПеречислениеЗаработнойПлатыВедомостьОчистка(Форма, Элемент, СтандартнаяОбработка) Экспорт
	
	Элементы = Форма.Элементы;

	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ПеречислениеЗаработнойПлаты.ТекущиеДанные;
	СписаниеСРасчетногоСчетаФормыКлиентСервер.УстановитьПустоеЗначениеПеречислениеЗаработнойПлатыВедомость(
		Форма, ТекущиеДанные.Ведомость);
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

Процедура ПеречислениеЗаработнойПлатыВедомостьОбработкаВыбора(Форма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	Если ПроверитьДублиВедомостей(Форма, ВыбранноеЗначение, "ПеречислениеЗаработнойПлаты") Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПеречислениеДепонентов

Процедура ПеречислениеДепонентовПриНачалеРедактирования(Форма, Элемент, НоваяСтрока, Копирование) Экспорт
	
	Элементы = Форма.Элементы;
	
	Если НоваяСтрока И НЕ Копирование Тогда
	
		ТекущиеДанные = Элементы.ПеречислениеДепонентов.ТекущиеДанные;
		
		СписаниеСРасчетногоСчетаФормыКлиентСервер.УстановитьПустоеЗначениеПеречислениеДепонентовВедомость(
			Форма, ТекущиеДанные.Ведомость);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПеречислениеДепонентовПриОкончанииРедактирования(Форма, Элемент, НоваяСтрока, ОтменаРедактирования) Экспорт
	
	Элементы = Форма.Элементы;
	
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элементы.ПеречислениеДепонентов.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ТекущаяВедомость = ТекущиеДанные.Ведомость;
			Если ПроверитьДублиВедомостей(Форма, ТекущаяВедомость, "ПеречислениеДепонентов") Тогда
				СписаниеСРасчетногоСчетаФормыКлиентСервер.УстановитьПустоеЗначениеПеречислениеДепонентовВедомость(
					Форма, ТекущиеДанные.Ведомость);
				ТекущиеДанные.СуммаПлатежа = 0;
				ОтменаРедактирования = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПеречислениеДепонентовВедомостьНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Объект = Форма.Объект;
	
	Если Форма.УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация",     Объект.Организация);
		ПараметрыФормы.Вставить("ВидМестаВыплаты", ПредопределенноеЗначение("Перечисление.ВидыМестВыплатыЗарплаты.Касса"));
		
		ОткрытьФорму("Документ.ВедомостьНаВыплатуЗарплаты.ФормаВыбора", Новый Структура("ПараметрыОтбораСписка", ПараметрыФормы), Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПеречислениеДепонентовВедомостьОбработкаВыбора(Форма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	Если ПроверитьДублиВедомостей(Форма, ВыбранноеЗначение, "ПеречислениеДепонентов") Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПроверитьДублиВедомостей(Форма, ТекущаяВедомость, ТабличнаяЧасть = "ПеречислениеЗаработнойПлаты")
	
	Элементы = Форма.Элементы;
	
	ЕстьДублиВедомостей = Ложь;
	
	Если СтрНайти(Форма.ИмяФормы, "ФормаДокумента") = 0 Тогда
		ДанныеТЧ = Форма[ТабличнаяЧасть];
	Иначе
		ДанныеТЧ = Форма.Объект[ТабличнаяЧасть];
	КонецЕсли;
	
	СтрокаПоиска    = Новый Структура("Ведомость", ТекущаяВедомость);
	НайденныеСтроки = ДанныеТЧ.НайтиСтроки(СтрокаПоиска);
	Если НайденныеСтроки.Количество() <> 0 Тогда
		Если НайденныеСтроки.Количество() = 1 Тогда
			Если Элементы[ТабличнаяЧасть].ТекущиеДанные.НомерСтроки <> НайденныеСтроки[0].НомерСтроки Тогда
				ЕстьДублиВедомостей = Истина;
			КонецЕсли;
		Иначе
			ЕстьДублиВедомостей = Истина;
		КонецЕсли;
		
		Если ЕстьДублиВедомостей Тогда
			ТекстСообщения = НСтр("ru = 'Указанная ведомость уже выбрана в документе!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЕстьДублиВедомостей;
	
КонецФункции

Процедура ИзменениеПериодаУплаты(Форма, ПутьРеквизита, ПутьРеквизитаПредставления, Направление = Неопределено)
	
	Объект = Форма.Объект;
	
	Если Направление = Неопределено Тогда
		Значение = Объект.Дата;
	Иначе
		Значение = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьРеквизита);
		Значение = ДобавитьМесяц(Значение, Направление);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, ПутьРеквизита, Значение);
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, ПутьРеквизитаПредставления, Формат(Значение, "ДФ='MMMM yyyy'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСубконто(Форма, НомерСубконто, Постфикс = "")
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСубконто(
		Форма, Форма.Объект, НомерСубконто, СписаниеСРасчетногоСчетаФормыКлиентСервер.ПараметрыУстановкиСвойствСубконто(Форма, Постфикс));
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораСубконто(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка, Постфикс = "")
	
	ДанныеОбъекта = БухгалтерскийУчетКлиентСервер.ДанныеУстановкиПараметровСубконто(
		Форма.Объект, СписаниеСРасчетногоСчетаФормыКлиентСервер.ПараметрыУстановкиСвойствСубконто(Форма, Постфикс));
	
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(Форма, Элемент, СтандартнаяОбработка, ДанныеОбъекта);
	
КонецПроцедуры

#КонецОбласти

#Область УСН

Процедура ОграничитьПринимаемыеРасходыДляУСН(Форма)
	
	Объект = Форма.Объект;
	
	МаксРасход = Объект.СуммаДокумента;
	Если Форма.ОплатаВВалюте Тогда
		МаксРасход = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Объект.СуммаДокумента,
			Объект.ВалютаДокумента, Форма.ВалютаРегламентированногоУчета,
			Форма.КурсДокумента,      1,
			Форма.КратностьДокумента, 1);
	КонецЕсли;
	
	Объект.Графа7_УСН = Мин(Объект.Графа7_УСН, МаксРасход);
	
	Если Объект.Графа7_УСН = 0 Тогда
		Объект.РасходыЕНВД_УСН = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОграничитьПринимаемыеРасходыДляУСНПоСтроке(Форма, СтрокаПлатеж)
	
	Объект = Форма.Объект;

	МаксРасход = СтрокаПлатеж.СуммаПлатежа;
	
	Если Форма.ОплатаВВалюте Тогда
		МаксРасход = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа,
			Объект.ВалютаДокумента, Форма.ВалютаРегламентированногоУчета,
			Форма.КурсДокумента,      1,
			Форма.КратностьДокумента, 1);
	КонецЕсли;
	
	СтрокаПлатеж.РасходыУСН = Мин(СтрокаПлатеж.РасходыУСН, МаксРасход);
	
КонецПроцедуры

Процедура ОграничитьНДСДляУСН(Форма)
	
	Объект = Форма.Объект;
	
	Если Объект.НДС_УСН > Объект.Графа7_УСН Тогда
		Объект.НДС_УСН = Объект.Графа7_УСН;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОграничитьСуммуНДСДляУСНПоСтроке(СтрокаПлатеж)
	
	Если СтрокаПлатеж.НДСУСН > СтрокаПлатеж.РасходыУСН Тогда
		СтрокаПлатеж.НДСУСН = СтрокаПлатеж.РасходыУСН;
	КонецЕсли;
	
КонецПроцедуры

Процедура РасходыУСНПриИзменении(Форма, СтрокаПлатеж)
	
	ОграничитьПринимаемыеРасходыДляУСНПоСтроке(Форма, СтрокаПлатеж);
	ОграничитьСуммуНДСДляУСНПоСтроке(СтрокаПлатеж);
	
	Если СтрокаПлатеж.РасходыУСН = 0 Тогда
		СтрокаПлатеж.РаспределятьРасходыУСН = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
