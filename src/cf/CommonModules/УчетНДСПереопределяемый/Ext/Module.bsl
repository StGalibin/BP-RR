
#Область СлужебныйПрограммныйИнтерфейс

Функция ОпределитьВидСчетаФактурыВыданногоПоТипуОснования(ДокументОснование) Экспорт

	СписокТиповНаАванс			= ПолучитьСписокТиповПоВидуСчетаФактурыВыставленного(Перечисления.ВидСчетаФактурыВыставленного.НаАванс);
	СписокТиповНалоговыйАгент	= ПолучитьСписокТиповПоВидуСчетаФактурыВыставленного(Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент);
	СписокТиповКорректировочный	= ПолучитьСписокТиповПоВидуСчетаФактурыВыставленного(Перечисления.ВидСчетаФактурыВыставленного.Корректировочный);
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		
		Возврат ДокументОснование.ВидСчетаФактуры;
		
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		
		Возврат Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента;
		
	ИначеЕсли СписокТиповНаАванс.Найти(ТипЗнч(ДокументОснование)) <> Неопределено 
		И ТипЗнч(ДокументОснование) <> Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		
		Возврат Перечисления.ВидСчетаФактурыВыставленного.НаАванс;
		
	ИначеЕсли СписокТиповНалоговыйАгент.Найти(ТипЗнч(ДокументОснование)) <> Неопределено Тогда
		
		Возврат Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент;
		
	ИначеЕсли СписокТиповКорректировочный.Найти(ТипЗнч(ДокументОснование)) <> Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
		
		НомераТаблиц	= Новый Структура;
		Запрос.Текст	= 
		"ВЫБРАТЬ
		|	КорректировкаРеализации.Ссылка КАК ДокументОснование,
		|	КорректировкаРеализации.Дата,
		|	КорректировкаРеализации.Организация,
		|	КорректировкаРеализации.Контрагент,
		|	КорректировкаРеализации.ДоговорКонтрагента,
		|	КорректировкаРеализации.ВидОперации,
		|	КорректировкаРеализации.ДокументРеализации,
		|	КорректировкаРеализации.ИсправляемыйДокументРеализации,
		|	КорректировкаРеализации.ИсправляемыйДокументРеализации.ВидОперации КАК ИсправляемыйДокументРеализацииВидОперации
		|ИЗ
		|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
		|ГДЕ
		|	КорректировкаРеализации.Ссылка = &ДокументОснование";
		
		Результат	= Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			Возврат Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;;
		КонецЕсли;
		
		РеквизитыОснования	= Результат.Выбрать();
		РеквизитыОснования.Следующий();		
		
		Если ЗначениеЗаполнено(РеквизитыОснования.ИсправляемыйДокументРеализации)
			И (ТипЗнч(РеквизитыОснования.ИсправляемыйДокументРеализации) = Тип("ДокументСсылка.КорректировкаРеализации")) 
			И РеквизитыОснования.ИсправляемыйДокументРеализацииВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение 
			И РеквизитыОснования.ВидОперации <> Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
			
			Возврат Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;
			
		ИначеЕсли РеквизитыОснования.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
			
			Возврат Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;
			
		Иначе		
			
			ОснованиеДляВидаОперации	= ПолучитьИсправляемыйДокументРеализации(ДокументОснование);
			
			Если СписокТиповНалоговыйАгент.Найти(ТипЗнч(ОснованиеДляВидаОперации)) <> Неопределено Тогда
				
				Возврат	Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент;
				
			ИначеЕсли СписокТиповНаАванс.Найти(ТипЗнч(ОснованиеДляВидаОперации)) <> Неопределено Тогда			
				
				Если ТипЗнч(ОснованиеДляВидаОперации) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
					ИЛИ ТипЗнч(ОснованиеДляВидаОперации) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
					
					Возврат Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;
				Иначе
					Возврат Перечисления.ВидСчетаФактурыВыставленного.НаАванс;
				КонецЕсли;
				
			ИначеЕсли СписокТиповКорректировочный.Найти(ТипЗнч(ОснованиеДляВидаОперации)) <> Неопределено Тогда
				
				Возврат Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;	
				
			Иначе
				
				Возврат Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;	
				
			КонецЕсли;
			
		КонецЕсли;
	
	Иначе
		
		Возврат Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;
		
	КонецЕсли;

КонецФункции

Функция ПолучитьСписокТиповПоВидуСчетаФактурыВыставленного(ВидСчетаФактурыСписка, ЭтоИсправление = Ложь, НаАвансДляКомитентаНаЗакупку = Ложь) Экспорт
	
	СписокТипов = Новый Массив;
	
	Если ВидСчетаФактурыСписка = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный 
		ИЛИ ЭтоИсправление И ВидСчетаФактурыСписка = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда
		
		СписокТипов.Добавить(Тип("ДокументСсылка.КорректировкаРеализации"));
		
	ИначеЕсли ВидСчетаФактурыСписка = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент 
		ИЛИ НаАвансДляКомитентаНаЗакупку Тогда 
		
		СписокТипов.Добавить(Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом"));
		СписокТипов.Добавить(Тип("ДокументСсылка.СписаниеСРасчетногоСчета"));
		СписокТипов.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
		СписокТипов.Добавить(Тип("ДокументСсылка.АвансовыйОтчет"));
		УчетОбособленныхПодразделений.ДобавитьТипДокументаОбособленныхПодразделений(СписокТипов, "АвизоРасчетыВходящее");
		
	Иначе
		
		СписокТипов.Добавить(Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом"));
		СписокТипов.Добавить(Тип("ДокументСсылка.КорректировкаДолга"));
		СписокТипов.Добавить(Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет"));
		СписокТипов.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
		СписокТипов.Добавить(Тип("ДокументСсылка.ОплатаПлатежнойКартой"));
				
		Если ВидСчетаФактурыСписка = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
			ИЛИ ВидСчетаФактурыСписка = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
			
			СписокТипов.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"));
			
			Если ВидСчетаФактурыСписка = Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда
				СписокТипов.Добавить(Тип("ДокументСсылка.ОтчетОРозничныхПродажах"));
			КонецЕсли;
			
		ИначеЕсли ВидСчетаФактурыСписка = Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу Тогда
			// Список типов не требует корректировки
		ИначеЕсли ВидСчетаФактурыСписка = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда 
			
			ВычитаемыеТипы = Новый Массив;
			ВычитаемыеТипы.Добавить(Тип("ДокументСсылка.НачислениеНДСпоСМРхозспособом"));
			ВычитаемыеТипы.Добавить(Тип("ДокументСсылка.СписаниеСРасчетногоСчета"));
			ВычитаемыеТипы.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
			ВычитаемыеТипы.Добавить(Тип("ДокументСсылка.ОказаниеУслуг"));
			ВычитаемыеТипы.Добавить(Тип("ДокументСсылка.КорректировкаРеализации"));
			ВычитаемыеТипы.Добавить(Тип("ДокументСсылка.ОтчетКомиссионераОПродажах"));
			ВычитаемыеТипы.Добавить(Тип("ДокументСсылка.ПринятиеКУчетуОС"));
			ВычитаемыеТипы.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"));
			ВычитаемыеТипы.Добавить(Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом"));
			ВычитаемыеТипы.Добавить(Тип("ДокументСсылка.КорректировкаДолга"));
			ВычитаемыеТипы.Добавить(Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет"));
			ВычитаемыеТипы.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
			ВычитаемыеТипы.Добавить(Тип("ДокументСсылка.ПодтверждениеНулевойСтавкиНДС"));
			ВычитаемыеТипы.Добавить(Тип("ДокументСсылка.ОтчетОРозничныхПродажах"));
			ВычитаемыеТипы.Добавить(Тип("ДокументСсылка.ОплатаПлатежнойКартой"));
			ВычитаемыеТипы.Добавить(Тип("ДокументСсылка.АвансовыйОтчет"));
			
			УчетОбособленныхПодразделений.ДобавитьТипДокументаОбособленныхПодразделений(ВычитаемыеТипы, "АвизоРасчетыВходящее");
			УчетОбособленныхПодразделений.ДобавитьТипДокументаОбособленныхПодразделений(ВычитаемыеТипы, "АвизоРасчетыИсходящее");
			
			СписокТипов = Новый ОписаниеТипов(
				Метаданные.Документы.СчетФактураВыданный.ТабличныеЧасти.ДокументыОснования.Реквизиты.ДокументОснование.Тип,
				,
				ВычитаемыеТипы);
			СписокТипов = СписокТипов.Типы();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СписокТипов;
	
КонецФункции

Функция ОпределитьВидСчетаФактурыПолученногоПоТипуОснования(ДокументОснование) Экспорт

	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета")
		ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") 
		ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.АвансовыйОтчет")
		ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		
		Возврат Перечисления.ВидСчетаФактурыПолученного.НаАванс;
		
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
		
		НомераТаблиц	= Новый Структура;
		Запрос.Текст	= 
		"ВЫБРАТЬ
		|	КорректировкаПоступления.Ссылка КАК ДокументОснование,
		|	КорректировкаПоступления.Дата,
		|	КорректировкаПоступления.Организация,
		|	КорректировкаПоступления.Контрагент,
		|	КорректировкаПоступления.ДоговорКонтрагента,
		|	КорректировкаПоступления.ВидОперации,
		|	КорректировкаПоступления.ДокументПоступления,
		|	КорректировкаПоступления.ИсправляемыйДокументПоступления,
		|	КорректировкаПоступления.ИсправляемыйДокументПоступления.ВидОперации КАК ИсправляемыйДокументПоступленияВидОперации
		|ИЗ
		|	Документ.КорректировкаПоступления КАК КорректировкаПоступления
		|ГДЕ
		|	КорректировкаПоступления.Ссылка = &ДокументОснование";
		
		Результат	= Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			Возврат Перечисления.ВидСчетаФактурыПолученного.НаПоступление;
		КонецЕсли;
		
		РеквизитыОснования	= Результат.Выбрать();
		РеквизитыОснования.Следующий();		
		
		Если ЗначениеЗаполнено(РеквизитыОснования.ИсправляемыйДокументПоступления)
			И (ТипЗнч(РеквизитыОснования.ИсправляемыйДокументПоступления) = Тип("ДокументСсылка.КорректировкаПоступления")) 
			И РеквизитыОснования.ИсправляемыйДокументПоступленияВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение 
			И РеквизитыОснования.ВидОперации <> Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
			
			Возврат Перечисления.ВидСчетаФактурыПолученного.Корректировочный;
			
		ИначеЕсли РеквизитыОснования.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
			
			Возврат Перечисления.ВидСчетаФактурыПолученного.Корректировочный;
			
		Иначе
			
			ОснованиеДляВидаОперации	= ПолучитьИсправляемыйДокументПоступления(ДокументОснование);
			
			Если ТипЗнч(ОснованиеДляВидаОперации) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета")
				ИЛИ ТипЗнч(ОснованиеДляВидаОперации) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") 
				ИЛИ ТипЗнч(ОснованиеДляВидаОперации) = Тип("ДокументСсылка.АвансовыйОтчет")
				ИЛИ ТипЗнч(ОснованиеДляВидаОперации) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
				
				Возврат Перечисления.ВидСчетаФактурыПолученного.НаАванс;
				
			ИначеЕсли ТипЗнч(ОснованиеДляВидаОперации) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
				
				Возврат Перечисления.ВидСчетаФактурыПолученного.Корректировочный;
				
			Иначе
				
				Возврат Перечисления.ВидСчетаФактурыПолученного.НаПоступление;	
				
			КонецЕсли;
			
		КонецЕсли;

	ИначеЕсли  ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		Возврат Перечисления.ВидСчетаФактурыПолученного.НаПоступление;
		
	КонецЕсли;

КонецФункции

//////////////////////////////////////////////////////////////////////////
// РАБОТА СО СЧЕТАМИ-ФАКТУРАМИ

// Документ - СчетФактураПолученный или основание для него
Функция РеквизитыДляНадписиОСчетеФактуреПолученном(Знач Документ, СтруктураОтбора = Неопределено) Экспорт

	Если ТипЗнч(Документ) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		СчетФактура = Документ;
	Иначе
		СчетФактура = НайтиПодчиненныйСчетФактуруПолученный(Документ, , , СтруктураОтбора);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетФактура) Тогда
		
		РеквизитыСФ = Новый Структура(
			"Ссылка,Представление,Исправление,ИсправлениеСобственнойОшибки,НомерИсправления,
			| ДатаИсправления,НомерСчетаФактуры,ДатаСчетаФактуры,Дата,Корректировка",
			СчетФактура, "", Ложь, Ложь, 0, '00010101');
			
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СчетФактура,
				"НомерВходящегоДокумента,ДатаВходящегоДокумента,Исправление,ИсправлениеСобственнойОшибки,
				|НомерИсправления,ДатаИсправления,Представление,Дата,ВидСчетаФактуры");
			
		ЗаполнитьЗначенияСвойств(РеквизитыСФ, ЗначенияРеквизитов);
		РеквизитыСФ.НомерСчетаФактуры = ЗначенияРеквизитов.НомерВходящегоДокумента;
		РеквизитыСФ.ДатаСчетаФактуры  = ЗначенияРеквизитов.ДатаВходящегоДокумента;
		РеквизитыСФ.Корректировка     = ЗначенияРеквизитов.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный;

	Иначе
		РеквизитыСФ = Неопределено;
	КонецЕсли;
	
	Возврат РеквизитыСФ;
	
КонецФункции 

// Документ - СчетФактураВыданный или основание для него
Функция РеквизитыДляНадписиОСчетеФактуреВыданном(Знач Документ, СтруктураОтбора = Неопределено) Экспорт
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		СчетФактура = Документ;
	Иначе
		СчетФактура = НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(Документ, , , СтруктураОтбора);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетФактура) Тогда

		РеквизитыСФ = Новый Структура(
			"Ссылка,Представление,НомерСчетаФактуры,ДатаСчетаФактуры,Исправление,
			| НомерИсправления,ДатаИсправления,Корректировка",
			СчетФактура, "");
			
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СчетФактура,
			"Номер,Дата,ВидСчетаФактуры,Исправление,НомерИсправления,
			|НомерИсходногоДокумента,ДатаИсходногоДокумента,
			|НомерИсправляемогоКорректировочногоДокумента,ДатаИсправляемогоКорректировочногоДокумента,
			|Представление");
			
		ЗаполнитьЗначенияСвойств(РеквизитыСФ, ЗначенияРеквизитов, "Исправление,НомерИсправления,Представление");
		РеквизитыСФ.Корректировка = ЗначенияРеквизитов.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;

		Если ЗначенияРеквизитов.Исправление Тогда
			РеквизитыСФ.ДатаИсправления = ЗначенияРеквизитов.Дата;
			Если ЗначенияРеквизитов.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
				РеквизитыСФ.НомерСчетаФактуры = ЗначенияРеквизитов.НомерИсправляемогоКорректировочногоДокумента;
				РеквизитыСФ.ДатаСчетаФактуры  = ЗначенияРеквизитов.ДатаИсправляемогоКорректировочногоДокумента;
			Иначе
				РеквизитыСФ.НомерСчетаФактуры = ЗначенияРеквизитов.НомерИсходногоДокумента;
				РеквизитыСФ.ДатаСчетаФактуры  = ЗначенияРеквизитов.ДатаИсходногоДокумента;
			КонецЕсли;
		Иначе
			РеквизитыСФ.НомерСчетаФактуры = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
				ЗначенияРеквизитов.Номер, Истина, Ложь);
			РеквизитыСФ.ДатаСчетаФактуры  = ЗначенияРеквизитов.Дата;
		КонецЕсли;
	Иначе
		РеквизитыСФ = Неопределено;
	КонецЕсли;
	
	Возврат РеквизитыСФ;
	
КонецФункции 

// Функция возвращает структуру вариантов представления счета-фактуры для вывода на печать в книге покупок.
//
// Параметры:
//	ДокументОснование - ДокументСсылка.*, ссылка на документ, указываемый в качестве измерения
//						в регистрах НДС.
//	НомерСчетаФактуры - Строка, номер счета-фактуры полученный предварительно.
//	ДатаСчетаФактуры  - Дата, дата счета-фактуры, полученная предварительно.
//	ОбрабатыватьНомерДокумента - Булево, признак того, что необходимо исключить префиксы из номера
//									документа перед печатью.
//	СчетФактураДокумент - ДокументСсылка.СчетФактураПолученный/СчетФактураВыданный - ссылка на 
//							подчиненный документ "счет-фактура" (необязательный)
//
Функция ОпределитьДатуИНомерСчетаФактурыДляПечати(
	ДокументОснование, 
	НомерСчетаФактуры, 
	ДатаСчетаФактуры, 
	ОбрабатыватьНомерДокумента, 
	СчетФактураДокумент,
	ЗаписьКнигиПродаж) Экспорт

	ВариантыПредставленияСчетаФактуры = НовыйВариантыПредставленияСчетаФактуры();
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат ВариантыПредставленияСчетаФактуры;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаСчетаФактуры) И ЗначениеЗаполнено(НомерСчетаФактуры) Тогда
		
		ДатаСФ  = Формат(ДатаСчетаФактуры, "ДФ=dd.MM.yyyy") ;
		
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаявлениеОВвозеТоваров")
			И ОбрабатыватьНомерДокумента Тогда
			НомерСФ = ?(ЗначениеЗаполнено(ДатаСФ), "Заявление № ", "") 
				+ ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(НомерСчетаФактуры, Истина, Ложь);
			Представление = СтрШаблон(НСтр("ru='%1 № %2 от %3'"),
				НСтр("ru='Заявление о ввозе товаров'"),
				ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(НомерСчетаФактуры, Истина, Ложь),
				ДатаСФ);
		ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ГТДИмпорт") Тогда
			
			ВариантыПредставленияСчетаФактуры.Дата          = ?(ЗаписьКнигиПродаж, ДатаСФ, "");
			ВариантыПредставленияСчетаФактуры.Номер         = НомерСчетаФактуры;
			ВариантыПредставленияСчетаФактуры.НомерДата     = НомерСчетаФактуры;
			ВариантыПредставленияСчетаФактуры.ДатаНомер     = НомерСчетаФактуры;
			ВариантыПредставленияСчетаФактуры.Представление = СтрШаблон(НСтр("ru='%1 № %2 от %3'"),
				НСтр("ru='Таможенная декларация'"),
				ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(НомерСчетаФактуры, Истина, Ложь),
				ДатаСФ);
			Возврат ВариантыПредставленияСчетаФактуры;
			
		Иначе
			Если ОбрабатыватьНомерДокумента Тогда
				НомерСФ = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(НомерСчетаФактуры, Истина, Истина);
			Иначе
				НомерСФ = СокрЛП(НомерСчетаФактуры);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СчетФактураДокумент) Тогда
				Если ТипЗнч(СчетФактураДокумент) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
					Представление = СтрШаблон(НСтр("ru='%1 № %2 от %3'"),
						НСтр("ru='Счет-фактура выданный'"),
						НомерСФ,
						ДатаСФ);
				ИначеЕсли ТипЗнч(СчетФактураДокумент) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
					Представление = СтрШаблон(НСтр("ru='%1 № %2 от %3'"),
						НСтр("ru='Счет-фактура полученный'"),
						НомерСФ,
						ДатаСФ);
				Иначе
					ИмяДокумента = СчетФактураДокумент.Метаданные().Синоним;
					Представление = СтрШаблон(НСтр("ru='%1 № %2 от %3'"),
						ИмяДокумента,
						НомерСФ,
						ДатаСФ);
				КонецЕсли;
			Иначе
				ИмяДокумента = ДокументОснование.Метаданные().Синоним;
				Представление = СтрШаблон(НСтр("ru='%1 № %2 от %3'"),
					ИмяДокумента,
					НомерСФ,
					ДатаСФ);
			КонецЕсли;
		КонецЕсли;

	Иначе
		
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, "Дата,Номер");
			ДатаСФ  = Формат(РеквизитыОснования.Дата, "ДФ=dd.MM.yyyy");
			НомерСФ = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыОснования.Номер, Истина, Ложь);
			Представление = СтрШаблон(НСтр("ru='%1 № %2 от %3'"),
				НСтр("ru='Счет-фактура выданный'"),
				НомерСФ,
				ДатаСФ);
		ИначеЕсли ТипЗнч(СчетФактураДокумент) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			РеквизитыСчетаФактуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СчетФактураДокумент, "Дата,Номер");
			ДатаСФ  = Формат(РеквизитыСчетаФактуры.Дата, "ДФ=dd.MM.yyyy");
			НомерСФ = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыСчетаФактуры.Номер, Истина, Ложь);
			Представление = СтрШаблон(НСтр("ru='%1 № %2 от %3'"),
				НСтр("ru='Счет-фактура выданный'"),
				НомерСФ,
				ДатаСФ);
		ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ГТДИмпорт") Тогда
			
			ДатаГТД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетФактураДокумент, "Дата");
			
			ВариантыПредставленияСчетаФактуры.Дата          = ?(ЗаписьКнигиПродаж, ДатаГТД, "");
			ВариантыПредставленияСчетаФактуры.Номер         = НомерСчетаФактуры;
			ВариантыПредставленияСчетаФактуры.НомерДата     = НомерСчетаФактуры;
			ВариантыПредставленияСчетаФактуры.ДатаНомер     = НомерСчетаФактуры;
			ВариантыПредставленияСчетаФактуры.Представление = СтрШаблон(НСтр("ru='%1 № %2 от %3'"),
				НСтр("ru='Таможенная декларация'"),
				ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(НомерСчетаФактуры, Истина, Ложь),
				Формат(ДатаГТД, "ДФ=dd.MM.yyyy"));
			Возврат ВариантыПредставленияСчетаФактуры;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВариантыПредставленияСчетаФактуры.ДатаНомер = "" + ДатаСФ + ?(ЗначениеЗаполнено(ДатаСФ), ";", "") + НомерСФ;
	ВариантыПредставленияСчетаФактуры.НомерДата = "" + НомерСФ + ?(ЗначениеЗаполнено(НомерСФ), ";", "") + ДатаСФ;
	
	ВариантыПредставленияСчетаФактуры.Номер = НомерСФ;
	ВариантыПредставленияСчетаФактуры.Дата = ДатаСФ;
	ВариантыПредставленияСчетаФактуры.Представление = Представление;
		
	Возврат ВариантыПредставленияСчетаФактуры;

КонецФункции

// Функция производит поиск счета-фактуры полученного с видом "на поступление" или "корректировочный" 
// по документу-основанию.
//
// Параметры:
//  ДокументОснование	- ДокументСсылка.* - Ссылка на документ, для которого надо найти счет-фактуру.
//  ИсключаемыйСФ		- ДокументСсылка.* - Ссылка на счет-фактуру, исключаемый при поиске.
//  ПометкаУдаления		- Булево - Значение пометки счета-фактуры для отбора при поиске.
//	СтруктураОтбора     - Структура - Дополнительный отбор счетов-фактур.
//
// Возвращаемое значение:
//  ДокументСсылка.СчетФактураПолученный - Если нашли, то возвращаем ссылку, не нашли - Неопределено.
//
Функция НайтиПодчиненныйСчетФактуруПолученный(
	ДокументОснование, ИсключаемыйСФ = Неопределено, ПометкаУдаления = Ложь, СтруктураОтбора = Неопределено) Экспорт

	НайденныеСФ = НайтиПодчиненныеСчетаФактурыПолученные(ДокументОснование, ИсключаемыйСФ, ПометкаУдаления, СтруктураОтбора);

	Возврат НайденныеСФ[ДокументОснование];

КонецФункции

// Функция производит поиск счета-фактуры полученного на аванс с указанным документом-основанием
//
// Параметры:
//  ДокументСсылка  - ссылка на документ, для которого надо найти подчиненный документ,
//  Отбор 			- структура с именами и значениями реквизитов СФ для дополнительного отбора
//
// Возвращаемое значение:
//  Если нашли, то возвращаем ссылку, не нашли - Неопределено
//
Функция НайтиПодчиненныйСчетФактуруПолученныйНаАванс(ДокументОснование, ИсключаемыйСФ = Неопределено, Контрагент = Неопределено, ДоговорКонтрагента = Неопределено, НомерИсправления = 0) Экспорт
	Перем СчетФактура;
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ПравоДоступа("Чтение", Метаданные.Документы.СчетФактураПолученный) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВидыСчетовФактур = Новый Массив;
	ВидыСчетовФактур.Добавить(Перечисления.ВидСчетаФактурыПолученного.НаАванс);
	ВидыСчетовФактур.Добавить(Перечисления.ВидСчетаФактурыПолученного.НаАвансКомитента);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидыСчетовФактур",   ВидыСчетовФактур);
	Запрос.УстановитьПараметр("ДокументОснование",  ДокументОснование);
	Запрос.УстановитьПараметр("ИсключаемыйСФ",      ИсключаемыйСФ);
	Запрос.УстановитьПараметр("Контрагент",         Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("НомерИсправления",   НомерИсправления);

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СчетФактура.Ссылка КАК СчетФактура
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактура
	|ГДЕ
	|	СчетФактура.ДокументОснование = &ДокументОснование
	|	И НЕ СчетФактура.ПометкаУдаления
	|	И СчетФактура.ВидСчетаФактуры В(&ВидыСчетовФактур)
	|	И СчетФактура.НомерИсправления = &НомерИсправления
	|	И НЕ СчетФактура.ИсправлениеСобственнойОшибки";
	
	Если ЗначениеЗаполнено(ИсключаемыйСФ) Тогда
		Запрос.Текст = Запрос.Текст 
		+ " И СчетФактура.Ссылка <> &ИсключаемыйСФ"
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Запрос.Текст = Запрос.Текст 
		+ " И СчетФактура.Контрагент = &Контрагент"
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Запрос.Текст = Запрос.Текст 
		+ " И СчетФактура.ДоговорКонтрагента = &ДоговорКонтрагента"
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СчетФактура = Выборка.СчетФактура;
	КонецЕсли;
	
	Возврат СчетФактура;

КонецФункции

// Функция производит поиск счета-фактуры выданного на реализацию или корректировочного с указанным документом-основанием.
//
// Параметры:
//  ДокументОснование	- ДокументСсылка.* - Ссылка на документ, для которого надо найти счет-фактурую.
//  ИсключаемыйСФ		- ДокументСсылка.СчетФактураВыданный - Ссылка на счет-фактуру, исключаемый при поиске.
//  ПометкаУдаления		- Булево - Значение пометки счета-фактуры для отбора при поиске.
//	СтруктураОтбора     - Структура - Дополнительный отбор счетов-фактур.
//
// Возвращаемое значение:
//  ДокументСсылка.СчетФактураВыданный - Если нашли, то возвращаем ссылку, не нашли - Неопределено.
//
Функция НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(ДокументОснование, ИсключаемыйСФ = Неопределено, ПометкаУдаления = Ложь, СтруктураОтбора = Неопределено) Экспорт
	
	НайденныеСФ	= НайтиПодчиненныеСчетаФактурыВыданныеНаРеализацию(ДокументОснование, ИсключаемыйСФ, ПометкаУдаления, СтруктураОтбора);

	Возврат НайденныеСФ[ДокументОснование];

КонецФункции

// Функция производит поиск счета-фактуры выданного на аванс с указанным документом-основанием
//
// Параметры:
//  ДокументОснование	- ссылка на документ, для которого надо найти счет-фактуру
//  ИсключаемыйСФ		- ссылка на счет-фактуру, исключаемый при поиске
//  ДоговорКонтрагента  - договор счета-фактуры для отбора при поиске
//  НомерИсправления    - номер исправления счета-фактуры  для отбора при поиске
//
// Возвращаемое значение:
//  Если нашли, то возвращаем ссылку, не нашли - Неопределено
//
Функция НайтиПодчиненныйСчетФактуруВыданныйНаАванс(ДокументОснование, ИсключаемыйСФ = Неопределено, Контрагент = Неопределено, ДоговорКонтрагента = Неопределено, НомерИсправления = 0) Экспорт
	Перем СчетФактура;
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ПравоДоступа("Чтение", Метаданные.Документы.СчетФактураВыданный) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВидыСчетовФактур = Новый Массив;
	ВидыСчетовФактур.Добавить(Перечисления.ВидСчетаФактурыВыставленного.НаАванс);
	ВидыСчетовФактур.Добавить(Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидыСчетовФактур",   ВидыСчетовФактур);
	Запрос.УстановитьПараметр("ДокументОснование",  ДокументОснование);
	Запрос.УстановитьПараметр("ИсключаемыйСФ",      ИсключаемыйСФ);
	Запрос.УстановитьПараметр("Контрагент",         Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("НомерИсправления",   НомерИсправления);

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СчетФактура.Ссылка КАК СчетФактура
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактура
	|ГДЕ
	|	СчетФактура.ДокументОснование = &ДокументОснование
	|	И НЕ СчетФактура.ПометкаУдаления
	|	И СчетФактура.ВидСчетаФактуры В (&ВидыСчетовФактур)
	|	И СчетФактура.НомерИсправления = &НомерИсправления";
	
	Если ЗначениеЗаполнено(ИсключаемыйСФ) Тогда
		Запрос.Текст = Запрос.Текст 
		+ " И СчетФактура.Ссылка <> &ИсключаемыйСФ"
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Запрос.Текст = Запрос.Текст 
		+ " И СчетФактура.Контрагент = &Контрагент"
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Запрос.Текст = Запрос.Текст 
		+ " И СчетФактура.ДоговорКонтрагента = &ДоговорКонтрагента"
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СчетФактура = Выборка.СчетФактура;
	КонецЕсли;
	
	Возврат СчетФактура;

КонецФункции

// Функция производит поиск счета-фактуры выданного налогового агента с указанным документом-основанием
//
// Параметры:
//  ДокументОснование	- ссылка на документ, для которого надо найти счет-фактуру
//  ИсключаемыйСФ		- ссылка на счет-фактуру, исключаемый при поиске
//  ДоговорКонтрагента  - договор счета-фактуры для отбора при поиске
//  НомерИсправления    - номер исправления счета-фактуры для отбора при поиске
//
// Возвращаемое значение:
//  Если нашли, то возвращаем ссылку, не нашли - Неопределено
//
Функция НайтиПодчиненныйСчетФактуруВыданныйНалоговыйАгент(ДокументОснование, ИсключаемыйСФ = Неопределено, ДоговорКонтрагента = Неопределено, НомерИсправления = 0) Экспорт
	Перем СчетФактура;
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ПравоДоступа("Чтение", Метаданные.Документы.СчетФактураВыданный) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидСчетаФактуры",    Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент);
	Запрос.УстановитьПараметр("ДокументОснование",  ДокументОснование);
	Запрос.УстановитьПараметр("ИсключаемыйСФ",      ИсключаемыйСФ);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("НомерИсправления",   НомерИсправления);

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СчетФактура.Ссылка КАК СчетФактура
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактура
	|ГДЕ
	|	СчетФактура.ДокументОснование = &ДокументОснование
	|	И СчетФактура.ВидСчетаФактуры = &ВидСчетаФактуры
	|	И НЕ СчетФактура.ПометкаУдаления
	|	И СчетФактура.НомерИсправления = &НомерИсправления";
	
	Если ЗначениеЗаполнено(ИсключаемыйСФ) Тогда
		Запрос.Текст = Запрос.Текст 
		+ " И СчетФактура.Ссылка <> &ИсключаемыйСФ"
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Запрос.Текст = Запрос.Текст 
		+ " И СчетФактура.ДоговорКонтрагента = &ДоговорКонтрагента"
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СчетФактура = Выборка.СчетФактура;
	КонецЕсли;
	
	Возврат СчетФактура;

КонецФункции

// Функция производит поиск счета-фактуры выданного на суммовую разницу с указанным документом-основанием
// Параметры:
//  ДокументОснование   - ссылка на документ, для которого надо найти счет-фактуру
//  ИсключаемыйСФ		- ссылка на счет-фактуру, исключаемый при поиске
//  ДоговорКонтрагента  - договор счета-фактуры для отбора при поиске
//
// Возвращаемое значение:
//  Если нашли, то возвращаем ссылку, не нашли - Неопределено
//
Функция НайтиПодчиненныйСчетФактуруВыданныйНаСуммовуюРазницу(ДокументОснование, ИсключаемыйСФ = Неопределено, ДоговорКонтрагента = Неопределено) Экспорт
	Перем СчетФактура;
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ПравоДоступа("Чтение", Метаданные.Документы.СчетФактураВыданный) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидСчетаФактуры",    Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу);
	Запрос.УстановитьПараметр("ДокументОснование",  ДокументОснование);
	Запрос.УстановитьПараметр("ИсключаемыйСФ",      ИсключаемыйСФ);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СчетФактура.Ссылка КАК СчетФактура
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактура
	|ГДЕ
	|	СчетФактура.ДокументОснование = &ДокументОснование
	|	И СчетФактура.ВидСчетаФактуры = &ВидСчетаФактуры
	|	И НЕ СчетФактура.ПометкаУдаления";
	
	Если ЗначениеЗаполнено(ИсключаемыйСФ) Тогда
		Запрос.Текст = Запрос.Текст 
		+ " И СчетФактура.Ссылка <> &ИсключаемыйСФ"
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Запрос.Текст = Запрос.Текст 
		+ " И СчетФактура.ДоговорКонтрагента = &ДоговорКонтрагента"
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СчетФактура = Выборка.СчетФактура;
	КонецЕсли;
	
	Возврат СчетФактура;

КонецФункции

// Функция производит поиск счета-фактуры полученного по заданному основанию, номеру и дате
// и дополняет его переданным документом-основанием
Функция ДобавитьОснованиеВСчетФактуруПолученный(Основание, НомерСчетаФактурыПолученного, ДатаСчетаФактурыПолученного) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетФактураПолученный.Ссылка КАК СчетФактура
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.ПометкаУдаления = ЛОЖЬ
	|	И СчетФактураПолученный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.НаПоступление)
	|	И СчетФактураПолученный.Контрагент = &Контрагент
	|	И СчетФактураПолученный.Организация = &Организация
	|	И СчетФактураПолученный.НомерВходящегоДокумента = &НомерСчетаФактурыПолученного
	|	И СчетФактураПолученный.ДатаВходящегоДокумента = &ДатаСчетаФактурыПолученного
	|	И НЕ СчетФактураПолученный.Исправление
	|	И НЕ СчетФактураПолученный.ИсправлениеСобственнойОшибки";
	
	РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание,
		"Контрагент,ДоговорКонтрагента.ВидДоговора,Организация,Проведен");
	
	Запрос.УстановитьПараметр("Контрагент", РеквизитыОснования.Контрагент);
	Запрос.УстановитьПараметр("Организация", РеквизитыОснования.Организация);
	Запрос.УстановитьПараметр("НомерСчетаФактурыПолученного", НомерСчетаФактурыПолученного);
	Запрос.УстановитьПараметр("ДатаСчетаФактурыПолученного", ДатаСчетаФактурыПолученного);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 0 Тогда
		Выборка.Следующий();
		
		СчетФактура = Выборка.СчетФактура.ПолучитьОбъект();
		НоваяСтрока = СчетФактура.ДокументыОснования.Добавить();
		НоваяСтрока.ДокументОснование = Основание;
		
		ПараметрыСчетаФактуры = ПараметрыСчетаФактуры(СчетФактура);
		ЗаполнитьЗначенияСвойств(СчетФактура, ПараметрыСчетаФактуры);
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Дата",                     СчетФактура.Дата);
		СтруктураПараметров.Вставить("ВидСчетаФактуры",          СчетФактура.ВидСчетаФактуры);
		СтруктураПараметров.Вставить("Исправление",              СчетФактура.Исправление);
		СтруктураПараметров.Вставить("КодВидаОперацииОснования", Неопределено);
		СтруктураПараметров.Вставить("ВидДоговора",              РеквизитыОснования.ДоговорКонтрагентаВидДоговора);
		СтруктураПараметров.Вставить("ДокументыОснования",       СчетФактура.ДокументыОснования.Выгрузить(,"ДокументОснование"));
		СтруктураПараметров.Вставить("СчетФактураБезНДС",        СчетФактура.СчетФактураБезНДС);
		СтруктураПараметров.Вставить("НДСПоСтавкам4и2",          Ложь);
		
		СчетФактура.КодВидаОперации = Документы.СчетФактураПолученный.ПолучитьКодВидаОперации(СтруктураПараметров);
		
		РежимЗаписи = ?(РеквизитыОснования.Проведен,
			РежимЗаписиДокумента.Проведение,
			РежимЗаписиДокумента.Запись);
		
		СчетФактура.Записать(РежимЗаписи);
		
		Возврат Выборка.СчетФактура;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция производит поиск исправленного и/или корректировочного счета-фактуры полученного по заданному основанию, номеру и дате
// и дополняет его переданным документом-основанием
Функция ДобавитьОснованиеВИсправленныйСчетФактуруПолученный(
	Основание, НомерСчетаФактурыПолученного, ДатаСчетаФактурыПолученного, Исправление, ВидСчетаФактуры) Экспорт
	
	СтруктураПараметровЗапроса = Новый Структура(
		"НомерСчетаФактурыПолученного,ДатаСчетаФактурыПолученного,
		|ВидСчетаФактуры,Исправление,ДатаИсправления,НомерИсправления");
	
	СтруктураПараметровЗапроса.Исправление = Исправление;
	СтруктураПараметровЗапроса.ВидСчетаФактуры = ?(ВидСчетаФактуры = Неопределено,
		Перечисления.ВидСчетаФактурыПолученного.НаПоступление,
		ВидСчетаФактуры);
		
	РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание,
		"ДокументПоступления,Контрагент,ДоговорКонтрагента.ВидДоговора,Организация,Проведен");

	Если Исправление Тогда
	
		Если ТипЗнч(РеквизитыОснования.ДокументПоступления) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
			ИсходныйСчетФактура = РеквизитыОснования.ДокументПоступления;
		// Необходимо найти исходный счет-фактуру	
		Иначе
			ИсходныйСчетФактура = НайтиПодчиненныйСчетФактуруПолученный(РеквизитыОснования.ДокументПоступления);
		КонецЕсли;
		
		Если ИсходныйСчетФактура <> Неопределено Тогда
			
			РеквизитыСчетаФактуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИсходныйСчетФактура, 
				"НомерВходящегоДокумента, ДатаВходящегоДокумента");
			
			СтруктураПараметровЗапроса.НомерСчетаФактурыПолученного = РеквизитыСчетаФактуры.НомерВходящегоДокумента;
			СтруктураПараметровЗапроса.ДатаСчетаФактурыПолученного  = РеквизитыСчетаФактуры.ДатаВходящегоДокумента;
			СтруктураПараметровЗапроса.ДатаИсправления              = ДатаСчетаФактурыПолученного;
			СтруктураПараметровЗапроса.НомерИсправления             = Число(НомерСчетаФактурыПолученного);
			
		Иначе
			Возврат Неопределено;
		КонецЕсли; 
		
	Иначе
			СтруктураПараметровЗапроса.НомерСчетаФактурыПолученного = НомерСчетаФактурыПолученного;
			СтруктураПараметровЗапроса.ДатаСчетаФактурыПолученного  = ДатаСчетаФактурыПолученного;
			СтруктураПараметровЗапроса.ДатаИсправления              = '00010101';
			СтруктураПараметровЗапроса.НомерИсправления             = 0;
			
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетФактураПолученный.Ссылка КАК СчетФактура
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.ПометкаУдаления = ЛОЖЬ
	|	И СчетФактураПолученный.ВидСчетаФактуры = &ВидСчетаФактуры
	|	И СчетФактураПолученный.Контрагент = &Контрагент
	|	И СчетФактураПолученный.Организация = &Организация
	|	И СчетФактураПолученный.НомерВходящегоДокумента = &НомерСчетаФактурыПолученного
	|	И СчетФактураПолученный.ДатаВходящегоДокумента = &ДатаСчетаФактурыПолученного
	|	И СчетФактураПолученный.Исправление = &Исправление
	|	И ВЫБОР
	|			КОГДА &Исправление
	|				ТОГДА СчетФактураПолученный.НомерИсправления = &НомерИсправления
	|						И СчетФактураПолученный.ДатаИсправления = &ДатаИсправления
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И НЕ СчетФактураПолученный.ИсправлениеСобственнойОшибки";
	
	Запрос.УстановитьПараметр("Контрагент",                   РеквизитыОснования.Контрагент);
	Запрос.УстановитьПараметр("Организация",                  РеквизитыОснования.Организация);
	Запрос.УстановитьПараметр("НомерСчетаФактурыПолученного", СтруктураПараметровЗапроса.НомерСчетаФактурыПолученного);
	Запрос.УстановитьПараметр("ДатаСчетаФактурыПолученного",  СтруктураПараметровЗапроса.ДатаСчетаФактурыПолученного);
	Запрос.УстановитьПараметр("Исправление",                  СтруктураПараметровЗапроса.Исправление);
	Запрос.УстановитьПараметр("НомерИсправления",             СтруктураПараметровЗапроса.НомерИсправления);
	Запрос.УстановитьПараметр("ДатаИсправления",              СтруктураПараметровЗапроса.ДатаИсправления);
	Запрос.УстановитьПараметр("ВидСчетаФактуры",              СтруктураПараметровЗапроса.ВидСчетаФактуры);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 0 Тогда
		
		Выборка.Следующий();
		
		СчетФактура = Выборка.СчетФактура.ПолучитьОбъект();
		НоваяСтрока = СчетФактура.ДокументыОснования.Добавить();
		НоваяСтрока.ДокументОснование = Основание;
		
		ПараметрыСчетаФактуры = ПараметрыСчетаФактуры(СчетФактура);
		ЗаполнитьЗначенияСвойств(СчетФактура, ПараметрыСчетаФактуры);
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Дата",                     СчетФактура.Дата);
		СтруктураПараметров.Вставить("ВидСчетаФактуры",          СчетФактура.ВидСчетаФактуры);
		СтруктураПараметров.Вставить("Исправление",              СчетФактура.Исправление);
		СтруктураПараметров.Вставить("КодВидаОперацииОснования", Неопределено);
		СтруктураПараметров.Вставить("ВидДоговора",              РеквизитыОснования.ДоговорКонтрагентаВидДоговора);
		СтруктураПараметров.Вставить("ДокументыОснования",       СчетФактура.ДокументыОснования.Выгрузить(,"ДокументОснование"));
		СтруктураПараметров.Вставить("СчетФактураБезНДС",        СчетФактура.СчетФактураБезНДС);
		СтруктураПараметров.Вставить("НДСПоСтавкам4и2",          Ложь);
		
		ТаблицаОснований = ПараметрыСчетаФактуры.РеквизитыОснований;
		ТаблицаОснований.Свернуть("НомерИсходногоДокумента, ДатаИсходногоДокумента");
		
		Если ТаблицаОснований.Количество() > 1 Тогда
			СводныйКорректировочный = Истина;
		Иначе
			СводныйКорректировочный = Ложь;
		КонецЕсли;
		
		Если СводныйКорректировочный 
		   И УчетНДСКлиентСервер.ВерсияКодовВидовОпераций(ДатаСчетаФактурыПолученного) = 3 Тогда
			// Получение единого корректировочного счета-фактуры
			СчетФактура.КодВидаОперации             = "01";
			СчетФактура.КодВидаОперацииНаУменьшение = "01";
		Иначе
			СчетФактура.КодВидаОперации = Документы.СчетФактураПолученный.ПолучитьКодВидаОперации(СтруктураПараметров);
		КонецЕсли;
		
		РежимЗаписи = ?(РеквизитыОснования.Проведен,
			РежимЗаписиДокумента.Проведение,
			РежимЗаписиДокумента.Запись);
		
		СчетФактура.Записать(РежимЗаписи);
		
		Возврат Выборка.СчетФактура;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция определяет наличие счетов-фактур, полученных по документам,
// которые могут являться основаниями для ввода счетов-фактур полученных.
//
// Применяется для контроля за наличием в ИБ информации о наличии счетов-фактур.
//
// Параметры:
//  ПараметрыПоискаСчетовФактур - Структура - параметры поиска счетов-фактур.
//                                См. конструктор параметров УчетНДС.НовыйПараметрыПоискаСчетовФактур().
//   * НачалоПериода - Дата - Начальная дата выборки (включительно, с 00:00:00)
//   * КонецПериода  - Дата - Конечная дата выборки (включительно, по 23:59:59)
//   * Организация   - СправочникСсылка.Организации - Организация, по которой
//                     осуществляется поиск. Если организация не задана, то поиск
//                     ведется по всем организациям.
//   * Фильтр        - Документ.Ссылка, Массив, Неопределено - Документ или список документов,
//                     по которым осуществляется поиск.
//                     Если не задан, поиск осуществляется по всем документам,
//                     которые могут являться основаниями для ввода счетов-фактур
//                     полученных.
//   * ВсеКромеФильтра  - Булево - Признак отбора документов, не входящих в Фильтр.
//
//   * НаличиеСчетаФактуры - Булево, Неопределено - Признак отбора документов:
//                           Истина - искать документы, по которым существуют счета-фактуры.
//                           Ложь - искать документы, по которым счета-фактуры отсутствуют.
//                           Неопределено - поиск осуществляется для всех документов.
//   * СчетФактураПроведен - Булево, Неопределено - Признак отбора счетов-фактур:
//                           Истина - искать проведенные счета-фактуры.
//                           Ложь - искать непроведенные счета-фактуры.
//                           Неопределено - осуществляется поиск всех счетов-фактур.
//   * ДатаСФНеБолее    - Дата, Неопределено - крайняя дата поиска счетов-фактур.
//   * ИскатьПоОборотам - Булево - Истина - поиск осуществляется по оборотам регистра накопления НДСПредъявленный,
//                                 Ложь - поиск осуществляется по остаткам.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица значений - Состав колонок:
//   * Документ - ДокументСсылка - Документ, по которому производился поиск счета-фактуры полученного.
//   * СчетФактура - ДокументСсылка, Неопределено - Ссылка на счет-фактуру полученный.
//
Функция ОпределитьНаличиеСчетовФактурПолученных(ПараметрыПоискаСчетовФактур) Экспорт
	
	ЭтоОтчет            = ПараметрыПоискаСчетовФактур.ИскатьПоОборотам;
	Организация         = ПараметрыПоискаСчетовФактур.Организация;
	Фильтр              = ПараметрыПоискаСчетовФактур.Фильтр;
	ВсеКромеФильтра     = ПараметрыПоискаСчетовФактур.ВсеКромеФильтра;
	НаличиеСчетаФактуры = ПараметрыПоискаСчетовФактур.НаличиеСчетаФактуры;
	СчетФактураПроведен = ПараметрыПоискаСчетовФактур.СчетФактураПроведен;
	
	Если ЗначениеЗаполнено(ПараметрыПоискаСчетовФактур.НачалоПериода) Тогда
		НачПериода = ПараметрыПоискаСчетовФактур.НачалоПериода;
	Иначе
		НачПериода = ОбщегоНазначенияБПСобытия.КорректныйПериодВводаДокументов().НачалоКорректногоПериода;
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыПоискаСчетовФактур.КонецПериода) Тогда
		КонПериода = ПараметрыПоискаСчетовФактур.КонецПериода;
		НачалоНалоговогоПериода = НачалоКвартала(КонПериода);
	Иначе
		КонПериода = ОбщегоНазначенияБПСобытия.КорректныйПериодВводаДокументов().КонецКорректногоПериода;
		НачалоНалоговогоПериода = '00010101';
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыПоискаСчетовФактур.ДатаСФНеБолее) Тогда
		ДатаСФНеБолее     = КонецДня(ПараметрыПоискаСчетовФактур.ДатаСФНеБолее);
		КонПериодаГраница = Новый Граница(ДатаСФНеБолее, ВидГраницы.Включая);
	Иначе
		ДатаСФНеБолее     = Неопределено;
		КонПериодаГраница = Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",             Организация);
	Запрос.УстановитьПараметр("НачПериода",              НачПериода);
	Запрос.УстановитьПараметр("КонПериода",              КонПериода);
	Запрос.УстановитьПараметр("КонПериодаГраница",       КонПериодаГраница);
	Запрос.УстановитьПараметр("ДатаСФНеБолее",           ДатаСФНеБолее);
	Запрос.УстановитьПараметр("НачалоНалоговогоПериода", НачалоНалоговогоПериода);
	Запрос.УстановитьПараметр("ЭтоОтчет",                ЭтоОтчет);
	
	// Получаем список счетов-фактур.
	
	ТекстЗапроса = "";
	ПереданМенеджерТаблиц = (ТипЗнч(Фильтр) = Тип("МенеджерВременныхТаблиц"));
	Если Не ПереданМенеджерТаблиц Тогда
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;
	Если ПереданМенеджерТаблиц Тогда // берём из готовой временной таблицы
		
		Запрос.МенеджерВременныхТаблиц = Фильтр;
		
		Если ЭтоОтчет Тогда
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	СписокСчетовФактур.СчетФактура КАК СчетФактура
			|ПОМЕСТИТЬ СписокСчетовФактурОтбор
			|ИЗ
			|	СписокСчетовФактур КАК СписокСчетовФактур
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
			|		ПО СписокСчетовФактур.СчетФактура = ВозвратТоваровОтПокупателя.Ссылка
			|			И (ВозвратТоваровОтПокупателя.Организация = &Организация)
			|			И (ВозвратТоваровОтПокупателя.Сделка ССЫЛКА Документ.ОтчетОРозничныхПродажах)
			|ГДЕ
			|	ВозвратТоваровОтПокупателя.Ссылка ЕСТЬ NULL 
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	СчетФактура";
		Иначе
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	СписокСчетовФактур.СчетФактура КАК СчетФактура
			|ПОМЕСТИТЬ СписокСчетовФактурОтбор
			|ИЗ
			|	СписокСчетовФактур КАК СписокСчетовФактур
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	СчетФактура";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета()
			+ "УНИЧТОЖИТЬ СписокСчетовФактур";
			
	ИначеЕсли ЗначениеЗаполнено(Фильтр) Тогда // создаём временную таблицу
		
		Запрос.УстановитьПараметр("Фильтр", Фильтр);
		
		Если ЭтоОтчет Тогда
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	НДСПредъявленный.СчетФактура КАК СчетФактура
			|ПОМЕСТИТЬ СписокСчетовФактурОтбор
			|ИЗ
			|	РегистрНакопления.НДСПредъявленный КАК НДСПредъявленный
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
			|		ПО НДСПредъявленный.СчетФактура = ВозвратТоваровОтПокупателя.Ссылка
			|			И (ВозвратТоваровОтПокупателя.Организация = &Организация)
			|			И (ВозвратТоваровОтПокупателя.Сделка ССЫЛКА Документ.ОтчетОРозничныхПродажах)
			|ГДЕ
			|	НДСПредъявленный.СчетФактура В(&Фильтр)
			|	И ВозвратТоваровОтПокупателя.Ссылка ЕСТЬ NULL 
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	СчетФактура";
		Иначе
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	НДСПредъявленный.СчетФактура КАК СчетФактура
			|ПОМЕСТИТЬ СписокСчетовФактурОтбор
			|ИЗ
			|	РегистрНакопления.НДСПредъявленный КАК НДСПредъявленный
			|ГДЕ
			|	НДСПредъявленный.СчетФактура В(&Фильтр)
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	СчетФактура";
		КонецЕсли;
		
	КонецЕсли;
	Если Не ПустаяСтрока(ТекстЗапроса) Тогда
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
	КонецЕсли;
	
	// Получаем данные счетов-фактур.
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НДСПредъявленныйОбороты.СчетФактура КАК СчетФактура,
	|	НДСПредъявленныйОбороты.Поставщик КАК Контрагент,
	|	НДСПредъявленныйОбороты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	НДСПредъявленныйОбороты.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	ВЫБОР
	|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|				ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ГТДИмпорт
	|				ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОсобыйВариантСчетаФактуры,
	|	ВЫБОР
	|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ОтчетКомиссионераОПродажах
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоОтчетКомиссионераОПродажах
	|ПОМЕСТИТЬ ВТ_ДанныеСчетовФактур
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный.Обороты(
	|			,
	|			&КонПериода,
	|			Период,
	|			Организация = &Организация
	|				И &СписокСчетовФактурОтбор
	|				И &ОтборПоВидуЦенности) КАК НДСПредъявленныйОбороты
	|ГДЕ
	|	НЕ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.КорректировкаРеализации
	|	И НЕ(НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ПоступлениеТоваровУслуг
	|				И НДСПредъявленныйОбороты.ДоговорКонтрагента <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|				И НДСПредъявленныйОбороты.ДоговорКонтрагента.УчетАгентскогоНДС)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НДСЗаписиКнигиПродажОбороты.СчетФактура,
	|	НДСЗаписиКнигиПродажОбороты.Покупатель,
	|	НДСЗаписиКнигиПродажОбороты.ДоговорКонтрагента,
	|	НДСЗаписиКнигиПродажОбороты.ИсправленныйСчетФактура,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|			&НачПериода,
	|			&КонПериода,
	|			Период,
	|			Организация = &Организация
	|				И СчетФактура ССЫЛКА Документ.КорректировкаПоступления
	|				И &СписокСчетовФактурОтбор
	|				И &ОтборПоВидуЦенности) КАК НДСЗаписиКнигиПродажОбороты
	|ГДЕ
	|	&ЭтоОтчет
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВТ_ДанныеСчетовФактур.ИсправленныйСчетФактура = НЕОПРЕДЕЛЕНО
	|			ТОГДА ВТ_ДанныеСчетовФактур.СчетФактура
	|		ИНАЧЕ ВТ_ДанныеСчетовФактур.ИсправленныйСчетФактура
	|	КОНЕЦ КАК СчетФактура,
	|	ВТ_ДанныеСчетовФактур.Контрагент КАК Контрагент,
	|	ВТ_ДанныеСчетовФактур.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТ_ДанныеСчетовФактур.ОсобыйВариантСчетаФактуры КАК ОсобыйВариантСчетаФактуры,
	|	ВТ_ДанныеСчетовФактур.ЭтоОтчетКомиссионераОПродажах КАК ЭтоОтчетКомиссионераОПродажах,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.ДатаРегистратора, &НачПериода) КАК ДатаРегистратора,
	|	ВТ_ДанныеСчетовФактур.СчетФактура КАК СчетФактураДокумент
	|ПОМЕСТИТЬ ВременнаяТаблицаОстатки
	|ИЗ
	|	ВТ_ДанныеСчетовФактур КАК ВТ_ДанныеСчетовФактур
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО ВТ_ДанныеСчетовФактур.СчетФактура = ДанныеПервичныхДокументов.Документ
	|ГДЕ
	|	&ОтборПоПериоду
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ДанныеСчетовФактур";
	
	Если НЕ ЭтоОтчет Тогда // используем остатки для заполнения документа
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"НДСПредъявленный.Обороты(
		|			,
		|			&КонПериода,
		|			Период",
		"НДСПредъявленный.Остатки(
		|			&КонПериодаГраница");
	КонецЕсли;
	
	// Задаём условие отбора по организации.
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Организация = &Организация", "ИСТИНА");
	КонецЕсли;
	
	// Задаём условие отбора по списку документов-оснований.
	Если ПереданМенеджерТаблиц
	 Или ЗначениеЗаполнено(Фильтр) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СписокСчетовФактурОтбор",
			?(ВсеКромеФильтра, "НЕ ", "") + "СчетФактура В
			|						(ВЫБРАТЬ
			|							СписокСчетовФактурОтбор.СчетФактура
			|						ИЗ
			|							СписокСчетовФактурОтбор КАК СписокСчетовФактурОтбор)");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &СписокСчетовФактурОтбор", "");
	КонецЕсли;
	
	// Задаём условие отбора по виду ценности.
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ОтборПоВидуЦенности",
		?(ЭтоОтчет, "И ВидЦенности <> ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТаможенныйСоюз)", ""));
		
	// Задаём условие отбора по периоду.
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборПоПериоду",
		"ЕСТЬNULL(ДанныеПервичныхДокументов.ДатаРегистратора, &НачПериода) МЕЖДУ &НачПериода И "
			+ ?(ЗначениеЗаполнено(ДатаСФНеБолее), "&ДатаСФНеБолее", "&КонПериода"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборПоПериоду", "ИСТИНА");
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	// Готовим таблицу с данными заявлений о ввозе на территорию Таможенного союза.
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДатыОплатВКнигеПокупок.СчетФактура КАК СчетФактура
	|ПОМЕСТИТЬ ОплаченныеЗаявленияОВвозе
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок КАК ДатыОплатВКнигеПокупок
	|ГДЕ
	|	ДатыОплатВКнигеПокупок.Организация = &Организация
	|	И ДатыОплатВКнигеПокупок.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТаможенныйСоюз)
	|	И ДатыОплатВКнигеПокупок.Период <= &КонПериода
	|	И ДатыОплатВКнигеПокупок.ДатаДокументаОплаты <= &КонПериода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура";
	
	// Задаём условие отбора по организации.
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДатыОплатВКнигеПокупок.Организация = &Организация", "ИСТИНА");
	КонецЕсли;
		
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВременнаяТаблицаОстатки.СчетФактура КАК СчетФактура
	|ПОМЕСТИТЬ ВременнаяТаблицаСчетФактуры
	|ИЗ
	|	ВременнаяТаблицаОстатки КАК ВременнаяТаблицаОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВременнаяТаблицаОстатки.СчетФактураДокумент
	|ИЗ
	|	ВременнаяТаблицаОстатки КАК ВременнаяТаблицаОстатки
	|ГДЕ
	|	ВременнаяТаблицаОстатки.СчетФактура <> ВременнаяТаблицаОстатки.СчетФактураДокумент
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетФактураПолученный.Ссылка КАК СчетФактура,
	|	СчетФактураПолученный.Ссылка КАК ССылка,
	|	СчетФактураПолученный.ДокументОснование КАК ДокументОснование,
	|	СчетФактураПолученный.Ссылка.Проведен КАК СчетФактураПроведен,
	|	ВЫБОР
	|		КОГДА &ЭтоОтчет
	|			ТОГДА СчетФактураПолученный.Ссылка.ДатаВходящегоДокумента
	|		ИНАЧЕ СчетФактураПолученный.Ссылка.Дата
	|	КОНЕЦ КАК СчетФактураДата,
	|	ВЫБОР
	|		КОГДА &ЭтоОтчет
	|			ТОГДА СчетФактураПолученный.Ссылка.НомерВходящегоДокумента
	|		ИНАЧЕ СчетФактураПолученный.Ссылка.Номер
	|	КОНЕЦ КАК СчетФактураНомер,
	|	СчетФактураПолученный.Ссылка.КодВидаОперации
	|ПОМЕСТИТЬ ВременнаяТаблицаСчетФактураПолученный
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаСчетФактуры КАК ВременнаяТаблицаСчетФактуры
	|		ПО СчетФактураПолученный.Ссылка = ВременнаяТаблицаСчетФактуры.СчетФактура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетФактураПолученный.ДокументОснование,
	|	СчетФактураПолученный.Ссылка,
	|	СчетФактураПолученный.ДокументОснование,
	|	СчетФактураПолученный.Ссылка.Проведен,
	|	ВЫБОР
	|		КОГДА &ЭтоОтчет
	|			ТОГДА СчетФактураПолученный.Ссылка.ДатаВходящегоДокумента
	|		ИНАЧЕ СчетФактураПолученный.Ссылка.Дата
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ЭтоОтчет
	|			ТОГДА СчетФактураПолученный.Ссылка.НомерВходящегоДокумента
	|		ИНАЧЕ СчетФактураПолученный.Ссылка.Номер
	|	КОНЕЦ,
	|	СчетФактураПолученный.Ссылка.КодВидаОперации
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаСчетФактуры КАК ВременнаяТаблицаСчетФактуры
	|		ПО СчетФактураПолученный.ДокументОснование = ВременнаяТаблицаСчетФактуры.СчетФактура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателя.Ссылка,
	|	ВозвратТоваровОтПокупателя.Ссылка,
	|	ВозвратТоваровОтПокупателя.Ссылка,
	|	ВозвратТоваровОтПокупателя.Проведен,
	|	ВозвратТоваровОтПокупателя.Дата,
	|	ВозвратТоваровОтПокупателя.Номер,
	|	""""
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаСчетФактуры КАК ВременнаяТаблицаСчетФактуры
	|		ПО ВозвратТоваровОтПокупателя.Ссылка = ВременнаяТаблицаСчетФактуры.СчетФактура
	|ГДЕ
	|	ВозвратТоваровОтПокупателя.Сделка ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|	И ВозвратТоваровОтПокупателя.НомерРасходногоКассовогоОрдера <> """"
	|	И ВозвратТоваровОтПокупателя.ДатаРасходногоКассовогоОрдера <> ДАТАВРЕМЯ(1, 1, 1)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаявлениеОВвозеТоваров.Ссылка,
	|	ЗаявлениеОВвозеТоваров.Ссылка,
	|	ЗаявлениеОВвозеТоваров.Ссылка,
	|	ЗаявлениеОВвозеТоваров.Проведен,
	|	ЗаявлениеОВвозеТоваров.Дата,
	|	ЗаявлениеОВвозеТоваров.Номер,
	|	""19""
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК ЗаявлениеОВвозеТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОплаченныеЗаявленияОВвозе КАК ОплаченныеЗаявленияОВвозе
	|		ПО ЗаявлениеОВвозеТоваров.Ссылка = ОплаченныеЗаявленияОВвозе.СчетФактура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ГТДИмпорт.Ссылка,
	|	ГТДИмпорт.Ссылка,
	|	ГТДИмпорт.Ссылка,
	|	ГТДИмпорт.Проведен,
	|	ГТДИмпорт.Дата,
	|	ГТДИмпорт.НомерГТД,
	|	""20""
	|ИЗ
	|	Документ.ГТДИмпорт КАК ГТДИмпорт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаСчетФактуры КАК ВременнаяТаблицаСчетФактуры
	|		ПО ГТДИмпорт.Ссылка = ВременнаяТаблицаСчетФактуры.СчетФактура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетФактураВыданный.Ссылка КАК СчетФактура,
	|	СчетФактураВыданный.Ссылка КАК Ссылка,
	|	СчетФактураВыданный.ДокументОснование КАК ДокументОснование,
	|	СчетФактураВыданный.Ссылка.ДокументОснование КАК СчетФактураДокументОснование,
	|	СчетФактураВыданный.Ссылка.Проведен КАК СчетФактураПроведен,
	|	СчетФактураВыданный.Ссылка.Дата КАК СчетФактураДата,
	|	СчетФактураВыданный.Ссылка.КодВидаОперации КАК КодВидаОперации
	|ПОМЕСТИТЬ ВременнаяТаблицаСчетФактураВыданный
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаСчетФактуры КАК ВременнаяТаблицаСчетФактуры
	|		ПО СчетФактураВыданный.Ссылка = ВременнаяТаблицаСчетФактуры.СчетФактура
	|ГДЕ
	|	СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаРеализацию)
	|	И (СчетФактураВыданный.Ссылка.Продавец = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ИЛИ СчетФактураВыданный.Ссылка.Продавец = СчетФактураВыданный.Ссылка.Контрагент)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетФактураВыданный.ДокументОснование,
	|	СчетФактураВыданный.Ссылка,
	|	СчетФактураВыданный.ДокументОснование,
	|	СчетФактураВыданный.Ссылка.ДокументОснование,
	|	СчетФактураВыданный.Ссылка.Проведен,
	|	СчетФактураВыданный.Ссылка.Дата,
	|	СчетФактураВыданный.Ссылка.КодВидаОперации
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаСчетФактуры КАК ВременнаяТаблицаСчетФактуры
	|		ПО СчетФактураВыданный.ДокументОснование = ВременнаяТаблицаСчетФактуры.СчетФактура
	|ГДЕ
	|	СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаРеализацию)
	|	И (СчетФактураВыданный.Ссылка.Продавец = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ИЛИ СчетФактураВыданный.Ссылка.Продавец = СчетФактураВыданный.Ссылка.Контрагент)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура";
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	ТекстЗапроса = ТекстЗапроса + 	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НДСПредъявленныйОбороты.ДатаРегистратора КАК Дата,
	|	НДСПредъявленныйОбороты.Контрагент КАК Контрагент,
	|	НДСПредъявленныйОбороты.СчетФактураДокумент КАК Документ,
	|	ВЫБОР
	|		КОГДА НДСПредъявленныйОбороты.СчетФактура = НДСПредъявленныйОбороты.СчетФактураДокумент
	|			ТОГДА ВЫБОР
	|					КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|						ТОГДА ЕСТЬNULL(СчетФактураПолученный.ДокументОснование, НЕОПРЕДЕЛЕНО)
	|					КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|						ТОГДА ЕСТЬNULL(СчетФактураВыданный.СчетФактураДокументОснование, НЕОПРЕДЕЛЕНО)
	|					ИНАЧЕ НДСПредъявленныйОбороты.СчетФактура
	|				КОНЕЦ
	|		ИНАЧЕ НДСПредъявленныйОбороты.СчетФактура
	|	КОНЕЦ КАК ДокументОснование,
	|	ВЫБОР
	|		КОГДА НДСПредъявленныйОбороты.ОсобыйВариантСчетаФактуры
	|			ТОГДА НДСПредъявленныйОбороты.СчетФактураДокумент
	|		КОГДА СчетФактураПолученный.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА СчетФактураПолученный.Ссылка
	|		КОГДА НЕ НДСПредъявленныйОбороты.ЭтоОтчетКомиссионераОПродажах
	|				И СчетФактураВыданный.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА СчетФактураВыданный.Ссылка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СчетФактура,
	|	ВЫБОР
	|		КОГДА НДСПредъявленныйОбороты.ОсобыйВариантСчетаФактуры
	|			ТОГДА ИСТИНА
	|		КОГДА СчетФактураПолученный.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА СчетФактураПолученный.СчетФактураПроведен
	|		КОГДА НЕ НДСПредъявленныйОбороты.ЭтоОтчетКомиссионераОПродажах
	|				И СчетФактураВыданный.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА СчетФактураВыданный.СчетФактураПроведен
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СчетФактураПроведен,
	|	ВЫБОР
	|		КОГДА НДСПредъявленныйОбороты.ОсобыйВариантСчетаФактуры
	|			ТОГДА НДСПредъявленныйОбороты.ДатаРегистратора
	|		КОГДА СчетФактураПолученный.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА СчетФактураПолученный.СчетФактураДата
	|		КОГДА НЕ НДСПредъявленныйОбороты.ЭтоОтчетКомиссионераОПродажах
	|				И СчетФактураВыданный.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА СчетФактураВыданный.СчетФактураДата
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СчетФактураДата,
	|	ЕСТЬNULL(СчетФактураПолученный.СчетФактураНомер, """") КАК СчетФактураНомер,
	|	ВЫБОР
	|		КОГДА НДСПредъявленныйОбороты.ОсобыйВариантСчетаФактуры
	|			ТОГДА ЛОЖЬ
	|		КОГДА СчетФактураПолученный.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		КОГДА НЕ НДСПредъявленныйОбороты.ЭтоОтчетКомиссионераОПродажах
	|				И СчетФактураВыданный.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоСчетФактураПолученный,
	|	ЕСТЬNULL(СчетФактураПолученный.КодВидаОперации, СчетФактураВыданный.КодВидаОперации) КАК КодВидаОперации
	|ИЗ
	|	ВременнаяТаблицаОстатки КАК НДСПредъявленныйОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСчетФактураПолученный КАК СчетФактураПолученный
	|		ПО НДСПредъявленныйОбороты.СчетФактура = СчетФактураПолученный.СчетФактура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСчетФактураВыданный КАК СчетФактураВыданный
	|		ПО НДСПредъявленныйОбороты.СчетФактура = СчетФактураВыданный.СчетФактура
	|ГДЕ
	|	&УсловиеЗапроса";
	
	// Задаём условие по заполненным отборам.
	УсловиеЗапроса =
	"	ВЫБОР
	|		КОГДА НДСПредъявленныйОбороты.ОсобыйВариантСчетаФактуры
	|			ТОГДА &УсловиеОсобогоВарианта
	|		КОГДА СчетФактураПолученный.Ссылка ЕСТЬ НЕ NULL
	|			ТОГДА &УсловиеПолученный
	|		КОГДА НЕ НДСПредъявленныйОбороты.ЭтоОтчетКомиссионераОПродажах
	|			И СчетФактураВыданный.Ссылка ЕСТЬ НЕ NULL
	|			ТОГДА &УсловиеВыданный
	|		ИНАЧЕ &УсловиеИначе
	|	КОНЕЦ";
	УсловиеОсобогоВарианта = "ИСТИНА";
	УсловиеПолученный      = "ИСТИНА";
	УсловиеВыданный        = "ИСТИНА";
	УсловиеИначе           = "ИСТИНА";
	// Дополняем условие запроса отбором по признаку наличия/отсутствия счета-фактуры
	Если НаличиеСчетаФактуры <> Неопределено Тогда
		УсловиеОсобогоВарианта = УсловиеОсобогоВарианта + " И " + ?(НаличиеСчетаФактуры, "ИСТИНА", "ЛОЖЬ");
		УсловиеПолученный      = УсловиеПолученный + " И " + ?(НаличиеСчетаФактуры, "ИСТИНА", "ЛОЖЬ");
		УсловиеВыданный        = УсловиеВыданный + " И " + ?(НаличиеСчетаФактуры, "ИСТИНА", "ЛОЖЬ");
		УсловиеИначе           = УсловиеИначе + " И " + ?(НаличиеСчетаФактуры, "ЛОЖЬ", "ИСТИНА");
	КонецЕсли;
	// Дополняем условие запроса отбором по признаку проведения счета-фактуры
	Если СчетФактураПроведен <> Неопределено Тогда
		УсловиеОсобогоВарианта = УсловиеОсобогоВарианта + " И " + ?(СчетФактураПроведен, "ИСТИНА", "ЛОЖЬ");
		УсловиеПолученный      = УсловиеПолученный + " И " + ?(СчетФактураПроведен, "", "НЕ ") + "СчетФактураПолученный.СчетФактураПроведен";
		УсловиеВыданный        = УсловиеВыданный + " И " + ?(СчетФактураПроведен, "", "НЕ ") + "СчетФактураВыданный.СчетФактураПроведен";
		УсловиеИначе           = УсловиеИначе + " И ЛОЖЬ";
	КонецЕсли;
	// Дополняем условие запроса отбором по дате СФ	
	Если ЗначениеЗаполнено(ДатаСФНеБолее) Тогда
		УсловиеОсобогоВарианта = УсловиеОсобогоВарианта + " И НДСПредъявленныйОбороты.ДатаРегистратора <= &КонПериода";
		УсловиеПолученный      = УсловиеПолученный + " И ВЫБОР 
			|					КОГДА НДСПредъявленныйОбороты.ДатаРегистратора >= &НачалоНалоговогоПериода 
			|						ТОГДА СчетФактураПолученный.СчетФактураДата <= &ДатаСФНеБолее
			|					ИНАЧЕ СчетФактураПолученный.СчетФактураДата <= &КонПериода
			|				КОНЕЦ";
		УсловиеВыданный        = УсловиеВыданный + " И СчетФактураВыданный.СчетФактураДата <= &КонПериода";
		УсловиеИначе           = УсловиеИначе + " И &НачПериода <= &КонПериода";
	КонецЕсли;
	УсловиеЗапроса = СтрЗаменить(УсловиеЗапроса, "&УсловиеОсобогоВарианта", СтрЗаменить(УсловиеОсобогоВарианта, "ИСТИНА И", ""));
	УсловиеЗапроса = СтрЗаменить(УсловиеЗапроса, "&УсловиеПолученный", СтрЗаменить(УсловиеПолученный, "ИСТИНА И", ""));
	УсловиеЗапроса = СтрЗаменить(УсловиеЗапроса, "&УсловиеВыданный", СтрЗаменить(УсловиеВыданный, "ИСТИНА И", ""));
	УсловиеЗапроса = СтрЗаменить(УсловиеЗапроса, "&УсловиеИначе", СтрЗаменить(УсловиеИначе, "ИСТИНА И", ""));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеЗапроса", УсловиеЗапроса); 
	
	Запрос.Текст = ТекстЗапроса
		+ "
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	Документ";
		
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаДокументов;
	
КонецФункции

// Формирует массив строк из таблицы ОстаткиПоРегистру, которые удовлетворяют отбору. Анализируются строки от указаной
// до первой неудовлетворяющей отбору.
//
// Параметры:
//  ОстаткиПоРегистру - ТаблицаЗначений - источник анализируемых строк.
//  ИндексСтрокиОстаткаПоРегистру - Число - индекс первой из анализируемых строк.
//  СтруктураОтбора - Структура - см. СтруктураОтбораСтрок() . Если СчетФактура = Неопределено, то без отбора по нему.
//  ИмяРеквизитаКонтрагента - Строка - в книге покупок это "Покупатель", в книге продаж - "Поставщик".
//  СравнениеПоИдентификатору - СравнениеЗначений - для сравнения по идентификаторам, а не наименованиям.
//
// Возвращаемое значение:
//   Массив      - список строк, удовлетворяющих отбору.
//
Функция НайтиСтрокиПоОтбору(ОстаткиПоРегистру, ИндексСтрокиОстаткаПоРегистру, СтруктураОтбора, ИмяРеквизитаКонтрагента, СравнениеПоИдентификатору) Экспорт

	ПодходящиеСтроки = Новый Массив;
	
	КоличествоСтрокОстаткаПоРегистру = ОстаткиПоРегистру.Количество();
	Пока ИндексСтрокиОстаткаПоРегистру < КоличествоСтрокОстаткаПоРегистру Цикл
		
		СтрокаОстаткаПоРегистру = ОстаткиПоРегистру[ИндексСтрокиОстаткаПоРегистру];
		
		РезультатСравнения = СравнениеПоИдентификатору.Сравнить(СтрокаОстаткаПоРегистру[ИмяРеквизитаКонтрагента], СтруктураОтбора[ИмяРеквизитаКонтрагента]);
		Если РезультатСравнения < 0 Тогда
			ИндексСтрокиОстаткаПоРегистру = ИндексСтрокиОстаткаПоРегистру + 1;
			Продолжить; // в остатках по регистру есть контрагент, которого нет в источнике отбора
		ИначеЕсли РезультатСравнения > 0 Тогда
			Прервать; // строки соответствуют другому отбору
		КонецЕсли;
		
		Если СтруктураОтбора.СчетФактура <> Неопределено Тогда
		
			РезультатСравнения = СравнениеПоИдентификатору.Сравнить(СтрокаОстаткаПоРегистру.СчетФактура, СтруктураОтбора.СчетФактура);
			Если РезультатСравнения < 0 Тогда
				ИндексСтрокиОстаткаПоРегистру = ИндексСтрокиОстаткаПоРегистру + 1;
				Продолжить; // в остатках по регистру есть счет-фактура, которой нет в источнике отбора
			ИначеЕсли РезультатСравнения > 0 Тогда
				Прервать; // строки соответствуют другому отбору
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураОтбора.ДоговорКонтрагента) Тогда 
			РезультатСравнения = СравнениеПоИдентификатору.Сравнить(СтрокаОстаткаПоРегистру.ДоговорКонтрагента, СтруктураОтбора.ДоговорКонтрагента);
			Если РезультатСравнения < 0 Тогда
				ИндексСтрокиОстаткаПоРегистру = ИндексСтрокиОстаткаПоРегистру + 1;
				Продолжить; // в остатках по регистру есть договор, которого нет в источнике отбора
			ИначеЕсли РезультатСравнения > 0 Тогда
				Прервать; // строки соответствуют другому отбору
			КонецЕсли;
		КонецЕсли;
		
		ПодходящиеСтроки.Добавить(СтрокаОстаткаПоРегистру);
		ИндексСтрокиОстаткаПоРегистру = ИндексСтрокиОстаткаПоРегистру + 1;
	
	КонецЦикла;
	
	Возврат ПодходящиеСтроки;

КонецФункции

// Выполняет общие для всех документов действия связанные с пометкой на удаление
// счета-фактуры при удалении документа, являющегося основание данного счета-фактуры.
//
// Параметры:
//  ДокументОбъект  - объект документа,
//  ВидСчетаФактуры - строка, вид счета-фактуры, по умолчанию "СчетФактураВыданный"
//
Процедура СинхронизацияПометкиНаУдалениеУСчетаФактуры(ДокументОбъект, ВидСчетаФактуры = "СчетФактураВыданный", Отказ = Ложь) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидСчетаФактуры = "СчетФактураВыданный" И Не ПравоДоступа("Изменение", Метаданные.Документы.СчетФактураВыданный) Тогда
		Возврат;
	ИначеЕсли ВидСчетаФактуры = "СчетФактураПолученный"
		И Не ПравоДоступа("Изменение", Метаданные.Документы.СчетФактураПолученный) Тогда
		Возврат;
	КонецЕсли;
	
	ПометкаУдаленияСсылки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Ссылка, "ПометкаУдаления");

	Если ДокументОбъект.ПометкаУдаления <> ПометкаУдаленияСсылки Тогда

		// Произошло изменение пометки на удаление
		// Попытаемся найти счет-фактуру
		Если ВидСчетаФактуры = "СчетФактураВыданный" Тогда
			СчетФактура = НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(ДокументОбъект.Ссылка, , НЕ ДокументОбъект.ПометкаУдаления);
		Иначе
			СчетФактура = НайтиПодчиненныйСчетФактуруПолученный(ДокументОбъект.Ссылка, , НЕ ДокументОбъект.ПометкаУдаления);
		КонецЕсли;
			
		Если ЗначениеЗаполнено(СчетФактура) 
			И СчетФактура <> ДокументОбъект.Ссылка Тогда
			Попытка
				// Есть счет-фактура, нужно установить для него пометку удаления
				СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
				Если ДокументОбъект.ПометкаУдаления Тогда
					// Если в счете-фактуре несколько оснований, счет-фактура не помечается на удаление,
					// а очищается ссылка на текущее основание
					СтрокиТекОснования = СчетФактураОбъект.ДокументыОснования.НайтиСтроки(
						Новый Структура("ДокументОснование", ДокументОбъект.Ссылка));
					Если СчетФактураОбъект.ДокументыОснования.Количество() > СтрокиТекОснования.Количество() Тогда
						Для каждого СтрокаКУдалению Из СтрокиТекОснования Цикл
							СчетФактураОбъект.ДокументыОснования.Удалить(СтрокаКУдалению);
						КонецЦикла;
						СчетФактураОбъект.Записать(?(СчетФактураОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
						Возврат;
					КонецЕсли;
				КонецЕсли;

				СчетФактураОбъект.УстановитьПометкуУдаления(ДокументОбъект.ПометкаУдаления);
			Исключение
				Отказ = Истина;
				
				ТекстОшибки = НСтр("ru = 'Не удалось записать документ.
                                    |%1'");
				ОписаниеОшибки = СтрШаблон(ТекстОшибки, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗаписьЖурналаРегистрации(
					НСТр("ru = 'Обновление реквизитов счетов-фактур'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
					УровеньЖурналаРегистрации.Ошибка,
					СчетФактураОбъект.Метаданные(),
					СчетФактураОбъект.Ссылка, 
					ОписаниеОшибки);
			КонецПопытки;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры 

// Выполняет общие для всех документов действия связанные с пометкой на удаление
// счета-фактуры при удалении документа, являющегося основание данного счета-фактуры.
//
// Параметры:
//  ДокументОбъект  - объект документа,
//  ВидСчетаФактуры - строка, вид счета-фактуры, по умолчанию "СчетФактураВыданный"
//
Процедура УстановкаПометкиНаУдалениеУСчетаФактуры(ДокументОбъект, ВидСчетаФактуры = "СчетФактураВыданный", ПометкаНаУдаление = Истина) Экспорт

	// Произошло изменение пометки на удаление.
	// Попытаемся найти счет-фактуру.
	
	Если ВидСчетаФактуры = "СчетФактураВыданный" И Не ПравоДоступа("Изменение", Метаданные.Документы.СчетФактураВыданный) Тогда
		Возврат;
	ИначеЕсли ВидСчетаФактуры = "СчетФактураПолученный"
		И Не ПравоДоступа("Изменение", Метаданные.Документы.СчетФактураПолученный) Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидСчетаФактуры = "СчетФактураВыданный" Тогда
		СчетФактура = НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(ДокументОбъект.Ссылка, , Не ПометкаНаУдаление);
	Иначе
		СчетФактура = НайтиПодчиненныйСчетФактуруПолученный(ДокументОбъект.Ссылка);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетФактура) И Не СчетФактура = ДокументОбъект.Ссылка Тогда
		
		ПометкаУдаленияСчетаФактуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетФактура, "ПометкаУдаления");
		
		Если ПометкаНаУдаление <> ПометкаУдаленияСчетаФактуры Тогда
			// Есть счет-фактура, нужно установить для него пометку удаления
			СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
			// Если в счете-фактуре несколько оснований, счет-фактура не помечается на удаление,
			// а очищается ссылка на текущее основание
			СтрокиТекОснования = СчетФактураОбъект.ДокументыОснования.НайтиСтроки(
				Новый Структура("ДокументОснование", ДокументОбъект.Ссылка));
				
			Если ПометкаНаУдаление И СчетФактураОбъект.ДокументыОснования.Количество() > СтрокиТекОснования.Количество() Тогда
				Для каждого СтрокаКУдалению Из СтрокиТекОснования Цикл
					СчетФактураОбъект.ДокументыОснования.Удалить(СтрокаКУдалению);
				КонецЦикла;
				СчетФактураОбъект.Записать(?(СчетФактураОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
				
			Иначе
				СчетФактураОбъект.УстановитьПометкуУдаления(ПометкаНаУдаление);
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Выполняет общие для всех документов действия связанные с пометкой на удаление
// счета-фактуры при удалении документа, являющегося основанием данного счета-фактуры.
//
// Параметры:
//  ДокументОбъект  - объект документа,
//  ВидСчетаФактуры - строка, вид счета-фактуры, по умолчанию "СчетФактураВыданный"
// 
//
Процедура УстановкаПроведенияУСчетаФактуры(ДокументСсылка, ВидСчетаФактуры = "СчетФактураВыданный", Проведение = Ложь, Отказ = Ложь, ГрупповоеПерепроведение = Ложь, СтруктураОтбора = Неопределено) Экспорт
	
	Перем СчетФактураОбъект;
	
	Если ВидСчетаФактуры = "СчетФактураВыданный" И Не ПравоДоступа("Изменение", Метаданные.Документы.СчетФактураВыданный) Тогда
		Возврат;
	ИначеЕсли ВидСчетаФактуры = "СчетФактураПолученный"
		И Не ПравоДоступа("Изменение", Метаданные.Документы.СчетФактураПолученный) Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидСчетаФактуры = "СчетФактураВыданный" Тогда
		СчетФактура = НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(ДокументСсылка);
	Иначе
		СчетФактура = НайтиПодчиненныйСчетФактуруПолученный(ДокументСсылка, ДокументСсылка,,СтруктураОтбора);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СчетФактура)
		Или СчетФактура = ДокументСсылка
		Или СчетФактура.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	// Если нашли, то необходимо синхронизировать признак проведения у документа основания и счета-фактуры.
	
	Если Проведение Тогда
		ТекстСообщенияВСлучаеОшибки = НСтр("ru = 'Не удалось провести документ %1'");
		РежимЗаписиСчетаФактуры = РежимЗаписиДокумента.Проведение;
			
		СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
		СчетФактураОбъект.ДополнительныеСвойства.Вставить("ГрупповоеПерепроведение", ГрупповоеПерепроведение);
		
		// Контроль даты запрета изменения нужен только для самостоятельных счетов-фактур, а не привязанных к документам.
		// Для счетов-фактур, привязанных к документам, контроль будет выполняться по документу.
		Если ГрупповоеПерепроведение Тогда
			СчетФактураОбъект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
		КонецЕсли;
		
		Если ВидСчетаФактуры = "СчетФактураВыданный" Тогда
			// Заполним данные о платежно-расчетном документе
			Если СчетФактураОбъект.ПлатежноРасчетныеДокументы.Количество() = 0 Тогда  
				СчетФактураОбъект.ПлатежноРасчетныеДокументы.Очистить();
				ДатыНомераПРД = Документы.СчетФактураВыданный.ДатыНомераПлатежноРасчетныхДокументов(
					СчетФактураОбъект.ДокументыОснования.ВыгрузитьКолонку("ДокументОснование"));
				Для каждого СтрокаТаблицы Из ДатыНомераПРД Цикл
					НоваяСтрока = СчетФактураОбъект.ПлатежноРасчетныеДокументы.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли НЕ Проведение И СчетФактура.Проведен Тогда
		// Есть счет-фактура проведен, нужно отменить проведение
		ТекстСообщенияВСлучаеОшибки = НСтр("ru = 'Не удалось отменить проведение документа %1'");
		РежимЗаписиСчетаФактуры = РежимЗаписиДокумента.ОтменаПроведения;
			
		СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
		
	КонецЕсли;
	
	Если СчетФактураОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		СчетФактураОбъект.Записать(РежимЗаписиСчетаФактуры);
		
	Исключение
		
		ТекстСообщенияПользователю = СтрШаблон(ТекстСообщенияВСлучаеОшибки, СчетФактураОбъект.Ссылка);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияПользователю);
		
		ТекстСообщения = СтрШаблон(ТекстСообщенияВСлучаеОшибки, Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Установка проведения у счета-фактуры'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,
			СчетФактураОбъект.Метаданные(),
			СчетФактураОбъект.Ссылка, 
			ТекстСообщения);
		
		Отказ = Истина;
		
	КонецПопытки;

КонецПроцедуры // УстановкаПроведенияУСчетаФактуры()

// Процедура помечает на удаление подчиненный счет-фактуру. 
//
Процедура ПометитьНаУдалениеСчетФактуру(СчетФактура) Экспорт

	Если ТипЗнч(СчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный")
		 ИЛИ ТипЗнч(СчетФактура) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		
		СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
		СчетФактураОбъект.ДокументОснование = Неопределено;
		СчетФактураОбъект.ПометкаУдаления = Истина;
		СчетФактураОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет ставку НДС документа
//
// Параметры: 
//  ДокументОбъект    - объект документа, для которого надо определить ставку НДС
//
Функция ОпределитьСтавкуБезНДС(ДокументОбъект) Экспорт

	СтавкаБезНДС = Истина;
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
		
	Для каждого ТЧОбъекта Из ДокументОбъект.Метаданные().ТабличныеЧасти Цикл
		Если ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ТЧОбъекта.Имя) Тогда
			Для Каждого СтрокаДокумента ИЗ ДокументОбъект[ТЧОбъекта.Имя] Цикл
				Если СтрокаДокумента.СтавкаНДС <> Перечисления.СтавкиНДС.БезНДС Тогда
					СтавкаБезНДС = Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СтавкаНДС", МетаданныеДокумента) Тогда
		Если ДокументОбъект.СтавкаНДС <> Перечисления.СтавкиНДС.БезНДС Тогда
			СтавкаБезНДС = Ложь;
		КонецЕсли;
	КонецЕсли;   	

	Возврат СтавкаБезНДС;
	
КонецФункции

// Функция возвращает курс ставку НДС
//
// Параметры:
//  Валюта - СправочникСсылка.Валюты, валюта, по которой необходимо получить курс
//  ДатаКурса - Дата, календарная дата, на которую необходимо получить курс валюты
//
// Возвращаемое значение:
//	Курс переданной валюты на переданную дату, 1 в случае отсутствия значения.
//
Функция ПолучитьСтавкуНДС(СтавкаНДС, ПрименяютсяСтавки4и2 = Ложь) Экспорт

	Если СтавкаНДС = Перечисления.СтавкиНДС.НДС20 ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120 Тогда
		Возврат 20;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10 ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
		Ставка = ?(ПрименяютсяСтавки4и2, 2, 10);
		Возврат Ставка;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18 ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
		Ставка = ?(ПрименяютсяСтавки4и2, 4, 18);
		Возврат Ставка;
	КонецЕсли;

	Возврат 0;

КонецФункции

// ЗАПОЛНЕНИЕ СЧЕТОВ-ФАКТУР

// Возвращает структуру с датой и номером переданного платежно-расчетного документа для подстановки в счет-фактуру
//
Функция ДатаНомерПлатежноРасчетногоДокумента(ДокументОснование) Экспорт
	
	ДатаНомер = Новый Структура("ДатаПлатежноРасчетногоДокумента, НомерПлатежноРасчетногоДокумента", '00010101', "");
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат ДатаНомер;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ", ДокументОснование);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеПервичныхДокументов.Номер КАК НомерПлатежноРасчетногоДокумента,
	|	ДанныеПервичныхДокументов.Дата КАК ДатаПлатежноРасчетногоДокумента
	|ИЗ
	|	РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|ГДЕ
	|	ДанныеПервичныхДокументов.Документ = &Документ
	|	И ДанныеПервичныхДокументов.Номер <> """"
	|	И ДанныеПервичныхДокументов.Дата <> ДАТАВРЕМЯ(1, 1, 1)";
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДатаНомер, РезультатЗапроса);
	КонецЕсли;
	
	Возврат ДатаНомер;
	
КонецФункции

// Процедура проверяет соответствие реквизитов счета-фактуры полученного и документа-основания.
// В случае несоответствия выдается сообщение пользователю.
//
// Параметры:
//		- ДокОбъект - документ-основание
//
// Возврат:
//		- Истина, если различий не найдено, Ложь в противном случае
//
Процедура СинхронизироватьРеквизитыСчетаФактурыПолученного(ДокОбъект) Экспорт
	
	Если Не ПравоДоступа("Изменение", Метаданные.Документы.СчетФактураПолученный) Тогда
		Возврат;
	КонецЕсли;
	
	СчетФактура = НайтиПодчиненныйСчетФактуруПолученный(ДокОбъект.Ссылка);
	Если СчетФактура = Неопределено ИЛИ СчетФактура = ДокОбъект.Ссылка Тогда
		Возврат;
	КонецЕсли;

	СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
	Попытка
		СчетФактураОбъект.Заблокировать();
		СчетФактураОбъект.Записать();
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Реквизиты документа ""%1"" автоматически не перезаполнены и могут быть неактуальными'"),
				СчетФактура);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, СчетФактура);
	КонецПопытки;
	
КонецПроцедуры

Функция ПроверитьСоответствиеРеквизитовСчетаФактурыВыданного(ДокОбъект, Сообщать = Истина, СтруктураОтбора = Неопределено) Экспорт

	СчетФактура = НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(ДокОбъект.Ссылка, , , СтруктураОтбора);
	Если СчетФактура = Неопределено ИЛИ СчетФактура = ДокОбъект.Ссылка Тогда
		Возврат Истина;
	КонецЕсли;
	
	СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
	Попытка
		СчетФактураОбъект.Заблокировать();
		СчетФактураОбъект.Записать();
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Реквизиты документа ""%1"" автоматически не перезаполнены и могут быть неактуальными'"),
				СчетФактура);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, СчетФактура);
	КонецПопытки;
	
	Возврат Истина;

КонецФункции

// КОРРЕКТИРОВОЧНЫЕ И ИСПРАВИТЕЛЬНЫЕ СЧЕТА-ФАКТУРЫ

// Функция находит и возвращает документ, являющийся отправной точкой исправлений (либо ПТУ либо корректировку ПТУ)
// либо первоначальный документ ПТУ при передаче истины в параметр Исходный
Функция ПолучитьИсправляемыйДокументПоступления(ДокументПоступления, Исходный = Ложь) Экспорт
	
	Если ЗначениеЗаполнено(ДокументПоступления)
		И ТипЗнч(ДокументПоступления) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументПоступления,
			"ВидОперации,ДокументПоступления");
			
		Если (РеквизитыДокумента.ВидОперации <> Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение ИЛИ Исходный) 
			И РеквизитыДокумента.ДокументПоступления <> ДокументПоступления Тогда
			Возврат ПолучитьИсправляемыйДокументПоступления(РеквизитыДокумента.ДокументПоступления, Исходный);
		Иначе
			Возврат ДокументПоступления;
		КонецЕсли;
	Иначе
		Возврат ДокументПоступления;
	КонецЕсли;
	
КонецФункции

// Функция находит и возвращает документ, являющийся отправной точкой исправлений (либо РТУ либо корректировку РТУ)
// либо первоначальный документ РТУ при передаче истины в параметр Исходный
Функция ПолучитьИсправляемыйДокументРеализации(ДокументРеализации, Исходный = Ложь) Экспорт
	
	Если ЗначениеЗаполнено(ДокументРеализации) 
		И ТипЗнч(ДокументРеализации) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументРеализации,
			"ВидОперации,ДокументРеализации");
		
		Если (РеквизитыДокумента.ВидОперации <> Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение ИЛИ Исходный) Тогда
			Возврат ПолучитьИсправляемыйДокументРеализации(РеквизитыДокумента.ДокументРеализации, Исходный);
		Иначе
			Возврат ДокументРеализации;
		КонецЕсли;
	Иначе
		Возврат ДокументРеализации;
	КонецЕсли;
	
КонецФункции

// Функция возвращает массив пустых ссылок на документы, являющиеся типами для ИсправленногоСчетаФактуры
//
Функция ПолучитьМассивПустыхИсправленныхСчетовФактур() Экспорт

	МассивДокументовИсправлений = Новый Массив;
	
	МассивТипов = Метаданные.РегистрыНакопления.НДСЗаписиКнигиПокупок.Измерения.ИсправленныйСчетФактура.Тип.Типы();
	Для Каждого ТипДокумента Из МассивТипов Цикл
		МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипДокумента);
		Если МетаданныеДокумента <> Неопределено Тогда
			ИмяДокумента = МетаданныеДокумента.Имя;
			МассивДокументовИсправлений.Добавить(Документы[ИмяДокумента].ПустаяСсылка());
		КонецЕсли;
	КонецЦикла;
	
	МассивДокументовИсправлений.Добавить(Неопределено);

	Возврат МассивДокументовИсправлений;

КонецФункции // ПолучитьМассивПустыхИсправленныхСчетовФактур()

//////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ ДАННЫХ ПО ДОКУМЕНТАМ

// Параметр ДляКнигиПродаж устанавливается в случае, когда для документа могут быть получены данные как
// для книги покупок, так и для книги продаж
Функция ПолучитьТаблицуДокументаНДС(ДокументСсылка, Ошибка = Ложь, ДляКнигиПродаж = Ложь) Экспорт

	Возврат УчетНДСБП.ПолучитьТаблицуДокументаНДС(ДокументСсылка, Ошибка, ДляКнигиПродаж);

КонецФункции

// Рассчитываем сумму документа со всеми налогами
//
// Параметры:
//  ДокументОбъект    - объект документа, сумму которого надо рассчитать
//  ИмяТабличнойЧасти - строка, имя табличной части, сумму которой надо рассчитать.
//                      Если она не заполнена, считаем по всем табличным частям, в которых есть "Сумма"
//  НеУчитыватьТару   - булево, если Истина и ИмяТабличнойЧасти неопределено, то в расчете сумм тару не учитываем
//	Отбор			  - Структура - Задает отбор строк табличной части
//						* Ключ - имя реквизита табличной части, по которому отбирать
//						* Значение - Значение отбора
//
// Возвращаемое значение:
//  Сумма документа со всеми налогами.
//
Функция ПолучитьСуммуДокументаСНДС(ДокументОбъект, ИмяТабличнойЧасти = Неопределено, НеУчитыватьТару = Истина, Отбор = Неопределено) Экспорт

	МетаданныеДокумента = ДокументОбъект.Ссылка.Метаданные();

	ЕстьСуммаВключаетНДС = ОбщегоНазначения.ЕстьРеквизитОбъекта("СуммаВключаетНДС", МетаданныеДокумента);

	СуммаДокумента = 0;
	Если ИмяТабличнойЧасти <> Неопределено Тогда
	
		ЕстьСуммаНДС = ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("СуммаНДС", МетаданныеДокумента, ИмяТабличнойЧасти);
		Если Отбор <> Неопределено Тогда
			ИменаРеквизитов = "Сумма"
				+ ?(ЕстьСуммаНДС, ", СуммаНДС", "");
				
			ДанныеТабличнойЧасти = ДокументОбъект[ИмяТабличнойЧасти].Выгрузить(Отбор, ИменаРеквизитов);
		Иначе
			ДанныеТабличнойЧасти = ДокументОбъект[ИмяТабличнойЧасти];
		КонецЕсли;
	
		СуммаДокумента = СуммаДокумента + ДанныеТабличнойЧасти.Итог("Сумма");
		Если ЕстьСуммаВключаетНДС
			И ЕстьСуммаНДС
			И НЕ ДокументОбъект.СуммаВключаетНДС Тогда
			СуммаДокумента = СуммаДокумента + ДанныеТабличнойЧасти.Итог("СуммаНДС");
		КонецЕсли;

	Иначе
		Для каждого ТЧОбъекта Из МетаданныеДокумента.ТабличныеЧасти Цикл
			Если НеУчитыватьТару и ТЧОбъекта.Имя = "ВозвратнаяТара" Тогда
				Продолжить;
			КонецЕсли;
			Если ТЧОбъекта.Имя = "ВыданныеАвансы" Тогда
				Продолжить;
			КонецЕсли;
			Если ТЧОбъекта.Имя = "ДенежныеСредства" Тогда
				Продолжить;
			КонецЕсли;
			
			ЕстьСумма       = ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("Сумма", МетаданныеДокумента, ТЧОбъекта.Имя);
			ЕстьСуммаНДС    = ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("СуммаНДС", МетаданныеДокумента, ТЧОбъекта.Имя);
			ЕстьСуммаСкидки = ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("СуммаСкидки", МетаданныеДокумента, ТЧОбъекта.Имя);
			
			Если НЕ (ЕстьСумма ИЛИ ЕстьСуммаНДС ИЛИ ЕстьСуммаСкидки) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Отбор <> Неопределено Тогда
				ИменаРеквизитов =
					?(ЕстьСумма, ", Сумма", "")
					+ ?(ЕстьСуммаНДС, ", СуммаНДС", "")
					+ ?(ЕстьСуммаСкидки, ", СуммаСкидки", "");
				ИменаРеквизитов = Сред(ИменаРеквизитов, 3); // Удалим первую запятую.
			
				ДанныеТабличнойЧасти = ДокументОбъект[ИмяТабличнойЧасти].Выгрузить(Отбор, ИменаРеквизитов);
			Иначе
				ДанныеТабличнойЧасти = ДокументОбъект[ТЧОбъекта.Имя];
			КонецЕсли;
			
			Если ЕстьСумма Тогда
				СуммаДокумента = СуммаДокумента + ДанныеТабличнойЧасти.Итог("Сумма");
				Если ЕстьСуммаВключаетНДС
					И ЕстьСуммаНДС
					И НЕ ДокументОбъект.СуммаВключаетНДС Тогда
					СуммаДокумента = СуммаДокумента + ДанныеТабличнойЧасти.Итог("СуммаНДС");
				КонецЕсли;
			КонецЕсли;
			Если ЕстьСуммаСкидки Тогда
				СуммаДокумента = СуммаДокумента - ДанныеТабличнойЧасти.Итог("СуммаСкидки");
			КонецЕсли;
		КонецЦикла;
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Сумма", МетаданныеДокумента) Тогда
			СуммаДокумента = СуммаДокумента + ДокументОбъект.Сумма;
			Если ЕстьСуммаВключаетНДС
				И ОбщегоНазначения.ЕстьРеквизитОбъекта("СуммаНДС", МетаданныеДокумента)
				И НЕ ДокументОбъект.СуммаВключаетНДС Тогда
				СуммаДокумента = СуммаДокумента + ДокументОбъект.СуммаНДС;
			КонецЕсли;
		КонецЕсли;
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СуммаСкидки", МетаданныеДокумента) Тогда
			СуммаДокумента = СуммаДокумента - ДокументОбъект.СуммаСкидки;
		КонецЕсли;
	КонецЕсли;

	Возврат СуммаДокумента;

КонецФункции

// Рассчитываем сумму документа со всеми налогами в разрезе ставок НДС
//
// Параметры:
//  ДокументОбъект    - ссылка документа, сумму которого надо рассчитать
//  ИмяТабличнойЧасти - строка, имя табличной части, сумму которой надо рассчитать.
//                      Если она не заполнена, считаем по всем табличным частям, в которых есть "Сумма"
//  НеУчитыватьТару   - булево, если Истина и ИмяТабличнойЧасти неопределено, то в расчете сумм тару не учитываем
//
// Возвращаемое значение:
//  ТаблицаЗначений
//		Колонки:
//			Сумма		- Сумма документа со всеми налогами
//			СтавкаНДС	- ПеречислениеСсылка.СтавкиНДС
//			СуммаНДС	- Сумма НДС по ставке
//
Функция ПолучитьСуммуДокументаСНДСВРазрезеСтавокНДС(ДокументОбъект, ИмяТабличнойЧасти = Неопределено, НеУчитыватьТару = Истина) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();
	СуммаДокументаПоСтавкам = Новый ТаблицаЗначений();
	СуммаДокументаПоСтавкам.Колонки.Добавить("Сумма",     ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	СуммаДокументаПоСтавкам.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	СуммаДокументаПоСтавкам.Колонки.Добавить("СуммаНДС",  ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	СуммаДокументаПоСтавкам.Индексы.Добавить("СтавкаНДС");
	
	СуммаСкидкиПоДокументу = 0;
	
	Если НЕ (ИмяТабличнойЧасти = Неопределено) Тогда

		Для каждого СтрокаДокумента Из ДокументОбъект[ИмяТабличнойЧасти] Цикл

			Если ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("Сумма", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
				СуммаДокумента = СтрокаДокумента.Сумма;
			Иначе
				СуммаДокумента = 0;
			КонецЕсли;

			СуммаНДС  = 0;
			СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();

			Если ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("СуммаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) тогда
				СуммаНДС = СтрокаДокумента.СуммаНДС;
			КонецЕсли;

			Если ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) тогда
				СтавкаНДС = СтрокаДокумента.СтавкаНДС;
			КонецЕсли;

			Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СуммаВключаетНДС", МетаданныеДокумента)
			   И Не ДокументОбъект.СуммаВключаетНДС Тогда

				СуммаДокумента = СуммаДокумента + СуммаНДС;

			КонецЕслИ;
			
			Если ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("СуммаСкидки", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
				СуммаДокумента = СуммаДокумента - СтрокаДокумента.СуммаСкидки;
			КонецЕсли;

			СтрокаТаблицыИтогов = СуммаДокументаПоСтавкам.Найти(СтавкаНДС,"СтавкаНДС");

			Если СтрокаТаблицыИтогов = Неопределено тогда
				СтрокаТаблицыИтогов = СуммаДокументаПоСтавкам.Добавить();
				СтрокаТаблицыИтогов.СтавкаНДС = СтавкаНДС;
			КонецЕсли;

			СтрокаТаблицыИтогов.Сумма    = СтрокаТаблицыИтогов.Сумма    + СуммаДокумента;
			СтрокаТаблицыИтогов.СуммаНДС = СтрокаТаблицыИтогов.СуммаНДС + СуммаНДС;

		КонецЦикла;
		
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СуммаСкидки", МетаданныеДокумента) И ОбщегоНазначения.ЕстьРеквизитОбъекта("СуммаДокумента", МетаданныеДокумента) Тогда
			
			СуммаСкидкиПоДокументу = ?(ДокументОбъект.СуммаДокумента = 0, 0, ДокументОбъект.СуммаСкидки*СуммаДокументаПоСтавкам.Итог("Сумма")/(ДокументОбъект.СуммаДокумента + ДокументОбъект.СуммаСкидки));
			
		КонецЕсли;

	Иначе

		Для каждого ТЧОбъекта Из ДокументОбъект.Метаданные().ТабличныеЧасти Цикл

			Если НеУчитыватьТару и ТЧОбъекта.Имя = "ВозвратнаяТара" Тогда
				Продолжить;
			ИначеЕсли (МетаданныеДокумента.Имя = "ОтчетКомиссионераОПродажах" или МетаданныеДокумента.Имя = "ОтчетКомитентуОПродажах") и ТЧОбъекта.Имя = "ДенежныеСредства" Тогда
				Продолжить;
			ИначеЕсли МетаданныеДокумента.Имя = "ОтчетОРозничныхПродажах" И ТЧОбъекта.Имя = "ПодарочныеСертификаты" Тогда
				// НДС по проданным подарочным сертификатам определяется расчетным методом
				ДобавитьСуммуСНДСПоПодарочнымСертификатам(ДокументОбъект, СуммаДокументаПоСтавкам);
				Продолжить;
			КонецЕсли;

			ИмяТабличнойЧасти = ТЧОбъекта.Имя;

			Для каждого СтрокаДокумента  Из ДокументОбъект[ИмяТабличнойЧасти] Цикл

				Если ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("Сумма", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
					СуммаДокумента = СтрокаДокумента.Сумма;
				Иначе
					СуммаДокумента = 0;
				КонецЕсли;

				СуммаНДС  = 0;
				СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();

				Если ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("СуммаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) тогда
					СуммаНДС = СтрокаДокумента.СуммаНДС;
				КонецЕсли;

				Если ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) тогда
					СтавкаНДС = СтрокаДокумента.СтавкаНДС;
				КонецЕсли;

				Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СуммаВключаетНДС", МетаданныеДокумента)
				   И НЕ ДокументОбъект.СуммаВключаетНДС Тогда
					СуммаДокумента = СуммаДокумента+СуммаНДС;
				КонецЕсли;
				
				Если ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("СуммаСкидки", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
					СуммаДокумента = СуммаДокумента - СтрокаДокумента.СуммаСкидки;
				КонецЕсли;
				
				СтрокаТаблицыИтогов = СуммаДокументаПоСтавкам.Найти(СтавкаНДС,"СтавкаНДС");

				Если СтрокаТаблицыИтогов = Неопределено тогда
					СтрокаТаблицыИтогов = СуммаДокументаПоСтавкам.Добавить();
					СтрокаТаблицыИтогов.СтавкаНДС = СтавкаНДС;
				КонецЕсли;

				СтрокаТаблицыИтогов.Сумма    = СтрокаТаблицыИтогов.Сумма    + СуммаДокумента;
				СтрокаТаблицыИтогов.СуммаНДС = СтрокаТаблицыИтогов.СуммаНДС + СуммаНДС;

			КонецЦикла;

		КонецЦикла;
		
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СуммаСкидки", МетаданныеДокумента) Тогда
			
			СуммаСкидкиПоДокументу =  ДокументОбъект.СуммаСкидки;
			
		КонецЕсли;
		

	КонецЕсли;
	
	// Обрабатываем скидки по документу
	Если СуммаСкидкиПоДокументу <> 0 Тогда
	
		СуммаСоСкидкой = СуммаДокументаПоСтавкам.Итог("Сумма") - СуммаСкидкиПоДокументу;
		СуммаНДССоСкидкой = СуммаДокументаПоСтавкам.Итог("СуммаНДС") * СуммаСоСкидкой / СуммаДокументаПоСтавкам.Итог("Сумма");
		
		ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(СуммаСоСкидкой, СуммаДокументаПоСтавкам, "Сумма");
		ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(СуммаНДССоСкидкой, СуммаДокументаПоСтавкам, "СуммаНДС");
	
	КонецЕсли; 
	

	СтрокиКУдалению = Новый Массив;

	Для каждого СтрокаТаблицы Из СуммаДокументаПоСтавкам Цикл
	    Если СтрокаТаблицы.Сумма = 0 и СтрокаТаблицы.СуммаНДС = 0  Тогда
			СтрокиКУдалению.Добавить( СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;

	Для НомерСтроки = 1 По СтрокиКУдалению.Количество() Цикл
		СуммаДокументаПоСтавкам.Удалить(СтрокиКУдалению[НомерСтроки-1]);
	КонецЦикла;

	Возврат СуммаДокументаПоСтавкам;

КонецФункции // ПолучитьСуммуДокументаСНДС()

// Рассчитываем сумму НДС документа
//
// Параметры:
//  ДокументОбъект    - объект документа, сумму которого надо рассчитать
//  ИмяТабличнойЧасти - строка, имя табличной части, сумму которой надо рассчитать.
//                      Если она не заполнена, считаем по всем табличным частям, в которых есть "Сумма"
//
// Возвращаемое значение:
//  НДС документа
//
Функция ПолучитьНДСДокумента(ДокументОбъект, ИмяТабличнойЧасти = Неопределено) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	СуммаНДС = 0;

	Если ИмяТабличнойЧасти <> Неопределено Тогда
		СуммаНДС = СуммаНДС + ДокументОбъект[ИмяТабличнойЧасти].Итог("СуммаНДС");
	Иначе
		Для каждого ТЧОбъекта Из ДокументОбъект.Метаданные().ТабличныеЧасти Цикл
			Если ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("СуммаНДС", МетаданныеДокумента, ТЧОбъекта.Имя) Тогда
				СуммаНДС = СуммаНДС + ДокументОбъект[ТЧОбъекта.Имя].Итог("СуммаНДС");
			КонецЕсли;
		КонецЦикла;
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СуммаНДС", МетаданныеДокумента) Тогда
			СуммаНДС = СуммаНДС + ДокументОбъект.СуммаНДС;
		КонецЕсли;
	КонецЕсли;

	Возврат СуммаНДС;

КонецФункции // ПолучитьСуммуДокументаСНДС()

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	ПРОЦЕДУРЫ, ВЫПОЛНЯЮЩИЕ ДВИЖЕНИЯ ПО РЕГИСТРАМ

// РЕАЛИЗАЦИЯ ТОВАРОВ И УСЛУГ

Процедура СформироватьДвиженияОтгрузкаТоваров(ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	УчетНДСБП.СформироватьДвиженияОтгрузкаТоваров(ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты, Движения, Отказ);

КонецПроцедуры

Процедура СформироватьДвиженияВыбытиеТоваров(СписанныеПартииНДС, СписанныеТоварыБухУчет, Реквизиты, Движения, Отказ) Экспорт

	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Реквизиты.Организация, Реквизиты.Период);
	
	Если РаздельныйУчетНДСНаСчете19 Тогда
		
		УчетНДСРаздельный.СформироватьДвиженияВыбытиеТоваров(СписанныеПартииНДС, СписанныеТоварыБухУчет, Реквизиты, Движения, Отказ);
		
	Иначе
	
		УчетНДСБП.СформироватьДвиженияВыбытиеТоваров(СписанныеПартииНДС, СписанныеТоварыБухУчет, Реквизиты, Движения, Отказ);
		
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьДвиженияРеализацияБезНДС(СписанныеПартииНДС, РеализованныеТоварыУслуги, Реквизиты, Движения, Отказ) Экспорт
	
	РаздельныйУчетНДСНаСчете19      = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Реквизиты.Организация, Реквизиты.Период);
	ЗаполняетсяРаздел7ДекларацииНДС = ЗаполняетсяРаздел7ДекларацииНДС(Реквизиты.Период);
	
	Если Не РаздельныйУчетНДСНаСчете19
		ИЛИ Не ЗаполняетсяРаздел7ДекларацииНДС Тогда 
		Возврат;
	КонецЕсли;
	
	УчетНДСРаздельный.СформироватьДвиженияРеализацияБезНДС(СписанныеПартииНДС, РеализованныеТоварыУслуги, Реквизиты, Движения, Отказ);
	
КонецПроцедуры

// ПЕРЕМЕЩЕНИЕ ТОВАРОВ

Процедура СформироватьДвиженияСписаниеТоваровПрочее(ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	УчетНДСБП.СформироватьДвиженияСписаниеТоваровПрочее(ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет, ТаблицаРеквизиты, Движения, Отказ);

КонецПроцедуры

Функция ПолучитьТаблицуСписанныеПартииНДС(Товары, СписанныеТоварыБухУчет, Реквизиты, Отказ) Экспорт

	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Реквизиты.Организация, Реквизиты.Период);
	
	Если РаздельныйУчетНДСНаСчете19 Тогда
		
		Возврат УчетНДСРаздельный.ПолучитьТаблицуСписанныеПартииНДС(Товары, СписанныеТоварыБухУчет, Реквизиты, Отказ);

	Иначе
	
		Возврат УчетНДСБП.ПолучитьТаблицуСписанныеПартииНДС(Товары, СписанныеТоварыБухУчет, Реквизиты, Отказ);

	КонецЕсли;

КонецФункции 

// НАЛОГОВЫЙ АГЕНТ КУРСОВЫЕ РАЗНИЦЫ

// Функция вызывается Из процедуры УчетНДС.КорректировкаРегистровНДСПоСуммовымРазницам.
// Цель работы процедуры - сформировать дерево остатков по регистрам НДС (приобретение), содержащее
// суммы зарегистрированных событий, для последующей их корректировки
//
Функция ПолучитьДанныеПоКорректируемымСчетамФактурам(ТаблицаРеквизиты, ТаблицаСуммовыхРазниц) Экспорт

	Реквизиты = ТаблицаРеквизиты[0];

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",           Реквизиты.Организация);
	Запрос.УстановитьПараметр("ТаблицаСуммовыхРазниц", ТаблицаСуммовыхРазниц);
	Запрос.УстановитьПараметр("КонецПериода",          Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор));
	Запрос.УстановитьПараметр("Предположение0",        Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаСуммовыхРазниц.ДокументРасчетов КАК СчетФактура
	|ПОМЕСТИТЬ СписокСчетовФактур
	|ИЗ
	|	&ТаблицаСуммовыхРазниц КАК ТаблицаСуммовыхРазниц
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТаблицаСуммовыхРазниц.ДокументРасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСРеализация0Обороты.СчетФактура КАК СчетФактура,
	|	НДСРеализация0Обороты.ВидЦенности КАК ВидЦенности,
	|	НДСРеализация0Обороты.Покупатель КАК Покупатель,
	|	НДСРеализация0Обороты.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ВЫБОР
	|			КОГДА НДСРеализация0Обороты.Состояние = &Предположение0
	|				ТОГДА ЕСТЬNULL(НДСРеализация0Обороты.СуммаБезНДСОборот, 0)
	|			ИНАЧЕ ЕСТЬNULL(НДСРеализация0Обороты.СуммаБезНДСПриход, 0)
	|		КОНЕЦ) КАК Реализация0_БезНДС,
	|	СУММА(ВЫБОР
	|			КОГДА НДСРеализация0Обороты.Состояние = &Предположение0
	|				ТОГДА ЕСТЬNULL(НДСРеализация0Обороты.НДСОборот, 0)
	|			ИНАЧЕ ЕСТЬNULL(НДСРеализация0Обороты.НДСПриход, 0)
	|		КОНЕЦ) КАК Реализация0_НДС
	|ПОМЕСТИТЬ ВТНДСРеализация0
	|ИЗ
	|	РегистрНакопления.НДСРеализация0.Обороты(
	|			,
	|			&КонецПериода,
	|			Период,
	|			Организация = &Организация
	|				И СчетФактура В
	|					(ВЫБРАТЬ
	|						СписокСчетовФактур.СчетФактура
	|					ИЗ
	|						СписокСчетовФактур)) КАК НДСРеализация0Обороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСРеализация0Обороты.СчетФактура,
	|	НДСРеализация0Обороты.ВидЦенности,
	|	НДСРеализация0Обороты.Покупатель,
	|	НДСРеализация0Обороты.СтавкаНДС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НДСРеализация0Обороты.СчетФактура,
	|	НДСРеализация0Обороты.ВидЦенности,
	|	НДСРеализация0Обороты.Покупатель,
	|	НДСРеализация0Обороты.СтавкаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСНачисленныйОбороты.Организация,
	|	НДСНачисленныйОбороты.СчетФактура КАК СчетФактура,
	|	НДСНачисленныйОбороты.ВидЦенности,
	|	НДСНачисленныйОбороты.СтавкаНДС,
	|	СУММА(ЕСТЬNULL(НДСНачисленныйОбороты.СуммаБезНДСПриход, 0) + ЕСТЬNULL(НДСНачисленныйОбороты.НДСПриход, 0)) КАК Базис_СНДС,
	|	СУММА(ЕСТЬNULL(НДСНачисленныйОбороты.СуммаБезНДСПриход, 0)) КАК Базис_БезНДС,
	|	СУММА(ЕСТЬNULL(НДСНачисленныйОбороты.НДСПриход, 0)) КАК Базис_НДС,
	|	СУММА(НДСРеализация0.Реализация0_БезНДС) КАК Реализация0_БезНДС,
	|	СУММА(НДСРеализация0.Реализация0_НДС) КАК Реализация0_НДС,
	|	НДСНачисленныйОбороты.Покупатель,
	|	НДСНачисленныйОбороты.ВидНачисления,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НДСРеализация0.СчетФактура ЕСТЬ NULL
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК ЕстьРеализация0
	|ИЗ
	|	РегистрНакопления.НДСНачисленный.Обороты(
	|			,
	|			&КонецПериода,
	|			Период,
	|			Организация = &Организация
	|				И СчетФактура В
	|					(ВЫБРАТЬ
	|						СписокСчетовФактур.СчетФактура
	|					ИЗ
	|						СписокСчетовФактур)) КАК НДСНачисленныйОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНДСРеализация0 КАК НДСРеализация0
	|		ПО НДСНачисленныйОбороты.СчетФактура = НДСРеализация0.СчетФактура
	|			И НДСНачисленныйОбороты.ВидЦенности = НДСРеализация0.ВидЦенности
	|			И НДСНачисленныйОбороты.Покупатель = НДСРеализация0.Покупатель
	|			И НДСНачисленныйОбороты.СтавкаНДС = НДСРеализация0.СтавкаНДС
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСНачисленныйОбороты.Организация,
	|	НДСНачисленныйОбороты.СчетФактура,
	|	НДСНачисленныйОбороты.ВидЦенности,
	|	НДСНачисленныйОбороты.СтавкаНДС,
	|	НДСНачисленныйОбороты.Покупатель,
	|	НДСНачисленныйОбороты.ВидНачисления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НДСПредъявленныйОбороты.Организация,
	|	НДСПредъявленныйОбороты.СчетФактура,
	|	НДСПредъявленныйОбороты.ВидЦенности,
	|	НДСПредъявленныйОбороты.СтавкаНДС,
	|	СУММА(ЕСТЬNULL(НДСПредъявленныйОбороты.СуммаБезНДСПриход, 0) + ЕСТЬNULL(НДСПредъявленныйОбороты.НДСПриход, 0)),
	|	СУММА(ЕСТЬNULL(НДСПредъявленныйОбороты.СуммаБезНДСПриход, 0)),
	|	СУММА(ЕСТЬNULL(НДСПредъявленныйОбороты.НДСПриход, 0)),
	|	0,
	|	0,
	|	НДСПредъявленныйОбороты.Поставщик,
	|	NULL,
	|	0
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный.Обороты(
	|			,
	|			&КонецПериода,
	|			Период,
	|			Организация = &Организация
	|				И СчетФактура В
	|					(ВЫБРАТЬ
	|						СписокСчетовФактур.СчетФактура
	|					ИЗ
	|						СписокСчетовФактур)) КАК НДСПредъявленныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСПредъявленныйОбороты.Организация,
	|	НДСПредъявленныйОбороты.СчетФактура,
	|	НДСПредъявленныйОбороты.ВидЦенности,
	|	НДСПредъявленныйОбороты.СтавкаНДС,
	|	НДСПредъявленныйОбороты.Поставщик";

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ПолучитьДанныеПоКорректируемымСчетамФактурамНалоговыйАгент(Реквизиты, ТаблицаВзаиморасчетовНалоговыйАгент) Экспорт

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Организация", 		   Реквизиты.Организация);
	Запрос.УстановитьПараметр("КонецПериода",          Новый Граница(Реквизиты.Период, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Предположение0",        Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение);
	Запрос.УстановитьПараметр("ТаблицаСуммовыхРазниц", ТаблицаВзаиморасчетовНалоговыйАгент);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаСуммовыхРазниц.СчетФактура КАК СчетФактура
	|ПОМЕСТИТЬ СписокСчетовФактур
	|ИЗ
	|	&ТаблицаСуммовыхРазниц КАК ТаблицаСуммовыхРазниц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСПредъявленныйОбороты.Организация,
	|	НДСПредъявленныйОбороты.Поставщик,
	|	НДСПредъявленныйОбороты.СчетФактура,
	|	НДСПредъявленныйОбороты.ВидЦенности,
	|	НДСПредъявленныйОбороты.СтавкаНДС,
	|	НДСПредъявленныйОбороты.СчетУчетаНДС,
	|	НДСПредъявленныйОбороты.СуммаБезНДСПриход,
	|	НДСПредъявленныйОбороты.НДСПриход
	|ПОМЕСТИТЬ ВТНДСПредъявленныйОбороты
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный.Обороты(
	|			,
	|			&КонецПериода,
	|			Период,
	|			Организация = &Организация
	|				И СчетФактура В
	|					(ВЫБРАТЬ
	|						СписокСчетовФактур.СчетФактура
	|					ИЗ
	|						СписокСчетовФактур)) КАК НДСПредъявленныйОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НДСПредъявленныйОбороты.СчетФактура,
	|	НДСПредъявленныйОбороты.ВидЦенности,
	|	НДСПредъявленныйОбороты.СтавкаНДС,
	|	НДСПредъявленныйОбороты.СчетУчетаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСПоПриобретеннымЦенностямОстатки.СчетФактура,
	|	НДСПоПриобретеннымЦенностямОстатки.ВидЦенности,
	|	НДСПоПриобретеннымЦенностямОстатки.СтавкаНДС,
	|	НДСПоПриобретеннымЦенностямОстатки.СчетУчетаНДС,
	|	НДСПоПриобретеннымЦенностямОстатки.СтоимостьОстаток,
	|	НДСПоПриобретеннымЦенностямОстатки.НДСОстаток
	|ПОМЕСТИТЬ ВТНДСПоПриобретеннымЦенностямОстатки
	|ИЗ
	|	РегистрНакопления.НДСПоПриобретеннымЦенностям.Остатки(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И СчетФактура В
	|					(ВЫБРАТЬ
	|						СписокСчетовФактур.СчетФактура
	|					ИЗ
	|						СписокСчетовФактур)) КАК НДСПоПриобретеннымЦенностямОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НДСПоПриобретеннымЦенностямОстатки.СчетФактура,
	|	НДСПоПриобретеннымЦенностямОстатки.ВидЦенности,
	|	НДСПоПриобретеннымЦенностямОстатки.СтавкаНДС,
	|	НДСПоПриобретеннымЦенностямОстатки.СчетУчетаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСПредъявленныйРеализация0Обороты.СчетФактура,
	|	НДСПредъявленныйРеализация0Обороты.ВидЦенности,
	|	НДСПредъявленныйРеализация0Обороты.СтавкаНДС,
	|	НДСПредъявленныйРеализация0Обороты.СчетУчетаНДС,
	|	НДСПредъявленныйРеализация0Обороты.СуммаБезНДСПриход,
	|	НДСПредъявленныйРеализация0Обороты.НДСПриход
	|ПОМЕСТИТЬ ВТНДСПредъявленныйРеализация0Обороты
	|ИЗ
	|	РегистрНакопления.НДСПредъявленныйРеализация0.Обороты(
	|			,
	|			&КонецПериода,
	|			Период,
	|			Организация = &Организация
	|				И СчетФактура В
	|					(ВЫБРАТЬ
	|						СписокСчетовФактур.СчетФактура
	|					ИЗ
	|						СписокСчетовФактур)
	|				И Состояние = &Предположение0) КАК НДСПредъявленныйРеализация0Обороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НДСПредъявленныйРеализация0Обороты.СчетФактура,
	|	НДСПредъявленныйРеализация0Обороты.ВидЦенности,
	|	НДСПредъявленныйРеализация0Обороты.СтавкаНДС,
	|	НДСПредъявленныйРеализация0Обороты.СчетУчетаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСКосвенныеРасходыОстатки.СчетФактура,
	|	НДСКосвенныеРасходыОстатки.ВидЦенности,
	|	НДСКосвенныеРасходыОстатки.СтавкаНДС,
	|	НДСКосвенныеРасходыОстатки.СчетУчетаНДС,
	|	НДСКосвенныеРасходыОстатки.СуммаБезНДСОстаток,
	|	НДСКосвенныеРасходыОстатки.НДСОстаток
	|ПОМЕСТИТЬ ВТНДСКосвенныеРасходыОстатки
	|ИЗ
	|	РегистрНакопления.НДСКосвенныеРасходы.Остатки(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И СчетФактура В
	|					(ВЫБРАТЬ
	|						СписокСчетовФактур.СчетФактура
	|					ИЗ
	|						СписокСчетовФактур)) КАК НДСКосвенныеРасходыОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НДСКосвенныеРасходыОстатки.СчетФактура,
	|	НДСКосвенныеРасходыОстатки.ВидЦенности,
	|	НДСКосвенныеРасходыОстатки.СтавкаНДС,
	|	НДСКосвенныеРасходыОстатки.СчетУчетаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСПредъявленныйОбороты.Организация,
	|	НДСПредъявленныйОбороты.СчетФактура КАК СчетФактура,
	|	НДСПредъявленныйОбороты.ВидЦенности,
	|	НДСПредъявленныйОбороты.СтавкаНДС,
	|	НДСПредъявленныйОбороты.СчетУчетаНДС,
	|	НДСПредъявленныйОбороты.Поставщик,
	|	СУММА(ЕСТЬNULL(НДСПредъявленныйОбороты.СуммаБезНДСПриход, 0) + ЕСТЬNULL(НДСПредъявленныйОбороты.НДСПриход, 0)) КАК Базис_СНДС,
	|	СУММА(ЕСТЬNULL(НДСПредъявленныйОбороты.СуммаБезНДСПриход, 0)) КАК Базис_БезНДС,
	|	СУММА(ЕСТЬNULL(НДСПредъявленныйОбороты.НДСПриход, 0)) КАК Базис_НДС,
	|	СУММА(ЕСТЬNULL(НДСКосвенныеРасходыОстатки.СуммаБезНДСОстаток, 0)) КАК Косвенные_БезНДС,
	|	СУММА(ЕСТЬNULL(НДСКосвенныеРасходыОстатки.НДСОстаток, 0)) КАК Косвенные_НДС,
	|	СУММА(ЕСТЬNULL(НДСПоПриобретеннымЦенностямОстатки.СтоимостьОстаток, 0)) КАК Партии_СНДС,
	|	СУММА(ЕСТЬNULL(НДСПоПриобретеннымЦенностямОстатки.НДСОстаток, 0)) КАК Партии_НДС,
	|	СУММА(ЕСТЬNULL(НДСПредъявленныйРеализация0Обороты.СуммаБезНДСПриход, 0)) КАК Реализация0_БезНДС,
	|	СУММА(ЕСТЬNULL(НДСПредъявленныйРеализация0Обороты.НДСПриход, 0)) КАК Реализация0_НДС,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НДСПредъявленныйРеализация0Обороты.СчетФактура ЕСТЬ NULL
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА НДСПредъявленныйРеализация0Обороты.СуммаБезНДСПриход = 0
	|							И НДСПредъявленныйРеализация0Обороты.НДСПриход = 0
	|						ТОГДА 0
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		КОНЕЦ) КАК ЕстьРеализация0,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НДСКосвенныеРасходыОстатки.СчетФактура ЕСТЬ NULL
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА НДСКосвенныеРасходыОстатки.СуммаБезНДСОстаток = 0
	|							И НДСКосвенныеРасходыОстатки.НДСОстаток = 0
	|						ТОГДА 0
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		КОНЕЦ) КАК ЕстьКосвенныеРасходы,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НДСПоПриобретеннымЦенностямОстатки.СчетФактура ЕСТЬ NULL
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА НДСПоПриобретеннымЦенностямОстатки.СтоимостьОстаток = 0
	|							И НДСПоПриобретеннымЦенностямОстатки.НДСОстаток = 0
	|						ТОГДА 0
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		КОНЕЦ) КАК ЕстьОстаткиПоПартиям,
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК ДоговорКонтрагента
	|ИЗ
	|	ВТНДСПредъявленныйОбороты КАК НДСПредъявленныйОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНДСПоПриобретеннымЦенностямОстатки КАК НДСПоПриобретеннымЦенностямОстатки
	|		ПО НДСПредъявленныйОбороты.СчетФактура = НДСПоПриобретеннымЦенностямОстатки.СчетФактура
	|			И НДСПредъявленныйОбороты.ВидЦенности = НДСПоПриобретеннымЦенностямОстатки.ВидЦенности
	|			И НДСПредъявленныйОбороты.СтавкаНДС = НДСПоПриобретеннымЦенностямОстатки.СтавкаНДС
	|			И НДСПредъявленныйОбороты.СчетУчетаНДС = НДСПоПриобретеннымЦенностямОстатки.СчетУчетаНДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНДСПредъявленныйРеализация0Обороты КАК НДСПредъявленныйРеализация0Обороты
	|		ПО НДСПредъявленныйОбороты.СчетФактура = НДСПредъявленныйРеализация0Обороты.СчетФактура
	|			И НДСПредъявленныйОбороты.ВидЦенности = НДСПредъявленныйРеализация0Обороты.ВидЦенности
	|			И НДСПредъявленныйОбороты.СтавкаНДС = НДСПредъявленныйРеализация0Обороты.СтавкаНДС
	|			И НДСПредъявленныйОбороты.СчетУчетаНДС = НДСПредъявленныйРеализация0Обороты.СчетУчетаНДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНДСКосвенныеРасходыОстатки КАК НДСКосвенныеРасходыОстатки
	|		ПО НДСПредъявленныйОбороты.СчетФактура = НДСКосвенныеРасходыОстатки.СчетФактура
	|			И НДСПредъявленныйОбороты.ВидЦенности = НДСКосвенныеРасходыОстатки.ВидЦенности
	|			И НДСПредъявленныйОбороты.СтавкаНДС = НДСКосвенныеРасходыОстатки.СтавкаНДС
	|			И НДСПредъявленныйОбороты.СчетУчетаНДС = НДСКосвенныеРасходыОстатки.СчетУчетаНДС
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСПредъявленныйОбороты.Организация,
	|	НДСПредъявленныйОбороты.СчетФактура,
	|	НДСПредъявленныйОбороты.ВидЦенности,
	|	НДСПредъявленныйОбороты.СтавкаНДС,
	|	НДСПредъявленныйОбороты.СчетУчетаНДС,
	|	НДСПредъявленныйОбороты.Поставщик";

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ПодготовитьТаблицыПоВидамРегистровНДС(РеестрСчетовФактур, Реквизиты) Экспорт

	Запрос = Новый Запрос;

	СостоянияПредъявленный = Новый СписокЗначений;
	СостоянияПредъявленный.Добавить(Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0);
	СостоянияПредъявленный.Добавить(Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0);

	Запрос.УстановитьПараметр("РеестрСчетовФактур", 	РеестрСчетовФактур);
    Запрос.УстановитьПараметр("Организация",        	Реквизиты.Организация);
	Запрос.УстановитьПараметр("СписокСчетовФактур",		ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(РеестрСчетовФактур.ВыгрузитьКолонку("СчетФактура"), Истина));
	Запрос.УстановитьПараметр("СписокВидыЦенностей",	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(РеестрСчетовФактур.ВыгрузитьКолонку("ВидЦенности"), Истина));
	Запрос.УстановитьПараметр("СписокСтавкиНДС",		ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(РеестрСчетовФактур.ВыгрузитьКолонку("СтавкаНДС"), Истина));
	Запрос.УстановитьПараметр("СписокСчетаУчетаНДС",	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(РеестрСчетовФактур.ВыгрузитьКолонку("СчетУчетаНДС"), Истина));
	Запрос.УстановитьПараметр("СостоянияПредъявленный", СостоянияПредъявленный);
	Запрос.УстановитьПараметр("СостоянияОжидание", 		Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение);
	Запрос.УстановитьПараметр("НачалоПериода",      	НачалоКвартала(Реквизиты.Период));
	Запрос.УстановитьПараметр("КонецПериода",       	Новый Граница(Реквизиты.Период, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("КонецПериодаДата",   	Реквизиты.Период);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеестрСчетовФактур.СчетФактура,
	|	РеестрСчетовФактур.СчетУчетаНДС,
	|	РеестрСчетовФактур.СтавкаНДС,
	|	РеестрСчетовФактур.СуммоваяРазница,
	|	РеестрСчетовФактур.ВидЦенности,
	|	РеестрСчетовФактур.ДоговорКонтрагента,
	|	РеестрСчетовФактур.Базис_БезНДС КАК БазисБезНДС,
	|	РеестрСчетовФактур.Базис_СНДС КАК БазисСНДС,
	|	РеестрСчетовФактур.Базис_НДС КАК БазисНДС,
	|	РеестрСчетовФактур.ЕстьКосвенныеРасходы,
	|	РеестрСчетовФактур.ЕстьОстаткиПоПартиям,
	|	РеестрСчетовФактур.ЕстьРеализация0,
	|	РеестрСчетовФактур.Косвенные_БезНДС,
	|	РеестрСчетовФактур.Косвенные_НДС,
	|	РеестрСчетовФактур.Партии_НДС,
	|	РеестрСчетовФактур.Партии_СНДС,
	|	РеестрСчетовФактур.Реализация0_БезНДС,
	|	РеестрСчетовФактур.Реализация0_НДС,
	|	РеестрСчетовФактур.СуммаБезНДС,
	|	РеестрСчетовФактур.НДС
	|ПОМЕСТИТЬ ВТРеестрСчетовФактур
	|ИЗ
	|	&РеестрСчетовФактур КАК РеестрСчетовФактур
	|ГДЕ
	|	РеестрСчетовФактур.Базис_БезНДС <> 0
	|	И РеестрСчетовФактур.Базис_НДС <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВТРеестрСчетовФактур.Косвенные_БезНДС * ВТРеестрСчетовФактур.СуммаБезНДС / ВТРеестрСчетовФактур.БазисБезНДС) КАК СуммаБезНДС,
	|	СУММА(ВТРеестрСчетовФактур.Косвенные_НДС * ВТРеестрСчетовФактур.НДС / ВТРеестрСчетовФактур.БазисНДС) КАК НДС,
	|	ВТРеестрСчетовФактур.СчетФактура,
	|	ВТРеестрСчетовФактур.ВидЦенности,
	|	ВТРеестрСчетовФактур.СтавкаНДС,
	|	ВТРеестрСчетовФактур.СчетУчетаНДС
	|ИЗ
	|	ВТРеестрСчетовФактур КАК ВТРеестрСчетовФактур
	|ГДЕ
	|	ВТРеестрСчетовФактур.ЕстьКосвенныеРасходы = 1
	|	И ВТРеестрСчетовФактур.Косвенные_БезНДС * ВТРеестрСчетовФактур.СуммаБезНДС / ВТРеестрСчетовФактур.БазисБезНДС <> 0
	|	И ВТРеестрСчетовФактур.Косвенные_НДС * ВТРеестрСчетовФактур.НДС / ВТРеестрСчетовФактур.БазисНДС <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТРеестрСчетовФактур.СчетФактура,
	|	ВТРеестрСчетовФактур.ВидЦенности,
	|	ВТРеестрСчетовФактур.СтавкаНДС,
	|	ВТРеестрСчетовФактур.СчетУчетаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВТРеестрСчетовФактур.Партии_СНДС * ВТРеестрСчетовФактур.СуммоваяРазница / ВТРеестрСчетовФактур.БазисСНДС) КАК СуммаБезНДС,
	|	СУММА(ВТРеестрСчетовФактур.Партии_НДС * ВТРеестрСчетовФактур.НДС / ВТРеестрСчетовФактур.БазисНДС) КАК НДС,
	|	ВТРеестрСчетовФактур.СчетФактура,
	|	ВТРеестрСчетовФактур.ВидЦенности,
	|	ВТРеестрСчетовФактур.СтавкаНДС,
	|	ВТРеестрСчетовФактур.СчетУчетаНДС
	|ИЗ
	|	ВТРеестрСчетовФактур КАК ВТРеестрСчетовФактур
	|ГДЕ
	|	ВТРеестрСчетовФактур.ЕстьОстаткиПоПартиям = 1
	|	И ВТРеестрСчетовФактур.Партии_СНДС * ВТРеестрСчетовФактур.СуммоваяРазница / ВТРеестрСчетовФактур.БазисСНДС <> 0
	|	И ВТРеестрСчетовФактур.Партии_НДС * ВТРеестрСчетовФактур.НДС / ВТРеестрСчетовФактур.БазисНДС <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТРеестрСчетовФактур.СчетФактура,
	|	ВТРеестрСчетовФактур.ВидЦенности,
	|	ВТРеестрСчетовФактур.СтавкаНДС,
	|	ВТРеестрСчетовФактур.СчетУчетаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВТРеестрСчетовФактур.Реализация0_БезНДС * ВТРеестрСчетовФактур.СуммаБезНДС / ВТРеестрСчетовФактур.БазисБезНДС) КАК СуммаБезНДС,
	|	СУММА(ВТРеестрСчетовФактур.Реализация0_НДС * ВТРеестрСчетовФактур.НДС / ВТРеестрСчетовФактур.БазисНДС) КАК НДС,
	|	ВТРеестрСчетовФактур.СчетФактура,
	|	ВТРеестрСчетовФактур.ВидЦенности,
	|	ВТРеестрСчетовФактур.СтавкаНДС,
	|	ВТРеестрСчетовФактур.СчетУчетаНДС
	|ИЗ
	|	ВТРеестрСчетовФактур КАК ВТРеестрСчетовФактур
	|ГДЕ
	|	ВТРеестрСчетовФактур.ЕстьРеализация0 = 1
	|	И ВТРеестрСчетовФактур.Реализация0_БезНДС * ВТРеестрСчетовФактур.СуммаБезНДС / ВТРеестрСчетовФактур.БазисБезНДС <> 0
	|	И ВТРеестрСчетовФактур.Реализация0_НДС * ВТРеестрСчетовФактур.НДС / ВТРеестрСчетовФактур.БазисНДС <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТРеестрСчетовФактур.СчетФактура,
	|	ВТРеестрСчетовФактур.ВидЦенности,
	|	ВТРеестрСчетовФактур.СтавкаНДС,
	|	ВТРеестрСчетовФактур.СчетУчетаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&КонецПериодаДата КАК Период,
	|	НДСКосвенныеРасходыОбороты.Организация КАК Организация,
	|	НДСКосвенныеРасходыОбороты.СчетФактура КАК СчетФактура,
	|	НДСКосвенныеРасходыОбороты.ВидЦенности КАК ВидЦенности,
	|	НДСКосвенныеРасходыОбороты.СтавкаНДС КАК СтавкаНДС,
	|	НДСКосвенныеРасходыОбороты.СчетУчетаНДС КАК СчетУчетаНДС,
	|	НДСКосвенныеРасходыОбороты.НДСВключенВСтоимость КАК НДСВключенВСтоимость,
	|	НДСКосвенныеРасходыОбороты.СуммаБезНДСОборот КАК СуммаБезНДС,
	|	НДСКосвенныеРасходыОбороты.НДСОборот КАК НДС
	|ПОМЕСТИТЬ ВТНДСКосвенныеРасходыОбороты
	|ИЗ
	|	РегистрНакопления.НДСКосвенныеРасходы.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Период,
	|			Организация = &Организация
	|				И СчетФактура В (&СписокСчетовФактур)
	|				И СтавкаНДС В (&СписокСтавкиНДС)
	|				И СчетУчетаНДС В (&СписокСчетаУчетаНДС)) КАК НДСКосвенныеРасходыОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	СчетФактура,
	|	ВидЦенности,
	|	СтавкаНДС,
	|	СчетУчетаНДС,
	|	НДСВключенВСтоимость
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&КонецПериодаДата КАК Период,
	|	&КонецПериодаДата КАК ДатаСобытия,
	|	НДСКосвенныеРасходыОбороты.Организация,
	|	НДСКосвенныеРасходыОбороты.СчетФактура,
	|	НДСКосвенныеРасходыОбороты.ВидЦенности,
	|	НДСКосвенныеРасходыОбороты.СтавкаНДС,
	|	НДСКосвенныеРасходыОбороты.СчетУчетаНДС,
	|	НДСКосвенныеРасходыОбороты.НДСВключенВСтоимость,
	|	НДСКосвенныеРасходы.СуммаБезНДС,
	|	НДСКосвенныеРасходы.НДС,
	|	НДСКосвенныеРасходы.СтатьяЗатрат,
	|	НДСКосвенныеРасходы.СчетЗатрат,
	|	НДСКосвенныеРасходы.Субконто1,
	|	НДСКосвенныеРасходы.Субконто2,
	|	НДСКосвенныеРасходы.Субконто3
	|ИЗ
	|	ВТНДСКосвенныеРасходыОбороты КАК НДСКосвенныеРасходыОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НДСКосвенныеРасходы КАК НДСКосвенныеРасходы
	|		ПО НДСКосвенныеРасходыОбороты.Организация = НДСКосвенныеРасходы.Организация
	|			И НДСКосвенныеРасходыОбороты.СчетФактура = НДСКосвенныеРасходы.СчетФактура
	|			И НДСКосвенныеРасходыОбороты.ВидЦенности = НДСКосвенныеРасходы.ВидЦенности
	|			И НДСКосвенныеРасходыОбороты.СтавкаНДС = НДСКосвенныеРасходы.СтавкаНДС
	|			И НДСКосвенныеРасходыОбороты.СчетУчетаНДС = НДСКосвенныеРасходы.СчетУчетаНДС
	|			И НДСКосвенныеРасходыОбороты.НДСВключенВСтоимость = НДСКосвенныеРасходы.НДСВключенВСтоимость
	|			И (НДСКосвенныеРасходы.Период >= &НачалоПериода)
	|			И (НДСКосвенныеРасходы.Период <= &КонецПериодаДата)
	|			И НДСКосвенныеРасходыОбороты.НДСВключенВСтоимость = НДСКосвенныеРасходы.НДСВключенВСтоимость
	|ГДЕ
	|	НЕ(ЕСТЬNULL(НДСКосвенныеРасходыОбороты.СуммаБезНДС, 0) = 0
	|				И ЕСТЬNULL(НДСКосвенныеРасходыОбороты.НДС, 0) = 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&КонецПериодаДата КАК Период,
	|	&КонецПериодаДата КАК ДатаСобытия,
	|	НДСПоПриобретеннымЦенностямОстатки.Организация,
	|	НДСПоПриобретеннымЦенностямОстатки.СчетУчета,
	|	НДСПоПриобретеннымЦенностямОстатки.Номенклатура,
	|	НДСПоПриобретеннымЦенностямОстатки.Партия,
	|	НДСПоПриобретеннымЦенностямОстатки.Склад,
	|	НДСПоПриобретеннымЦенностямОстатки.СчетФактура,
	|	НДСПоПриобретеннымЦенностямОстатки.НДСВключенВСтоимость,
	|	НДСПоПриобретеннымЦенностямОстатки.ВидЦенности,
	|	НДСПоПриобретеннымЦенностямОстатки.СчетУчетаНДС,
	|	НДСПоПриобретеннымЦенностямОстатки.СтавкаНДС,
	|	НДСПоПриобретеннымЦенностямОстатки.СтоимостьОстаток КАК СуммаБезНДС,
	|	НДСПоПриобретеннымЦенностямОстатки.НДСОстаток КАК НДС
	|ИЗ
	|	РегистрНакопления.НДСПоПриобретеннымЦенностям.Остатки(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И СчетФактура В (&СписокСчетовФактур)
	|				И СтавкаНДС В (&СписокСтавкиНДС)
	|				И СчетУчетаНДС В (&СписокСчетаУчетаНДС)) КАК НДСПоПриобретеннымЦенностямОстатки
	|ГДЕ
	|	НЕ(ЕСТЬNULL(НДСПоПриобретеннымЦенностямОстатки.СтоимостьОстаток, 0) = 0
	|				И ЕСТЬNULL(НДСПоПриобретеннымЦенностямОстатки.НДСОстаток, 0) = 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&КонецПериодаДата КАК Период,
	|	&КонецПериодаДата КАК ДатаСобытия,
	|	НДСПредъявленныйРеализация0Обороты.Организация,
	|	НДСПредъявленныйРеализация0Обороты.СчетФактура,
	|	НДСПредъявленныйРеализация0Обороты.Состояние,
	|	НДСПредъявленныйРеализация0Обороты.ДокументОтгрузки,
	|	НДСПредъявленныйРеализация0Обороты.ВидЦенности,
	|	НДСПредъявленныйРеализация0Обороты.СтавкаНДС,
	|	НДСПредъявленныйРеализация0Обороты.СчетУчетаНДС,
	|	ВЫБОР
	|		КОГДА НДСПредъявленныйРеализация0Обороты.Состояние В (&СостоянияПредъявленный)
	|			ТОГДА СУММА(НДСПредъявленныйРеализация0Обороты.СуммаБезНДСПриход)
	|		КОГДА НДСПредъявленныйРеализация0Обороты.Состояние = &СостоянияОжидание
	|			ТОГДА СУММА(НДСПредъявленныйРеализация0Обороты.СуммаБезНДСПриход - НДСПредъявленныйРеализация0Обороты.СуммаБезНДСРасход)
	|	КОНЕЦ КАК СуммаБезНДС,
	|	ВЫБОР
	|		КОГДА НДСПредъявленныйРеализация0Обороты.Состояние В (&СостоянияПредъявленный)
	|			ТОГДА СУММА(НДСПредъявленныйРеализация0Обороты.НДСПриход)
	|		КОГДА НДСПредъявленныйРеализация0Обороты.Состояние = &СостоянияОжидание
	|			ТОГДА СУММА(НДСПредъявленныйРеализация0Обороты.НДСПриход - НДСПредъявленныйРеализация0Обороты.НДСРасход)
	|	КОНЕЦ КАК НДС
	|ИЗ
	|	РегистрНакопления.НДСПредъявленныйРеализация0.Обороты(
	|			,
	|			&КонецПериода,
	|			,
	|			Организация = &Организация
	|				И СчетФактура В (&СписокСчетовФактур)
	|				И СтавкаНДС В (&СписокСтавкиНДС)
	|				И СчетУчетаНДС В (&СписокСчетаУчетаНДС)) КАК НДСПредъявленныйРеализация0Обороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСПредъявленныйРеализация0Обороты.Организация,
	|	НДСПредъявленныйРеализация0Обороты.СчетФактура,
	|	НДСПредъявленныйРеализация0Обороты.Состояние,
	|	НДСПредъявленныйРеализация0Обороты.ДокументОтгрузки,
	|	НДСПредъявленныйРеализация0Обороты.ВидЦенности,
	|	НДСПредъявленныйРеализация0Обороты.СтавкаНДС,
	|	НДСПредъявленныйРеализация0Обороты.СчетУчетаНДС
	|
	|ИМЕЮЩИЕ
	|	ВЫБОР
	|		КОГДА НДСПредъявленныйРеализация0Обороты.Состояние В (&СостоянияПредъявленный)
	|			ТОГДА СУММА(НДСПредъявленныйРеализация0Обороты.СуммаБезНДСПриход)
	|		КОГДА НДСПредъявленныйРеализация0Обороты.Состояние = &СостоянияОжидание
	|			ТОГДА СУММА(НДСПредъявленныйРеализация0Обороты.СуммаБезНДСПриход - НДСПредъявленныйРеализация0Обороты.СуммаБезНДСРасход)
	|	КОНЕЦ <> 0 И
	|	ВЫБОР
	|		КОГДА НДСПредъявленныйРеализация0Обороты.Состояние В (&СостоянияПредъявленный)
	|			ТОГДА СУММА(НДСПредъявленныйРеализация0Обороты.НДСПриход)
	|		КОГДА НДСПредъявленныйРеализация0Обороты.Состояние = &СостоянияОжидание
	|			ТОГДА СУММА(НДСПредъявленныйРеализация0Обороты.НДСПриход - НДСПредъявленныйРеализация0Обороты.НДСРасход)
	|	КОНЕЦ <> 0";


	Результат = Запрос.ВыполнитьПакет();

	СтруктураТаблиц = Новый Структура;

	СтруктураТаблиц.Вставить("КосвенныеРасходы", 			Результат[1].Выгрузить());
	СтруктураТаблиц.Вставить("Партии",						Результат[2].Выгрузить());
	СтруктураТаблиц.Вставить("Реализация0",         		Результат[3].Выгрузить());
	СтруктураТаблиц.Вставить("КосвенныеРасходыОбороты",     Результат[5].Выгрузить());
	СтруктураТаблиц.Вставить("ПартииОбороты",			    Результат[6].Выгрузить());
	СтруктураТаблиц.Вставить("НДСПредъявленныйРеализация0", Результат[7].Выгрузить());

	СтруктураСкорректированныхТаблиц = Новый Структура();

	ТаблицаДанныхПартии = РаспределитьПоБазису(СтруктураТаблиц.Партии, СтруктураТаблиц.ПартииОбороты);
	ТаблицаДанныхПартии.Колонки.СуммаБезНДС.Имя = "Стоимость";

	СтруктураСкорректированныхТаблиц.Вставить("Партии", ТаблицаДанныхПартии);
	СтруктураСкорректированныхТаблиц.Вставить("КосвенныеРасходы", РаспределитьПоБазису(СтруктураТаблиц.КосвенныеРасходы, СтруктураТаблиц.КосвенныеРасходыОбороты));
	СтруктураСкорректированныхТаблиц.Вставить("НДСПредъявленныйРеализация0", РаспределитьПоБазису(СтруктураТаблиц.Реализация0, СтруктураТаблиц.НДСПредъявленныйРеализация0));

	Возврат СтруктураСкорректированныхТаблиц;

КонецФункции

Функция РаспределитьПоБазису(Источник, Базис) Экспорт

	Распределение = Новый Структура("СуммаБезНДС, НДС");
	Отбор         = Новый Структура("СчетФактура, ВидЦенности, СтавкаНДС, СчетУчетаНДС");

	ТаблицаДанных = УчетНДС.СформироватьКорректирующиеЗаписи(Источник, Базис, Распределение, Отбор);

	СтрокиКУдалению = Новый Массив();

	Для каждого СтрокаДанных Из ТаблицаДанных Цикл
		Если СтрокаДанных.СуммаБезНДС = 0 И СтрокаДанных.НДС = 0 Тогда
			СтрокиКУдалению.Добавить(СтрокаДанных);
			Продолжить;
		КонецЕсли;
	КонецЦикла;

	Если СтрокиКУдалению.Количество() > 0 Тогда
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ТаблицаДанных.Удалить(СтрокаКУдалению);
		КонецЦикла;
	КонецЕсли;

	Возврат ТаблицаДанных;

КонецФункции

//	ДВИЖЕНИЯ РЕГИСТРА "НДС НАЧИСЛЕННЫЙ"

Процедура СформироватьДвиженияНДСНачисленныйРеализацияТоваровУслуг(ТоварыУслуги, Реквизиты, Движения, Отказ) Экспорт

	УчетНДСБП.СформироватьДвиженияНДСНачисленныйРеализацияТоваровУслуг(ТоварыУслуги, Реквизиты, Движения, Отказ);

КонецПроцедуры

Процедура СформироватьДвиженияНДСНачисленныйОказаниеУслуг(ТоварыУслуги, Реквизиты, Движения, Отказ) Экспорт

	УчетНДСБП.СформироватьДвиженияНДСНачисленныйОказаниеУслуг(ТоварыУслуги, Реквизиты, Движения, Отказ);

КонецПроцедуры

Процедура СформироватьДвиженияНДСНачисленныйВозвратТоваровОтПокупателя(ДанныеДвижений, Движения, Отказ) Экспорт

	УчетНДСБП.СформироватьДвиженияНДСНачисленныйВозвратТоваровОтПокупателя(ДанныеДвижений, Движения, Отказ);

КонецПроцедуры

Процедура СформироватьДвиженияНДСНачисленныйПолученныйАванс(ТаблицаРеквизиты, ТаблицаАвансов, Движения, Отказ) Экспорт

	УчетНДСБП.СформироватьДвиженияНДСНачисленныйПолученныйАванс(ТаблицаРеквизиты, ТаблицаАвансов, Движения, Отказ);

КонецПроцедуры

Процедура СформироватьДвиженияНДСНачисленныйПолученныйАвансРасход(ТаблицаРеквизиты, ТаблицаАвансов, Движения, Отказ) Экспорт

	УчетНДСБП.СформироватьДвиженияНДСНачисленныйПолученныйАвансРасход(ТаблицаРеквизиты, ТаблицаАвансов, Движения, Отказ);

КонецПроцедуры

Процедура СформироватьДвиженияНДСНачисленныйСуммовыеРазницы(ТаблицаСуммовыеРазницы, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	УчетНДСБП.СформироватьДвиженияНДСНачисленныйСуммовыеРазницы(ТаблицаСуммовыеРазницы, ТаблицаРеквизиты, Движения, Отказ);

КонецПроцедуры

Процедура СформироватьДвиженияНДСНачисленныйРозничнаяПродажа(ТаблицаЦенности, Движения, Отказ) Экспорт

	УчетНДСБП.СформироватьДвиженияНДСНачисленныйРозничнаяПродажа(ТаблицаЦенности, Движения, Отказ);

КонецПроцедуры

Процедура СформироватьДвиженияНДСНачисленныйНачисленНДСНалоговымАгентом(Реквизиты, ТаблицаАвансы, Движения, Отказ) Экспорт

	УчетНДСБП.СформироватьДвиженияНДСНачисленныйНачисленНДСНалоговымАгентом(Реквизиты, ТаблицаАвансы, Движения, Отказ);

КонецПроцедуры

Процедура СформироватьДвиженияНДСНачисленныйНачислениеНДСПоРеализации(Реквизиты, ТаблицаПоРеализации, Движения, Отказ) Экспорт

	УчетНДСБП.СформироватьДвиженияНДСНачисленныйНачислениеНДСПоРеализации(Реквизиты, ТаблицаПоРеализации, Движения, Отказ);

КонецПроцедуры

Процедура СформироватьДвиженияНДСНачисленныйСтавка0НеПодтверждена(Реквизиты, ТаблицаНДСНачисленный, Движения, Отказ) Экспорт

	УчетНДСБП.СформироватьДвиженияНДСНачисленныйСтавка0НеПодтверждена(Реквизиты, ТаблицаНДСНачисленный, Движения, Отказ);

КонецПроцедуры

Процедура СформироватьДвиженияНДСНачисленныйСтавка0КурсоваяРазница(Реквизиты, ТаблицаДвижений, Движения, Отказ) Экспорт

	УчетНДСБП.СформироватьДвиженияНДСНачисленныйСтавка0КурсоваяРазница(Реквизиты, ТаблицаДвижений, Движения, Отказ);

КонецПроцедуры

Процедура СформироватьДвиженияНДСНачисленныйНачислениеНДСпоСМРХозспособом(Реквизиты, СМРХозспособом, Движения, Отказ) Экспорт

	УчетНДСБП.СформироватьДвиженияНДСНачисленныйНачислениеНДСпоСМРХозспособом(Реквизиты, СМРХозспособом, Движения, Отказ);

КонецПроцедуры

Процедура СформироватьДвиженияНДСНачисленныйРеализацияТоваровУслугКомитентаНерезидента(Реквизиты, ТаблицаДвижений, Движения, Отказ) Экспорт
	
	УчетНДСБП.СформироватьДвиженияНДСНачисленныйРеализацияТоваровУслугКомитентаНерезидента(Реквизиты, ТаблицаДвижений, Движения, Отказ);
	
КонецПроцедуры	

//	ДВИЖЕНИЯ РЕГИСТРА "НДС ПРЕДЪЯВЛЕННЫЙ, РЕАЛИЗАЦИЯ 0%"

Процедура СформироватьДвиженияНДСПредъявленныйРеализация0ВычетПоРеализации(ТаблицаДвижений, Движения, Отказ) Экспорт

	УчетНДСБП.СформироватьДвиженияНДСПредъявленныйРеализация0ВычетПоРеализации(ТаблицаДвижений, Движения, Отказ);

КонецПроцедуры

Процедура СформироватьДвиженияНДСПредъявленныйРеализация0СнятиеБлокировкиВычета(Реквизиты, ТаблицаСнятиеБлокировкиВычета, Движения, Отказ) Экспорт

	УчетНДСБП.СформироватьДвиженияНДСПредъявленныйРеализация0СнятиеБлокировкиВычета(Реквизиты, ТаблицаСнятиеБлокировкиВычета, Движения, Отказ);

КонецПроцедуры

//	ДВИЖЕНИЯ РЕГИСТРА "НДС ПО ПРИОБРЕТЕННЫМ ЦЕННОСТЯМ"

Процедура СформироватьДвиженияНДСПоПриобретеннымЦенностямВозвратТоваровПокупателем(ТаблицаВозвращаемыеТовары, Реквизиты, Движения, Отказ) Экспорт
	
	УчетНДСБП.СформироватьДвиженияНДСПоПриобретеннымЦенностямВозвратТоваровПокупателем(ТаблицаВозвращаемыеТовары, Реквизиты, Движения, Отказ);
	
КонецПроцедуры

Процедура СформироватьДвиженияНДСПоПриобретеннымЦенностямПоступлениеТоваров(Товары, Реквизиты, Движения, Отказ) Экспорт

	УчетНДСБП.СформироватьДвиженияНДСПоПриобретеннымЦенностямПоступлениеТоваров(Товары, Реквизиты, Движения, Отказ);

КонецПроцедуры

Процедура СформироватьДвиженияНДСПоПриобретеннымЦенностям(ТаблицаДвижений, Движения, Отказ) Экспорт

	УчетНДСБП.СформироватьДвиженияНДСПоПриобретеннымЦенностям(ТаблицаДвижений, Движения, Отказ);

КонецПроцедуры

//	ДВИЖЕНИЯ РЕГИСТРА "НДС ПО КОСВЕННЫМ РАСХОДАМ"

Процедура СформироватьДвиженияНДСКосвенныеРасходыПоступлениеУслуг(РаспределеляемыеРасходы, Реквизиты, Движения, Отказ) Экспорт

	УчетНДСБП.СформироватьДвиженияНДСКосвенныеРасходыПоступлениеУслуг(РаспределеляемыеРасходы, Реквизиты, Движения, Отказ);

КонецПроцедуры

Процедура СформироватьДвиженияНДСКосвенныеРасходы(ТаблицаДвижений, Движения, Отказ) Экспорт

	УчетНДСБП.СформироватьДвиженияНДСКосвенныеРасходы(ТаблицаДвижений, Движения, Отказ);

КонецПроцедуры

//	ДВИЖЕНИЯ РЕГИСТРА "НДС С АВАНСОВ"

Процедура СформироватьДвиженияНДССАвансовВыданныйАванс(ТаблицаРеквизиты, ТаблицаАвансов, Движения, Отказ) Экспорт

	УчетНДСБП.СформироватьДвиженияНДССАвансовВыданныйАванс(ТаблицаРеквизиты, ТаблицаАвансов, Движения, Отказ);

КонецПроцедуры

Процедура СформироватьДвиженияНДССАвансовВосстановлениеНДСВыданныйАванс(ТаблицаРеквизиты, ТаблицаАвансов, Движения, Отказ) Экспорт

	УчетНДСБП.СформироватьДвиженияНДССАвансовВосстановлениеНДСВыданныйАванс(ТаблицаРеквизиты, ТаблицаАвансов, Движения, Отказ);

КонецПроцедуры

Процедура СформироватьДвиженияНДСсАвансовПолученныйАванс(ТаблицаРеквизиты, ТаблицаАвансов, Движения, Отказ) Экспорт

	УчетНДСБП.СформироватьДвиженияНДСсАвансовПолученныйАванс(ТаблицаРеквизиты, ТаблицаАвансов, Движения, Отказ);

КонецПроцедуры

Процедура СформироватьДвиженияНДСсАвансовЗачетПолученногоАванса(ТаблицаРеквизиты, ТаблицаАвансов, Движения, Отказ) Экспорт

	УчетНДСБП.СформироватьДвиженияНДСсАвансовЗачетПолученногоАванса(ТаблицаРеквизиты, ТаблицаАвансов, Движения, Отказ);

КонецПроцедуры

//	ДВИЖЕНИЯ РЕГИСТРА БУХГАЛТЕРИИ

Процедура СформироватьПроводкиПоступлениеГТД(НомераГТД, Реквизиты, Движения, Отказ) Экспорт

	УчетНДСБП.СформироватьПроводкиПоступлениеГТД(НомераГТД, Реквизиты, Движения, Отказ);

КонецПроцедуры

Процедура СформироватьПроводкиСписаниеГТД(Товары, Реквизиты, Движения, Отказ) Экспорт

	УчетНДСБП.СформироватьПроводкиСписаниеГТД(Товары, Реквизиты, Движения, Отказ);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	ДВИЖЕНИЯ НДС ДОКУМЕНТА КОРРЕКТИРОВКА ПОСТУПЛЕНИЯ

Процедура СформироватьДвиженияКорректировкаНДСПоПартиямЗапасов(РеквизитыДокумента, Движения, Отказ) Экспорт

	УчетНДСБП.СформироватьДвиженияКорректировкаНДСПоПартиямЗапасов(РеквизитыДокумента, Движения, Отказ);

КонецПроцедуры         

Процедура СформироватьДвиженияКорректировкаНДСКосвенныхРасходов(РеквизитыДокумента, ТаблицаКорректировкаНДСКосвенныхРасходов, Движения, Отказ) Экспорт

	УчетНДСБП.СформироватьДвиженияКорректировкаНДСКосвенныхРасходов(РеквизитыДокумента, ТаблицаКорректировкаНДСКосвенныхРасходов, Движения, Отказ);
	
КонецПроцедуры	

Функция ПодготовитьТаблицуКоэффициентовКорректировкиПоступления(Реквизиты) Экспорт

	Возврат УчетНДСБП.ПодготовитьТаблицуКоэффициентовКорректировкиПоступления(Реквизиты);

КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ОпределитьРаспределеляемыеРасходы(ТаблицаРасходов) Экспорт

	Возврат УчетНДСБП.ОпределитьРаспределеляемыеРасходы(ТаблицаРасходов);

КонецФункции

// Функция возвращает ссылку на документ, который требуется записывать в измерение 
// СчетФактура регистров НДС.
//
Функция ПолучитьСчетФактуруДляЗаписиВРегистрыНДС(ИсходныйДокумент) Экспорт

	СчетФактура = Неопределено;

	Если ТипЗнч(ИсходныйДокумент) = Тип("ДокументСсылка.ОтражениеНДСКВычету") Тогда

		РеквизитыИсходногоДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИсходныйДокумент, "РасчетныйДокумент, ИспользоватьДокументРасчетовКакСчетФактуру");
		
		Если РеквизитыИсходногоДокумента.ИспользоватьДокументРасчетовКакСчетФактуру Тогда
			
			Если ТипЗнч(РеквизитыИсходногоДокумента.РасчетныйДокумент) = Тип("ДокументСсылка.СчетФактураВыданный")
				 ИЛИ ТипЗнч(РеквизитыИсходногоДокумента.РасчетныйДокумент) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")
				 ИЛИ ТипЗнч(РеквизитыИсходногоДокумента.РасчетныйДокумент) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
			
				СчетФактура = ПолучитьСчетФактуруДляЗаписиВРегистрыНДС(РеквизитыИсходногоДокумента.РасчетныйДокумент);
			
			Иначе
				
				СчетФактура = РеквизитыИсходногоДокумента.РасчетныйДокумент;
				
			КонецЕсли;
			
		Иначе // т.е. НЕ ИспользоватьДокументРасчетовКакСчетФактуру
		
			СчетФактура = ИсходныйДокумент;
			
		КонецЕсли;
	
	ИначеЕсли ТипЗнч(ИсходныйДокумент) = Тип("ДокументСсылка.ОтражениеНачисленияНДС") Тогда
	
		РеквизитыИсходногоДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИсходныйДокумент, 
			"РасчетныйДокумент, ИспользоватьДокументРасчетовКакСчетФактуру");
		Если РеквизитыИсходногоДокумента.ИспользоватьДокументРасчетовКакСчетФактуру Тогда
			СчетФактура = РеквизитыИсходногоДокумента.РасчетныйДокумент;
		Иначе
			СчетФактура = ИсходныйДокумент;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ИсходныйДокумент) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			
		РеквизитыИсходногоДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИсходныйДокумент, 
			"ДокументОснование, ВидСчетаФактуры");
		Если РеквизитыИсходногоДокумента.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда
			СчетФактура = РеквизитыИсходногоДокумента.ДокументОснование;
		Иначе
			СчетФактура = ИсходныйДокумент;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ИсходныйДокумент) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
	
		РеквизитыИсходногоДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИсходныйДокумент, 
			"ДокументОснование, ВидСчетаФактуры");
		Если РеквизитыИсходногоДокумента.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс
			ИЛИ РеквизитыИсходногоДокумента.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАвансКомитента Тогда
			
			СчетФактура = РеквизитыИсходногоДокумента.ДокументОснование;
			
		Иначе
			СчетФактура = ИсходныйДокумент;
		КонецЕсли;
				
	ИначеЕсли ТипЗнч(ИсходныйДокумент) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		
		РеквизитыИсходногоДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИсходныйДокумент,
			"ПокупателемВыставляетсяСчетФактураНаВозврат, Сделка");
		Если РеквизитыИсходногоДокумента.ПокупателемВыставляетсяСчетФактураНаВозврат Тогда
			СчетФактура = РеквизитыИсходногоДокумента.Сделка;
		Иначе
			СчетФактура = ИсходныйДокумент;
		КонецЕсли;
		
	Иначе
	
		СчетФактура = ИсходныйДокумент;
		
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(СчетФактура) Тогда
		СчетФактура = ИсходныйДокумент;
	КонецЕсли;

	Возврат СчетФактура;

КонецФункции

// Функция возращает Истина, если для переданных СчетаФактуры и ВидаЦенности
// необходимо указание контрагента при записи в регистры НДС.
//
Функция НеобходимоУказаниеКонтрагентаДляСчетаФактуры(СчетФактура, ВидЦенности) Экспорт

	ТипСФ = ТипЗнч(СчетФактура);
	Если ВидЦенности = Перечисления.ВидыЦенностей.ВнутреннееПотребление
		ИЛИ ВидЦенности = Перечисления.ВидыЦенностей.СМРСобственнымиСилами
		ИЛИ ТипСФ = Тип("ДокументСсылка.ОтчетОРозничныхПродажах")
		ИЛИ (ТипСФ = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
		И НЕ (ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные 
		ИЛИ ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные0
		ИЛИ ВидЦенности = Перечисления.ВидыЦенностей.ВозвратАвансовПолученных
		ИЛИ ВидЦенности = Перечисления.ВидыЦенностей.СуммыСвязанныеСРасчетамиПоОплате))	Тогда
		
		Возврат Ложь;
		
	Иначе
		Возврат Истина;
	КонецЕсли; 

КонецФункции // НеобходимоУказаниеКонтрагентаДляСчетаФактуры()

// Функция возвращает признак ведения учета по постановлению Правительства РФ № 1137 от 26.12.2011
//
Функция ИспользуетсяПостановлениеНДС1137(Период) Экспорт

	Результат = ПолучитьФункциональнуюОпцию("ИспользуетсяПостановлениеНДС1137", 
		Новый Структура("Период", НачалоДня(Период)));

	Возврат Результат;

КонецФункции

// Возвращает версию постановления Правительства РФ от 26.12.2011 г. № 1137
//
// Параметры
// 	Период  - 	тип дата, в данном параметре передается
//            	дата на которую необходимо определить версию постановления
// Возвращаемое значение:
//  Число   - 	версия постановления, 
//				1 - исходная версия постановления Правительства РФ от 26.12.2011 г. № 1137
//              2 - постановление Правительства РФ от 26.12.2011 г. № 1137 в редакции постановления № 952
//              3 - постановление Правительства РФ от 26.12.2011 г. № 1137 в редакции постановления № 735
//
Функция ВерсияПостановленияНДС1137(Период) Экспорт
	
	Если Период >= '20141001' Тогда 		// Постановление № 735 вступает в силу с 1 октября 2014 года.
		Возврат 3;
	ИначеЕсли Период >= '20131106' Тогда 	// Постановление № 952 вступает в силу с 6 ноября 2013 года.
		Возврат 2;
	Иначе
		Возврат 1;                          // Исходная версия Постановления Правительства РФ от 26.12.2011 г. № 1137.
	КонецЕсли;
	
КонецФункции

// Функция возвращает признак автоматического заполнения раздела 7 Декларации по НДС
//
Функция ЗаполняетсяРаздел7ДекларацииНДС(Период) Экспорт
	
	Если Период >= '20170401' Тогда 
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Определяет наличие соглашения с контрагентом, на электронный обмен документами
//
Функция НаличиеСоглашенияОбменаЭД(СсылкаНаВладельца) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД")
		ИЛИ НЕ ЗначениеЗаполнено(СсылкаНаВладельца) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыЭД = Новый Структура("ВидЭд,НаправлениеЭД,Организация,Контрагент");
	
	ЗаполнитьЗначенияСвойств(ПараметрыЭД, СсылкаНаВладельца);
	
	ПараметрыЭД.ВидЭД         = Перечисления.ВидыЭД.СчетФактура;
	ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;

	Результат = ОбменСКонтрагентамиСлужебный.ОпределитьНастройкиОбменаЭД(ПараметрыЭД);
	
	Возврат ЗначениеЗаполнено(Результат);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	ОТПРАВКА ДОКУМЕНТОВ НДС В НАЛОГОВЫЕ ОРГАНЫ

Функция СформироватьЭлектронныеДокументы(ВыгружаемыеДокументы, УникальныйИдентификатор = Неопределено) Экспорт
	
	Если УникальныйИдентификатор = Неопределено Тогда
		УникальныйИдентификатор = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	Результат = Новый Соответствие;
	
	Для Каждого ВыгружаемыйДокумент Из ВыгружаемыеДокументы Цикл
		
		ЭтоДокументРегистраУчетаНДС = (ВыгружаемыйДокумент.Метаданные().Имя = "КнигаПокупокДляПередачиВЭлектронномВиде"
		                           ИЛИ ВыгружаемыйДокумент.Метаданные().Имя = "КнигаПродажДляПередачиВЭлектронномВиде"
		                           ИЛИ ВыгружаемыйДокумент.Метаданные().Имя = "ДопЛистКнигиПокупокДляПередачиВЭлектронномВиде"
		                           ИЛИ ВыгружаемыйДокумент.Метаданные().Имя = "ДопЛистКнигиПродажДляПередачиВЭлектронномВиде"
		                           ИЛИ ВыгружаемыйДокумент.Метаданные().Имя = "ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде");
		Если ЭтоДокументРегистраУчетаНДС Тогда
			ОбъектВыгрузки = ВыгружаемыйДокумент.ПолучитьОбъект();
			ФайлыВыгрузки = ОбъектВыгрузки.ВыгрузитьДокумент(УникальныйИдентификатор);
			
			МассивВыгрузки = Новый Массив;
			Для Каждого ФайлВыгрузки Из ФайлыВыгрузки Цикл
				
				ЭлементВыгрузки = Новый Структура;
				ЭлементВыгрузки.Вставить("ТипФайла", "ФайлВыгрузки");
				ЭлементВыгрузки.Вставить("ИмяФайла", ФайлВыгрузки.ИмяФайлаВыгрузки);
				ЭлементВыгрузки.Вставить("АдресВременногоХранилища", ФайлВыгрузки.АдресФайлаВыгрузки);
				
				МассивВыгрузки.Добавить(ЭлементВыгрузки);
			КонецЦикла;
			
			Результат.Вставить(ВыгружаемыйДокумент, МассивВыгрузки);
			
		Иначе
			Результат.Вставить(ВыгружаемыйДокумент, Неопределено);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

//////////////////////////////////////////////////////////////////////////
// РАБОТА СО СЧЕТАМИ-ФАКТУРАМИ

Функция СоздатьСчетФактуруВыданныйНаОсновании(Основание) Экспорт
	
	Возврат Документы.СчетФактураВыданный.СоздатьДокументНаОсновании(Основание);
	
КонецФункции

Функция СоздатьСчетФактуруПолученныйНаОсновании(Основание, НомерСчетаФактурыПолученного, ДатаСчетаФактурыПолученного, Продавец = Неопределено) Экспорт
	
	Возврат Документы.СчетФактураПолученный.СоздатьДокументНаОсновании(Основание, НомерСчетаФактурыПолученного, ДатаСчетаФактурыПолученного, Продавец);
	
КонецФункции

Функция СоздатьСчетФактуруНаОснованииИсправления(Основание, НомерИсправления, ДатаИсправления) Экспорт

	Возврат Документы.СчетФактураПолученный.СоздатьДокументНаОснованииИсправления(Основание, НомерИсправления, ДатаИсправления);

КонецФункции // СоздатьСчетФактуруНаОснованииИсправления()

// Функция производит поиск счета-фактуры полученного по реквизитам
// Параметры:
//  РеквизитыСчетаФактуры - структура с реквизитами счета-фактуры полученного,
//                          структура должна обязательно содержать поля Организация, Контрагент, НомерСчетаФактуры, ДатаСчетаФактуры
//
// Возвращаемое значение:
//  Если нашли, то возвращаем ссылку, не нашли - Неопределено
//
Функция НайтиСчетФактуруПолученный(РеквизитыСчетаФактуры) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Организация", РеквизитыСчетаФактуры.Организация);
	Запрос.Параметры.Вставить("Контрагент",  РеквизитыСчетаФактуры.Контрагент);
	Запрос.Параметры.Вставить("НомерСчетаФактурыПолученного", РеквизитыСчетаФактуры.НомерСчетаФактурыПолученного);
	Запрос.Параметры.Вставить("ДатаСчетаФактурыПолученного", РеквизитыСчетаФактуры.ДатаСчетаФактурыПолученного);
	
	Продавец = ?(РеквизитыСчетаФактуры.Свойство("Продавец"), РеквизитыСчетаФактуры.Продавец, Справочники.Контрагенты.ПустаяСсылка());
	Запрос.Параметры.Вставить("Продавец", Продавец);
	Запрос.Параметры.Вставить("БланкСтрогойОтчетности", 
		?(РеквизитыСчетаФактуры.Свойство("БланкСтрогойОтчетности"), РеквизитыСчетаФактуры.БланкСтрогойОтчетности, Ложь));
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СчетФактураПолученный.Ссылка
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.ВидСчетаФактуры В (ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.НаПоступление), ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный))
	|	И СчетФактураПолученный.Организация = &Организация
	|	И СчетФактураПолученный.Контрагент = &Контрагент
	|	И СчетФактураПолученный.Продавец = &Продавец
	|	И СчетФактураПолученный.НомерВходящегоДокумента = &НомерСчетаФактурыПолученного
	|	И СчетФактураПолученный.ДатаВходящегоДокумента = &ДатаСчетаФактурыПолученного
	|	И СчетФактураПолученный.БланкСтрогойОтчетности = &БланкСтрогойОтчетности
	|	И НЕ СчетФактураПолученный.ИсправлениеСобственнойОшибки";
	
	Если РеквизитыСчетаФактуры.Свойство("ДоговорКонтрагента") Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	И СчетФактураПолученный.ДоговорКонтрагента = &ДоговорКонтрагента";
		Запрос.Параметры.Вставить("ДоговорКонтрагента", РеквизитыСчетаФактуры.ДоговорКонтрагента);
	КонецЕсли;
	
	Если РеквизитыСчетаФактуры.Свойство("Исправление") 
		И РеквизитыСчетаФактуры.Исправление = Истина Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	И СчетФактураПолученный.Исправление = ИСТИНА
		|	И СчетФактураПолученный.НомерИсправления = &НомерИсправления
		|	И СчетФактураПолученный.ДатаИсправления = &ДатаИсправления";
		Запрос.Параметры.Вставить("Исправление", Истина);
		Запрос.Параметры.Вставить("НомерИсправления", РеквизитыСчетаФактуры.НомерИсправления);
		Запрос.Параметры.Вставить("ДатаИсправления", РеквизитыСчетаФактуры.ДатаИсправления);
	Иначе
		ТекстЗапроса = ТекстЗапроса + "
		|	И СчетФактураПолученный.Исправление = ЛОЖЬ";
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

//////////////////////////////////////////////////////////////////////////
// ПОМОЩНИК ПО УЧЕТУ НДС

// Функция возвращает ИСТИНА, если из отчетов НДС необходимо открывать помощник.
//
// Параметры:
//    Организация - СправочникСсылка.Организации, организация по которой строится отчет
//    Период - Дата налогового периода, за который строится отчет
//
// Возвращаемое значение:
//    Булево
//
Функция ОткрыватьПомощникИзМакета(Организация, Период) Экспорт
	
	ВыполненыРегламентныеОперацииПоНДС = РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.ВсеРегламентныеОперацииНДСВыполнены(Организация, Период);
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Организация, Период);
	
	Возврат ПлательщикНДС И НЕ ВыполненыРегламентныеОперацииПоНДС;
	
КонецФункции

// Функция возвращает макет для помощника по НДС.
//
// Параметры:
//    Организация - СправочникСсылка.Организации, организация по которой строится отчет
//    Период - Дата налогового периода, за который строится отчет
//
// Возвращаемое значение:
//    Табличный документ с макетом
//
Функция ПолучитьМакетОткрытияПомощника(Организация, Период) Экспорт
	
	Возврат Обработки.ПомощникПоУчетуНДС.ПолучитьМакетОткрытияПомощника(Организация, Период);
	
КонецФункции

Функция ПолучитьСписокТиповПоВидуСчетаФактурыПолученного(ВидСчетаФактурыСписка, ЭтоИсправление = Ложь, НаАвансДляКомитентаНаЗакупку = Ложь) Экспорт
	
	СписокТипов = Новый Массив;
	
	Если ВидСчетаФактурыСписка = Перечисления.ВидСчетаФактурыПолученного.НаПоступление Тогда 
		
		Если ЭтоИсправление Тогда
			СписокТипов.Добавить(Тип("ДокументСсылка.КорректировкаПоступления"));
		Иначе
			СписокТипов.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"));
			СписокТипов.Добавить(Тип("ДокументСсылка.ВыкупПредметовЛизинга"));
			СписокТипов.Добавить(Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом"));
			СписокТипов.Добавить(Тип("ДокументСсылка.ОтчетКомиссионераОПродажах"));
			СписокТипов.Добавить(Тип("ДокументСсылка.ОтчетКомитентуОПродажах"));
			СписокТипов.Добавить(Тип("ДокументСсылка.ПоступлениеИзПереработки"));
			СписокТипов.Добавить(Тип("ДокументСсылка.ПоступлениеДопРасходов"));
			СписокТипов.Добавить(Тип("ДокументСсылка.ПоступлениеНМА"));
			СписокТипов.Добавить(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
			СписокТипов.Добавить(Тип("ДокументСсылка.ОтражениеНДСКВычету"));
		КонецЕсли;
  
	ИначеЕсли ВидСчетаФактурыСписка = Перечисления.ВидСчетаФактурыПолученного.НаАванс 
		ИЛИ ВидСчетаФактурыСписка = Перечисления.ВидСчетаФактурыПолученного.НаАвансКомитента Тогда 
		
		СписокТипов.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
		СписокТипов.Добавить(Тип("ДокументСсылка.СписаниеСРасчетногоСчета"));
		СписокТипов.Добавить(Тип("ДокументСсылка.КорректировкаДолга"));
		СписокТипов.Добавить(Тип("ДокументСсылка.АвансовыйОтчет"));
		СписокТипов.Добавить(Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом"));
		СписокТипов.Добавить(Тип("ДокументСсылка.ОтчетКомитентуОПродажах"));
		СписокТипов.Добавить(Тип("ДокументСсылка.КорректировкаПоступления"));
		
	ИначеЕсли ВидСчетаФактурыСписка = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда 
		
		СписокТипов.Добавить(Тип("ДокументСсылка.КорректировкаПоступления"));
				
	КонецЕсли;
	
	Возврат СписокТипов;
	
КонецФункции

// Функция находит и возвращает последнее испраление счета-фактуры выданного
// либо исходный документ, если счет-фактура не исправлялся
Функция ПолучитьПоследнееИсправлениеСчетаФактурыВыданного(СчетФактураВыданный) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсправляемыйДокумент", СчетФактураВыданный);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СчетФактураВыданный.Ссылка КАК СчетФактура
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.ИсправляемыйСчетФактура = &ИсправляемыйДокумент
	|	И СчетФактураВыданный.ПометкаУдаления = ЛОЖЬ
	|	И СчетФактураВыданный.Исправление = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураВыданный.Дата УБЫВ";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат СчетФактураВыданный;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.СчетФактура;
	КонецЕсли;
		
КонецФункции

// Функция находит и возвращает последнее испраление счета-фактуры полученного
// либо исходный документ, если счет-фактура не исправлялся
Функция ПолучитьПоследнееИсправлениеСчетаФактурыПолученного(СчетФактураПолученный) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсправляемыйДокумент", СчетФактураПолученный);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СчетФактураПолученный.Ссылка КАК СчетФактура
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.ИсправляемыйСчетФактура = &ИсправляемыйДокумент
	|	И СчетФактураПолученный.ПометкаУдаления = ЛОЖЬ
	|	И СчетФактураПолученный.Исправление = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураПолученный.Дата УБЫВ";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат СчетФактураПолученный;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.СчетФактура;
	КонецЕсли;
		
КонецФункции

//////////////////////////////////////////////////////////////////////////
// РАБОТА С КНИГАМИ ПОКУПОК И ПРОДАЖ

Процедура ПодготовитьПараметрыКнигиПокупок(ПараметрыОтчета, АдресХранилища) Экспорт
	
	Если ИспользуетсяПостановлениеНДС1137(ПараметрыОтчета.КонецПериода) Тогда  
		Отчеты.КнигаПокупок.СформироватьОтчет(ПараметрыОтчета, АдресХранилища);	
	Иначе
		УчетНДСБП.СформироватьОтчетКнигаПокупок914(ПараметрыОтчета, АдресХранилища);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьПараметрыКнигиПродаж(ПараметрыОтчета, АдресХранилища) Экспорт
	
	Если ИспользуетсяПостановлениеНДС1137(ПараметрыОтчета.КонецПериода) Тогда  
		Отчеты.КнигаПродаж.СформироватьОтчет(ПараметрыОтчета, АдресХранилища);
	Иначе
		УчетНДСБП.СформироватьОтчетКнигаПродаж914(ПараметрыОтчета, АдресХранилища);
	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////
// РАБОТА С ЖУРНАЛОМ УЧЕТА СЧЕТОВ-ФАКТУР

Процедура ПодготовитьПараметрыЖурналаУчетаСчетовФактур (ПараметрыОтчета, АдресХранилища) Экспорт
	
	Если ИспользуетсяПостановлениеНДС1137(ПараметрыОтчета.НалоговыйПериод) Тогда  
		Отчеты.ЖурналУчетаСчетовФактур.СформироватьОтчет(ПараметрыОтчета, АдресХранилища);
	Иначе
		УчетНДСБП.СформироватьОтчетЖурналУчетаСчетовФактур914(ПараметрыОтчета, АдресХранилища);
	КонецЕсли;
	
КонецПроцедуры

// ПОСТУПЛЕНИЕ ТОВАРОВ И УСЛУГ

Процедура СформироватьДвиженияОприходованиеТоваров(ТаблицаТовары, Реквизиты, Движения, Отказ) Экспорт
	
	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Реквизиты.Организация, Реквизиты.Период);
	
	Если РаздельныйУчетНДСНаСчете19 Тогда
		
		УчетНДСРаздельный.СформироватьДвиженияНДСРаздельныйУчетОприходованиеТоваров(ТаблицаТовары, Реквизиты, Движения, Отказ);
		
	Иначе
		
		УчетНДСБП.СформироватьДвиженияНДСПоПриобретеннымЦенностямОприходованиеТоваров(ТаблицаТовары, Реквизиты, Движения, Отказ);
		
	КонецЕсли;

	
КонецПроцедуры

Процедура СформироватьДвиженияНДСПоПриобретеннымЦенностямПоступлениеИзНТТ(Товары, Реквизиты, Движения, Отказ) Экспорт
	
	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Реквизиты.Организация, Реквизиты.Период);	
	
	Если РаздельныйУчетНДСНаСчете19 Тогда
		
		УчетНДСРаздельный.СформироватьДвиженияНДСРаздельныйУчетПоступлениеИзНТТ(Товары, Реквизиты, Движения, Отказ);

	Иначе
	
		УчетНДСБП.СформироватьДвиженияНДСПоПриобретеннымЦенностямПоступлениеИзНТТ(Товары, Реквизиты, Движения, Отказ);

	КонецЕсли;
	
	
КонецПроцедуры

Процедура СформироватьДвиженияНДСПоПриобретеннымЦенностямПоступлениеНаДругойСклад(СписанныеПартииНДС, СписанныеТоварыБухУчет, Реквизиты, Движения, Отказ) Экспорт

	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Реквизиты.Организация, Реквизиты.Период);
	
	Если НЕ РаздельныйУчетНДСНаСчете19 Тогда
		
		УчетНДСБП.СформироватьДвиженияНДСПоПриобретеннымЦенностямПоступлениеНаДругойСклад(СписанныеПартииНДС, СписанныеТоварыБухУчет, Реквизиты, Движения, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияКомплектацияТоваров(ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет, Реквизиты, Движения, Отказ) Экспорт
	
	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Реквизиты.Организация, Реквизиты.Период);
	
	Если НЕ РаздельныйУчетНДСНаСчете19 Тогда
		
		СписанныеПартииНДС = УчетНДСБП.ПолучитьТаблицуСписанныеПартииНДС(
			ТаблицаТовары, ТаблицаСписанныеТоварыБухУчет, Реквизиты, Отказ);
		УчетНДСБП.СформироватьДвиженияВыбытиеТоваров(
			СписанныеПартииНДС, ТаблицаСписанныеТоварыБухУчет, Реквизиты, Движения, Отказ);
		УчетНДСБП.СформироватьДвиженияНДСПоПриобретеннымЦенностямПоступлениеКомплекта(
			СписанныеПартииНДС, Реквизиты, Движения, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияРазукомплектацияТоваров(ТаблицаКомплектующие, ТаблицаКомплектующиеБухУчет, ТаблицаСписанныеТоварыБухУчет, Реквизиты, Движения, Отказ) Экспорт
	
	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Реквизиты.Организация, Реквизиты.Период);
	
	Если НЕ РаздельныйУчетНДСНаСчете19 Тогда
		
		ТаблицаКомплекта = ТаблицаКомплектующие.СкопироватьКолонки();
		НоваяСтрока = ТаблицаКомплекта.Добавить();
		НоваяСтрока.ИмяСписка    = "Комплектующие";
		НоваяСтрока.Номенклатура = Реквизиты.Комплект;
		НоваяСтрока.Количество   = Реквизиты.КоличествоКомплектов;
		НоваяСтрока.СчетУчета    = Реквизиты.СчетУчетаКомплектов;
		НоваяСтрока.НомерСтрокиДокумента = 1;
		
		СписанныеПартииНДС = УчетНДСБП.ПолучитьТаблицуСписанныеПартииНДС(
			ТаблицаКомплекта, ТаблицаКомплектующиеБухУчет, Реквизиты, Отказ);
			
		СписанныеПартииНДС.Свернуть("ВидЦенности, ДатаСобытия, Номенклатура, Организация, Партия, Период, СтавкаНДС, 
			| СтавкаНДСДокумента, СчетУчета, СчетУчетаНДС, СчетФактура, НДСБылВключенВСтоимость, НДСВключенВСтоимость, 
			| ИмяСписка, НомерСтрокиДокумента, Склад, БлокироватьДоПодтвержденияСтавки0", 
			"Количество, НДС, Стоимость, СтоимостьСписанияНаРасходы, НДССписанияНаРасходы, 
			|СтрокаКУменьшениюВычетаПриВключенииВСтоимость, СтрокаКВосстановлениюПриВключенииВСтоимость");
			
		УчетНДСБП.СформироватьДвиженияВыбытиеТоваров(
			СписанныеПартииНДС, ТаблицаСписанныеТоварыБухУчет, Реквизиты, Движения, Отказ);
		УчетНДСБП.СформироватьДвиженияНДСПоПриобретеннымЦенностямПоступлениеКомплектующих(
			ТаблицаКомплектующие, СписанныеПартииНДС, Реквизиты, Движения, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

// ВОЗВРАТ ТОВАРОВ ОТ ПОКУПАТЕЛЯ

Процедура СформироватьДвиженияВозвратТоваровОтПокупателя(ТаблицаВозвращаемыеТовары, Реквизиты, Движения, Отказ) Экспорт
	
	УчетНДСРаздельный.СформироватьДвиженияВозвратТоваровОтПокупателя(ТаблицаВозвращаемыеТовары, Реквизиты, Движения, Отказ);	
	
КонецПроцедуры

// ВОЗВРАТ ТОВАРОВ КОМИССИОНЕРУ

Процедура СформироватьДвиженияВозвратТоваровКомиссионеру(ТаблицаВозвращаемыеТовары, Реквизиты, Движения, Отказ) Экспорт
	
	УчетНДСРаздельный.СформироватьДвиженияВозвратТоваровКомиссионеру(ТаблицаВозвращаемыеТовары, Реквизиты, Движения, Отказ);	
	
КонецПроцедуры


// РАСПРЕДЕЛЕНИЕ НДС

Процедура СформироватьДвиженияНДСПоПриобретеннымЦенностямПоступлениеОтгруженныхТоваров(СписанныеПартииНДС, СписанныеТоварыБухУчет, Реквизиты, Движения, Отказ) Экспорт

	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Реквизиты.Организация, Реквизиты.Период);
	
	Если НЕ РаздельныйУчетНДСНаСчете19 Тогда
		
		УчетНДСБП.СформироватьДвиженияНДСПоПриобретеннымЦенностямПоступлениеОтгруженныхТоваров(СписанныеПартииНДС, СписанныеТоварыБухУчет, Движения, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияНДСКосвенныеРасходыСписаниеТоваровНаРасходы(СписанныеПартииНДС, СписанныеТоварыБухУчет, Реквизиты, Движения, Отказ) Экспорт
	
	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Реквизиты.Организация, Реквизиты.Период);
	
	Если НЕ РаздельныйУчетНДСНаСчете19 Тогда
	
		УчетНДСБП.СформироватьДвиженияНДСКосвенныеРасходыСписаниеТоваровНаРасходы(СписанныеПартииНДС, СписанныеТоварыБухУчет, Реквизиты, Движения, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияНДСКосвенныеРасходыПередачаМатериаловВЭксплуатацию(СписанныеПартииНДС, ТаблицаМатериалы, Реквизиты, Движения, Отказ) Экспорт
	
	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Реквизиты.Организация, Реквизиты.Период);
	
	Если НЕ РаздельныйУчетНДСНаСчете19 Тогда
		
		ТаблицаОтражениеРасходов = УчетНДСБП.ПодготовитьТаблицуОтражениеРасходовПередачаМатериаловВЭксплуатацию(ТаблицаМатериалы);
		УчетНДСБП.СформироватьДвиженияНДСКосвенныеРасходыПередачаМатериаловВЭксплуатацию(
			СписанныеПартииНДС, ТаблицаОтражениеРасходов, Реквизиты, Движения, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

//	ДВИЖЕНИЯ РЕГИСТРА "НДС РАЗДЕЛЬНЫЙ УЧЕТ"

Процедура СформироватьПроводкиВычетНДСПоТоварамРеализованнымПоСтавке0(ДанныеДвижений, Движения, Отказ) Экспорт
	
	УчетНДСРаздельный.СформироватьПроводкиВычетНДСПоТоварамРеализованнымПоСтавке0(ДанныеДвижений, Движения, Отказ);
	
КонецПроцедуры

// Процедура обрабатывает записи учетоной политики 
// Для элементов регистра сведений "Учетная политика организации", у которых ресурс "СложныйУчетНДС" имеет значение "Истина",
// а ресурс "РаздельныйУчетНДСДо2014Года" имеет значение "Ложь" ресурс "РаздельныйУчетНДСДо2014Года" устанавливается в значение "Истина"
Процедура ОбработатьУчетнуюПолитикуРаздельныйУчетНДСДо2014Года() Экспорт

	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиУчетаНДС.СложныйУчетНДС
	|ИЗ
	|	РегистрСведений.НастройкиУчетаНДС КАК НастройкиУчетаНДС
	|ГДЕ
	|	НастройкиУчетаНДС.СложныйУчетНДС
	|	И НЕ НастройкиУчетаНДС.РаздельныйУчетНДСДо2014Года";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		НаборЗаписей = РегистрыСведений.НастройкиУчетаНДС.СоздатьНаборЗаписей();
		НаборЗаписей.Прочитать();
		
		Для каждого СтрокаЗаписи Из НаборЗаписей Цикл
		
			Если СтрокаЗаписи.СложныйУчетНДС И НЕ СтрокаЗаписи.РаздельныйУчетНДСДо2014Года Тогда
				СтрокаЗаписи.РаздельныйУчетНДСДо2014Года = Истина;
			КонецЕсли; 
		
		КонецЦикла; 
		
		НаборЗаписей.Записать(Истина);
		
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьДвиженияНДСПоПриобретеннымЦенностямВвозТоваровИзТаможенногоСоюза(Товары, Реквизиты, Движения, Отказ) Экспорт

	УчетНДСБП.СформироватьДвиженияНДСПоПриобретеннымЦенностямВвозТоваровИзТаможенногоСоюза(Товары, Реквизиты, Движения, Отказ);

КонецПроцедуры

// Определяет реквизиты счета-фактуры по основаниям, подобранным в него
//
//
// Параметры:
//
// СчетФактура            - ДокументСсылка.СчетФактураПолученный, ДокументСсылка.СчетФактураВыданный 
//                          либо одноименные объекты
// Возвращаемое значение: - Результат - структура реквизитов счета-фактуры
//
//
Функция ПараметрыСчетаФактуры(СчетФактура) Экспорт

	Результат = Новый Структура(
		"Организация, Контрагент, КППКонтрагента, КПППродавца, Продавец,
		|ДоговорКонтрагента, СчетФактураБезНДС, НомерСчетаФактурыПродавца,
		|СуммаДокумента, СуммаДокументаКомиссия, ВалютаДокумента, СуммаНДСДокумента, СуммаНДСДокументаКомиссия,
		|СуммаУвеличение, СуммаУвеличениеКомиссия, СуммаУменьшение, СуммаУменьшениеКомиссия, СуммаНДСУвеличение, 
		|СуммаНДСУвеличениеКомиссия, СуммаНДСУменьшение, СуммаНДСУменьшениеКомиссия, РеквизитыОснований, ИдентификаторГосКонтракта");
	
	Результат.СуммаДокумента     = 0;
	Результат.СуммаНДСДокумента  = 0;
	Результат.СуммаУвеличение    = 0;
	Результат.СуммаНДСУвеличение = 0;
	Результат.СуммаУменьшение    = 0;
	Результат.СуммаНДСУменьшение = 0;
	
	Результат.СуммаДокументаКомиссия     = 0;
	Результат.СуммаНДСДокументаКомиссия  = 0;
	Результат.СуммаУвеличениеКомиссия    = 0;
	Результат.СуммаНДСУвеличениеКомиссия = 0;
	Результат.СуммаУменьшениеКомиссия    = 0;
	Результат.СуммаНДСУменьшениеКомиссия = 0;
	Результат.СчетФактураБезНДС          = Ложь;
	
	РеквизитыОснований = Новый ТаблицаЗначений;
	РеквизитыОснований.Колонки.Добавить("ДокументОснование");
	РеквизитыОснований.Колонки.Добавить("НомерИсходногоДокумента",            ОбщегоНазначения.ОписаниеТипаСтрока(50));
	РеквизитыОснований.Колонки.Добавить("ДатаИсходногоДокумента",             ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	РеквизитыОснований.Колонки.Добавить("НомерИсправленияИсходногоДокумента", ОбщегоНазначения.ОписаниеТипаЧисло(10, , ДопустимыйЗнак.Неотрицательный));
	РеквизитыОснований.Колонки.Добавить("ДатаИсправленияИсходногоДокумента",  ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	РеквизитыОснований.Колонки.Добавить("СуммаУвеличение",                    ОбщегоНазначения.ОписаниеТипаЧисло(14, 2));
	РеквизитыОснований.Колонки.Добавить("СуммаУменьшение",                    ОбщегоНазначения.ОписаниеТипаЧисло(14, 2));
	РеквизитыОснований.Колонки.Добавить("СуммаНДСУвеличение",                 ОбщегоНазначения.ОписаниеТипаЧисло(14, 2));
	РеквизитыОснований.Колонки.Добавить("СуммаНДСУменьшение",                 ОбщегоНазначения.ОписаниеТипаЧисло(14, 2));
	РеквизитыОснований.Колонки.Добавить("УчитыватьИсправлениеИсходногоДокумента", Новый ОписаниеТипов("Булево"));
	
	Результат.РеквизитыОснований = РеквизитыОснований;
	
	Если ТипЗнч(СчетФактура)= Тип("ДокументСсылка.СчетФактураПолученный")
		ИЛИ ТипЗнч(СчетФактура)= Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		Ссылка = СчетФактура;
	Иначе
		Ссылка = СчетФактура.Ссылка;
	КонецЕсли;
	
	ЭтоПолученныйСФ = Ложь;
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетФактураПолученный") тогда
		ЭтоПолученныйСФ = Истина;
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный") 
		И (СчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
		ИЛИ СчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента
		ИЛИ СчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу) Тогда
		// Реквизиты заново не определяются, получаются из счета-фактуры
		Результат.Вставить("Организация",        СчетФактура.Организация);
		Результат.Вставить("Контрагент",         СчетФактура.Контрагент);
		Результат.Вставить("ДоговорКонтрагента", СчетФактура.ДоговорКонтрагента);
		Результат.Вставить("ВалютаДокумента",    СчетФактура.ВалютаДокумента);
		Результат.Вставить("СуммаДокумента",     СчетФактура.СуммаДокумента);
		Возврат Результат;
	КонецЕсли;
	
	МассивДокументовОснований = СчетФактура.ДокументыОснования.ВыгрузитьКолонку("ДокументОснование");
	ДокументыОснования = ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивДокументовОснований, Истина);
	
	ТипыОснований = Новый Соответствие();
	Для каждого Основание Из ДокументыОснования Цикл
		Если НЕ ЗначениеЗаполнено(Основание) Тогда
			Продолжить;
		КонецЕсли;
		МассивДокументов = ТипыОснований[ТипЗнч(Основание)];
		Если МассивДокументов = Неопределено Тогда
			МассивДокументов = Новый Массив();
			ТипыОснований.Вставить(ТипЗнч(Основание),МассивДокументов);
		КонецЕсли;
		МассивДокументов.Добавить(Основание);
	КонецЦикла; 
	
	Если ТипыОснований.Количество() = 0 Тогда
		// Параметры определить нельзя
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", 
		ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	Запрос.УстановитьПараметр("ДокументыОснования", ДокументыОснования);
	
	Для каждого ТипОснования Из ТипыОснований Цикл
		
		ТипДокументаОснования = ТипОснования.Ключ;
		ТекстЗапроса = "";
		
		Если ТипДокументаОснования = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
			
			ТекстЗапроса = ТекстЗапросаАвансовыйОтчет();

		ИначеЕсли ТипДокументаОснования = Тип("ДокументСсылка.ОказаниеУслуг") Тогда
			
			ТекстЗапроса = ТекстЗапросаОказаниеУслуг();

		ИначеЕсли ТипДокументаОснования = Тип("ДокументСсылка.ПодтверждениеНулевойСтавкиНДС") Тогда
			
			ТекстЗапроса = ТекстЗапросаПодтверждениеНулевойСтавкиНДС();
			
		ИначеЕсли ТипДокументаОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
			И НЕ ЭтоПолученныйСФ Тогда
			
			ТекстЗапроса = ТекстЗапросаВыданныеСчетаФактурыПокупателямПоОтчетуКомиссионера();

		ИначеЕсли ТипДокументаОснования = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")
			И НЕ ЭтоПолученныйСФ 
			И ЗначениеЗаполнено(Ссылка.Продавец) Тогда
			
			ТекстЗапроса = ТекстЗапросаВыданныеСчетаФактурыПеревыставленныеКомитенту();

		ИначеЕсли ТипДокументаОснования = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
			
			Запрос.УстановитьПараметр("КорректировочныйСчетФактура", 
				СчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный);

			ТекстЗапроса = ТекстЗапросаКорректировкаПоступления();
			
			Если СчетФактура.Исправление ИЛИ СчетФактура.ИсправлениеСобственнойОшибки Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДоИзменения", "ДоКорректировки");
			КонецЕсли;
				
		ИначеЕсли ТипДокументаОснования = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
				
			Запрос.УстановитьПараметр("КорректировочныйСчетФактура", 
				СчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный);
				
			КорректировкаСчетаФактурыДляКомитента = Ложь;
			РеквизитыСчетаФактуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "ДоговорКонтрагента.ВидДоговора, ДокументОснование");
			Если РеквизитыСчетаФактуры.ДоговорКонтрагентаВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку Тогда 
				ИсходныйДокументРеализации = ПолучитьИсправляемыйДокументРеализации(РеквизитыСчетаФактуры.ДокументОснование, Истина);
				Если ТипЗнч(ИсходныйДокументРеализации) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда 
					КорректировкаСчетаФактурыДляКомитента = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Запрос.УстановитьПараметр("КорректировкаСчетаФактурыДляКомитента", КорректировкаСчетаФактурыДляКомитента);
			
			ТекстЗапроса = ТекстЗапросаКорректировкаРеализации();
			
			Если СчетФактура.Исправление Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДоИзменения", "ДоКорректировки");
			КонецЕсли;
			
		ИначеЕсли ТипДокументаОснования = Тип("ДокументСсылка.НачислениеНДСпоСМРхозспособом") тогда 
			
			ТекстЗапроса = ТекстЗапросаНачислениеНДСпоСМР();
			
		ИначеЕсли ТипДокументаОснования = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") Тогда
			
			ТекстЗапроса = ТекстЗапросаРеализацияОтгруженныхТоваров();
			
		ИначеЕсли ТипДокументаОснования = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
			
			ТекстЗапроса = ТекстЗапросаПоступлениеДопРасходов();

		ИначеЕсли ЭтоПолученныйСФ 
			И Ссылка.ВозвратЧерезКомиссионера Тогда 
			
			ТекстЗапроса = ТекстЗапросаВозвратТоваровЧерезКомиссионера();
			
		ИначеЕсли ЭтоПолученныйСФ 
			И ТипДокументаОснования = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") Тогда
			
			Запрос.УстановитьПараметр("Дата",                       СчетФактура.Дата);
			Запрос.УстановитьПараметр("Организация",                СчетФактура.Организация);
			Запрос.УстановитьПараметр("Контрагент",                 СчетФактура.Контрагент);
			Запрос.УстановитьПараметр("ВалютаДокумента",            СчетФактура.ВалютаДокумента);
			Запрос.УстановитьПараметр("ОснованияДокументыРасчетов", ТипОснования.Значение);
			
			ТекстЗапроса = ТекстЗапросаДокументРасчетовСКонтрагентом();
			
		Иначе
			
			ТекстЗапроса = ТекстЗапросаНаОснованииМетаданных(
				ТипОснования.Значение, ЭтоПолученныйСФ, Запрос.Параметры, ТипДокументаОснования);
		
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
			Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
				Запрос.Текст = Запрос.Текст + Символы.ПС + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС;
			КонецЕсли;
			Запрос.Текст = Запрос.Текст + ТекстЗапроса;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПустаяСтрока(Запрос.Текст) Тогда
		Возврат Результат;
	Иначе
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Возврат Результат;
		КонецЕсли;
		
		ПерваяСтрока = Истина;
		РазныеОрганизации = Ложь;
		РазныеКонтрагенты = Ложь;
		РазныеДоговоры = Ложь;
		РазныеВалюты = Ложь;
		РазныеПродавцы = Ложь;
		ЕстьКолонкаПродавец = РезультатЗапроса.Колонки.Найти("Продавец") <> Неопределено;
		Корректировка = Ложь;
		ЭтоКорректировочный = Ложь;
		
		Если ТипДокументаОснования = Тип("ДокументСсылка.КорректировкаРеализации") 
			ИЛИ ТипДокументаОснования = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
			
			Корректировка = Истина;
			
		КонецЕсли;
		
		Если Корректировка Тогда
			
			Если ЭтоПолученныйСФ Тогда
				ЭтоКорректировочный = СчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный;
			Иначе
				ЭтоКорректировочный = СчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;
			КонецЕсли;

			ВыборкаОбщиеИтоги = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			ВыборкаОбщиеИтоги.Следующий();
			
			Результат.СуммаУвеличение    = ВыборкаОбщиеИтоги.СуммаУвеличение;
			Результат.СуммаУменьшение    = ВыборкаОбщиеИтоги.СуммаУменьшение;
			Результат.СуммаНДСУвеличение = ВыборкаОбщиеИтоги.СуммаНДСУвеличение;
			Результат.СуммаНДСУменьшение = ВыборкаОбщиеИтоги.СуммаНДСУменьшение;
			Результат.СуммаДокумента     = ВыборкаОбщиеИтоги.СуммаДокумента;
			Результат.СуммаНДСДокумента  = ВыборкаОбщиеИтоги.СуммаНДСДокумента;
			
			Результат.СуммаУвеличениеКомиссия    = ВыборкаОбщиеИтоги.СуммаУвеличениеКомиссия;
			Результат.СуммаУменьшениеКомиссия    = ВыборкаОбщиеИтоги.СуммаУменьшениеКомиссия;
			Результат.СуммаНДСУвеличениеКомиссия = ВыборкаОбщиеИтоги.СуммаНДСУвеличениеКомиссия;
			Результат.СуммаНДСУменьшениеКомиссия = ВыборкаОбщиеИтоги.СуммаНДСУменьшениеКомиссия;
			Результат.СуммаДокументаКомиссия     = ВыборкаОбщиеИтоги.СуммаДокументаКомиссия;
			Результат.СуммаНДСДокументаКомиссия  = ВыборкаОбщиеИтоги.СуммаНДСДокументаКомиссия;
			
			ВыборкаДокументы = ВыборкаОбщиеИтоги.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаДокументы.Следующий() Цикл
				
				Если ПерваяСтрока Тогда
					СтрокаРеквизитов = "Организация,Контрагент,ВалютаДокумента,ДоговорКонтрагента, ИдентификаторГосКонтракта" 
						+ ?(ЕстьКолонкаПродавец, ",Продавец", "");
					ЗаполнитьЗначенияСвойств(Результат, ВыборкаДокументы, СтрокаРеквизитов);
					Результат.СчетФактураБезНДС = ВыборкаДокументы.ЕстьНДС = 0;
					ПерваяСтрока = Ложь;
					Если НЕ ЭтоПолученныйСФ Тогда
						Результат.Продавец = УчетНДСБП.ПолучитьПродавцаИзСчетаФактурыОснованияКорректировкиРеализации(ДокументыОснования);
					КонецЕсли;
				КонецЕсли;
				
				РазныеОрганизации = РазныеОрганизации ИЛИ Результат.Организация <> ВыборкаДокументы.Организация;
				РазныеКонтрагенты = РазныеКонтрагенты ИЛИ Результат.Контрагент <> ВыборкаДокументы.Контрагент;
				РазныеВалюты      = РазныеВалюты ИЛИ Результат.ВалютаДокумента <> ВыборкаДокументы.ВалютаДокумента;
				
				РазныеДоговоры = ?(ЭтоПолученныйСФ, Ложь, РазныеДоговоры ИЛИ Результат.ДоговорКонтрагента <> ВыборкаДокументы.ДоговорКонтрагента);
				РазныеПродавцы = ?(ЕстьКолонкаПродавец, РазныеПродавцы ИЛИ Результат.Продавец <> ВыборкаДокументы.Продавец, Ложь);
				
				Если Результат.СчетФактураБезНДС Тогда
					Результат.СчетФактураБезНДС = ВыборкаДокументы.ЕстьНДС = 0;
				КонецЕсли;
				
				Если ЭтоКорректировочный Тогда
					
					СтрокаСРеквизитами = РеквизитыОснований.Добавить();
					
					СтрокаСРеквизитами.ДокументОснование  = ВыборкаДокументы.Документ;
					СтрокаСРеквизитами.СуммаУвеличение    = ВыборкаДокументы.СуммаУвеличение;
					СтрокаСРеквизитами.СуммаУменьшение    = ВыборкаДокументы.СуммаУменьшение;
					СтрокаСРеквизитами.СуммаНДСУвеличение = ВыборкаДокументы.СуммаНДСУвеличение;
					СтрокаСРеквизитами.СуммаНДСУменьшение = ВыборкаДокументы.СуммаНДСУменьшение;
					
					Если ЭтоПолученныйСФ Тогда
						
						РеквизитыИсходногоСчетаФактуры = Документы.СчетФактураПолученный.ПолучитьРеквизитыИсходногоСчетаФактурыДляКорректировки(
							ВыборкаДокументы.Документ, СчетФактура);
						
						Если РеквизитыИсходногоСчетаФактуры <> Неопределено Тогда 
							
							СтрокаСРеквизитами.НомерИсходногоДокумента = РеквизитыИсходногоСчетаФактуры.НомерСчетаФактуры;
							СтрокаСРеквизитами.ДатаИсходногоДокумента  = РеквизитыИсходногоСчетаФактуры.ДатаСчетаФактуры;
							СтрокаСРеквизитами.УчитыватьИсправлениеИсходногоДокумента = РеквизитыИсходногоСчетаФактуры.Исправление;
							СтрокаСРеквизитами.НомерИсправленияИсходногоДокумента     = РеквизитыИсходногоСчетаФактуры.НомерИсправления;
							СтрокаСРеквизитами.ДатаИсправленияИсходногоДокумента      = РеквизитыИсходногоСчетаФактуры.ДатаИсправления;
						
						КонецЕсли;
					
					Иначе
					
						РеквизитыИсходногоСчетаФактуры = Документы.СчетФактураВыданный.ПолучитьРеквизитыИсходногоСчетаФактурыДляКорректировки(
							ВыборкаДокументы.Документ, СчетФактура);
						
						Если РеквизитыИсходногоСчетаФактуры <> Неопределено Тогда 
							
							СтрокаСРеквизитами.НомерИсходногоДокумента = РеквизитыИсходногоСчетаФактуры.НомерСчетаФактуры;
							СтрокаСРеквизитами.ДатаИсходногоДокумента  = РеквизитыИсходногоСчетаФактуры.ДатаСчетаФактуры;
							СтрокаСРеквизитами.УчитыватьИсправлениеИсходногоДокумента = РеквизитыИсходногоСчетаФактуры.Исправление;
							СтрокаСРеквизитами.НомерИсправленияИсходногоДокумента     = РеквизитыИсходногоСчетаФактуры.НомерИсправления;
							СтрокаСРеквизитами.ДатаИсправленияИсходногоДокумента      = РеквизитыИсходногоСчетаФактуры.ДатаИсправления;
						
						КонецЕсли;
					
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Если ПерваяСтрока Тогда
					ПерваяСтрока = Ложь;
					ЗаполнитьЗначенияСвойств(Результат, Выборка);
					Результат.СчетФактураБезНДС = Выборка.ЕстьНДС = 0;
					Если ТипЗнч(ДокументыОснования[0]) <> Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
						Результат.КППКонтрагента = УчетНДСБП.ПолучитьКПППодразделенияКонтрагента(ДокументыОснования[0], "Грузоотправитель");
					КонецЕсли;
				Иначе
					РазныеОрганизации = РазныеОрганизации ИЛИ Результат.Организация <> Выборка.Организация;
					РазныеКонтрагенты = РазныеКонтрагенты ИЛИ Результат.Контрагент <> Выборка.Контрагент;
					РазныеВалюты      = РазныеВалюты ИЛИ Результат.ВалютаДокумента <> Выборка.ВалютаДокумента;
					РазныеДоговоры    = ?(ЭтоПолученныйСФ, Ложь, РазныеДоговоры ИЛИ Результат.ДоговорКонтрагента <> Выборка.ДоговорКонтрагента);
					РазныеПродавцы    = ?(ЕстьКолонкаПродавец, РазныеПродавцы ИЛИ Результат.Продавец <> Выборка.Продавец, Ложь);
					
					Результат.СуммаДокумента    = Результат.СуммаДокумента + Выборка.СуммаДокумента;
					Результат.СуммаНДСДокумента = Результат.СуммаНДСДокумента + Выборка.СуммаНДСДокумента;
					
					Результат.СуммаДокументаКомиссия    = Результат.СуммаДокументаКомиссия + Выборка.СуммаДокументаКомиссия;
					Результат.СуммаНДСДокументаКомиссия = Результат.СуммаНДСДокументаКомиссия + Выборка.СуммаНДСДокументаКомиссия;
					
					Если Результат.СчетФактураБезНДС Тогда
						Результат.СчетФактураБезНДС = Выборка.ЕстьНДС = 0;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		Если РазныеОрганизации ИЛИ РазныеКонтрагенты ИЛИ РазныеДоговоры ИЛИ РазныеВалюты ИЛИ РазныеПродавцы Тогда
			
			ТекстСообщения = НСтр("ru='Реквизиты документов, на основании которых зарегистрирован счет-фактура, не совпадают:'")
				+ ?(РазныеОрганизации, Символы.ПС + НСтр("ru=' - не совпадает организация'"), "")
				+ ?(РазныеКонтрагенты, Символы.ПС + НСтр("ru=' - не совпадает контрагент'"), "")
				+ ?(РазныеДоговоры, Символы.ПС + НСтр("ru=' - не совпадает договор'"), "")
				+ ?(РазныеВалюты, Символы.ПС + НСтр("ru=' - не совпадает валюта документа'"), "")
				+ ?(РазныеПродавцы, Символы.ПС + НСтр("ru=' - не совпадает продавец, от имени которого выписан счета-фактура'"), "") 
				+ Символы.ПС 
				+ НСтр("ru='Необходимо изменить параметры документов-оснований или зарегистрировать по документам с расхождениями отдельные счета-фактуры.'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения); 
			
			Если РазныеОрганизации Тогда
				Результат.Организация = Неопределено;
			КонецЕсли;
			Если РазныеКонтрагенты Тогда
				Результат.Контрагент = Неопределено;
			КонецЕсли;
			Если РазныеВалюты Тогда
				Результат.ВалютаДокумента = Неопределено;
			КонецЕсли;
			Если РазныеДоговоры Тогда
				Результат.ДоговорКонтрагента = Неопределено;
			КонецЕсли;
			Если РазныеПродавцы Тогда
				Результат.Продавец = Неопределено;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Функция находит и возвращает исходный счет-фактуру в цепочке исправлений собственных ошибок
Функция ПолучитьИсходныйСчетФактуру(СчетФактура) Экспорт
	
	Если ЗначениеЗаполнено(СчетФактура) Тогда
		РеквизитыСчетаФактуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СчетФактура,
			"ИсправлениеСобственнойОшибки, ИсправляемыйСчетФактура");
		
		Если РеквизитыСчетаФактуры.ИсправлениеСобственнойОшибки Тогда
			Возврат ПолучитьИсходныйСчетФактуру(РеквизитыСчетаФактуры.ИсправляемыйСчетФактура)
		Иначе
			Возврат СчетФактура;
		КонецЕсли;
	Иначе
		Возврат СчетФактура;
	КонецЕсли;
	
КонецФункции

Функция СоздатьАктуализироватьИсправлениеСобственнойОшибки(Параметры) Экспорт
	
	Возврат Документы.СчетФактураПолученный.СоздатьАктуализироватьИсправлениеСобственнойОшибки(Параметры);
	
КонецФункции

// ПЕЧАТЬ

Функция СведенияОПодразделенииОрганизации(ПодразделениеОрганизации) Экспорт
	
	Возврат УчетНДСБП.СведенияОПодразделенииОрганизации(ПодразделениеОрганизации);
	
КонецФункции

// Функция производит поиск счетов-фактур полученных с видом "на поступление" или "корректировочный" 
// по документам-основаниям.
//
// Параметры:
//  СписокДокументовОснований - ДокументСсылка.*, Массив, СписокЗначений - Ссылки на документы, для которых надо найти счета-фактуры.
//  ИсключаемыеСФ		- ДокументСсылка.СчетФактураПолученный, Массив, СписокЗначений - Ссылки на счета-фактуры, исключаемые при поиске.
//  ПометкаУдаления		- Булево - Значение пометки счета-фактуры для отбора при поиске.
//	СтруктураОтбора     - Структура - Дополнительный отбор счетов-фактур.
//
// Возвращаемое значение:
//	Соответствие - Содержит:
//		* Ключ - ДокументСсылка.* - Документ основание
//  	* Значение - ДокументСсылка.СчетФактураПолученный - Найденный счет-фактура для документа-основания.
//
Функция НайтиПодчиненныеСчетаФактурыПолученные(СписокДокументовОснований, ИсключаемыеСФ = Неопределено, ПометкаУдаления = Ложь, СтруктураОтбора = Неопределено) Экспорт
	
	Результат = Новый Соответствие;
	
	Если Не ЗначениеЗаполнено(СписокДокументовОснований) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Не ПравоДоступа("Чтение", Метаданные.Документы.СчетФактураПолученный) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ВидыСчетовФактур = Новый Массив;
	ВидыСчетовФактур.Добавить(Перечисления.ВидСчетаФактурыПолученного.НаПоступление);
	ВидыСчетовФактур.Добавить(Перечисления.ВидСчетаФактурыПолученного.Корректировочный);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидыСчетовФактур",  ВидыСчетовФактур);
	Запрос.УстановитьПараметр("СписокДокументовОснований", СписокДокументовОснований);
	Запрос.УстановитьПараметр("ИсключаемыеСФ",     ИсключаемыеСФ);
	Запрос.УстановитьПараметр("ПометкаУдаления",   ПометкаУдаления);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СчетФактураПолученный.ДокументОснование КАК ДокументОснование,
	|	СчетФактураПолученный.Ссылка КАК СчетФактура
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.ДокументОснование В(&СписокДокументовОснований)
	|	И СчетФактураПолученный.Ссылка.ПометкаУдаления = &ПометкаУдаления
	|	И СчетФактураПолученный.Ссылка.ВидСчетаФактуры В(&ВидыСчетовФактур)
	|	И НЕ СчетФактураПолученный.Ссылка В (&ИсключаемыеСФ)
	|	И &ДопУсловия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СчетФактураПолученный.Ссылка,
	|	СчетФактураПолученный.Ссылка
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.Ссылка В(&СписокДокументовОснований)
	|	И СчетФактураПолученный.ПометкаУдаления = &ПометкаУдаления
	|	И СчетФактураПолученный.ВидСчетаФактуры В(&ВидыСчетовФактур)
	|	И НЕ СчетФактураПолученный.Ссылка В (&ИсключаемыеСФ)
	|	И &ДопУсловия";

	// Отбор одной записи.
	Если ТипЗнч(СписокДокументовОснований) = Тип("Массив") 
		ИЛИ ТипЗнч(СписокДокументовОснований) = Тип("СписокЗначений") Тогда
		ВыбиратьПервые = СписокДокументовОснований.Количество() = 1;
	Иначе
		ВыбиратьПервые = Истина;
	КонецЕсли;
	Если НЕ ВыбиратьПервые Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1", "");
	КонецЕсли;
	
	// Фильтрация исключаемых счетов-фактур.
	Если НЕ ЗначениеЗаполнено(ИсключаемыеСФ) Тогда
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"НЕ СчетФактураПолученный.Ссылка В (&ИсключаемыеСФ)",
			"ИСТИНА");
	КонецЕсли;
	
	// Дополнительные отборы.
	Если ТипЗнч(СтруктураОтбора) = Тип("Структура") И СтруктураОтбора.Количество() > 0 Тогда
		ТекстУсловия = "";
		Для Каждого КлючЗначение Из СтруктураОтбора Цикл
			Если НЕ ПустаяСтрока(ТекстУсловия) Тогда
				ТекстУсловия = ТекстУсловия + "
				| И ";
			КонецЕсли;
			
			Если ТипЗнч(КлючЗначение.Значение) = Тип("СписокЗначений") 
				ИЛИ ТипЗнч(КлючЗначение.Значение) = Тип("Массив") Тогда
				ТекстУсловия = ТекстУсловия + "СчетФактураПолученный.Ссылка." + КлючЗначение.Ключ + " В (&" + КлючЗначение.Ключ + ")";
			Иначе
				ТекстУсловия = ТекстУсловия + "СчетФактураПолученный.Ссылка." + КлючЗначение.Ключ + " = &" + КлючЗначение.Ключ;
			КонецЕсли;
			
			Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
			
		КонецЦикла;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДопУсловия",  ТекстУсловия);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДопУсловия",  "ИСТИНА");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.ДокументОснование, Выборка.СчетФактура);
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// Функция производит поиск счетов-фактур выданных на реализацию или корректировочного с указанными документами-основаниями.
//
// Параметры:
//  СписокДокументовОснований - ДокументСсылка.*, Массив, СписокЗначений - Ссылки на документы, для которых надо найти счета-фактуры.
//  ИсключаемыеСФ		- ДокументСсылка.СчетФактураВыданный, Массив, СписокЗначений - Ссылки на счета-фактуры, исключаемые при поиске.
//  ПометкаУдаления		- Булево - Значение пометки счета-фактуры для отбора при поиске.
//	СтруктураОтбора     - Структура - Дополнительный отбор счетов-фактур.
//
// Возвращаемое значение:
//	Соответствие - Содержит:
//		* Ключ - ДокументСсылка.* - Документ основание
//  	* Значение - ДокументСсылка.СчетФактураВыданный - Найденный счет-фактура для документа-основания.
//
Функция НайтиПодчиненныеСчетаФактурыВыданныеНаРеализацию(СписокДокументовОснований, ИсключаемыеСФ = Неопределено, ПометкаУдаления = Ложь, СтруктураОтбора = Неопределено) Экспорт

	Результат = Новый Соответствие;
	
	Если НЕ ЗначениеЗаполнено(СписокДокументовОснований) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Не ПравоДоступа("Чтение", Метаданные.Документы.СчетФактураВыданный) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ВидыСчетовФактур = Новый Массив;
	ВидыСчетовФактур.Добавить(Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию);
	ВидыСчетовФактур.Добавить(Перечисления.ВидСчетаФактурыВыставленного.Корректировочный);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидыСчетовФактур",  ВидыСчетовФактур);
	Запрос.УстановитьПараметр("СписокДокументовОснований", СписокДокументовОснований);
	Запрос.УстановитьПараметр("ИсключаемыеСФ",     ИсключаемыеСФ);
	Запрос.УстановитьПараметр("ПометкаУдаления",   ПометкаУдаления);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ДокументыОснования.ДокументОснование КАК ДокументОснование,
	|	ДокументыОснования.Ссылка КАК СчетФактура
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК ДокументыОснования
	|ГДЕ
	|	ДокументыОснования.ДокументОснование В (&СписокДокументовОснований)
	|	И ДокументыОснования.Ссылка.ПометкаУдаления = &ПометкаУдаления
	|	И ДокументыОснования.Ссылка.ВидСчетаФактуры В(&ВидыСчетовФактур)
	|	И НЕ ДокументыОснования.Ссылка В (&ИсключаемыеСФ)
	|	И &ДопУсловия";

	// Отбор одной записи.
	Если ТипЗнч(СписокДокументовОснований) = Тип("Массив") 
		ИЛИ ТипЗнч(СписокДокументовОснований) = Тип("СписокЗначений") Тогда
		ВыбиратьПервые = СписокДокументовОснований.Количество() = 1;
	Иначе
		ВыбиратьПервые = Истина;
	КонецЕсли;
	Если НЕ ВыбиратьПервые Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1", "");
	КонецЕсли;

	// Фильтрация исключаемых счетов-фактур.
	Если НЕ ЗначениеЗаполнено(ИсключаемыеСФ) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"НЕ ДокументыОснования.Ссылка В (&ИсключаемыеСФ)",
			"ИСТИНА");
	КонецЕсли;

	// Дополнительные отборы.
	Если ТипЗнч(СтруктураОтбора) = Тип("Структура") И СтруктураОтбора.Количество() > 0 Тогда
		ТекстУсловия = "";
		Для Каждого КлючЗначение Из СтруктураОтбора Цикл
			Если НЕ ПустаяСтрока(ТекстУсловия) Тогда
				ТекстУсловия = ТекстУсловия + "
				| И ";
			КонецЕсли;
			
			Если ТипЗнч(КлючЗначение.Значение) = Тип("СписокЗначений") 
				ИЛИ ТипЗнч(КлючЗначение.Значение) = Тип("Массив") Тогда
				ТекстУсловия = ТекстУсловия + "ДокументыОснования.Ссылка." + КлючЗначение.Ключ + " В (&" + КлючЗначение.Ключ + ")";
			Иначе
				ТекстУсловия = ТекстУсловия + "ДокументыОснования.Ссылка." + КлючЗначение.Ключ + " = &" + КлючЗначение.Ключ;
			КонецЕсли;
			
			Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
			
		КонецЦикла;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДопУсловия",  ТекстУсловия);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДопУсловия",  "ИСТИНА");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.ДокументОснование, Выборка.СчетФактура);
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НовыйВариантыПредставленияСчетаФактуры()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ДатаНомер"    , "");
	Результат.Вставить("НомерДата"    , "");
	Результат.Вставить("Дата"         , "");
	Результат.Вставить("Номер"        , "");
	Результат.Вставить("Представление", "");
	
	Возврат Результат;
	
КонецФункции

// Добавляет в таблицу сумм документа в разрезе ставок НДС данные о проданных подарочных сертификатах
// и о сумме НДС по сертификатам, определенной расчетным методом
//
//  ДокументОбъект      - ссылка документа "Отчет о розничных продажах"
//  ТаблицаСумм - таблица значений, в которую добавляются суммы по сертификатам.
//		обязательно должна содержать колонки:
//			Сумма		- Сумма документа со всеми налогами
//			СтавкаНДС	- ПеречислениеСсылка.СтавкиНДС
//			СуммаНДС	- Сумма НДС по ставке
//
Процедура ДобавитьСуммуСНДСПоПодарочнымСертификатам(ДокументОбъект, ТаблицаСумм)

	ПлательщикНДС     = УчетнаяПолитика.ПлательщикНДС(ДокументОбъект.Организация, ДокументОбъект.Дата);
	СтавкаНДС         = ?(ПлательщикНДС, Перечисления.СтавкиНДС.НДС18, Перечисления.СтавкиНДС.БезНДС);
	ЗначениеСтавкиНДС = ПолучитьСтавкуНДС(СтавкаНДС);
	
	Для каждого СтрокаТЧ Из ДокументОбъект.ПодарочныеСертификаты Цикл
		
		Сумма = СтрокаТЧ.Сумма;
		СуммаНДС = Окр(Сумма * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС), 2);
		
		СтрокаТаблицыИтогов = ТаблицаСумм.Найти(СтавкаНДС,"СтавкаНДС");
		
		Если СтрокаТаблицыИтогов = Неопределено тогда
			СтрокаТаблицыИтогов = ТаблицаСумм.Добавить();
			СтрокаТаблицыИтогов.СтавкаНДС = СтавкаНДС;
		КонецЕсли;
		
		СтрокаТаблицыИтогов.Сумма    = СтрокаТаблицыИтогов.Сумма    + Сумма;
		СтрокаТаблицыИтогов.СуммаНДС = СтрокаТаблицыИтогов.СуммаНДС + СуммаНДС;
		
	КонецЦикла;

КонецПроцедуры

Функция ТекстЗапросаДокументРасчетовСКонтрагентом()
	
	Возврат 
	"ВЫБРАТЬ
	|	НДСПредъявленныйОстатки.Организация,
	|	НДСПредъявленныйОстатки.Поставщик КАК Контрагент,
	|	ВЫБОР
	|		КОГДА НДСПредъявленныйОстатки.СчетФактура ССЫЛКА Документ.ДокументРасчетовСКонтрагентом
	|			ТОГДА ВЫРАЗИТЬ(НДСПредъявленныйОстатки.СчетФактура КАК Документ.ДокументРасчетовСКонтрагентом).ДоговорКонтрагента
	|	КОНЕЦ КАК ДоговорКонтрагента,
	|	"""" КАК ИдентификаторГосКонтракта,
	|	НДСПредъявленныйОстатки.СуммаБезНДСОстаток + НДСПредъявленныйОстатки.НДСОстаток КАК СуммаДокумента,
	|	&ВалютаДокумента КАК ВалютаДокумента,
	|	НДСПредъявленныйОстатки.НДСОстаток КАК СуммаНДСДокумента,
	|	0 КАК СуммаДокументаКомиссия,
	|	0 КАК СуммаНДСДокументаКомиссия,
	|	1 КАК ЕстьНДС
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный.Остатки(
	|			&Дата,
	|			Организация = &Организация
	|				И СчетФактура В (&ОснованияДокументыРасчетов)) КАК НДСПредъявленныйОстатки";

КонецФункции

Функция ТекстЗапросаВозвратТоваровЧерезКомиссионера()
	
	Возврат
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеквизитыДокумента.Ссылка КАК Ссылка,
	|	РеквизитыДокумента.Организация КАК Организация,
	|	РеквизитыДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	РеквизитыДокумента.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	РеквизитыДокумента.Контрагент,
	|	РеквизитыДокумента.ДоговорКонтрагента
	|ПОМЕСТИТЬ ВТ_ОтчетКомиссионераОПродажахВозвраты
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах.Возвраты КАК ОтчетКомиссионераОПродажахВозвраты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионераОПродажах КАК РеквизитыДокумента
	|		ПО ОтчетКомиссионераОПродажахВозвраты.Ссылка = РеквизитыДокумента.Ссылка
	|ГДЕ
	|	ОтчетКомиссионераОПродажахВозвраты.Ссылка В(&ДокументыОснования)
	|	И ОтчетКомиссионераОПродажахВозвраты.ВыставленСФ
	|	И ОтчетКомиссионераОПродажахВозвраты.СчетФактура = &ТекущийДокумент
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.КлючСтроки КАК КлючСтроки,
	|	СУММА(ВложенныйЗапрос.Сумма) КАК Сумма,
	|	СУММА(ВложенныйЗапрос.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ВложенныйЗапрос.ЕстьНДС) КАК ЕстьНДС
	|ПОМЕСТИТЬ ВТ_Суммы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОтчетКомиссионераОПродажахТоварыВозвращенные.КлючСтроки КАК КлючСтроки,
	|		ОтчетКомиссионераОПродажахТоварыВозвращенные.Сумма КАК Сумма,
	|		ОтчетКомиссионераОПродажахТоварыВозвращенные.СуммаНДС КАК СуммаНДС,
	|		ВЫБОР
	|			КОГДА ОтчетКомиссионераОПродажахТоварыВозвращенные.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ КАК ЕстьНДС
	|	ИЗ
	|		ВТ_ОтчетКомиссионераОПродажахВозвраты КАК ВТ_ОтчетКомиссионераОПродажахВозвраты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионераОПродажах.ТоварыВозвращенные КАК ОтчетКомиссионераОПродажахТоварыВозвращенные
	|			ПО ВТ_ОтчетКомиссионераОПродажахВозвраты.Ссылка = ОтчетКомиссионераОПродажахТоварыВозвращенные.Ссылка) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.КлючСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОтчетКомиссионераОПродажахВозвраты.Организация КАК Организация,
	|	ОтчетКомиссионераОПродажахПокупатели.Покупатель КАК Продавец,
	|	ОтчетКомиссионераОПродажахПокупатели.ДатаСФ КАК Дата,
	|	ВТ_ОтчетКомиссионераОПродажахВозвраты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	"""" КАК ИдентификаторГосКонтракта,
	|	СУММА(ВТ_Суммы.Сумма + ВЫБОР
	|			КОГДА ВТ_ОтчетКомиссионераОПродажахВозвраты.СуммаВключаетНДС
	|				ТОГДА 0
	|			ИНАЧЕ ВТ_Суммы.СуммаНДС
	|		КОНЕЦ) КАК СуммаДокумента,
	|	СУММА(ВТ_Суммы.СуммаНДС) КАК СуммаНДСДокумента,
	|	СУММА(0) КАК СуммаДокументаКомиссия,
	|	СУММА(0) КАК СуммаНДСДокументаКомиссия,
	|	СУММА(ВТ_Суммы.ЕстьНДС) КАК ЕстьНДС,
	|	ВТ_ОтчетКомиссионераОПродажахВозвраты.ВалютаДокумента КАК ВалютаДокумента,
	|	ВТ_ОтчетКомиссионераОПродажахВозвраты.Контрагент
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах.Возвраты КАК ОтчетКомиссионераОПродажахПокупатели
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ОтчетКомиссионераОПродажахВозвраты КАК ВТ_ОтчетКомиссионераОПродажахВозвраты
	|		ПО ОтчетКомиссионераОПродажахПокупатели.Ссылка = ВТ_ОтчетКомиссионераОПродажахВозвраты.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Суммы КАК ВТ_Суммы
	|		ПО ОтчетКомиссионераОПродажахПокупатели.КлючСтроки = ВТ_Суммы.КлючСтроки
	|ГДЕ
	|	ОтчетКомиссионераОПродажахПокупатели.СчетФактура = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ОтчетКомиссионераОПродажахВозвраты.ВалютаДокумента,
	|	ОтчетКомиссионераОПродажахПокупатели.Покупатель,
	|	ОтчетКомиссионераОПродажахПокупатели.ДатаСФ,
	|	ВТ_ОтчетКомиссионераОПродажахВозвраты.Организация,
	|	ВТ_ОтчетКомиссионераОПродажахВозвраты.ДоговорКонтрагента,
	|	ВТ_ОтчетКомиссионераОПродажахВозвраты.Контрагент";

КонецФункции

Функция ТекстЗапросаПоступлениеДопРасходов()
	
	Возврат 
	"ВЫБРАТЬ
	|	Таблица.Ссылка.Организация КАК Организация,
	|	Таблица.Ссылка.Контрагент КАК Контрагент,
	|	Таблица.Ссылка.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	"""" КАК ИдентификаторГосКонтракта,
	|	СУММА(Таблица.Сумма + ВЫБОР
	|			КОГДА Таблица.Ссылка.СуммаВключаетНДС
	|				ТОГДА 0
	|			ИНАЧЕ Таблица.СуммаНДС
	|		КОНЕЦ) КАК СуммаДокумента,
	|	Таблица.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	СУММА(Таблица.СуммаНДС) КАК СуммаНДСДокумента,
	|	СУММА(0) КАК СуммаДокументаКомиссия,
	|	СУММА(0) КАК СуммаНДСДокументаКомиссия,
	|	СУММА(ВЫБОР
	|			КОГДА Таблица.Ссылка.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК ЕстьНДС
	|ИЗ
	|	Документ.ПоступлениеДопРасходов.Товары КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка В(&ДокументыОснования)
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Ссылка,
	|	Таблица.Ссылка.Организация,
	|	Таблица.Ссылка.Контрагент,
	|	Таблица.Ссылка.ДоговорКонтрагента,
	|	Таблица.Ссылка.ВалютаДокумента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеДопРасходов.Организация,
	|	ПоступлениеДопРасходов.Контрагент,
	|	ПоступлениеДопРасходов.ДоговорКонтрагента,
	|	"""",
	|	СУММА(ПоступлениеДопРасходов.Сумма + ВЫБОР
	|			КОГДА ПоступлениеДопРасходов.СуммаВключаетНДС
	|				ТОГДА 0
	|			ИНАЧЕ ПоступлениеДопРасходов.СуммаНДС
	|		КОНЕЦ),
	|	ПоступлениеДопРасходов.ВалютаДокумента,
	|	СУММА(ПоступлениеДопРасходов.СуммаНДС),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(ВЫБОР
	|			КОГДА ПоступлениеДопРасходов.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ)
	|ИЗ
	|	Документ.ПоступлениеДопРасходов КАК ПоступлениеДопРасходов
	|ГДЕ
	|	ПоступлениеДопРасходов.Ссылка В(&ДокументыОснования)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеДопРасходов.Организация,
	|	ПоступлениеДопРасходов.Контрагент,
	|	ПоступлениеДопРасходов.ДоговорКонтрагента,
	|	ПоступлениеДопРасходов.ВалютаДокумента";

КонецФункции

Функция ТекстЗапросаРеализацияОтгруженныхТоваров()
	
	Возврат 
	"ВЫБРАТЬ
	|	РеализацияОтгруженныхТоваров.Организация,
	|	РеализацияОтгруженныхТоваров.Контрагент,
	|	РеализацияОтгруженныхТоваров.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	РеализацияОтгруженныхТоваров.СуммаДокумента КАК СуммаДокумента,
	|	РеализацияОтгруженныхТоваров.ДокументОтгрузки.ВалютаДокумента КАК ВалютаДокумента,
	|	РеализацияОтгруженныхТоваров.ДокументОтгрузки КАК ДокументОтгрузки
	|ПОМЕСТИТЬ ВТ_РеализацияОтгруженныхТоваров
	|ИЗ
	|	Документ.РеализацияОтгруженныхТоваров КАК РеализацияОтгруженныхТоваров
	|ГДЕ
	|	РеализацияОтгруженныхТоваров.Ссылка В(&ДокументыОснования)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОтгрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Ссылка КАК Ссылка,
	|	СУММА(ВЫБОР
	|			КОГДА РеализацияТоваровУслугТовары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыНаСкладе)
	|					ИЛИ РеализацияТоваровУслугТовары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыПереданныеНаКомиссию)
	|				ТОГДА РеализацияТоваровУслугТовары.Сумма + ВЫБОР
	|						КОГДА РеализацияТоваровУслугТовары.Ссылка.СуммаВключаетНДС
	|							ТОГДА 0
	|						ИНАЧЕ РеализацияТоваровУслугТовары.СуммаНДС
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаДокументаКомиссия,
	|	СУММА(ВЫБОР
	|			КОГДА РеализацияТоваровУслугТовары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыНаСкладе)
	|					ИЛИ РеализацияТоваровУслугТовары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыПереданныеНаКомиссию)
	|				ТОГДА РеализацияТоваровУслугТовары.СуммаНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаНДСДокументаКомиссия,
	|	СУММА(РеализацияТоваровУслугТовары.СуммаНДС) КАК СуммаНДСДокумента,
	|	СУММА(ВЫБОР
	|			КОГДА РеализацияТоваровУслугТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК ЕстьНДС
	|ПОМЕСТИТЬ ВТ_ТаблицыНДС
	|ИЗ
	|	ВТ_РеализацияОтгруженныхТоваров КАК ВТ_РеализацияОтгруженныхТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|		ПО ВТ_РеализацияОтгруженныхТоваров.ДокументОтгрузки = РеализацияТоваровУслугТовары.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслугТовары.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПередачаОСОС.Ссылка,
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(ПередачаОСОС.СуммаНДС),
	|	СУММА(ВЫБОР
	|			КОГДА ПередачаОСОС.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ)
	|ИЗ
	|	ВТ_РеализацияОтгруженныхТоваров КАК ВТ_РеализацияОтгруженныхТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПередачаОС.ОС КАК ПередачаОСОС
	|		ПО ВТ_РеализацияОтгруженныхТоваров.ДокументОтгрузки = ПередачаОСОС.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПередачаОСОС.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РеализацияОтгруженныхТоваров.Организация КАК Организация,
	|	ВТ_РеализацияОтгруженныхТоваров.Контрагент КАК Контрагент,
	|	ВТ_РеализацияОтгруженныхТоваров.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ДоговорыКонтрагентов.ГосударственныйКонтракт.Код КАК ИдентификаторГосКонтракта,
	|	ВТ_РеализацияОтгруженныхТоваров.ВалютаДокумента КАК ВалютаДокумента,
	|	СУММА(ВТ_РеализацияОтгруженныхТоваров.СуммаДокумента) КАК СуммаДокумента,
	|	СУММА(ВТ_ТаблицыНДС.СуммаНДСДокумента) КАК СуммаНДСДокумента,
	|	СУММА(ВТ_ТаблицыНДС.СуммаДокументаКомиссия) КАК СуммаДокументаКомиссия,
	|	СУММА(ВТ_ТаблицыНДС.СуммаНДСДокументаКомиссия) КАК СуммаНДСДокументаКомиссия,
	|	СУММА(ВТ_ТаблицыНДС.ЕстьНДС) КАК ЕстьНДС
	|ИЗ
	|	ВТ_РеализацияОтгруженныхТоваров КАК ВТ_РеализацияОтгруженныхТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицыНДС КАК ВТ_ТаблицыНДС
	|		ПО ВТ_РеализацияОтгруженныхТоваров.ДокументОтгрузки = ВТ_ТаблицыНДС.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО ВТ_РеализацияОтгруженныхТоваров.ДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_РеализацияОтгруженныхТоваров.Организация,
	|	ВТ_РеализацияОтгруженныхТоваров.Контрагент,
	|	ВТ_РеализацияОтгруженныхТоваров.ДоговорКонтрагента,
	|	ВТ_РеализацияОтгруженныхТоваров.ВалютаДокумента,
	|	ДоговорыКонтрагентов.ГосударственныйКонтракт.Код";

КонецФункции

Функция ТекстЗапросаНачислениеНДСпоСМР()
	
	Возврат 
	"ВЫБРАТЬ
	|	НачислениеНДСпоСМРхозспособом.Ссылка.Организация,
	|	НЕОПРЕДЕЛЕНО КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО КАК ДоговорКонтрагента,
	|	"""" КАК ИдентификаторГосКонтракта,
	|	СУММА(НачислениеНДСпоСМРхозспособом.СуммаБезНДС + НачислениеНДСпоСМРхозспособом.НДС) КАК СуммаДокумента,
	|	&ВалютаРегламентированногоУчета КАК ВалютаДокумента,
	|	СУММА(НачислениеНДСпоСМРхозспособом.НДС) КАК СуммаНДСДокумента,
	|	СУММА(0) КАК СуммаДокументаКомиссия,
	|	СУММА(0) КАК СуммаНДСДокументаКомиссия,
	|	1 КАК ЕстьНДС
	|ИЗ
	|	Документ.НачислениеНДСпоСМРхозспособом.СМРхозспособом КАК НачислениеНДСпоСМРхозспособом
	|ГДЕ
	|	НачислениеНДСпоСМРхозспособом.Ссылка В(&ДокументыОснования)
	|
	|СГРУППИРОВАТЬ ПО
	|	НачислениеНДСпоСМРхозспособом.Ссылка.Организация,
	|	НачислениеНДСпоСМРхозспособом.НДС";

КонецФункции

Функция ТекстЗапросаКорректировкаРеализации()
	
	Возврат 
	"ВЫБРАТЬ
	|	Товары.Ссылка.Организация КАК Организация,
	|	Товары.Ссылка.Контрагент КАК Контрагент,
	|	Товары.Ссылка.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.ГосударственныйКонтракт.Код, """") КАК ИдентификаторГосКонтракта,
	|	Товары.Ссылка.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	Товары.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	ВЫБОР
	|		КОГДА НЕ &КорректировочныйСчетФактура
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Товары.Ссылка.СуммаВключаетНДС
	|					ТОГДА ВЫБОР
	|							КОГДА Товары.Сумма - Товары.СуммаДоИзменения > 0
	|								ТОГДА Товары.Сумма - Товары.СуммаДоИзменения
	|							ИНАЧЕ 0
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА Товары.Сумма + Товары.СуммаНДС - (Товары.СуммаДоИзменения + Товары.СуммаНДСДоИзменения) > 0
	|							ТОГДА Товары.Сумма + Товары.СуммаНДС - (Товары.СуммаДоИзменения + Товары.СуммаНДСДоИзменения)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК СуммаУвеличение,
	|	ВЫБОР
	|		КОГДА НЕ &КорректировочныйСчетФактура
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Товары.Ссылка.СуммаВключаетНДС
	|					ТОГДА ВЫБОР
	|							КОГДА Товары.Сумма - Товары.СуммаДоИзменения < 0
	|								ТОГДА Товары.СуммаДоИзменения - Товары.Сумма
	|							ИНАЧЕ 0
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА Товары.Сумма + Товары.СуммаНДС - (Товары.СуммаДоИзменения + Товары.СуммаНДСДоИзменения) < 0
	|							ТОГДА Товары.СуммаДоИзменения + Товары.СуммаНДСДоИзменения - (Товары.Сумма + Товары.СуммаНДС)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК СуммаУменьшение,
	|	ВЫБОР
	|		КОГДА НЕ &КорректировочныйСчетФактура
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Товары.СуммаНДС - Товары.СуммаНДСДоИзменения > 0
	|					ТОГДА Товары.СуммаНДС - Товары.СуммаНДСДоИзменения
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК СуммаНДСУвеличение,
	|	ВЫБОР
	|		КОГДА НЕ &КорректировочныйСчетФактура
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Товары.СуммаНДС - Товары.СуммаНДСДоИзменения < 0
	|					ТОГДА Товары.СуммаНДСДоИзменения - Товары.СуммаНДС
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК СуммаНДСУменьшение,
	|	ВЫБОР
	|		КОГДА Товары.Ссылка.СуммаВключаетНДС
	|			ТОГДА Товары.Сумма
	|		ИНАЧЕ Товары.Сумма + Товары.СуммаНДС
	|	КОНЕЦ КАК СуммаДокумента,
	|	Товары.СуммаНДС КАК СуммаНДСДокумента,
	|	ВЫБОР
	|		КОГДА Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЕстьНДС,
	|	Товары.Ссылка КАК Документ,
	|	ВЫБОР
	|		КОГДА НЕ &КорректировочныйСчетФактура
	|				ИЛИ НЕ(Товары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыНаСкладе)
	|						ИЛИ Товары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыПереданныеНаКомиссию)
	|						ИЛИ Товары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТМЦПринятыеНаОтветственноеХранение))
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Товары.Ссылка.СуммаВключаетНДС
	|					ТОГДА ВЫБОР
	|							КОГДА Товары.Сумма - Товары.СуммаДоИзменения > 0
	|								ТОГДА Товары.Сумма - Товары.СуммаДоИзменения
	|							ИНАЧЕ 0
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА Товары.Сумма + Товары.СуммаНДС - (Товары.СуммаДоИзменения + Товары.СуммаНДСДоИзменения) > 0
	|							ТОГДА Товары.Сумма + Товары.СуммаНДС - (Товары.СуммаДоИзменения + Товары.СуммаНДСДоИзменения)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК СуммаУвеличениеКомиссия,
	|	ВЫБОР
	|		КОГДА НЕ &КорректировочныйСчетФактура
	|				ИЛИ НЕ(Товары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыНаСкладе)
	|						ИЛИ Товары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыПереданныеНаКомиссию)
	|						ИЛИ Товары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТМЦПринятыеНаОтветственноеХранение))
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Товары.Ссылка.СуммаВключаетНДС
	|					ТОГДА ВЫБОР
	|							КОГДА Товары.Сумма - Товары.СуммаДоИзменения < 0
	|								ТОГДА Товары.СуммаДоИзменения - Товары.Сумма
	|							ИНАЧЕ 0
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА Товары.Сумма + Товары.СуммаНДС - (Товары.СуммаДоИзменения + Товары.СуммаНДСДоИзменения) < 0
	|							ТОГДА Товары.СуммаДоИзменения + Товары.СуммаНДСДоИзменения - (Товары.Сумма + Товары.СуммаНДС)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК СуммаУменьшениеКомиссия,
	|	ВЫБОР
	|		КОГДА НЕ &КорректировочныйСчетФактура
	|				ИЛИ НЕ(Товары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыНаСкладе)
	|						ИЛИ Товары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыПереданныеНаКомиссию)
	|						ИЛИ Товары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТМЦПринятыеНаОтветственноеХранение))
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Товары.СуммаНДС - Товары.СуммаНДСДоИзменения > 0
	|					ТОГДА Товары.СуммаНДС - Товары.СуммаНДСДоИзменения
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК СуммаНДСУвеличениеКомиссия,
	|	ВЫБОР
	|		КОГДА НЕ &КорректировочныйСчетФактура
	|				ИЛИ НЕ(Товары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыНаСкладе)
	|						ИЛИ Товары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыПереданныеНаКомиссию)
	|						ИЛИ Товары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТМЦПринятыеНаОтветственноеХранение))
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Товары.СуммаНДС - Товары.СуммаНДСДоИзменения < 0
	|					ТОГДА Товары.СуммаНДСДоИзменения - Товары.СуммаНДС
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК СуммаНДСУменьшениеКомиссия,
	|	ВЫБОР
	|		КОГДА Товары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыНаСкладе)
	|				ИЛИ Товары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыПереданныеНаКомиссию)
	|				ИЛИ Товары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТМЦПринятыеНаОтветственноеХранение)
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Ссылка.СуммаВключаетНДС
	|						ТОГДА Товары.Сумма
	|					ИНАЧЕ Товары.Сумма + Товары.СуммаНДС
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаДокументаКомиссия,
	|	ВЫБОР
	|		КОГДА Товары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыНаСкладе)
	|				ИЛИ Товары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыПереданныеНаКомиссию)
	|				ИЛИ Товары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТМЦПринятыеНаОтветственноеХранение)
	|			ТОГДА Товары.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаНДСДокументаКомиссия
	|ИЗ
	|	Документ.КорректировкаРеализации.Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО Товары.Ссылка.ДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
	|ГДЕ
	|	Товары.Ссылка В(&ДокументыОснования)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Услуги.Ссылка.Организация,
	|	Услуги.Ссылка.Контрагент,
	|	Услуги.Ссылка.ДоговорКонтрагента,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.ГосударственныйКонтракт.Код, """"),
	|	Услуги.Ссылка.ДоговорКонтрагента.ВидДоговора,
	|	Услуги.Ссылка.ВалютаДокумента,
	|	ВЫБОР
	|		КОГДА НЕ &КорректировочныйСчетФактура
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Услуги.Ссылка.СуммаВключаетНДС
	|					ТОГДА ВЫБОР
	|							КОГДА Услуги.Сумма - Услуги.СуммаДоИзменения > 0
	|								ТОГДА Услуги.Сумма - Услуги.СуммаДоИзменения
	|							ИНАЧЕ 0
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА Услуги.Сумма + Услуги.СуммаНДС - (Услуги.СуммаДоИзменения + Услуги.СуммаНДСДоИзменения) > 0
	|							ТОГДА Услуги.Сумма + Услуги.СуммаНДС - (Услуги.СуммаДоИзменения + Услуги.СуммаНДСДоИзменения)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ &КорректировочныйСчетФактура
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Услуги.Ссылка.СуммаВключаетНДС
	|					ТОГДА ВЫБОР
	|							КОГДА Услуги.Сумма - Услуги.СуммаДоИзменения < 0
	|								ТОГДА Услуги.СуммаДоИзменения - Услуги.Сумма
	|							ИНАЧЕ 0
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА Услуги.Сумма + Услуги.СуммаНДС - (Услуги.СуммаДоИзменения + Услуги.СуммаНДСДоИзменения) < 0
	|							ТОГДА Услуги.СуммаДоИзменения + Услуги.СуммаНДСДоИзменения - (Услуги.Сумма + Услуги.СуммаНДС)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ &КорректировочныйСчетФактура
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Услуги.СуммаНДС - Услуги.СуммаНДСДоИзменения > 0
	|					ТОГДА Услуги.СуммаНДС - Услуги.СуммаНДСДоИзменения
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ &КорректировочныйСчетФактура
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Услуги.СуммаНДС - Услуги.СуммаНДСДоИзменения < 0
	|					ТОГДА Услуги.СуммаНДСДоИзменения - Услуги.СуммаНДС
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Услуги.Ссылка.СуммаВключаетНДС
	|			ТОГДА Услуги.Сумма
	|		ИНАЧЕ Услуги.Сумма + Услуги.СуммаНДС
	|	КОНЕЦ,
	|	Услуги.СуммаНДС,
	|	ВЫБОР
	|		КОГДА Услуги.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ,
	|	Услуги.Ссылка,
	|	ВЫБОР
	|		КОГДА &КорректировкаСчетаФактурыДляКомитента
	|			ТОГДА ВЫБОР
	|					КОГДА Услуги.Ссылка.СуммаВключаетНДС
	|						ТОГДА ВЫБОР
	|								КОГДА Услуги.Сумма - Услуги.СуммаДоИзменения > 0
	|									ТОГДА Услуги.Сумма - Услуги.СуммаДоИзменения
	|								ИНАЧЕ 0
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА Услуги.Сумма + Услуги.СуммаНДС - (Услуги.СуммаДоИзменения + Услуги.СуммаНДСДоИзменения) > 0
	|								ТОГДА Услуги.Сумма + Услуги.СуммаНДС - (Услуги.СуммаДоИзменения + Услуги.СуммаНДСДоИзменения)
	|							ИНАЧЕ 0
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &КорректировкаСчетаФактурыДляКомитента
	|			ТОГДА ВЫБОР
	|					КОГДА Услуги.Ссылка.СуммаВключаетНДС
	|						ТОГДА ВЫБОР
	|								КОГДА Услуги.Сумма - Услуги.СуммаДоИзменения < 0
	|									ТОГДА Услуги.СуммаДоИзменения - Услуги.Сумма
	|								ИНАЧЕ 0
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА Услуги.Сумма + Услуги.СуммаНДС - (Услуги.СуммаДоИзменения + Услуги.СуммаНДСДоИзменения) < 0
	|								ТОГДА Услуги.СуммаДоИзменения + Услуги.СуммаНДСДоИзменения - (Услуги.Сумма + Услуги.СуммаНДС)
	|							ИНАЧЕ 0
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &КорректировкаСчетаФактурыДляКомитента
	|			ТОГДА ВЫБОР
	|					КОГДА Услуги.СуммаНДС - Услуги.СуммаНДСДоИзменения > 0
	|						ТОГДА Услуги.СуммаНДС - Услуги.СуммаНДСДоИзменения
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &КорректировкаСчетаФактурыДляКомитента
	|			ТОГДА ВЫБОР
	|					КОГДА Услуги.СуммаНДС - Услуги.СуммаНДСДоИзменения < 0
	|						ТОГДА Услуги.СуммаНДСДоИзменения - Услуги.СуммаНДС
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &КорректировкаСчетаФактурыДляКомитента
	|			ТОГДА ВЫБОР
	|					КОГДА Услуги.Ссылка.СуммаВключаетНДС
	|						ТОГДА Услуги.Сумма
	|					ИНАЧЕ Услуги.Сумма + Услуги.СуммаНДС
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &КорректировкаСчетаФактурыДляКомитента
	|			ТОГДА Услуги.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|ИЗ
	|	Документ.КорректировкаРеализации.Услуги КАК Услуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО Услуги.Ссылка.ДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
	|ГДЕ
	|	Услуги.Ссылка В(&ДокументыОснования)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АгентскиеУслуги.Ссылка.Организация,
	|	АгентскиеУслуги.Ссылка.Контрагент,
	|	АгентскиеУслуги.Ссылка.ДоговорКонтрагента,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.ГосударственныйКонтракт.Код, """"),
	|	АгентскиеУслуги.Ссылка.ДоговорКонтрагента.ВидДоговора,
	|	АгентскиеУслуги.Ссылка.ВалютаДокумента,
	|	ВЫБОР
	|		КОГДА НЕ &КорректировочныйСчетФактура
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА АгентскиеУслуги.Ссылка.СуммаВключаетНДС
	|					ТОГДА ВЫБОР
	|							КОГДА АгентскиеУслуги.Сумма - АгентскиеУслуги.СуммаДоИзменения > 0
	|								ТОГДА АгентскиеУслуги.Сумма - АгентскиеУслуги.СуммаДоИзменения
	|							ИНАЧЕ 0
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА АгентскиеУслуги.Сумма + АгентскиеУслуги.СуммаНДС - (АгентскиеУслуги.СуммаДоИзменения + АгентскиеУслуги.СуммаНДСДоИзменения) > 0
	|							ТОГДА АгентскиеУслуги.Сумма + АгентскиеУслуги.СуммаНДС - (АгентскиеУслуги.СуммаДоИзменения + АгентскиеУслуги.СуммаНДСДоИзменения)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ &КорректировочныйСчетФактура
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА АгентскиеУслуги.Ссылка.СуммаВключаетНДС
	|					ТОГДА ВЫБОР
	|							КОГДА АгентскиеУслуги.Сумма - АгентскиеУслуги.СуммаДоИзменения < 0
	|								ТОГДА АгентскиеУслуги.СуммаДоИзменения - АгентскиеУслуги.Сумма
	|							ИНАЧЕ 0
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА АгентскиеУслуги.Сумма + АгентскиеУслуги.СуммаНДС - (АгентскиеУслуги.СуммаДоИзменения + АгентскиеУслуги.СуммаНДСДоИзменения) < 0
	|							ТОГДА АгентскиеУслуги.СуммаДоИзменения + АгентскиеУслуги.СуммаНДСДоИзменения - (АгентскиеУслуги.Сумма + АгентскиеУслуги.СуммаНДС)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ &КорректировочныйСчетФактура
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА АгентскиеУслуги.СуммаНДС - АгентскиеУслуги.СуммаНДСДоИзменения > 0
	|					ТОГДА АгентскиеУслуги.СуммаНДС - АгентскиеУслуги.СуммаНДСДоИзменения
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ &КорректировочныйСчетФактура
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА АгентскиеУслуги.СуммаНДС - АгентскиеУслуги.СуммаНДСДоИзменения < 0
	|					ТОГДА АгентскиеУслуги.СуммаНДСДоИзменения - АгентскиеУслуги.СуммаНДС
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА АгентскиеУслуги.Ссылка.СуммаВключаетНДС
	|			ТОГДА АгентскиеУслуги.Сумма
	|		ИНАЧЕ АгентскиеУслуги.Сумма + АгентскиеУслуги.СуммаНДС
	|	КОНЕЦ,
	|	АгентскиеУслуги.СуммаНДС,
	|	ВЫБОР
	|		КОГДА АгентскиеУслуги.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ,
	|	АгентскиеУслуги.Ссылка,
	|	ВЫБОР
	|		КОГДА НЕ &КорректировочныйСчетФактура
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА АгентскиеУслуги.Ссылка.СуммаВключаетНДС
	|					ТОГДА ВЫБОР
	|							КОГДА АгентскиеУслуги.Сумма - АгентскиеУслуги.СуммаДоИзменения > 0
	|								ТОГДА АгентскиеУслуги.Сумма - АгентскиеУслуги.СуммаДоИзменения
	|							ИНАЧЕ 0
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА АгентскиеУслуги.Сумма + АгентскиеУслуги.СуммаНДС - (АгентскиеУслуги.СуммаДоИзменения + АгентскиеУслуги.СуммаНДСДоИзменения) > 0
	|							ТОГДА АгентскиеУслуги.Сумма + АгентскиеУслуги.СуммаНДС - (АгентскиеУслуги.СуммаДоИзменения + АгентскиеУслуги.СуммаНДСДоИзменения)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ &КорректировочныйСчетФактура
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА АгентскиеУслуги.Ссылка.СуммаВключаетНДС
	|					ТОГДА ВЫБОР
	|							КОГДА АгентскиеУслуги.Сумма - АгентскиеУслуги.СуммаДоИзменения < 0
	|								ТОГДА АгентскиеУслуги.СуммаДоИзменения - АгентскиеУслуги.Сумма
	|							ИНАЧЕ 0
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА АгентскиеУслуги.Сумма + АгентскиеУслуги.СуммаНДС - (АгентскиеУслуги.СуммаДоИзменения + АгентскиеУслуги.СуммаНДСДоИзменения) < 0
	|							ТОГДА АгентскиеУслуги.СуммаДоИзменения + АгентскиеУслуги.СуммаНДСДоИзменения - (АгентскиеУслуги.Сумма + АгентскиеУслуги.СуммаНДС)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ &КорректировочныйСчетФактура
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА АгентскиеУслуги.СуммаНДС - АгентскиеУслуги.СуммаНДСДоИзменения > 0
	|					ТОГДА АгентскиеУслуги.СуммаНДС - АгентскиеУслуги.СуммаНДСДоИзменения
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ &КорректировочныйСчетФактура
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА АгентскиеУслуги.СуммаНДС - АгентскиеУслуги.СуммаНДСДоИзменения < 0
	|					ТОГДА АгентскиеУслуги.СуммаНДСДоИзменения - АгентскиеУслуги.СуммаНДС
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА АгентскиеУслуги.Ссылка.СуммаВключаетНДС
	|			ТОГДА АгентскиеУслуги.Сумма
	|		ИНАЧЕ АгентскиеУслуги.Сумма + АгентскиеУслуги.СуммаНДС
	|	КОНЕЦ,
	|	АгентскиеУслуги.СуммаНДС
	|ИЗ
	|	Документ.КорректировкаРеализации.АгентскиеУслуги КАК АгентскиеУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО АгентскиеУслуги.Ссылка.ДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
	|ГДЕ
	|	АгентскиеУслуги.Ссылка В(&ДокументыОснования)
	|ИТОГИ
	|	МАКСИМУМ(ИдентификаторГосКонтракта),
	|	СУММА(СуммаУвеличение),
	|	СУММА(СуммаУменьшение),
	|	СУММА(СуммаНДСУвеличение),
	|	СУММА(СуммаНДСУменьшение),
	|	СУММА(СуммаДокумента),
	|	СУММА(СуммаНДСДокумента),
	|	СУММА(ЕстьНДС),
	|	СУММА(СуммаУвеличениеКомиссия),
	|	СУММА(СуммаУменьшениеКомиссия),
	|	СУММА(СуммаНДСУвеличениеКомиссия),
	|	СУММА(СуммаНДСУменьшениеКомиссия),
	|	СУММА(СуммаДокументаКомиссия),
	|	СУММА(СуммаНДСДокументаКомиссия)
	|ПО
	|	ОБЩИЕ,
	|	Документ";

КонецФункции

Функция ТекстЗапросаКорректировкаПоступления()
	
	Возврат 
	"ВЫБРАТЬ
	|	Товары.Ссылка.Организация КАК Организация,
	|	Товары.Ссылка.Контрагент КАК Контрагент,
	|	Товары.Ссылка.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	"""" КАК ИдентификаторГосКонтракта,
	|	ВЫБОР
	|		КОГДА НЕ &КорректировочныйСчетФактура
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Товары.Ссылка.СуммаВключаетНДС
	|					ТОГДА ВЫБОР
	|							КОГДА Товары.Сумма - Товары.СуммаДоИзменения > 0
	|								ТОГДА Товары.Сумма - Товары.СуммаДоИзменения
	|							ИНАЧЕ 0
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА Товары.Сумма + Товары.СуммаНДС - (Товары.СуммаДоИзменения + Товары.СуммаНДСДоИзменения) > 0
	|							ТОГДА Товары.Сумма + Товары.СуммаНДС - (Товары.СуммаДоИзменения + Товары.СуммаНДСДоИзменения)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК СуммаУвеличение,
	|	ВЫБОР
	|		КОГДА НЕ &КорректировочныйСчетФактура
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Товары.Ссылка.СуммаВключаетНДС
	|					ТОГДА ВЫБОР
	|							КОГДА Товары.Сумма - Товары.СуммаДоИзменения < 0
	|								ТОГДА Товары.СуммаДоИзменения - Товары.Сумма
	|							ИНАЧЕ 0
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА Товары.Сумма + Товары.СуммаНДС - (Товары.СуммаДоИзменения + Товары.СуммаНДСДоИзменения) < 0
	|							ТОГДА Товары.СуммаДоИзменения + Товары.СуммаНДСДоИзменения - (Товары.Сумма + Товары.СуммаНДС)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК СуммаУменьшение,
	|	Товары.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	ВЫБОР
	|		КОГДА НЕ &КорректировочныйСчетФактура
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Товары.СуммаНДС - Товары.СуммаНДСДоИзменения > 0
	|					ТОГДА Товары.СуммаНДС - Товары.СуммаНДСДоИзменения
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК СуммаНДСУвеличение,
	|	ВЫБОР
	|		КОГДА НЕ &КорректировочныйСчетФактура
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Товары.СуммаНДС - Товары.СуммаНДСДоИзменения < 0
	|					ТОГДА Товары.СуммаНДСДоИзменения - Товары.СуммаНДС
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК СуммаНДСУменьшение,
	|	ВЫБОР
	|		КОГДА Товары.Ссылка.СуммаВключаетНДС
	|			ТОГДА Товары.Сумма
	|		ИНАЧЕ Товары.Сумма + Товары.СуммаНДС
	|	КОНЕЦ КАК СуммаДокумента,
	|	Товары.СуммаНДС КАК СуммаНДСДокумента,
	|	ВЫБОР
	|		КОГДА Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЕстьНДС,
	|	Товары.Ссылка КАК Документ,
	|	ВЫБОР
	|		КОГДА (Товары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТМЦпринятыеНаОтветственноеХранение)
	|				ИЛИ Товары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыНаСкладе)
	|				ИЛИ Товары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыПереданныеНаКомиссию))
	|				И Товары.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Товары.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаНДСДокументаКомиссия,
	|	ВЫБОР
	|		КОГДА (Товары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТМЦПринятыеНаОтветственноеХранение)
	|				ИЛИ Товары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыНаСкладе)
	|				ИЛИ Товары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыПереданныеНаКомиссию))
	|				И Товары.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Ссылка.СуммаВключаетНДС
	|						ТОГДА Товары.Сумма
	|					ИНАЧЕ Товары.Сумма + Товары.СуммаНДС
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаДокументаКомиссия,
	|	ВЫБОР
	|		КОГДА НЕ &КорректировочныйСчетФактура
	|				ИЛИ НЕ((Товары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТМЦПринятыеНаОтветственноеХранение)
	|						ИЛИ Товары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыНаСкладе)
	|						ИЛИ Товары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыПереданныеНаКомиссию))
	|						И Товары.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Товары.Ссылка.СуммаВключаетНДС
	|					ТОГДА ВЫБОР
	|							КОГДА Товары.Сумма - Товары.СуммаДоИзменения > 0
	|								ТОГДА Товары.Сумма - Товары.СуммаДоИзменения
	|							ИНАЧЕ 0
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА Товары.Сумма + Товары.СуммаНДС - (Товары.СуммаДоИзменения + Товары.СуммаНДСДоИзменения) > 0
	|							ТОГДА Товары.Сумма + Товары.СуммаНДС - (Товары.СуммаДоИзменения + Товары.СуммаНДСДоИзменения)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК СуммаУвеличениеКомиссия,
	|	ВЫБОР
	|		КОГДА НЕ &КорректировочныйСчетФактура
	|				ИЛИ НЕ((Товары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТМЦПринятыеНаОтветственноеХранение)
	|						ИЛИ Товары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыНаСкладе)
	|						ИЛИ Товары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыПереданныеНаКомиссию))
	|						И Товары.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Товары.Ссылка.СуммаВключаетНДС
	|					ТОГДА ВЫБОР
	|							КОГДА Товары.Сумма - Товары.СуммаДоИзменения < 0
	|								ТОГДА Товары.СуммаДоИзменения - Товары.Сумма
	|							ИНАЧЕ 0
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА Товары.Сумма + Товары.СуммаНДС - (Товары.СуммаДоИзменения + Товары.СуммаНДСДоИзменения) < 0
	|							ТОГДА Товары.СуммаДоИзменения + Товары.СуммаНДСДоИзменения - (Товары.Сумма + Товары.СуммаНДС)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК СуммаУменьшениеКомиссия,
	|	ВЫБОР
	|		КОГДА НЕ &КорректировочныйСчетФактура
	|				ИЛИ НЕ((Товары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТМЦПринятыеНаОтветственноеХранение)
	|						ИЛИ Товары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыНаСкладе)
	|						ИЛИ Товары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыПереданныеНаКомиссию))
	|						И Товары.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Товары.СуммаНДС - Товары.СуммаНДСДоИзменения > 0
	|					ТОГДА Товары.СуммаНДС - Товары.СуммаНДСДоИзменения
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК СуммаНДСУвеличениеКомиссия,
	|	ВЫБОР
	|		КОГДА НЕ &КорректировочныйСчетФактура
	|				ИЛИ НЕ((Товары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТМЦПринятыеНаОтветственноеХранение)
	|						ИЛИ Товары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыНаСкладе)
	|						ИЛИ Товары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыПереданныеНаКомиссию))
	|						И Товары.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Товары.СуммаНДС - Товары.СуммаНДСДоИзменения < 0
	|					ТОГДА Товары.СуммаНДСДоИзменения - Товары.СуммаНДС
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК СуммаНДСУменьшениеКомиссия
	|ИЗ
	|	Документ.КорректировкаПоступления.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка В(&ДокументыОснования)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Услуги.Ссылка.Организация,
	|	Услуги.Ссылка.Контрагент,
	|	Услуги.Ссылка.ДоговорКонтрагента,
	|	"""",
	|	ВЫБОР
	|		КОГДА НЕ &КорректировочныйСчетФактура
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Услуги.Ссылка.СуммаВключаетНДС
	|					ТОГДА ВЫБОР
	|							КОГДА Услуги.Сумма - Услуги.СуммаДоИзменения > 0
	|								ТОГДА Услуги.Сумма - Услуги.СуммаДоИзменения
	|							ИНАЧЕ 0
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА Услуги.Сумма + Услуги.СуммаНДС - (Услуги.СуммаДоИзменения + Услуги.СуммаНДСДоИзменения) > 0
	|							ТОГДА Услуги.Сумма + Услуги.СуммаНДС - (Услуги.СуммаДоИзменения + Услуги.СуммаНДСДоИзменения)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ &КорректировочныйСчетФактура
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Услуги.Ссылка.СуммаВключаетНДС
	|					ТОГДА ВЫБОР
	|							КОГДА Услуги.Сумма - Услуги.СуммаДоИзменения < 0
	|								ТОГДА Услуги.СуммаДоИзменения - Услуги.Сумма
	|							ИНАЧЕ 0
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА Услуги.Сумма + Услуги.СуммаНДС - (Услуги.СуммаДоИзменения + Услуги.СуммаНДСДоИзменения) < 0
	|							ТОГДА Услуги.СуммаДоИзменения + Услуги.СуммаНДСДоИзменения - (Услуги.Сумма + Услуги.СуммаНДС)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ,
	|	Услуги.Ссылка.ВалютаДокумента,
	|	ВЫБОР
	|		КОГДА НЕ &КорректировочныйСчетФактура
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Услуги.СуммаНДС - Услуги.СуммаНДСДоИзменения > 0
	|					ТОГДА Услуги.СуммаНДС - Услуги.СуммаНДСДоИзменения
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ &КорректировочныйСчетФактура
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Услуги.СуммаНДС - Услуги.СуммаНДСДоИзменения < 0
	|					ТОГДА Услуги.СуммаНДСДоИзменения - Услуги.СуммаНДС
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Услуги.Ссылка.СуммаВключаетНДС
	|			ТОГДА Услуги.Сумма
	|		ИНАЧЕ Услуги.Сумма + Услуги.СуммаНДС
	|	КОНЕЦ,
	|	Услуги.СуммаНДС,
	|	ВЫБОР
	|		КОГДА Услуги.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ,
	|	Услуги.Ссылка,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0
	|ИЗ
	|	Документ.КорректировкаПоступления.Услуги КАК Услуги
	|ГДЕ
	|	Услуги.Ссылка В(&ДокументыОснования)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АгентскиеУслуги.Ссылка.Организация,
	|	АгентскиеУслуги.Ссылка.Контрагент,
	|	АгентскиеУслуги.Ссылка.ДоговорКонтрагента,
	|	"""",
	|	ВЫБОР
	|		КОГДА НЕ &КорректировочныйСчетФактура
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА АгентскиеУслуги.Ссылка.СуммаВключаетНДС
	|					ТОГДА ВЫБОР
	|							КОГДА АгентскиеУслуги.Сумма - АгентскиеУслуги.СуммаДоИзменения > 0
	|								ТОГДА АгентскиеУслуги.Сумма - АгентскиеУслуги.СуммаДоИзменения
	|							ИНАЧЕ 0
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА АгентскиеУслуги.Сумма + АгентскиеУслуги.СуммаНДС - (АгентскиеУслуги.СуммаДоИзменения + АгентскиеУслуги.СуммаНДСДоИзменения) > 0
	|							ТОГДА АгентскиеУслуги.Сумма + АгентскиеУслуги.СуммаНДС - (АгентскиеУслуги.СуммаДоИзменения + АгентскиеУслуги.СуммаНДСДоИзменения)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ &КорректировочныйСчетФактура
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА АгентскиеУслуги.Ссылка.СуммаВключаетНДС
	|					ТОГДА ВЫБОР
	|							КОГДА АгентскиеУслуги.Сумма - АгентскиеУслуги.СуммаДоИзменения < 0
	|								ТОГДА АгентскиеУслуги.СуммаДоИзменения - АгентскиеУслуги.Сумма
	|							ИНАЧЕ 0
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА АгентскиеУслуги.Сумма + АгентскиеУслуги.СуммаНДС - (АгентскиеУслуги.СуммаДоИзменения + АгентскиеУслуги.СуммаНДСДоИзменения) < 0
	|							ТОГДА АгентскиеУслуги.СуммаДоИзменения + АгентскиеУслуги.СуммаНДСДоИзменения - (АгентскиеУслуги.Сумма + АгентскиеУслуги.СуммаНДС)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ,
	|	АгентскиеУслуги.Ссылка.ВалютаДокумента,
	|	ВЫБОР
	|		КОГДА НЕ &КорректировочныйСчетФактура
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА АгентскиеУслуги.СуммаНДС - АгентскиеУслуги.СуммаНДСДоИзменения > 0
	|					ТОГДА АгентскиеУслуги.СуммаНДС - АгентскиеУслуги.СуммаНДСДоИзменения
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ &КорректировочныйСчетФактура
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА АгентскиеУслуги.СуммаНДС - АгентскиеУслуги.СуммаНДСДоИзменения < 0
	|					ТОГДА АгентскиеУслуги.СуммаНДСДоИзменения - АгентскиеУслуги.СуммаНДС
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА АгентскиеУслуги.Ссылка.СуммаВключаетНДС
	|			ТОГДА АгентскиеУслуги.Сумма
	|		ИНАЧЕ АгентскиеУслуги.Сумма + АгентскиеУслуги.СуммаНДС
	|	КОНЕЦ,
	|	АгентскиеУслуги.СуммаНДС,
	|	ВЫБОР
	|		КОГДА АгентскиеУслуги.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ,
	|	АгентскиеУслуги.Ссылка,
	|	АгентскиеУслуги.СуммаНДС,
	|	ВЫБОР
	|		КОГДА АгентскиеУслуги.Ссылка.СуммаВключаетНДС
	|			ТОГДА АгентскиеУслуги.Сумма
	|		ИНАЧЕ АгентскиеУслуги.Сумма + АгентскиеУслуги.СуммаНДС
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ &КорректировочныйСчетФактура
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА АгентскиеУслуги.Ссылка.СуммаВключаетНДС
	|					ТОГДА ВЫБОР
	|							КОГДА АгентскиеУслуги.Сумма - АгентскиеУслуги.СуммаДоИзменения > 0
	|								ТОГДА АгентскиеУслуги.Сумма - АгентскиеУслуги.СуммаДоИзменения
	|							ИНАЧЕ 0
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА АгентскиеУслуги.Сумма + АгентскиеУслуги.СуммаНДС - (АгентскиеУслуги.СуммаДоИзменения + АгентскиеУслуги.СуммаНДСДоИзменения) > 0
	|							ТОГДА АгентскиеУслуги.Сумма + АгентскиеУслуги.СуммаНДС - (АгентскиеУслуги.СуммаДоИзменения + АгентскиеУслуги.СуммаНДСДоИзменения)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ &КорректировочныйСчетФактура
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА АгентскиеУслуги.Ссылка.СуммаВключаетНДС
	|					ТОГДА ВЫБОР
	|							КОГДА АгентскиеУслуги.Сумма - АгентскиеУслуги.СуммаДоИзменения < 0
	|								ТОГДА АгентскиеУслуги.СуммаДоИзменения - АгентскиеУслуги.Сумма
	|							ИНАЧЕ 0
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА АгентскиеУслуги.Сумма + АгентскиеУслуги.СуммаНДС - (АгентскиеУслуги.СуммаДоИзменения + АгентскиеУслуги.СуммаНДСДоИзменения) < 0
	|							ТОГДА АгентскиеУслуги.СуммаДоИзменения + АгентскиеУслуги.СуммаНДСДоИзменения - (АгентскиеУслуги.Сумма + АгентскиеУслуги.СуммаНДС)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ &КорректировочныйСчетФактура
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА АгентскиеУслуги.СуммаНДС - АгентскиеУслуги.СуммаНДСДоИзменения > 0
	|					ТОГДА АгентскиеУслуги.СуммаНДС - АгентскиеУслуги.СуммаНДСДоИзменения
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ &КорректировочныйСчетФактура
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА АгентскиеУслуги.СуммаНДС - АгентскиеУслуги.СуммаНДСДоИзменения < 0
	|					ТОГДА АгентскиеУслуги.СуммаНДСДоИзменения - АгентскиеУслуги.СуммаНДС
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ
	|ИЗ
	|	Документ.КорректировкаПоступления.АгентскиеУслуги КАК АгентскиеУслуги
	|ГДЕ
	|	АгентскиеУслуги.Ссылка В(&ДокументыОснования)
	|ИТОГИ
	|	СУММА(СуммаУвеличение),
	|	СУММА(СуммаУменьшение),
	|	СУММА(СуммаНДСУвеличение),
	|	СУММА(СуммаНДСУменьшение),
	|	СУММА(СуммаДокумента),
	|	СУММА(СуммаНДСДокумента),
	|	СУММА(ЕстьНДС),
	|	СУММА(СуммаНДСДокументаКомиссия),
	|	СУММА(СуммаДокументаКомиссия),
	|	СУММА(СуммаУвеличениеКомиссия),
	|	СУММА(СуммаУменьшениеКомиссия),
	|	СУММА(СуммаНДСУвеличениеКомиссия),
	|	СУММА(СуммаНДСУменьшениеКомиссия)
	|ПО
	|	ОБЩИЕ,
	|	Документ";

КонецФункции

Функция ТекстЗапросаВыданныеСчетаФактурыПеревыставленныеКомитенту()
	
	Возврат 
	"ВЫБРАТЬ
	|	ОтчетКомитентуОПродажахПоставщики.ДатаСФ КАК ДатаСФ,
	|	СУММА(1) КАК Количество
	|ПОМЕСТИТЬ ВТ_КоличествоПоступленийПоСФ
	|ИЗ
	|	Документ.ОтчетКомитентуОПродажах.Поставщики КАК ОтчетКомитентуОПродажахПоставщики
	|ГДЕ
	|	ОтчетКомитентуОПродажахПоставщики.Ссылка В(&ДокументыОснования)
	|	И ОтчетКомитентуОПродажахПоставщики.ПолученСФ
	|	И ОтчетКомитентуОПродажахПоставщики.СчетФактура = &ТекущийДокумент
	|	И ОтчетКомитентуОПродажахПоставщики.Ссылка.ВыписыватьСчетаФактурыСводно
	|	И НЕ ОтчетКомитентуОПродажахПоставщики.Ссылка.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетКомитентуОПродажахПоставщики.ДатаСФ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаСФ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтчетКомитентуОПродажах.Ссылка КАК Ссылка,
	|	ОтчетКомитентуОПродажах.Ссылка.Организация КАК Организация,
	|	ОтчетКомитентуОПродажах.Ссылка.Контрагент КАК Контрагент,
	|	ОтчетКомитентуОПродажах.Ссылка.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_КоличествоПоступленийПоСФ.Количество, 1) > 1
	|			ТОГДА ОтчетКомитентуОПродажах.Ссылка.Контрагент
	|		ИНАЧЕ ОтчетКомитентуОПродажах.Поставщик
	|	КОНЕЦ КАК Продавец,
	|	ОтчетКомитентуОПродажах.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	ОтчетКомитентуОПродажах.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ОтчетКомитентуОПродажах.ДатаСФ КАК ДатаСФ,
	|	ОтчетКомитентуОПродажах.КлючСтроки КАК КлючСтроки,
	|	ОтчетКомитентуОПродажах.НомерСчетаФактуры КАК НомерСчетаФактурыПродавца,
	|	ОтчетКомитентуОПродажах.КПППоставщика КАК КПППродавца,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.ГосударственныйКонтракт.Код, """") КАК ИдентификаторГосКонтракта
	|ПОМЕСТИТЬ ВТ_ОтчетКомитентуОПродажах
	|ИЗ
	|	Документ.ОтчетКомитентуОПродажах.Поставщики КАК ОтчетКомитентуОПродажах
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КоличествоПоступленийПоСФ КАК ВТ_КоличествоПоступленийПоСФ
	|		ПО ОтчетКомитентуОПродажах.ДатаСФ = ВТ_КоличествоПоступленийПоСФ.ДатаСФ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО ОтчетКомитентуОПродажах.Ссылка.ДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
	|ГДЕ
	|	ОтчетКомитентуОПродажах.Ссылка В(&ДокументыОснования)
	|	И ОтчетКомитентуОПродажах.ПолученСФ
	|	И ОтчетКомитентуОПродажах.СчетФактура = &ТекущийДокумент
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	КлючСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетКомитентуОПродажахТовары.Ссылка КАК Ссылка,
	|	ОтчетКомитентуОПродажахТовары.КлючСтроки КАК КлючСтроки,
	|	СУММА(ОтчетКомитентуОПродажахТовары.Сумма) КАК Сумма,
	|	СУММА(ОтчетКомитентуОПродажахТовары.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ВЫБОР
	|			КОГДА ОтчетКомитентуОПродажахТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК ЕстьНДС
	|ПОМЕСТИТЬ ВТ_Суммы
	|ИЗ
	|	Документ.ОтчетКомитентуОПродажах.Товары КАК ОтчетКомитентуОПродажахТовары
	|ГДЕ
	|	ОтчетКомитентуОПродажахТовары.Ссылка В(&ДокументыОснования)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетКомитентуОПродажахТовары.Ссылка,
	|	ОтчетКомитентуОПродажахТовары.КлючСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	КлючСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОтчетКомитентуОПродажах.Организация КАК Организация,
	|	ВТ_ОтчетКомитентуОПродажах.Контрагент КАК Контрагент,
	|	ВТ_ОтчетКомитентуОПродажах.ДатаСФ КАК Дата,
	|	ВТ_ОтчетКомитентуОПродажах.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТ_ОтчетКомитентуОПродажах.ИдентификаторГосКонтракта,
	|	ВТ_ОтчетКомитентуОПродажах.Продавец КАК Продавец,
	|	СУММА(ВТ_Суммы.Сумма + ВЫБОР
	|			КОГДА ВТ_ОтчетКомитентуОПродажах.СуммаВключаетНДС
	|				ТОГДА 0
	|			ИНАЧЕ ВТ_Суммы.СуммаНДС
	|		КОНЕЦ) КАК СуммаДокумента,
	|	СУММА(ВТ_Суммы.СуммаНДС) КАК СуммаНДСДокумента,
	|	ВТ_ОтчетКомитентуОПродажах.ВалютаДокумента КАК ВалютаДокумента,
	|	СУММА(ВТ_Суммы.ЕстьНДС) КАК ЕстьНДС,
	|	ВТ_ОтчетКомитентуОПродажах.НомерСчетаФактурыПродавца,
	|	ВТ_ОтчетКомитентуОПродажах.КПППродавца,
	|	ВТ_Суммы.Сумма + ВЫБОР
	|		КОГДА ВТ_ОтчетКомитентуОПродажах.СуммаВключаетНДС
	|			ТОГДА 0
	|		ИНАЧЕ ВТ_Суммы.СуммаНДС
	|	КОНЕЦ КАК СуммаДокументаКомиссия,
	|	ВТ_Суммы.СуммаНДС КАК СуммаНДСДокументаКомиссия
	|ИЗ
	|	ВТ_ОтчетКомитентуОПродажах КАК ВТ_ОтчетКомитентуОПродажах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Суммы КАК ВТ_Суммы
	|		ПО ВТ_ОтчетКомитентуОПродажах.Ссылка = ВТ_Суммы.Ссылка
	|			И ВТ_ОтчетКомитентуОПродажах.КлючСтроки = ВТ_Суммы.КлючСтроки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ОтчетКомитентуОПродажах.Организация,
	|	ВТ_ОтчетКомитентуОПродажах.Контрагент,
	|	ВТ_ОтчетКомитентуОПродажах.ДатаСФ,
	|	ВТ_ОтчетКомитентуОПродажах.ДоговорКонтрагента,
	|	ВТ_ОтчетКомитентуОПродажах.Продавец,
	|	ВТ_ОтчетКомитентуОПродажах.ВалютаДокумента,
	|	ВТ_ОтчетКомитентуОПродажах.НомерСчетаФактурыПродавца,
	|	ВТ_ОтчетКомитентуОПродажах.КПППродавца,
	|	ВТ_Суммы.СуммаНДС,
	|	ВТ_Суммы.Сумма + ВЫБОР
	|		КОГДА ВТ_ОтчетКомитентуОПродажах.СуммаВключаетНДС
	|			ТОГДА 0
	|		ИНАЧЕ ВТ_Суммы.СуммаНДС
	|	КОНЕЦ,
	|	ВТ_ОтчетКомитентуОПродажах.ИдентификаторГосКонтракта";

КонецФункции

Функция ТекстЗапросаВыданныеСчетаФактурыПокупателямПоОтчетуКомиссионера()
	
	Возврат 
	"ВЫБРАТЬ
	|	ОтчетКомиссионераОПродажахПокупатели.ДатаСФ КАК ДатаСФ,
	|	СУММА(1) КАК Количество
	|ПОМЕСТИТЬ ВТ_КоличествоРеализацийПоСФ
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах.Покупатели КАК ОтчетКомиссионераОПродажахПокупатели
	|ГДЕ
	|	ОтчетКомиссионераОПродажахПокупатели.Ссылка В(&ДокументыОснования)
	|	И ОтчетКомиссионераОПродажахПокупатели.ВыставленСФ
	|	И ОтчетКомиссионераОПродажахПокупатели.СчетФактура = &ТекущийДокумент
	|	И ОтчетКомиссионераОПродажахПокупатели.Ссылка.ВыписыватьСчетаФактурыСводно
	|	И НЕ ОтчетКомиссионераОПродажахПокупатели.Ссылка.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетКомиссионераОПродажахПокупатели.ДатаСФ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаСФ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеквизитыДокумента.Ссылка КАК Ссылка,
	|	РеквизитыДокумента.Организация КАК Организация,
	|	РеквизитыДокумента.Контрагент КАК Контрагент,
	|	РеквизитыДокумента.ВалютаДокумента КАК ВалютаДокумента,
	|	РеквизитыДокумента.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_КоличествоРеализацийПоСФ.Количество, 1) > 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СводныйСФ
	|ПОМЕСТИТЬ ВТ_ОтчетКомиссионераОПродажах
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах.Покупатели КАК ОтчетКомиссионераОПродажах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионераОПродажах КАК РеквизитыДокумента
	|		ПО ОтчетКомиссионераОПродажах.Ссылка = РеквизитыДокумента.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КоличествоРеализацийПоСФ КАК ВТ_КоличествоРеализацийПоСФ
	|		ПО ОтчетКомиссионераОПродажах.ДатаСФ = ВТ_КоличествоРеализацийПоСФ.ДатаСФ
	|ГДЕ
	|	ОтчетКомиссионераОПродажах.Ссылка В(&ДокументыОснования)
	|	И ОтчетКомиссионераОПродажах.ВыставленСФ
	|	И ОтчетКомиссионераОПродажах.СчетФактура = &ТекущийДокумент
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.КлючСтроки КАК КлючСтроки,
	|	СУММА(ВложенныйЗапрос.Сумма) КАК Сумма,
	|	СУММА(ВложенныйЗапрос.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ВложенныйЗапрос.ЕстьНДС) КАК ЕстьНДС,
	|	СУММА(ВложенныйЗапрос.СуммаКомиссия) КАК СуммаКомиссия,
	|	СУММА(ВложенныйЗапрос.СуммаНДСКомиссия) КАК СуммаНДСКомиссия
	|ПОМЕСТИТЬ ВТ_Суммы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОтчетКомиссионераОПродажахТовары.КлючСтроки КАК КлючСтроки,
	|		ОтчетКомиссионераОПродажахТовары.Сумма КАК Сумма,
	|		ОтчетКомиссионераОПродажахТовары.СуммаНДС КАК СуммаНДС,
	|		ВЫБОР
	|			КОГДА ОтчетКомиссионераОПродажахТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ КАК ЕстьНДС,
	|		ВЫБОР
	|			КОГДА ОтчетКомиссионераОПродажахТовары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыПереданныеНаКомиссию)
	|				ТОГДА ОтчетКомиссионераОПродажахТовары.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаКомиссия,
	|		ВЫБОР
	|			КОГДА ОтчетКомиссионераОПродажахТовары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыПереданныеНаКомиссию)
	|				ТОГДА ОтчетКомиссионераОПродажахТовары.СуммаНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаНДСКомиссия
	|	ИЗ
	|		ВТ_ОтчетКомиссионераОПродажах КАК ВТ_ОтчетКомиссионераОПродажах
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионераОПродажах.Товары КАК ОтчетКомиссионераОПродажахТовары
	|			ПО ВТ_ОтчетКомиссионераОПродажах.Ссылка = ОтчетКомиссионераОПродажахТовары.Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтчетКомиссионераОПродажахУслуги.КлючСтроки,
	|		ОтчетКомиссионераОПродажахУслуги.Сумма,
	|		ОтчетКомиссионераОПродажахУслуги.СуммаНДС,
	|		ВЫБОР
	|			КОГДА ОтчетКомиссионераОПродажахУслуги.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ,
	|		0,
	|		0
	|	ИЗ
	|		ВТ_ОтчетКомиссионераОПродажах КАК ВТ_ОтчетКомиссионераОПродажах
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионераОПродажах.Услуги КАК ОтчетКомиссионераОПродажахУслуги
	|			ПО ВТ_ОтчетКомиссионераОПродажах.Ссылка = ОтчетКомиссионераОПродажахУслуги.Ссылка) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.КлючСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОтчетКомиссионераОПродажах.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ВТ_ОтчетКомиссионераОПродажах.СводныйСФ
	|			ТОГДА ВТ_ОтчетКомиссионераОПродажах.Контрагент
	|		ИНАЧЕ ОтчетКомиссионераОПродажахПокупатели.Покупатель
	|	КОНЕЦ КАК Контрагент,
	|	ОтчетКомиссионераОПродажахПокупатели.ДатаСФ КАК Дата,
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК ДоговорКонтрагента,
	|	"""" КАК ИдентификаторГосКонтракта,
	|	СУММА(ВТ_Суммы.Сумма + ВЫБОР
	|			КОГДА ВТ_ОтчетКомиссионераОПродажах.СуммаВключаетНДС
	|				ТОГДА 0
	|			ИНАЧЕ ВТ_Суммы.СуммаНДС
	|		КОНЕЦ) КАК СуммаДокумента,
	|	СУММА(ВТ_Суммы.СуммаНДС) КАК СуммаНДСДокумента,
	|	СУММА(ВТ_Суммы.ЕстьНДС) КАК ЕстьНДС,
	|	ВТ_ОтчетКомиссионераОПродажах.ВалютаДокумента КАК ВалютаДокумента,
	|	ВТ_Суммы.СуммаНДСКомиссия КАК СуммаНДСДокументаКомиссия,
	|	ВТ_Суммы.СуммаКомиссия + ВЫБОР
	|		КОГДА ВТ_ОтчетКомиссионераОПродажах.СуммаВключаетНДС
	|			ТОГДА 0
	|		ИНАЧЕ ВТ_Суммы.СуммаНДСКомиссия
	|	КОНЕЦ КАК СуммаДокументаКомиссия
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах.Покупатели КАК ОтчетКомиссионераОПродажахПокупатели
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ОтчетКомиссионераОПродажах КАК ВТ_ОтчетКомиссионераОПродажах
	|		ПО ОтчетКомиссионераОПродажахПокупатели.Ссылка = ВТ_ОтчетКомиссионераОПродажах.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Суммы КАК ВТ_Суммы
	|		ПО ОтчетКомиссионераОПродажахПокупатели.КлючСтроки = ВТ_Суммы.КлючСтроки
	|ГДЕ
	|	ОтчетКомиссионераОПродажахПокупатели.СчетФактура = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ОтчетКомиссионераОПродажах.ВалютаДокумента,
	|	ОтчетКомиссионераОПродажахПокупатели.ДатаСФ,
	|	ВТ_ОтчетКомиссионераОПродажах.Организация,
	|	ВТ_Суммы.СуммаНДСКомиссия,
	|	ВЫБОР
	|		КОГДА ВТ_ОтчетКомиссионераОПродажах.СводныйСФ
	|			ТОГДА ВТ_ОтчетКомиссионераОПродажах.Контрагент
	|		ИНАЧЕ ОтчетКомиссионераОПродажахПокупатели.Покупатель
	|	КОНЕЦ,
	|	ВТ_Суммы.СуммаКомиссия + ВЫБОР
	|		КОГДА ВТ_ОтчетКомиссионераОПродажах.СуммаВключаетНДС
	|			ТОГДА 0
	|		ИНАЧЕ ВТ_Суммы.СуммаНДСКомиссия
	|	КОНЕЦ";

КонецФункции

Функция ТекстЗапросаПодтверждениеНулевойСтавкиНДС()
	
	Возврат 
	"ВЫБРАТЬ
	|	ПодтверждениеНулевойСтавки.Ссылка.Организация КАК Организация,
	|	ПодтверждениеНулевойСтавки.Покупатель КАК Контрагент,
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК ДоговорКонтрагента,
	|	"""" КАК ИдентификаторГосКонтракта,
	|	СУММА(ПодтверждениеНулевойСтавки.ПродажиСНДС0 + ПодтверждениеНулевойСтавки.СуммаНДС) КАК СуммаДокумента,
	|	СУММА(ПодтверждениеНулевойСтавки.СуммаНДС) КАК СуммаНДСДокумента,
	|	СУММА(0) КАК СуммаДокументаКомиссия,
	|	СУММА(0) КАК СуммаНДСДокументаКомиссия,
	|	&ВалютаРегламентированногоУчета КАК ВалютаДокумента,
	|	ИСТИНА КАК ЕстьНДС
	|ИЗ
	|	Документ.ПодтверждениеНулевойСтавкиНДС.Состав КАК ПодтверждениеНулевойСтавки
	|ГДЕ
	|	ПодтверждениеНулевойСтавки.Ссылка В(&ДокументыОснования)
	|	И ПодтверждениеНулевойСтавки.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПродажи.НеПодтвержденаСтавка0)
	|	И ПодтверждениеНулевойСтавки.СчетФактураВыданный = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	ПодтверждениеНулевойСтавки.Ссылка.Организация,
	|	ПодтверждениеНулевойСтавки.Покупатель";
	
	
КонецФункции

Функция ТекстЗапросаОказаниеУслуг()
	
	Возврат 
	"ВЫБРАТЬ
	|	ОказаниеУслуг.Ссылка.Организация КАК Организация,
	|	ОказаниеУслуг.Контрагент КАК Контрагент,
	|	ОказаниеУслуг.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.ГосударственныйКонтракт.Код, """") КАК ИдентификаторГосКонтракта,
	|	СУММА(ОказаниеУслуг.Сумма + ВЫБОР
	|			КОГДА ОказаниеУслуг.Ссылка.СуммаВключаетНДС
	|				ТОГДА 0
	|			ИНАЧЕ ОказаниеУслуг.СуммаНДС
	|		КОНЕЦ) КАК СуммаДокумента,
	|	&ВалютаРегламентированногоУчета КАК ВалютаДокумента,
	|	СУММА(ОказаниеУслуг.СуммаНДС) КАК СуммаНДСДокумента,
	|	СУММА(0) КАК СуммаДокументаКомиссия,
	|	СУММА(0) КАК СуммаНДСДокументаКомиссия,
	|	ВЫБОР
	|		КОГДА ОказаниеУслуг.Ссылка.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЕстьНДС
	|ИЗ
	|	Документ.ОказаниеУслуг.Контрагенты КАК ОказаниеУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО ОказаниеУслуг.ДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
	|ГДЕ
	|	ОказаниеУслуг.Ссылка В(&ДокументыОснования)
	|	И ОказаниеУслуг.ВыданСФ
	|	И ОказаниеУслуг.СчетФактура = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	ОказаниеУслуг.Контрагент,
	|	ОказаниеУслуг.ДоговорКонтрагента,
	|	ОказаниеУслуг.Ссылка.Организация,
	|	ОказаниеУслуг.СуммаНДС,
	|	ВЫБОР
	|		КОГДА ОказаниеУслуг.Ссылка.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.ГосударственныйКонтракт.Код, """")";

КонецФункции

Функция ТекстЗапросаАвансовыйОтчет()
	
	Возврат 
	"ВЫБРАТЬ
	|	АвансовыйОтчетПрочее.Ссылка.Организация КАК Организация,
	|	АвансовыйОтчетПрочее.Поставщик КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО КАК ДоговорКонтрагента,
	|	"""" КАК ИдентификаторГосКонтракта,
	|	СУММА(АвансовыйОтчетПрочее.Сумма + ВЫБОР
	|			КОГДА АвансовыйОтчетПрочее.Ссылка.СуммаВключаетНДС
	|				ТОГДА 0
	|			ИНАЧЕ АвансовыйОтчетПрочее.СуммаНДС
	|		КОНЕЦ) КАК СуммаДокумента,
	|	АвансовыйОтчетПрочее.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	СУММА(АвансовыйОтчетПрочее.СуммаНДС) КАК СуммаНДСДокумента,
	|	СУММА(0) КАК СуммаДокументаКомиссия,
	|	СУММА(0) КАК СуммаНДСДокументаКомиссия,
	|	ВЫБОР
	|		КОГДА АвансовыйОтчетПрочее.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЕстьНДС
	|ИЗ
	|	Документ.АвансовыйОтчет.Прочее КАК АвансовыйОтчетПрочее
	|ГДЕ
	|	АвансовыйОтчетПрочее.Ссылка В(&ДокументыОснования)
	|	И АвансовыйОтчетПрочее.ПредъявленСФ
	|	И АвансовыйОтчетПрочее.СчетФактура = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчетПрочее.Поставщик,
	|	АвансовыйОтчетПрочее.Ссылка.ВалютаДокумента,
	|	АвансовыйОтчетПрочее.Ссылка.Организация,
	|	ВЫБОР
	|		КОГДА АвансовыйОтчетПрочее.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АвансовыйОтчетТовары.Ссылка.Организация,
	|	АвансовыйОтчетТовары.Поставщик,
	|	НЕОПРЕДЕЛЕНО,
	|	"""" КАК ИдентификаторГосКонтракта,
	|	СУММА(АвансовыйОтчетТовары.Сумма + ВЫБОР
	|			КОГДА АвансовыйОтчетТовары.Ссылка.СуммаВключаетНДС
	|				ТОГДА 0
	|			ИНАЧЕ АвансовыйОтчетТовары.СуммаНДС
	|		КОНЕЦ),
	|	АвансовыйОтчетТовары.Ссылка.ВалютаДокумента,
	|	СУММА(АвансовыйОтчетТовары.СуммаНДС),
	|	0,
	|	0,
	|	ВЫБОР
	|		КОГДА АвансовыйОтчетТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ
	|ИЗ
	|	Документ.АвансовыйОтчет.Товары КАК АвансовыйОтчетТовары
	|ГДЕ
	|	АвансовыйОтчетТовары.Ссылка В(&ДокументыОснования)
	|	И АвансовыйОтчетТовары.СчетФактура = &ТекущийДокумент
	|	И АвансовыйОтчетТовары.ПредъявленСФ
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчетТовары.Поставщик,
	|	АвансовыйОтчетТовары.Ссылка.ВалютаДокумента,
	|	АвансовыйОтчетТовары.Ссылка.Организация,
	|	ВЫБОР
	|		КОГДА АвансовыйОтчетТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ";

КонецФункции

Функция ТекстЗапросаНаОснованииМетаданных(ДокументыОснования, ЭтоПолученныйСФ, ПараметрыЗапроса, ТипДокументаОснования)

	ИгнорироватьТЧ = Новый Массив;
	ИгнорироватьТЧ.Добавить("ВозвратнаяТара");
	ИгнорироватьТЧ.Добавить("ВыданныеАвансы");
	ИгнорироватьТЧ.Добавить("ДенежныеСредства");
	
	МетаданныеДокумента = ДокументыОснования[0].Метаданные();

	ИмяОбъекта = МетаданныеДокумента.Имя;
	ПараметрыЗапроса.Вставить("ДокументОснование_" + ИмяОбъекта, ДокументыОснования);

	ПостфиксСумм = "";
	ТекстЗапросаКомиссияПустой	= "0 КАК СуммаДокументаКомиссия, 0 КАК СуммаНДСДокументаКомиссия,";
	ТекстЗапросаКомиссияПоСчету = "0 КАК СуммаДокументаКомиссия, 0 КАК СуммаНДСДокументаКомиссия,";
	ТекстЗапросаКомиссия		= "0 КАК СуммаДокументаКомиссия, 0 КАК СуммаНДСДокументаКомиссия,";
	Множитель = 1;
	ИмяРеквизитаСтавкаНДС = "СтавкаНДС";
		
	Если ТипДокументаОснования = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")
		ИЛИ ТипДокументаОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") И ЭтоПолученныйСФ Тогда

		ПостфиксСумм = "Вознаграждения";
		ИмяРеквизитаСтавкаНДС = "Ссылка.СтавкаНДСВознаграждения";
	ИначеЕсли ТипДокументаОснования = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") И НЕ ЭтоПолученныйСФ
		ИЛИ ТипДокументаОснования = Тип("ДокументСсылка.ВозвратТоваровПоставщику") И ЭтоПолученныйСФ Тогда

		Множитель = - 1;
	ИначеЕсли ТипДокументаОснования = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		ТекстЗапросаКомиссияПоСчету =
		" СУММА(ВЫБОР
		|			КОГДА Таблица.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТМЦПринятыеНаОтветственноеХранение)
		|					И Таблица.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|				ТОГДА Таблица.Сумма + ВЫБОР
		|						КОГДА Таблица.Ссылка.СуммаВключаетНДС
		|							ТОГДА 0
		|						ИНАЧЕ Таблица.СуммаНДС
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаДокументаКомиссия,
		|	СУММА(ВЫБОР
		|			КОГДА Таблица.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТМЦПринятыеНаОтветственноеХранение)
		|					И Таблица.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|				ТОГДА Таблица.СуммаНДС
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаНДСДокументаКомиссия,";
		
		ТекстЗапросаКомиссия = 
		" СУММА(Таблица.Сумма + ВЫБОР
		|					КОГДА Таблица.Ссылка.СуммаВключаетНДС
		|						ТОГДА 0
		|					ИНАЧЕ Таблица.СуммаНДС КОНЕЦ) КАК СуммаДокументаКомиссия,
		| СУММА(Таблица.СуммаНДС) КАК СуммаНДСДокументаКомиссия,";
				
	ИначеЕсли ТипДокументаОснования = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		ТекстЗапросаКомиссияПоСчету = 
		" СУММА(ВЫБОР КОГДА Таблица.СчетУчета = Значение(ПланСчетов.Хозрасчетный.ТоварыНаСкладе)
		|						ИЛИ Таблица.СчетУчета = Значение(ПланСчетов.Хозрасчетный.ТоварыПереданныеНаКомиссию)
		|					ТОГДА Таблица.Сумма + ВЫБОР
		|						КОГДА Таблица.Ссылка.СуммаВключаетНДС
		|					ТОГДА 0
		|					ИНАЧЕ Таблица.СуммаНДС КОНЕЦ
		|				ИНАЧЕ 0 КОНЕЦ) КАК СуммаДокументаКомиссия,
		| СУММА(ВЫБОР КОГДА Таблица.СчетУчета = Значение(ПланСчетов.Хозрасчетный.ТоварыНаСкладе)
		|						ИЛИ Таблица.СчетУчета = Значение(ПланСчетов.Хозрасчетный.ТоварыПереданныеНаКомиссию) 
		|					ТОГДА Таблица.СуммаНДС  ИНАЧЕ 0 КОНЕЦ) КАК СуммаНДСДокументаКомиссия,";
		
		ТекстЗапросаКомиссия = 
		" СУММА(Таблица.Сумма + ВЫБОР
		|					КОГДА Таблица.Ссылка.СуммаВключаетНДС
		|						ТОГДА 0
		|					ИНАЧЕ Таблица.СуммаНДС КОНЕЦ) КАК СуммаДокументаКомиссия,
		| СУММА(Таблица.СуммаНДС) КАК СуммаНДСДокументаКомиссия,";

	КонецЕсли;

	ТекстЗапроса = "";

	ТекстСекцииПоместить = "";
	
	Если ЭтоПолученныйСФ Тогда 
		ТекстИдентификаторГосКонтракта = """""";
	Иначе
		ТекстИдентификаторГосКонтракта = "ЕСТЬNULL(ДоговорыКонтрагентов.ГосударственныйКонтракт.Код, """")";
	КонецЕсли;
	
	Для каждого МетаданныеТЧ Из МетаданныеДокумента.ТабличныеЧасти Цикл
		Если ИгнорироватьТЧ.Найти(МетаданныеТЧ.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если МетаданныеТЧ.Реквизиты.Найти("Сумма") = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если МетаданныеТЧ.Имя = "Товары" Тогда
			ТекстСуммыКомиссии = ТекстЗапросаКомиссияПоСчету;
		ИначеЕсли МетаданныеТЧ.Имя = "АгентскиеУслуги" Тогда
			ТекстСуммыКомиссии = ТекстЗапросаКомиссия;
		Иначе 
			ТекстСуммыКомиссии = ТекстЗапросаКомиссияПустой;
		КонецЕсли;
		
		МножительПоТабличнойЧасти = Множитель;
		Если МетаданныеТЧ.Имя = "ТоварыВозвращенные" Тогда
			МножительПоТабличнойЧасти = -1;
		КонецЕсли;
		
		ПараметрыЗапроса.Вставить("Множитель_" + ИмяОбъекта + "_" + МетаданныеТЧ.Имя, МножительПоТабличнойЧасти);
		
		Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + Символы.ПС + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС;
			ТекстСекцииПоместить = "";
		КонецЕсли;

		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	Таблица.Ссылка.Организация КАК Организация,
		|	Таблица.Ссылка.Контрагент КАК Контрагент,
		|	Таблица.Ссылка.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	" + ТекстИдентификаторГосКонтракта + " КАК ИдентификаторГосКонтракта,
		|	СУММА(Таблица.Сумма" + ПостфиксСумм + " + ВЫБОР
		|			КОГДА Таблица.Ссылка.СуммаВключаетНДС
		|				ТОГДА 0
		|			ИНАЧЕ Таблица.СуммаНДС" + ПостфиксСумм + "
		|		КОНЕЦ) * &Множитель_" + ИмяОбъекта + "_" + МетаданныеТЧ.Имя + " КАК СуммаДокумента,
		|	Таблица.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
		|	СУММА(Таблица.СуммаНДС" + ПостфиксСумм + ") * &Множитель_" + ИмяОбъекта + "_" + МетаданныеТЧ.Имя + " КАК СуммаНДСДокумента,
		| " + ТекстСуммыКомиссии + "
		|	СУММА(ВЫБОР
		|			КОГДА Таблица." + ИмяРеквизитаСтавкаНДС + " = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК ЕстьНДС
		| " + ТекстСекцииПоместить + "
		|ИЗ
		|	Документ." + МетаданныеДокумента.Имя + "." + МетаданныеТЧ.Имя + " КАК Таблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ПО Таблица.Ссылка.ДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
		|ГДЕ
		|	Таблица.Ссылка В (&ДокументОснование_" + ИмяОбъекта + ") 
		|
		|СГРУППИРОВАТЬ ПО
		|	Таблица.Ссылка,
		|	Таблица.Ссылка.Организация,
		|	Таблица.Ссылка.Контрагент,
		|	Таблица.Ссылка.ДоговорКонтрагента,
		|	" + ТекстИдентификаторГосКонтракта + ",
		|	Таблица.Ссылка.ВалютаДокумента";
	КонецЦикла;

	Если НЕ ЗначениеЗаполнено(ТекстЗапроса) Тогда // в документе не оказалось табличных частей

		Если МетаданныеДокумента.Реквизиты.Найти("СуммаНДС") <> Неопределено Тогда

			ТекстЗапроса =
			"ВЫБРАТЬ
			|	ДокОснование.Организация КАК Организация,
			|	ДокОснование.Контрагент КАК Контрагент,
			|	ДокОснование.ДоговорКонтрагента КАК ДоговорКонтрагента,
			|	" + ТекстИдентификаторГосКонтракта + " КАК ИдентификаторГосКонтракта,
			|	СУММА(ДокОснование.Сумма + ВЫБОР
			|			КОГДА ДокОснование.Ссылка.СуммаВключаетНДС
			|				ТОГДА 0
			|			ИНАЧЕ ДокОснование.СуммаНДС
			|		КОНЕЦ) КАК СуммаДокумента,
			|	&ВалютаРегламентированногоУчета КАК ВалютаДокумента,
			|	ДокОснование.СуммаНДС КАК СуммаНДСДокумента,
			|	0 КАК СуммаДокументаКомиссия, 
			|	0 КАК СуммаНДСДокументаКомиссия, 
			|	ВЫБОР
			|		КОГДА ДокОснование.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
			|			ТОГДА 0
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК ЕстьНДС
			|ИЗ
			|	Документ." + МетаданныеДокумента.Имя + " КАК ДокОснование
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
			|		ПО ДокОснование.ДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
			|ГДЕ
			|	ДокОснование.Ссылка В (&ДокументОснование_" + МетаданныеДокумента.Имя + ")
			|
			|СГРУППИРОВАТЬ ПО
			|	ДокОснование.Ссылка,
			|	ДокОснование.ДоговорКонтрагента,
			|	" + ТекстИдентификаторГосКонтракта + ",
			|	ДокОснование.СуммаНДС,
			|	ДокОснование.Организация,
			|	ДокОснование.Контрагент,
			|	ВЫБОР
			|		КОГДА ДокОснование.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
			|			ТОГДА 0
			|		ИНАЧЕ 1
			|	КОНЕЦ";

		Иначе

			Если (ТипДокументаОснования = Тип("ДокументСсылка.ОтчетКомитентуОПродажах"))
				или ((ТипДокументаОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")) И ЭтоПолученныйСФ) Тогда
				ИдРеквСумма = "СуммаВознаграждения";
			ИначеЕсли (ТипДокументаОснования = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") И не ЭтоПолученныйСФ) тогда
				ИдРеквСумма = "СуммаДокумента*(-1)";
			ИначеЕсли (ТипДокументаОснования = Тип("ДокументСсылка.ВозвратТоваровПоставщику") И ЭтоПолученныйСФ) тогда
				ИдРеквСумма = "СуммаДокумента*(-1)";
			Иначе
				ИдРеквСумма = "СуммаДокумента";
			КонецЕсли;

			ИмяОбъекта = МетаданныеДокумента.Имя;

			ТекстЗапроса =
			"ВЫБРАТЬ "
			+ ИмяОбъекта + ".Организация,"
			+ ?(МетаданныеДокумента.Реквизиты.Найти("Контрагент") <> Неопределено,
					ИмяОбъекта + ".Контрагент,",
					"НЕОПРЕДЕЛЕНО КАК Контрагент,")
			+ ?(МетаданныеДокумента.Реквизиты.Найти("ДоговорКонтрагента") <> Неопределено,
					ИмяОбъекта + ".ДоговорКонтрагента КАК ДоговорКонтрагента,",
					"НЕОПРЕДЕЛЕНО КАК ДоговорКонтрагента,")
			+ """"" КАК ИдентификаторГосКонтракта,"
			+ ?(МетаданныеДокумента.Реквизиты.Найти(ИдРеквСумма) <> Неопределено,
					ИмяОбъекта + "." + ИдРеквСумма + " Как СуммаДокумента,",
					"0 Как СуммаДокумента,")
			+ ?(МетаданныеДокумента.Реквизиты.Найти("ВалютаДокумента") <> Неопределено,
					ИмяОбъекта + ".ВалютаДокумента Как ВалютаДокумента,",
					"НЕОПРЕДЕЛЕНО КАК ВалютаДокумента,")
			+ "0 Как СуммаДокументаКомиссия,"
			+ "0 Как СуммаНДСДокументаКомиссия,"
			+ "0 Как СуммаНДСДокумента,"
			+ "1 Как ЕстьНДС
			|ИЗ
			|	Документ." + ИмяОбъекта + " КАК " + ИмяОбъекта + "
			|ГДЕ
			|	" + ИмяОбъекта + ".Ссылка В (&ДокументОснование_" + ИмяОбъекта + ")";

		КонецЕсли;

	КонецЕсли;

	Если МетаданныеДокумента.Реквизиты.Найти("ПодразделениеОрганизации") = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Таблица.Ссылка.ПодразделениеОрганизации", "Неопределено");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДокументОснование.ПодразделениеОрганизации", "Неопределено");
	КонецЕсли;
	
	Если ТипДокументаОснования = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		ТекстЗапросаИсключениеНалоговогоАгента = 
		"ВЫБРАТЬ
		|	НДСЗаписиКнигиПродаж.Организация КАК Организация,
		|	НДСЗаписиКнигиПродаж.Покупатель КАК Контрагент,
		|	РеализацияТоваровУслуг.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	"""" КАК ИдентификаторГосКонтракта,
		|	0 КАК СуммаДокумента,
		|	РеализацияТоваровУслуг.ВалютаДокумента КАК ВалютаДокумента,
		|	0 КАК СуммаНДСДокумента,
		|	-СУММА(НДСЗаписиКнигиПродаж.СуммаБезНДС + НДСЗаписиКнигиПродаж.НДС) КАК СуммаДокументаКомиссия,
		|	-СУММА(НДСЗаписиКнигиПродаж.НДС) КАК СуммаНДСДокументаКомиссия,
		|	1 КАК ЕстьНДС
		|ИЗ
		|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ПО НДСЗаписиКнигиПродаж.Регистратор = РеализацияТоваровУслуг.Ссылка
		|ГДЕ
		|	НДСЗаписиКнигиПродаж.Активность
		|	И НДСЗаписиКнигиПродаж.Регистратор В(&ДокументыОснования)
		|	И НДСЗаписиКнигиПродаж.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НалоговыйАгентКомитент)
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСЗаписиКнигиПродаж.Покупатель,
		|	НДСЗаписиКнигиПродаж.Организация,
		|	РеализацияТоваровУслуг.ДоговорКонтрагента,
		|	РеализацияТоваровУслуг.ВалютаДокумента";
		
		Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + Символы.ПС + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС 
			+ ТекстЗапросаИсключениеНалоговогоАгента + Символы.ПС + Символы.ПС;
		КонецЕсли;
		
	КонецЕсли;

	Возврат ТекстЗапроса;

КонецФункции

#КонецОбласти
