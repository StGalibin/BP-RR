#Область ОбработчикиСобытийФормы

Процедура ПриОткрытии(Форма, Отказ) Экспорт
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(Форма);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
КонецПроцедуры

Процедура ПередЗаписью(Форма, Отказ, ПараметрыЗаписи) Экспорт
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "ПроведениеПриходныйКассовыйОрдер";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеЗаписи(Форма, ПараметрыЗаписи) Экспорт
	
	Объект = Форма.Объект;
	
	Оповестить("ОбновитьФорму", Форма.ВладелецФормы, Объект.Ссылка);
	
	Если ПараметрыЗаписи.Свойство("ОплаченныеСчета") И ПараметрыЗаписи.ОплаченныеСчета.Количество() > 0 Тогда
		ОповеститьОбИзменении(Тип("ДокументСсылка.СчетНаОплатуПокупателю"));
		Оповестить("ИзмененСтатусДокументов", ПараметрыЗаписи.ОплаченныеСчета, Объект.Ссылка);
	КонецЕсли;
	
	Оповестить("Запись_ПриходныйКассовыйОрдер", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийРеквизитовШапки

Процедура ВидОперацииАвтоПодбор(Форма, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка) Экспорт
	
	Объект = Форма.Объект;
	Если Ожидание = 0 Тогда
		СтандартнаяОбработка = Ложь;
		ОплатаПокупателя = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ОплатаПокупателя");
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.Добавить(ОплатаПокупателя);
		Если ЗначениеЗаполнено(Объект.ВидОперации) И Объект.ВидОперации <> ОплатаПокупателя Тогда
			ДанныеВыбора.Добавить(Объект.ВидОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура КонтрагентОкончаниеВводаТекста(Форма, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка) Экспорт
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура КонтрагентОбработкаВыбора(Форма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПодразделениеОрганизацииПриИзменении(Форма, Элемент) Экспорт
	
	ПриходныйКассовыйОрдерФормыКлиентСервер.УстановитьПодразделениеКт(Форма);
	
КонецПроцедуры

Процедура ПринятоОтНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = ОткрытьФорму("Справочник.ФизическиеЛица.ФормаСписка",
		Новый Структура("РежимВыбора", Истина), Элемент);
	
КонецПроцедуры

Процедура ПринятоОтОбработкаВыбора(Форма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ПриходныйКассовыйОрдерФормыКлиентСервер.ФормированиеПринятоОт(Форма, ВыбранноеЗначение);
	
	Модифицированность = Истина;
	
	ПриходныйКассовыйОрдерФормыКлиентСервер.ЗаголовокГруппыРеквизитовПечатнойФормы(Форма);
	
КонецПроцедуры

Процедура СуммаДокументаПриИзменении(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Если Объект.РасшифровкаПлатежа.Количество() <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПриходныйКассовыйОрдерФормыКлиентСервер.ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
		СтрокаПлатеж = ПриходныйКассовыйОрдерФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма);
		СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
		ПриходныйКассовыйОрдерФормыКлиентСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);
		ПриходныйКассовыйОрдерФормыКлиентСервер.РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, Форма);
		ПриходныйКассовыйОрдерФормыКлиентСервер.ЗаполнитьОтражениеСтрокиВУСН(СтрокаПлатеж, Форма);
		ПриходныйКассовыйОрдерФормыКлиентСервер.ОбновитьИтогиУСН(Форма);
		ПриходныйКассовыйОрдерФормыКлиентСервер.ОбновитьИтоги(Форма);
	Иначе
		СтрокаПлатеж = ПриходныйКассовыйОрдерФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма);
		СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
		ПриходныйКассовыйОрдерФормыКлиентСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);
		ПриходныйКассовыйОрдерФормыКлиентСервер.ОбновитьИтоги(Форма);
		Если Форма.ПрименениеУСН И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ПрочийПриход") Тогда
			ПриходныйКассовыйОрдерФормыКлиентСервер.СформироватьПрочееТекстДоходыУСН(Форма);
		КонецЕсли;
	КонецЕсли;
	
	Если ПриходныйКассовыйОрдерФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
		ПриходныйКассовыйОрдерФормыКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(Форма, Истина, СтрокаПлатеж);
	КонецЕсли;
	
КонецПроцедуры

Процедура СчетУчетаПриИзменении(Форма) Экспорт
	
	Объект = Форма.Объект;
	Если Форма.ПрименениеУСН Тогда
		ПриходныйКассовыйОрдерФормыКлиентСервер.СформироватьПрочееТекстДоходыУСН(Форма);
	КонецЕсли;
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
		Форма, Объект, ПриходныйКассовыйОрдерФормыКлиентСервер.ПараметрыУстановкиСвойствСубконто(Форма));
	
КонецПроцедуры

Процедура СубконтоКт1ПриИзменении(Форма, Элемент) Экспорт
	
	Объект = Форма.Объект;
	Если ЗначениеЗаполнено(Объект.СубконтоКт1) Тогда
		
		Если ТипЗнч(Объект.СубконтоКт1) = Тип("СправочникСсылка.Контрагенты") Тогда
			НаименованиеКонтрагента = ПриходныйКассовыйОрдерФормыВызовСервера.НаименованиеКонтрагента(Объект.СубконтоКт1);
			Объект.ПринятоОт = ?(ПустаяСтрока(НаименованиеКонтрагента.НаименованиеПолное),
				НаименованиеКонтрагента.Наименование, НаименованиеКонтрагента.НаименованиеПолное);
		ИначеЕсли ТипЗнч(Объект.СубконтоКт1) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			ПриходныйКассовыйОрдерФормыКлиентСервер.ФормированиеПринятоОт(Форма, Объект.СубконтоКт1);
		КонецЕсли;
		
	КонецЕсли;
	
	ПриИзмененииСубконто(Форма, 1);
	
КонецПроцедуры

Процедура СубконтоКт2ПриИзменении(Форма, Элемент) Экспорт
	
	ПриИзмененииСубконто(Форма, 2);
	
КонецПроцедуры

Процедура СубконтоКт3ПриИзменении(Форма, Элемент) Экспорт
	
	ПриИзмененииСубконто(Форма, 3);
	
КонецПроцедуры

Процедура СубконтоКт1НачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	НачалоВыбораСубконто(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СубконтоКт2НачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	НачалоВыбораСубконто(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СубконтоКт3НачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	НачалоВыбораСубконто(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПрочееДоходыУСНПриИзменении(Форма, Элемент) Экспорт
	
	ПриходныйКассовыйОрдерФормыКлиентСервер.СформироватьПрочееТекстДоходыУСН(Форма);
	
КонецПроцедуры

Процедура РозничнаяВыручкаРасходыУСНПриИзменении(Форма, Элемент) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Объект.Графа7_УСН = 0 Тогда
		Форма.Объект.НДС_УСН = 0;
	КонецЕсли;
	
	Элементы.РозничнаяВыручкаНДСУСН.Доступность = Объект.Графа7_УСН <> 0;
	
КонецПроцедуры

Процедура ПринятоОтПриИзменении(Форма, Элемент) Экспорт
	
	ПриходныйКассовыйОрдерФормыКлиентСервер.ЗаголовокГруппыРеквизитовПечатнойФормы(Форма);
	
КонецПроцедуры

Процедура ОснованиеПриИзменении(Форма, Элемент) Экспорт
	
	ПриходныйКассовыйОрдерФормыКлиентСервер.ЗаголовокГруппыРеквизитовПечатнойФормы(Форма);
	
КонецПроцедуры

Процедура ПриложениеПриИзменении(Форма, Элемент) Экспорт
	
	ПриходныйКассовыйОрдерФормыКлиентСервер.ЗаголовокГруппыРеквизитовПечатнойФормы(Форма);
	
КонецПроцедуры

Процедура РеквизитыОрганизацииСсылкаОбработкаНавигационнойСсылки(Форма, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка) Экспорт
	
	Объект = Форма.Объект;
	ПроверкаРеквизитовОрганизацииКлиент.РеквизитыОрганизацииСсылкаОбработкаНавигационнойСсылки(Объект.Организация, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура КонтрагентАвтоПодбор(Форма, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка) Экспорт
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыРасшифровкаПлатежа

Процедура РасшифровкаПлатежаПриИзменении(Форма, Элемент) Экспорт
	
	Объект = Форма.Объект;
	РасшифровкаПлатежа = ПриходныйКассовыйОрдерФормыКлиентСервер.ПолучитьРасшифровкаПлатежа(Форма);
	
	Объект.СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
	ПриходныйКассовыйОрдерФормыКлиентСервер.ОбновитьИтоги(Форма);
	ПриходныйКассовыйОрдерФормыКлиентСервер.ОбновитьИтогиУСН(Форма);
	ПриходныйКассовыйОрдерФормыКлиентСервер.ОпределитьНаличиеРасчетовВУсловныхЕдиницах(Форма);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПриОкончанииРедактирования(Форма, Элемент, НоваяСтрока, ОтменаРедактирования) Экспорт
	
	Объект = Форма.Объект;
	Если НоваяСтрока И ОтменаРедактирования Тогда
		РасшифровкаПлатежа = ПриходныйКассовыйОрдерФормыКлиентСервер.ПолучитьРасшифровкаПлатежа(Форма);
		Объект.СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
		ПриходныйКассовыйОрдерФормыКлиентСервер.ОбновитьИтоги(Форма);
		ПриходныйКассовыйОрдерФормыКлиентСервер.ОбновитьИтогиУСН(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПередУдалением(Форма, Элемент, Отказ) Экспорт
	
	РасшифровкаПлатежа = ПриходныйКассовыйОрдерФормыКлиентСервер.ПолучитьРасшифровкаПлатежа(Форма);
	
	Отказ = РасшифровкаПлатежа.Количество() = 1;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПриНачалеРедактирования(Форма, Элемент, НоваяСтрока, Копирование) Экспорт
	
	Элементы = Форма.Элементы;
	
	СтрокаПлатеж = ПриходныйКассовыйОрдерФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма);
	
	ПриходныйКассовыйОрдерФормыКлиентСервер.ИнициализироватьСвойстваПлатежа(Форма);
	Если НоваяСтрока И НЕ Копирование Тогда
		ЗаполнитьЗначенияСвойств(СтрокаПлатеж, Форма.СвойстваПлатежа);
		Если Форма.ПрименениеУСН ИЛИ Форма.ПрименяетсяУСНПатент Тогда
			СтрокаПлатеж.ПолеОтражениеАванса    = УчетУСНКлиентСервер.ПредставлениеПорядкаОтраженияАванса(СтрокаПлатеж.ПорядокОтраженияАванса,
				Форма.ПорядокОтраженияАвансаСоответствиеЗначений, Элементы.РасшифровкаПлатежаПолеОтражениеАванса.СписокВыбора);
		КонецЕсли;
	КонецЕсли;
	
	Если НоваяСтрока И Форма.ЕстьРасчетыВУсловныхЕдиницах Тогда
		ПриходныйКассовыйОрдерФормыКлиентСервер.ЗаполнитьНадписиВРасшифровке(СтрокаПлатеж);
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДоговорКонтрагентаОткрытие(Форма, Элемент, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	ТекущиеДанные = ПриходныйКассовыйОрдерФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма);
	
	ЗначенияЗаполнения = Новый Структура;
	ВидыДоговора   = УчетДенежныхСредствКлиентСервер.ОпределитьВидДоговораСКонтрагентом(Объект.ВидОперации);
	ЗначенияЗаполнения.Вставить("Организация", Объект.Организация);
	ЗначенияЗаполнения.Вставить("Владелец", Объект.Контрагент);
	ЗначенияЗаполнения.Вставить("ВидДоговора", Новый ФиксированныйМассив(ВидыДоговора));
	
	ЗначенияЗаполнения.Вставить("ОплатаВВалюте", Форма.ОплатаВВалюте);
	
	Если Форма.ОплатаВВалюте ИЛИ НЕ ПриходныйКассовыйОрдерФормыКлиентСервер.ДокументМожетБытьОформленВВалюте(Объект.ВидОперации) Тогда
		ЗначенияЗаполнения.Вставить("ВалютаВзаиморасчетов", Объект.ВалютаДокумента);
		ЗначенияЗаполнения.Вставить("Валютный", Форма.ОплатаВВалюте);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ТекущиеДанные.ДоговорКонтрагента);
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", ПараметрыФормы, Форма);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДоговорКонтрагентаОбработкаВыбора(Форма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	Объект = Форма.Объект;
	
	ПараметрыДоговора = Новый Структура;
	ПараметрыДоговора.Вставить("Организация", Объект.Организация);
	ПараметрыДоговора.Вставить("Владелец", Объект.Контрагент);
	ПараметрыДоговора.Вставить("ВидДоговора", ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
	
	РаботаСДоговорамиКонтрагентовБПКлиент.ДоговорОбработкаВыбора(Элемент, ВыбранноеЗначение, ПараметрыДоговора, СтандартнаяОбработка);
КонецПроцедуры

Процедура РасшифровкаПлатежаДоговорКонтрагентаАвтоПодбор(Форма, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка) Экспорт
	
	РаботаСДоговорамиКонтрагентовБПКлиент.ЗаполнитьСписокВыбора(Элемент, Текст, Форма.ПредлагатьНовыйДоговор, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСтатьяДвиженияДенежныхСредствПриИзменении(Форма, Элемент) Экспорт
	
	Элементы = Форма.Элементы;
	СтрокаПлатеж = ПриходныйКассовыйОрдерФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма);
	
	ПриходныйКассовыйОрдерФормыКлиентСервер.ИнициализироватьСвойстваПлатежа(Форма); // Только создаем структуру, если она еще не создана.
	
	Если СтрокаПлатеж.СтатьяДвиженияДенежныхСредств <> Форма.СвойстваПлатежа.СтатьяДвиженияДенежныхСредств Тогда
		Форма.СвойстваПлатежа.СтатьяДвиженияДенежныхСредств = СтрокаПлатеж.СтатьяДвиженияДенежныхСредств;
	КонецЕсли;
	
	ПараметрыОбъекта = ПриходныйКассовыйОрдерФормыКлиентСервер.ТекущиеПараметрыОбъекта(Форма);
	
КонецПроцедуры

Процедура РасшифровкаВыручкиСтатьяДвиженияДенежныхСредствПриИзменении(Форма, Элемент) Экспорт
	
	Элементы = Форма.Элементы;
	
	СтрокаПлатеж = ПриходныйКассовыйОрдерФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма, "РасшифровкаВыручки");
	
	ПриходныйКассовыйОрдерФормыКлиентСервер.ИнициализироватьСвойстваПлатежа(Форма); // Только создаем структуру, если она еще не создана.
	
	Если СтрокаПлатеж.СтатьяДвиженияДенежныхСредств <> Форма.СвойстваПлатежа.СтатьяДвиженияДенежныхСредств Тогда
		Форма.СвойстваПлатежа.СтатьяДвиженияДенежныхСредств = СтрокаПлатеж.СтатьяДвиженияДенежныхСредств;
	КонецЕсли;
	
	ПараметрыОбъекта = ПриходныйКассовыйОрдерФормыКлиентСервер.ТекущиеПараметрыОбъекта(Форма);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСпособПогашенияЗадолженностиПриИзменении(Форма, Элемент) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	СтрокаПлатеж = ПриходныйКассовыйОрдерФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма);
	Если СтрокаПлатеж.СпособПогашенияЗадолженности <> ПредопределенноеЗначение("Перечисление.СпособыПогашенияЗадолженности.ПоДокументу") Тогда
		СтрокаПлатеж.Сделка = Неопределено;
	КонецЕсли;
	
	ПараметрыЗаполненияСчетовУчета = ПриходныйКассовыйОрдерФормыКлиентСервер.НачатьЗаполнениеСчетовУчета("РасшифровкаПлатежа.СпособПогашенияЗадолженности", Объект, СтрокаПлатеж);
	СчетаУчетаВДокументахКлиент.ЗаполнитьПриИзменении(ПараметрыЗаполненияСчетовУчета);
	
	Если ПриходныйКассовыйОрдерФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
		ПриходныйКассовыйОрдерФормыКлиентСервер.ВидимостьДоступностьПолейПриИзмененииСпособаПогашения(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСделкаНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	СтрокаПлатеж = ПриходныйКассовыйОрдерФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ВозвратОтПоставщика") Тогда
		СчетУчета = СтрокаПлатеж.СчетУчетаРасчетовПоАвансам;
	Иначе
		СчетУчета = СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не указана дата.'"));
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не указана организация.'"));
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не указан контрагент.'"));
		Возврат;
	ИначеЕсли Форма.ВестиУчетПоДоговорам И НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не указан договор.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("Дата",               Объект.Дата);
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента", СтрокаПлатеж.ДоговорКонтрагента);
	ПараметрыОбъекта.Вставить("Контрагент",         Объект.Контрагент);
	Если ЗначениеЗаполнено(СчетУчета) Тогда
		ПараметрыОбъекта.Вставить("РежимОтбораДокументов", ПредопределенноеЗначение("Перечисление.РежимОтбораДокументов.ПоОстаткам"));
		ПараметрыОбъекта.Вставить("СчетУчета",             СчетУчета);
	КонецЕсли;
	ПараметрыОбъекта.Вставить("Организация",        Объект.Организация);
	ПараметрыОбъекта.Вставить("ОстаткиОбороты",     "Дт");
	ПараметрыОбъекта.Вставить("ТипыДокументов",     "Метаданные.Документы.ПриходныйКассовыйОрдер.ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты.Сделка.Тип");
	
	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаПлатежаПриИзменении(Форма, Элемент) Экспорт
	
	Элементы = Форма.Элементы;
	СтрокаПлатеж = ПриходныйКассовыйОрдерФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма);
	ПриходныйКассовыйОрдерФормыКлиентСервер.РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, Форма);
	ПриходныйКассовыйОрдерФормыКлиентСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);
	ПриходныйКассовыйОрдерФормыКлиентСервер.ЗаполнитьОтражениеСтрокиВУСН(СтрокаПлатеж, Форма);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовПриИзменении(Форма, Элемент) Экспорт
	
	Элементы = Форма.Элементы;
	
	СтрокаПлатеж = ПриходныйКассовыйОрдерФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма);
	ПриходныйКассовыйОрдерФормыКлиентСервер.РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, Форма);
	
	Если ПриходныйКассовыйОрдерФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
		ПриходныйКассовыйОрдерФормыКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(Форма, Истина, СтрокаПлатеж);
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	СтрокаПлатеж = ПриходныйКассовыйОрдерФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма);
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для выбора курса взаиморасчетов нужно выбрать договор контрагента.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("ДоговорКонтрагента",      СтрокаПлатеж.ДоговорКонтрагента);
	ПараметрыДокумента.Вставить("КратностьВзаиморасчетов", СтрокаПлатеж.КратностьВзаиморасчетов);
	ПараметрыДокумента.Вставить("КурсВзаиморасчетов",      СтрокаПлатеж.КурсВзаиморасчетов);
	ПараметрыДокумента.Вставить("Дата",                    Объект.Дата);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СтрокаПлатеж", СтрокаПлатеж);
	ДополнительныеПараметры.Вставить("Форма", Форма);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбораЗавершение",
		ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Общаяформа.ФормаВводаКурсаИКратности", ПараметрыДокумента,,,,,ОповещениеОЗакрытии);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Форма, Элемент) Экспорт
	
	Элементы = Форма.Элементы;
	
	СтрокаПлатеж = ПриходныйКассовыйОрдерФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма);
	ПриходныйКассовыйОрдерФормыКлиентСервер.ПроверкаКурсовВалют(СтрокаПлатеж, Форма);
	
	Если СтрокаПлатеж.СуммаВзаиморасчетов <> 0 И Форма.КратностьДокумента <> 0 Тогда
		СуммаРуб = СтрокаПлатеж.СуммаПлатежа * Форма.КурсДокумента / Форма.КратностьДокумента;
		СтрокаПлатеж.КурсВзаиморасчетов = СуммаРуб / СтрокаПлатеж.СуммаВзаиморасчетов * СтрокаПлатеж.КратностьВзаиморасчетов;
	КонецЕсли;
	
	Если ПриходныйКассовыйОрдерФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
		ПриходныйКассовыйОрдерФормыКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(Форма, Истина, СтрокаПлатеж);
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСтавкаНДСПриИзменении(Форма, Элемент) Экспорт
	
	Элементы = Форма.Элементы;
	
	СтрокаПлатеж = ПриходныйКассовыйОрдерФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма);
	ПриходныйКассовыйОрдерФормыКлиентСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);
	
	Если ПриходныйКассовыйОрдерФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
		ПриходныйКассовыйОрдерФормыКлиентСервер.ДоступностьСтавкиНДС(Форма);
		ПриходныйКассовыйОрдерФормыКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(Форма, Истина, СтрокаПлатеж);
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентомПриИзменении(Форма, Элемент) Экспорт
	
	Элементы = Форма.Элементы;
	СтрокаТЧ = ПриходныйКассовыйОрдерФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма);
	ПриходныйКассовыйОрдерФормыКлиентСервер.ЗаполнитьОтражениеСтрокиВУСН(СтрокаТЧ, Форма);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПолеОтражениеАвансаОбработкаВыбора(Форма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	СтрокаТЧ     = ПриходныйКассовыйОрдерФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма);
	СписокВыбора = Элемент.СписокВыбора;
	
	Если Форма.ПрименяетсяУСНПатент Тогда
		
		УчетПСНКлиент.ОткрытьФормуВыбораНовогоПатента(Элемент, ВыбранноеЗначение, Объект.Организация, Объект.Дата);
		УчетПСНКлиент.ОбработатьВыборНовогоПатентаИзКоллекции(Элемент.СписокВыбора,
			ВыбранноеЗначение, ВыбранноеЗначение, Форма.ПорядокОтраженияАвансаСоответствиеЗначений);
		
	КонецЕсли;
	
	ВыбранныйЭлемент = СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
	Если ВыбранныйЭлемент <> Неопределено Тогда
		СтрокаТЧ.ПорядокОтраженияАванса = Форма.ПорядокОтраженияАвансаСоответствиеЗначений[СписокВыбора.Индекс(ВыбранныйЭлемент)];
		ПриходныйКассовыйОрдерФормыКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(Форма, Истина, СтрокаТЧ);
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПолеОтражениеАвансаПриИзменении(Форма, Элемент) Экспорт
	
	СтрокаТЧ = ПриходныйКассовыйОрдерФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма);
	
	Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ПолеОтражениеАванса) Тогда
		СтрокаТЧ.ПорядокОтраженияАванса = Неопределено;
		ПриходныйКассовыйОрдерФормыКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(Форма, Истина, СтрокаТЧ);
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаОбработкаВыбора(Форма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	Если Форма.ПрименяетсяУСНПатент Тогда
		
		СтрокаПлатежа = ПриходныйКассовыйОрдерФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма);
		
		СписокВыбора = Элемент.ПодчиненныеЭлементы.РасшифровкаПлатежаГруппаОтражениеАванса.ПодчиненныеЭлементы.РасшифровкаПлатежаПолеОтражениеАванса.СписокВыбора;
		УчетПСНКлиент.ОбработатьВыборНовогоПатентаИзКоллекции(СписокВыбора, СтрокаПлатежа.ПолеОтражениеАванса, ВыбранноеЗначение,
			Форма.ПорядокОтраженияАвансаСоответствиеЗначений);
		СтрокаПлатежа.ПорядокОтраженияАванса = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПолеОтражениеАвансаНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Если Форма.ПрименяетсяУСНПатент Тогда
		УчетПСНКлиент.ДобавитьВСписокНовыйПатент(Элемент.СписокВыбора);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыРасшифровкаВыручки

Процедура РасшифровкаВыручкиПриИзменении(Форма) Экспорт
	
	Объект = Форма.Объект;
	РасшифровкаПлатежа = ПриходныйКассовыйОрдерФормыКлиентСервер.ПолучитьРасшифровкаПлатежа(Форма);
	Объект.СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
	ПриходныйКассовыйОрдерФормыКлиентСервер.ОбновитьИтоги(Форма);
	
КонецПроцедуры

Процедура РасшифровкаВыручкиПриНачалеРедактирования(Форма, Элемент, НоваяСтрока, Копирование) Экспорт
	
	СтрокаПлатеж = Форма.Элементы.РасшифровкаВыручки.ТекущиеДанные;
	
	ПриходныйКассовыйОрдерФормыКлиентСервер.ИнициализироватьСвойстваПлатежа(Форма);
	Если НоваяСтрока И НЕ Копирование Тогда
		ЗаполнитьЗначенияСвойств(СтрокаПлатеж, Форма.СвойстваПлатежа);
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифровкаВыручкиПриОкончанииРедактирования(Форма, Элемент, НоваяСтрока, ОтменаРедактирования) Экспорт
	
	Объект = Форма.Объект;
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		РасшифровкаПлатежа = ПриходныйКассовыйОрдерФормыКлиентСервер.ПолучитьРасшифровкаПлатежа(Форма);
		Объект.СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
		ПриходныйКассовыйОрдерФормыКлиентСервер.ОбновитьИтоги(Форма);
		ПриходныйКассовыйОрдерФормыКлиентСервер.ОбновитьИтогиУСН(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифровкаВыручкиПередУдалением(Форма, Элемент, Отказ) Экспорт
	
	РасшифровкаПлатежа = ПриходныйКассовыйОрдерФормыКлиентСервер.ПолучитьРасшифровкаПлатежа(Форма);
	Отказ = РасшифровкаПлатежа.Количество() = 1;
	
КонецПроцедуры

Процедура РасшифровкаВыручкиСуммаПлатежаПриИзменении(Форма, Элемент) Экспорт
	
	СтрокаПлатеж = Форма.Элементы.РасшифровкаВыручки.ТекущиеДанные;
	ПриходныйКассовыйОрдерФормыКлиентСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);
	
КонецПроцедуры

Процедура РасшифровкаВыручкиСтавкаНДСПриИзменении(Форма, Элемент) Экспорт
	
	СтрокаПлатеж = ПриходныйКассовыйОрдерФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма, "РасшифровкаВыручки");
	
	ПриходныйКассовыйОрдерФормыКлиентСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);
	
	Если ПриходныйКассовыйОрдерФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
		ПриходныйКассовыйОрдерФормыКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(Форма, Истина, СтрокаПлатеж);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемоеОборудование

Процедура НапечататьЧек(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	ОчиститьСообщения();
	
	ОписаниеОшибки = "";
	
	Если Объект.НомерЧекаККМ <> 0 Тогда
		ТекстСообщения = НСтр("ru = 'Чек уже пробит на фискальном устройстве!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияБПКлиент.ПроверитьВозможностьПечатиЧека(Форма) Тогда
		
		Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
			Контекст = Новый Структура();
			Контекст.Вставить("Форма", Форма);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыборФискальногоУстройстваЗавершение", ЭтотОбъект, Контекст);
			ПоддерживаемыеТипыВО = Новый Массив();
			ПоддерживаемыеТипыВО.Добавить("ФискальныйРегистратор");
			ПоддерживаемыеТипыВО.Добавить("ПринтерЧеков");
			ПоддерживаемыеТипыВО.Добавить("ККТ");
			МенеджерОборудованияКлиент.ПредложитьВыбратьУстройство(ОписаниеОповещения, ПоддерживаемыеТипыВО,
				НСтр("ru = 'Выберите фискальное устройство'"), НСтр("ru = 'Фискальное устройство не подключено.'"));
		Иначе
			ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФискальногоУстройстваЗавершение(ИдентификаторУстройства, Параметры) Экспорт
	Если НЕ ЗначениеЗаполнено(ИдентификаторУстройства) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
	
	ДанныеУстройства = МенеджерОборудованияКлиентПовтИсп.ПолучитьДанныеУстройства(ИдентификаторУстройства);
	ТипУстройства = ?(ДанныеУстройства.Свойство("ТипОборудованияИмя"), ДанныеУстройства.ТипОборудованияИмя, "ККТ");
	
	Если ТипУстройства = "ККТ" Тогда
		Форма = Параметры.Форма;
	
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ПолучитьПараметрыЗавершение", ЭтотОбъект, Параметры);
		МенеджерОборудованияКлиент.НачатьПолучениеПараметровФискальногоУстройства(ОповещениеПриЗавершении, Форма.УникальныйИдентификатор , ИдентификаторУстройства, Ложь);
	Иначе
		ПолучитьПараметрыЗавершение(Неопределено, Параметры);
	КонецЕсли;
КонецПроцедуры

Процедура ПолучитьПараметрыЗавершение(ПараметрыФискальногоУстройства, Параметры) Экспорт
	Форма = Параметры.Форма;
	Объект = Форма.Объект;
	
	ОписаниеОшибки = "";
	Если ПараметрыФискальногоУстройства =  Неопределено Тогда
		ВерсияФормата = "1.1.0.0";
	ИначеЕсли НЕ ПараметрыФискальногоУстройства.Результат Тогда 
		ОписаниеОшибки = ПараметрыФискальногоУстройства.ОписаниеОшибки;
	Иначе
		ВерсияФормата = ОбщегоНазначенияБПКлиентСервер.ПолучитьВерсиюФФД(ПараметрыФискальногоУстройства.ВыходныеПараметры.ВерсияФФДФН, ПараметрыФискальногоУстройства.ВыходныеПараметры.ВерсияФФДККТ);
	КонецЕсли; 
	
	// Если не удалось подключить ККТ, то формировать чеки смысла нет
	Если НЕ ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ПараметрыУстройства = МенеджерОборудованияКлиентПовтИсп.ПолучитьПараметрыУстройства(Параметры.ИдентификаторУстройства);
		НомерСекции         = ?(ПараметрыУстройства.Свойство("НомерСекции"), ПараметрыУстройства.НомерСекции, 0);
		
		МассивЧеков = ПриходныйКассовыйОрдерФормыВызовСервера.ПодготовитьДанныеДляПробитияЧека(Объект.Ссылка, НомерСекции, ВерсияФормата, ОписаниеОшибки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ТекстСообщения = НСтр("ru = 'При подключении устройства произошла ошибка.
			|Чек не напечатан на фискальном устройстве.
			|Дополнительное описание:
			|%ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	ИначеЕсли МассивЧеков.Количество() > 0 Тогда
		НапечататьОдинЧек(Форма, МассивЧеков, Параметры.ИдентификаторУстройства, ВерсияФормата);
	КонецЕсли;

КонецПроцедуры 

&НаКлиенте
Процедура НапечататьОдинЧек(Форма, МассивЧеков, ИдентификаторУстройства, ВерсияФормата)
	Объект = Форма.Объект;
	
	ОбщиеПараметры    = МассивЧеков[0];
	
	Контекст = Новый Структура();
	Контекст.Вставить("МассивЧеков", МассивЧеков);
	Контекст.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
	Контекст.Вставить("ВерсияФормата", ВерсияФормата);
	Контекст.Вставить("Форма", Форма);
	
	Оповещение = Новый ОписаниеОповещения("НапечататьОдинЧекЗавершение", ЭтотОбъект, Контекст);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПараметрыПечатиЧека",     МассивЧеков[0]);
	ПараметрыФормы.Вставить("Организация",             Объект.Организация);
	ПараметрыФормы.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
	ПараметрыФормы.Вставить("ВерсияФормата",           ВерсияФормата);
	
	ОткрытьФорму("Обработка.ПечатьЧека.Форма", ПараметрыФормы, Форма, Форма.УникальныйИдентификатор,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура НапечататьОдинЧекЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма = Параметры.Форма;
	Объект = Форма.Объект;
	
	Если РезультатВыполнения.Результат Тогда
		
		Параметры.МассивЧеков.Удалить(0);
		Объект.НомерЧекаККМ = РезультатВыполнения.ВыходныеПараметры[1];
		
		Если Параметры.МассивЧеков.Количество() > 0 Тогда
			НапечататьОдинЧек(Форма, Параметры.МассивЧеков, Параметры.ИдентификаторУстройства, Параметры.ВерсияФормата);
		Иначе
			Модифицированность = Истина;
			Форма.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
			
		КонецЕсли;
	Иначе
		
		ТекстСообщения = НСтр("ru = 'При печати чека произошла ошибка.
			|Чек не напечатан на фискальном устройстве.
			|Дополнительное описание:
			|%ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,
			"%ДополнительноеОписание%",
			РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

Процедура ПоказатьКонтекстныеНовости(Форма, Команда) Экспорт
	
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		Форма,
		Команда
	);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеФункцииИПроцедуры

Процедура ПриИзмененииСубконто(Форма, НомерСубконто)
	
	Объект = Форма.Объект;
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСубконто(
		Форма, Объект, НомерСубконто, ПриходныйКассовыйОрдерФормыКлиентСервер.ПараметрыУстановкиСвойствСубконто(Форма));
	
КонецПроцедуры

Процедура НачалоВыбораСубконто(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Объект = Форма.Объект;
	
	ДанныеОбъекта = БухгалтерскийУчетКлиентСервер.ДанныеУстановкиПараметровСубконто(
		Объект, ПриходныйКассовыйОрдерФормыКлиентСервер.ПараметрыУстановкиСвойствСубконто(Форма));
	
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(Форма, Элемент, СтандартнаяОбработка, ДанныеОбъекта);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ЗАВЕРШЕНИЕ НЕМОДАЛЬНЫХ ВЫЗОВОВ

Процедура РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	
	СтрокаПлатеж = ДополнительныеПараметры.СтрокаПлатеж;
	
	СтруктураКурсаИКратности = РезультатЗакрытия;
	
	Если СтруктураКурсаИКратности <> Неопределено Тогда
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;
	КонецЕсли;
	
	ПриходныйКассовыйОрдерФормыКлиентСервер.РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, Форма);
	Форма.Модифицированность = Истина;
	
	Если ПриходныйКассовыйОрдерФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
		ПриходныйКассовыйОрдерФормыКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(Форма, Истина, СтрокаПлатеж);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
