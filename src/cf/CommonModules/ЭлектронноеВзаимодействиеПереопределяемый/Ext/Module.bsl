////////////////////////////////////////////////////////////////////////////////
// ЭлектронноеВзаимодействиеПереопределяемый: общий механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Изменяет поведение элементов управляемой или обычной формы.
//
// Параметры:
//  Форма - УправляемаяФорма, ОбычнаяФорма - управляемая или обычная форма для изменения.
//  СтруктураПараметров - Структура - параметры процедуры.
//
Процедура ИзменитьСвойстваЭлементовФормы(Форма, СтруктураПараметров) Экспорт
	
	Если СтруктураПараметров.Свойство("ВидОперации")
		И СтруктураПараметров.Свойство("ЗначениеПараметра") Тогда
		Если ВРег(СтруктураПараметров.ВидОперации) = ВРег("УстановкаГиперссылки")
			И СтруктураПараметров.Свойство("ТекстСостоянияЭД") Тогда
			// Зададим особые условия.
			Если Найти(СтруктураПараметров.ТекстСостоянияЭД, "Не сформирован") > 0
				ИЛИ Найти(СтруктураПараметров.ТекстСостоянияЭД, "Нет действующего соглашения") > 0 Тогда
				СтруктураПараметров.ЗначениеПараметра = Ложь;
			КонецЕсли;
			// Определим элемент формы.
			НайденныйЭлементФормы = Неопределено;
			Если НЕ Форма.Элементы.Найти("СостояниеЭД") = Неопределено Тогда
				НайденныйЭлементФормы = Форма.Элементы.СостояниеЭД;
			КонецЕсли;
				
			// Заполним свойство найденного элемента.
			Если НЕ НайденныйЭлементФормы = Неопределено
				И НайденныйЭлементФормы.Вид = ВидПоляФормы.ПолеНадписи Тогда
				НайденныйЭлементФормы.Гиперссылка = СтруктураПараметров.ЗначениеПараметра;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЕстьПравоЧтенияЭД() Или Не ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД") Тогда
		Если НЕ Форма.Элементы.Найти("ДекорацияВидЭД") = Неопределено Тогда
			Форма.Элементы.ДекорацияВидЭД.Видимость = Ложь;
		КонецЕсли;
		Если НЕ Форма.Элементы.Найти("ВидЭД") = Неопределено Тогда
			Форма.Элементы.ВидЭД.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ЕстьТекстСостоянияЭДО = ЗначениеЗаполнено(СтруктураПараметров.ТекстСостоянияЭДО);
	
	// В параметре ЗначениеПараметра передается признак,
	// что надпись состояния на форме должна быть гиперссылкой, если для надписи нет действия, выполняемого по гиперссылке.
	// Например, нет прав на создание ЭД.
	Гиперссылка = СтруктураПараметров.ЗначениеПараметра;
	
	Если НЕ Форма.Элементы.Найти("СостояниеЭД") = Неопределено Тогда
		Форма.Элементы.СостояниеЭД.Видимость = ЕстьТекстСостоянияЭДО;
		Форма.Элементы.СостояниеЭД.Гиперссылка = Гиперссылка;
	КонецЕсли;
	Если НЕ Форма.Элементы.Найти("ТекстСостоянияЭД") = Неопределено Тогда
		Форма.Элементы.ТекстСостоянияЭД.Видимость = ЕстьТекстСостоянияЭДО;
		Форма.Элементы.ТекстСостоянияЭД.Гиперссылка = Гиперссылка;
	КонецЕсли;
	
КонецПроцедуры

// При необходимости, в функции можно определить каталог для временных файлов,
// отличный от устанавливаемого по умолчанию в библиотеке ЭД.
//
// Параметры:
//  ТекущийКаталог - Строка - путь к каталогу временных файлов.
//
Процедура ТекущийКаталогВременныхФайлов(ТекущийКаталог) Экспорт
	
	ТекущийКаталог = КаталогВременныхФайлов();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработка метаданных

// Определяет соответствие функциональных опций библиотеки и прикладного решения,
// в случае различий в наименовании.
//
// Параметры:
//  СоответствиеФО - Соответствие - список функциональных опций.
//
Процедура ПолучитьСоответствиеФункциональныхОпций(СоответствиеФО) Экспорт
	
	// Электронные документы
	СоответствиеФО.Вставить("ИспользоватьОбменЭД",                    "ИспользоватьОбменЭД");
	СоответствиеФО.Вставить("ИспользоватьЭлектронныеПодписи", 		  "ИспользоватьЭлектронныеПодписи");
	СоответствиеФО.Вставить("ИспользоватьОбменЭДМеждуОрганизациями",  "ИспользоватьОбменЭДМеждуОрганизациями");
	СоответствиеФО.Вставить("ИспользоватьОбменСБанками",              "ИспользоватьОбменСБанками");
	// Конец электронные документы
	
КонецПроцедуры

// Определяет соответствие справочников библиотеки и прикладного решения,
// в случае различий в наименовании справочников.
//
// Параметры:
//  СоответствиеСправочников - Соответствие - список справочников.
//
Процедура ПолучитьСоответствиеСправочников(СоответствиеСправочников) Экспорт
	
	СоответствиеСправочников.Вставить("Организации", "Организации");
	СоответствиеСправочников.Вставить("Контрагенты", "Контрагенты");
	СоответствиеСправочников.Вставить("Партнеры",    "");
	СоответствиеСправочников.Вставить("ДоговорыКонтрагентов", "ДоговорыКонтрагентов");
	СоответствиеСправочников.Вставить("Номенклатура", "Номенклатура");
	СоответствиеСправочников.Вставить("ЕдиницыИзмерения", "КлассификаторЕдиницИзмерения");
	СоответствиеСправочников.Вставить("УпаковкиНоменклатуры", "КлассификаторЕдиницИзмерения");
	СоответствиеСправочников.Вставить("НоменклатураПоставщиков", "НоменклатураПоставщиков");
	СоответствиеСправочников.Вставить("Валюты", "Валюты");
	СоответствиеСправочников.Вставить("Банки", "Банки");
	СоответствиеСправочников.Вставить("БанковскийСчет", "БанковскиеСчета");
	СоответствиеСправочников.Вставить("БанковскиеСчетаОрганизаций", "БанковскиеСчета");
	СоответствиеСправочников.Вставить("БанковскиеСчетаКонтрагентов", "БанковскиеСчета");
	
КонецПроцедуры

// В процедуре формируется соответствие для сопоставления имен переменных библиотеки,
// наименованиям объектов и реквизитов метаданных прикладного решения.
// Если в прикладном решении есть документы, на основании которых формируется ЭД,
// причем названия реквизитов данных документов отличаются от общепринятых "Организация", "Контрагент", "СуммаДокумента",
// то для этих реквизитов необходимо добавить в соответствие записи виде:
// Ключ = "ДокументВМетаданных.ОбщепринятоеНазваниеРеквизита", Значение - "ДокументВМетаданных.ДругоеНазваниеРеквизита".
// Например:
//  СоответствиеРеквизитовОбъекта.Вставить("МЗ_Покупка.Организация", "МЗ_Покупка.Учреждение");
//  СоответствиеРеквизитовОбъекта.Вставить("МЗ_Покупка.Контрагент",  "МЗ_Покупка.Грузоотправитель");
//  СоответствиеРеквизитовОбъекта.Вставить("СчетФактураВыданный.СуммаДокумента",  "СчетФактураВыданный.Основание.СуммаДокумента");
// 
// Параметры:
// СоответствиеРеквизитовОбъекта - Соответствие - содержит:
//    * Ключ - Строка - имя переменной, используемой в коде библиотеки;
//    * Значение - Строка - наименование объекта метаданных или реквизита объекта в прикладном решении.
//
Процедура ПолучитьСоответствиеНаименованийОбъектовМДИРеквизитов(СоответствиеРеквизитовОбъекта) Экспорт
	
	СоответствиеРеквизитовОбъекта.Вставить("СчетФактураВыданныйВМетаданных",       "СчетФактураВыданный");
	СоответствиеРеквизитовОбъекта.Вставить("СчетФактураПолученныйВМетаданных",     "СчетФактураПолученный");
	СоответствиеРеквизитовОбъекта.Вставить("ДатаВыставленияВСчетеФактуреВыданном", "ДатаВыставления");
	СоответствиеРеквизитовОбъекта.Вставить("ДатаПолученияВСчетеФактуреПолученном", "Дата");
	
	СоответствиеРеквизитовОбъекта.Вставить("ПлатежноеПоручениеВМетаданных",        "ПлатежноеПоручение");
	СоответствиеРеквизитовОбъекта.Вставить("НомерСчета",                           "НомерСчета");
	
	СоответствиеРеквизитовОбъекта.Вставить("ИННКонтрагента",                       "ИНН");
	СоответствиеРеквизитовОбъекта.Вставить("КППКонтрагента",                       "КПП");
	СоответствиеРеквизитовОбъекта.Вставить("НаименованиеКонтрагента",              "НаименованиеПолное");
	СоответствиеРеквизитовОбъекта.Вставить("НаименованиеКонтрагентаДляСообщенияПользователю", "Наименование");
	СоответствиеРеквизитовОбъекта.Вставить("ВнешнийКодКонтрагента",                "Код");
	СоответствиеРеквизитовОбъекта.Вставить("ПартнерКонтрагента",                   Неопределено);
	
	СоответствиеРеквизитовОбъекта.Вставить("ИННОрганизации",                       "ИНН");
	СоответствиеРеквизитовОбъекта.Вставить("КППОрганизации",                       "КПП");
	СоответствиеРеквизитовОбъекта.Вставить("НаименованиеОрганизации",              "НаименованиеПолное");
	СоответствиеРеквизитовОбъекта.Вставить("СокращенноеНаименованиеОрганизации",   "НаименованиеСокращенное");
	СоответствиеРеквизитовОбъекта.Вставить("ОГРНОрганизации",   "ОГРН");
	
	СоответствиеРеквизитовОбъекта.Вставить("РеализацияТоваровУслугВМетаданных",    "РеализацияТоваровУслуг");
	СоответствиеРеквизитовОбъекта.Вставить("ПоступлениеТоваровУслугВМетаданных",  "ПоступлениеТоваровУслуг");
	
КонецПроцедуры

// Определяет соответствие кодов обязательных элементов схем электронных документов их пользовательскому представлению.
//
// Параметры:
//  СоответствиеВозврата - Соответствие - исходное соответствие для заполнения.
//
Процедура СоответствиеКодовРеквизитовИПредставлений(СоответствиеВозврата) Экспорт
	
	Макет = ПолучитьОбщийМакет("ПрикладноеПредставлениеРеквизитов_ru");
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	Для НСтр = 1 По ВысотаТаблицы Цикл
		СоответствиеВозврата.Вставить(СокрЛП(Макет.Область(НСтр, 1).Текст), СокрЛП(Макет.Область(НСтр,2).Текст));
	КонецЦикла;
	
КонецПроцедуры

// Получает ключевые реквизиты объекта по текстовому представлению.
//
// Параметры:
//  ИмяОбъекта - Строка - текстовое представление объекта, ключевые реквизиты которого необходимо получить.
//  СтруктураКлючевыхРеквизитов - Структура - перечень параметров объекта.
//
Процедура ПолучитьСтруктуруКлючевыхРеквизитовОбъекта(ИмяОбъекта, СтруктураКлючевыхРеквизитов) Экспорт
	
	Если ИмяОбъекта = "Документ.РеализацияТоваровУслуг" Тогда
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Контрагент, ВалютаДокумента, ВидЭлектронногоДокумента");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		
		СтрокаРеквизитовОбъекта = ("Количество, Номенклатура, Цена, Сумма");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		СтрокаРеквизитовОбъекта = ("Цена, Сумма");
		СтруктураКлючевыхРеквизитов.Вставить("Услуги", СтрокаРеквизитовОбъекта);
		СтруктураКлючевыхРеквизитов.Вставить("АгентскиеУслуги", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.ПоступлениеТоваровУслуг" Тогда
		СтрокаРеквизитовОбъекта = ("Организация, Контрагент");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		
		СтрокаРеквизитовОбъекта = ("Количество, Номенклатура, Цена, Сумма");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		СтрокаРеквизитовОбъекта = ("Цена, Сумма");
		СтруктураКлючевыхРеквизитов.Вставить("Услуги", СтрокаРеквизитовОбъекта);
	ИначеЕсли ИмяОбъекта = "Документ.СчетФактураВыданный" Тогда
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
	ИначеЕсли ИмяОбъекта = "Документ.СчетФактураПолученный" Тогда
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, КодСпособаПолучения");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
	ИначеЕсли ИмяОбъекта = "Документ.КорректировкаРеализации" Тогда
		// шапка
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Контрагент");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		
		// ТЧ
		СтрокаРеквизитовОбъекта = ("Номенклатура, Количество, Цена, Сумма, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		СтрокаРеквизитовОбъекта = ("Номенклатура, Количество, Цена, Сумма, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Услуги", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.КорректировкаПоступления" Тогда
		// шапка
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Контрагент");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		
		// ТЧ
		СтрокаРеквизитовОбъекта = ("Номенклатура, Количество, Цена, Сумма, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		СтрокаРеквизитовОбъекта = ("Номенклатура, Количество, Цена, Сумма, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Услуги", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.ПлатежноеПоручение" Тогда
		
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, СчетОрганизации, Контрагент, СчетКонтрагента, СуммаДокумента, ИННПолучателя");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.ПлатежноеТребование" Тогда
		
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, СчетОрганизации, Контрагент, СчетКонтрагента, СуммаДокумента");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.СчетНаОплатуПокупателю" Тогда
		// шапка
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Контрагент");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		
		// ТЧ
		СтрокаРеквизитовОбъекта = ("Номенклатура, Количество, Цена, Сумма, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.ОтчетКомитентуОПродажах" Тогда	
		
		// шапка
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Контрагент, ВалютаДокумента, СуммаДокумента");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		
		// ТЧ
		СтрокаРеквизитовОбъекта = ("Номенклатура, Количество, Сумма, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.ОтчетКомиссионераОПродажах" Тогда	
				
		// шапка
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);		
		
	КонецЕсли;
	
	ЗарплатаКадры.ПолучитьСтруктуруКлючевыхРеквизитовОбъекта(ИмяОбъекта, СтруктураКлючевыхРеквизитов);
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Получение текстовых сообщений

// Определяет текст сообщения о необходимости настройки системы в зависимости от вида операции.
//
// Параметры:
//  ВидОперации    - строка - признак выполняемой операции;
//  ТекстСообщения - строка - текст сообщения.
//
Процедура ТекстСообщенияОНеобходимостиНастройкиСистемы(ВидОперации, ТекстСообщения) Экспорт
	
	Если ВРег(ВидОперации) = "РАБОТАСЭД" Тогда
		ТекстСообщения = НСтр("ru = 'Для работы с электронными документами необходимо
			|в настройках системы включить использование обмена электронными документами.'");
	ИначеЕсли ВРег(ВидОперации) = "ПОДПИСАНИЕЭД" Тогда
		ТекстСообщения = НСтр("ru = 'Для возможности подписания ЭД необходимо
			|в настройках системы включить опцию использования электронных цифровых подписей.'");
	ИначеЕсли ВРег(ВидОперации) = "НАСТРОЙКАКРИПТОГРАФИИ" Тогда
		ТекстСообщения = НСтр("ru = 'Для возможности настройки криптографии необходимо 
			|в настройках системы включить опцию использования электронных цифровых подписей.'");
	ИначеЕсли ВРег(ВидОперации) = "РАБОТАСБАНКАМИ" Тогда
			ТекстСообщения = НСтр("ru = 'Для возможности обмена ЭД с банками необходимо 
			|в настройках программы включить опцию использования прямого обмена с банками.'");
	Иначе
		ТекстСообщения = НСтр("ru='Операция не может быть выполнена. Не выполнены необходимые настройки программы.'");
	КонецЕсли;
	
КонецПроцедуры

// Переопределяет выводимое сообщение об ошибке.
//
// Параметры:
//  КодОшибки - строка - код ошибки
//  ТекстОшибки - строка - измененный текст ошибки.
//
Процедура ИзменитьСообщениеОбОшибке(КодОшибки, ТекстОшибки) Экспорт
	
	Если КодОшибки = "100" ИЛИ КодОшибки = "110" Тогда
		ТекстОшибки = "Проверьте общие настройки криптографии."
	КонецЕсли;
	
КонецПроцедуры

// Переопределяет сообщение о нехватке прав доступа.
//
// Параметры:
//  ТекстСообщения - Строка - текст сообщения.
//
Процедура ПодготовитьТекстСообщенияОНарушенииПравДоступа(ТекстСообщения) Экспорт
	
	// При необходимости можно переопределить или дополнить текст сообщения
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Получение данных

// Находит ссылку на объект ИБ по типу, ИД и дополнительным реквизитам.
// 
// Параметры:
//  ТипОбъекта - Строка - идентификатор типа объекта, который необходимо найти;
//  ИДОбъекта - Строка - идентификатор объекта заданного типа;
//  ДополнительныеРеквизиты - Структура - набор дополнительных полей объекта для поиска;
//  ИДЭД - Строка - идентификатор электронного документа;
//
// Возвращаемое значение:
//  Ссылка - найденная ссылка.
//
Функция НайтиСсылкуНаОбъект(ТипОбъекта, ИдОбъекта = "", ДополнительныеРеквизиты = Неопределено, ИДЭД = Неопределено) Экспорт
	
	Результат = Неопределено;

	Если ТипОбъекта = "Валюты" ИЛИ ТипОбъекта = "Банки" Тогда
		Результат = НайтиСсылкуНаОбъектПоРеквизиту(ТипОбъекта, "Код", ИдОбъекта);
	ИначеЕсли ТипОбъекта = "ЕдиницыИзмерения" Тогда
		Результат = НайтиСсылкуНаОбъектПоРеквизиту("КлассификаторЕдиницИзмерения", "Код", ИдОбъекта);
	ИначеЕсли (ТипОбъекта = "Контрагенты" ИЛИ ТипОбъекта = "Организации") И ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
		ПараметрПоиска = "";
		ИНН = "";
		КПП = "";
		Если ДополнительныеРеквизиты.Свойство("ИНН")
			И ЗначениеЗаполнено(ДополнительныеРеквизиты.ИНН) Тогда 
			ИНН = ДополнительныеРеквизиты.ИНН;
		КонецЕсли;
		Если ДополнительныеРеквизиты.Свойство("КПП")
			И ЗначениеЗаполнено(ДополнительныеРеквизиты.КПП) Тогда 
			КПП = ДополнительныеРеквизиты.КПП;
		КонецЕсли;
		Если ЗначениеЗаполнено(ИНН) Тогда
			Результат = ЭлектронноеВзаимодействиеБП.СсылкаНаОбъектПоИННКПП(ТипОбъекта, ИНН, КПП); 
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Результат) И ДополнительныеРеквизиты.Свойство("Наименование", ПараметрПоиска) Тогда
			Результат = НайтиСсылкуНаОбъектПоРеквизиту(ТипОбъекта, "Наименование", ПараметрПоиска); 
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = "НоменклатураПоставщиков" И ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
		Контрагент = "";
		ПараметрПоиска = "";
		Если ДополнительныеРеквизиты.Свойство("Идентификатор", ПараметрПоиска)
			И ДополнительныеРеквизиты.Свойство("Владелец", Контрагент) Тогда // есть Идентификатор
			Результат = ЭлектронноеВзаимодействиеБП.НайтиСсылкуНаНоменклатуруПоставщикаПоИдентификатору(
				ПараметрПоиска, Контрагент, "НоменклатураПоставщика");
		КонецЕсли;
	ИначеЕсли ТипОбъекта = "Номенклатура" И ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
		ПараметрПоиска = "";
		Контрагент = "";
		Если ДополнительныеРеквизиты.Свойство("Идентификатор", ПараметрПоиска)
			И ДополнительныеРеквизиты.Свойство("Владелец", Контрагент) Тогда // по Идентификатору
			Результат = ЭлектронноеВзаимодействиеБП.НайтиСсылкуНаНоменклатуруПоставщикаПоИдентификатору(
				ПараметрПоиска, Контрагент);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Результат) И ДополнительныеРеквизиты.Свойство("Артикул", ПараметрПоиска) Тогда // по Коду номенклатуры своей компании
			Результат = НайтиСсылкуНаОбъектПоРеквизиту(ТипОбъекта, "Код", ПараметрПоиска);
		КонецЕсли;
	ИначеЕсли ТипОбъекта = "ВидыКонтактнойИнформации" Тогда
		Попытка 
			Результат = Справочники.ВидыКонтактнойИнформации[ИдОбъекта];
		Исключение
			Результат = Неопределено;
		КонецПопытки;
	ИначеЕсли (ТипОбъекта = "БанковскиеСчетаОрганизаций" Или ТипОбъекта = "БанковскиеСчетаКонтрагентов") И ЗначениеЗаполнено(ДополнительныеРеквизиты)Тогда
		Владелец = "";
		Если ДополнительныеРеквизиты.Свойство("Владелец", Владелец) Тогда
			ИмяПрикладногоСправочника = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ИмяПрикладногоСправочника(ТипОбъекта);
			Результат = НайтиСсылкуНаОбъектПоРеквизиту(ИмяПрикладногоСправочника, "НомерСчета", ИдОбъекта, Владелец);
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = "СтраныМира" Тогда
		Результат = НайтиСсылкуНаОбъектПоРеквизиту("СтраныМира", "Код", ИдОбъекта);
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			ДанныеКлассификатора = Справочники.СтраныМира.ДанныеКлассификатораСтранМираПоКоду(ИдОбъекта);
			Если ДанныеКлассификатора <> Неопределено Тогда
				Отбор = Новый Структура("Код", ИдОбъекта);
				Результат = Справочники.СтраныМира.СсылкаПоДаннымКлассификатора(Отбор);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипОбъекта = "НомерТД" Тогда
		Результат = НайтиСсылкуНаОбъектПоРеквизиту("НомераГТД", "Код", ИдОбъекта);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает печатный номер документа.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на документ информационной базы.
//
// Возвращаемое значение:
//  НомерОбъекта - номер документа.
//
Функция ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект) Экспорт
	
	Возврат ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "Номер"), Истина, Ложь);
	
КонецФункции

// Проверяет, готовность документов ИБ для формирования ЭД, и удаляет из массива не готовые документы.
//
// Параметры:
//  ДокументыМассив - Массив   - ссылки на документы, которые должны быть проверены перед формированием ЭД.
//
Процедура ПроверитьГотовностьИсточников(ДокументыМассив, ФормаИсточник = Неопределено) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияТипаИзМассива(ДокументыМассив, Тип("СтрокаГруппировкиДинамическогоСписка"));
	
	МассивПроводимыхДокументов = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.МассивПроводимыхДокументов(ДокументыМассив);
	МассивСчетовФактур  = Новый Массив;
	МассивДокументовРеализации = Новый Массив;
	МассивДокументовКорректировок = Новый Массив;
	МассивПлатежныхДокументов = Новый Массив;
	МассивНаУдаление = Новый Массив;
	Для каждого Элемент из  МассивПроводимыхДокументов Цикл
		
		Если ТипЗнч(Элемент) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			
			МассивСчетовФактур.Добавить(Элемент);
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			
			МассивДокументовРеализации.Добавить(Элемент);
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			
			МассивДокументовКорректировок.Добавить(Элемент);
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
			
			ОтветственныеЛица = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Элемент, "Руководитель");
			НеЗаполненыОтветственныеЛица = Ложь;
			Если Не ЗначениеЗаполнено(ОтветственныеЛица.Руководитель) Тогда
				
				ШаблонСообщения = НСтр("ru = 'В документе ""%1"" не указан руководитель организации.'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, Элемент);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Электронное взаимодействие'"), УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.СчетНаОплатуПокупателю,
					Элемент, НСтр("ru = 'В документе не указан руководитель организации.'"));
				НеЗаполненыОтветственныеЛица = Истина;
				
			КонецЕсли;
			Если НеЗаполненыОтветственныеЛица Тогда
				
				МассивНаУдаление.Добавить(Элемент);
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("ДокументСсылка.ПлатежноеПоручение")
			ИЛИ ТипЗнч(Элемент) = Тип("ДокументСсылка.ПлатежноеТребование") Тогда
			
			МассивПлатежныхДокументов.Добавить(Элемент);
		КонецЕсли;
		
	КонецЦикла;
	МассивНепроведенныхДокументов = ОбщегоНазначения.ПроверитьПроведенностьДокументов(МассивПроводимыхДокументов);
	КоличествоНепроведенныхДокументов = МассивНепроведенныхДокументов.Количество();
	
	Если КоличествоНепроведенныхДокументов > 0 Тогда
		Если КоличествоНепроведенныхДокументов = 1 Тогда
			Текст = НСтр("ru = 'Для того чтобы сформировать электронную версию документа,
			|его необходимо предварительно провести.'");
		Иначе
			Текст = НСтр("ru = 'Для того чтобы сформировать электронные версии документов,
			|их необходимо предварительно провести.'");
		КонецЕсли;

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		
		ШаблонСообщения = НСтр("ru = 'Документ %1 не проведен.'");
		Для Каждого НепроведенныйДокумент Из МассивНепроведенныхДокументов Цикл
			Найденный = ДокументыМассив.Найти(НепроведенныйДокумент.Ссылка);
			Если Найденный <> Неопределено Тогда
				
				ДокументыМассив.Удалить(Найденный);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Строка(НепроведенныйДокумент.Ссылка)),
					НепроведенныйДокумент.Ссылка);
			КонецЕсли;
				
		КонецЦикла;
	КонецЕсли;   	
	
	Если МассивСчетовФактур.Количество() > 0 Тогда
	
		Запрос = Новый Запрос();
		Запрос.Параметры.Вставить("СписокСчетовФактур", МассивСчетовФактур);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетФактураВыданный.Представление,
		|	СчетФактураВыданный.Ссылка,
		|	ВЫБОР
		|		КОГДА СчетФактураВыданный.СчетФактураНеВыставляется
		|			ТОГДА ""Не выставляется""
		|		КОГДА СчетФактураВыданный.СводныйКомиссионный
		|				ИЛИ СчетФактураВыданный.СводныйКорректировочный
		|			ТОГДА ""Сводный""
		|	КОНЕЦ КАК Флаг
		|ИЗ
		|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|ГДЕ
		|	(СчетФактураВыданный.СчетФактураНеВыставляется
		|			ИЛИ СчетФактураВыданный.СводныйКорректировочный
		|			ИЛИ СчетФактураВыданный.СводныйКомиссионный)
		|	И СчетФактураВыданный.Ссылка В(&СписокСчетовФактур)";
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		ШаблонСообщения = НСтр("ru = 'У %1 установлен флаг ""%2"". Для таких документов формировать электронный счет-фактуру нельзя.'");
		Пока Выборка.Следующий() Цикл
			Найденный = ДокументыМассив.Найти(Выборка.Ссылка);
			Если Найденный <> Неопределено Тогда
				ДокументыМассив.Удалить(Найденный);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Выборка.Представление, Выборка.Флаг),
					Выборка.Ссылка);
			КонецЕсли;
		КонецЦикла;
		
		Запрос = Новый Запрос();
		Запрос.Параметры.Вставить("СписокСчетовФактур", МассивСчетовФактур);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетФактураВыданный.Номер,
		|	СчетФактураВыданный.Дата,
		|	СчетФактураВыданный.Ссылка,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СчетФактураВыданныйДокументыОснования.ДокументОснование) КАК КоличествоДокументовОснований
		|ИЗ
		|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|		ПО СчетФактураВыданныйДокументыОснования.Ссылка = СчетФактураВыданный.Ссылка
		|ГДЕ
		|	СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
		|	И СчетФактураВыданный.Ссылка В(&СписокСчетовФактур)
		|
		|СГРУППИРОВАТЬ ПО
		|	СчетФактураВыданный.Номер,
		|	СчетФактураВыданный.Дата,
		|	СчетФактураВыданный.Ссылка
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СчетФактураВыданныйДокументыОснования.ДокументОснование) > 1";
		Выборка = Запрос.Выполнить().Выбрать();
		ШаблонСообщения = НСтр("ru = 'У корректировочного счета-фактуры №%1 от %2 указано несколько документов-оснований. Отправка таких счетов-фактур не поддерживается.'");
		Пока Выборка.Следующий() Цикл
			Найденный = ДокументыМассив.Найти(Выборка.Ссылка);
			Если Найденный <> Неопределено Тогда
				ДокументыМассив.Удалить(Найденный);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Выборка.Номер, Выборка.Дата),
					Выборка.Ссылка);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// Проверим заполнение вида электронного документа
	
	МассивДляПроверки = Новый Массив;
	Для Каждого Элемент Из ДокументыМассив Цикл
		Если ТипЗнч(Элемент) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
			МассивДляПроверки.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивДляПроверки.Количество() > 0 Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("МассивСсылок", МассивДляПроверки);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОтчетКомитентуОПродажахТовары.Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(ОтчетКомитентуОПродажахТовары.Ссылка) КАК Представление
		|ИЗ
		|	Документ.ОтчетКомитентуОПродажах.Товары КАК ОтчетКомитентуОПродажахТовары
		|ГДЕ
		|	ОтчетКомитентуОПродажахТовары.Ссылка В(&МассивСсылок)
		|	И (ОтчетКомитентуОПродажахТовары.Покупатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ИЛИ ОтчетКомитентуОПродажахТовары.ДатаРеализации = ДАТАВРЕМЯ(1, 1, 1))";
		
		// проверка отчета комитенту
		Выборка = Запрос.Выполнить().Выбрать();
		ШаблонСообщения = НСтр("ru = '%1 - в табличной части товаров и услуг не заполнены поля %2 или %3.'");		
		Пока Выборка.Следующий() Цикл
			Найденный = ДокументыМассив.Найти(Выборка.Ссылка);
			Если Найденный <> Неопределено Тогда
				ДокументыМассив.Удалить(Найденный);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Выборка.Представление, """Покупатель""", """Дата реализации"""),
				Выборка.Ссылка);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// Проверка возможности формирования УПД/УКД
	Для Каждого СчетФактура Из МассивСчетовФактур Цикл
		
		Отказ = Ложь;
		ЭлектронноеВзаимодействиеБП.ПроверитьВозможностьФормированияЕдиногоДокумента(СчетФактура, Отказ);
		Если Отказ Тогда
			МассивНаУдаление.Добавить(СчетФактура);
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверка возможности формирования УПД/УКД
	Для Каждого Документ Из МассивДокументовРеализации Цикл
		
		Отказ = Ложь;
		ЭлектронноеВзаимодействиеБП.ПроверитьВозможностьФормированияЕдиногоДокумента(Документ, Отказ);
		Если Отказ Тогда
			МассивНаУдаление.Добавить(Документ);
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверка возможности формирования УПД/УКД
	Для Каждого Документ Из МассивДокументовКорректировок Цикл
		
		Отказ = Ложь;
		ЭлектронноеВзаимодействиеБП.ПроверитьВозможностьФормированияЕдиногоДокумента(
			Документ, Отказ);
		Если Отказ Тогда
			МассивНаУдаление.Добавить(Документ);
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверка банковских платежек. Не формируем ЭД для валютных банковских счетов.
	Для Каждого Элемент Из МассивПлатежныхДокументов Цикл
		
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Элемент, "СчетОрганизации.Валютный") Тогда
			
			ШаблонСообщения = НСтр("ru = 'Электронный документ для документа ""%1"" не сформирован. 1С:ДиректБанк не поддерживает обмен по валютным банковским счетам.
				|Используйте команду ""Отправить в банк"" в списке документов для выгрузки данных в клиент-банк.'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Строка(Элемент));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			МассивНаУдаление.Добавить(Элемент);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Элемент Из МассивНаУдаление Цикл
		
		ЭлементНаУдаление = ДокументыМассив.Найти(Элемент);
		Если ЭлементНаУдаление <> Неопределено Тогда
			
			ДокументыМассив.Удалить(ДокументыМассив.Найти(Элемент));
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Получает данные о физическом (юридическом) лице по ссылке.
//
// Параметры:
//  ЮрФизЛицо - Ссылка - ссылка на элемент справочника, по которому надо получить данные.
//
// Возвращаемое значение:
//  Структура - данные юридического (физического лица).
//
Функция ПолучитьДанныеЮрФизЛица(ЮрФизЛицо, ДатаСведений = Неопределено, БанковскийСчет = Неопределено) Экспорт
	
	Дата = ?(ДатаСведений = Неопределено, ТекущаяДатаСеанса(), ДатаСведений);
	
	Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		ОбъектПолученияСведений = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЮрФизЛицо, "Владелец");
	Иначе
		ОбъектПолученияСведений = ЮрФизЛицо;
	КонецЕсли;
	
	ДанныеЮрФизЛица = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(ОбъектПолученияСведений, Дата, БанковскийСчет);
	ТипЮрФизЛица = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектПолученияСведений, "ЮридическоеФизическоеЛицо");
	
	Если ТипЮрФизЛица = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		
		ДанныеЮрФизЛица.Вставить("Фамилия",  "");
		ДанныеЮрФизЛица.Вставить("Имя",      "");
		ДанныеЮрФизЛица.Вставить("Отчество", "");
		
		Если ТипЗнч(ОбъектПолученияСведений)=Тип("СправочникСсылка.Организации") Тогда
			НаименованияОрганизации = Справочники.Организации.НаименованияНаДату(ОбъектПолученияСведений, Дата);
			ДанныеЮрФизЛица.Вставить("Фамилия", НаименованияОрганизации.ФИО.Фамилия);
			ДанныеЮрФизЛица.Вставить("Имя", НаименованияОрганизации.ФИО.Имя);
			ДанныеЮрФизЛица.Вставить("Отчество", НаименованияОрганизации.ФИО.Отчество);
			ДанныеЮрФизЛица.ПолноеНаименование = НаименованияОрганизации.ФИО.Представление;
		Иначе
			ФИО = ДанныеЮрФизЛица.ПолноеНаименование;
			Если ВРЕГ(Лев(ФИО,2))="ИП" Тогда
				ФИО = Прав(ФИО, СтрДлина(ФИО)-2);
			ИначеЕсли ВРЕГ(Лев(ФИО, СтрДлина("Индивидуальный предприниматель")))="ИНДИВИДУАЛЬНЫЙ ПРЕДПРИНИМАТЕЛЬ" Тогда
				ФИО = Прав(ФИО, СтрДлина(ФИО)-СтрДлина("Индивидуальный предприниматель"));
			КонецЕсли;
			ФИО = СтрЗаменить(ФИО, """","");
			ФИО = СтрЗаменить(ФИО, "'","");
			ФИО = СокрЛП(ФИО);
			ЭлектронноеВзаимодействиеБП.ЗаполнитьФИОиДолжность(ДанныеЮрФизЛица, ФИО);
			ДанныеЮрФизЛица.ПолноеНаименование  = ФИО;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЮрФизЛицо, "КПП, НаименованиеПолное");
		ДанныеЮрФизЛица.Вставить("ПолноеНаименование", Реквизиты.НаименованиеПолное);
		Если ТипЮрФизЛица = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			ДанныеЮрФизЛица.Вставить("КПП", Реквизиты.КПП);
		КонецЕсли;
	КонецЕсли;
	
	ДанныеЮрФизЛица.Вставить("ОфициальноеНаименование", ДанныеЮрФизЛица.ПолноеНаименование);
	ДанныеЮрФизЛица.Вставить("ТипЮрФизЛица", ТипЮрФизЛица);
	ДанныеЮрФизЛица.Вставить("ЮрФизЛицоСсылка", ОбъектПолученияСведений.Ссылка);
	
	Возврат ДанныеЮрФизЛица;
	
КонецФункции

// Возвращает текстовое описание организации по параметрам.
//
// Параметры:
//  СведенияОрганизации - Структура - сведения об организации, по которой надо составить описание.
//  Список - Строка - список запрашиваемых параметров организации.
//  СПрефиксом - Булево - признак вывода префикса параметра организации.
//
// Возвращаемое значение:
//  Строка - описание организации.
//
Функция ОписаниеОрганизации(СведенияОКонтрагенте, Список = "", СПрефиксом = Истина) Экспорт
	
	СписокПолей = ?(Список = "", "ПолноеНаименование,ИНН,Свидетельство,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет", Список);
	МассивПолей = СтрРазделить(СписокПолей, ",", Ложь);
	МассивПолейПослеПроверки = Новый Массив;
	Для Каждого ЭлементМассива Из МассивПолей Цикл
		
		Если СведенияОКонтрагенте.Свойство(ЭлементМассива) Тогда
			
			МассивПолейПослеПроверки.Добавить(ЭлементМассива);
			
		КонецЕсли;
		
	КонецЦикла;
	СписокПолей = СтрСоединить(МассивПолейПослеПроверки, ",");
	
	Возврат ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКонтрагенте, СписокПолей, СПрефиксом);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с правами

// Проверяет наличие прав обрабатывать электронный документы.
//
// Возвращаемое значение:
//  Булево - истина или ложь, в зависимости от установленных прав.
//
Функция ЕстьПравоОбработкиЭД() Экспорт
	
	Результат = Пользователи.РолиДоступны("ВыполнениеОбменаЭД, ПолныеПрава");
	
	Возврат Результат;
	
КонецФункции

// Проверяет наличие прав читать электронный документы.
//
// Возвращаемое значение:
//  Булево - истина или ложь, в зависимости от установленных прав.
//
Функция ЕстьПравоЧтенияЭД() Экспорт
	
	Результат = Пользователи.РолиДоступны("ВыполнениеОбменаЭД, ЧтениеЭД, ПолныеПрава");
	
	Возврат Результат;
	
КонецФункции

// Проверяет наличие прав на открытие журнала регистрации.
//
// Возвращаемое значение:
//  Булево - истина или ложь, в зависимости от установленных прав.
//
Функция ЕстьПравоОткрытияЖурналаРегистрации() Экспорт
	
	Результат = Пользователи.ЭтоПолноправныйПользователь();
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Находит ссылку на справочник по переданному реквизиту.
//
// Параметры:
//  ИмяСправочника - Строка, имя справочника, объект которого надо найти,
//  ИмяРеквизита - Строка, имя реквизита, по которому будет проведен поиск,
//  ЗначРеквизита - произвольное значение, значение реквизита, по которому будет проведен поиск,
//  Владелец - Ссылка на владельца для поиска в иерархическом справочнике.
//
Функция НайтиСсылкуНаОбъектПоРеквизиту(ИмяСправочника, ИмяРеквизита, ЗначРеквизита, Владелец = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	ОбъектМетаданных = Метаданные.Справочники[ИмяСправочника];
	Если НЕ ОбщегоНазначения.ЭтоСтандартныйРеквизит(ОбъектМетаданных.СтандартныеРеквизиты, ИмяРеквизита)
		И НЕ ОбъектМетаданных.Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
		
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИскСправочник.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник." + ИмяСправочника + " КАК ИскСправочник
	|ГДЕ
	|	ИскСправочник." + ИмяРеквизита + " = &ЗначРеквизита";
	
	Если ЗначениеЗаполнено(Владелец) Тогда
		Запрос.Текст = Запрос.Текст + " И ИскСправочник.Владелец = &Владелец";
		Запрос.УстановитьПараметр("Владелец", Владелец);
	КонецЕсли;
	Запрос.УстановитьПараметр("ЗначРеквизита", ЗначРеквизита);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
