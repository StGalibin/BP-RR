#Область ПрограммныйИнтерфейс

// Возвращаются реквизиты налоговой инспекции по коду
//
// Параметры:
//  КодНалоговогоОргана  - Строка - код налогового органа
//
// Возвращаемое значение:
//   Структура   - реквизиты налоговой инспекции. 
//                 Содержание структуры описано в функции НовыеРеквизитыГосударственногоОргана()
//
Функция РеквизитыНалоговогоОрганаПоКоду(Знач КодНалоговогоОргана) Экспорт
	
	РеквизитыНалоговогоОргана = НовыеРеквизитыГосударственногоОргана();
	РеквизитыНалоговогоОргана.Код = КодГосударственногоОрганаДляЗапросаРеквизитов(Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган, КодНалоговогоОргана);
	
	ОписаниеОшибки = "";
	Прокси = ПроксиСервиса(ОписаниеОшибки);
	Если Прокси <> Неопределено Тогда
		Попытка
			Ответ = Прокси.findIfnsByCode(РеквизитыНалоговогоОргана.Код, Метаданные.Имя);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Код налогового органа %1:'"), РеквизитыНалоговогоОргана.Код)
				+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецПопытки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ОбработатьОшибкуСервиса(ОписаниеОшибки, РеквизитыНалоговогоОргана);
		Возврат РеквизитыНалоговогоОргана;
	КонецЕсли;
	
	Вид = Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган;
	ГосударственныйОрганИБ = ГосударственныйОрганИнформационнойБазы(Вид, РеквизитыНалоговогоОргана.Код);
	
	РеквизитыНалоговогоОргана.Ссылка = ГосударственныйОрганИБ.Ссылка;
	РеквизитыНалоговогоОргана.Вид = Вид;
	РеквизитыНалоговогоОргана.Код = СокрЛП(Ответ.Code);
	РеквизитыНалоговогоОргана.ИНН = СокрЛП(Ответ.INN);
	РеквизитыНалоговогоОргана.КПП = СокрЛП(Ответ.KPP);
	РеквизитыНалоговогоОргана.Наименование = СокрЛП(Ответ.ShortName);
	РеквизитыНалоговогоОргана.ПолноеНаименование = СокрЛП(Ответ.FullName);
	РеквизитыНалоговогоОргана.Адрес   = СокрЛП(Ответ.Address);
	РеквизитыНалоговогоОргана.Телефон = СокрЛП(Ответ.Phone);
	РеквизитыНалоговогоОргана.ЭлектроннаяПочта = СокрЛП(Ответ.EMail);
	РеквизитыНалоговогоОргана.ИнтернетСайт = СокрЛП(Ответ.WebSite);
	Если Ответ.PaymentDetails <> Неопределено Тогда
		РеквизитыНалоговогоОргана.ПлатежныеРеквизиты.БанковскийСчет    = ГосударственныйОрганИБ.БанковскийСчет;
		РеквизитыНалоговогоОргана.ПлатежныеРеквизиты.Банк              = ГосударственныйОрганИБ.Банк;
		РеквизитыНалоговогоОргана.ПлатежныеРеквизиты.ПолучательПлатежа = СокрЛП(Ответ.PaymentDetails.RecipientName);
		РеквизитыНалоговогоОргана.ПлатежныеРеквизиты.РасчетныйСчет     = СокрЛП(Ответ.PaymentDetails.PaymentAccount);
		РеквизитыНалоговогоОргана.ПлатежныеРеквизиты.КоррСчет          = СокрЛП(Ответ.PaymentDetails.CorrespondentAccount);
		РеквизитыНалоговогоОргана.ПлатежныеРеквизиты.БИК               = СокрЛП(Ответ.PaymentDetails.BIK);
	КонецЕсли;
	Если Ответ.RegistrationDetailsIP <> Неопределено Тогда
		РеквизитыНалоговогоОргана.РегистрирующийОрганИП.Код             = СокрЛП(Ответ.RegistrationDetailsIP.Code);
		РеквизитыНалоговогоОргана.РегистрирующийОрганИП.Наименование    = СокрЛП(Ответ.RegistrationDetailsIP.FullName);
		РеквизитыНалоговогоОргана.РегистрирующийОрганИП.Адрес           = СокрЛП(Ответ.RegistrationDetailsIP.Address);
		РеквизитыНалоговогоОргана.РегистрирующийОрганИП.Телефон         = СокрЛП(Ответ.RegistrationDetailsIP.Phone);
		РеквизитыНалоговогоОргана.РегистрирующийОрганИП.Информация      = СокрЛП(Ответ.RegistrationDetailsIP.Information);
	КонецЕсли;
	Если Ответ.RegistrationDetailsUL <> Неопределено Тогда
		РеквизитыНалоговогоОргана.РегистрирующийОрганЮЛ.Код             = СокрЛП(Ответ.RegistrationDetailsUL.Code);
		РеквизитыНалоговогоОргана.РегистрирующийОрганЮЛ.Наименование    = СокрЛП(Ответ.RegistrationDetailsUL.FullName);
		РеквизитыНалоговогоОргана.РегистрирующийОрганЮЛ.Адрес           = СокрЛП(Ответ.RegistrationDetailsUL.Address);
		РеквизитыНалоговогоОргана.РегистрирующийОрганЮЛ.Телефон         = СокрЛП(Ответ.RegistrationDetailsUL.Phone);
		РеквизитыНалоговогоОргана.РегистрирующийОрганЮЛ.Информация      = СокрЛП(Ответ.RegistrationDetailsUL.Information);
	КонецЕсли;
	
	Возврат РеквизитыНалоговогоОргана;
	
КонецФункции

// Возвращаются реквизиты отделения ФСС по коду
//
// Параметры:
//  КодОтделенияФСС  - Строка - Код отделения ФСС
//
// Возвращаемое значение:
//   Структура   - реквизиты отделения ФСС. 
//                 Содержание структуры описано в функции НовыеРеквизитыГосударственногоОргана()
//
Функция РеквизитыОтделенияФССПоКоду(Знач КодОтделенияФСС) Экспорт
	
	РеквизитыФСС = НовыеРеквизитыГосударственногоОргана();
	РеквизитыФСС.Код = КодГосударственногоОрганаДляЗапросаРеквизитов(Перечисления.ВидыГосударственныхОрганов.ОрганФСС, КодОтделенияФСС);
	
	ОписаниеОшибки = "";
	Прокси = ПроксиСервиса(ОписаниеОшибки);
	Если Прокси <> Неопределено Тогда
		Попытка
			Ответ = Прокси.findFssByCode(РеквизитыФСС.Код, Метаданные.Имя);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Код отделения ФСС %1:'"), РеквизитыФСС.Код)
				+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецПопытки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ОбработатьОшибкуСервиса(ОписаниеОшибки, РеквизитыФСС);
		Возврат РеквизитыФСС;
	КонецЕсли;
	
	Вид = Перечисления.ВидыГосударственныхОрганов.ОрганФСС;
	ГосударственныйОрганИБ = ГосударственныйОрганИнформационнойБазы(Вид, РеквизитыФСС.Код);
	
	РеквизитыФСС.Ссылка = ГосударственныйОрганИБ.Ссылка;
	РеквизитыФСС.Вид = Вид;
	РеквизитыФСС.Код = СокрЛП(Ответ.Code);
	РеквизитыФСС.ИНН = СокрЛП(Ответ.INN);
	РеквизитыФСС.КПП = СокрЛП(Ответ.KPP);
	РеквизитыФСС.Наименование = СокрЛП(Ответ.ShortName);
	РеквизитыФСС.ПолноеНаименование = СокрЛП(Ответ.FullName);
	РеквизитыФСС.Адрес   = СокрЛП(Ответ.Address);
	РеквизитыФСС.Телефон = СокрЛП(Ответ.Phone);
	РеквизитыФСС.ЭлектроннаяПочта = СокрЛП(Ответ.EMail);
	РеквизитыФСС.ИнтернетСайт = СокрЛП(Ответ.WebSite);
	Если РеквизитыФСС.ПлатежныеРеквизиты <> Неопределено Тогда
		РеквизитыФСС.ПлатежныеРеквизиты.БанковскийСчет    = ГосударственныйОрганИБ.БанковскийСчет;
		РеквизитыФСС.ПлатежныеРеквизиты.Банк              = ГосударственныйОрганИБ.Банк;
		РеквизитыФСС.ПлатежныеРеквизиты.ПолучательПлатежа = СокрЛП(Ответ.PaymentDetails.RecipientName);
		РеквизитыФСС.ПлатежныеРеквизиты.РасчетныйСчет     = СокрЛП(Ответ.PaymentDetails.PaymentAccount);
		РеквизитыФСС.ПлатежныеРеквизиты.КоррСчет          = СокрЛП(Ответ.PaymentDetails.CorrespondentAccount);
		РеквизитыФСС.ПлатежныеРеквизиты.БИК               = СокрЛП(Ответ.PaymentDetails.BIK);
	КонецЕсли;
	
	Возврат РеквизитыФСС;
	
КонецФункции

// Возвращаются реквизиты отделения ПФР по коду
//
// Параметры:
//  КодОтделенияПФР  - Строка - код отделения ПФР
//
// Возвращаемое значение:
//   Структура   - реквизиты отделения ПФР. 
//                 Содержание структуры описано в функции НовыеРеквизитыГосударственногоОргана()
//
Функция РеквизитыОтделенияПФРПоКоду(Знач КодОтделенияПФР) Экспорт
	
	РеквизитыПФР = НовыеРеквизитыГосударственногоОргана();
	РеквизитыПФР.Код = КодГосударственногоОрганаДляЗапросаРеквизитов(Перечисления.ВидыГосударственныхОрганов.ОрганПФР, КодОтделенияПФР);
	
	ОписаниеОшибки = "";
	Прокси = ПроксиСервиса(ОписаниеОшибки);
	Если Прокси <> Неопределено Тогда
		Попытка
			Ответ = Прокси.findPfrByCode(РеквизитыПФР.Код, Метаданные.Имя);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Код отделения ПФР %1:'"), РеквизитыПФР.Код)
				+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецПопытки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ОбработатьОшибкуСервиса(ОписаниеОшибки, РеквизитыПФР);
		Возврат РеквизитыПФР;
	КонецЕсли;
	
	Вид = Перечисления.ВидыГосударственныхОрганов.ОрганПФР;
	ГосударственныйОрганИБ = ГосударственныйОрганИнформационнойБазы(Вид, КодОтделенияПФР);
	
	РеквизитыПФР.Ссылка = ГосударственныйОрганИБ.Ссылка;
	РеквизитыПФР.Вид = Вид;
	РеквизитыПФР.Код = СокрЛП(Ответ.Code);
	РеквизитыПФР.ИНН = СокрЛП(Ответ.INN);
	РеквизитыПФР.КПП = СокрЛП(Ответ.KPP);
	РеквизитыПФР.Наименование = СокрЛП(Ответ.ShortName);
	РеквизитыПФР.ПолноеНаименование = СокрЛП(Ответ.FullName);
	РеквизитыПФР.Адрес   = СокрЛП(Ответ.Address);
	РеквизитыПФР.Телефон = СокрЛП(Ответ.Phone);
	РеквизитыПФР.ЭлектроннаяПочта = СокрЛП(Ответ.EMail);
	РеквизитыПФР.ИнтернетСайт = СокрЛП(Ответ.WebSite);
	Если РеквизитыПФР.ПлатежныеРеквизиты <> Неопределено Тогда
		РеквизитыПФР.ПлатежныеРеквизиты.БанковскийСчет    = ГосударственныйОрганИБ.БанковскийСчет;
		РеквизитыПФР.ПлатежныеРеквизиты.Банк              = ГосударственныйОрганИБ.Банк;
		РеквизитыПФР.ПлатежныеРеквизиты.ПолучательПлатежа = СокрЛП(Ответ.PaymentDetails.RecipientName);
		РеквизитыПФР.ПлатежныеРеквизиты.РасчетныйСчет     = СокрЛП(Ответ.PaymentDetails.PaymentAccount);
		РеквизитыПФР.ПлатежныеРеквизиты.КоррСчет          = СокрЛП(Ответ.PaymentDetails.CorrespondentAccount);
		РеквизитыПФР.ПлатежныеРеквизиты.БИК               = СокрЛП(Ответ.PaymentDetails.BIK);
	КонецЕсли;
	
	Возврат РеквизитыПФР;
	
КонецФункции

// Возвращает сведения о государственном органе из справочника Контрагенты
//
// Параметры:
//  ВидГосударственногоОргана - ПеречислениеСсылка.ВидыГосударственныхОрганов - вид государственного органа
//  КодГосударственногоОргана - Строка - код государственного органа
//
// Возвращаемое значение:
//   Структура   - реквизиты налоговой инспекции. 
//                 Содержание структуры описано в функции НовыеРеквизитыГосударственногоОргана()
//
Функция ГосударственныйОрган(Знач ВидГосударственногоОргана, Знач КодГосударственногоОргана) Экспорт
	
	ГосударственныйОрган = НовыеРеквизитыГосударственногоОргана();
	
	Если Не ПравоДоступа("Чтение", Метаданные.Справочники.Контрагенты) Тогда
		Возврат ГосударственныйОрган;
	КонецЕсли;
	
	Код = КодГосударственногоОрганаДляЗапросаРеквизитов(ВидГосударственногоОргана, КодГосударственногоОргана);
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Вид", ВидГосударственногоОргана);
	Запрос.Параметры.Вставить("Код", Код);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка,
	|	Контрагенты.ИНН,
	|	Контрагенты.КПП,
	|	Контрагенты.НаименованиеПолное КАК ПолноеНаименование,
	|	Контрагенты.Наименование,
	|	Контрагенты.ОсновнойБанковскийСчет КАК БанковскийСчет,
	|	ЕСТЬNULL(Контрагенты.ОсновнойБанковскийСчет.НомерСчета, """") КАК РасчетныйСчет,
	|	ЕСТЬNULL(Контрагенты.ОсновнойБанковскийСчет.ТекстКорреспондента, """") КАК ПолучательПлатежа,
	|	ЕСТЬNULL(Контрагенты.ОсновнойБанковскийСчет.Банк, ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)) КАК Банк,
	|	ЕСТЬNULL(Контрагенты.ОсновнойБанковскийСчет.Банк.Код, """") КАК БИК,
	|	ЕСТЬNULL(Контрагенты.ОсновнойБанковскийСчет.Банк.КоррСчет, """") КАК КоррСчет
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ВидГосударственногоОргана = &Вид
	|	И Контрагенты.КодГосударственногоОргана = &Код
	|	И Контрагенты.ПометкаУдаления = ЛОЖЬ";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ГосударственныйОрган, Выборка);
		ЗаполнитьЗначенияСвойств(ГосударственныйОрган.ПлатежныеРеквизиты, Выборка);
		
		Если НЕ ЗначениеЗаполнено(ГосударственныйОрган.ПлатежныеРеквизиты.ПолучательПлатежа) Тогда
			ПолучательПлатежа = УчетДенежныхСредствБП.НаименованиеПлательщикаПолучателяПоУмолчанию(
					Выборка.Ссылка, Выборка.БанковскийСчет, Истина);
			ГосударственныйОрган.ПлатежныеРеквизиты.ПолучательПлатежа = ПолучательПлатежа;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ГосударственныйОрган;
	
КонецФункции

// Проверяет, что реквизиты в справочнике Контрагенты совпадают с данными сервиса
//
// Параметры:

//  Реквизиты - Структура - содержание структуры описано в функции НовыеРеквизитыГосударственногоОргана()
//
// Возвращаемое значение:
//   Булево - признак, что платежные реквизиты в справочнике "Контрагенты" актуальны
//
Функция ПлатежныеРеквизитыАктуальны(Реквизиты) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Реквизиты.Ссылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РеквизитыИнформационнойБазы = ДанныеГосударственныхОрганов.ГосударственныйОрган(Реквизиты.Вид, Реквизиты.Код);
	
	Если Реквизиты.ИНН <> РеквизитыИнформационнойБазы.ИНН
		ИЛИ Реквизиты.КПП <> РеквизитыИнформационнойБазы.КПП
		ИЛИ Реквизиты.ПолноеНаименование <> РеквизитыИнформационнойБазы.ПолноеНаименование
		ИЛИ Реквизиты.ПлатежныеРеквизиты.РасчетныйСчет <> РеквизитыИнформационнойБазы.ПлатежныеРеквизиты.РасчетныйСчет
		ИЛИ Реквизиты.ПлатежныеРеквизиты.ПолучательПлатежа <> РеквизитыИнформационнойБазы.ПлатежныеРеквизиты.ПолучательПлатежа
		ИЛИ Реквизиты.ПлатежныеРеквизиты.БИК <> РеквизитыИнформационнойБазы.ПлатежныеРеквизиты.БИК Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Обновляет платежные реквизиты государственного органа в справочнике "Контрагенты".
// В том случае, если в справочнике "Контрагенты" нет элемента, соответствующего гос.органу, он будет создан.
//
// Параметры:
//  Реквизиты - Структура - содержание структуры описано в функции НовыеРеквизитыГосударственногоОргана()
//
// Возвращаемое значение:
//
Процедура ОбновитьДанныеГосударственногоОргана(Реквизиты) Экспорт
	
	Если ЗначениеЗаполнено(Реквизиты.Ссылка) Тогда
		
		Объект = Реквизиты.Ссылка.ПолучитьОбъект();
		
	Иначе
		
		//Определим родителя для государственного органа
		НаименованиеРодителя = НСтр("ru='Государственные органы'");
		Запрос = Новый Запрос();
		Запрос.Параметры.Вставить("Вид", Реквизиты.Вид);
		Запрос.Параметры.Вставить("Наименование", НаименованиеРодителя);
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Контрагенты.Родитель КАК Ссылка,
		|	1 КАК Приоритет
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ВидГосударственногоОргана = &Вид
		|	И Контрагенты.ПометкаУдаления = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Контрагенты.Ссылка,
		|	2
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ЭтоГруппа = ИСТИНА
		|	И Контрагенты.Наименование = &Наименование
		|	И Контрагенты.ПометкаУдаления = ЛОЖЬ
		|	И Контрагенты.Родитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Родитель = Выборка.Ссылка;
		Иначе
			НовыйРодитель = Справочники.Контрагенты.СоздатьГруппу();
			НовыйРодитель.Наименование = НаименованиеРодителя;
			НовыйРодитель.Записать();
			Родитель = НовыйРодитель.Ссылка;
		КонецЕсли;
		
		Объект = Справочники.Контрагенты.СоздатьЭлемент();
		Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		Объект.СтранаРегистрации = Справочники.СтраныМира.Россия;
		Объект.Родитель = Родитель;
		Объект.ГосударственныйОрган = Истина;
		Объект.ВидГосударственногоОргана = Реквизиты.Вид;
		Объект.КодГосударственногоОргана = КодГосударственногоОрганаДляЗапросаРеквизитов(Реквизиты.Вид, Реквизиты.Код);
		Объект.Наименование = Реквизиты.Наименование;
	КонецЕсли;
	
	Объект.ИНН = Реквизиты.ИНН;
	Объект.КПП = Реквизиты.КПП;
	Объект.НаименованиеПолное = Реквизиты.ПолноеНаименование;
	
	//Проверим, что данные банковского счета актуальны (совпадают БИК и расчетный счет)
	//Если данные актуальны, обновляем счет.
	//В противном случае создаем новый расчетный счет, предварительно убедившись, что такого расчетного счета у контрагента уже нет.
	ДанныеБанковскогоСчетаАктуальны = Ложь;
	Если ЗначениеЗаполнено(Объект.ОсновнойБанковскийСчет) Тогда
		РеквизитыРасчетногоСчета = РеквизитыБанковскогоСчета(Объект.ОсновнойБанковскийСчет);
		Если РеквизитыРасчетногоСчета.РасчетныйСчет = Реквизиты.ПлатежныеРеквизиты.РасчетныйСчет
			И РеквизитыРасчетногоСчета.БИК = Реквизиты.ПлатежныеРеквизиты.БИК Тогда
			ДанныеБанковскогоСчетаАктуальны = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ОсновнойБанковскийСчет)
		И ДанныеБанковскогоСчетаАктуальны Тогда
		БанковскийСчет = Объект.ОсновнойБанковскийСчет.ПолучитьОбъект();
	Иначе
		
		БанковскийСчетКонтрагента = БанковскийСчетПоРеквизитам(Объект.Ссылка, 
			Реквизиты.ПлатежныеРеквизиты.РасчетныйСчет, Реквизиты.ПлатежныеРеквизиты.БИК);
		Если ЗначениеЗаполнено(БанковскийСчетКонтрагента) Тогда
			БанковскийСчет = БанковскийСчетКонтрагента.ПолучитьОбъект();
			Объект.ОсновнойБанковскийСчет = БанковскийСчет.Ссылка;
		Иначе
			БанковскийСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
			БанковскийСчет.ВалютаДенежныхСредств = Константы.ВалютаРегламентированногоУчета.Получить();
			БанковскийСчет.ВидСчета = "Расчетный";
			БанковскийСчет.ВсегдаУказыватьКПП = Истина;
			НоваяСсылка = Справочники.БанковскиеСчета.ПолучитьСсылку();
			БанковскийСчет.УстановитьСсылкуНового(НоваяСсылка);
			ТаблицаБанков = Справочники.Банки.ПолучитьТаблицуБанковПоРеквизитам("Код", Реквизиты.ПлатежныеРеквизиты.БИК);
			БанковскийСчет.Банк = ?(ТаблицаБанков.Количество()>0, ТаблицаБанков[0].Ссылка, Справочники.Банки.ПустаяСсылка());
			БанковскийСчет.НомерСчета = Реквизиты.ПлатежныеРеквизиты.РасчетныйСчет;
			Объект.ОсновнойБанковскийСчет = БанковскийСчет.ПолучитьСсылкуНового();
			НаименованиеБанка = ?(ТаблицаБанков.Количество()>0, ТаблицаБанков[0].Наименование, "");
			БанковскийСчет.Наименование = БанковскиеСчетаФормыКлиентСервер.НаименованиеБанковскогоСчета(БанковскийСчет, НаименованиеБанка);
		КонецЕсли;
	КонецЕсли;
	
	БанковскийСчет.ТекстКорреспондента = Реквизиты.ПлатежныеРеквизиты.ПолучательПлатежа;
	
	НачатьТранзакцию();
	Попытка
		Объект.Записать();
		БанковскийСчет.Владелец = Объект.Ссылка;
		БанковскийСчет.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Ошибка сохранения государственного органа %1:'"), Реквизиты.Код)
			+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ОбработатьОшибкуСервиса(ОписаниеОшибки, Реквизиты);
	КонецПопытки;
	
	Реквизиты.Ссылка = Объект.Ссылка;
	Реквизиты.ПлатежныеРеквизиты.БанковскийСчет = БанковскийСчет.Ссылка;
	Реквизиты.ПлатежныеРеквизиты.Банк           = БанковскийСчет.Банк;
	
КонецПроцедуры

// Проверяет, что платежные реквизиты, переданные в параметре, соответствуют платежным реквизитам государственного органа
//
// Параметры:
//  Параметры - Структура - структура должна содержать параметры Контрагент, ПлатежныеРеквизиты, АдресРезультатаПроверкиПлатежныхРеквизитов.
//  АдресХранилища - Строка - адрес хранилища, в который будет помещен результат проверки.
//
// Возвращаемое значение:
//
Процедура ПроверитьПлатежныеРеквизитыКонтрагентаВФоне(Параметры, АдресХранилища) Экспорт
	
	Результат = Новый Структура();
	
	Если Параметры.Свойство("Контрагент") Тогда
		
		Результат = ПроверитьПлатежныеРеквизитыКонтрагента(Параметры.Контрагент, Параметры.ПлатежныеРеквизиты);
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

// Проверяет, что платежные реквизиты контрагента-государственного органа, соответствуют текущим данным
//
// Параметры:
//  Контрагент - СправочникСсылка.Контрагенты - Ссылка на контрагента-государственный орган, для которого выполняется проверка реквизитов.
//  ПлатежныеРеквизиты - Структура - Структура текущих платежных реквизитов контрагента.
//
// Возвращаемое значение:
//     Структура - Результат проверки.
Функция ПроверитьПлатежныеРеквизитыКонтрагента(Контрагент, ПлатежныеРеквизиты) Экспорт
	
	Результат = Новый Структура;
	
	РеквизитыКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент,
		"ГосударственныйОрган, ВидГосударственногоОргана, КодГосударственногоОргана");
		
	Если РеквизитыКонтрагента.ГосударственныйОрган
		И ЗначениеЗаполнено(РеквизитыКонтрагента.ВидГосударственногоОргана)
		И РеквизитыКонтрагента.ВидГосударственногоОргана <> Перечисления.ВидыГосударственныхОрганов.Прочий
		И ЗначениеЗаполнено(РеквизитыКонтрагента.КодГосударственногоОргана) Тогда
		
		Вид = РеквизитыКонтрагента.ВидГосударственногоОргана;
		Код = РеквизитыКонтрагента.КодГосударственногоОргана;
		Реквизиты = Неопределено;
		Если Вид = Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган Тогда
			Реквизиты = ДанныеГосударственныхОрганов.РеквизитыНалоговогоОрганаПоКоду(Код);
		ИначеЕсли Вид = Перечисления.ВидыГосударственныхОрганов.ОрганПФР Тогда
			Реквизиты = ДанныеГосударственныхОрганов.РеквизитыОтделенияПФРПоКоду(Код);
		ИначеЕсли Вид = Перечисления.ВидыГосударственныхОрганов.ОрганФСС Тогда
			Реквизиты = ДанныеГосударственныхОрганов.РеквизитыОтделенияФССПоКоду(Код);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Реквизиты) Тогда
			
			Если НЕ ЗначениеЗаполнено(Реквизиты.ОписаниеОшибки) Тогда
				
				Если ЗначениеЗаполнено(Реквизиты.ПлатежныеРеквизиты.РасчетныйСчет) Тогда
					
					Результат.Вставить("ПлатежныеРеквизитыНайдены", Истина);
					
					//Сравним полученные реквизиты и текущие значения
					СписокРасхождений = "";
					Если Реквизиты.ИНН <> ПлатежныеРеквизиты.ИНН Тогда
						СписокРасхождений = СписокРасхождений + ?(СписокРасхождений = "", "", ", ") + НСтр("ru='ИНН'");
					КонецЕсли;
					
					Если Реквизиты.КПП <> ПлатежныеРеквизиты.КПП Тогда
						СписокРасхождений = СписокРасхождений + ?(СписокРасхождений = "", "", ", ") + НСтр("ru='КПП'");
					КонецЕсли;
					
					Если Реквизиты.ПлатежныеРеквизиты.ПолучательПлатежа <> ПлатежныеРеквизиты.ПолучательПлатежа Тогда
						СписокРасхождений = СписокРасхождений + ?(СписокРасхождений = "", "", ", ") + НСтр("ru='Получатель платежа'");
					КонецЕсли;
					
					Если Реквизиты.ПлатежныеРеквизиты.РасчетныйСчет <> ПлатежныеРеквизиты.РасчетныйСчет Тогда
						СписокРасхождений = СписокРасхождений + ?(СписокРасхождений = "", "", ", ") + НСтр("ru='Расчетный счет'");
					КонецЕсли;
					
					Если Реквизиты.ПлатежныеРеквизиты.БИК <> ПлатежныеРеквизиты.БИК Тогда
						СписокРасхождений = СписокРасхождений + ?(СписокРасхождений = "", "", ", ") + НСтр("ru='БИК'");
					КонецЕсли;
					
					Если СписокРасхождений = "" Тогда
						Результат.Вставить("ПлатежныеРеквизитыАктуальны", Истина);
						Результат.Вставить("РезультатПроверки", НСтр("ru='Платежные реквизиты 
																		|указаны верно'"));
					Иначе
						Результат.Вставить("ПлатежныеРеквизитыАктуальны", Ложь);
						Результат.Вставить("РезультатПроверки", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='Возможно, платежные реквизиты указаны неверно.
								|Найдены отличия в реквизитах: %1'"), СписокРасхождений));
					КонецЕсли;
					
				Иначе
					
					Результат.Вставить("ПлатежныеРеквизитыНайдены", Ложь);
					Результат.Вставить("РезультатПроверки", НСтр("ru='Сведения о платежных реквизитах не найдены'"));
					
				КонецЕсли;
				
			ИначеЕсли Реквизиты.ОписаниеОшибки = "НеУказаныПараметрыАутентификации" Тогда
				Результат.Вставить("ТребуетсяАутентификация", Истина);
				Результат.Вставить("РезультатПроверки", НСтр("ru='Для проверки платежных реквизитов
								|необходимо подключиться к интернет-поддержке пользователей.'"));
				
			ИначеЕсли Реквизиты.ОписаниеОшибки = "Сервис1СКонтрагентНеПодключен" Тогда
				Результат.Вставить("Сервис1СКонтрагентНеПодключен", Истина);
				Результат.Вставить("РезультатПроверки", НСтр("ru='Для проверки платежных реквизитов
								|необходимо подключиться к сервису ""1С:Контрагент"".'"));
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

// Получает эталонные платежные реквизиты контрагента, если он является государственным органом
//
// Параметры:
//  Контрагент - СправочникСсылка.Контрагент - ссылка на контрагента, для которого требуется определить платежные реквизиты, должен иметь тип "Государственный орган"
//
// Возвращаемое значение:
//     Структура или Неопределено   - реквизиты государственного органа, либо Неопределено, если определить сведения не удается
Функция ПолучитьПлатежныеРеквизитыКонтрагента(Контрагент) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РеквизитыКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент,
			"ГосударственныйОрган, ВидГосударственногоОргана, КодГосударственногоОргана");
	
	Если РеквизитыКонтрагента.ГосударственныйОрган
			И ЗначениеЗаполнено(РеквизитыКонтрагента.ВидГосударственногоОргана)
			И РеквизитыКонтрагента.ВидГосударственногоОргана <> Перечисления.ВидыГосударственныхОрганов.Прочий
			И ЗначениеЗаполнено(РеквизитыКонтрагента.КодГосударственногоОргана) Тогда
			
			Вид = РеквизитыКонтрагента.ВидГосударственногоОргана;
			Код = РеквизитыКонтрагента.КодГосударственногоОргана;
			Реквизиты = Неопределено;
			Если Вид = Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган Тогда
				Реквизиты = ДанныеГосударственныхОрганов.РеквизитыНалоговогоОрганаПоКоду(Код);
			ИначеЕсли Вид = Перечисления.ВидыГосударственныхОрганов.ОрганПФР Тогда
				Реквизиты = ДанныеГосударственныхОрганов.РеквизитыОтделенияПФРПоКоду(Код);
			ИначеЕсли Вид = Перечисления.ВидыГосударственныхОрганов.ОрганФСС Тогда
				Реквизиты = ДанныеГосударственныхОрганов.РеквизитыОтделенияФССПоКоду(Код);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Реквизиты) Тогда
				Если НЕ ЗначениеЗаполнено(Реквизиты.ОписаниеОшибки) Тогда
					Возврат Реквизиты;
				КонецЕсли;
			КонецЕсли;
			
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает контрагента-получателя налога
//
// Параметры:
//  Налог       - СправочникСсылка.ВидыНалоговИПлатежейВБюджет
//  Организация - СправочникСсылка.Организации
//  Период      - Дата
//
// Возвращаемое значение:
//  СправочникСсылка.Контрагенты
//
Функция АдминистраторНалогаОрганизации(Налог, Организация, Период = Неопределено) Экспорт
	Перем КодГосударственногоОргана;
	
	Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	
	ВидГосударственногоОргана = Справочники.ВидыНалоговИПлатежейВБюджет.ВидГосударственногоОргана(Налог, Период);
	
	КодГосударственногоОргана = КодГосударственногоОрганаОрганизации(Организация, ВидГосударственногоОргана);
	
	Если ЗначениеЗаполнено(КодГосударственногоОргана) Тогда
		Контрагент = ГосударственныйОрган(ВидГосударственногоОргана, КодГосударственногоОргана).Ссылка;
	КонецЕсли;
	
	Возврат Контрагент;
	
КонецФункции

// Возвращает текст гиперссылки "Платежные реквизиты" для отображения на форме
//
// Параметры:
//  ГосударственныйОрган - Структура или Неопределено - содержание структуры описано в функции НовыеРеквизитыГосударственногоОргана()
//
// Возвращаемое значение:
//     Строка - текстовое описание гиперссылки "Платежные реквизиты" для отображения на форме
Функция ПредставлениеПлатежныхРеквизитовГосударственногоОргана(ГосударственныйОрган) Экспорт
	
	Если ЗначениеЗаполнено(ГосударственныйОрган)
		И ЗначениеЗаполнено(ГосударственныйОрган.ПлатежныеРеквизиты.ПолучательПлатежа) Тогда
		Возврат ГосударственныйОрган.ПлатежныеРеквизиты.ПолучательПлатежа;
	Иначе
		Возврат НСтр("ru = '<Не заполнено>'");
	КонецЕсли;
	
КонецФункции

// Определяет код государственного органа, администрирующего деятельность организации
//
// Параметры:
//  Организация					 - СправочникСсылка.Организации, СправочникОбъект.Организации - администрируемая организация
//  ВидГосударственногоОргана	 - ПеречислениеСсылка.ВидыГосударственныхОрганов - вид государственного органа
// 
// Возвращаемое значение:
//  Строка - значащая часть кода государственного органа, заданного в информационной базе
//
Функция КодГосударственногоОрганаОрганизации(Организация, ВидГосударственногоОргана) Экспорт
	
	Код = Неопределено;
	
	Если ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
		Если ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган Тогда
			Код = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "РегистрацияВНалоговомОргане.Код");
		ИначеЕсли ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.ОрганПФР Тогда
			Код = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "КодОрганаПФР");
		ИначеЕсли ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.ОрганФСС Тогда
			Код = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "КодПодчиненностиФСС");
		КонецЕсли;
	Иначе
		Если ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган Тогда
			Код = Организация.РегистрацияВНалоговомОргане.Код;
		ИначеЕсли ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.ОрганПФР Тогда
			Код = Организация.КодОрганаПФР;
		ИначеЕсли ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.ОрганФСС Тогда
			Код = Организация.КодПодчиненностиФСС;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Код) = Тип("Строка") Тогда
		Возврат СокрЛП(Код);
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ОписанияРеквизитов

Функция НовыеРеквизитыГосударственногоОргана() Экспорт

	РеквизитыГосударственногоОргана = Новый Структура;
	
	// Заполняется на основе данных ФИАС
	
	РеквизитыГосударственногоОргана.Вставить("Ссылка");             // СправочникСсылка.Контрагенты
	РеквизитыГосударственногоОргана.Вставить("Вид");                // ПеречислениеСсылка.ВидыГосударственныхОрганов
	РеквизитыГосударственногоОргана.Вставить("Код");                // Строка, 10
	РеквизитыГосударственногоОргана.Вставить("ИНН");                // Строка, 10
	РеквизитыГосударственногоОргана.Вставить("КПП");                // Строка, 9
	РеквизитыГосударственногоОргана.Вставить("Наименование");       // Строка, 0
	РеквизитыГосударственногоОргана.Вставить("ПолноеНаименование"); // Строка, 0
	РеквизитыГосударственногоОргана.Вставить("Адрес");              // Строка, 0
	РеквизитыГосударственногоОргана.Вставить("Телефон");            // Строка, 0
	РеквизитыГосударственногоОргана.Вставить("ЭлектроннаяПочта");   // Строка, 0
	РеквизитыГосударственногоОргана.Вставить("ИнтернетСайт");       // Строка, 0
	РеквизитыГосударственногоОргана.Вставить("ПлатежныеРеквизиты"); // Структура из НовыеПлатежныеРеквизиты
	РеквизитыГосударственногоОргана.Вставить("РегистрирующийОрганИП"); // Структура из НовыеРегистрирующийОрган
	РеквизитыГосударственногоОргана.Вставить("РегистрирующийОрганЮЛ"); // Структура из НовыеРегистрирующийОрган
	
	РеквизитыГосударственногоОргана.ПлатежныеРеквизиты = НовыеПлатежныеРеквизиты();
	РеквизитыГосударственногоОргана.РегистрирующийОрганИП = НовыеРегистрирующийОрган();
	РеквизитыГосударственногоОргана.РегистрирующийОрганЮЛ = НовыеРегистрирующийОрган();
	
	// Служебный реквизит
	РеквизитыГосударственногоОргана.Вставить("ОписаниеОшибки");     // Строка, 0
	
	Возврат РеквизитыГосударственногоОргана;

КонецФункции

Функция НовыеПлатежныеРеквизиты()
	
	ПлатежныеРеквизиты = Новый Структура;
	
	ПлатежныеРеквизиты.Вставить("БанковскийСчет");     // СправочникСсылка.БанковскиеСчета
	ПлатежныеРеквизиты.Вставить("Банк");               // СправочникСсылка.Банки
	ПлатежныеРеквизиты.Вставить("ПолучательПлатежа");  // Строка
	ПлатежныеРеквизиты.Вставить("РасчетныйСчет");      // Строка, 20
	ПлатежныеРеквизиты.Вставить("КоррСчет");           // Строка
	ПлатежныеРеквизиты.Вставить("БИК");                // Строка
	
	Возврат ПлатежныеРеквизиты;
	
КонецФункции

Функция НовыеРегистрирующийОрган()
	
	РегистрирующийОрган = Новый Структура;
	
	РегистрирующийОрган.Вставить("Код");          // Строка
	РегистрирующийОрган.Вставить("Наименование"); // Строка
	РегистрирующийОрган.Вставить("Адрес");        // Строка
	РегистрирующийОрган.Вставить("Телефон");      // Строка
	РегистрирующийОрган.Вставить("Информация");   // Строка
	
	Возврат РегистрирующийОрган;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Реквизиты государственных органов могут определяться частью кода государственного органа
//
Функция КодГосударственногоОрганаДляЗапросаРеквизитов(ВидГосударственногоОргана, КодГосударственногоОргана)
	
	Если ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган Тогда
		Возврат Лев(КодГосударственногоОргана, 4);
	ИначеЕсли ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.ОрганПФР Тогда
		Возврат Лев(КодГосударственногоОргана, 3);
	ИначеЕсли ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.ОрганФСС Тогда
		Возврат Лев(КодГосударственногоОргана, 4);
	Иначе
		Возврат КодГосударственногоОргана;
	КонецЕсли;
	
КонецФункции

Функция ГосударственныйОрганИнформационнойБазы(Вид, Код);
	
	ГосударственныйОрганИнформационнойБазы = Новый Структура();
	ГосударственныйОрганИнформационнойБазы.Вставить("Ссылка", Справочники.Контрагенты.ПустаяСсылка());
	ГосударственныйОрганИнформационнойБазы.Вставить("БанковскийСчет", Справочники.БанковскиеСчета.ПустаяСсылка());
	ГосударственныйОрганИнформационнойБазы.Вставить("Банк", Справочники.Банки.ПустаяСсылка());
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Вид", Вид);
	Запрос.Параметры.Вставить("Код", Код);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка,
	|	Контрагенты.ОсновнойБанковскийСчет КАК БанковскийСчет,
	|	ЕСТЬNULL(Контрагенты.ОсновнойБанковскийСчет.Банк, ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)) КАК Банк
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ВидГосударственногоОргана = &Вид
	|	И Контрагенты.КодГосударственногоОргана = &Код
	|	И Контрагенты.ПометкаУдаления = ЛОЖЬ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ГосударственныйОрганИнформационнойБазы, Выборка);
	КонецЕсли;
	
	Возврат ГосударственныйОрганИнформационнойБазы;
	
КонецФункции

Функция РеквизитыБанковскогоСчета(БанковскийСчет)
	
	Реквизиты = Новый Структура("ПолучательПлатежа, РасчетныйСчет, КоррСчет, БИК");
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("РасчетныйСчет", БанковскийСчет);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БанковскиеСчета.НомерСчета КАК РасчетныйСчет,
	|	БанковскиеСчета.Банк.КоррСчет,
	|	ЕСТЬNULL(БанковскиеСчета.Банк.Код, """") КАК БИК,
	|	БанковскиеСчета.ТекстКорреспондента КАК ПолучательПлатежа
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Ссылка = &РасчетныйСчет";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Реквизиты, Выборка);
	КонецЕсли;
	
	Возврат Реквизиты;
	
КонецФункции

Функция БанковскийСчетПоРеквизитам(Контрагент, РасчетныйСчет, БИК)
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Справочники.БанковскиеСчета.ПустаяСсылка()
	КонецЕсли;
		
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("РасчетныйСчет", РасчетныйСчет);
	Запрос.Параметры.Вставить("Владелец", Контрагент);
	Запрос.Параметры.Вставить("БИК", БИК);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	БанковскиеСчета.Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Банки КАК Банки
	|		ПО БанковскиеСчета.Банк = Банки.Ссылка
	|ГДЕ
	|	БанковскиеСчета.Владелец = &Владелец
	|	И БанковскиеСчета.НомерСчета = &РасчетныйСчет
	|	И Банки.Код = &БИК
	|	И БанковскиеСчета.ПометкаУдаления = ЛОЖЬ";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Справочники.БанковскиеСчета.ПустаяСсылка();
	
КонецФункции

Функция ПроксиСервиса(ОписаниеОшибки)
	
	Прокси = Неопределено;
	ПараметрыАутентификации = ПараметрыАутентификацииВСервисе();
	
	Если ПараметрыАутентификации = Неопределено Тогда
		
		// Служебный текст. Должен быть обработан на клиенте.
		ОписаниеОшибки = "НеУказаныПараметрыАутентификации"; 
		
	Иначе
		
		Попытка
			
			ПараметрыПодключения = ОбщегоНазначения.ПараметрыПодключенияWSПрокси();
			ПараметрыПодключения.АдресWSDL           = АдресСервиса();
			ПараметрыПодключения.URIПространстваИмен = ПространствоИмен();
			ПараметрыПодключения.ИмяСервиса          = "TaxWsImpl2Service";
			ПараметрыПодключения.ИмяТочкиПодключения = "TaxWsImpl2Port";
			ПараметрыПодключения.ИмяПользователя     = ПараметрыАутентификации.login;
			ПараметрыПодключения.Пароль              = ПараметрыАутентификации.password;
			ПараметрыПодключения.Таймаут             = 10;
			
			Прокси = ОбщегоНазначения.СоздатьWSПрокси(ПараметрыПодключения);
			
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецПопытки; 
		
	КонецЕсли;
	
	Возврат Прокси;
	
КонецФункции

Функция ПараметрыАутентификацииВСервисе()
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат Новый Структура("login,password", 
			"fresh", "fresh");
				
	Иначе
		ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		Если ДанныеАутентификации <> Неопределено Тогда
			Возврат Новый Структура("login,password", 
				ДанныеАутентификации.Логин, 
				ДанныеАутентификации.Пароль);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Процедура ОбработатьОшибкуСервиса(ОписаниеОшибки, СтруктураРеквизитов)
	
	КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка(); // Для записи события в журнал регистраации
	
	Если ОписаниеОшибки = "НеУказаныПараметрыАутентификации" Тогда
		ТекстОшибки    = "НеУказаныПараметрыАутентификации"; // Служебный текст. Должен быть обработан на клиенте.
		ОписаниеОшибки = НСтр("ru='Не указаны логин и пароль для доступа к интернет-поддержке'");
		ТекстСобытия   = НСтр("ru='Ошибка доступа'", КодОсновногоЯзыка);
		
	ИначеЕсли СтрНайти(ОписаниеОшибки, """status"":401") > 0 Тогда
		ТекстОшибки  = НСтр("ru='Неверно указаны логин и пароль для доступа к интернет-поддержке'");
		ТекстСобытия = НСтр("ru='Ошибка доступа'", КодОсновногоЯзыка);
		
	ИначеЕсли СтрНайти(ОписаниеОшибки, "SERVER-11:") > 0 
		ИЛИ СтрНайти(ОписаниеОшибки, "SERVER-12:") > 0 Тогда
		
		ТекстОшибки    = "Сервис1СКонтрагентНеПодключен"; // Служебный текст. Должен быть обработан на клиенте.
		ТекстСобытия   = НСтр("ru='Ошибка доступа'", КодОсновногоЯзыка);
		ОписаниеОшибки = НСтр("ru='Не подключен сервис 1С:Контрагент'");
		
	ИначеЕсли СтрНайти(ОписаниеОшибки, "SERVER-1:") > 0 Тогда
		ТекстОшибки  = НСтр("ru='Не указан код государственного органа'");
		ТекстСобытия = НСтр("ru='Ошибка получения данных'", КодОсновногоЯзыка);
		
	ИначеЕсли СтрНайти(ОписаниеОшибки, "SERVER-3:") > 0 Тогда
		ТекстОшибки  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Данные о государственном органе с кодом %1 не найдены'"),
			СтруктураРеквизитов.Код);
		ТекстСобытия = НСтр("ru='Ошибка получения данных'", КодОсновногоЯзыка);
		
	ИначеЕсли СтрНайти(ОписаниеОшибки, "SERVER-7:") > 0 Тогда
		ТекстОшибки  = НСтр("ru='Превышен лимит количества вызовов сервиса за один день'");
		ТекстСобытия = НСтр("ru='Ошибка доступа'", КодОсновногоЯзыка);
		
	ИначеЕсли СтрНайти(ОписаниеОшибки, "SERVER-8:") > 0 Тогда
		ТекстОшибки  = НСтр("ru='Отсутствует действующий договор ИТС'");
		ТекстСобытия = НСтр("ru='Ошибка доступа'", КодОсновногоЯзыка);
		
	Иначе
		ТекстОшибки  = НСтр("ru='Ошибка при работе с сервисом (подробнее см. Журнал регистрации)'");
		ТекстСобытия = НСтр("ru='Ошибка при работе с сервисом'", КодОсновногоЯзыка);
	КонецЕсли;
	
	СтруктураРеквизитов.ОписаниеОшибки = ТекстОшибки;
	
	ИмяСобытия = НСтр("ru = 'Сервис данных гос_органов.'", КодОсновногоЯзыка) + " " + ТекстСобытия;
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки);
	
КонецПроцедуры

Функция АдресСервиса()

	Возврат "https://api.taxregister.1c.ru/taxregister/v2?wsdl";

КонецФункции

Функция ПространствоИмен()
	
	Возврат "http://ws.taxregister.company1c.com/";
	
КонецФункции

#КонецОбласти