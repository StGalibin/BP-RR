
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ОШИБКАМИ

// Функция убирает из текста сообщения служебную информацию.
//
// Параметры
//  ТекстСообщения - Строка - Исходный текст сообщения.
//
// Возвращаемое значение:
//   Строка - Текст сообщения без служебной информации.
//
Функция СформироватьТекстСообщения(Знач ТекстСообщения) Экспорт

	НачалоСлужебногоСообщения    = СтрНайти(ТекстСообщения, "{");
	ОкончаниеСлужебногоСообщения = СтрНайти(ТекстСообщения, "}:");

	Если ОкончаниеСлужебногоСообщения > 0
		И НачалоСлужебногоСообщения > 0
		И НачалоСлужебногоСообщения < ОкончаниеСлужебногоСообщения Тогда

		ТекстСообщения = Лев(ТекстСообщения, (НачалоСлужебногоСообщения - 1)) +
		                 Сред(ТекстСообщения, (ОкончаниеСлужебногоСообщения + 2));

	КонецЕсли;

	Возврат СокрЛП(ТекстСообщения);

КонецФункции

// Возвращает строковое представление незаполненного значения, принятое в конфигурации.
// Возвращаемое значение:
//  Строка
Функция ПредставлениеНезаполненногоЗначения() Экспорт
	
	Возврат "<...>";
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// МАТЕМАТИКА

// Устарела. См. ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам()
// Функция выполняет пропорциональное распределение суммы в соответствии
// с заданными коэффициентами распределения
//
// Параметры:
//		ИсхСумма - Число - Распределяемая сумма.
//		МассивКоэф - Массив - Массив коэффициентов распределения.
//		Точность - Число - Точность округления при распределении. Необязателен.
//
//	Возврат:
//		МассивСумм - Массив - Массив размерностью равный массиву коэффициентов, содержит
//			суммы в соответствии с весом коэффициента (из массива коэффициентов)
//          В случае если распределить не удалось (сумма = 0, кол-во коэф. = 0,
//          или суммарный вес коэф. = 0), тогда возвращается значение Неопределено.
//
Функция РаспределитьПропорционально(Знач ИсхСумма, МассивКоэф, Знач Точность = 2) Экспорт

	Возврат ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(
				ИсхСумма, МассивКоэф, Точность);

КонецФункции // РаспределитьПропорционально()

// Предназначена для получения пустого значения заданного типа:
//	примитивного, или ссылочного. Используется
//
// Параметры:
//	ЗаданныйТип - Тип - Тип, пустое значение которого нужно получить.
//
Функция ПустоеЗначениеТипа(ЗаданныйТип) Экспорт

	Если ЗаданныйТип = Тип("Число") Тогда
		Возврат 0;

	ИначеЕсли ЗаданныйТип = Тип("Строка") Тогда
		Возврат "";

	ИначеЕсли ЗаданныйТип = Тип("Дата") Тогда
		Возврат '00010101000000';

	ИначеЕсли ЗаданныйТип = Тип("Булево") Тогда
		Возврат Ложь;

	Иначе
		Возврат Новый (ЗаданныйТип);

	КонецЕсли;

КонецФункции // ПустоеЗначениеТипа();

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С МАССИВАМИ

// Удаление из массива пустых элементов
//
// Параметры:
//   МассивЭлементов - Массив
//
Процедура УдалитьНеЗаполненныеЭлементыМассива(МассивЭлементов) Экспорт

	Колво = МассивЭлементов.Количество();
	Для н=1 По Колво Цикл
		Если НЕ ЗначениеЗаполнено(МассивЭлементов[Колво-н]) Тогда
			МассивЭлементов.Удалить(Колво-н);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Функция проверяет, что две переданные даты находятся между разными элементами 
// упорядоченного массива.
//
// Параметры:
//	Дата1 Дата2 - Дата - Две даты, которые необходимо проверить.
//	ИнтервалДат - Массив - Упорядоченный массив дат, каждый элемент которого определяет
//							новую границу интервала.
//
Функция ДатыПринадлежатРазнымИнтервалам(Знач Дата1, Знач Дата2, ИнтервалДат) Экспорт

	Результат = Ложь;

	Индекс1 = -1;
	
	Индекс2 = -1;
	
	Дата1 = НачалоДня(Дата1);
	Дата2 = НачалоДня(Дата2);
	
	ВГраницаИнтервалаДат = ИнтервалДат.ВГраница();
	Для ТекИндекс = 0 По ВГраницаИнтервалаДат Цикл
		ДатаИнтервала = НачалоДня(ИнтервалДат[ТекИндекс]);
	
		Если ДатаИнтервала <= Дата1 Тогда
			Индекс1 = ТекИндекс;
		КонецЕсли;
		
		Если ДатаИнтервала <= Дата2 Тогда
			Индекс2 = ТекИндекс;
		КонецЕсли;
		
	КонецЦикла;

	Если Индекс1 <> Индекс2 Тогда
		Результат = Истина;
	Иначе
		Результат = Ложь;
	КонецЕсли;

	Возврат Результат;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФУНКЦИОНАЛЬНЫМИ ОПЦИЯМИ

// Процедура устанавливает функциональные опции формы.
//
// Параметры:
//	Форма - УправляемаяФорма - Форма, в которой требуется установить функциональные опции.
//	Организация - СправочникСсылка.Организации - Ссылка на организацию.
//	Период - Дата - Дата установки периодических опций.
//
Процедура УстановитьПараметрОрганизацияФункциональныхОпцийФормы(Форма, Организация, Период = Неопределено) Экспорт

	ПараметрыФО = Новый Структура();
	ПараметрыФО.Вставить("Организация", Организация);
	Если Период <> Неопределено Тогда
		ПараметрыФО.Вставить("Период", НачалоМесяца(Период));
		// Приводим к началу месяца для того, чтобы сократить пространство кэшируемых значений.
		// Параметр "Организация" используется в функциональных опциях, привязанных к регистрам сведений с периодичностью Месяц или реже.
	КонецЕсли;
	
	Форма.УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);
	
КонецПроцедуры

// Процедура устанавливает функциональные опции формы документа.
//
// Параметры:
//	Форма - УправляемаяФорма - Форма, в которой требуется установить функциональные опции.
//
Процедура УстановитьПараметрыФункциональныхОпцийФормыДокумента(Форма) Экспорт
	
	УстановитьПараметрОрганизацияФункциональныхОпцийФормы(Форма, Форма.Объект.Организация, Форма.Объект.Дата);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

// Функция возвращает текст надписи "Цены и валюта".
//
Функция СформироватьНадписьЦеныИВалюта(СтруктураНадписи) Экспорт
	Перем ВалютаРегламентированногоУчета;
	
	ТекстНадписи = "";
	
	Если НЕ СтруктураНадписи.Свойство("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета) Тогда
		ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	КонецЕсли;
	
	// Тип цен
	Если СтруктураНадписи.Свойство("ТипЦен")
		И ЗначениеЗаполнено(СтруктураНадписи.ТипЦен) Тогда
		ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Тип цен: %1 '"), СтруктураНадписи.ТипЦен);
	КонецЕсли;
		
	// НДС в сумме
	Если СтруктураНадписи.Свойство("НДСНеВыделять") 
		И СтруктураНадписи.НДСНеВыделять Тогда 
		ТекстНадписи = ТекстНадписи + ?(ПустаяСтрока(ТекстНадписи), НСтр("ru = 'НДС не выделять'"), НСтр("ru = '(НДС не выделять)'"));
	ИначеЕсли СтруктураНадписи.Свойство("ДокументБезНДС") 
		И СтруктураНадписи.ДокументБезНДС Тогда 
		ТекстНадписи = ТекстНадписи + ?(ПустаяСтрока(ТекстНадписи), НСтр("ru = 'Документ без НДС'"), НСтр("ru = '(Документ без НДС)'"));
	ИначеЕсли СтруктураНадписи.Свойство("СуммаВключаетНДС") Тогда
		Если СтруктураНадписи.СуммаВключаетНДС Тогда
			ТекстНадписи = ТекстНадписи + ?(ПустаяСтрока(ТекстНадписи), НСтр("ru = 'НДС в сумме'"), НСтр("ru = '(НДС в сумме)'")); 
		Иначе
			ТекстНадписи = ТекстНадписи + ?(ПустаяСтрока(ТекстНадписи), НСтр("ru = 'НДС сверху'"), НСтр("ru = '(НДС сверху)'")); 
		КонецЕсли;
	КонецЕсли;

	// Валюта
	Если СтруктураНадписи.Свойство("ВалютаДокумента")
		И ЗначениеЗаполнено(СтруктураНадписи.ВалютаДокумента)
		И (СтруктураНадписи.ВалютаДокумента <> ВалютаРегламентированногоУчета) Тогда
		
		ТекстНадписи = ТекстНадписи + ?(ПустаяСтрока(ТекстНадписи), "", ", ") + НСтр("ru = '%1%2 = %3 %4'");
		ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстНадписи,
			?(СтруктураНадписи.Кратность = 1, "", СтруктураНадписи.Кратность),
			СтруктураНадписи.ВалютаДокумента,
			СтруктураНадписи.Курс,
			ВалютаРегламентированногоУчета);
			
	КонецЕсли;
		
	БезНДС = (СтруктураНадписи.Свойство("ДокументБезНДС") И СтруктураНадписи.ДокументБезНДС)
			ИЛИ  СтруктураНадписи.Свойство("НДСНеВыделять") И СтруктураНадписи.НДСНеВыделять;

	// Включение НДС в стоимость
	Если СтруктураНадписи.Свойство("НДСВключенВСтоимость") И НЕ БезНДС Тогда
		Если СтруктураНадписи.НДСВключенВСтоимость Тогда
			ТекстНадписи = ТекстНадписи + ?(ПустаяСтрока(ТекстНадписи), "", ", ") + НСтр("ru = 'НДС включен в стоимость'"); 
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстНадписи) Тогда 
		Если СтруктураНадписи.Свойство("ТипЦен") Тогда
			ТекстНадписи = НСтр("ru = 'Тип цен: <нет> '");
		ИначеЕсли СтруктураНадписи.Свойство("ВалютаДокумента") Тогда
			Если ЗначениеЗаполнено(СтруктураНадписи.ВалютаДокумента) Тогда
				ТекстНадписи = НСтр("ru = 'Валюта: %1'");
				ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстНадписи, ВалютаРегламентированногоУчета);
			Иначе
				ТекстНадписи = НСтр("ru = 'Валюта: <нет> '");
			КонецЕсли;
		ИначеЕсли СтруктураНадписи.Свойство("НДСВключенВСтоимость")
			И НЕ БезНДС Тогда
			ТекстНадписи = НСтр("ru = 'НДС не включен в стоимость'");
		КонецЕсли;
	КонецЕсли;
		
	Возврат ТекстНадписи;

КонецФункции

// Функция возвращает текст надписи счетов доходов и расходов для вывода на форме.
//
// Параметры:
//	СчетДоходов - ПланСчетовСсылка.Хозрасчетный
//	СчетРасходов - ПланСчетовСсылка.Хозрасчетный
//	Субконто - ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные
//
// Возвращаемое значение:
//	Строка
//
Функция СформироватьНадписьСчетаУчетаДоходовИРасходов(СчетДоходов, СчетРасходов, Субконто) Экспорт

	Если ЗначениеЗаполнено(СчетДоходов) Тогда
		ТекстСчетДоходов = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетДоходов).Код;
	Иначе
		ТекстСчетДоходов = ПредставлениеНезаполненногоЗначения();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетРасходов) Тогда
		ТекстСчетРасходов = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетРасходов).Код;
	Иначе
		ТекстСчетРасходов = ПредставлениеНезаполненногоЗначения();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Субконто) Тогда
		ТекстСубконто = Строка(Субконто);
	Иначе
		ТекстСубконто = ПредставлениеНезаполненногоЗначения();
	КонецЕсли;
	
	ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"%1, %2 %3", ТекстСчетДоходов, ТекстСчетРасходов, ТекстСубконто);
	
	Возврат ТекстНадписи;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ СО СПИСКАМИ

// Функция формирует список доступных способов расчета комиссионного вознаграждения, 
// в зависимости от типа комиссиионного договора
//
Функция СформироватьСписокСпособовРасчетаКомиссионногоВознаграждения(ЭтоКомиссияПоЗакупке) Экспорт

	СписокСпособов = Новый СписокЗначений;
	
	СписокСпособов.Добавить(ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается"), НСтр("ru = 'Не рассчитывается'"));
	
	Если ЭтоКомиссияПоЗакупке Тогда
		СписокСпособов.Добавить(ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи"), НСтр("ru = 'Процент от суммы закупки'"));
	Иначе
		СписокСпособов.Добавить(ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтРазностиСуммПродажиИПоступления"), НСтр("ru = 'Процент от разности сумм продажи и поступления'"));
		СписокСпособов.Добавить(ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи"), НСтр("ru = 'Процент от суммы продажи'"));
	КонецЕсли;

	Возврат СписокСпособов;

КонецФункции // СформироватьСписокСпособовРасчетаКомиссионногоВознаграждения()

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС ПОЛЯ ВЫБОРА ОРГАНИЗАЦИИ С ОБОСОБЛЕННЫМИ ПОДРАЗДЕЛЕНИЯМИ
//

// Устанавливает значение поля организации.
//
// Параметры:
//	ПолеОрганизация - РеквизитФормы - Реквизит формы, в котором нужно установить значение.
//	Организация - СправочникСсылка.Организации - Организация, для которой нужно установить реквизит.
//	ВключатьОбособленныеПодразделения - Булево - Признак, что нужно включать обособленные подразделения.
//
Процедура УстановитьЗначениеПолеОрганизация(ПолеОрганизация, Организация, ВключатьОбособленныеПодразделения) Экспорт
	
	Ключ = СтрЗаменить(Строка(ВключатьОбособленныеПодразделения) + Организация.УникальныйИдентификатор(), "-", "");
	ПолеОрганизация = Ключ;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СТРОКОВЫЕ ФУНКЦИИ

// Функция возвращает строку, которая содержит только цифры из исходной строки.
//
// Параметры:
//	ИсходнаяСтрока - Строка - Исходная строка.
//
// Возвращаемое значение:
//	Строка - Строка, содержащая только цифры.
//
Функция ОставитьВСтрокеТолькоЦифры(ИсходнаяСтрока) Экспорт
	
	СтрокаРезультат = "";
	
	Для а = 1 По СтрДлина(ИсходнаяСтрока) Цикл
		ТекущийСимвол = Сред(ИсходнаяСтрока, а, 1);
		КодСимвола = КодСимвола(ТекущийСимвол);
		Если КодСимвола >= 48 И КодСимвола <= 57 Тогда
			СтрокаРезультат = СтрокаРезультат + ТекущийСимвол;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрокаРезультат;
	
КонецФункции

// Функция преобразует строку к множественному числу
//
// Параметры: 
//  Слово1 - форма слова в ед числе      ("шкаф")
//  Слово2 - форма слова для числит 2-4  ("шкафа")
//  Слово3 - форма слова для числит 5-10 ("шкафов")
//  ЦелоеЧисло - целое число
//
// Возвращаемое значение:
//  строку - одну из строк в зависимости от параметра ЦелоеЧисло
//
// Описание:
//  Предназначена для формирования "правильной" подписи к числительным
//
Функция ФормаМножественногоЧисла(Слово1, Слово2, Слово3, Знач ЦелоеЧисло) Экспорт
	
	// Изменим знак целого числа, иначе отрицательные числа будут неправильно преобразовываться
	Если ЦелоеЧисло < 0 Тогда
		ЦелоеЧисло = -1 * ЦелоеЧисло;
	КонецЕсли;
	
	Если ЦелоеЧисло <> Цел(ЦелоеЧисло) Тогда 
		// для нецелых чисел - всегда вторая форма
		Возврат Слово2;
	КонецЕсли;
	
	// остаток
	Остаток = ЦелоеЧисло%10;
	Если (ЦелоеЧисло >10) И (ЦелоеЧисло<20) Тогда
		// для второго десятка - всегда третья форма
		Возврат Слово3;
	ИначеЕсли Остаток=1 Тогда
		Возврат Слово1;
	ИначеЕсли (Остаток>1) И (Остаток<5) Тогда
		Возврат Слово2;
	Иначе
		Возврат Слово3;
	КонецЕсли;

КонецФункции

Функция ТолькоНулиВСтроке(Строка) Экспорт
	
	ЗначащиеСимволы = СокрЛП(СтрЗаменить(Строка, "0", ""));
	Возврат ПустаяСтрока(ЗначащиеСимволы);
	
КонецФункции

Функция ПривестиСтроку(Строка, ОписаниеТипов) Экспорт
	
	Если ОписаниеТипов.Типы().Количество() <> 1 Тогда
		Значение = Строка;
	ИначеЕсли ОписаниеТипов.СодержитТип(Тип("Строка")) Тогда
		Значение = Строка;
	Иначе
		
		Если ОписаниеТипов.СодержитТип(Тип("Дата")) Тогда
			// Приведение строки в формате "dd.MM.yyyy" к дате платформой не обеспечивается
			Значение = ПривестиСтрокуКДате(Строка);
		ИначеЕсли ОписаниеТипов.СодержитТип(Тип("Число")) Тогда
			// Используем более гибкое приведение строки к числу, чем обеспечивается платформой.
			// Символ "=" считаем допустимым десятичным разделителем.
			Значение = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрЗаменить(Строка, "=", "."));
		КонецЕсли;
	
		Если Значение = Неопределено Тогда
			Значение = Строка;
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат ОписаниеТипов.ПривестиЗначение(Значение);
	
КонецФункции

// Приводит к дате строку в формате к дате дату в формате "dd.MM.yyyy" 
Функция ПривестиСтрокуКДате(Строка) Экспорт
	
	Если ПустаяСтрока(Строка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЭлементыДаты = СтрРазделить(Строка, ".");
	Если ЭлементыДаты.Количество() <> 3 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	День  = ЭлементыДаты[0];
	Месяц = ЭлементыДаты[1];
	Год   = ЭлементыДаты[2];
	
	Если СтрДлина(Год) = 2 Тогда
		// Преобразование выполняем самое простое. Это поведение может не соответствовать поведению платформы.
		Год = "20" + Год;
	КонецЕсли;
	
	Попытка
		Возврат Дата(Год, Месяц, День);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

// Приводит номер версии формата фискальных данных с произвольным числом разрядов 
// до стандартного представления версий вида X.X.X.X
// Параметры
//   Номер версии - Строка - строка вида X, X.X или X.X.X
// Результат
//   Строка формата - X.X.X.X
Функция ДополнитьНомерВерсииФФД(НомерВерсии) Экспорт
	Если НЕ ЗначениеЗаполнено(НомерВерсии) Тогда
		Возврат "1.0.0.0";
	КонецЕсли;
	
	НомерВерсииВМассив = СтрРазделить(НомерВерсии, ".");
	
	Для НомерРазряда = НомерВерсииВМассив.Количество() По 3 Цикл
		НомерВерсииВМассив.Добавить("0");
	КонецЦикла;
	
	Возврат СтрСоединить(НомерВерсииВМассив, ".");
КонецФункции

Функция ПолучитьВерсиюФФД(Знач ВерсияФН, Знач ВерсияККТ) Экспорт
	ВерсияККТ = ДополнитьНомерВерсииФФД(ВерсияККТ);
	ВерсияФН  = ДополнитьНомерВерсииФФД(ВерсияФН);
	
	// Определеляем максимальную версию ФФД поддерживаемую ФН
	ВерсияФН = ?(ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияФН, "1.0.5.0") > 0, ВерсияФН, "1.0.5.0");
	
	// Итоговая версия определяется минимальной из версий поддерживаемых ФН и ККТ
	ВерсияФормата = ?(ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияФН, ВерсияККТ) > 0, ВерсияККТ, ВерсияФН);
	
	Возврат ВерсияФормата;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОПИСАНИЕ МЕТАДАННЫХ

Функция ПолноеИмяРеквизита(ИмяРеквизита, ИмяТабличнойЧасти = "") Экспорт
	
	ПолноеИмяРеквизита = ИмяРеквизита;
	Если Не ПустаяСтрока(ИмяТабличнойЧасти) Тогда
		ПолноеИмяРеквизита = ИмяТабличнойЧасти + "." + ПолноеИмяРеквизита;
	КонецЕсли;
	
	Возврат ПолноеИмяРеквизита;
	
КонецФункции

Функция РазложитьПолноеИмяРеквизита(ПолноеИмяРеквизита) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Реквизит",       ПолноеИмяРеквизита);
	Результат.Вставить("ТабличнаяЧасть", "");
	
	ЭлементыИмени = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолноеИмяРеквизита, ".", Истина);
	Если ЭлементыИмени.Количество() = 2 Тогда
		Результат.ТабличнаяЧасть = ЭлементыИмени[0];
		Результат.Реквизит       = ЭлементыИмени[1];
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ КОНТРОЛЬ КОРРЕКТНОСТИ ВВОДА ИНН и КПП

Процедура ОтобразитьРезультатПроверкиКонтрагентовВФорме(Форма, РезультатПроверкиСуществования = "") Экспорт
	
	// ИНН
	Форма.НадписьПоясненияНекорректногоИНН = Новый ФорматированнаяСтрока(Форма.РезультатПроверкиИНН);
	Форма.Элементы.НадписьПоясненияНекорректногоИНН.Видимость = НЕ ПустаяСтрока(Форма.РезультатПроверкиИНН);
	
	// КПП
	Форма.НадписьПоясненияНекорректногоКПП = Новый ФорматированнаяСтрока(Форма.РезультатПроверкиКПП);
	Форма.Элементы.НадписьПоясненияНекорректногоКПП.Видимость = НЕ ПустаяСтрока(Форма.РезультатПроверкиКПП);
	
	// Дубли и ФНС
	МассивПодстрокДублиФНС = Новый Массив;
	Если НЕ ПустаяСтрока(Форма.РезультатПроверкиНаДубли) Тогда
		МассивПодстрокДублиФНС.Добавить(Форма.РезультатПроверкиНаДубли);
	КонецЕсли;
	Если НЕ ПустаяСтрока(РезультатПроверкиСуществования) Тогда
		Если МассивПодстрокДублиФНС.Количество() > 0 Тогда
			МассивПодстрокДублиФНС.Добавить("    ");
		КонецЕсли;
		МассивПодстрокДублиФНС.Добавить(РезультатПроверкиСуществования);
	КонецЕсли;
	Форма.НадписьПояснениеПроверкиДублейФНС = Новый ФорматированнаяСтрока(МассивПодстрокДублиФНС);
	Форма.Элементы.НадписьПояснениеПроверкиДублейФНС.Видимость = (МассивПодстрокДублиФНС.Количество() > 0);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФОРМАМИ

// Устанавливает видимость элементов в группе без лишних вызовов сервера.
//
// Параметры:
//  <Группа>  - <ГруппаФормы> - группа, элементам которой надо изменить видимость.
//  <Видимость>  - <Булево>   - устанавливаемое значение видимости.
//
Процедура УстановитьВидимостьГруппы(Группа, Видимость) Экспорт

	Для каждого ЭлементГруппы Из Группа.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ЭлементГруппы) = Тип("ГруппаФормы") Тогда
			УстановитьВидимостьГруппы(ЭлементГруппы, Видимость);
		Иначе
			ЭлементГруппы.Видимость = Видимость;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

#Область УстаревшийПрограммныйИнтерфейс

// Устарела. Следует использовать ОбщегоНазначения.ОписаниеТипаСтрока
// Служебная функция, предназначенная для получения описания типов строки, заданной длины.
//
// Параметры:
//  ДлинаСтроки - число, длина строки.
//
// Возвращаемое значение:
//  Объект "ОписаниеТипов" для строки указанной длины.
//
Функция ПолучитьОписаниеТиповСтроки(ДлинаСтроки) Экспорт

	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));

	КвалификаторСтроки = Новый КвалификаторыСтроки(ДлинаСтроки, ДопустимаяДлина.Переменная);

	Возврат Новый ОписаниеТипов(Массив, , КвалификаторСтроки);

КонецФункции // ПолучитьОписаниеТиповСтроки()

// Устарела. Следует использовать ОбщегоНазначения.ОписаниеТипаЧисло
// Служебная функция, предназначенная для получения описания типов числа, заданной разрядности.
//
// Параметры:
//  Разрядность 			- число, разряд числа.
//  РазрядностьДробнойЧасти - число, разряд дробной части.
//  ЗнакЧисла				- ДопустимыйЗнак, знак числа
//
// Возвращаемое значение:
//  Объект "ОписаниеТипов" для числа указанной разрядности.
//
Функция ПолучитьОписаниеТиповЧисла(Разрядность, РазрядностьДробнойЧасти = 0, ЗнакЧисла = Неопределено) Экспорт

	Если ЗнакЧисла = Неопределено Тогда
		КвалификаторЧисла = Новый КвалификаторыЧисла(Разрядность, РазрядностьДробнойЧасти);
	Иначе
		КвалификаторЧисла = Новый КвалификаторыЧисла(Разрядность, РазрядностьДробнойЧасти, ЗнакЧисла);
	КонецЕсли;

	Возврат Новый ОписаниеТипов("Число", КвалификаторЧисла);

КонецФункции // ПолучитьОписаниеТиповЧисла()

// Устарела. Следует использовать ОбщегоНазначения.ОписаниеТипаДата
// Служебная функция, предназначенная для получения описания типов даты
//
// Параметры:
//  ЧастиДаты - системное перечисление ЧастиДаты.
//
Функция ПолучитьОписаниеТиповДаты(ЧастиДаты) Экспорт

	Массив = Новый Массив;
	Массив.Добавить(Тип("Дата"));

	КвалификаторДаты = Новый КвалификаторыДаты(ЧастиДаты);

	Возврат Новый ОписаниеТипов(Массив, , , КвалификаторДаты);

КонецФункции // ПолучитьОписаниеТиповДаты()

// Устарела. Следует использовать ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения
// Формирует текст сообщения, подставляя значения
// параметров в шаблоны сообщений.
//
// Параметры
//  ВидПоля       - Строка - может принимать значения:
//                  Поле, Колонка, Список
//  ВидСообщения  - Строка - может принимать значения:
//                  Заполнение, Корректность
//  Параметр1     - Строка - имя поля
//  Параметр2     - Строка - номер строки
//  Параметр3     - Строка - имя списка
//  Параметр4     - Строка - текст сообщения о некорректности заполнения
//
// Возвращаемое значение:
//   Строка - текст сообщения
//
Функция ПолучитьТекстСообщения(ВидПоля = "Поле", ВидСообщения = "Заполнение",
	Параметр1 = "", Параметр2 = "",	Параметр3 = "", Параметр4 = "") Экспорт

	ТекстСообщения = "";

	Если ВРег(ВидПоля) = "ПОЛЕ" Тогда
		Если ВРег(ВидСообщения) = "ЗАПОЛНЕНИЕ" Тогда
			Шаблон = НСтр("ru = 'Поле ""%1"" не заполнено'");
		ИначеЕсли ВРег(ВидСообщения) = "КОРРЕКТНОСТЬ" Тогда
			Шаблон = НСтр("ru = 'Поле ""%1"" заполнено некорректно.
                           |
                           |%4'");
		КонецЕсли;
	ИначеЕсли ВРег(ВидПоля) = "КОЛОНКА" Тогда
		Если ВРег(ВидСообщения) = "ЗАПОЛНЕНИЕ" Тогда
			Шаблон = НСтр("ru = 'Не заполнена колонка ""%1"" в строке %2 списка ""%3""'");
		ИначеЕсли ВРег(ВидСообщения) = "КОРРЕКТНОСТЬ" Тогда
			Шаблон = НСтр("ru = 'Некорректно заполнена колонка ""%1"" в строке %2 списка ""%3"".
                           |
                           |%4'");
		КонецЕсли;
	ИначеЕсли ВРег(ВидПоля) = "СПИСОК" Тогда
		Если ВРег(ВидСообщения) = "ЗАПОЛНЕНИЕ" Тогда
			Шаблон = НСтр("ru = 'Не введено ни одной строки в список ""%3""'");
		ИначеЕсли ВРег(ВидСообщения) = "КОРРЕКТНОСТЬ" Тогда
			Шаблон = НСтр("ru = 'Некорректно заполнен список ""%3"".
                           |
                           |%4'");
		КонецЕсли;
	КонецЕсли;

	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Параметр1, Параметр2, Параметр3, Параметр4);

КонецФункции // ПолучитьТекстСообщения()

#КонецОбласти
