////////////////////////////////////////////////////////////////////////////////
// СписаниеСРасчетногоСчетаФормы: серверные процедуры и функции, 
// вызываемые из форм документа "Списание с расчетного счета".
//  
////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Параметры = Форма.Параметры;
	Элементы = Форма.Элементы;
	
	Форма.РеквизитыОрганизацииСсылка = ПроверкаРеквизитовОрганизации.СтрокаСообщенияНеЗаполненБанковскийСчет();
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(Форма, Элементы.ГруппаПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(Форма, ДополнительныеОтчетыИОбработкиКлиентСервер.ТипФормыОбъекта());
	// Конец ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(Форма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		Форма.ПодготовитьФормуНаСервере();
		
		// Если документ скопирован и есть расчетв у.е., пересчитаем суммы взаиморасчетов на дату документа
		Если Форма.ЕстьРасчетыВУсловныхЕдиницах И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ПересчитатьСуммыВзаиморасчетов(Форма);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимостьСчетовУчета(Форма);
	
	УстановитьУсловноеОформление(Форма);
	
КонецПроцедуры

Процедура ПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(Форма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	Форма.ПодготовитьФормуНаСервере();
	
КонецПроцедуры

Процедура ПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	Объект = Форма.Объект;
	
	ПроверкаРеквизитовОрганизации.ПередЗаписьюНаСервере(
		Объект.Организация,
		Объект.СчетОрганизации,
		Форма.ИспользоватьНесколькоБанковскихСчетовОрганизации,
		Отказ,
		ПараметрыЗаписи);
	
КонецПроцедуры

Процедура ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	ЗаполнитьДобавленныеКолонкиТаблиц(Форма);
	УстановитьСостояниеДокумента(Форма);
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ПараметрыЗаписи.Вставить("ОплаченныеСчета", ОплаченныеСчета(Форма));
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполненияНаСервере(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	Объект = Форма.Объект;
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога
		И ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоНДФЛ(Форма.ВидНалога) 
		И Форма.НалогЗаОбособленноеПодразделение 
		И НЕ ЗначениеЗаполнено(Объект.РегистрацияВНалоговомОргане) Тогда
		ТекстСообщения  = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Регистрация в ФНС'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения, , "РегистрацияВНалоговомОргане", "Объект", Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийШапки

Процедура ПодготовитьФормуНаСервере(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	УстановитьФункциональныеОпцииФормы(Форма);
	
	УстановитьСостояниеДокумента(Форма);
	
	Форма.ИспользоватьНачислениеЗарплаты        = ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии");
	Форма.УчетЗарплатыИКадровВоВнешнейПрограмме = ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме");
	Форма.ВедетсяУчетРасчетовПоЗарплатеСводно   = ПолучитьФункциональнуюОпцию("ВедетсяУчетРасчетовПоЗарплатеСводно");
	Форма.ИспользоватьФорматОбменаЗУП25         = ПолучитьФункциональнуюОпцию("ИспользоватьФорматОбменаЗУП25",
		Новый Структура("Организация", Объект.Организация));
	Форма.ИспользоватьФорматОбменаЗУП30         = УчетЗарплаты.ИспользуетсяОбменСЗУП30(Объект.Организация);
	
	// Заполнение реквизитов формы
	
	Форма.ПользовательУправляетСчетамиУчета = СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета();
	
	Форма.ТекущаяДатаДокумента           = Объект.Дата;
	Форма.ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	Форма.ОплатаВВалюте = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект.СчетБанк).Валютный
		ИЛИ ЗначениеЗаполнено(Объект.ВалютаДокумента) И Объект.ВалютаДокумента <> Форма.ВалютаРегламентированногоУчета;
	
	УстановитьВладельцаСчетаКонтрагента(Форма);
	
	УстановитьПараметрыВыбораСчетовУчетаДенежныхСредств(Форма);
	УстановитьПараметрыВыбораБанковскихСчетов(Форма);
	УстановитьПараметрыВыбораДоговораСКонтрагентом(Форма);
	УстановитьСвязиПараметровВыбораДоговораСКонтрагентом(Форма);
	
	Форма.ВидОперацииПеречислениеЗП = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП;
	
	УстановитьКурсДокумента(Форма);
	
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоШапки(
		Форма, Объект, СписаниеСРасчетногоСчетаФормыКлиентСервер.ПараметрыУстановкиСвойствСубконто(Форма, "Прочие"));
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоШапки(
		Форма, Объект, СписаниеСРасчетногоСчетаФормыКлиентСервер.ПараметрыУстановкиСвойствСубконто(Форма, "ЗадержкаЗарплаты"));
	
	Форма.ПлатежноеПоручение = Документы.СписаниеСРасчетногоСчета.НайтиДокументПлатежноеПоручение(
		Объект.Ссылка, Объект.ДокументОснование, Объект.ВидОперации, Форма.НадписьПлатежноеПоручение);
	Форма.ПодтвержденоВыпискойБанка = НЕ Объект.НеПодтвержденоВыпискойБанка;
	
	Если НЕ (Форма.Параметры.Ключ.Пустая() И ПустаяСтрока(Объект.НазначениеПлатежа)) Тогда
		Форма.СгенерированноеНазначенияПлатежа = Документы.СписаниеСРасчетногоСчета.ПолучитьНазначениеПлатежа(Объект,, Истина);
	КонецЕсли;
	
	Форма.НалоговыйПериодСтрока = Объект.НалоговыйПериод;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		
		Если ЗначениеЗаполнено(Объект.Налог) Тогда
			Форма.ВидНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Налог, "ВидНалога");
		КонецЕсли;
		
		ЗначениеПериодаУплаты = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "Объект.НалоговыйПериод");
		
		Если Форма.Параметры.Ключ.Пустая() Тогда
			ЗначениеПериодаУплаты = ?(ЗначениеЗаполнено(ЗначениеПериодаУплаты), ЗначениеПериодаУплаты, НачалоМесяца(Объект.Дата));
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "НалоговыйПериодСтрока",
			Формат(ЗначениеПериодаУплаты, "ДФ='MMMM yyyy'"));
		
		Форма.ЭтоУплатаНДФЛ = ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоНДФЛ(Форма.ВидНалога);
		Если Форма.ЭтоУплатаНДФЛ 
			И ПолучитьФункциональнуюОпцию("РасчетЗарплатыПоПодразделениямДляНебольшихОрганизаций") Тогда
			Форма.НалогЗаОбособленноеПодразделение = ЗначениеЗаполнено(Объект.РегистрацияВНалоговомОргане);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьДобавленныеКолонкиТаблиц(Форма);
	
	Если Документы.СписаниеСРасчетногоСчета.ЕстьРасшифровкаПлатежа(Объект.ВидОперации)
		И Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
		Форма.СвойстваПлатежа = СписаниеСРасчетногоСчетаФормыКлиентСервер.ПустаяСтруктураСвойстваПлатежа();
		ЗаполнитьЗначенияСвойств(Форма.СвойстваПлатежа, Объект.РасшифровкаПлатежа[0], "СтатьяДвиженияДенежныхСредств");
	КонецЕсли;
	
	УстановитьОграничениеТипаКонтрагента(Форма);
	
	// Управление внешним видом формы
	ЗаполнитьВидНалоговогоОбязательстваНаСервере(Форма, Истина);
	ЗаполнитьПорядокОтраженияУплатыНалогаНаСервере(Форма);
	УправлениеЭлементамиОтраженияВУСНСервер(Форма);
	
КонецПроцедуры

Процедура ВедомостьЗарплатаРаботникуПриИзмененииНаСервере(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) И ЗначениеЗаполнено(Объект.ПлатежнаяВедомость) Тогда
		Объект.СуммаДокумента = СуммаВыплаченнойЗарплатыРаботнику(
			Объект.Ссылка, Объект.Контрагент, Объект.ПлатежнаяВедомость, Форма.УчетЗарплатыИКадровВоВнешнейПрограмме);
	Иначе
		Объект.СуммаДокумента = 0;
	КонецЕсли;
	
	СформироватьНазначениеПлатежаСервер(Форма);
	
КонецПроцедуры

Процедура ВидОперацииПриИзмененииСервер(Форма) Экспорт
	
	ВидОперацииОбработатьИзменение(Форма, Новый Массив);
	
	ЗаполнитьВидНалоговогоОбязательстваНаСервере(Форма);
	ЗаполнитьПорядокОтраженияУплатыНалогаНаСервере(Форма);
	Если Форма.ПрименениеУСН Тогда
		ЗаполнитьОтражениеВУСННаСервере(Форма, Истина, Истина);
		УправлениеЭлементамиОтраженияВУСНСервер(Форма);
	КонецЕсли;
	
	УстановитьВидимостьСчетовУчета(Форма);
	
	УстановитьВидимостьСтраницНаСервере(Форма);
	СписаниеСРасчетногоСчетаФормыКлиентСервер.УправлениеФормой(Форма);
	
КонецПроцедуры

Процедура ДатаПриИзмененииСервер(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	УстановитьФункциональныеОпцииФормы(Форма);
	
	УстановитьКурсДокумента(Форма);
	ПересчитатьСуммыВзаиморасчетов(Форма);
	
	СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(
		СписаниеСРасчетногоСчетаФормыКлиентСервер.НачатьЗаполнениеСчетовУчета("Дата", Объект));
	
	ЗаполнитьВидНалоговогоОбязательстваНаСервере(Форма);
	
	ЗаполнитьПорядокОтраженияУплатыНалогаНаСервере(Форма);
	
	ЗаполнитьОтражениеВУСННаСервере(Форма, Истина, Ложь);
	УправлениеЭлементамиОтраженияВУСНСервер(Форма);
	
	УстановитьВидимостьСчетовУчета(Форма);
	
	СписаниеСРасчетногоСчетаФормыКлиентСервер.УправлениеФормой(Форма);
	
	Если СписаниеСРасчетногоСчетаФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
		// Обновим данные реквизитов первой строки на форме.
		Если Объект.РасшифровкаПлатежа.Количество() > 1 Тогда
			СписаниеСРасчетногоСчетаФормыКлиентСервер.ЗаполнитьЗначенияТекущиеДанныеРасшифровкаПлатежа(
				Форма, Объект.РасшифровкаПлатежа[0],, Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура КонтрагентПриИзмененииСервер(Форма) Экспорт
	
	КонтрагентОбработатьИзменение(Форма, Новый Массив);
	
	ЗаполнитьПорядокОтраженияУплатыНалогаНаСервере(Форма);
	Если Форма.ПрименениеУСН Тогда
		ЗаполнитьОтражениеВУСННаСервере(Форма, Истина, Истина);
	КонецЕсли;
	
	СписаниеСРасчетногоСчетаФормыКлиентСервер.УправлениеФормой(Форма);
	
КонецПроцедуры

Процедура НалогоплательщикПриИзмененииСервер(Форма) Экспорт
	
	НалогоплательщикОбработатьИзменение(Форма, Новый Массив);
	
	Если Форма.ПрименениеУСН Тогда
		ЗаполнитьОтражениеВУСННаСервере(Форма, Истина, Истина);
	КонецЕсли;
	
	СписаниеСРасчетногоСчетаФормыКлиентСервер.УправлениеФормой(Форма);
	
КонецПроцедуры

Процедура ОрганизацияПриИзмененииСервер(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	ПричиныИзменения = Новый Массив;
	ПричиныИзменения.Добавить("Организация");
	
	УстановитьФункциональныеОпцииФормы(Форма);
	
	ИспользоватьФорматОбменаЗУП25 = ПолучитьФункциональнуюОпцию("ИспользоватьФорматОбменаЗУП25",
		Новый Структура("Организация", Объект.Организация));
	ИспользоватьФорматОбменаЗУП30 = УчетЗарплаты.ИспользуетсяОбменСЗУП30(Объект.Организация);
	
	ПроверитьВидОперацииОрганизации(Форма, ПричиныИзменения);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ЛичныеСредстваПредпринимателя Тогда
		РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Организация, "ИндивидуальныйПредприниматель");
		Объект.Контрагент = РеквизитыОрганизации.ИндивидуальныйПредприниматель;
		Объект.СчетКонтрагента = Неопределено;
		УстановитьВладельцаСчетаКонтрагента(Форма);
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.СнятиеНаличных Тогда
		Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		Объект.СчетКонтрагента = Неопределено;
		УстановитьВладельцаСчетаКонтрагента(Форма);
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
		Объект.СчетКонтрагента = Неопределено;
		УстановитьВладельцаСчетаКонтрагента(Форма);
	КонецЕсли;
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииОрганизации(
		Форма, Объект, СписаниеСРасчетногоСчетаФормыКлиентСервер.ПараметрыУстановкиСвойствСубконто(Форма, "Прочие"));
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииОрганизации(
		Форма, Объект, СписаниеСРасчетногоСчетаФормыКлиентСервер.ПараметрыУстановкиСвойствСубконто(Форма, "ЗадержкаЗарплаты"));
	
	ПараметрыОбъекта = СписаниеСРасчетногоСчетаФормыКлиентСервер.ТекущиеПараметрыОбъекта(Форма);
	НовыеПараметры   = НовыеПараметрыПриИзмененииОрганизации(ПараметрыОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "СчетОрганизации, ВалютаДокумента, ПодразделениеОрганизации");
	СписаниеСРасчетногоСчетаФормыКлиентСервер.УстановитьПодразделениеДт(Форма);
	Если ПараметрыОбъекта.ВалютаДокумента <> НовыеПараметры.ВалютаДокумента Тогда
		ЗаполнитьЗначенияСвойств(Форма, НовыеПараметры, "КурсДокумента, КратностьДокумента");
		Объект.СчетКонтрагента = НовыеПараметры.СчетКонтрагента;
		
		УстановитьПараметрыВыбораБанковскихСчетов(Форма);
		УстановитьПараметрыВыбораДоговораСКонтрагентом(Форма);
	КонецЕсли;
	
	Форма.ПредлагатьНовыйДоговор = Ложь;
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику
		И НЕ Форма.ОплатаВВалюте И Форма.ВестиУчетПоДоговорам Тогда
		Форма.ПредлагатьНовыйДоговор = РаботаСДоговорамиКонтрагентовБП.ПредлагатьНовыйДоговор(Объект.Организация, Объект.Контрагент);
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц Тогда
		ПараметрыОбъекта.Контрагент = Объект.Налогоплательщик;
		НовыеПараметры = НовыеПараметрыПриИзмененииОрганизации(ПараметрыОбъекта);
	КонецЕсли;
	
	ИнициализироватьСвойстваПлатежа(Форма, Истина);
	ЗаполнитьЗначенияСвойств(Форма.СвойстваПлатежа, НовыеПараметры);
	ПерезаполнитьРасшифровкуПлатежа(Форма);
	ПерезаполнитьСтатьюДДС(Форма);
	СформироватьНазначениеПлатежаСервер(Форма, Ложь, "Организация", ПричиныИзменения);
	
	ЗаполнитьСчетаУчета(Форма, "Организация", ПричиныИзменения);
	
	ЗаполнитьОтражениеВУСННаСервере(Форма, Истина, Истина);
	УправлениеЭлементамиОтраженияВУСНСервер(Форма);
	
	УстановитьВидимостьСтраницНаСервере(Форма);
	СписаниеСРасчетногоСчетаФормыКлиентСервер.УправлениеФормой(Форма);
	
КонецПроцедуры

Процедура СуммаДокументаПриИзмененииСервер(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Если Документы.СписаниеСРасчетногоСчета.ЕстьРасшифровкаПлатежа(Объект.ВидОперации)
		И Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		
		// Если строка платежа одна, то сумма документа совпадает с суммой платежа в первой строке.
		Если НЕ СписаниеСРасчетногоСчетаФормыКлиентСервер.ФормаРасшифровкиПлатежа(Форма) 
			И НЕ СписаниеСРасчетногоСчетаФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
			СтрокаПлатеж = Объект.РасшифровкаПлатежа[0];
			СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
		КонецЕсли;
		
		СписаниеСРасчетногоСчетаФормыКлиентСервер.РасшифровкаПлатежаСуммаПлатежаПриИзменении(
			Форма, Объект.РасшифровкаПлатежа[0].ПолучитьИдентификатор());
		
		СписаниеСРасчетногоСчетаФормыКлиентСервер.ОбновитьИтоги(Форма);
	КонецЕсли;
	
	Если Форма.ПрименениеУСН Тогда
		ЗаполнитьОтражениеВУСННаСервере(Форма, Истина, Ложь);
		СписаниеСРасчетногоСчетаФормыКлиентСервер.УправлениеЭлементамиОтраженияВУСН(Форма);
	КонецЕсли;
	
	СформироватьНазначениеПлатежаСервер(Форма, Истина);
	
КонецПроцедуры

Процедура СчетБанкПриИзмененииСервер(Форма, ПричиныИзменения) Экспорт
	
	Объект = Форма.Объект;
	
	ПричиныИзменения.Добавить("СчетБанк");
	
	ОплатаВВалютеПараметр = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект.СчетБанк).Валютный;
	
	ВалютаДокументаПриИзмененииСервер(Форма, ПричиныИзменения, ОплатаВВалютеПараметр);
	
	ЗаполнитьСчетаУчета(Форма, "СчетБанк", ПричиныИзменения);
	
КонецПроцедуры

Процедура СчетКонтрагентаПриИзмененииСервер(Форма) Экспорт
	
	ПричиныИзменения = Новый Массив;
	ПричиныИзменения.Добавить("СчетКонтрагента");
	ЗаполнитьСчетаУчета(Форма, "СчетКонтрагента", ПричиныИзменения);
	
	СформироватьНазначениеПлатежаСервер(Форма, Ложь, "СчетКонтрагента", ПричиныИзменения);
	СписаниеСРасчетногоСчетаФормыКлиентСервер.УправлениеФормой(Форма);
	
КонецПроцедуры

Процедура СчетОрганизацииПриИзмененииСервер(Форма, ПричиныИзменения) Экспорт
	
	Объект = Форма.Объект;
	
	ПричиныИзменения.Добавить("СчетОрганизации");
	
	ПараметрыОбъекта = СписаниеСРасчетногоСчетаФормыКлиентСервер.ТекущиеПараметрыОбъекта(Форма);
	НовыеПараметры   = НовыеПараметрыПриИзмененииСчетаОрганизации(ПараметрыОбъекта);
	
	Объект.ПодразделениеОрганизации = НовыеПараметры.ПодразделениеОрганизации;
	СписаниеСРасчетногоСчетаФормыКлиентСервер.УстановитьПодразделениеДт(Форма);
	
	Если НовыеПараметры.ВалютаДокумента <> ПараметрыОбъекта.ВалютаДокумента Тогда
		ПричиныИзменения.Добавить("ВалютаДокумента");
		
		СвойстваФормыКЗаполнению  = "КурсДокумента, КратностьДокумента";
		
		Если НовыеПараметры.Свойство("ОплатаВВалюте") Тогда
			СвойстваФормыКЗаполнению = СвойстваФормыКЗаполнению + ", ОплатаВВалюте";
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Форма,  НовыеПараметры, СвойстваФормыКЗаполнению);
		ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "ВалютаДокумента, СчетКонтрагента");
		
		УстановитьПараметрыВыбораБанковскихСчетов(Форма);
		УстановитьПараметрыВыбораДоговораСКонтрагентом(Форма);
		ИзменитьПараметрыВыбораСчетаПеревода(Форма);
		
		ИнициализироватьСвойстваПлатежа(Форма, Истина);
		ЗаполнитьЗначенияСвойств(Форма.СвойстваПлатежа, НовыеПараметры);
		ПерезаполнитьРасшифровкуПлатежа(Форма);
	КонецЕсли;
	
	ЗаполнитьСчетаУчета(Форма, "СчетОрганизации", ПричиныИзменения);
	
КонецПроцедуры

Процедура СчетУчетаПрочиеПриИзмененииСервер(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
		Форма, Объект, СписаниеСРасчетногоСчетаФормыКлиентСервер.ПараметрыУстановкиСвойствСубконто(Форма, "Прочие"));
	
	Если Форма.ПрименениеУСН И НЕ Форма.ПрименениеУСНДоходы Тогда
		ЗаполнитьОтражениеВУСННаСервере(Форма, Истина, Истина);
	КонецЕсли;
	
	ПерезаполнитьСтатьюДДС(Форма);
	
	СписаниеСРасчетногоСчетаФормыКлиентСервер.УправлениеФормой(Форма);
	
КонецПроцедуры

Процедура СформироватьНазначениеПлатежаСервер(Форма, ТолькоСумму = Ложь, ПричинаИзменения = "", ПричиныИзменения = Неопределено) Экспорт
	
	Если ПричиныИзменения <> Неопределено Тогда
		// процедура может потребовать обращений к базе данных, поэтому минимизируем ее вызовы -
		// вызовем только в начале стека вызовов
		// Воспользуемся механикой из СчетаУчетаВДокументахКлиентСервер.МожноНачатьЗаполнениеСчетовУчета().
		// Поэтому ПричиныИзменения нельзя расширять больше, чем нужно для заполнения счетов.
		МожноВыполнитьПозже = Истина;
		ПричиныЗаменыНазначенияПлатежа = ",ВидОперации,Организация,Контрагент,СчетКонтрагента,ДоговорКонтрагента,Налог,";
		Для ИндексОбработчикаИзменения = 0 По ПричиныИзменения.ВГраница() Цикл
			// дойдем до первой причины в стеке вызовов, которая может привести к замене назначения платежа;
			// если обработчик этой причины не вызван уже сейчас,
			// то он будет вызываться позже и заполнение назначения можно отложить до него.
			ПричинаИзмененияИзСтека = ПричиныИзменения[ИндексОбработчикаИзменения];
			Если СтрНайти(ПричиныЗаменыНазначенияПлатежа, "," + ПричинаИзмененияИзСтека + ",") = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если ПричинаИзменения = ПричинаИзмененияИзСтека Тогда
				МожноВыполнитьПозже = Ложь;
			КонецЕсли;
			Прервать;
		КонецЦикла;
		Если МожноВыполнитьПозже Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Объект = Форма.Объект;
	
	Если ПустаяСтрока(Объект.НазначениеПлатежа) ИЛИ Объект.НазначениеПлатежа = Форма.СгенерированноеНазначенияПлатежа Тогда
		Объект.НазначениеПлатежа = Документы.СписаниеСРасчетногоСчета.ПолучитьНазначениеПлатежа(Объект, ТолькоСумму,, Форма);
		Форма.СгенерированноеНазначенияПлатежа = Объект.НазначениеПлатежа;
	ИначеЕсли ТолькоСумму И Объект.НазначениеПлатежа <> Форма.СгенерированноеНазначенияПлатежа Тогда
		Объект.НазначениеПлатежа = Документы.СписаниеСРасчетногоСчета.ПолучитьНазначениеПлатежа(Объект, ТолькоСумму,, Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВидимостьСтраницНаСервере(Форма) Экспорт
	
	Если СписаниеСРасчетногоСчетаФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
		УстановитьВидимостьГрупп(Форма);
	Иначе
		УстановитьВидимостьСтраниц(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВидимостьГрупп(Форма) Экспорт
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.ГруппаАналитика.Видимость = ВидимостьГруппыСтраниц(Объект.ВидОперации);
	
	Если НЕ Элементы.ГруппаАналитика.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураСтраниц = Новый Структура;
	СтруктураСтраниц.Вставить("ГруппаПлатежПрочие",                  Элементы.ГруппаПлатежПрочие);
	СтруктураСтраниц.Вставить("ГруппаПереводНаДругойСчет",           Элементы.ГруппаПереводНаДругойСчет);
	СтруктураСтраниц.Вставить("ГруппаСтатьяДвиженияДенежныхСредств", Элементы.ГруппаСтатьяДвиженияДенежныхСредств);
	СтруктураСтраниц.Вставить("ГруппаПеречислениеЗарплаты",          Элементы.ГруппаПеречислениеЗарплаты);
	СтруктураСтраниц.Вставить("ГруппаВыплатаДепонентов",             Элементы.ГруппаВыплатаДепонентов);
	СтруктураСтраниц.Вставить("ГруппаСнятиеНаличных",                Элементы.ГруппаСнятиеНаличных);
	СтруктураСтраниц.Вставить("ГруппаРасчетыСКонтрагентами",         Элементы.ГруппаРасчетыСКонтрагентами);
	
	ТекущаяСтраница = "";
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание Тогда
		ТекущаяСтраница = "ГруппаПлатежПрочие";
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
		ТекущаяСтраница = "ГруппаПереводНаДругойСчет";
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП Тогда
		Элементы.ГруппаВыплатаЗарплатыПоВедомостям.Видимость      = Истина;
		Элементы.ГруппаВыплатаЗарплатыПоОдномуРаботнику.Видимость = Ложь;
		Если Форма.ВедетсяУчетРасчетовПоЗарплатеСводно И Форма.УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
			ТекущаяСтраница = "ГруппаСтатьяДвиженияДенежныхСредств";
		Иначе
			ТекущаяСтраница = "ГруппаПеречислениеЗарплаты";
		КонецЕсли;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику Тогда
		Элементы.ГруппаВыплатаЗарплатыПоВедомостям.Видимость      = Ложь;
		Элементы.ГруппаВыплатаЗарплатыПоОдномуРаботнику.Видимость = Истина;
		Если Форма.ВедетсяУчетРасчетовПоЗарплатеСводно И Форма.УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
			ТекущаяСтраница = "ГруппаСтатьяДвиженияДенежныхСредств";
		Иначе
			ТекущаяСтраница = "ГруппаПеречислениеЗарплаты";
		КонецЕсли;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДепонентов Тогда
		Если Форма.УчетЗарплатыИКадровВоВнешнейПрограмме И Форма.ВедетсяУчетРасчетовПоЗарплатеСводно Тогда
			ТекущаяСтраница = "ГруппаСтатьяДвиженияДенежныхСредств";
		Иначе
			ТекущаяСтраница = "ГруппаВыплатаДепонентов";
		КонецЕсли;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.СнятиеНаличных Тогда
		ТекущаяСтраница = "ГруппаСнятиеНаличных";
	Иначе
		ТекущаяСтраница = "ГруппаРасчетыСКонтрагентами";
		// Установим видимость отдельных полей.
		ЭтоКредитыИлиПрочиеРасчеты = Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗайма
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратКредита
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаКонтрагенту
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц;
		
		ЭтоВозвратКредитаИлиЗайма = Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗайма
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратКредита;
		
		Если ЭтоКредитыИлиПрочиеРасчеты Тогда
			// При прочих расчетах и расчетах по кредитам и займам для УСН (доходы - расходы) могут указываться расходы, принимаемые в УСН.
			Элементы.ГруппаАналитикаПлатежаДополнительноСтраницы.Видимость = Истина;
			Элементы.ГруппаОтражениеВУСНРасшифровкаПлатежа.Видимость       = Истина;
			Элементы.ГруппаПогашениеЗадолженности.Видимость                = Ложь;
		ИначеЕсли ПолучитьФункциональнуюОпцию("УправлениеЗачетомАвансовПогашениемЗадолженности") Тогда
			// Для видов операций "Оплата поставщику" и "Возврат покупателю" возможно указание документа расчетов.
			Элементы.ГруппаАналитикаПлатежаДополнительноСтраницы.Видимость = Истина;
			Элементы.ГруппаОтражениеВУСНРасшифровкаПлатежа.Видимость       = Ложь;
			Элементы.ГруппаПогашениеЗадолженности.Видимость                = Истина;
		Иначе
			Элементы.ГруппаАналитикаПлатежаДополнительноСтраницы.Видимость = Ложь;
			Элементы.ГруппаОтражениеВУСНРасшифровкаПлатежа.Видимость       = Ложь;
			Элементы.ГруппаПогашениеЗадолженности.Видимость                = Ложь;
		КонецЕсли;
		
		// При УСН (доходы и расходы) и ЕНВД необходимо указание порядка распределения расходов.
		Элементы.ГруппаРаспределятьРасходыУСНРасшифровкаПлатежа.Видимость = Форма.ПрименениеУСН И НЕ Форма.ПрименениеУСНДоходы И Форма.ПлательщикЕНВД;
		
		Элементы.РасшифровкаПлатежаСтавкаНДС.Видимость = НЕ ЭтоКредитыИлиПрочиеРасчеты;
		Элементы.РасшифровкаПлатежаСуммаНДС.Видимость  = НЕ ЭтоКредитыИлиПрочиеРасчеты;
		Элементы.РасшифровкаПлатежаВидПлатежаПоКредитамЗаймам.Видимость = ЭтоВозвратКредитаИлиЗайма;
		
		Элементы.РасшифровкаПлатежаДоговорКонтрагентаВалютаВзаиморасчетов.Видимость = НЕ ЭтоКредитыИлиПрочиеРасчеты
			И Форма.РасшифровкаПлатежаДоговорКонтрагентаРасчетыВУсловныхЕдиницах;
		Элементы.РасшифровкаПлатежаКурсВзаиморасчетов.Видимость                     = НЕ ЭтоКредитыИлиПрочиеРасчеты
			И Форма.РасшифровкаПлатежаДоговорКонтрагентаРасчетыВУсловныхЕдиницах;
		Элементы.РасшифровкаПлатежаСуммаВзаиморасчетов.Видимость                    = НЕ ЭтоКредитыИлиПрочиеРасчеты
			И Форма.РасшифровкаПлатежаДоговорКонтрагентаРасчетыВУсловныхЕдиницах;
	КонецЕсли;
	
	Для каждого КлючИЗначение Из СтруктураСтраниц Цикл
		Если КлючИЗначение.Ключ <> ТекущаяСтраница Тогда
			Если КлючИЗначение.Значение.Видимость Тогда
				КлючИЗначение.Значение.Видимость = Ложь;
			КонецЕсли;
		Иначе
			Если НЕ КлючИЗначение.Значение.Видимость Тогда
				КлючИЗначение.Значение.Видимость = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Управление видимостью полей, связанных с отражением компенсации задержки выплаты зарплаты.
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику Тогда
		Если Форма.УчетЗарплатыИКадровВоВнешнейПрограмме И Форма.ИспользоватьФорматОбменаЗУП25 Тогда
			Элементы.ГруппаЗадержкаЗарплаты.Видимость = Истина;
			Элементы.ГруппаВыплатаЗарплатыОперации.ОтображатьЗаголовок = Истина;
		Иначе
			Элементы.ГруппаЗадержкаЗарплаты.Видимость = Ложь;
			Элементы.ГруппаВыплатаЗарплатыОперации.ОтображатьЗаголовок = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВидимостьСтраниц(Форма) Экспорт
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.ГруппаСтраницы.Видимость = ВидимостьГруппыСтраниц(Объект.ВидОперации);
	
	Если НЕ Элементы.ГруппаСтраницы.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтраниц = Новый Массив;
	МассивСтраниц.Добавить(Элементы.ГруппаПлатежПрочие);
	МассивСтраниц.Добавить(Элементы.ГруппаПереводНаДругойСчет);
	МассивСтраниц.Добавить(Элементы.ГруппаСтатьяДвиженияДенежныхСредств);
	МассивСтраниц.Добавить(Элементы.ГруппаПеречислениеЗарплаты);
	МассивСтраниц.Добавить(Элементы.ГруппаВыплатаДепонентов);
	МассивСтраниц.Добавить(Элементы.ГруппаСнятиеНаличных);
	МассивСтраниц.Добавить(Элементы.ГруппаРасчетыСКонтрагентами);
	
	// т.к. Расшифровка платежа теперь есть у многих видов операций, сначала отработаем формы-исключения.
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПлатежПрочие;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПереводНаДругойСчет;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП Тогда
		Элементы.ГруппаВыплатаЗарплатыПоВедомостям.Видимость      = Истина;
		Элементы.ГруппаВыплатаЗарплатыПоОдномуРаботнику.Видимость = Ложь;
		Элементы.ГруппаВыплатаЗарплатыОперацииСтраницы.ТекущаяСтраница = Элементы.ГруппаВыплатаЗарплатыПоВедомостям;
		Если Форма.ВедетсяУчетРасчетовПоЗарплатеСводно И Форма.УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтатьяДвиженияДенежныхСредств;
		Иначе
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПеречислениеЗарплаты;
		КонецЕсли;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику Тогда
		Элементы.ГруппаВыплатаЗарплатыПоВедомостям.Видимость      = Ложь;
		Элементы.ГруппаВыплатаЗарплатыПоОдномуРаботнику.Видимость = Истина;
		Элементы.ГруппаВыплатаЗарплатыОперацииСтраницы.ТекущаяСтраница = Элементы.ГруппаВыплатаЗарплатыПоОдномуРаботнику;
		Если Форма.ВедетсяУчетРасчетовПоЗарплатеСводно И Форма.УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтатьяДвиженияДенежныхСредств;
		Иначе
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПеречислениеЗарплаты;
		КонецЕсли;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДепонентов Тогда
		Если Форма.УчетЗарплатыИКадровВоВнешнейПрограмме И Форма.ВедетсяУчетРасчетовПоЗарплатеСводно Тогда
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтатьяДвиженияДенежныхСредств;
		Иначе
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаВыплатаДепонентов;
		КонецЕсли;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.СнятиеНаличных Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСнятиеНаличных;
	Иначе
		// а затем тех, кто использует основную форму Расшифровки платежа
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРасчетыСКонтрагентами;
	КонецЕсли;
	
	// Управление видимостью полей, связанных с отражением компенсации задержки выплаты зарплаты.
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику Тогда
		Если Форма.УчетЗарплатыИКадровВоВнешнейПрограмме И Форма.ИспользоватьФорматОбменаЗУП25 Тогда
			Элементы.ГруппаЗадержкаЗарплаты.Видимость = Истина;
			Элементы.ГруппаПеречислениеЗарплатыСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		Иначе
			Элементы.ГруппаЗадержкаЗарплаты.Видимость = Ложь;
			Элементы.ГруппаПеречислениеЗарплатыСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		КонецЕсли;
	КонецЕсли;
	
	Для каждого ТекСтраница Из МассивСтраниц Цикл
		Если ТекСтраница <> Элементы.ГруппаСтраницы.ТекущаяСтраница Тогда
			Если ТекСтраница.Видимость Тогда
				ТекСтраница.Видимость = Ложь;
			КонецЕсли;
		Иначе
			Если НЕ ТекСтраница.Видимость Тогда
				ТекСтраница.Видимость = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьКурсДокумента(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Если Объект.ВалютаДокумента <> Форма.ВалютаРегламентированногоУчета Тогда
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Форма.КурсДокумента      = СтруктураКурса.Курс;
		Форма.КратностьДокумента = СтруктураКурса.Кратность;
	Иначе
		Форма.КурсДокумента      = 1;
		Форма.КратностьДокумента = 1;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПараметрыВыбораДоговораСКонтрагентом(Форма) Экспорт
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	НовыеПараметры = Новый Массив();
	ВидыДоговора   = УчетДенежныхСредствКлиентСервер.ОпределитьВидДоговораСКонтрагентом(Объект.ВидОперации);
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора",   Новый ФиксированныйМассив(ВидыДоговора)));
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ОплатаВВалюте", Форма.ОплатаВВалюте));
	Если Форма.ОплатаВВалюте ИЛИ НЕ СписаниеСРасчетногоСчетаФормыКлиентСервер.ДокументМожетБытьОформленВВалюте(Объект.ВидОперации) Тогда
		НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ВалютаВзаиморасчетов", Объект.ВалютаДокумента));
		НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.Валютный", Форма.ОплатаВВалюте));
	КонецЕсли;
	
	Элементы.РасшифровкаПлатежаДоговорКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
	
	Форма.ПредлагатьНовыйДоговор = Ложь;
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику 
		И НЕ Форма.ОплатаВВалюте И Форма.ВестиУчетПоДоговорам Тогда
		Форма.ПредлагатьНовыйДоговор = РаботаСДоговорамиКонтрагентовБП.ПредлагатьНовыйДоговор(Объект.Организация, Объект.Контрагент);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСвязиПараметровВыбораДоговораСКонтрагентом(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц Тогда
		ЗначениеСвязиПоВладельцу = "Объект.Налогоплательщик";
	Иначе
		ЗначениеСвязиПоВладельцу = "Объект.Контрагент";
	КонецЕсли;
	НовыеСвязи = Новый Массив();
	Для каждого СвязьПараметров Из Элементы.РасшифровкаПлатежаДоговорКонтрагента.СвязиПараметровВыбора Цикл
		Если СвязьПараметров.Имя = "Отбор.Владелец" 
			И СвязьПараметров.ПутьКДанным <> ЗначениеСвязиПоВладельцу Тогда
			НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Владелец", ЗначениеСвязиПоВладельцу, 
				РежимИзмененияСвязанногоЗначения.Очищать);
			НовыеСвязи.Добавить(НоваяСвязь);
		Иначе
			НовыеСвязи.Добавить(СвязьПараметров);
		КонецЕсли;
	КонецЦикла;
	
	Элементы.РасшифровкаПлатежаДоговорКонтрагента.СвязиПараметровВыбора = Новый ФиксированныйМассив(НовыеСвязи);
	
КонецПроцедуры

Процедура УстановитьФункциональныеОпцииФормы(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(Форма);
	Форма.ПрименениеУСН       = УчетнаяПолитика.ПрименяетсяУСН(Объект.Организация,       Объект.Дата);
	Форма.ПрименениеУСНДоходы = УчетнаяПолитика.ПрименяетсяУСНДоходы(Объект.Организация, Объект.Дата);
	Форма.ПлательщикЕНВД      = УчетнаяПолитика.ПлательщикЕНВД(Объект.Организация,       Объект.Дата);
	Форма.ИспользоватьНесколькоБанковскихСчетовОрганизации =
		Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Объект.Организация);
	Форма.ОсновнойБанковскийСчетОрганизацииЗаполнен =
		ПроверкаРеквизитовОрганизации.ОсновнойБанковскийСчетОрганизацииЗаполнен(Объект.Организация);
	Форма.ВестиУчетПоДоговорам = ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам");
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

Функция СчетаБанка(Объект) Экспорт
	
	СчетаОтбора = Новый Массив;
	
	ОтбиратьПоВалюте = Ложь;
	ОбразецСчета     = Неопределено;
	Если НЕ СписаниеСРасчетногоСчетаФормыКлиентСервер.ДокументМожетБытьОформленВВалюте(Объект.ВидОперации) Тогда
		ОтбиратьПоВалюте = Истина;
		ОбразецСчета = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
		СчетаОтбора.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);
	Иначе
		Если ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.СчетОрганизации)
			И НЕ Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Объект.Организация) Тогда
			
			ВалютаДенежныхСредств = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СчетОрганизации, "ВалютаДенежныхСредств");
			Если ВалютаДенежныхСредств = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета() Тогда
				СчетаОтбора.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);
			Иначе
				СчетаОтбора.Добавить(ПланыСчетов.Хозрасчетный.ВалютныеСчета);
			КонецЕсли;
		Иначе
			СчетаОтбора.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);
			СчетаОтбора.Добавить(ПланыСчетов.Хозрасчетный.ВалютныеСчета);
		КонецЕсли;
		
		ОтбиратьПоВалюте = Ложь;
		Образец          = Неопределено;
	КонецЕсли;
	
	СчетаОтбора.Добавить(ПланыСчетов.Хозрасчетный.СпециальныеСчета);
	СчетаБанка = БухгалтерскийУчет.ПолучитьМассивСчетовДенежныхСредств(СчетаОтбора, ОтбиратьПоВалюте, ОбразецСчета);
	
	Возврат СчетаБанка;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НовыеПараметрыПриИзменении(ПараметрыОбъекта, ОплатаВВалюте)
	
	Если ОплатаВВалюте <> ПараметрыОбъекта.ОплатаВВалюте Тогда
		ОплатаВВалютеПредыдущий   = ПараметрыОбъекта.ОплатаВВалюте;
		СчетОрганизацииПредыдущий = ПараметрыОбъекта.СчетОрганизации;
		
		НовыйСчетОрганизации      = Справочники.БанковскиеСчета.ПустаяСсылка();
		Если ЗначениеЗаполнено(ПараметрыОбъекта.Организация) Тогда
			УчетДенежныхСредствБП.УстановитьБанковскийСчет(
				НовыйСчетОрганизации, ПараметрыОбъекта.Организация,
				ПараметрыОбъекта.ВалютаРегламентированногоУчета, ОплатаВВалютеПредыдущий);
		КонецЕсли;
		
		// необходимо временно поменять этот параметр, чтобы получить договор по изменившейся валюте
		ПараметрыОбъекта.ОплатаВВалюте = ОплатаВВалюте;
		ПараметрыОбъекта.Вставить("СчетОрганизации", НовыйСчетОрганизации);
		НовыеПараметры = НовыеПараметрыПриИзмененииСчетаОрганизации(ПараметрыОбъекта);
		НовыеПараметры.Вставить("СчетОрганизации",   НовыйСчетОрганизации);
		
		// восстановим значение параметров
		ПараметрыОбъекта.ОплатаВВалюте   = ОплатаВВалютеПредыдущий;
		ПараметрыОбъекта.СчетОрганизации = СчетОрганизацииПредыдущий;
	Иначе
		
		НовыеПараметры = Новый Структура("ВалютаДокумента", ПараметрыОбъекта.ВалютаДокумента);
		
	КонецЕсли;
	
	НовыеПараметры.Вставить("ОплатаВВалюте", ОплатаВВалюте);
	
	Возврат НовыеПараметры;
	
КонецФункции

Функция НовыеПараметрыПриИзмененииКонтрагента(ПараметрыОбъекта)
	
	НовыйСчетКонтрагента = Справочники.БанковскиеСчета.ПустаяСсылка();
	Если ЗначениеЗаполнено(ПараметрыОбъекта.Контрагент) Тогда
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(
			НовыйСчетКонтрагента, ПараметрыОбъекта.Контрагент,
			ПараметрыОбъекта.ВалютаДокумента, Истина);
	КонецЕсли;
	
	Если Документы.СписаниеСРасчетногоСчета.ЕстьРасшифровкаПлатежа(ПараметрыОбъекта.ВидОперации) Тогда
		НовыеПараметры = СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, Истина);
	Иначе
		НовыеПараметры = Новый Структура;
	КонецЕсли;
	
	НовыеПараметры.Вставить("СчетКонтрагента", НовыйСчетКонтрагента);
	
	Возврат НовыеПараметры;
	
КонецФункции

Функция НовыеПараметрыПриИзмененииОрганизации(ПараметрыОбъекта)
	
	НовыйСчетОрганизации = Справочники.БанковскиеСчета.ПустаяСсылка();
	Если ЗначениеЗаполнено(ПараметрыОбъекта.Организация) Тогда
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(
			НовыйСчетОрганизации, ПараметрыОбъекта.Организация,
			ПараметрыОбъекта.ВалютаРегламентированногоУчета, НЕ ПараметрыОбъекта.ОплатаВВалюте);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НовыйСчетОрганизации) Тогда
		ПараметрыОбъекта.Вставить("СчетОрганизации", НовыйСчетОрганизации);
		НовыеПараметры = НовыеПараметрыПриИзмененииСчетаОрганизации(ПараметрыОбъекта);
	Иначе
		НовыеПараметры = Новый Структура("ВалютаДокумента, ПодразделениеОрганизации", ПараметрыОбъекта.ВалютаДокумента);
	КонецЕсли;
	
	Если НЕ НовыеПараметры.Свойство("ДоговорКонтрагента")
		И Документы.СписаниеСРасчетногоСчета.ЕстьРасшифровкаПлатежа(ПараметрыОбъекта.ВидОперации) Тогда
		
		СвойстваПлатежа = СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, Истина);
		Для каждого СвойствоПлатежа Из СвойстваПлатежа Цикл
			НовыеПараметры.Вставить(СвойствоПлатежа.Ключ, СвойствоПлатежа.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	НовыеПараметры.Вставить("СчетОрганизации", НовыйСчетОрганизации);
	
	Возврат НовыеПараметры;
	
КонецФункции

Функция НовыеПараметрыПриИзмененииСчетаОрганизации(ПараметрыОбъекта)
	
	СвойстваСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ПараметрыОбъекта.СчетОрганизации, "ВалютаДенежныхСредств, ПодразделениеОрганизации");
	НоваяВалюта   = СвойстваСчета.ВалютаДенежныхСредств;
	
	Если ПараметрыОбъекта.ОплатаВВалюте И ПараметрыОбъекта.ВалютаДокумента = НоваяВалюта Тогда
		Возврат Новый Структура("ВалютаДокумента, ПодразделениеОрганизации",
			НоваяВалюта, СвойстваСчета.ПодразделениеОрганизации);
	КонецЕсли;
	
	НоваяВалюта    = ?(НоваяВалюта = Неопределено, ПараметрыОбъекта.ВалютаРегламентированногоУчета, НоваяВалюта);
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НоваяВалюта, ПараметрыОбъекта.Дата);
	
	НовыйСчетКонтрагента = Справочники.БанковскиеСчета.ПустаяСсылка();
	Если ЗначениеЗаполнено(ПараметрыОбъекта.Контрагент) Тогда
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(
			НовыйСчетКонтрагента, ПараметрыОбъекта.Контрагент, СвойстваСчета.ВалютаДенежныхСредств);
	КонецЕсли;
	
	ПользовательУправляетСчетамиУчета = СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета();
	ОплатаВВалюте = НоваяВалюта <> ПараметрыОбъекта.ВалютаРегламентированногоУчета;
	Если Документы.СписаниеСРасчетногоСчета.ЕстьРасшифровкаПлатежа(ПараметрыОбъекта.ВидОперации) Тогда
		ВалютаОбъекта = ПараметрыОбъекта.ВалютаДокумента;
		ПараметрыОбъекта.ВалютаДокумента = НоваяВалюта;
		
		Если НЕ ПользовательУправляетСчетамиУчета Тогда
			ПараметрыОбъекта.ОплатаВВалюте = ОплатаВВалюте;
		КонецЕсли;
		
		НовыеПараметры = СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, Истина);
		
		ПараметрыОбъекта.ВалютаДокумента = ВалютаОбъекта;
		
	Иначе
		НовыеПараметры = Новый Структура;
	КонецЕсли;
	
	Если НЕ ПользовательУправляетСчетамиУчета Тогда
		НовыеПараметры.Вставить("ОплатаВВалюте", ОплатаВВалюте);
	КонецЕсли;
	
	НовыеПараметры.Вставить("ВалютаДокумента",          НоваяВалюта);
	НовыеПараметры.Вставить("ПодразделениеОрганизации", СвойстваСчета.ПодразделениеОрганизации);
	НовыеПараметры.Вставить("КурсДокумента",            СтруктураКурса.Курс);
	НовыеПараметры.Вставить("КратностьДокумента",       СтруктураКурса.Кратность);
	НовыеПараметры.Вставить("СчетКонтрагента",          НовыйСчетКонтрагента);
	
	Возврат НовыеПараметры;
	
КонецФункции

Функция НовыеПараметрыПриИзмененииФизЛица(ПараметрыОбъекта, УчетЗарплатыИКадровВоВнешнейПрограмме)
	
	НовыеПараметры = Новый Структура;
	НовыеПараметры.Вставить("Ссылка",  ПараметрыОбъекта.Ссылка);
	НовыеПараметры.Вставить("Контрагент", ПараметрыОбъекта.Контрагент);
	НовыеПараметры.Вставить("ПлатежнаяВедомость", ПараметрыОбъекта.ПлатежнаяВедомость);
	НовыеПараметры.Вставить("СуммаДокумента", СуммаВыплаченнойЗарплатыРаботнику(
		ПараметрыОбъекта.Ссылка, ПараметрыОбъекта.Контрагент, ПараметрыОбъекта.ПлатежнаяВедомость,
		УчетЗарплатыИКадровВоВнешнейПрограмме));
	
	Возврат НовыеПараметры;
	
КонецФункции

Функция ВидимостьГруппыСтраниц(ВидОперации)
	
	Возврат ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу
		И ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога
		И ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ЛичныеСредстваПредпринимателя
		И ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаРаботнику
		И ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеСотрудникуПоДоговоруПодряда
		И ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.КомиссияБанка;
	
КонецФункции

Процедура ВалютаДокументаПриИзмененииСервер(Форма, ПричиныИзменения, ОплатаВВалюте)
	
	Объект = Форма.Объект;
	
	ПараметрыОбъекта = СписаниеСРасчетногоСчетаФормыКлиентСервер.ТекущиеПараметрыОбъекта(Форма);
	НовыеПараметры   = НовыеПараметрыПриИзменении(ПараметрыОбъекта, ОплатаВВалюте);
	
	Если НовыеПараметры.ОплатаВВалюте <> ПараметрыОбъекта.ОплатаВВалюте Тогда
		
		ПричиныИзменения.Добавить("ВалютаДокумента");
		
		ПараметрыОбъекта.Вставить("ОплатаВВалюте", НовыеПараметры.ОплатаВВалюте);
		ЗаполнитьЗначенияСвойств(Форма, НовыеПараметры, "ОплатаВВалюте, КурсДокумента, КратностьДокумента");
		ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "СчетОрганизации, СчетКонтрагента, ПодразделениеОрганизации");
		
		СчетОрганизацииПриИзмененииСервер(Форма, ПричиныИзменения);
		
		ИзменитьПараметрыВыбораСчетаПеревода(Форма);
		
		УстановитьЗаголовкиКолонокУСН(Форма);
		
		ИнициализироватьСвойстваПлатежа(Форма, Истина);
		ЗаполнитьЗначенияСвойств(Форма.СвойстваПлатежа, НовыеПараметры);
		ПерезаполнитьРасшифровкуПлатежа(Форма);
		
	КонецЕсли;
	
	// ВалютаДокумента не устанавливается вручную, а берется из валюты банковского счета организации
	УстановитьПараметрыВыбораБанковскихСчетов(Форма);
	
	ЗаполнитьСчетаУчета(Форма, "ВалютаДокумента", ПричиныИзменения);
	
КонецПроцедуры

Процедура ВидОперацииОбработатьИзменение(Форма, ПричиныИзменения)
	
	Объект = Форма.Объект;
	
	ПричиныИзменения.Добавить("ВидОперации");
	
	УстановитьОграничениеТипаКонтрагента(Форма);
	
	Если НЕ СписаниеСРасчетногоСчетаФормыКлиентСервер.ДокументМожетБытьОформленВВалюте(Объект.ВидОперации) Тогда
		ПараметрОплатаВВалюте = Ложь;
	Иначе
		ПараметрОплатаВВалюте = Форма.ОплатаВВалюте;
	КонецЕсли;
	
	ВалютаДокументаПриИзмененииСервер(Форма, ПричиныИзменения, ПараметрОплатаВВалюте);
	УстановитьПараметрыВыбораСчетовУчетаДенежныхСредств(Форма);
	
	Если Объект.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.ПустаяСсылка();
		Объект.ПеречислениеНДФЛ.Очистить();
		Форма.ЭтоУплатаНДФЛ = Ложь;
		Объект.НалоговыйАгентНДС.Очистить();
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.СнятиеНаличных Тогда
		Объект.Контрагент      = Справочники.Контрагенты.ПустаяСсылка();
		Объект.СчетКонтрагента = Справочники.БанковскиеСчета.ПустаяСсылка();
	КонецЕсли;
	
	Если УчетДенежныхСредствКлиентСервер.РасчетыСФизическимиЛицами(Объект.ВидОперации) Тогда
		Если ТипЗнч(Объект.Контрагент) <> Тип("СправочникСсылка.ФизическиеЛица") Тогда
			Объект.Контрагент = Справочники.ФизическиеЛица.ПустаяСсылка();
		КонецЕсли;
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ЛичныеСредстваПредпринимателя Тогда
			РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Организация, "ИндивидуальныйПредприниматель");
			Объект.Контрагент = РеквизитыОрганизации.ИндивидуальныйПредприниматель;
		КонецЕсли;
		
	ИначеЕсли Объект.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет
		И Объект.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.СнятиеНаличных Тогда
		Если ТипЗнч(Объект.Контрагент) <> Тип("СправочникСсылка.Контрагенты") Тогда
			Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) ИЛИ НЕ ЗначениеЗаполнено(Объект.СчетКонтрагента)
		ИЛИ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СчетКонтрагента, "Владелец") <> Объект.Контрагент Тогда
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(
			Объект.СчетКонтрагента, Объект.Контрагент,
			Объект.ВалютаДокумента, Истина);
	КонецЕсли;
	
	ЗаполнитьСчетаУчета(Форма, "ВидОперации", ПричиныИзменения);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание Тогда
		БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
			Форма, Объект, СписаниеСРасчетногоСчетаФормыКлиентСервер.ПараметрыУстановкиСвойствСубконто(Форма, "Прочие"));
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику Тогда
		БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
			Форма, Объект, СписаниеСРасчетногоСчетаФормыКлиентСервер.ПараметрыУстановкиСвойствСубконто(Форма, "ЗадержкаЗарплаты"));
	КонецЕсли;
	
	УстановитьВладельцаСчетаКонтрагента(Форма);
	
	Если Документы.СписаниеСРасчетногоСчета.ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
		УстановитьСвязиПараметровВыбораДоговораСКонтрагентом(Форма);
		УстановитьПараметрыВыбораДоговораСКонтрагентом(Форма);
		ПараметрыОбъекта = СписаниеСРасчетногоСчетаФормыКлиентСервер.ТекущиеПараметрыОбъекта(Форма);
		Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц Тогда
			ПараметрыОбъекта.Контрагент = Объект.Налогоплательщик;
		КонецЕсли;
		Форма.СвойстваПлатежа = СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, Истина);
	КонецЕсли;
	
	ПерезаполнитьРасшифровкуПлатежа(Форма);
	ПерезаполнитьСтатьюДДС(Форма);
	УстановитьПараметрыВыбораБанковскихСчетов(Форма);
	
	СформироватьНазначениеПлатежаСервер(Форма, Ложь, "ВидОперации", ПричиныИзменения);
	
	Форма.ПлатежноеПоручение = Документы.СписаниеСРасчетногоСчета.НайтиДокументПлатежноеПоручение(
		Объект.Ссылка, Объект.ДокументОснование, Объект.ВидОперации, Форма.НадписьПлатежноеПоручение);
	
КонецПроцедуры

Процедура КонтрагентОбработатьИзменение(Форма, ПричиныИзменения)
	
	Объект = Форма.Объект;
	
	ПричиныИзменения.Добавить("Контрагент");
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику Тогда
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			ФизЛицоВыплатаЗарплатыПриИзмененииСервер(Форма);
		Иначе
			Объект.СуммаДокумента = 0;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДепонентов Тогда
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			ЗаполнитьДепонированнымиСуммамиНаСервере(Форма);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВладельцаСчетаКонтрагента(Форма);
	
	УстановитьПараметрыВыбораБанковскихСчетов(Форма);
	
	ПараметрыОбъекта = СписаниеСРасчетногоСчетаФормыКлиентСервер.ТекущиеПараметрыОбъекта(Форма);
	НовыеПараметры   = НовыеПараметрыПриИзмененииКонтрагента(ПараметрыОбъекта);
	
	Объект.СчетКонтрагента = НовыеПараметры.СчетКонтрагента;
	
	Если Объект.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц Тогда
		
		ИнициализироватьСвойстваПлатежа(Форма, Истина);
		ЗаполнитьЗначенияСвойств(Форма.СвойстваПлатежа, НовыеПараметры);
		
		ПерезаполнитьРасшифровкуПлатежа(Форма);
		СформироватьНазначениеПлатежаСервер(Форма, Ложь, "Контрагент", ПричиныИзменения);
	
		ЗаполнитьСчетаУчета(Форма, "Контрагент", ПричиныИзменения);
		
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику И Форма.ВестиУчетПоДоговорам Тогда
		
		Если ЗначениеЗаполнено(НовыеПараметры.ДоговорКонтрагента) 
			ИЛИ Форма.ОплатаВВалюте Тогда
			Форма.ПредлагатьНовыйДоговор = Ложь;
		Иначе
			Форма.ПредлагатьНовыйДоговор = РаботаСДоговорамиКонтрагентовБП.ПредлагатьНовыйДоговор(Объект.Организация, Объект.Контрагент);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НалогоплательщикОбработатьИзменение(Форма, ПричиныИзменения)
	
	Объект = Форма.Объект;
	
	ПричиныИзменения.Добавить("Контрагент");
	
	ПараметрыОбъекта = СписаниеСРасчетногоСчетаФормыКлиентСервер.ТекущиеПараметрыОбъекта(Форма);
	
	ПараметрыОбъекта.Контрагент = Объект.Налогоплательщик;
	НовыеПараметры = НовыеПараметрыПриИзмененииКонтрагента(ПараметрыОбъекта);
	
	ИнициализироватьСвойстваПлатежа(Форма, Истина);
	ЗаполнитьЗначенияСвойств(Форма.СвойстваПлатежа, НовыеПараметры);
	
	ПерезаполнитьРасшифровкуПлатежа(Форма);
	СформироватьНазначениеПлатежаСервер(Форма, Ложь, "Контрагент", ПричиныИзменения);
	
	ЗаполнитьСчетаУчета(Форма, "Контрагент", ПричиныИзменения);
	
КонецПроцедуры

Процедура ПроверитьВидОперацииОрганизации(Форма, ПричиныИзменения)
	
	Объект = Форма.Объект;
	
	ДоступныеОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПолучитьСписокДоступныхЗначений(
		Новый Структура("Организация, СчетОрганизации", Объект.Организация, Объект.СчетОрганизации));
	
	Если ДоступныеОперации.Количество() > 0 И ДоступныеОперации.НайтиПоЗначению(Объект.ВидОперации) = Неопределено Тогда
		
		Объект.ВидОперации = ДоступныеОперации[0].Значение;
		ВидОперацииОбработатьИзменение(Форма, ПричиныИзменения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьПараметрыВыбораСчетаПеревода(Форма)
	
	Элементы = Форма.Элементы;
	
	НовыйМассивПараметров = Новый Массив;
	Для каждого СтарыйПараметр Из Элементы.СчетУчетаРасчетовСКонтрагентомПеревод.ПараметрыВыбора Цикл
		Если СтарыйПараметр.Имя = "Отбор.Ссылка" Тогда
			НовыйМассивПараметров.Добавить(СтарыйПараметр);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Валютный", Форма.ОплатаВВалюте));
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
	
	Элементы.СчетУчетаРасчетовСКонтрагентомПеревод.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	
КонецПроцедуры

Процедура УстановитьВладельцаСчетаКонтрагента(Форма)
	
	Объект = Форма.Объект;
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
		Форма.ВладелецСчетаКонтрагента = Объект.Организация;
	Иначе
		Форма.ВладелецСчетаКонтрагента = Объект.Контрагент;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьОграничениеТипаКонтрагента(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗайма
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратКредита
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаКонтрагенту
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.КомиссияБанка Тогда
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		Элементы.Контрагент.ПодсказкаВвода  = НСтр("ru = 'Введите ИНН или наименование'");
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаРаботнику
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДепонентов
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеСотрудникуПоДоговоруПодряда Тогда
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
		Элементы.Контрагент.ПодсказкаВвода  = "";
	Иначе
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("Неопределено");
		Элементы.Контрагент.ПодсказкаВвода  = "";
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПараметрыВыбораБанковскихСчетов(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	НовыйМассивПараметров = Новый Массив();
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Валютный", Форма.ОплатаВВалюте));
	
	Если СчетБанкаВиден(Форма)
		ИЛИ НЕ СписаниеСРасчетногоСчетаФормыКлиентСервер.ДокументМожетБытьОформленВВалюте(Объект.ВидОперации) Тогда
		Элементы.СчетОрганизации.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	Иначе
		Элементы.СчетОрганизации.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
	КонецЕсли;
	
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец", Форма.ВладелецСчетаКонтрагента));
	Элементы.СчетКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	
КонецПроцедуры

Процедура УстановитьПараметрыВыбораСчетовУчетаДенежныхСредств(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	СчетаБанка = СчетаБанка(Форма.Объект);
	
	НовыйМассивПараметров = Новый Массив;
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СчетаБанка)));
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
	Элементы.СчетБанк.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	
	НовыйМассивПараметров = Новый Массив;
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка",   Новый ФиксированныйМассив(СчетаБанка)));
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Валютный", Форма.ОплатаВВалюте));
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
	Элементы.СчетУчетаРасчетовСКонтрагентомПеревод.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	
КонецПроцедуры

Процедура УстановитьСостояниеДокумента(Форма)
	
	Объект = Форма.Объект;
	
	Форма.СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

Процедура ФизЛицоВыплатаЗарплатыПриИзмененииСервер(Форма)
	
	Объект = Форма.Объект;
	
	ПараметрыОбъекта = СписаниеСРасчетногоСчетаФормыКлиентСервер.ТекущиеПараметрыОбъекта(Форма);
	НовыеПараметры   = НовыеПараметрыПриИзмененииФизЛица(ПараметрыОбъекта, Форма.УчетЗарплатыИКадровВоВнешнейПрограмме);
	ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "СуммаДокумента");
	
КонецПроцедуры

Процедура ПерезаполнитьСтатьюДДС(Форма, ИзменениеВидаНалоговогоОбязательства = Ложь)
	
	Объект = Форма.Объект;
	
	Если НЕ Документы.СписаниеСРасчетногоСчета.ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
		КонтекстОперации = Объект.ВидОперации;
		Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
			ВидНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Налог, "ВидНалога");
			Если Объект.ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.Налог
				ИЛИ Объект.ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.НалогАкт
				ИЛИ Объект.ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.НалогСам Тогда
				Если ВидНалога = Перечисления.ВидыНалогов.НалогНаПрибыль_РегиональныйБюджет
					ИЛИ ВидНалога = Перечисления.ВидыНалогов.НалогНаПрибыль_ФедеральныйБюджет Тогда
					КонтекстОперации = "НалогНаПрибыль";
				КонецЕсли;
			КонецЕсли;
			
			СтатьяДДСПоУмолчанию = УчетДенежныхСредствБП.СтатьяДДСПоУмолчанию(КонтекстОперации);
			Если НЕ ИзменениеВидаНалоговогоОбязательства Тогда
				Объект.СтатьяДвиженияДенежныхСредств = СтатьяДДСПоУмолчанию;
			Иначе
				Если ЗначениеЗаполнено(СтатьяДДСПоУмолчанию)
					ИЛИ ВидНалога = Перечисления.ВидыНалогов.НалогНаПрибыль_РегиональныйБюджет
					ИЛИ ВидНалога = Перечисления.ВидыНалогов.НалогНаПрибыль_ФедеральныйБюджет Тогда
					Объект.СтатьяДвиженияДенежныхСредств = СтатьяДДСПоУмолчанию;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.КомиссияБанка Тогда
			КонтекстОперации = "КомиссияБанка";
			Объект.СтатьяДвиженияДенежныхСредств = УчетДенежныхСредствБП.СтатьяДДСПоУмолчанию(КонтекстОперации);
		Иначе
			Если Объект.СчетУчетаРасчетовСКонтрагентом = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПрочиеРасходы") тогда
				// Это услуги банка
				КонтекстОперации = "КомиссияБанка";
			КонецЕсли;
			
			Объект.СтатьяДвиженияДенежныхСредств = УчетДенежныхСредствБП.СтатьяДДСПоУмолчанию(КонтекстОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РасшифровкаПлатежа

Процедура ИнициализироватьСвойстваПлатежа(Форма, ТолькоСоздатьКлючи = Ложь, ПолучатьДоговор = Ложь)
	
	Если Форма.СвойстваПлатежа = Неопределено Тогда
		
		Если ТолькоСоздатьКлючи Тогда
			Форма.СвойстваПлатежа = СписаниеСРасчетногоСчетаФормыКлиентСервер.ПустаяСтруктураСвойстваПлатежа();
		Иначе
			ПараметрыОбъекта = СписаниеСРасчетногоСчетаФормыКлиентСервер.ТекущиеПараметрыОбъекта(Форма);
			
			Если СписаниеСРасчетногоСчетаФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
				ПараметрыОбъекта.Вставить("ДоговорКонтрагента",            Форма.РасшифровкаПлатежаДоговорКонтрагента);
				ПараметрыОбъекта.Вставить("СтатьяДвиженияДенежныхСредств", Форма.РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств);
			Иначе
				РасшифровкаПлатежа = Неопределено;
				Если СписаниеСРасчетногоСчетаФормыКлиентСервер.ФормаРасшифровкиПлатежа(Форма) > 0 Тогда
					РасшифровкаПлатежа = Форма.РасшифровкаПлатежа;
				Иначе
					РасшифровкаПлатежа = Форма.Объект.РасшифровкаПлатежа;
				КонецЕсли;
				
				Если РасшифровкаПлатежа.Количество() > 0 Тогда
					ПараметрыОбъекта.Вставить("ДоговорКонтрагента",            РасшифровкаПлатежа[0].ДоговорКонтрагента);
					ПараметрыОбъекта.Вставить("СтатьяДвиженияДенежныхСредств", РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);
				КонецЕсли;
			КонецЕсли;
			
			Форма.СвойстваПлатежа = СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, ПолучатьДоговор);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДобавленныеКолонкиТаблиц(Форма) Экспорт
	
	Если СписаниеСРасчетногоСчетаФормыКлиентСервер.ФормаРасшифровкиПлатежа(Форма) Тогда
		РасшифровкаПлатежа = Форма.РасшифровкаПлатежа;
	Иначе
		РасшифровкаПлатежа = Форма.Объект.РасшифровкаПлатежа;
	КонецЕсли;
	
	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ЕстьРасчетыВУсловныхЕдиницах = Ложь;
	МассивДоговоров   = РасшифровкаПлатежа.Выгрузить(, "ДоговорКонтрагента").ВыгрузитьКолонку("ДоговорКонтрагента");
	СвойстваДоговоров = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		МассивДоговоров, "ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах");
	
	Для каждого СтрокаПлатеж Из РасшифровкаПлатежа Цикл
		Если ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
			СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов     = СвойстваДоговоров[
				СтрокаПлатеж.ДоговорКонтрагента].ВалютаВзаиморасчетов;
			СтрокаПлатеж.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах = СвойстваДоговоров[
				СтрокаПлатеж.ДоговорКонтрагента].РасчетыВУсловныхЕдиницах;
			
			Форма.ЕстьРасчетыВУсловныхЕдиницах = Форма.ЕстьРасчетыВУсловныхЕдиницах
				ИЛИ СтрокаПлатеж.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах;
		Иначе
			СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов     = Справочники.Валюты.ПустаяСсылка();
			СтрокаПлатеж.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если Форма.ЕстьРасчетыВУсловныхЕдиницах Тогда
		Для каждого СтрокаПлатеж Из РасшифровкаПлатежа Цикл
			СписаниеСРасчетногоСчетаФормыКлиентСервер.ЗаполнитьНадписиВРасшифровке(СтрокаПлатеж);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПерезаполнитьРасшифровкуПлатежа(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	ФормаДокументаОднострочная = СписаниеСРасчетногоСчетаФормыКлиентСервер.ФормаДокументаОднострочная(Форма);
	
	ИнициализироватьСвойстваПлатежа(Форма);
	
	Объект.РасшифровкаПлатежа.Очистить();
	Если Документы.СписаниеСРасчетногоСчета.ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
		СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПлатеж, Форма.СвойстваПлатежа);
		
		СчетаУчетаВДокументах.ЗаполнитьСтроки(Объект.РасшифровкаПлатежа, "РасшифровкаПлатежа", Объект, Документы.СписаниеСРасчетногоСчета);
		ЗаполнитьЗначенияСвойств(Форма.СвойстваПлатежа, СтрокаПлатеж);
		
		СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
		СписаниеСРасчетногоСчетаФормыКлиентСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);
		СписаниеСРасчетногоСчетаФормыКлиентСервер.РассчитатьСуммуВзаиморасчетов(Форма, СтрокаПлатеж);
		
		Если НЕ ФормаДокументаОднострочная Тогда
			СписаниеСРасчетногоСчетаФормыКлиентСервер.ОбновитьИтоги(Форма);
			Элементы.РасшифровкаПлатежа.ТекущаяСтрока = СтрокаПлатеж.ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьДобавленныеКолонкиТаблиц(Форма);
	
	Если ФормаДокументаОднострочная Тогда
		СписаниеСРасчетногоСчетаФормыКлиентСервер.ЗаполнитьЗначенияТекущиеДанныеРасшифровкаПлатежа(Форма, СтрокаПлатеж);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьСуммыВзаиморасчетов(Форма)
	
	Если СписаниеСРасчетногоСчетаФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
		РасшифровкаПлатежа = Форма.Объект.РасшифровкаПлатежа;
		ДанныеВРеквизитахФормы = РасшифровкаПлатежа.Количество() < 2;
		
	ИначеЕсли СписаниеСРасчетногоСчетаФормыКлиентСервер.ФормаРасшифровкиПлатежа(Форма) Тогда
		РасшифровкаПлатежа = Форма.РасшифровкаПлатежа;
		ДанныеВРеквизитахФормы = Ложь;
		
	Иначе
		РасшифровкаПлатежа = Форма.Объект.РасшифровкаПлатежа;
		ДанныеВРеквизитахФормы = Ложь;
		
	КонецЕсли;
	
	Если ДанныеВРеквизитахФормы Тогда
		// Одна строка, актуальные данные содержатся в реквизитах формы.
		СтрокаПлатеж = СписаниеСРасчетногоСчетаФормыКлиентСервер.ТекущиеДанныеРасшифровкаПлатежа(Форма);
		РассчитатьКурсИСуммуВзаиморасчетов(Форма, СтрокаПлатеж);
		СписаниеСРасчетногоСчетаФормыКлиентСервер.ЗаполнитьЗначенияТекущиеДанныеРасшифровкаПлатежа(Форма, СтрокаПлатеж);
	Иначе
		Отбор = Новый Структура("ДоговорКонтрагентаРасчетыВУсловныхЕдиницах", Истина);
		ПлатежиВУсловныхЕдиницах = РасшифровкаПлатежа.НайтиСтроки(Отбор);
		Для каждого СтрокаПлатеж Из ПлатежиВУсловныхЕдиницах Цикл
			РассчитатьКурсИСуммуВзаиморасчетов(Форма, СтрокаПлатеж);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьКурсИСуммуВзаиморасчетов(Форма, СтрокаПлатеж)
	
	Объект = Форма.Объект;
	
	Если СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов <> Форма.ВалютаРегламентированногоУчета Тогда
		
		СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
			СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов, Объект.Дата);
		
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
	Иначе
		СтрокаПлатеж.КурсВзаиморасчетов      = 1;
		СтрокаПлатеж.КратностьВзаиморасчетов = 1;
	КонецЕсли;
	
	СписаниеСРасчетногоСчетаФормыКлиентСервер.РассчитатьСуммуВзаиморасчетов(Форма, СтрокаПлатеж);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзмененииНаСервере(Форма, ПараметрыОбъекта, СтрокаПлатеж) Экспорт
	
	Объект = Форма.Объект;
	
	Если СписаниеСРасчетногоСчетаФормыКлиентСервер.ФормаРасшифровкиПлатежа(Форма) Тогда
		РасшифровкаПлатежа = Форма.РасшифровкаПлатежа;
	Иначе
		РасшифровкаПлатежа = Объект.РасшифровкаПлатежа;
	КонецЕсли;
	
	ПараметрыОбъекта.ДоговорКонтрагента = СтрокаПлатеж.ДоговорКонтрагента;
	Форма.СвойстваПлатежа  = СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, Ложь);
	
	ЗаполнитьЗначенияСвойств(СтрокаПлатеж, Форма.СвойстваПлатежа);
	
	ПараметрыЗаполненияСчетовУчета = СписаниеСРасчетногоСчетаФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(
		"РасшифровкаПлатежа.ДоговорКонтрагента", Объект, СтрокаПлатеж);
	Изменения = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.СписаниеСРасчетногоСчета,
		ПараметрыЗаполненияСчетовУчета.КЗаполнению,
		Объект,
		"РасшифровкаПлатежа",
		СтрокаПлатеж,
		Ложь);
	ЗаполнитьЗначенияСвойств(СтрокаПлатеж,          Изменения);
	ЗаполнитьЗначенияСвойств(Форма.СвойстваПлатежа, Изменения);
	
	Если Форма.ПрименениеУСН Тогда
		СписаниеСРасчетногоСчетаФормыКлиентСервер.ЗаполнитьОтражениеСтрокиВУСН(Форма, СтрокаПлатеж);
	КонецЕсли;
	
	СписаниеСРасчетногоСчетаФормыКлиентСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);
	СписаниеСРасчетногоСчетаФормыКлиентСервер.РассчитатьСуммуВзаиморасчетов(Форма, СтрокаПлатеж);
	
	Если РасшифровкаПлатежа.Количество() > 1 Тогда
		Форма.ЕстьРасчетыВУсловныхЕдиницах = Форма.ЕстьРасчетыВУсловныхЕдиницах
			ИЛИ СтрокаПлатеж.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах;
	Иначе
		Форма.ЕстьРасчетыВУсловныхЕдиницах = СтрокаПлатеж.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Форма.ПредлагатьНовыйДоговор = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзмененииВТаблицеНаСервере(Форма, ИдСтроки) Экспорт
	
	Если СписаниеСРасчетногоСчетаФормыКлиентСервер.ФормаРасшифровкиПлатежа(Форма) Тогда
		РасшифровкаПлатежа = Форма.РасшифровкаПлатежа;
	Иначе
		РасшифровкаПлатежа = Форма.Объект.РасшифровкаПлатежа;
	КонецЕсли;
	
	СтрокаПлатеж = РасшифровкаПлатежа.НайтиПоИдентификатору(ИдСтроки);
	
	ПараметрыОбъекта = СписаниеСРасчетногоСчетаФормыКлиентСервер.ТекущиеПараметрыОбъекта(Форма);
	
	РасшифровкаПлатежаДоговорКонтрагентаПриИзмененииНаСервере(Форма, ПараметрыОбъекта, СтрокаПлатеж);
	
	ЗаполнитьЗначенияСвойств(Форма.СвойстваПлатежа, СтрокаПлатеж);
	
	СписаниеСРасчетногоСчетаФормыКлиентСервер.ЗаполнитьНадписиВРасшифровке(СтрокаПлатеж);
	
КонецПроцедуры

Функция СвойстваСтрокРасшифровкиПлатежа(Знач ПараметрыОбъекта, Знач ПолучатьДоговор) Экспорт
	
	ВестиУчетПоДоговорам = ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам");
	СвойстваПлатежа = СписаниеСРасчетногоСчетаФормыКлиентСервер.ПустаяСтруктураСвойстваПлатежа();
	Если НЕ ЗначениеЗаполнено(ПараметрыОбъекта.ВидОперации)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.Организация)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.Дата)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.Контрагент)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.ВалютаДокумента)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.ДоговорКонтрагента) И НЕ ПолучатьДоговор И ВестиУчетПоДоговорам Тогда
		
		СвойстваПлатежа.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
		
	Иначе
		
		ПараметрыПлатежа = Новый Структура("ВидОперации, Организация, Дата, Контрагент, ДоговорКонтрагента, ПрименениеУСН,
			|СтатьяДвиженияДенежныхСредств, ВидПлатежаПоКредитамЗаймам");
		
		ЗаполнитьЗначенияСвойств(ПараметрыПлатежа, ПараметрыОбъекта);
		
		Если ПараметрыОбъекта.ВалютаДокумента = ПараметрыОбъекта.ВалютаРегламентированногоУчета Тогда
			ПараметрыПлатежа.Вставить("ОплатаВВалюте",   Ложь);
			ПараметрыПлатежа.Вставить("ВалютаДокумента", ПараметрыОбъекта.ВалютаРегламентированногоУчета);
		Иначе
			ПараметрыПлатежа.Вставить("ОплатаВВалюте",   Истина);
			ПараметрыПлатежа.Вставить("ВалютаДокумента", ПараметрыОбъекта.ВалютаДокумента);
		КонецЕсли;
		
		СвойстваПлатежа.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
		
		Если ПолучатьДоговор Тогда
			ПараметрыПлатежа.ДоговорКонтрагента = УчетДенежныхСредствБП.ПолучитьДоговорКонтрагента(ПараметрыПлатежа);
		КонецЕсли;
		
		СвойстваПлатежа.ДоговорКонтрагента            = ПараметрыПлатежа.ДоговорКонтрагента;
		СвойстваПлатежа.СтатьяДвиженияДенежныхСредств = ПараметрыПлатежа.СтатьяДвиженияДенежныхСредств;
		
		Если ПараметрыПлатежа.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗайма
			ИЛИ ПараметрыПлатежа.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратКредита Тогда
			СвойстваПлатежа.ВидПлатежаПоКредитамЗаймам = ПараметрыПлатежа.ВидПлатежаПоКредитамЗаймам;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыПлатежа.ДоговорКонтрагента) Тогда
			СвойстваДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ПараметрыПлатежа.ДоговорКонтрагента, "ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах");
			СвойстваПлатежа.ДоговорКонтрагентаВалютаВзаиморасчетов     = СвойстваДоговора.ВалютаВзаиморасчетов;
			СвойстваПлатежа.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах = СвойстваДоговора.РасчетыВУсловныхЕдиницах;
			
			Если СвойстваПлатежа.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах Тогда
				СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СвойстваДоговора.ВалютаВзаиморасчетов, ПараметрыПлатежа.Дата);
				СвойстваПлатежа.КурсВзаиморасчетов      = СтруктураКурса.Курс;
				СвойстваПлатежа.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
			КонецЕсли;
		КонецЕсли;
		
		СтавкаНДС = СтавкаНДСРасшифровкиПлатежа(ПараметрыПлатежа.ВидОперации, ПараметрыПлатежа.ДоговорКонтрагента, ПараметрыПлатежа.ПрименениеУСН);
		Если СтавкаНДС <> Неопределено Тогда
			СвойстваПлатежа.СтавкаНДС = СтавкаНДС;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СвойстваПлатежа;
	
КонецФункции

Функция СтавкаНДСРасшифровкиПлатежа(ВидОперации, Договор, ПрименениеУСН) Экспорт
	
	Если ЗначениеЗаполнено(Договор) Тогда
		Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику Тогда
			Возврат УчетДенежныхСредствБП.ПолучитьСтавкуНДСПоДоговору(Договор);
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю Тогда
			Если ПрименениеУСН Тогда
				Возврат Перечисления.СтавкиНДС.БезНДС;
			Иначе
				Возврат УчетДенежныхСредствБП.ПолучитьСтавкуНДСПоДоговору(Договор);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли НЕ ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам") Тогда
		Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику Тогда
			Возврат Перечисления.СтавкиНДС.НДС18;
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю Тогда
			Возврат ?(ПрименениеУСН, Перечисления.СтавкиНДС.БезНДС, Перечисления.СтавкиНДС.НДС18);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ПеречислениеЗаработнойПлаты

Функция СуммаВыплаченнойЗарплатыРаботнику(Знач Ссылка, Знач ФизЛицо, Знач ПлатежнаяВедомость, УчетЗарплатыИКадровВоВнешнейПрограмме) Экспорт
	
	СуммаДокумента = 0;
	
	Если ЗначениеЗаполнено(ПлатежнаяВедомость) И ЗначениеЗаполнено(ФизЛицо) Тогда
		
		Ведомости = Новый Массив;
		Ведомости.Добавить(ПлатежнаяВедомость);
		
		ТаблицаНеоплаченныхВедомостей = УчетЗарплаты.ПолучитьДанныеВедомостейДляОплатыТаблично(Ссылка, Ведомости, ФизЛицо, Ложь);
		ТаблицаОплаченныхВедомостей   = УчетЗарплаты.ПолучитьДанныеВедомостейДляОплатыТаблично(Ссылка, Ведомости, ФизЛицо, Истина);
		
		Если ТаблицаНеоплаченныхВедомостей.Количество() = 0 И ТаблицаОплаченныхВедомостей.Количество() = 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В выбранной ведомости отсутствуют сведения о заработной плате сотрудника %1.'"), ФизЛицо);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.ПлатежнаяВедомость");
			
		Иначе
			
			ВедомостьОплачена = ТаблицаОплаченныхВедомостей.Количество() <> 0;
			
			Если ВедомостьОплачена Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'По текущей ведомости заработная плата сотрудника %1 выплачена ранее.'"), ФизЛицо);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.ПлатежнаяВедомость");
			Иначе
				СтрокаВедомости = ТаблицаНеоплаченныхВедомостей[0];
				СуммаДокумента = СтрокаВедомости.СуммаКВыплате + СтрокаВедомости.КомпенсацияЗаЗадержкуЗарплаты;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат СуммаДокумента;
	
КонецФункции

Функция СуммаЗаработнойПлатыПоВедомости(Знач ПлатежнаяВедомость, Знач Ссылка, Знач УчетЗарплатыИКадровВоВнешнейПрограмме) Экспорт
	
	Ведомости = Новый Массив;
	Ведомости.Добавить(ПлатежнаяВедомость);
	
	ПлатежнаяВедомость = Ведомости[0];
	ТаблицаВедомостей  = УчетЗарплаты.ПолучитьДанныеВедомостейДляОплатыТаблично(Ссылка, Ведомости,, Ложь);
	
	ТаблицаДокументовОплаты = ТаблицаВедомостей.Скопировать(, "Ведомость");
	ТаблицаДокументовОплаты.Свернуть("Ведомость",);
	
	ВедомостьОплачена = Ложь;
	Если ТаблицаВедомостей.Количество() = 0 Тогда
		ВедомостьОплачена = Истина;
	КонецЕсли;
	
	Если ВедомостьОплачена Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Документ %1 полностью оплачен.'"), ПлатежнаяВедомость);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		СуммаДокумента = 0;
	Иначе
		СуммаДокумента = ТаблицаВедомостей.Итог("СуммаКВыплате") + ТаблицаВедомостей.Итог("КомпенсацияЗаЗадержкуЗарплаты");
	КонецЕсли;
	
	Возврат СуммаДокумента;
	
КонецФункции

#КонецОбласти

#Область ПеречислениеДепонентов

Процедура ЗаполнитьДепонированнымиСуммамиНаСервере(Форма)
	
	Объект = Форма.Объект;
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекстСообщения = НСтр("ru = 'Не указан работник!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если Форма.УчетЗарплатыИКадровВоВнешнейПрограмме И Форма.ВедетсяУчетРасчетовПоЗарплатеСводно Тогда
		Возврат;
	Иначе
		МассивФизическихЛиц = Новый Массив;
		МассивФизическихЛиц.Добавить(Объект.Контрагент);
		
		НевыплаченныеДепоненты = УчетЗарплаты.НевыплаченныеДепоненты(
			Объект.Ссылка, Объект.Организация, Объект.Дата, МассивФизическихЛиц);
		
		НевыплаченныеДепоненты.Колонки.Сумма.Имя = "СуммаПлатежа";
		Объект.СуммаДокумента = НевыплаченныеДепоненты.Итог("СуммаПлатежа");
	КонецЕсли;
	
	Объект.ПеречислениеДепонентов.Очистить();
	Объект.ПеречислениеДепонентов.Загрузить(НевыплаченныеДепоненты);
	
	Форма.ПеречислениеДепонентовПриИзмененииНаСервере();
	
КонецПроцедуры

Функция СуммаНеВыплаченнойЗарплатыРаботнику(Знач Ссылка, Знач Организация, Знач Дата, Знач ФизЛицо, Знач ПлатежнаяВедомость, Знач УчетЗарплатыИКадровВоВнешнейПрограмме) Экспорт
	
	СуммаДокумента = 0;
	
	Если ЗначениеЗаполнено(ПлатежнаяВедомость) И ЗначениеЗаполнено(ФизЛицо) Тогда
		
		Ведомости = Новый Массив;
		Ведомости.Добавить(ПлатежнаяВедомость);
		
		МассивФизическихЛиц = Новый Массив;
		МассивФизическихЛиц.Добавить(ФизЛицо);
		
		НевыплаченныеДепоненты = УчетЗарплаты.НевыплаченныеДепоненты(
		Ссылка, Организация, Дата, МассивФизическихЛиц);
		
		ВедомостьДепонентов = НевыплаченныеДепоненты.Найти(ПлатежнаяВедомость, "Ведомость");
		
		Если ВедомостьДепонентов = Неопределено Тогда
			СуммаДокумента = 0;
		Иначе
			СуммаДокумента = ВедомостьДепонентов.Сумма;
		КонецЕсли;
		
		Если СуммаДокумента = 0 Тогда
			ТекстСообщения = НСтр("ru = 'В выбранной ведомости отсутствуют сведения о депонированной заработной плате сотрудника!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СуммаДокумента;
	
КонецФункции

#КонецОбласти

#Область ПеречислениеНалога

Процедура ВидНалоговогоОбязательстваПриИзмененииНаСервере(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Документы.СписаниеСРасчетногоСчета.ВидНалоговогоОбязательстваПриИзменении(Объект);
	
	ЗаполнитьПорядокОтраженияУплатыНалогаНаСервере(Форма);
	Если Форма.ПрименениеУСН И НЕ Форма.ПрименениеУСНДоходы Тогда
		ЗаполнитьОтражениеВУСННаСервере(Форма, Истина, Истина);
	КонецЕсли;
	
	ПерезаполнитьСтатьюДДС(Форма, Истина);
	
	СформироватьНазначениеПлатежаСервер(Форма);
	
	СписаниеСРасчетногоСчетаФормыКлиентСервер.УправлениеФормой(Форма);
	
КонецПроцедуры

// Заполняет список выбора вида налогового обязательства
//
// Параметры:
//   Форма - УправляемаяФорма
//   ДобавитьТекущееЗначениеПриОтсутствии - Булево - Истина, если при отсутствии в списке текущего значения реквизита,
//     необходимо его добавить. Например, при создании формы или в случаях, когда пользователь явно указал
//     некорректный вид обязательства.
//
Процедура ЗаполнитьВидНалоговогоОбязательстваНаСервере(Форма, ДобавитьТекущееЗначениеПриОтсутствии = Ложь)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Объект.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		Возврат;
	КонецЕсли;
	
	СписокВидовНалоговыхОбязательств = Перечисления.ВидыПлатежейВГосБюджет.СписокВидовНалоговыхОбязательств(Объект.Налог, Объект.Дата);
	Если СписокВидовНалоговыхОбязательств.НайтиПоЗначению(Объект.ВидНалоговогоОбязательства) = Неопределено Тогда
		Если ДобавитьТекущееЗначениеПриОтсутствии Тогда
			СписокВидовНалоговыхОбязательств.Добавить(Объект.ВидНалоговогоОбязательства);
		ИначеЕсли СписокВидовНалоговыхОбязательств.Количество() > 0 Тогда
			Объект.ВидНалоговогоОбязательства = СписокВидовНалоговыхОбязательств[0].Значение;
			ВидНалоговогоОбязательстваПриИзмененииНаСервере(Форма);
		КонецЕсли;
	КонецЕсли;
	
	СписаниеСРасчетногоСчетаФормыКлиентСервер.ЗаполнитьСписокВыбора(Элементы.ВидНалоговогоОбязательства, СписокВидовНалоговыхОбязательств);
	
КонецПроцедуры

Процедура ЗаполнитьПорядокОтраженияУплатыНалогаНаСервере(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Объект.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		Возврат;
	КонецЕсли;
	
	// Представление порядка отражения в БУ
	Если Объект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента Тогда
		ТаблицаНалоговыйАгентНДС = Объект.НалоговыйАгентНДС.Выгрузить();
		СтруктураОтраженияБУ = Новый Структура;
		СтруктураОтраженияБУ.Вставить("Представление", ОбщегоНазначенияБПКлиентСервер.ПредставлениеНезаполненногоЗначения());
		СтруктураОтраженияБУ.Вставить("Заполнен", Ложь);
		КоличествоСтрок = ТаблицаНалоговыйАгентНДС.Количество();
		Если КоличествоСтрок > 1 Тогда
			ШаблонПредставления = НСтр("ru='68.32, [ПервыйКонтрагент] и еще [КоличествоСтрок]'"); 
			Представление = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
				ШаблонПредставления,
				Новый Структура("ПервыйКонтрагент,КоличествоСтрок",
				ТаблицаНалоговыйАгентНДС[0].Контрагент,
				КоличествоСтрок - 1));
			СтруктураОтраженияБУ.Вставить("Представление", Представление);
			СтруктураОтраженияБУ.Вставить("Заполнен", Истина);
		ИначеЕсли КоличествоСтрок > 0 Тогда
			ШаблонПредставления = НСтр("ru='68.32, [ПервыйКонтрагент]'"); 
			Представление = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
				ШаблонПредставления,
				Новый Структура("ПервыйКонтрагент",
				ТаблицаНалоговыйАгентНДС[0].Контрагент));
			СтруктураОтраженияБУ.Вставить("Представление", Представление);
			СтруктураОтраженияБУ.Вставить("Заполнен", Истина);
		Иначе
			Представление = НСтр("ru='68.32, <...>'"); 
			СтруктураОтраженияБУ.Вставить("Представление", Представление);
			СтруктураОтраженияБУ.Вставить("Заполнен", Ложь);
		КонецЕсли;
	Иначе
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Период", Объект.Дата);
		СтруктураПараметров.Вставить("СчетУчета", Объект.СчетУчетаРасчетовСКонтрагентом);
		Для НомерСубконто = 1 По 3 Цикл
			СтруктураПараметров.Вставить("Субконто" + НомерСубконто, Объект["СубконтоДт" + НомерСубконто]);
		КонецЦикла;
		СтруктураОтраженияБУ = ПлатежиВБюджетПереопределяемый.ПредставлениеПорядкаОтраженияБУ(СтруктураПараметров);
	КонецЕсли;
	
	Форма.ПорядокОтраженияБУ         = СтруктураОтраженияБУ.Представление;
	Форма.ПорядокОтраженияБУЗаполнен = СтруктураОтраженияБУ.Заполнен;
	
	Элементы.ПорядокОтраженияБУ.ПропускатьПриВводе = СтруктураОтраженияБУ.Заполнен;
	
КонецПроцедуры

Процедура НалогПриИзмененииНаСервере(Форма, ПричиныИзменения, СтрокаПоискаПоКБК) Экспорт
	
	Объект = Форма.Объект;
	
	АктуализированыРеквизитыПлатежаВБюджет = Ложь;
	Если НЕ Справочники.ВидыНалоговИПлатежейВБюджет.РеквизитыАктуальны(Объект.Налог, Объект.Дата) Тогда
		Справочники.ВидыНалоговИПлатежейВБюджет.ОбновитьПоставляемыеДанныеИзКлассификатора();
		АктуализированыРеквизитыПлатежаВБюджет = Истина;
	КонецЕсли;
	
	ПричиныИзменения.Добавить("Налог");
	
	РеквизитыНалога = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Налог, "ВидНалога,СчетУчета");
	Форма.ВидНалога = РеквизитыНалога.ВидНалога;
	
	Объект.ВидНалоговогоОбязательства = Справочники.ВидыНалоговИПлатежейВБюджет.ВидНалоговогоОбязательстваПоКБК(
		СтрокаПоискаПоКБК, Объект.Дата, Форма.ВидНалога);
	ЗаполнитьВидНалоговогоОбязательстваНаСервере(Форма);
	
	Если ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоФиксированныеВзносы(Форма.ВидНалога) Тогда
		Объект.НалоговыйПериод = НачалоГода(Объект.Дата);
	Иначе
		Объект.НалоговыйПериод = НачалоМесяца(ДобавитьМесяц(Объект.Дата, -1));
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "НалоговыйПериодСтрока", Формат(Объект.НалоговыйПериод, "ДФ='MMMM yyyy'"));
	
	Если Объект.Налог <> Справочники.ВидыНалоговИПлатежейВБюджет.ПрочиеНалогиИСборы Тогда
		ТекущийПолучатель = Объект.Контрагент;
		Получатель = ДанныеГосударственныхОрганов.АдминистраторНалогаОрганизации(Объект.Налог, Объект.Организация, Объект.Дата);
		Если ЗначениеЗаполнено(Получатель) И ТекущийПолучатель <> Получатель Тогда
			Объект.Контрагент = Получатель;
			КонтрагентОбработатьИзменение(Форма, ПричиныИзменения);
		КонецЕсли;
	КонецЕсли;
	
	Форма.ЭтоУплатаНДФЛ = ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоНДФЛ(Форма.ВидНалога);
	Если НЕ Форма.ЭтоУплатаНДФЛ Тогда
		Объект.ПеречислениеНДФЛ.Очистить();
	КонецЕсли;
	
	Если РеквизитыНалога.СчетУчета <> ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента Тогда
		Объект.НалоговыйАгентНДС.Очистить();
	КонецЕсли;
	
	ЗаполнитьСчетаУчета(Форма, "Налог", ПричиныИзменения);
	
	ЗаполнитьПорядокОтраженияУплатыНалогаНаСервере(Форма);
	Если Форма.ПрименениеУСН И НЕ Форма.ПрименениеУСНДоходы Тогда
		ЗаполнитьОтражениеВУСННаСервере(Форма, Истина, Истина);
	КонецЕсли;
	
	ПерезаполнитьСтатьюДДС(Форма);
	
	СформироватьНазначениеПлатежаСервер(Форма, Ложь, "Налог", ПричиныИзменения);
	
	СписаниеСРасчетногоСчетаФормыКлиентСервер.УправлениеФормой(Форма);
	
КонецПроцедуры

Процедура ПорядокОтраженияУплатыНалогаПриИзмененииНаСервере(Форма) Экспорт
	
	Форма.Объект.ВидНалоговогоОбязательства = Документы.СписаниеСРасчетногоСчета.ВидНалоговогоОбязательстваПоАналитикеПлатежа(Форма.Объект);
	
	ЗаполнитьВидНалоговогоОбязательстваНаСервере(Форма, Истина);
	ЗаполнитьПорядокОтраженияУплатыНалогаНаСервере(Форма);
	Если Форма.ПрименениеУСН И НЕ Форма.ПрименениеУСНДоходы Тогда
		ЗаполнитьОтражениеВУСННаСервере(Форма, Истина, Истина);
	КонецЕсли;
	
	СформироватьНазначениеПлатежаСервер(Форма);
	
	СписаниеСРасчетногоСчетаФормыКлиентСервер.УправлениеФормой(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область УСН

Процедура ЗаполнитьОтражениеВУСННаСервере(Форма, ЗаполнитьСуммы = Истина, ЗаполнитьСодержание = Ложь) Экспорт
	
	Объект = Форма.Объект;
	
	ПараметрыУСН = УчетУСНКлиентСервер.ПараметрыФормыДокументаДляУСН(Форма);
	
	Если ЗаполнитьСуммы Тогда
		НалоговыйУчетУСН.ЗаполнитьОтражениеДокументаВУСН(Объект, ПараметрыУСН);
	КонецЕсли;
	
	Если ЗаполнитьСодержание И УчетУСН.СодержаниеУСНРедактируетсяПользователем(Объект) Тогда
		НалоговыйУчетУСН.ЗаполнитьОтображаемоеСодержаниеКУДиР(Объект, ПараметрыУСН);
	КонецЕсли;
	
КонецПроцедуры

Процедура УправлениеЭлементамиОтраженияВУСНСервер(Форма) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	// ТЧ "Расшифровка платежа"
	ПрименениеУСНДоходыРасходы = Форма.ПрименениеУСН И НЕ Форма.ПрименениеУСНДоходы;
	ЕстьПрочиеРасчеты = УчетУСН.ЕстьПрочиеРасчетыПоРасходам(Объект.ВидОперации);
	
	Элементы.РасшифровкаПлатежаРасходыУСН.Видимость = ПрименениеУСНДоходыРасходы И ЕстьПрочиеРасчеты;
	Элементы.РасшифровкаПлатежаНДСУСН.Видимость     = ПрименениеУСНДоходыРасходы
		И (Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц);
	Элементы.РасшифровкаПлатежаРаспределятьРасходыУСН.Видимость = ПрименениеУСНДоходыРасходы
		И ЕстьПрочиеРасчеты И Форма.ПлательщикЕНВД;
	
	// Страница "Прочее"
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		Элементы.НДСУСН.Видимость = Ложь;
		Элементы.РаспределятьРасходУСН.Видимость = Ложь;
		Элементы.ГруппаОтражениеВУСН.Видимость   = Форма.ПрименениеУСН И НЕ Форма.ПрименениеУСНДоходы;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.КомиссияБанка Тогда
		Элементы.НДСУСН.Видимость = Истина;
		Элементы.РаспределятьРасходУСН.Видимость = Форма.ПлательщикЕНВД;
		Элементы.ГруппаОтражениеВУСН.Видимость   = Форма.ПрименениеУСН И НЕ Форма.ПрименениеУСНДоходы;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеСотрудникуПоДоговоруПодряда Тогда
		Элементы.НДСУСН.Видимость = Ложь;
		Элементы.РаспределятьРасходУСН.Видимость = Ложь;
		Элементы.ГруппаОтражениеВУСН.Видимость   = Форма.ПрименениеУСН И НЕ Форма.ПрименениеУСНДоходы;
	КонецЕсли;
	
	Если ПрименениеУСНДоходыРасходы Тогда
		УстановитьЗаголовкиКолонокУСН(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЗаголовкиКолонокУСН(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если НЕ Форма.ПрименениеУСН И НЕ УчетУСН.ЕстьПрочиеРасчетыПоРасходам(Объект.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаголовокРасходыУСН = НСтр("ru = 'Расходы УСН'");
	Если Форма.ОплатаВВалюте Тогда
		ЗаголовокРасходыУСН = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Расходы УСН, %1'"), Форма.ВалютаРегламентированногоУчета);
	КонецЕсли;
	
	Элементы.РасшифровкаПлатежаРасходыУСН.Заголовок = ЗаголовокРасходыУСН;
	
КонецПроцедуры

#КонецОбласти

#Область СчетаУчета

Процедура ЗаполнитьСчетаУчета(Форма, ПричинаИзменения, ПричиныИзменения)
	
	Объект = Форма.Объект;
	
	Если СчетаУчетаВДокументахКлиентСервер.МожноНачатьЗаполнениеСчетовУчета(ПричинаИзменения, ПричиныИзменения) Тогда
		
		ПараметрыЗаполнения = СписаниеСРасчетногоСчетаФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(ПричиныИзменения, Объект);
		
		Если ПричиныИзменения.Найти("СчетБанк") <> Неопределено Тогда
			// Если видны счета, то при изменении счета банка может быть изменен банковский счет организации.
			// А изменение банковского счета организации в общем случае приводит к установке счета банка.
			// В конкретном случае этого нужно избежать.
			ПараметрыЗаполнения.КЗаполнению.Удалить("СчетБанк");
		КонецЕсли;
		
		Если Форма.ПользовательУправляетСчетамиУчета Тогда
			
			// В этом режиме только автоматическое изменение валюты (запрет оформления в иностранной валюте)
			// должен приводить к смене счета.
			
			Если СписаниеСРасчетногоСчетаФормыКлиентСервер.ДокументМожетБытьОформленВВалюте(Объект.ВидОперации) Тогда
				ПараметрыЗаполнения.КЗаполнению.Удалить("СчетБанк");
			КонецЕсли;
			
		КонецЕсли;
		
		СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(ПараметрыЗаполнения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВидимостьСчетовУчета(Форма) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ЭлементыСчетов = Новый Массив();
	ЭлементыСчетов.Добавить("РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом");
	ЭлементыСчетов.Добавить("РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам");
	ЭлементыСчетов.Добавить("ГруппаЗаголовкиСубконтоЗадержкаЗарплаты");
	ЭлементыСчетов.Добавить("ГруппаПоляСчетСубконтоЗадержкаЗарплаты");
	ЭлементыСчетов.Добавить("СчетУчетаРасчетовСКонтрагентомПеревод");
	ЭлементыСчетов.Добавить("ПодразделениеДтПеревод");
	
	СчетаУчетаВДокументах.УстановитьВидимостьСчетовУчета(Элементы, ЭлементыСчетов);
	
	Если НЕ СписаниеСРасчетногоСчетаФормыКлиентСервер.ФормаРасшифровкиПлатежа(Форма) Тогда
		Элементы.СчетБанк.Видимость = СчетБанкаВиден(Форма);
		Элементы.СчетУчетаРасчетовСКонтрагентомПеревод.Видимость = НЕ УчетнаяПолитика.ИспользоватьПереводыВПутиПриПеремещенияДенежныхСредств(Объект.Организация, Объект.Дата);
		Элементы.СтатьяДвиженияДенежныхСредствСнятиеНаличных.Видимость = УчетнаяПолитика.ИспользоватьПереводыВПутиПриПеремещенияДенежныхСредств(Объект.Организация, Объект.Дата);
	КонецЕсли;
	
	// Вне зависимости от настроек пользователя для отдельных видов операций некоторые счета видны
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам Тогда
		Элементы.РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом.Видимость = Истина;
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗайма
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратКредита
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаКонтрагенту
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц Тогда
		Элементы.РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Функция СчетБанкаВиден(Форма) Экспорт
	
	Используется57Счет = УчетнаяПолитика.ИспользоватьПереводыВПутиПриПеремещенияДенежныхСредств(Форма.Объект.Организация, Форма.Объект.Дата);
	
	Если НЕ Используется57Счет Тогда
		Если Форма.Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.СнятиеНаличных Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета();
	
КонецФункции

#КонецОбласти

#Область УсловноеОформление

Процедура УстановитьУсловноеОформление(Форма) Экспорт
	
	Форма.УсловноеОформление.Элементы.Очистить();
	
	УстановитьУсловноеОформлениеШапка(Форма);
	
	УстановитьУсловноеОформлениеРасшифровкаПлатежа(Форма);
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеШапка(Форма)
	
	УсловноеОформление = Форма.УсловноеОформление;
	
	// ПорядокОтраженияБУ
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПорядокОтраженияБУ");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ПорядокОтраженияБУЗаполнен", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);
	
	// Контрагент
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Контрагент");
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц);
	
	Если Форма.УчетЗарплатыИКадровВоВнешнейПрограмме И Форма.ВедетсяУчетРасчетовПоЗарплатеСводно Тогда
		СписокЗначений.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"Объект.ВидОперации",
		ВидСравненияКомпоновкиДанных.ВСписке,
		СписокЗначений);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// РегистрацияВНалоговомОргане
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РегистрацияВНалоговомОргане");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"НалогЗаОбособленноеПодразделение", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеРасшифровкаПлатежа(Форма) Экспорт
	
	// Условное оформление применяется к колонкам таблицы, для однострочной формы не требуется.
	Если Форма.Элементы.Найти("РасшифровкаПлатежа") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УсловноеОформление = Форма.УсловноеОформление;
	
	Если СписаниеСРасчетногоСчетаФормыКлиентСервер.ФормаРасшифровкиПлатежа(Форма) Тогда
		НачалоПутиКДаннымТЧ = "";
	Иначе
		НачалоПутиКДаннымТЧ = "Объект.";
	КонецЕсли;
	
	// Реквизиты не используются при расчетах по кредитам и займам, а также прочих расчетах с контрагентами.
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСпособПогашенияЗадолженности");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСделка");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаНадписьКурс");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаНадписьСуммаВал");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаКурсВзаиморасчетов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСуммаВзаиморасчетов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСтавкаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСуммаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам");
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗайма);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратКредита);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаКонтрагенту);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "ВидОперации",
		ВидСравненияКомпоновкиДанных.ВСписке,
		СписокЗначений);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Реквизиты используются только при возврате займа.
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаВидПлатежаПоКредитамЗаймам");
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗайма);
	СписокЗначений.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратКредита);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "ВидОперации",
		ВидСравненияКомпоновкиДанных.НеВСписке,
		СписокЗначений);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Реквизиты используются только при расчетах в у.е.
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаНадписьКурс");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаНадписьСуммаВал");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаКурсВзаиморасчетов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСуммаВзаиморасчетов");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ЕстьРасчетыВУсловныхЕдиницах",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// РасшифровкаПлатежаСделка
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСделка");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.СпособПогашенияЗадолженности",
		ВидСравненияКомпоновкиДанных.НеРавно,
		Перечисления.СпособыПогашенияЗадолженности.ПоДокументу);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.СпособПогашенияЗадолженности",
		ВидСравненияКомпоновкиДанных.Равно,
		Перечисления.СпособыПогашенияЗадолженности.НеПогашать);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "ВидОперации",
		ВидСравненияКомпоновкиДанных.Равно,
		Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Нет>'"));
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.СпособПогашенияЗадолженности",
		ВидСравненияКомпоновкиДанных.Равно,
		Перечисления.СпособыПогашенияЗадолженности.НеПогашать);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "ВидОперации",
		ВидСравненияКомпоновкиДанных.Равно,
		Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Нет>'"));
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// РасшифровкаПлатежаКурсВзаиморасчетов, РасшифровкаПлатежаСуммаВзаиморасчетов
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаКурсВзаиморасчетов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСуммаВзаиморасчетов");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// РасшифровкаПлатежаСделка
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСделка");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.Сделка",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<документ>'"));
	
	// РасшифровкаПлатежаСчетНаОплату
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСчетНаОплату");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "ВидОперации",
		ВидСравненияКомпоновкиДанных.НеРавно,
		Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// РасшифровкаПлатежаСпособПогашенияЗадолженности
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСпособПогашенияЗадолженности");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.СпособПогашенияЗадолженности",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<способ погашения>'"));
	
	// РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Статья движения ден. средств>'"));
	
	// РасшифровкаПлатежаДоговорКонтрагента
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаДоговорКонтрагента");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.ДоговорКонтрагента",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Договор>'"));
	
	// РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Счет расчетов>'"));
	
	// РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Счет авансов>'"));
	
	// РасшифровкаПлатежаРасходыУСН
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаРасходыУСН");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ПрименениеУСН",
		ВидСравненияКомпоновкиДанных.Равно,
		Истина);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ПрименениеУСНДоходы",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.РасходыУСН", ВидСравненияКомпоновкиДанных.Равно, 0);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Не принимаются>'"));
	
	// РасшифровкаПлатежаРаспределятьРасходыУСН
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаРаспределятьРасходыУСН");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ПрименениеУСН",
		ВидСравненияКомпоновкиДанных.Равно,
		Истина);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"ПрименениеУСНДоходы",
		ВидСравненияКомпоновкиДанных.Равно,
		Ложь);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		НачалоПутиКДаннымТЧ + "РасшифровкаПлатежа.РасходыУСН",
		ВидСравненияКомпоновкиДанных.Равно,
		0);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
КонецПроцедуры

Функция ОплаченныеСчета(Форма)
	
	Объект = Форма.Объект;
	РасшифровкаПлатежа = Объект.РасшифровкаПлатежа;
	
	ОплаченныеСчета = Новый Массив;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику Тогда
		
		УникальныеЗначения = Новый Соответствие;
		
		Если СписаниеСРасчетногоСчетаФормыКлиентСервер.ФормаДокументаОднострочная(Форма)
			И Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
			СтрокаРасшифровки = СписаниеСРасчетногоСчетаФормыКлиентСервер.ТекущиеДанныеРасшифровкаПлатежа(Форма,1);
			Если ЗначениеЗаполнено(СтрокаРасшифровки.СчетНаОплату) Тогда
				ОплаченныеСчета.Добавить(СтрокаРасшифровки.СчетНаОплату);
			КонецЕсли;
		Иначе
			Для каждого СтрокаРасшифровки Из РасшифровкаПлатежа Цикл
				СчетНаОплату = СтрокаРасшифровки.СчетНаОплату;
				Если ЗначениеЗаполнено(СчетНаОплату) И УникальныеЗначения[СчетНаОплату] = Неопределено Тогда
					ОплаченныеСчета.Добавить(СчетНаОплату);
					УникальныеЗначения.Вставить(СчетНаОплату, Истина);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОплаченныеСчета;
	
КонецФункции

Функция ПоместитьРасшифровкуНалоговыйАгентНДСВХранилище(Объект) Экспорт
	
	ТаблицаНалоговыйАгентНДС = Объект.НалоговыйАгентНДС.Выгрузить();
	АдресТаблицыНалоговыйАгентНДСВХранилище = ПоместитьВоВременноеХранилище(
		ТаблицаНалоговыйАгентНДС, Новый УникальныйИдентификатор());
	
	Возврат АдресТаблицыНалоговыйАгентНДСВХранилище;
	
КонецФункции

#КонецОбласти
