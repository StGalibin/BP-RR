#Область ПрограммныйИнтерфейс

// Возвращает вмененный доход по всем видам деятельности
//
// Параметры:
//  Организация - СправочникСсылка.Организации
//  НачалоПериода - Дата - начало периода
//  КонецПериода - Дата - конец периода
//  СообщатьОбОшибках - Булево - Истина, если необходимо выводить сообщения об ошибках
//
Функция ВмененныйДоход(Организация, НачалоПериода, КонецПериода, СообщатьОбОшибках = Истина) Экспорт
	
	ВмененныйДоход = 0;
	
	Если НачалоПериода > КонецПериода Тогда
		Возврат ВмененныйДоход;
	КонецЕсли;
	
	Период = КонецКвартала(НачалоПериода);
	Пока Период <= КонецКвартала(КонецПериода) Цикл
		
		ТаблицаВидовДейтельностей = ПоказателиВидовДеятельности(Период, Организация);
		Если ТаблицаВидовДейтельностей <> Неопределено Тогда
			Для Каждого ВидДеятельности Из ТаблицаВидовДейтельностей Цикл
				
				ПараметрыРасчетаСуммыНалога = УчетЕНВДКлиентСервер.НовыеПараметрыРасчетаСуммыНалога();
				ЗаполнитьЗначенияСвойств(ПараметрыРасчетаСуммыНалога, ВидДеятельности);
				ПараметрыРасчетаСуммыНалога.Период = Период;
				
				ВмененныйДоход = ВмененныйДоход + УчетЕНВДКлиентСервер.ВмененныйДоходЗаКвартал(ПараметрыРасчетаСуммыНалога);
				
			КонецЦикла;
		КонецЕсли;
		
		Период = КонецКвартала(ДобавитьМесяц(Период, 3)); // Следующий квартал
		
	КонецЦикла;
	
	Возврат ВмененныйДоход;
	
КонецФункции

// Возвращает описание действий Помощника по ЕНВД
//
// Параметры:
//   Организация - СправочникСсылка.Организации
//   РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане
//   СпособОплаты - ПеречислениеСсылка.СпособыУплатыНалогов
//   Период - Дата - налоговый период
//   ТекстОшибки - Строка - возвращаемый параметр
//
// Возвращаемое значение:
//   Структура
//     * Декларация - Структура, Неопределено
//     * ПлатежПоДаннымДекларации - Структура, Неопределено
//
Функция ОписанияДействийПомощника(Организация, РегистрацияВНалоговомОргане, СпособОплаты, Период, ТекстОшибки = "") Экспорт
	
	ОписанияДействий = Новый Структура("Декларация, ПлатежПоДаннымДекларации");
	
	ВидНалога = Перечисления.ВидыНалогов.ЕНВД;
	
	Порядок = РегистрыСведений.ЗадачиБухгалтера.ПорядокПредоставленияОтчетаУплатыНалогаЗаПериод(
		Организация, ВидНалога, КонецКвартала(Период));
	
	Если Порядок <> Неопределено Тогда
		
		Если УчетнаяПолитика.ПлательщикЕНВД(Организация, Период) Тогда
			ОписанияДействий.Декларация = ОписаниеДействияДекларация(
				Организация, РегистрацияВНалоговомОргане, Порядок.Отчет);
				
			ОписанияДействий.ПлатежПоДаннымДекларации = ОписаниеДействияПлатежПоДаннымДекларации(
				Организация, РегистрацияВНалоговомОргане, Порядок.Уплата, СпособОплаты);
		Иначе
			ТекстОшибки = НСтр("ru = 'Организация не является плательщиком ЕНВД. Измените настройки системы налогообложения.'");
		КонецЕсли;
		
	Иначе
		
		ТекстОшибки = НСтр("ru = 'Порядок уплаты налога не определен'");
		
	КонецЕсли;
	
	Возврат ОписанияДействий;
	
КонецФункции

// Возвращает таблицу видов деятельности ЕНВД
//
// Параметры:
//   Период - Дата - налоговый период
//   Организация - СправочникСсылка.Организации - головная организация, плательщик ЕНВД
//   РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане - отбор по налоговому органу
//
// Возвращаемое значение:
//   ТаблицаЗначений, Неопределено
//
Функция ВидыДеятельности(Организация, РегистрацияВНалоговомОргане, ВидыДеятельности = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СписокОрганизаций = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсяОрганизация(Организация);
	
	ДоступныеОрганизации = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Ложь);
	Для Индекс = 0 По СписокОрганизаций.ВГраница() Цикл
		Если ДоступныеОрганизации.Найти(СписокОрганизаций[Индекс]) = Неопределено Тогда
			СписокОрганизаций.Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;
	
	Если СписокОрганизаций.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВидыДеятельности.Ссылка КАК ВидДеятельности,
	|	ВидыДеятельности.Наименование КАК Наименование,
	|	ВидыДеятельности.Подразделение КАК Подразделение,
	|	ВидыДеятельности.Адрес КАК Адрес,
	|	ВидыДеятельности.АдресСтрокой КАК АдресСтрокой,
	|	ВидыДеятельности.КодПоОКТМО КАК КодПоОКТМО,
	|	ЕСТЬNULL(КлассификаторВидовПредпринимательскойДеятельности.РегистрацияПоМестуНахожденияОрганизации, ЛОЖЬ) КАК РегистрацияПоМестуНахожденияОрганизации,
	|	ЕСТЬNULL(КлассификаторВидовПредпринимательскойДеятельности.Код, """") КАК Код,
	|	ВидыДеятельности.ДатаНачала КАК ДатаНачала,
	|	ВидыДеятельности.ДатаПрекращения КАК ДатаПрекращения
	|ИЗ
	|	Справочник.ВидыДеятельностиЕНВД КАК ВидыДеятельности
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторВидовПредпринимательскойДеятельностиЕНВД КАК КлассификаторВидовПредпринимательскойДеятельности
	|		ПО ВидыДеятельности.КодВидаДеятельности = КлассификаторВидовПредпринимательскойДеятельности.Ссылка
	|ГДЕ
	|	ВидыДеятельности.Владелец В(&СписокОрганизаций)
	|	И &УсловиеПоРегистрацииВНалоговомОргане
	|	И &УсловиеПоВидамДеятельности
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлассификаторВидовПредпринимательскойДеятельности.Код,
	|	ВидыДеятельности.Наименование";
	
	// УсловиеПоРегистрацииВНалоговомОргане
	Если ЗначениеЗаполнено(РегистрацияВНалоговомОргане) Тогда
		
		РегистрацииВНалоговыхОрганах = Новый Массив;
		РегистрацииВНалоговыхОрганах.Добавить(Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка());
		РегистрацииВНалоговыхОрганах.Добавить(РегистрацияВНалоговомОргане);
		
		Запрос.УстановитьПараметр("РегистрацииВНалоговыхОрганах", РегистрацииВНалоговыхОрганах);
		
		УсловиеПоРегистрацииВНалоговомОргане = "ВидыДеятельности.РегистрацияВНалоговомОргане В(&РегистрацииВНалоговыхОрганах)";
		
	Иначе
		УсловиеПоРегистрацииВНалоговомОргане = "ИСТИНА"
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоРегистрацииВНалоговомОргане", УсловиеПоРегистрацииВНалоговомОргане);
	
	// УсловиеПоВидамДеятельности
	Если ЗначениеЗаполнено(ВидыДеятельности) Тогда
		Запрос.УстановитьПараметр("ВидыДеятельности", ВидыДеятельности);
		УсловиеПоВидамДеятельности = "ВидыДеятельности.Ссылка В(&ВидыДеятельности)";
	Иначе
		УсловиеПоВидамДеятельности = "НЕ ВидыДеятельности.ПометкаУдаления"
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоВидамДеятельности", УсловиеПоВидамДеятельности);
	
	Запрос.Текст = ТекстЗапроса;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВидыДеятельности = Запрос.Выполнить().Выгрузить();
	
	ЗаполнитьАдресПриРегистрацияПоМестуНахожденияОрганизации(Организация, ВидыДеятельности);
	
	Возврат ВидыДеятельности;
	
КонецФункции

// Возвращает таблицу видов деятельности ЕНВД с показателями для расчета налога
//
// Параметры:
//   Период - Дата - налоговый период
//   Организация - СправочникСсылка.Организации - головная организация, плательщик ЕНВД
//   РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане - отбор по налоговому органу
//
// Возвращаемое значение:
//   ТаблицаЗначений, Неопределено
//     * ВидДеятельности - СправочникСсылка.ВидыДеятельностиЕНВД
//     * Код - код вида деятельности
//     * Наименование - Строка - наименование вида деятельности
//     * Подразделение - СправочникСсылка.ПодразделенияОрганизаций
//     * Адрес - Строка - значения контактной информации
//     * АдресСтрокой - Строка (200) - представление адреса
//     * КодПоОКТМО - Строка (11)
//     * БазоваяДоходность - Число (10,0) - базовая доходность
//     * ИмяФизическогоПоказателя - имя физического показателя
//     * ФизическийПоказатель1 - Число (10,0) - значение физического показателя в  1-й месяц квартала
//     * ФизическийПоказатель2 - Число (10,0) - значение физического показателя во 2-й месяц квартала
//     * ФизическийПоказатель3 - Число (10,0) - значение физического показателя в  3-й месяц квартала
//     * КорректирующийКоэффициент - Число (4,3) - корректирующий коэффициент К2
//     * НалоговаяСтавка - Число (3,1) - налоговая ставка
//     * ДатаНачала - Дата - дата начала деятельности
//     * ДатаПрекращения - Дата - дата прекращения деятельности
//
Функция ПоказателиВидовДеятельности(Период, Организация, РегистрацияВНалоговомОргане = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Период) Или Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не УчетнаяПолитика.ПлательщикЕНВД(Организация, Период) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СписокОрганизаций = Новый Массив; // Все подразделения организации с учетом RLS
	
	ВсяОрганизация = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсяОрганизация(Организация);
	ДоступныеОрганизации = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Ложь);
	
	Для Каждого ЧастьОрганизации Из ВсяОрганизация Цикл
		Если ДоступныеОрганизации.Найти(ЧастьОрганизации) <> Неопределено Тогда
			СписокОрганизаций.Добавить(ЧастьОрганизации);
		КонецЕсли;
	КонецЦикла;
	
	Если СписокОрганизаций.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НачалоКвартала = НачалоКвартала(Период);
	КонецКвартала  = НачалоДня(КонецКвартала(Период));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	Запрос.УстановитьПараметр("НачалоКвартала", НачалоКвартала);
	Запрос.УстановитьПараметр("КонецКвартала", КонецКвартала);
	Для Индекс = 0 По 2 Цикл
		Запрос.УстановитьПараметр(СтрШаблон("Месяц%1", Индекс + 1), ДобавитьМесяц(НачалоКвартала, Индекс));
	КонецЦикла;
	
	Запрос.УстановитьПараметр("КорректирующийКоэффициентПоУмолчанию", УчетЕНВДКлиентСервер.КорректирующийКоэффициентПоУмолчанию());
	Запрос.УстановитьПараметр("НалоговаяСтавкаПоУмолчанию", УчетЕНВДКлиентСервер.НалоговаяСтавкаПоУмолчанию());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВидыДеятельности.Ссылка КАК ВидДеятельности,
	|	ВидыДеятельности.Владелец КАК Организация,
	|	ВидыДеятельности.Наименование КАК Наименование,
	|	ВидыДеятельности.КодВидаДеятельности КАК КодВидаДеятельности,
	|	ВидыДеятельности.Подразделение КАК Подразделение,
	|	ВидыДеятельности.Адрес КАК Адрес,
	|	ВидыДеятельности.АдресСтрокой КАК АдресСтрокой,
	|	ВидыДеятельности.КодПоОКТМО КАК КодПоОКТМО,
	|	ВидыДеятельности.РегистрацияВНалоговомОргане,
	|	ВидыДеятельности.ДатаНачала КАК ДатаНачала,
	|	ВидыДеятельности.ДатаПрекращения КАК ДатаПрекращения
	|ПОМЕСТИТЬ ВТ_ВидыДеятельности
	|ИЗ
	|	Справочник.ВидыДеятельностиЕНВД КАК ВидыДеятельности
	|ГДЕ
	|	НЕ ВидыДеятельности.ПометкаУдаления
	|	И ВидыДеятельности.Владелец В(&СписокОрганизаций)
	|	И (ВидыДеятельности.ДатаПрекращения > &НачалоКвартала
	|			ИЛИ ВидыДеятельности.ДатаПрекращения = &ПустаяДата)
	|	И (ВидыДеятельности.ДатаНачала <= &КонецКвартала
	|			ИЛИ ВидыДеятельности.ДатаНачала = &ПустаяДата)
	|	И &УсловиеПоРегистрацииВНалоговомОргане
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ВидДеятельности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Организация КАК Организация,
	|	ВложенныйЗапрос.ВидДеятельности КАК ВидДеятельности,
	|	СУММА(ВложенныйЗапрос.ФизическийПоказатель1) КАК ФизическийПоказатель1,
	|	СУММА(ВложенныйЗапрос.ФизическийПоказатель2) КАК ФизическийПоказатель2,
	|	СУММА(ВложенныйЗапрос.ФизическийПоказатель3) КАК ФизическийПоказатель3
	|ПОМЕСТИТЬ ВТ_ФизическиеПоказатели
	|ИЗ
	|	(ВЫБРАТЬ
	|		ФизическиеПоказатели.Организация КАК Организация,
	|		ФизическиеПоказатели.ВидДеятельности КАК ВидДеятельности,
	|		ФизическиеПоказатели.ФизическийПоказатель КАК ФизическийПоказатель1,
	|		0 КАК ФизическийПоказатель2,
	|		0 КАК ФизическийПоказатель3
	|	ИЗ
	|		РегистрСведений.ФизическиеПоказателиЕНВД.СрезПоследних(
	|				&Месяц1,
	|				Организация В (&СписокОрганизаций)
	|					И ВидДеятельности В
	|						(ВЫБРАТЬ
	|							ВТ_ВидыДеятельности.ВидДеятельности
	|						ИЗ
	|							ВТ_ВидыДеятельности)) КАК ФизическиеПоказатели
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ФизическиеПоказатели.Организация,
	|		ФизическиеПоказатели.ВидДеятельности,
	|		0,
	|		ФизическиеПоказатели.ФизическийПоказатель,
	|		0
	|	ИЗ
	|		РегистрСведений.ФизическиеПоказателиЕНВД.СрезПоследних(
	|				&Месяц2,
	|				Организация В (&СписокОрганизаций)
	|					И ВидДеятельности В
	|						(ВЫБРАТЬ
	|							ВТ_ВидыДеятельности.ВидДеятельности
	|						ИЗ
	|							ВТ_ВидыДеятельности)) КАК ФизическиеПоказатели
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ФизическиеПоказатели.Организация,
	|		ФизическиеПоказатели.ВидДеятельности,
	|		0,
	|		0,
	|		ФизическиеПоказатели.ФизическийПоказатель
	|	ИЗ
	|		РегистрСведений.ФизическиеПоказателиЕНВД.СрезПоследних(
	|				&Месяц3,
	|				Организация В (&СписокОрганизаций)
	|					И ВидДеятельности В
	|						(ВЫБРАТЬ
	|							ВТ_ВидыДеятельности.ВидДеятельности
	|						ИЗ
	|							ВТ_ВидыДеятельности)) КАК ФизическиеПоказатели) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Организация,
	|	ВложенныйЗапрос.ВидДеятельности
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ВидДеятельности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегиональныеОсобенности.Организация КАК Организация,
	|	РегиональныеОсобенности.ВидДеятельности КАК ВидДеятельности,
	|	РегиональныеОсобенности.КорректирующийКоэффициент,
	|	РегиональныеОсобенности.НалоговаяСтавка
	|ПОМЕСТИТЬ ВТ_РегиональныеОсобенности
	|ИЗ
	|	РегистрСведений.РегиональныеОсобенностиЕНВД.СрезПоследних(
	|			&НачалоКвартала,
	|			Организация В (&СписокОрганизаций)
	|				И ВидДеятельности В
	|					(ВЫБРАТЬ
	|						ВТ_ВидыДеятельности.ВидДеятельности
	|					ИЗ
	|						ВТ_ВидыДеятельности)) КАК РегиональныеОсобенности
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ВидДеятельности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыДеятельности.ВидДеятельности,
	|	ВидыДеятельности.Наименование,
	|	ВидыДеятельности.Подразделение,
	|	ВидыДеятельности.Адрес,
	|	ВидыДеятельности.АдресСтрокой,
	|	ВидыДеятельности.КодПоОКТМО,
	|	ЕСТЬNULL(КлассификаторВидовПредпринимательскойДеятельности.РегистрацияПоМестуНахожденияОрганизации, ЛОЖЬ) КАК РегистрацияПоМестуНахожденияОрганизации,
	|	ЕСТЬNULL(КлассификаторВидовПредпринимательскойДеятельности.Код, """") КАК Код,
	|	ЕСТЬNULL(КлассификаторВидовПредпринимательскойДеятельности.БазоваяДоходность, 0) КАК БазоваяДоходность,
	|	ЕСТЬNULL(КлассификаторВидовПредпринимательскойДеятельности.ИмяФизическогоПоказателя, """") КАК ИмяФизическогоПоказателя,
	|	ВидыДеятельности.ДатаНачала,
	|	ВидыДеятельности.ДатаПрекращения,
	|	ЕСТЬNULL(ФизическиеПоказатели.ФизическийПоказатель1, 0) КАК ФизическийПоказатель1,
	|	ЕСТЬNULL(ФизическиеПоказатели.ФизическийПоказатель2, 0) КАК ФизическийПоказатель2,
	|	ЕСТЬNULL(ФизическиеПоказатели.ФизическийПоказатель3, 0) КАК ФизическийПоказатель3,
	|	ЕСТЬNULL(РегиональныеОсобенности.КорректирующийКоэффициент, &КорректирующийКоэффициентПоУмолчанию) КАК КорректирующийКоэффициент,
	|	ЕСТЬNULL(РегиональныеОсобенности.НалоговаяСтавка, &НалоговаяСтавкаПоУмолчанию) КАК НалоговаяСтавка,
	|	ВидыДеятельности.РегистрацияВНалоговомОргане
	|ИЗ
	|	ВТ_ВидыДеятельности КАК ВидыДеятельности
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторВидовПредпринимательскойДеятельностиЕНВД КАК КлассификаторВидовПредпринимательскойДеятельности
	|		ПО ВидыДеятельности.КодВидаДеятельности = КлассификаторВидовПредпринимательскойДеятельности.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ФизическиеПоказатели КАК ФизическиеПоказатели
	|		ПО ВидыДеятельности.Организация = ФизическиеПоказатели.Организация
	|			И ВидыДеятельности.ВидДеятельности = ФизическиеПоказатели.ВидДеятельности
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РегиональныеОсобенности КАК РегиональныеОсобенности
	|		ПО ВидыДеятельности.Организация = РегиональныеОсобенности.Организация
	|			И ВидыДеятельности.ВидДеятельности = РегиональныеОсобенности.ВидДеятельности
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлассификаторВидовПредпринимательскойДеятельности.Код,
	|	ВидыДеятельности.Наименование";
	
	Если ЗначениеЗаполнено(РегистрацияВНалоговомОргане) Тогда
		
		Если ТипЗнч(РегистрацияВНалоговомОргане) = Тип("Массив") Тогда
			РегистрацииВНалоговыхОрганах = РегистрацияВНалоговомОргане;
		Иначе
			РегистрацииВНалоговыхОрганах = Новый Массив;
			РегистрацииВНалоговыхОрганах.Добавить(РегистрацияВНалоговомОргане);
		КонецЕсли;
		РегистрацииВНалоговыхОрганах.Добавить(Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка());
		
		Запрос.УстановитьПараметр("РегистрацииВНалоговыхОрганах", РегистрацииВНалоговыхОрганах);
		
		УсловиеПоРегистрацииВНалоговомОргане = "ВидыДеятельности.РегистрацияВНалоговомОргане В(&РегистрацииВНалоговыхОрганах)";
		
	Иначе
		УсловиеПоРегистрацииВНалоговомОргане = "ИСТИНА"
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоРегистрацииВНалоговомОргане", УсловиеПоРегистрацииВНалоговомОргане);
	
	Запрос.Текст = ТекстЗапроса;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВидыДеятельности = Запрос.Выполнить().Выгрузить();
	
	// Обнуляем значения физических показателей вне периода применения ЕНВД
	НачалоКвартала = НачалоКвартала(Период);
	Для Каждого ВидДеятельности Из ВидыДеятельности Цикл
		
		Для НомерМесяца = 1 По 3 Цикл
			
			Месяц = ДобавитьМесяц(НачалоКвартала, НомерМесяца - 1);
			
			Если (ЗначениеЗаполнено(ВидДеятельности.ДатаПрекращения) И ВидДеятельности.ДатаПрекращения <= НачалоМесяца(Месяц))
				Или (ЗначениеЗаполнено(ВидДеятельности.ДатаНачала) И НачалоДня(КонецМесяца(Месяц)) < ВидДеятельности.ДатаНачала) Тогда
				ВидДеятельности["ФизическийПоказатель" + НомерМесяца] = 0;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЗаполнитьАдресПриРегистрацияПоМестуНахожденияОрганизации(Организация, ВидыДеятельности);
	
	Возврат ВидыДеятельности;
	
КонецФункции

// Возвращает имя объекта метаданных
//
// Возвращаемое значение:
//   Строка
//
Функция ИдентификаторДекларации() Экспорт
	
	Возврат "РегламентированныйОтчетЕдиныйНалогНаВмененныйДоход";
	
КонецФункции

// Заполняет переданную в виде контейнера структуру показателей отчета
//
// Параметры:
//   ПоказателиОтчета - Структура
//
Процедура ПолучитьСведенияОПоказателяхДекларации2016Кв1(ПоказателиОтчета) Экспорт
	
	КлючиПоказателей = КлючиПоказателейДекларации2016Кв1();
	
	// Раздел 2
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.Код, Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.Индекс, Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.КодРегиона, Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.Район, Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.Город, Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.НаселенныйПункт, Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.Улица, Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.НомерДома, Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.НомерКорпуса, Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.НомерОфиса, Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.КодПоОКТМО, Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.БазоваяДоходность, Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.КорректирующийКоэффициент, Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.ПостановкаНаУчетВОтчетномПериоде_Да, Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.ПостановкаНаУчетВОтчетномПериоде_Нет, Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.ДатаПостановкиНаУчет, Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.СнятиеСУчетаВОтчетномПериоде_Да, Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.СнятиеСУчетаВОтчетномПериоде_Нет, Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.ДатаСнятияСУчета, Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.ФизическийПоказатель1, Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.ФизическийПоказатель2, Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.ФизическийПоказатель3, Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.НалоговаяСтавка, Истина, Ложь);
	
	// Раздел 3
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.ПризнакНалогоплательщика, Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.СуммаСтраховыхВзносов, Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.СуммаСтраховыхВзносовЗаСебя, Истина, Ложь);
	
КонецПроцедуры

// Заполняет переданную в виде контейнера структуру данных отчета
//
// Параметры:
//   ПараметрыОтчета - Структура
//    * ДатаНачалаПериодаОтчета - Дата
//    * ДатаКонцаПериодаОтчета -  Дата
//    * Организация - СправочникСсылка.Организации
//    * РегистрацииВНО - СправочникСсылка.РегистрацииВНалоговомОргане
//   Контейнер - Структура
//
Процедура ЗаполнитьДекларацию2016Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	Перем Раздел2, Раздел3;
	
	КлючиПоказателей = КлючиПоказателейДекларации2016Кв1();
	
	Период      = НачалоКвартала(ПараметрыОтчета.ДатаНачалаПериодаОтчета);
	Организация = ПараметрыОтчета.Организация;
	
	ДанныеЗаполнения = ДанныеЗаполненияДекларации(ПараметрыОтчета);
	ВидыДеятельности = ДанныеЗаполнения.ВидыДеятельности;
	
	Если ВидыДеятельности <> Неопределено И Контейнер.Свойство("Раздел2", Раздел2) И ТипЗнч(Раздел2) = Тип("ТаблицаЗначений") Тогда
		
		// Обеспечим нужное количество страниц:
		КоличествоСтраницНужно  = Макс(ВидыДеятельности.Количество(), 1);
		КоличествоСтраницСейчас = Раздел2.Количество();
		
		// - удалим лишние
		Для НомерСтраницы = 1 По КоличествоСтраницСейчас - КоличествоСтраницНужно Цикл
			// a. КоличествоСтраницНужно - это меньше, чем сейчас
			// b. этот индекс на 1 больше, чем наибольший индекс нужной страницы
			Раздел2.Удалить(КоличествоСтраницНужно);
		КонецЦикла;
		
		// - добавим недостающие
		Для НомерСтраницы = 1 По КоличествоСтраницНужно - КоличествоСтраницСейчас Цикл
			ДобавитьСтраницуРазделаДекларации(Раздел2);
		КонецЦикла;
		
		Для Индекс = 0 По ВидыДеятельности.Количество() - 1 Цикл
			
			ВидДеятельности = ДанныеЗаполнения.ВидыДеятельности[Индекс];
			
			ДанныеРаздела2 = Раздел2[Индекс].Данные;
			ДанныеДопСтрокРаздела2 = Раздел2[Индекс].ДанныеДопСтрок;
			
			ДанныеРаздела2.Вставить(КлючиПоказателей.Код, ВидДеятельности.Код);
			
			ДополнительныеПараметры = Новый Структура("НаименованиеВключаетСокращение", Истина);
			СведенияОбАдресе = УправлениеКонтактнойИнформацией.СведенияОбАдресе(ВидДеятельности.Адрес, ДополнительныеПараметры);
			
			ДанныеРаздела2.Вставить(КлючиПоказателей.Индекс,          СведенияОбАдресе.Индекс);
			ДанныеРаздела2.Вставить(КлючиПоказателей.КодРегиона,      СведенияОбАдресе.КодРегиона);
			ДанныеРаздела2.Вставить(КлючиПоказателей.Район,           СведенияОбАдресе.Район);
			ДанныеРаздела2.Вставить(КлючиПоказателей.Город,           СведенияОбАдресе.Город);
			ДанныеРаздела2.Вставить(КлючиПоказателей.НаселенныйПункт, СведенияОбАдресе.НаселенныйПункт);
			ДанныеРаздела2.Вставить(КлючиПоказателей.Улица,           СведенияОбАдресе.Улица);
			ДанныеРаздела2.Вставить(КлючиПоказателей.НомерДома,       СведенияОбАдресе.Здание.Номер);
			ДанныеРаздела2.Вставить(КлючиПоказателей.НомерКорпуса,   ?(СведенияОбАдресе.Корпуса.Количество() > 0, СведенияОбАдресе.Корпуса[0].Номер, ""));
			ДанныеРаздела2.Вставить(КлючиПоказателей.НомерОфиса,     ?(СведенияОбАдресе.Помещения.Количество() > 0, СведенияОбАдресе.Помещения[0].Номер, ""));
			
			ДанныеРаздела2.Вставить(КлючиПоказателей.КодПоОКТМО, ВидДеятельности.КодПоОКТМО);
			
			ДанныеРаздела2.Вставить(КлючиПоказателей.БазоваяДоходность,         ВидДеятельности.БазоваяДоходность);
			ДанныеРаздела2.Вставить(КлючиПоказателей.КорректирующийКоэффициент, ВидДеятельности.КорректирующийКоэффициент);
			
			Если НачалоДня(ПараметрыОтчета.ДатаНачалаПериодаОтчета) < ВидДеятельности.ДатаНачала И ВидДеятельности.ДатаНачала <= НачалоДня(ПараметрыОтчета.ДатаКонцаПериодаОтчета) Тогда
				ДанныеРаздела2.Вставить(КлючиПоказателей.ПостановкаНаУчетВОтчетномПериоде_Да, ПредставлениеФлажка(Истина));
				ДанныеРаздела2.Вставить(КлючиПоказателей.ПостановкаНаУчетВОтчетномПериоде_Нет, ПредставлениеФлажка(Ложь));
				ДанныеРаздела2.Вставить(КлючиПоказателей.ДатаПостановкиНаУчет, ВидДеятельности.ДатаНачала);
				ВставитьЗначениеДопСтроки(ДанныеДопСтрокРаздела2, КлючиПоказателей.ДатаПостановкиНаУчет, ВидДеятельности.ДатаНачала);
			Иначе
				ДанныеРаздела2.Вставить(КлючиПоказателей.ПостановкаНаУчетВОтчетномПериоде_Да, ПредставлениеФлажка(Ложь));
				ДанныеРаздела2.Вставить(КлючиПоказателей.ПостановкаНаУчетВОтчетномПериоде_Нет, ПредставлениеФлажка(Истина));
				ДанныеРаздела2.Вставить(КлючиПоказателей.ДатаПостановкиНаУчет, Дата(1, 1, 1));
				ВставитьЗначениеДопСтроки(ДанныеДопСтрокРаздела2, КлючиПоказателей.ДатаПостановкиНаУчет, Дата(1, 1, 1));
			КонецЕсли;
			
			Если НачалоДня(ПараметрыОтчета.ДатаНачалаПериодаОтчета) < ВидДеятельности.ДатаПрекращения И ВидДеятельности.ДатаПрекращения <= НачалоДня(ПараметрыОтчета.ДатаКонцаПериодаОтчета) Тогда
				ДанныеРаздела2.Вставить(КлючиПоказателей.СнятиеСУчетаВОтчетномПериоде_Да, ПредставлениеФлажка(Истина));
				ДанныеРаздела2.Вставить(КлючиПоказателей.СнятиеСУчетаВОтчетномПериоде_Нет, ПредставлениеФлажка(Ложь));
				ДанныеРаздела2.Вставить(КлючиПоказателей.ДатаСнятияСУчета, ВидДеятельности.ДатаПрекращения);
				ВставитьЗначениеДопСтроки(ДанныеДопСтрокРаздела2, КлючиПоказателей.ДатаСнятияСУчета, ВидДеятельности.ДатаПрекращения);
			Иначе
				ДанныеРаздела2.Вставить(КлючиПоказателей.СнятиеСУчетаВОтчетномПериоде_Да, ПредставлениеФлажка(Ложь));
				ДанныеРаздела2.Вставить(КлючиПоказателей.СнятиеСУчетаВОтчетномПериоде_Нет, ПредставлениеФлажка(Истина));
				ДанныеРаздела2.Вставить(КлючиПоказателей.ДатаСнятияСУчета, Дата(1, 1, 1));
				ВставитьЗначениеДопСтроки(ДанныеДопСтрокРаздела2, КлючиПоказателей.ДатаСнятияСУчета, Дата(1, 1, 1));
			КонецЕсли;
			
			ДанныеРаздела2.Вставить(КлючиПоказателей.ФизическийПоказатель1, ВидДеятельности.ФизическийПоказатель1);
			ДанныеРаздела2.Вставить(КлючиПоказателей.ФизическийПоказатель2, ВидДеятельности.ФизическийПоказатель2);
			ДанныеРаздела2.Вставить(КлючиПоказателей.ФизическийПоказатель3, ВидДеятельности.ФизическийПоказатель3);
			
			ДанныеРаздела2.Вставить(КлючиПоказателей.НалоговаяСтавка, ВидДеятельности.НалоговаяСтавка);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Контейнер.Свойство("Раздел3", Раздел3) И ТипЗнч(Раздел3) = Тип("Структура") Тогда
		
		ЭтоЮрЛицо = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация);
		ИспользуетсяТрудНаемныхРаботников = ЭтоЮрЛицо Или УчетЗарплаты.ИПИспользуетТрудНаемныхРаботников(Организация);
		
		Раздел3.Вставить(КлючиПоказателей.ПризнакНалогоплательщика, ?(ИспользуетсяТрудНаемныхРаботников, "1", "2"));
		
		УменьшатьНалогНаВзносыИПРаботодателя = Не ЭтоЮрЛицо И НалогУменьшаетсяНаФиксированныеВзносыИПРаботодателей(Период);
		
		РасходыЕНВД = РегистрыНакопления.РасходыУменьшающиеНалогПоОтдельнымРежимам.РасходыЕНВДЗаКвартал(Организация, Период, ПараметрыОтчета.РегистрацииВНО);
		
		СуммаСтраховыхВзносов       = РасходыЕНВД.СтраховыеВзносы + РасходыЕНВД.Больничные + РасходыЕНВД.ДобровольноеСтрахование;
		СуммаСтраховыхВзносовЗаСебя = РасходыЕНВД.ФиксированныеВзносыИП;
		
		Если ИспользуетсяТрудНаемныхРаботников Тогда
			Раздел3.Вставить(КлючиПоказателей.СуммаСтраховыхВзносов, СуммаСтраховыхВзносов);
			Если УменьшатьНалогНаВзносыИПРаботодателя Тогда
				Раздел3.Вставить(КлючиПоказателей.СуммаСтраховыхВзносовЗаСебя, СуммаСтраховыхВзносовЗаСебя);
			Иначе
				Раздел3.Вставить(КлючиПоказателей.СуммаСтраховыхВзносовЗаСебя, 0);
			КонецЕсли;
		Иначе
			Раздел3.Вставить(КлючиПоказателей.СуммаСтраховыхВзносов,       0);
			Раздел3.Вставить(КлючиПоказателей.СуммаСтраховыхВзносовЗаСебя, СуммаСтраховыхВзносовЗаСебя);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет переданную в виде контейнера структуру показателей отчета
//
// Параметры:
//   ПоказателиОтчета - Структура
//
Процедура ПолучитьСведенияОПоказателяхЗаявленияЕНВД1_2014(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "ДАТА_ПРИМЕНЕНЕНИ_ЕНВД", Истина, Ложь);
	
	ПолучитьСведенияОбОбщихПоказателяхЗаявлений(Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД1, ПоказателиОтчета);
	
КонецПроцедуры

// Заполняет переданную в виде контейнера структуру показателей отчета
//
// Параметры:
//   ПоказателиОтчета - Структура
//
Процедура ПолучитьСведенияОПоказателяхЗаявленияЕНВД2_2014(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "ДАТА_ПРИМЕНЕНЕНИ_ЕНВД", Истина, Ложь);
	
	ПолучитьСведенияОбОбщихПоказателяхЗаявлений(Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД2, ПоказателиОтчета);
	
КонецПроцедуры

// Заполняет переданную в виде контейнера структуру показателей отчета
//
// Параметры:
//   ПоказателиОтчета - Структура
//
Процедура ПолучитьСведенияОПоказателяхЗаявленияЕНВД3_2014(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "ДАТА_ПРЕКРАЩЕНИЯ_ЕНВД", Истина, Ложь);
	
	ПолучитьСведенияОбОбщихПоказателяхЗаявлений(Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД3, ПоказателиОтчета);
	
КонецПроцедуры

// Заполняет переданную в виде контейнера структуру показателей отчета
//
// Параметры:
//   ПоказателиОтчета - Структура
//
Процедура ПолучитьСведенияОПоказателяхЗаявленияЕНВД4_2014(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "ДАТА_ПРЕКРАЩЕНИЯ_ЕНВД", Истина, Ложь);
	
	ПолучитьСведенияОбОбщихПоказателяхЗаявлений(Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД4, ПоказателиОтчета);
	
КонецПроцедуры

Процедура ПолучитьСведенияОбОбщихПоказателяхЗаявлений(ВидЗаявления, ПоказателиОтчета)
	
	КоличествоВидовДеятельностиНаЛисте = КоличествоВидовДеятельностиНаЛистеЗаявления();
	
	Для НомерВидаДеятельности = 1 По КоличествоВидовДеятельностиНаЛисте Цикл
		
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, СтрШаблон("КОД_ВИДА_ДЕЯТЕЛЬНОСТИ%1", НомерВидаДеятельности), Истина, Ложь);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, СтрШаблон("ИНДЕКС%1", НомерВидаДеятельности), Истина, Ложь);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, СтрШаблон("РЕГИОН%1", НомерВидаДеятельности), Истина, Ложь);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, СтрШаблон("РАЙОН%1", НомерВидаДеятельности), Истина, Ложь);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, СтрШаблон("ГОРОД%1", НомерВидаДеятельности), Истина, Ложь);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, СтрШаблон("НаселенныйПункт%1", НомерВидаДеятельности), Истина, Ложь);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, СтрШаблон("Улица%1", НомерВидаДеятельности), Истина, Ложь);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, СтрШаблон("Дом%1", НомерВидаДеятельности), Истина, Ложь);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, СтрШаблон("Корпус%1", НомерВидаДеятельности), Истина, Ложь);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, СтрШаблон("Квартира%1", НомерВидаДеятельности), Истина, Ложь);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает имя объекта метаданных
//
// Параметры:
//   ВидЗаявления - ПеречислениеСсылка.ВидыУведомленийОСпецрежимахНалогообложения
//
// Возвращаемое значение:
//   Строка
//
Функция ИдентификаторЗаявления(ВидЗаявления) Экспорт
	
	Если ВидЗаявления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД1 Тогда
		Идентификатор = "РегламентированноеУведомлениеЕНВД1"
	ИначеЕсли ВидЗаявления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД2 Тогда
		Идентификатор = "РегламентированноеУведомлениеЕНВД2"
	ИначеЕсли ВидЗаявления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД3 Тогда
		Идентификатор = "РегламентированноеУведомлениеЕНВД3"
	ИначеЕсли ВидЗаявления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД4 Тогда
		Идентификатор = "РегламентированноеУведомлениеЕНВД4"
	КонецЕсли;
	
	Возврат Идентификатор;
	
КонецФункции

// Заполняет переданную в виде контейнера структуру данных отчета
//
// Параметры:
//   ПараметрыОтчета - Структура
//    * Организация - СправочникСсылка.Организации
//    * КодНалоговогоОргана - СправочникСсылка.РегистрацииВНалоговомОргане
//   Контейнер - Структура
//
Процедура ЗаполнитьЗаявлениеЕНВД1_2014(ПараметрыОтчета, Контейнер) Экспорт
	
	ЗаполнитьЗаявление(Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД1, ПараметрыОтчета, Контейнер)
	
КонецПроцедуры

// Заполняет переданную в виде контейнера структуру данных отчета
//
// Параметры:
//   ПараметрыОтчета - Структура
//    * Организация - СправочникСсылка.Организации
//    * КодНалоговогоОргана - СправочникСсылка.РегистрацииВНалоговомОргане
//   Контейнер - Структура
//
Процедура ЗаполнитьЗаявлениеЕНВД2_2014(ПараметрыОтчета, Контейнер) Экспорт
	
	ЗаполнитьЗаявление(Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД2, ПараметрыОтчета, Контейнер)
	
КонецПроцедуры

// Заполняет переданную в виде контейнера структуру данных отчета
//
// Параметры:
//   ПараметрыОтчета - Структура
//    * Организация - СправочникСсылка.Организации
//    * КодНалоговогоОргана - СправочникСсылка.РегистрацииВНалоговомОргане
//   Контейнер - Структура
//
Процедура ЗаполнитьЗаявлениеЕНВД3_2014(ПараметрыОтчета, Контейнер) Экспорт
	
	ЗаполнитьЗаявление(Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД3, ПараметрыОтчета, Контейнер)
	
КонецПроцедуры

// Заполняет переданную в виде контейнера структуру данных отчета
//
// Параметры:
//   ПараметрыОтчета - Структура
//    * Организация - СправочникСсылка.Организации
//    * КодНалоговогоОргана - СправочникСсылка.РегистрацииВНалоговомОргане
//   Контейнер - Структура
//
Процедура ЗаполнитьЗаявлениеЕНВД4_2014(ПараметрыОтчета, Контейнер) Экспорт
	
	ЗаполнитьЗаявление(Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД4, ПараметрыОтчета, Контейнер)
	
КонецПроцедуры

Процедура ЗаполнитьЗаявление(ВидЗаявления, ПараметрыОтчета, Контейнер)
	
	ЭтоЗаявлениеОПостановкеНаУчет = ЭтоЗаявлениеОПостановкеНаУчет(ВидЗаявления);
	ЭтоЗаявлениеОСнятииСУчета = ЭтоЗаявлениеОСнятииСУчета(ВидЗаявления);
	
	ДанныеЗаполнения = ДанныеЗаполненияЗаявлений(ПараметрыОтчета);
	
	ДатаНачала = Дата(1, 1, 1);
	ДатаПрекращения = Дата(1, 1, 1);
	
	ТаблицаКонтейнера = Контейнер.ДопСтроки;
	ТаблицаКонтейнера.Очистить();
	
	ВидыДеятельности = ДанныеЗаполнения.ВидыДеятельности;
	
	ОшибкаВПериодеПримененияЕНВД = Ложь;
	
	Если ВидыДеятельности <> Неопределено  Тогда
		
		КоличествоВидовДеятельностиНаЛисте = КоличествоВидовДеятельностиНаЛистеЗаявления();
		
		НомерВидаДеятельности = 1;
		НоваяСтрока = ТаблицаКонтейнера.Добавить();
		
		Для Каждого ВидДеятельности Из ВидыДеятельности Цикл
			
			НоваяСтрока[СтрШаблон("КОД_ВИДА_ДЕЯТЕЛЬНОСТИ%1", НомерВидаДеятельности)] = ВидДеятельности.Код;
			
			ДополнительныеПараметры = Новый Структура("НаименованиеВключаетСокращение", Истина);
			СведенияОбАдресе = УправлениеКонтактнойИнформацией.СведенияОбАдресе(ВидДеятельности.Адрес, ДополнительныеПараметры);
			
			НоваяСтрока[СтрШаблон("ИНДЕКС%1", НомерВидаДеятельности)] = СведенияОбАдресе.Индекс;
			НоваяСтрока[СтрШаблон("РЕГИОН%1", НомерВидаДеятельности)] = СведенияОбАдресе.КодРегиона;
			НоваяСтрока[СтрШаблон("РАЙОН%1", НомерВидаДеятельности)] = СведенияОбАдресе.Район;
			НоваяСтрока[СтрШаблон("ГОРОД%1", НомерВидаДеятельности)] = СведенияОбАдресе.Город;
			НоваяСтрока[СтрШаблон("НаселенныйПункт%1", НомерВидаДеятельности)] = СведенияОбАдресе.НаселенныйПункт;
			НоваяСтрока[СтрШаблон("Улица%1", НомерВидаДеятельности)] = СведенияОбАдресе.Улица;
			НоваяСтрока[СтрШаблон("Дом%1", НомерВидаДеятельности)] = СведенияОбАдресе.Здание.Номер;
			НоваяСтрока[СтрШаблон("Корпус%1", НомерВидаДеятельности)] = ?(СведенияОбАдресе.Корпуса.Количество() > 0, СведенияОбАдресе.Корпуса[0].Номер, "");
			НоваяСтрока[СтрШаблон("Квартира%1", НомерВидаДеятельности)] = ?(СведенияОбАдресе.Помещения.Количество() > 0, СведенияОбАдресе.Помещения[0].Номер, "");
			
			Если НомерВидаДеятельности < КоличествоВидовДеятельностиНаЛисте Тогда
				НомерВидаДеятельности = НомерВидаДеятельности + 1;
			Иначе
				НомерВидаДеятельности = 1;
				НоваяСтрока = ТаблицаКонтейнера.Добавить();
			КонецЕсли;
			
			Если ЭтоЗаявлениеОПостановкеНаУчет И ЗначениеЗаполнено(ВидДеятельности.ДатаНачала) Тогда
				Если Не ЗначениеЗаполнено(ДатаНачала) Тогда
					ДатаНачала = ВидДеятельности.ДатаНачала;
				ИначеЕсли ДатаНачала <> ВидДеятельности.ДатаНачала Тогда
					ОшибкаВПериодеПримененияЕНВД = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ЭтоЗаявлениеОСнятииСУчета И ЗначениеЗаполнено(ВидДеятельности.ДатаПрекращения) Тогда
				Если Не ЗначениеЗаполнено(ДатаПрекращения) Тогда
					ДатаПрекращения = ВидДеятельности.ДатаПрекращения;
				ИначеЕсли ДатаПрекращения <> ВидДеятельности.ДатаПрекращения Тогда
					ОшибкаВПериодеПримененияЕНВД = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ОшибкаВПериодеПримененияЕНВД Тогда
		Если ЭтоЗаявлениеОПостановкеНаУчет Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Даты начала примененния ЕНВД не совпадают'"));
		КонецЕсли;
		Если ЭтоЗаявлениеОСнятииСУчета Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Дата прекращения примененния ЕНВД не совпадают'"));
		КонецЕсли;
	КонецЕсли;
	
	ТитульныйЛист = Контейнер.Титульный;
	
	Если ЭтоЗаявлениеОПостановкеНаУчет Тогда
		ТитульныйЛист.Вставить("ДАТА_ПРИМЕНЕНЕНИ_ЕНВД", ДатаНачала);
	КонецЕсли;
	
	Если ЭтоЗаявлениеОСнятииСУчета Тогда
		ТитульныйЛист.Вставить("ДАТА_ПРЕКРАЩЕНИЯ_ЕНВД", ДатаПрекращения);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает элемент КПП по виду организации
//
Функция КодПричиныПостановкиНаУчет(Организация) Экспорт
	
	Если ЗначениеЗаполнено(Организация) И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ИностраннаяОрганизация") Тогда
		Код = "77"; // Иностранная организация при постановке на учет в качестве плательщика единого налога на вмененный доход
	Иначе
		Код = "35"; // Российская организация при постановке на учет в качестве плательщика единого налога на вмененный доход
	КонецЕсли;
	
	Возврат Код
	
КонецФункции

// Отменяет начисление налога при изменении показателей для расчета
//
Процедура ОтменитьНачислениеЕНВД(Организация, Период) Экспорт
	
	РегламентнаяОперация = Документы.РегламентнаяОперация.НайтиДокумент(
		КонецКвартала(Период), Организация, Перечисления.ВидыРегламентныхОпераций.РасчетЕНВД);
	
	Если Не ЗначениеЗаполнено(РегламентнаяОперация) Тогда
		Возврат;
	КонецЕсли;
	
	СостояниеОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РегламентнаяОперация, "Состояние");
	Если СостояниеОперации = Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено Тогда
		ДокументОбъект = РегламентнаяОперация.ПолучитьОбъект();
		ДокументОбъект.ОтменитьОперацию();
	КонецЕсли;
	
КонецПроцедуры

Функция ДатаНачалаПоддержкиЕНВД() Экспорт
	
	Возврат Дата('20150101');
	
КонецФункции

Функция НалогУменьшаетсяНаФиксированныеВзносыИПРаботодателей(Период) Экспорт
	
	Возврат Период >= Дата('20170101'); // Действует статья 346.32 НК РФ в редакции федерального закона от 2 июня 2016 г. N 178-ФЗ.
	
КонецФункции

#КонецОбласти

#Область РегламентноеНачислениеЕНВД

Функция ПодготовитьТаблицуНачисленияЕНВД(ТаблицаРеквизитов) Экспорт
	
	ТаблицаПроводок  = ПустаяТаблицаОтраженияЕНВД();
	
	Параметры = ПодготовитьПараметрыТаблицыНачисленияЕНВД(ТаблицаРеквизитов);
	Если Параметры.Реквизиты.Количество() = 0 Тогда
		Возврат ТаблицаПроводок;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	Если Не Реквизиты.ПлательщикЕНВД Тогда
		Возврат ТаблицаПроводок;
	КонецЕсли;
	
	НалогПоРегистрациям = СуммыНалогаПоВсемРегистрациям(Реквизиты);
	Если НалогПоРегистрациям.Количество() = 0 Тогда
		Возврат ТаблицаПроводок;
	КонецЕсли;
	
	УменьшающиеРасходы = УменьшающиеРасходыПоВсемРегистрациям(Реквизиты);
	
	Для каждого СтрокаРегистрация Из НалогПоРегистрациям Цикл 
		
		Если Реквизиты.ЭтоИндивидуальныйПредприниматель И Не Реквизиты.ИПИспользуетТрудНаемныхРаботников Тогда
			// для организаций и ИП, использующих труд наемных работников.
			МаксимальныйНалоговыйВычет = Окр(СтрокаРегистрация.СуммаНалога, 0, РежимОкругления.Окр15как10);
		Иначе
			МаксимальныйНалоговыйВычет = Окр(СтрокаРегистрация.СуммаНалога/2, 0, РежимОкругления.Окр15как10);
		КонецЕсли;
		
		СуммаРасходов = УменьшающиеРасходы[СтрокаРегистрация.РегистрацияВНалоговомОргане];
		СуммаРасходов = Окр(?(СуммаРасходов = Неопределено, 0, СуммаРасходов), 0);
		НалоговыйВычет = Мин(СуммаРасходов, МаксимальныйНалоговыйВычет);
		СуммаНалога = Окр(СтрокаРегистрация.СуммаНалога - НалоговыйВычет, 0);
		
		Если СуммаНалога > 0 Тогда
			СтрокаПроводки = ТаблицаПроводок.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПроводки, Реквизиты);
			
			СтрокаПроводки.РегистрацияВНалоговомОргане = СтрокаРегистрация.РегистрацияВНалоговомОргане;                       
			СтрокаПроводки.СчетДт                 = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиЕНВД;
			СтрокаПроводки.СчетКт                 = ПланыСчетов.Хозрасчетный.ЕНВД;
			СтрокаПроводки.ПрибылиИУбытки         = Перечисления.ПрибылиИУбытки.НалогНаПрибыль;
			СтрокаПроводки.ВидыПлатежейВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог;
			СтрокаПроводки.Сумма                  = СуммаНалога;
			
			ПредставлениеПериода = ПредставлениеПериода(НачалоКвартала(Реквизиты.Период), Реквизиты.Период, "ФП=Истина");
			СтрокаПроводки.Содержание = СтрШаблон( НСтр("ru = 'Начислен единый налог на вмененный доход (ЕНВД) за %1'"), ПредставлениеПериода);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаПроводок
	
КонецФункции

Функция СуммыНалогаПоВсемРегистрациям(Реквизиты)
	
	НалогПоРегистрациям = Новый ТаблицаЗначений;
	НалогПоРегистрациям.Колонки.Добавить("СуммаНалога", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	НалогПоРегистрациям.Колонки.Добавить("РегистрацияВНалоговомОргане", Новый ОписаниеТипов("СправочникСсылка.РегистрацииВНалоговомОргане"));
	
	ПоказателиВидовДеятельности = ПоказателиВидовДеятельности(Реквизиты.Период, Реквизиты.Организация);

	Если ПоказателиВидовДеятельности = Неопределено Тогда
		Возврат НалогПоРегистрациям
	КонецЕсли;

	Для каждого СтрокаПоказателя Из ПоказателиВидовДеятельности Цикл 

		ПараметрыРасчетаСуммыНалога = УчетЕНВДКлиентСервер.НовыеПараметрыРасчетаСуммыНалога();
		ЗаполнитьЗначенияСвойств(ПараметрыРасчетаСуммыНалога, СтрокаПоказателя);
		ПараметрыРасчетаСуммыНалога.Период = Реквизиты.Период;
		
		СтрокаНалога = НалогПоРегистрациям.Добавить();
		СтрокаНалога.РегистрацияВНалоговомОргане = СтрокаПоказателя.РегистрацияВНалоговомОргане;
		СтрокаНалога.СуммаНалога = УчетЕНВДКлиентСервер.СуммаНалога(ПараметрыРасчетаСуммыНалога);
		
	КонецЦикла;

	НалогПоРегистрациям.Свернуть("РегистрацияВНалоговомОргане", "СуммаНалога");
	
	Возврат НалогПоРегистрациям;
	
КонецФункции

Функция УменьшающиеРасходыПоВсемРегистрациям(Реквизиты)
	
	УменьшающиеРасходы = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходыУменьшающиеНалогПоОтдельнымРежимамОбороты.РегистрацияВНалоговомОргане,
	|	РасходыУменьшающиеНалогПоОтдельнымРежимамОбороты.СуммаРасходаЕНВДОборот КАК СуммаРасхода
	|ИЗ
	|	РегистрНакопления.РасходыУменьшающиеНалогПоОтдельнымРежимам.Обороты(&НачалоПериода, &КонецПериода, , Организация = &Организация) КАК РасходыУменьшающиеНалогПоОтдельнымРежимамОбороты";
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоКвартала(Реквизиты.Период));
	Запрос.УстановитьПараметр("КонецПериода", Реквизиты.Период);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		УменьшающиеРасходы.Вставить(Выборка.РегистрацияВНалоговомОргане, Выборка.СуммаРасхода);
	КонецЦикла;
	
	Возврат УменьшающиеРасходы;
	
КонецФункции

Процедура СформироватьДвиженияНачислениеЕНВД(ТаблицаПроводок, ТаблицаРеквизитов, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыДвиженийНачислениеЕНВД(ТаблицаПроводок);
	
	Для каждого СтрокаПроводки Из Параметры.Проводки Цикл
	
		Проводка = Движения.Хозрасчетный.Добавить();
		
		ЗаполнитьЗначенияСвойств(Проводка, СтрокаПроводки);
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"ПрибылиИУбытки", СтрокаПроводки.ПрибылиИУбытки);
			
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"ВидыПлатежейВГосБюджет", СтрокаПроводки.ВидыПлатежейВГосБюджет);
		
		Если НалоговыйУчет.УчетВРазрезеНалоговыхОрганов() Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
				"РегистрацияВНалоговомОргане", СтрокаПроводки.РегистрацияВНалоговомОргане);
		КонецЕсли;
		
		Движения.Хозрасчетный.Записывать = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыявитьУчетныеОшибкиРасчетаЕНВД(Ошибки, Период, Организация) Экспорт

	Если Не УчетнаяПолитика.ПлательщикЕНВД(Организация, Период) Тогда
		Возврат;
	КонецЕсли;
	
	ПоказателиВидовДеятельности = ПоказателиВидовДеятельности(Период, Организация);
	
	Если ПоказателиВидовДеятельности = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Период < ДатаНачалаПоддержкиЕНВД() Тогда
		ВыводСообщенийОбОшибках.ДобавитьПростоеОписаниеОшибки(Ошибки,  НСтр("ru = 'Эта операция поддерживается с 2015 года'"));
		Возврат;
	КонецЕсли;
	
	СсылкаПерехода = "e1cib/command/Обработка.ПомощникРасчетаЕНВД.Команда.ОтчетностьПоЕНВД";
	
	Для каждого СтрокаПоказателя Из ПоказателиВидовДеятельности Цикл
		
		Если ЗначениеЗаполнено(СтрокаПоказателя.КорректирующийКоэффициент)
			И ЗначениеЗаполнено(СтрокаПоказателя.НалоговаяСтавка) Тогда
			
			Продолжить;
		КонецЕсли;
		
		Ошибка = ВыводСообщенийОбОшибках.ДобавитьПростоеОписаниеОшибки(Ошибки);
		ОписаниеШаблон = НСтр("ru = 'Недостаточно данных для расчета налога по виду деятельности""%1""'");
		Ошибка.Описание = СтрШаблон(ОписаниеШаблон, СтрокаПоказателя.Наименование);
	
		Если Не ЗначениеЗаполнено(СтрокаПоказателя.КорректирующийКоэффициент) Тогда
		
			ШаблонСообщения = НСтр("ru = 'Укажите корректирующий коэффициент К2 за %1.'");
			
			МестоОшибки = Ошибка.ЛокализацияДетально.Добавить();
			МестоОшибки.Локализация = СтрШаблон(ШаблонСообщения, Формат(НачалоКвартала(Период), "Л=ru; ДФ='q ''квартал'' yyyy ''г.'''"));
			МестоОшибки.Ссылка = СсылкаПерехода;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаПоказателя.НалоговаяСтавка) Тогда
		
			ШаблонСообщения = НСтр("ru = 'Укажите ставку налога за %1.'");
			
			МестоОшибки = Ошибка.ЛокализацияДетально.Добавить();
			МестоОшибки.Локализация = СтрШаблон(ШаблонСообщения, Формат(НачалоГода(Период), "Л=ru; ДФ='yyyy ''г.'''"));
			МестоОшибки.Ссылка = СсылкаПерехода;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьПараметрыТаблицыНачисленияЕНВД(ТаблицаРеквизитов)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"                           // <Дата> - период движений - дата документа
		+ "Регистратор,"                      // <ДокументСсылка.РегламентнаяОперация> - документ-регистратор движений
		+ "Организация,"                      // <СправочникСсылка.Организации> - организация
		+ "ПлательщикЕНВД,"                   // <Булево> - признак применения ЕНВД по отдельным видам деятельности
		+ "ИПИспользуетТрудНаемныхРаботников,"// <Булево> - если ИСТИНА, сумма налога будет уменьшена на фиксированные взносы в 100% размере.
		+ "ЭтоИндивидуальныйПредприниматель"; // <Булево> - признак, что организация является индивидуальным предпринимателем.

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

Функция ПустаяТаблицаОтраженияЕНВД()

	ПустаяТаблица = Новый ТаблицаЗначений;
	
	ПустаяТаблица.Колонки.Добавить("Период",                      ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ПустаяТаблица.Колонки.Добавить("Организация",                 Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ПустаяТаблица.Колонки.Добавить("СчетДт",                      Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ПустаяТаблица.Колонки.Добавить("СчетКт",                      Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ПустаяТаблица.Колонки.Добавить("ПрибылиИУбытки",              Новый ОписаниеТипов("ПеречислениеСсылка.ПрибылиИУбытки"));
	ПустаяТаблица.Колонки.Добавить("ВидыПлатежейВГосБюджет",      Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПлатежейВГосБюджет"));
	ПустаяТаблица.Колонки.Добавить("РегистрацияВНалоговомОргане", Новый ОписаниеТипов("СправочникСсылка.РегистрацииВНалоговомОргане"));
	ПустаяТаблица.Колонки.Добавить("Сумма",                       ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ПустаяТаблица.Колонки.Добавить("Содержание",                  ОбщегоНазначения.ОписаниеТипаСтрока(150));
	
	Возврат ПустаяТаблица;

КонецФункции

Функция ПодготовитьПараметрыДвиженийНачислениеЕНВД(ТаблицаПроводок)

	Параметры = Новый Структура;
	
	СписокОбязательныхКолонок = ""
		+ "Период,"                      // <Дата> - период проводок - дата документа
		+ "Организация,"                 // <СправочникСсылка.Организации> - организация
		+ "СчетДт,"                      // <ПланСчетовСсылка.Хозрасчетный> - счет дебета
		+ "СчетКт,"                      // <ПланСчетовСсылка.Хозрасчетный> - счет кредита
		+ "ПрибылиИУбытки,"              // <ПеречислениеСсылка.ПрибылиИУбытки> - субконто счета дебета
		+ "ВидыПлатежейВГосБюджет,"      // <ПеречислениеСсылка.ВидыПлатежейВГосБюджет> - субконто кредита
		+ "РегистрацияВНалоговомОргане," // <ПеречислениеСсылка.ВидыПлатежейВГосБюджет> - субконто кредита
		+ "Сумма,"                       // <Число, 15, 2> - сумма проводки
		+ "Содержание";                  // <Строка, 150> - содержание проводки
		
	Параметры.Вставить("Проводки", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаПроводок, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеДекларации

Функция ДанныеЗаполненияДекларации(ПараметрыОтчета)
	
	ПоказателиВидовДеятельности = ПоказателиВидовДеятельности(
		ПараметрыОтчета.ДатаНачалаПериодаОтчета,
		ПараметрыОтчета.Организация,
		ПараметрыОтчета.РегистрацииВНО);
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ВидыДеятельности", ПоказателиВидовДеятельности);
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция КлючиПоказателейДекларации2016Кв1()
	
	КлючиПоказателей = Новый Структура;
	
	// Раздел 2
	
	КлючиПоказателей.Вставить("Код", "П000020001000");
	
	КлючиПоказателей.Вставить("Индекс",          "П000020002001");
	КлючиПоказателей.Вставить("КодРегиона",      "П000020002002");
	КлючиПоказателей.Вставить("Район",           "П000020002003");
	КлючиПоказателей.Вставить("Город",           "П000020002004");
	КлючиПоказателей.Вставить("НаселенныйПункт", "П000020002005");
	КлючиПоказателей.Вставить("Улица",           "П000020002006");
	КлючиПоказателей.Вставить("НомерДома",       "П000020002007");
	КлючиПоказателей.Вставить("НомерКорпуса",    "П000020002008");
	КлючиПоказателей.Вставить("НомерОфиса",      "П000020002009");
	
	КлючиПоказателей.Вставить("КодПоОКТМО", "П000020003000");
	
	КлючиПоказателей.Вставить("БазоваяДоходность",         "П000020004003");
	КлючиПоказателей.Вставить("КорректирующийКоэффициент", "П000020006003");
	
	КлючиПоказателей.Вставить("ПостановкаНаУчетВОтчетномПериоде_Да",  "П000020006101");
	КлючиПоказателей.Вставить("ПостановкаНаУчетВОтчетномПериоде_Нет", "П000020006102");
	КлючиПоказателей.Вставить("ДатаПостановкиНаУчет", "П000020006201_1");
	
	КлючиПоказателей.Вставить("СнятиеСУчетаВОтчетномПериоде_Да",  "П000020006401");
	КлючиПоказателей.Вставить("СнятиеСУчетаВОтчетномПериоде_Нет", "П000020006402");
	КлючиПоказателей.Вставить("ДатаСнятияСУчета", "П000020006501_1");
	
	КлючиПоказателей.Вставить("ФизическийПоказатель1", "П000020007002");
	КлючиПоказателей.Вставить("ФизическийПоказатель2", "П000020008002");
	КлючиПоказателей.Вставить("ФизическийПоказатель3", "П000020009002");
	
	КлючиПоказателей.Вставить("НалоговаяСтавка", "П000020010503");
	
	// Раздел 3
	
	КлючиПоказателей.Вставить("ПризнакНалогоплательщика", "П000030000503");
	
	КлючиПоказателей.Вставить("СуммаСтраховыхВзносов",       "П000030002003");
	КлючиПоказателей.Вставить("СуммаСтраховыхВзносовЗаСебя", "П000030003003");
	
	Возврат КлючиПоказателей;
	
КонецФункции

Функция ПредставлениеФлажка(Значение)
	
	Возврат ?(Значение, "V", "");
	
КонецФункции

Процедура ДобавитьСтраницуРазделаДекларации(Раздел)
	
	НоваяСтраница = Раздел.Добавить();
	Образец = Раздел[0];
	НоваяСтраница.Данные         = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(Образец.Данные);
	НоваяСтраница.ДанныеДопСтрок = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(Образец.ДанныеДопСтрок);
	
КонецПроцедуры

Процедура ВставитьЗначениеДопСтроки(ДанныеДопСтрок, КлючПоказателя, Значение)
	
	Перем ТаблицаПоказателя;
	
	СоставКлюча = СтрРазделить(КлючПоказателя, "_");
	Если СоставКлюча.Количество() < 2 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКолонки = СоставКлюча[0];
	ИмяТаблицы = Лев(ИмяКолонки, СтрДлина(ИмяКолонки) - 2);
	
	ДанныеДопСтрок.Свойство(ИмяТаблицы, ТаблицаПоказателя);
	Если ТаблицаПоказателя = Неопределено Тогда
		ТаблицаПоказателя = Новый ТаблицаЗначений;
		ТаблицаПоказателя.Колонки.Добавить(ИмяКолонки);
	КонецЕсли;
	
	ТаблицаПоказателя.Очистить();
	НоваяСтрока = ТаблицаПоказателя.Добавить();
	НоваяСтрока[ИмяКолонки] = Значение;
	
	ДанныеДопСтрок.Вставить(ИмяТаблицы, ТаблицаПоказателя);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеЗаявлений

Функция ДанныеЗаполненияЗаявлений(ПараметрыОтчета)
	
	Перем ПараметрыЗаполнения;
	
	Если ПараметрыОтчета.Свойство("ПараметрыЗаполнения", ПараметрыЗаполнения) И ПараметрыЗаполнения <> Неопределено Тогда
		ВидыДеятельности = ПараметрыЗаполнения.ВидыДеятельности;
	Иначе
		ВидыДеятельности = Неопределено;
	КонецЕсли;
	
	ПоказателиВидовДеятельности = ВидыДеятельности(
		ПараметрыОтчета.Организация,
		ПараметрыОтчета.КодНалоговогоОргана,
		ВидыДеятельности);
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ВидыДеятельности", ПоказателиВидовДеятельности);
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция КоличествоВидовДеятельностиНаЛистеЗаявления()
	
	Возврат 3;
	
КонецФункции

Функция ЭтоЗаявлениеОПостановкеНаУчет(ВидЗаявления)
	
	Возврат ВидЗаявления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД1
		Или ВидЗаявления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД2;
	
КонецФункции

Функция ЭтоЗаявлениеОСнятииСУчета(ВидЗаявления)
	
	Возврат ВидЗаявления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД3
		Или ВидЗаявления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД4;
	
КонецФункции

#КонецОбласти

#Область ПомощникРасчетаЕНВД

Функция ОписаниеДействияДекларация(Организация, РегистрацияВНалоговомОргане, ПорядокУплаты)
	
	Если ПорядокУплаты = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОписаниеДействия = ВыполнениеЗадачБухгалтера.ОписаниеДействияДекларация(
		ПорядокУплаты.Правило,
		ПорядокУплаты.ПериодСобытия,
		Организация,
		РегистрацияВНалоговомОргане);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияПлатежПоДаннымДекларации(Организация, РегистрацияВНалоговомОргане, ПорядокУплаты, СпособОплаты)
	
	Если ПорядокУплаты = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОписаниеДействия = ВыполнениеЗадачБухгалтера.ОписаниеДействияПлатежПоДаннымДекларации(
		Организация,
		РегистрацияВНалоговомОргане,
		СпособОплаты,
		ПорядокУплаты.Срок,
		ПорядокУплаты.Правило,
		ПорядокУплаты.ПериодСобытия,
		ПорядокУплаты.Наименование);
	
	Возврат ОписаниеДействия;
	
КонецФункции

#КонецОбласти

// Заполняет адрес и код ОКТМО для видов деятельности, которые регистрируются по месту нахождения организации
//
Процедура ЗаполнитьАдресПриРегистрацияПоМестуНахожденияОрганизации(Организация, ВидыДеятельности)
	
	НайденныеСтроки = ВидыДеятельности.НайтиСтроки(Новый Структура("РегистрацияПоМестуНахожденияОрганизации", Истина));
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаКИ = УправлениеКонтактнойИнформациейБП.КонтактнаяИнформацияОбъектовНаДату(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Организация), , Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	
	Если ТаблицаКИ.Количество() > 0 Тогда 
		ЮрАдресОрганизации = ТаблицаКИ[0];
	Иначе
		ЮрАдресОрганизации = Неопределено;
	КонецЕсли;
	
	КодПоОКТМО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "РегистрацияВНалоговомОргане.КодПоОКТМО");
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		
		Если ЮрАдресОрганизации <> Неопределено Тогда 
			Строка.Адрес        = ЮрАдресОрганизации.ЗначенияПолей;
			Строка.АдресСтрокой = ЮрАдресОрганизации.Представление;
		КонецЕсли;
		
		Строка.КодПоОКТМО   = КодПоОКТМО;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
