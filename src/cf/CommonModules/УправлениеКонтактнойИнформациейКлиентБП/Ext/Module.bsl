////////////////////////////////////////////////////////////////////////////////
// Подсистема "Контактная информация Бухгалтерии предприятия".
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс


// Обработчик события НачалоВыбора поля формы контактной информации.
// Вызывается из подключаемых действий при внедрении подсистемы "Контактная информация".
//
// Параметры:
//     Форма                - УправляемаяФорма - Форма владельца контактной информации.
//     Элемент              - ПолеФормы        - Элемент формы, содержащий представление контактной информации.
//     Модифицированность   - Булево           - Устанавливаемый флаг модифицированности формы.
//     СтандартнаяОбработка - Булево           - Устанавливаемый флаг стандартной обработки события формы.
//
Процедура НачалоВыбора(Форма, Элемент, Модифицированность = Истина, СтандартнаяОбработка = Ложь) Экспорт
	СтандартнаяОбработка = Ложь;
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяРеквизита", Элемент.Имя);
	
	ЭтоТабличнаяЧасть = ЭтоТабличнаяЧасть(Элемент);
	
	Если ЭтоТабличнаяЧасть Тогда
		ДанныеЗаполнения = Форма.Элементы[Форма.ТекущийЭлемент.Имя].ТекущиеДанные;
		Если ДанныеЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;
	Иначе
		ДанныеЗаполнения = Форма;
	КонецЕсли;
	
	ДанныеСтроки = ПолучитьСтрокуДополнительныхЗначений(Форма, Элемент, ЭтоТабличнаяЧасть);
	
	// Если представление было изменено в поле и не соответствует реквизиту, то приводим в соответствие.
	Если Элемент.Вид = ВидПоляФормы.ПолеВвода Тогда
		Если ДанныеЗаполнения[Элемент.Имя] <> Элемент.ТекстРедактирования Тогда
			ДанныеЗаполнения[Элемент.Имя] = Элемент.ТекстРедактирования;
			УправлениеКонтактнойИнформациейКлиент.ПриИзменении(Форма, Элемент, ЭтоТабличнаяЧасть);
			Форма.Модифицированность = Истина;
		КонецЕсли;
		ТекстРедактирования = Элемент.ТекстРедактирования;
	Иначе 
		ТекстРедактирования = ?(ЗначениеЗаполнено(ДанныеСтроки.ЗначенияПолей), Форма[Элемент.Имя], "");
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидКонтактнойИнформации", ДанныеСтроки.Вид);
	ПараметрыОткрытия.Вставить("ЗначенияПолей", ДанныеСтроки.ЗначенияПолей);
	ПараметрыОткрытия.Вставить("Представление", ТекстРедактирования);
	ПараметрыОткрытия.Вставить("ТолькоПросмотр", Форма.ТолькоПросмотр);
	ПараметрыОткрытия.Вставить("КонтактнаяИнформацияОписаниеДополнительныхРеквизитов", Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов);
	
	Если Не ЭтоТабличнаяЧасть Тогда
		ПараметрыОткрытия.Вставить("Комментарий", ДанныеСтроки.Комментарий);
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПредставлениеНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура);
	Оповещение.ДополнительныеПараметры.Вставить("ДанныеЗаполнения",  ДанныеЗаполнения);
	Оповещение.ДополнительныеПараметры.Вставить("ЭтоТабличнаяЧасть", ЭтоТабличнаяЧасть);
	Оповещение.ДополнительныеПараметры.Вставить("ДанныеСтроки",      ДанныеСтроки);
	Оповещение.ДополнительныеПараметры.Вставить("Элемент",           Элемент);
	Оповещение.ДополнительныеПараметры.Вставить("Результат",         Результат);
	Оповещение.ДополнительныеПараметры.Вставить("Форма",             Форма);
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия,, Оповещение);
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Завершение немодальных диалогов.

Процедура ПредставлениеНачалоВыбораЗавершение(Знач РезультатЗакрытия, Знач ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаполнения = ДополнительныеПараметры.ДанныеЗаполнения;
	НоваяСтрока      = ДополнительныеПараметры.ДанныеСтроки;
	Результат        = ДополнительныеПараметры.Результат;
	Элемент          = ДополнительныеПараметры.Элемент;
	Форма            = ДополнительныеПараметры.Форма;
	
	ТекстПредставления = РезультатЗакрытия.Представление;
	
	Если НоваяСтрока.Свойство("ХранитьИсториюИзменений") И НоваяСтрока.ХранитьИсториюИзменений Тогда
		КонтактнаяИнформацияОписаниеДополнительныхРеквизитов = ДанныеЗаполнения.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
		Отбор = Новый Структура("Вид", НоваяСтрока.Вид);
		НайденныеСтроки = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
		Для Каждого СтрокаКонтактнойИнформации Из НайденныеСтроки Цикл
			КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Удалить(СтрокаКонтактнойИнформации);
		КонецЦикла;
		
		Отбор = Новый Структура("Вид", НоваяСтрока.Вид);
		НайденныеСтроки = РезультатЗакрытия.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
		ЭтоИсторическаяКонтактнаяИнформация = Ложь;
		ПоследниеЗначениеПолей = "";
		
		Для Каждого СтрокаКонтактнойИнформации Из НайденныеСтроки Цикл
			Если НЕ СтрокаКонтактнойИнформации.ЭтоИсторическаяКонтактнаяИнформация Тогда
				Если СтрСравнить(СтрокаКонтактнойИнформации.ЗначенияПолей, РезультатЗакрытия.КонтактнаяИнформация) <> 0 Тогда
					Если СтрокаКонтактнойИнформации.ДействуетС < НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса()) Тогда
						// Контактная информация стала историей.
						НоваяКонтактнаяИнформация = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяКонтактнаяИнформация, СтрокаКонтактнойИнформации);
						НоваяКонтактнаяИнформация.ЭтоИсторическаяКонтактнаяИнформация = Истина;
						НоваяКонтактнаяИнформация.ИмяРеквизита= "";
					КонецЕсли;
						// Новая контактная информация.
						НоваяКонтактнаяИнформация = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяКонтактнаяИнформация, РезультатЗакрытия);
						НоваяКонтактнаяИнформация.ЗначенияПолей = РезультатЗакрытия.КонтактнаяИнформация;
						НоваяКонтактнаяИнформация.ДействуетС = НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса());
						НоваяКонтактнаяИнформация.ИмяРеквизита = Элемент.Имя;
						НоваяКонтактнаяИнформация.ХранитьИсториюИзменений = Истина;
						НоваяКонтактнаяИнформация.ЭтоИсторическаяКонтактнаяИнформация = Ложь;
				Иначе
					НоваяКонтактнаяИнформация = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяКонтактнаяИнформация, СтрокаКонтактнойИнформации);
				КонецЕсли;
			Иначе
				НоваяКонтактнаяИнформация = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяКонтактнаяИнформация, СтрокаКонтактнойИнформации);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЭтоТабличнаяЧасть Тогда
		ДанныеЗаполнения[Элемент.Имя + "ЗначенияПолей"] = РезультатЗакрытия.КонтактнаяИнформация;
		
	Иначе
		Если ПустаяСтрока(НоваяСтрока.Комментарий) И Не ПустаяСтрока(РезультатЗакрытия.Комментарий) Тогда
			Результат.Вставить("ЭтоДобавлениеКомментария", Истина);
			
		ИначеЕсли Не ПустаяСтрока(НоваяСтрока.Комментарий) И ПустаяСтрока(РезультатЗакрытия.Комментарий) Тогда
			Результат.Вставить("ЭтоДобавлениеКомментария", Ложь);
			
		Иначе
			Если Не ПустаяСтрока(НоваяСтрока.Комментарий) Тогда
				ЭлементКомментария = Форма.Элементы.Найти("Комментарий" + Элемент.Имя);
				Если ЭлементКомментария <> Неопределено Тогда
					ЭлементКомментария.Заголовок = РезультатЗакрытия.Комментарий;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		НоваяСтрока.Представление = ТекстПредставления;
		НоваяСтрока.ЗначенияПолей = РезультатЗакрытия.КонтактнаяИнформация;
		НоваяСтрока.Комментарий   = РезультатЗакрытия.Комментарий;
	КонецЕсли;
	
	Если РезультатЗакрытия.Свойство("АдресВВидеГиперссылки")
		И РезультатЗакрытия.АдресВВидеГиперссылки
		И НЕ ЗначениеЗаполнено(ТекстПредставления) Тогда
			ДанныеЗаполнения[Элемент.Имя] = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки();
	Иначе
		ДанныеЗаполнения[Элемент.Имя] = ТекстПредставления;
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
	
	Форма.ПослеИзмененияКонтактнойИнформации(Результат);
	
	ОбновитьКонтактнуюИнформациюФормы(Форма, Результат);
КонецПроцедуры

Процедура ПоказатьНаКартеНажатиеЗавершение(ИмяКартографическогоСервиса, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ИмяКартографическогоСервиса) = Тип("ЭлементСпискаЗначений") И ДополнительныеПараметры.Свойство("Адрес") Тогда
		
		УправлениеКонтактнойИнформациейКлиент.ПоказатьАдресНаКарте(
			ДополнительныеПараметры.Адрес, 
			ИмяКартографическогоСервиса.Значение);
		
		Комментарий = СтрШаблон(
			НСтр("ru = 'Объект: %1 Сервис: %2'"),
			ДополнительныеПараметры.Объект,
			ИмяКартографическогоСервиса.Представление);
			
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(
			НСтр("ru = 'Переход на карту'"),
			"Информация", Комментарий,
			,
			Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Контекстный вызов
Процедура ОбновитьКонтактнуюИнформациюФормы(Форма, Результат)
	
	Форма.Подключаемый_ОбновитьКонтактнуюИнформацию(Результат);
	
КонецПроцедуры

Процедура ПоказатьНаКартеНажатие(Форма, Элемент, Знач Адрес) Экспорт
	
	СписокСервисовКартографии = Новый СписокЗначений;
	СписокСервисовКартографии.Добавить("ЯндексКарты", "Яндекс.Карты");
	СписокСервисовКартографии.Добавить("GoogleMaps", "Google Карты");
	
	Адрес = АдресБезИндекса(Адрес);
	
	ПараметрыОповещения = Новый Структура();
	ПараметрыОповещения.Вставить("Адрес", Адрес);
	
	ПараметрыОповещения.Вставить("Объект", ИмяОбъектаФормы(Форма));
	
	Оповещение = Новый ОписаниеОповещения("ПоказатьНаКартеНажатиеЗавершение", ЭтотОбъект, ПараметрыОповещения);
	
	Форма.ПоказатьВыборИзМеню(Оповещение, СписокСервисовКартографии, Элемент);

КонецПроцедуры

#Область ИсторияКонтактнойИнформации

Процедура ИсторияИзмененийАдресаНажатие(Форма, ВидКИ) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ОтборКИ = Новый Структура("Вид", ВидКИ);
	СтрокиКИ = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(ОтборКИ);
	Если СтрокиКИ.Количество() = 0 Тогда
		ТекущийАдрес = Неопределено;
	Иначе
		ТекущийАдрес = Новый Структура("ЗначенияПолей, Представление",
			СтрокиКИ[0].ЗначенияПолей, СтрокиКИ[0].Представление);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Вид, ТекущийАдрес, ИсторияИзмененийАдреса, ТолькоПросмотр",
		ВидКИ,
		ТекущийАдрес,
		Объект.ИсторияКонтактнойИнформации,
		Форма.ТолькоПросмотр);
	
	ОткрытьФорму("ОбщаяФорма.РедактированиеИсторииКонтактнойИнформации", ПараметрыФормы, Форма);

КонецПроцедуры

Процедура УстановитьАдресПослеРедактированияИстории(Форма, НаборЗаписей, Элемент) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	Форма.Модифицированность = Истина;
	
	НаборЗаписей.Сортировать("Период");
	
	Объект.ИсторияКонтактнойИнформации.Очистить();
	Если НаборЗаписей.Количество() > 1 Тогда
		Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
			ЗаписьИстории = Объект.ИсторияКонтактнойИнформации.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьИстории, ЗаписьНабора);
		КонецЦикла;
	КонецЕсли;
	
	СтрокаАдреса = НаборЗаписей[НаборЗаписей.Количество()-1];
	ОтборКИ = Новый Структура("ИмяРеквизита", Элемент.Имя);
	СтрокиКИ = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(ОтборКИ);
	Если СтрокиКИ.Количество() = 0 Тогда
		СтрокаКИ = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Добавить();
		СтрокаКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес");
		СтрокаКИ.ИмяРеквизита = Элемент.Имя;
		СтрокаКИ.ИмяЭлементаДляРазмещения = "ГруппаКомпоновкиКонтактнойИнформации";
	Иначе
		СтрокаКИ = СтрокиКИ[0];
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(СтрокаКИ, СтрокаАдреса);
	Форма[Элемент.Имя] = СтрокаАдреса.Представление;
	
КонецПроцедуры

Процедура УстановитьАктуальноеЗначениеИсторииИзмененийАдреса(Форма, Элемент) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	КоличествоЗаписей = Объект.ИсторияКонтактнойИнформации.Количество();
	
	Если КоличествоЗаписей > 0 Тогда
		
		ОтборКИ = Новый Структура("ИмяРеквизита", Элемент.Имя);
		СтрокиКИ = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(ОтборКИ);
		Если СтрокиКИ.Количество() = 0 Тогда
			
			Возврат;
			
		КонецЕсли;
		Объект.ИсторияКонтактнойИнформации.Сортировать("Период");
		АктуальнаяЗаписьИстории = Объект.ИсторияКонтактнойИнформации[КоличествоЗаписей - 1];
		ЗаполнитьЗначенияСвойств(АктуальнаяЗаписьИстории, СтрокиКИ[0]);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает строку дополнительных значений по имени реквизита.
//
// Параметры:
//    Форма   - УправляемаяФорма - передаваемая форма.
//    Элемент - ДанныеФормыСтруктураСКоллекцией - данные формы.
//
// Возвращаемое значение:
//    СтрокаКоллекции - найденные данные.
//    Неопределено    - при отсутствии данных.
//
Функция ПолучитьСтрокуДополнительныхЗначений(Форма, Элемент, ЭтоТабличнаяЧасть = Ложь)
	
	Отбор = Новый Структура("ИмяРеквизита", Элемент.Имя);
	Строки = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	ДанныеСтроки = ?(Строки.Количество() = 0, Неопределено, Строки[0]);
	
	Если ЭтоТабличнаяЧасть И ДанныеСтроки <> Неопределено Тогда
		
		ПутьКСтроке = Форма.Элементы[Форма.ТекущийЭлемент.Имя].ТекущиеДанные;
		
		ДанныеСтроки.Представление = ПутьКСтроке[Элемент.Имя];
		ДанныеСтроки.ЗначенияПолей = ПутьКСтроке[Элемент.Имя + "ЗначенияПолей"];
		
	КонецЕсли;
	
	Возврат ДанныеСтроки;
	
КонецФункции

Функция ЭтоТабличнаяЧасть(Элемент)
	
	Родитель = Элемент.Родитель;
	
	Пока ТипЗнч(Родитель) <> Тип("УправляемаяФорма") Цикл
		
		Если ТипЗнч(Родитель) = Тип("ТаблицаФормы") Тогда
			Возврат Истина;
		КонецЕсли;
		
		Родитель = Родитель.Родитель;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ИмяОбъектаФормы(Форма)
	
	Перем ИмяОбъекта, ИмяФормыПоСловам;
	
	ИмяФормыПоСловам = СтрРазделить(Форма.ИмяФормы, ".");
	
	Пока ИмяФормыПоСловам.ВГраница() > 1 Цикл
		ИмяФормыПоСловам.Удалить(ИмяФормыПоСловам.ВГраница());
	КонецЦикла;
	
	Возврат СтрСоединить(ИмяФормыПоСловам, ".");

КонецФункции

Функция АдресБезИндекса(Адрес)
	
	// Если индекс стоит вначале, то Google Карты не находят такой адрес.
	// Для правильного поиска уберем индекс из строки адреса.
	
	МассивЭлементовАдреса = СтрРазделить(Адрес, ",");
	Если МассивЭлементовАдреса.Количество() < 1 Тогда
		// Слишком мало элементов, с большой вероятностью индекса в адресе нет.
		Возврат Адрес;
	КонецЕсли;
	
	Индекс = СокрЛП(МассивЭлементовАдреса[0]);
	
	Если НЕ (СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Индекс) И СтрДлина(Индекс) = 6) Тогда
		// Это не индекс.
		Возврат Адрес;
	КонецЕсли;
	
	// Удалим индекс.
	МассивЭлементовАдреса.Удалить(0);
	
	// Формируем новую строку адреса.
	Возврат СокрЛП(СтрСоединить(МассивЭлементовАдреса, ","));
	
КонецФункции

#КонецОбласти