#Область ПрограммныйИнтерфейс

// Определяет, используется ли документ РегламентнаяОперация для переданного вида операции
//
// Параметры:
//  ВидыРегламентныхОпераций - ПеречислениеСсылка.ВидыРегламентныхОпераций
//
// Возвращаемое значение:
//  Булево
Функция ИспользуетсяДокументРегламентнаяОперация(ВидОперации) Экспорт
	
	ТипВидыРегламентныхОпераций = Тип("ПеречислениеСсылка.ВидыРегламентныхОпераций");
	Возврат ТипЗнч(ВидОперации) = ТипВидыРегламентныхОпераций 
		И ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыРегламентныхОпераций.НачислениеНДС")
		И ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыРегламентныхОпераций.НачислениеЗарплаты")
		И ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыРегламентныхОпераций.НачислениеРезерваОтпусков");
		
КонецФункции

// Определяет, мешает ли операция считать месяц закрытым
//
// Параметры:
//  Операция - Строка таблицы значений, которая содержит колонки Требуется, Устарела и Состояние. 
//             Такую таблицу готовит процедура ЗакрытиеМесяца.СоздатьДетальныйСтатусЗакрытияМесяца()
//             Такая же таблица используется в форме Обработки.ЗакрытиеМесяца
//
// Возвращаемое значение:
//  Булево - Истина - требуется что-то сделать - выполнить или пропустить
//         - Ложь - не мешает считать месяц закрытым
Функция ОперацияВРаботе(Операция) Экспорт
	
	Если Не Операция.Требуется Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Операция.Устарела
		Или Операция.Состояние = ПредопределенноеЗначение("Перечисление.ВидыСостоянийРегламентныхОпераций.ВыполненоСОшибками")
		Или Операция.Состояние = ПредопределенноеЗначение("Перечисление.ВидыСостоянийРегламентныхОпераций.НеВыполнено");
	
КонецФункции

Функция СобытиеЖурналаРегистрации(ВидОперации = Неопределено) Экспорт
	
	Возврат НСтр("ru = 'Закрытие месяца'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

// Возвращает структуру параметров, используемых алгоритмом актуализации.
//
Функция НовыеПараметрыАктуализации() Экспорт
	
	ПараметрыАктуализации = Новый Структура;
	
	ПараметрыАктуализации.Вставить("Организация",                  ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
	ПараметрыАктуализации.Вставить("Период",                       '00010101'); // месяц, до которого выполняется актуализация
	ПараметрыАктуализации.Вставить("ОтборыРасчетыСКонтрагентами"); // см. БухгалтерскиеОтчетыКлиентСервер.ОпределитьПараметрыОтчетаРасчетыСКонтрагентами()
	ПараметрыАктуализации.Вставить("ДанныеРасшифровки");           // см. БухгалтерскиеОтчетыКлиентСервер.ПодготовитьДанныеРасшифровкиДляФоновогоЗадания()
	
	ПараметрыАктуализации.Вставить("ИдентификаторЗадания");          // идентификатор фонового задания
	ПараметрыАктуализации.Вставить("УникальныйИдентификаторФормы");  // идентификатор формы, откуда вызвано фоновое задание
	ПараметрыАктуализации.Вставить("АдресХранилищаСОшибками",      ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор));
	
	// Требуется ли проверять, что в настройках включен анализ актуальности.
	ПараметрыАктуализации.Вставить("ПроверятьКонстантуАктуальностиДанныхУчета", Ложь);
	
	// Требуется ли выполнять лишь частичную актуализацию.
	ПараметрыАктуализации.Вставить("АктуализацияДляРасчетаНалога", Истина);
	ПараметрыАктуализации.Вставить("АктуализироватьВесьПериод", Ложь);
	
	Возврат ПараметрыАктуализации;
	
КонецФункции

// Возвращает структуру параметров актуализации, вызванной из отчета.
//
Функция НовыйПараметрыАктуализацииОтчета() Экспорт
	
	ПараметрыАктуализации = Новый Структура;
	
	ПараметрыАктуализации.Вставить("Организация",                       ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
	ПараметрыАктуализации.Вставить("ВключатьОбособленныеПодразделения", Ложь);
	ПараметрыАктуализации.Вставить("ДатаАктуальности",                  '00010101');
	ПараметрыАктуализации.Вставить("ДатаОкончанияАктуализации",         '00010101');
	
	Возврат ПараметрыАктуализации;
	
КонецФункции

// Возвращает структуру - результат запуска фоновой актуализации по умолчанию
//
Функция НовыйРезультатАктуализации() Экспорт
	
	РезультатАктуализации = Новый Структура;
	
	РезультатАктуализации.Вставить("Выполнено",                    Ложь);
	РезультатАктуализации.Вставить("ВывестиИнформациюУведомлений", Ложь);
	
	// Актуализированы все расчеты, а не только отложенные расчеты с контрагентами.
	РезультатАктуализации.Вставить("ПолнаяАктуализация", Ложь);
	
	// Выполнены только рег.операции, поставляющие данные для расчета налога.
	РезультатАктуализации.Вставить("АктуализацияДляРасчетаНалога", Ложь);
	
	Возврат РезультатАктуализации;
	
КонецФункции

#Область ИндикацияХодаВыполнения

Функция ИмяЭтапаПерепроведениеДокументов() Экспорт

	Возврат "ПерепроведениеДокументов";

КонецФункции

Функция ИмяЭтапаАктуализацияРасчетовСКонтрагентами() Экспорт

	Возврат "АктуализацияРасчетовСКонтрагентами";

КонецФункции

Функция ИмяЭтапаЗакрытиеМесяца() Экспорт

	Возврат "ЗакрытиеМесяца";

КонецФункции

// Возвращает структуру параметров для сообщений прогресса выполнения.
//
Функция НовыеПараметрыСообщенийПрогресса() Экспорт

	Результат = Новый Структура();
	Результат.Вставить("Месяц",            '0001-01-01');
	Результат.Вставить("Организация",      ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
	Результат.Вставить("ИмяЭтапа",         ""); // См. ЗакрытиеМесяцаКлиентСервер.ИмяЭтапаХХХ()
	Результат.Вставить("НачальноеЗначение"); 	// Число или Дата - начальная граница диапазона
	Результат.Вставить("КонечноеЗначение");  	// Число или Дата - конечная граница диапазона
	Результат.Вставить("ДостигнутоеЗначение");  // Число или Дата - текущее положение
	
	// Сообщение прогресса связано с контролем наличия ранее запущенных фоновых заданий на файловой базе.
	Результат.Вставить("КонтрольРанееЗапущенных", Ложь); // Булево

	Возврат Результат;

КонецФункции

#КонецОбласти

#КонецОбласти

