#Область ПеременныеФормы

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

&НаКлиенте
Перем УИДЗамера;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НастройкиКлиента  = ХранилищеСистемныхНастроек.Загрузить("Общее/НастройкиКлиентскогоПриложения");
	
	ВходящийОтборПоОрганизации = Ложь;
	СтруктураОтбора = Неопределено;
	Если Параметры.Свойство("Отбор", СтруктураОтбора) И ТипЗнч(СтруктураОтбора) = Тип("Структура") Тогда
		ВходящийОтборПоОрганизации = СтруктураОтбора.Свойство("Организация", ОтборОрганизация);
		ОтборОрганизацияИспользование = ЗначениеЗаполнено(ОтборОрганизация);
	КонецЕсли;
	
	ОсновнаяОрганизация = Справочники.Организации.ОрганизацияПоУмолчанию();
	
	Если НЕ ВходящийОтборПоОрганизации И ОтборОрганизация <> ОсновнаяОрганизация Тогда
		ОтборОрганизация              = ОсновнаяОрганизация;
		ОтборОрганизацияИспользование = ЗначениеЗаполнено(ОтборОрганизация);
	КонецЕсли;
	
	УОрганизацииТолькоОдинБанковскийСчет = Справочники.БанковскиеСчета.КоличествоБанковскихСчетовОрганизации(ОтборОрганизация) = 1;
	ОсновнойБанковскийСчет = ?(УОрганизацииТолькоОдинБанковскийСчет, ОтборОрганизация.ОсновнойБанковскийСчет, Справочники.БанковскиеСчета.ПустаяСсылка());
	
	ВидимостьЭлементовДиректБанк = ?(УОрганизацииТолькоОдинБанковскийСчет, 
		ЭлектронноеВзаимодействиеБПВызовСервера.ВидимостьЭлементовДиректБанк(
		ОтборОрганизация, ОсновнойБанковскийСчет), "НеПоказывать");
		
	ПоказатьБаннерДиректБанк(ЭтотОбъект);
	
	УстановитьВосстановленныеОтборы();
	
	МожноРедактироватьБанк = ПравоДоступа("Редактирование", Метаданные.Документы.СписаниеСРасчетногоСчета)
		И ПравоДоступа("Редактирование", Метаданные.Документы.ПоступлениеНаРасчетныйСчет);
	МожноРедактироватьКассу = ПравоДоступа("Редактирование", Метаданные.Документы.РасходныйКассовыйОрдер)
		И ПравоДоступа("Редактирование", Метаданные.Документы.ПриходныйКассовыйОрдер);
	
	Элементы.СписокКонтекстноеМенюИзменитьВыделенные.Видимость = МожноРедактироватьКассу И МожноРедактироватьБанк;
	Элементы.ЗагрузитьИзКлиентБанк.Видимость = МожноРедактироватьБанк;
	Элементы.Список.ИзменятьСоставСтрок = МожноРедактироватьБанк И МожноРедактироватьКассу;
	
	ДанныеИтогов(ЭтотОбъект);
	
	УстановитьУсловноеОформление();
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтотОбъект,
		"БП.ЖурналДокументов.Деньги",
		"ФормаСпискаПростойИнтерфейс",
		НСтр("ru = 'Новости: Деньги'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
	УстановитьПрименяетсяУСНПатент();
	
	Элементы.ГруппаВидеоролики.Видимость = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ВРег("ЖурналДеньги"), 
		ВРег("Видеоролики"), 
		Истина);
		
	ТарификацияБП.РазместитьИнформациюОбОграниченииПоКоличествуОбъектов(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	СтруктураОтбора = Неопределено;
	Если Параметры.Свойство("Отбор", СтруктураОтбора) И ЗначениеЗаполнено(СтруктураОтбора) Тогда
		
		Если СтруктураОтбора.Свойство("Организация") И ЗначениеЗаполнено(СтруктураОтбора.Организация) Тогда
			ОтборОрганизация = СтруктураОтбора.Организация;
			ОтборОрганизацияИспользование = ЗначениеЗаполнено(ОтборОрганизация);
		КонецЕсли;
		
		Параметры.Отбор = Неопределено;
		
	Иначе
		Если ОтборОрганизация <> ОсновнаяОрганизация Тогда
			ОтборОрганизация = ОсновнаяОрганизация;
			ОтборОрганизацияИспользование = ЗначениеЗаполнено(ОтборОрганизация);
		ИначеЕсли НЕ ОтборОрганизацияИспользование Тогда
			ОтборОрганизацияИспользование = ЗначениеЗаполнено(ОтборОрганизация);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВосстановленныеОтборы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
	ПодключитьОбработчикОжидания("ПоказатьИнформациюОПравеПримененияСпецрежима", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеОсновнойОрганизации" Тогда
		ОсновнаяОрганизация = Параметр;
		Если ОсновнаяОрганизация <> ОтборОрганизация Тогда
			ОтборОрганизация                 = ОсновнаяОрганизация;
			ОтборОрганизацияИспользование    = ЗначениеЗаполнено(ОтборОрганизация);
			
			УстановитьВосстановленныеОтборы(Истина);
			ПодключитьОбработчикОжидания("ПоказатьИнформациюОПравеПримененияСпецрежима", 0.1, Истина);
			
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьИтогиОбработчик", 0.2, Истина);
		
	ИначеЕсли ИмяСобытия = "ИзменениеВыписки" Тогда
		
		ПодключитьОбработчикОжидания("ПоказатьИнформациюОПравеПримененияСпецрежима", 0.1, Истина);
		
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьИтогиОбработчик", 0.2, Истина);
		
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
	ПрисоединенныеФайлыБПКлиент.ОбновитьСписокПослеДобавленияФайла(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
	Если ИмяСобытия = "ИзмененаНастройкаОбмена" Тогда
		
		ВидимостьЭлементовДиректБанк = ?(УОрганизацииТолькоОдинБанковскийСчет,
			ЭлектронноеВзаимодействиеБПВызовСервера.ВидимостьЭлементовДиректБанк(ОтборОрганизация, ОсновнойБанковскийСчет),
			"НеПоказывать");
			
		ПоказатьБаннерДиректБанк(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.СообщениеОбменСБанками") Тогда
		
		ВыпискиБанка.Очистить();
		ВыпискиБанка.Добавить(ВыбранноеЗначение);
		МассивВыписок = ВыпискиБанка.ВыгрузитьЗначения();
		АдресФайла    = ПолучитьДанныеВыпискиБанкаВФайл(МассивВыписок);
		
		ПрочитатьФайлВыпискиНаКлиенте(Новый ОписаниеПередаваемогоФайла(,АдресФайла));
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Массив") И ВыбранноеЗначение.Количество() > 0 Тогда
		
		ВыпискиБанка.Очистить();
		ВыпискиБанка.ЗагрузитьЗначения(ВыбранноеЗначение);
		Если ВыпискиБанка.Количество() > 0 Тогда
			МассивВыписок = ВыпискиБанка.ВыгрузитьЗначения();
			АдресФайла    = ПолучитьДанныеВыпискиБанкаВФайл(МассивВыписок);
			ПрочитатьФайлВыпискиНаКлиенте(Новый ОписаниеПередаваемогоФайла(,АдресФайла));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьПоступлениеНаРасчетныйСчет(Команда)
	
	КлючеваяОперация = "СозданиеФормыПоступлениеНаРасчетныйСчет";
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	
	СтруктураОтбора = ОбщегоНазначенияБПВызовСервера.ЗначенияЗаполненияДинамическогоСписка(Список.КомпоновщикНастроек);
	
	ОткрытьФорму("Документ.ПоступлениеНаРасчетныйСчет.ФормаОбъекта",
		Новый Структура("ЗначенияЗаполнения", СтруктураОтбора), ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСписаниеСРасчетногоСчета(Команда)
	
	КлючеваяОперация = "СозданиеФормыСписаниеСРасчетногоСчета";
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	
	СтруктураОтбора = ОбщегоНазначенияБПВызовСервера.ЗначенияЗаполненияДинамическогоСписка(Список.КомпоновщикНастроек);
	ОткрытьФорму("Документ.СписаниеСРасчетногоСчета.ФормаОбъекта",
		Новый Структура("ЗначенияЗаполнения", СтруктураОтбора), ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПриходныйКассовыйОрдер(Команда)
	
	КлючеваяОперация = "СозданиеФормыПриходныйКассовыйОрдер";
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	
	СтруктураОтбора = ОбщегоНазначенияБПВызовСервера.ЗначенияЗаполненияДинамическогоСписка(Список.КомпоновщикНастроек);
	ОткрытьФорму("Документ.ПриходныйКассовыйОрдер.ФормаОбъекта", Новый Структура("ЗначенияЗаполнения", СтруктураОтбора), ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРасходныйКассовыйОрдер(Команда)
	
	КлючеваяОперация = "СозданиеФормыРасходныйКассовыйОрдер";
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	
	СтруктураОтбора = ОбщегоНазначенияБПВызовСервера.ЗначенияЗаполненияДинамическогоСписка(Список.КомпоновщикНастроек);
	ОткрытьФорму("Документ.РасходныйКассовыйОрдер.ФормаОбъекта", Новый Структура("ЗначенияЗаполнения", СтруктураОтбора), ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзКлиентБанк(Команда)
	
	Организация = ?(ОтборОрганизацияИспользование, ОтборОрганизация, Неопределено);
	ЗагрузитьВыписку(Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)
	
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтотОбъект,
		Команда
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетАнализДвиженийДенежныхСредств(Команда)
	
	ОткрытьФормуОтчета("АнализДвиженийДенежныхСредств");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетОстаткиДенежныхСредств(Команда)
	
	ОткрытьФормуОтчета("ОстаткиДенежныхСредств");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПоступленияДенежныхСредств(Команда)
	
	ОткрытьФормуОтчета("ПоступленияДенежныхСредств");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетРасходыДенежныхСредств(Команда)
	
	ОткрытьФормуОтчета("РасходыДенежныхСредств");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетДоходыИРасходы(Команда)
	
	ОткрытьФормуОтчета("ДоходыРасходы");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетОборотныеСредства(Команда)

	ОткрытьФормуОтчета("ОборотныеСредства");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПродажиПоМесяцам(Команда)
	
	ОткрытьФормуОтчета("ПродажиПоМесяцам");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	УИДЗамера = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Ложь, "ОтборПоОрганизациямВЖурналеВыпискиПоБанку");
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
	ОтборОрганизацияПриИзмененииСервер();
	
	ПодключитьОбработчикОжидания("ПоказатьИнформациюОПравеПримененияСпецрежима", 0.1, Истина);
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьИтогиОбработчик", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияИспользованиеПриИзменении(Элемент)
	
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Организация");
	
	Если ОтборОрганизацияИспользование Тогда
		СкрытьРезультатСозданияДокументов(ЭтотОбъект);
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ПоказатьИнформациюОПравеПримененияСпецрежима", 0.1, Истина);
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьИтогиОбработчик", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НапомнитьПозжеНажатие(Элемент)
	
	ОтложитьПоказНапоминанияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодробнееНажатие(Элемент)
	
	ПерейтиПоНавигационнойСсылке(СсылкаНаСтатьюИТС);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияТекстРекламыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПодключитьДиректБанк" Тогда
		
		СтандартнаяОбработка = Ложь;
		Банк = ЗначениеРеквизитаОбъекта(ОсновнойБанковскийСчет, "Банк");
		ОбменСБанкамиКлиент.ОткрытьСоздатьНастройкуОбмена(ОтборОрганизация, Банк);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСкрытьРекламуДиректБанкНажатие(Элемент)
	
	Банк = ЗначениеРеквизитаОбъекта(ОсновнойБанковскийСчет, "Банк");
	ЭлектронноеВзаимодействиеБПВызовСервера.СохранитьНастройкуВидимостиРекламыДиректБанк(Банк, Ложь);
	ВидимостьЭлементовДиректБанк = "ПоказатьГиперссылку";
	ПоказатьБаннерДиректБанк(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьВидеороликиНажатие(Элемент)
	
	Элементы.ГруппаВидеоролики.Видимость = Ложь;
	СохранитьОтключениеВидимостиВидеороликов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыСписок

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	ДанныеСтроки = ОбщегоНазначенияБПКлиент.ТекущиеДанныеДинамическогоСписка(Элементы.Список);
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеСтроки.Ссылка) = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет") Тогда
		КлючеваяОперация = "ОткрытиеФормыПоступлениеНаРасчетныйСчет";
	ИначеЕсли ТипЗнч(ДанныеСтроки.Ссылка) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
		КлючеваяОперация = "ОткрытиеФормыСписаниеСРасчетногоСчета";
	ИначеЕсли ТипЗнч(ДанныеСтроки.Ссылка) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		КлючеваяОперация = "ОткрытиеФормыПриходныйКассовыйОрдер";
	ИначеЕсли ТипЗнч(ДанныеСтроки.Ссылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		КлючеваяОперация = "ОткрытиеФормыРасходныйКассовыйОрдер";
	КонецЕсли;
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриИзменении(Элемент)
	
	Оповестить("ИзменениеВыписки");
	ПодключитьОбработчикОжидания("ПоказатьИнформациюОПравеПримененияСпецрежима", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Строка <> Неопределено Тогда
		
		Если ПрисоединенныеФайлыБПКлиент.ПараметрыПеретаскиванияСодержатФайлы(ПараметрыПеретаскивания) Тогда
			
			СтандартнаяОбработка = Ложь;
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Ссылка"                 , Строка);
			ДополнительныеПараметры.Вставить("ПараметрыПеретаскивания", ПараметрыПеретаскивания);
			ДополнительныеПараметры.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПеретаскиваниеФайловОтветПолучен",
				ПрисоединенныеФайлыБПКлиент,
				ДополнительныеПараметры);
			ШаблонВопроса = НСтр("ru='Присоединить файлы к документу %1?'");
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонВопроса, Строка);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса,РежимДиалогаВопрос.ДаНет);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗагрузкаВыписки

&НаКлиенте
Процедура ЗагрузитьВыписку(Организация, БанковскийСчет = Неопределено)
	
	СоглашениеЭД = Неопределено;
	Если Не ЗначениеЗаполнено(БанковскийСчет) Тогда
		БанковскийСчет = ОсновнойБанковскийСчет;
	КонецЕсли;
	
	НастройкиБанковскогоСчета = НастройкиКлиентБанкаДляБанковскогоСчета(Организация, ?(Организация <> Неопределено, БанковскийСчет, Неопределено));
	Если НастройкиБанковскогоСчета.ПередЗагрузкойПоказыватьФормуОбменаСБанком Тогда
		ОткрытьФормуКлиентБанка();
	ИначеЕсли НастройкиБанковскогоСчета.ЕстьПрямойОбменСБанками Тогда
		ЗагрузитьВыпискуПоПрямомуОбмену(НастройкиБанковскогоСчета);
	Иначе
		ЗагрузитьВыпискуЧерезФайл(НастройкиБанковскогоСчета.ФайлЗагрузки);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыборСчетаДляЗагрузкиВыпискиЗавершение(ВыбранныйБанковскийСчет, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйБанковскийСчет = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если НЕ ОтборОрганизацияИспользование ИЛИ НЕ ЗначениеЗаполнено(ОтборОрганизация) Тогда
		ОтборОрганизация              = ПолучитьРеквизитСчета(ВыбранныйБанковскийСчет, "Владелец");
		ОтборОрганизацияИспользование = Истина;
		ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Организация");
	КонецЕсли;
	
	// Загрузим выписку по выбранному счету
	ЗагрузитьВыписку(ОтборОрганизация, ВыбранныйБанковскийСчет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьФайлВыпискиНаКлиенте(ОписаниеФайла, Кодировка = Неопределено) Экспорт
	
	Результат = ЗагрузитьБанковскуюВыпискуНаСервере(ОписаниеФайла, Кодировка);
	Если НЕ Результат.ЗаданиеВыполнено Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания);
		ИдентификаторЗадания    = Результат.ИдентификаторЗадания;
		АдресХранилища          = Результат.АдресХранилища;
	Иначе
		ОбработатьЗагрузкуБанковскойВыписки(Результат.РезультатЗагрузки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьБанковскуюВыпискуНаСервере(ОписаниеФайла, Кодировка)
	
	Элементы.ГруппаСостояниеЗагрузкиИзКлиентБанка.Видимость = Ложь;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ФайлЗагрузки",                            ОписаниеФайла.Имя);
	СтруктураПараметров.Вставить("АдресХранилищаРаспознанныеДанныеИзБанка", ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор));
	СтруктураПараметров.Вставить("Кодировка",                               Кодировка);
	Если НЕ ПустаяСтрока(ОписаниеФайла.Хранение) Тогда
		СтруктураПараметров.Вставить("ДвоичныеДанные", ПолучитьИзВременногоХранилища(ОписаниеФайла.Хранение));
	КонецЕсли;
	СведенияОВладельцеБанковскогоСчетаИзКонтекста = Новый Структура;
	СведенияОВладельцеБанковскогоСчетаИзКонтекста.Вставить("Организация",               Новый Массив);
	СведенияОВладельцеБанковскогоСчетаИзКонтекста.Вставить("БанковскийСчетОрганизации", Новый Массив);
	Если ЗначениеЗаполнено(ОтборОрганизация) Тогда
		СведенияОВладельцеБанковскогоСчетаИзКонтекста.Организация.Добавить(ОтборОрганизация);
	КонецЕсли;
	СтруктураПараметров.Вставить("СведенияОВладельцеБанковскогоСчетаИзКонтекста", СведенияОВладельцеБанковскогоСчетаИзКонтекста);
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Обработки.КлиентБанк.ФоноваяЗагрузкаБанковскойВыпискиИзЖурнала",
		СтруктураПараметров,
		НСтр("ru = 'Загрузка выписки из банка'"));
	
	АдресХранилища = Результат.АдресХранилища;
	
	Если Результат.ЗаданиеВыполнено Тогда
		Результат.Вставить("РезультатЗагрузки", ПолучитьИзВременногоХранилища(АдресХранилища));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьЗагрузкуБанковскойВыписки(РезультатЗагрузки)
	
	Для Каждого ТекстСообщения Из РезультатЗагрузки.СообщенияПользователю Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЦикла;
	
	Если РезультатЗагрузки.РезультатВыполнения = "ЕстьОшибкиЧтенияФайла" Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось прочитать файл'"));
		
	ИначеЕсли РезультатЗагрузки.РезультатВыполнения = "ЕстьОшибкиРаспознавания" ИЛИ
		РезультатЗагрузки.РезультатВыполнения = "ЕстьОшибкиСозданияКонтрагентов" ИЛИ
		РезультатЗагрузки.РезультатВыполнения = "ЕстьОшибкиСозданияДокументов" ИЛИ
		РезультатЗагрузки.РезультатВыполнения = "НеобходимоСоздатьКонтрагентов" Тогда
		
		Если РезультатЗагрузки.Свойство("Организация") Тогда
			ОтборОрганизация = РезультатЗагрузки.Организация;
			ОтборОрганизацияИспользование = ЗначениеЗаполнено(РезультатЗагрузки.Организация);
			ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Организация");
		КонецЕсли;
		
		ПараметрыФормыКлиентБанка = Новый Структура;
		ПараметрыФормыКлиентБанка.Вставить("АдресХранилищаРаспознанныеДанныеИзБанка", РезультатЗагрузки.АдресХранилищаРаспознанныеДанныеИзБанка);
		ПараметрыФормыКлиентБанка.Вставить("СообщенияПользователюВФормеОбменСБанком", РезультатЗагрузки.СообщенияПользователюВФормеОбменСБанком);
		ПараметрыФормыКлиентБанка.Вставить("НачалоПериода",                           ПериодНачало);
		ПараметрыФормыКлиентБанка.Вставить("КонецПериода",                            ПериодОкончание);
		ПараметрыФормыКлиентБанка.Вставить("СоглашениеЭД",                            СоглашениеЭД);
		ПараметрыФормыКлиентБанка.Вставить("ЭлектроннаяВыпискаБанка",                 ВыпискиБанка);
		
		Если РезультатЗагрузки.Свойство("ИмяФайла") Тогда 
			ПараметрыФормыКлиентБанка.Вставить("ФайлЗагрузки", РезультатЗагрузки.ИмяФайла);
		КонецЕсли;
		
		ОткрытьФормуКлиентБанка(ПараметрыФормыКлиентБанка);
		
	ИначеЕсли РезультатЗагрузки.РезультатВыполнения = "УспешнаяЗагрузка" Тогда
		
		Если РезультатЗагрузки.Свойство("Организация") Тогда
			ОтборОрганизация = РезультатЗагрузки.Организация;
			ОтборОрганизацияИспользование = ЗначениеЗаполнено(РезультатЗагрузки.Организация);
			ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Организация");
		КонецЕсли;
		
		Элементы.Список.Обновить();
		
		Если РезультатЗагрузки.Свойство("РезультатСозданияДокументов") Тогда
			ВалютаСчета = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатЗагрузки, "ВалютаСчета");
			ПоказатьРезультатСозданияДокументов(РезультатЗагрузки.РезультатСозданияДокументов, ВалютаСчета);
			
			ОповеститьОбИзменении(Тип("ДокументСсылка.СчетНаОплатуПокупателю"));
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьИтогиОбработчик", 0.2, Истина);
		ПодключитьОбработчикОжидания("ПоказатьИнформациюОПравеПримененияСпецрежима", 0.1, Истина);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКлиентБанка(ПараметрыФормы = Неопределено)
	
	Если ПараметрыФормы = Неопределено Тогда
		ПараметрыФормы = Новый Структура;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("РежимПоУмолчанию", "ГруппаЗагрузка");
	Если ОтборОрганизацияИспользование И ЗначениеЗаполнено(ОтборОрганизация) Тогда
		ПараметрыФормы.Вставить("Организация",    ОтборОрганизация);
	КонецЕсли;
		
	ОткрытьФорму("Обработка.КлиентБанк.Форма.Форма", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

#Область ПрямойОбменСБанком

&НаКлиенте
Процедура ЗагрузитьВыпискуПоПрямомуОбмену(НастройкиБанковскогоСчета)
	
	// Счет определен, начинаем получение выписки
	Если ЗначениеЗаполнено(НастройкиБанковскогоСчета.БанковскийСчет) Тогда
		ПолучитьВыпискиПоПрямомуОбменуСБанком(НастройкиБанковскогоСчета);
		
	// Счет не определен, спросим у пользователя по какому счету необходимо производить загрузку.
	// Может быть выбран счет по которому не подключен прямой обмен.
	// В этом случае производим загрузку через файл
	Иначе
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Новый Структура("Владелец", НастройкиБанковскогоСчета.Организация));
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборСчетаДляЗагрузкиВыпискиЗавершение", ЭтотОбъект, НастройкиБанковскогоСчета);
		ОткрытьФорму("Справочник.БанковскиеСчета.ФормаВыбора", ПараметрыФормы, ЭтотОбъект,,,,ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВыпискиПоПрямомуОбменуСБанком(НастройкиБанковскогоСчета)
	
	СоглашениеЭД     = НастройкиБанковскогоСчета.СоглашениеПрямогоОбменаСБанками;
	НомерСчета       = ПолучитьРеквизитСчета(НастройкиБанковскогоСчета.БанковскийСчет, "НомерСчета");
	// Необходимо определить период загрузки
	СтруктураПериода = ПериодЗагрузкиВыписки(НастройкиБанковскогоСчета);
	ПериодНачало     = СтруктураПериода.ДатаНачала;
	ПериодОкончание  = СтруктураПериода.ДатаОкончания;
	
	// Вызываем метод ЭДО
	// Выписка будет обработана в событии "ОбработкаВыбора"
	ОбменСБанкамиКлиент.ПолучитьВыпискуБанка(СоглашениеЭД, ПериодНачало, ПериодОкончание, ЭтотОбъект, НомерСчета);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПериодЗагрузкиВыписки(Знач НастройкиБанковскогоСчета)

	СтруктураПериода = Новый Структура;
	СтруктураПериода.Вставить("ДатаНачала");
	СтруктураПериода.Вставить("ДатаОкончания", ТекущаяДатаСеанса());
	// Если период рабочей даты меньше текущей даты сеанса, то используем рабочую дату
	ПериодРабочейДаты = ОбщегоНазначения.РабочаяДатаПользователя();
	Если ЗначениеЗаполнено(ПериодРабочейДаты) Тогда
		СтруктураПериода.ДатаОкончания = Мин(ПериодРабочейДаты, СтруктураПериода.ДатаОкончания);
	КонецЕсли;
	
	Организация    = НастройкиБанковскогоСчета.Организация;
	БанковскийСчет = НастройкиБанковскогоСчета.БанковскийСчет;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПоступлениеНаРасчетныйСчет.Дата КАК Дата
	|ИЗ
	|	Документ.ПоступлениеНаРасчетныйСчет КАК ПоступлениеНаРасчетныйСчет
	|ГДЕ
	|	ПоступлениеНаРасчетныйСчет.Организация = &Организация
	|	И ПоступлениеНаРасчетныйСчет.СчетОрганизации = &БанковскийСчет
	|	И ПоступлениеНаРасчетныйСчет.Проведен = ИСТИНА
	|	И ПоступлениеНаРасчетныйСчет.Дата < &Дата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СписаниеСРасчетногоСчета.Дата
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|ГДЕ
	|	СписаниеСРасчетногоСчета.Организация = &Организация
	|	И СписаниеСРасчетногоСчета.СчетОрганизации = &БанковскийСчет
	|	И СписаниеСРасчетногоСчета.Проведен = ИСТИНА
	|	И СписаниеСРасчетногоСчета.НеПодтвержденоВыпискойБанка = ЛОЖЬ
	|	И СписаниеСРасчетногоСчета.Дата < &Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
	Запрос.УстановитьПараметр("Дата",           СтруктураПериода.ДатаОкончания);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		СтруктураПериода.ДатаНачала = НачалоДня(Выборка.Дата);
	Иначе
		// Если дата неопределена, запросим данные за предыдущий квартал.
		СтруктураПериода.ДатаНачала = НачалоДня(ДобавитьМесяц(СтруктураПериода.ДатаОкончания, -3));
		
		// Ограничим период датой учетной политики
		Если НЕ УчетнаяПолитика.Существует(Организация, СтруктураПериода.ДатаНачала) Тогда
			// Учетная политика на эту дату не определена.
			// Используем дату начала учетной политики
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	УчетнаяПолитикаСрезПервых.Период
			|ИЗ
			|	РегистрСведений.УчетнаяПолитика.СрезПервых(, Организация = &Организация) КАК УчетнаяПолитикаСрезПервых";
			Запрос.УстановитьПараметр("Организация", Организация);
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				Выборка = РезультатЗапроса.Выбрать();
				Выборка.Следующий();
				СтруктураПериода.ДатаНачала = Выборка.Период;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураПериода;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеВыпискиБанкаВФайл(Знач МассивВыписок)
	
	МассивСчетов      = Новый Массив;
	СсылкаНаХранилище = "";
	ОбменСБанками.ПолучитьДанныеВыпискиБанкаТекстовыйФормат(МассивВыписок, СсылкаНаХранилище, МассивСчетов);
	
	Возврат СсылкаНаХранилище;
	
КонецФункции

#КонецОбласти

#Область ОбменЧерезФайл

&НаКлиенте
Процедура ЗагрузитьВыпискуЧерезФайл(ФайлЗагрузки)

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ФайлЗагрузки", ФайлЗагрузки);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьВыпискуЧерезФайлЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьВыпискуЧерезФайлЗавершение(ПодключеноРасширениеРаботыСФайлами, ДополнительныеПараметры) Экспорт
	
	РасширениеРаботыСФайламиПодключено = ПодключеноРасширениеРаботыСФайлами;
	
	Если ЗначениеЗаполнено(ДополнительныеПараметры.ФайлЗагрузки) И РасширениеРаботыСФайламиПодключено Тогда
		// Файл определен - можно начинаем чтение
		ОбменСБанкомКлиент.ЗагрузитьВыбранныйФайл(ДополнительныеПараметры.ФайлЗагрузки, ЭтотОбъект);
	Иначе
		// Файл не определен - запросим файл у пользователя
		ОбменСБанкомКлиент.ВыбратьИЗагрузитьФайл(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаКлиентБанка

&НаСервереБезКонтекста
Функция НастройкиКлиентБанкаДляБанковскогоСчета(Знач Организация, Знач БанковскийСчет)
	
	СтруктураНастроек = Обработки.КлиентБанк.ПолучитьНастройкиПрограммыКлиентаБанка(Организация, БанковскийСчет);
	Если ЗначениеЗаполнено(БанковскийСчет) Тогда
		СтруктураНастроек.Вставить("ЕстьПрямойОбменСБанками",
			ЗначениеЗаполнено(СтруктураНастроек.СоглашениеПрямогоОбменаСБанками));
	Иначе
		// Проверим есть ли в ИБ прямой обмен с банками.
		// Если есть, то следует спрашивать у пользователя,
		// по какому счету производится загрузка
		// Если прямого обмена нет, то предлагаем выбрать файл -
		// банковский счет определяем из файла.
		СтруктураНастроек.Вставить("ЕстьПрямойОбменСБанками",
			ЭлектронноеВзаимодействиеБП.ИспользуетсяПрямойОбменСБанком(Организация));
			
	КонецЕсли;
		
	Возврат СтруктураНастроек;
	
КонецФункции

#КонецОбласти

#Область ПрочиеПроцедуры

&НаКлиенте
Процедура СкрытьНажатие(Элемент)
	
	СкрытьРезультатСозданияДокументов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СкрытьРезультатСозданияДокументов(Форма)
	
	Элементы = Форма.Элементы;
	Если Элементы.ГруппаСостояниеЗагрузкиИзКлиентБанка.Видимость Тогда
		Элементы.ГруппаСостояниеЗагрузкиИзКлиентБанка.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРезультатСозданияДокументов(РезультатСозданияДокументов, ВалютаСчета)
	
	Элементы.ГруппаСостояниеЗагрузкиИзКлиентБанка.Видимость = Истина;
	
	Если НЕ РезультатСозданияДокументов.Свойство("КоличествоЗагружено") Тогда
		Элементы.ТекстСостояниеЗагрузки.Заголовок = НСтр("ru='Новых документов для загрузки не обнаружено'");
	Иначе
		ШаблонТекста = НСтр("ru = 'Загружено: [КоличествоДокументов]. Поступило: [СуммаПоступило] Списано: [СуммаСписано]'");
		
		СтрокаКоличествоДокументов = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(РезультатСозданияДокументов.КоличествоЗагружено, "документ, документа, документов");
		СтрокаСуммаПоступило       = ОбщегоНазначенияБПВызовСервера.ФорматСумм(РезультатСозданияДокументов.СуммаПоступило, ВалютаСчета, "0,00");
		СтрокаСуммаПоступило       = ?((Прав(СтрокаСуммаПоступило, 1) = "."), СтрокаСуммаПоступило, СтрокаСуммаПоступило + ".");
		СтрокаСуммаСписано         = ОбщегоНазначенияБПВызовСервера.ФорматСумм(РезультатСозданияДокументов.СуммаСписано, ВалютаСчета, "0,00");
		СтрокаСуммаСписано         = ?((Прав(СтрокаСуммаСписано, 1) = "."),   СтрокаСуммаСписано,   СтрокаСуммаСписано + ".");
		
		ВставляемыеЗначения = Новый Структура;
		ВставляемыеЗначения.Вставить("КоличествоДокументов", СтрокаКоличествоДокументов);
		ВставляемыеЗначения.Вставить("СуммаПоступило",       СтрокаСуммаПоступило);
		ВставляемыеЗначения.Вставить("СуммаСписано",         СтрокаСуммаСписано);
		Элементы.ТекстСостояниеЗагрузки.Заголовок = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонТекста, ВставляемыеЗначения);
		
		Если ЗначениеЗаполнено(РезультатСозданияДокументов.ПервыйЗагруженный) Тогда
			Элементы.Список.ТекущаяСтрока = РезультатСозданияДокументов.ПервыйЗагруженный;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРеквизитСчета(Знач БанковскийСчет, Знач ИмяРеквизита)
	
	Если ЗначениеЗаполнено(БанковскийСчет) Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, ИмяРеквизита);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ФоновоеЗадание

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			РезультатЗагрузки = ПолучитьИзВременногоХранилища(АдресХранилища);
			ОбработатьЗагрузкуБанковскойВыписки(РезультатЗагрузки);
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
			ОценкаВремени = "";
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура ЗафиксироватьДлительностьКлючевойОперации()
	
	ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(УИДЗамера);
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеОбработчики

&НаКлиенте
Процедура Подключаемый_ОбновитьИтогиОбработчик()
	
	ДанныеИтогов(ЭтотОбъект);
	ЗафиксироватьДлительностьКлючевойОперации();
	
КонецПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()
	
	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, ИдентификаторыСобытийПриОткрытии);
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеФормой

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Организация
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Организация");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОтборОрганизацияИспользование", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОтборОрганизация", ВидСравненияКомпоновкиДанных.Заполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДанныеИтогов(Форма)
	
	ТекОрганизация = ?(Форма.ОтборОрганизацияИспользование, Форма.ОтборОрганизация, Неопределено);
	
	СтруктураИтогов = ПолучитьИтоги(ТекОрганизация);
	
	Форма.ИтогДата  = СтруктураИтогов.ИтогДата;
	Форма.ИтогБанк  = СтруктураИтогов.ИтогБанк;
	Форма.ИтогКасса = СтруктураИтогов.ИтогКасса;
	Форма.ИтогВсего = СтруктураИтогов.ИтогВсего;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Возвращает текущие остатки по кассе и банку
//
Функция ПолучитьИтоги(Знач ТекОрганизация)
	
	ИтогДата = КонецДня(ТекущаяДатаСеанса());
	СтруктураРезультат = Новый Структура("ИтогДата, ИтогБанк, ИтогКасса, ИтогВсего", ИтогДата, 0, 0, 0);
	
	СписокДоступныхОрганизаций = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Ложь);
	// Если нет доступных организаций, то Итоги не вычисляем
	Если СписокДоступныхОрганизаций.Количество() = 0 Тогда
		Возврат СтруктураРезультат;
	ИначеЕсли ЗначениеЗаполнено(ТекОрганизация) Тогда
		// Если организация не числится в списке доступных, то Итоги не вычисляем
		Если СписокДоступныхОрганизаций.Найти(ТекОрганизация) = Неопределено Тогда
			Возврат СтруктураРезультат;
		КонецЕсли;
	КонецЕсли;
	
	СчетаУчетаНаличныхДС = Новый Массив;
	СчетаУчетаНаличныхДС.Добавить(ПланыСчетов.Хозрасчетный.Касса);
	СчетаУчетаНаличныхДС.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизации);
	СчетаУчетаНаличныхДС.Добавить(ПланыСчетов.Хозрасчетный.ОперационнаяКасса);
	СчетаУчетаНаличныхДС.Добавить(ПланыСчетов.Хозрасчетный.КассаПлатежногоАгента);
	СчетаУчетаНаличныхДС.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизацииВал);
	
	СчетаУчетаБезналичныхДС = Новый Массив;
	СчетаУчетаБезналичныхДС.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);
	СчетаУчетаБезналичныхДС.Добавить(ПланыСчетов.Хозрасчетный.ВалютныеСчета);
	СчетаУчетаБезналичныхДС.Добавить(ПланыСчетов.Хозрасчетный.СпециальныеСчета);
	СчетаУчетаБезналичныхДС.Добавить(ПланыСчетов.Хозрасчетный.Аккредитивы);
	СчетаУчетаБезналичныхДС.Добавить(ПланыСчетов.Хозрасчетный.ЧековыеКнижки);
	СчетаУчетаБезналичныхДС.Добавить(ПланыСчетов.Хозрасчетный.ДепозитныеСчета);
	СчетаУчетаБезналичныхДС.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеСпециальныеСчета);
	СчетаУчетаБезналичныхДС.Добавить(ПланыСчетов.Хозрасчетный.АккредитивыВал);
	СчетаУчетаБезналичныхДС.Добавить(ПланыСчетов.Хозрасчетный.ДепозитныеСчетаВал);
	СчетаУчетаБезналичныхДС.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеСпециальныеСчетаВал);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаИтогов", Новый Граница(ИтогДата, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", ТекОрганизация);
	Запрос.УстановитьПараметр("СчетаУчетаНаличныхДС", СчетаУчетаНаличныхДС);
	Запрос.УстановитьПараметр("СчетаУчетаБезналичныхДС", СчетаУчетаБезналичныхДС);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ОстатокПоКассе.ВалютнаяСуммаОстаток <> 0
	|			ТОГДА ОстатокПоКассе.ВалютнаяСуммаОстаток
	|		ИНАЧЕ ОстатокПоКассе.СуммаОстаток
	|	КОНЕЦ КАК ИтогКасса
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаИтогов, Счет В (&СчетаУчетаНаличныхДС), , %ОтборПоОрганизации%) КАК ОстатокПоКассе
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ОстатокПоБанку.ВалютнаяСуммаОстаток <> 0
	|			ТОГДА ОстатокПоБанку.ВалютнаяСуммаОстаток
	|		ИНАЧЕ ОстатокПоБанку.СуммаОстаток
	|	КОНЕЦ КАК ИтогБанк
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаИтогов, Счет В (&СчетаУчетаБезналичныхДС), , %ОтборПоОрганизации%) КАК ОстатокПоБанку";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПоОрганизации%",
		?(ЗначениеЗаполнено(ТекОрганизация), "Организация = &Организация", ""));
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	// Касса
	Если НЕ РезультатЗапроса[0].Пустой() Тогда
		Выборка = РезультатЗапроса[0].Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(СтруктураРезультат, Выборка);
	КонецЕсли;
	
	// Банк
	Если НЕ РезультатЗапроса[1].Пустой() Тогда
		Выборка = РезультатЗапроса[1].Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(СтруктураРезультат, Выборка);
	КонецЕсли;
	
	СтруктураРезультат.ИтогВсего = СтруктураРезультат.ИтогКасса + СтруктураРезультат.ИтогБанк;
	СтруктураРезультат.ИтогДата = ИтогДата;
	
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Процедура УстановитьВосстановленныеОтборы(ТолькоОрганизацияИСчет = Ложь)
	
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Организация");
	
КонецПроцедуры

#КонецОбласти

#Область ПравоПримененияСпецрежима

&НаСервере
Процедура УстановитьПрименяетсяУСНПатент()
	
	ДатаПроверки = ОбщегоНазначения.ТекущаяДатаПользователя();
	Если ЗначениеЗаполнено(ОтборОрганизация) Тогда
		ПрименениеУСН        = УчетнаяПолитика.ПрименяетсяУСН(ОтборОрганизация, ДатаПроверки);
		ПрименяетсяУСНПатент = УчетнаяПолитика.ПрименяетсяУСНПатент(ОтборОрганизация, ДатаПроверки);
	Иначе
		ПрименениеУСН        = Ложь;
		ПрименяетсяУСНПатент = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИнформациюОПравеПримененияСпецрежима()
	
	// Если не заполнена организация, тогда не показываем предупреждение.
	// Если организация не на УСН или Патенте, то не показываем предупреждение.
	Если НЕ (ОтборОрганизацияИспользование И ЗначениеЗаполнено(ОтборОрганизация) 
		И (ПрименениеУСН ИЛИ ПрименяетсяУСНПатент)) Тогда
		Элементы.ИнформацияОПравеПримененияСпецрежима.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	ПоказатьИнформациюОПравеПримененияСпецрежимаНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьИнформациюОПравеПримененияСпецрежимаНаСервере()
	
	ИнформацияОПравеПримененияСпецрежима = КонтрольПраваПримененияСпецрежима.ИнформацияОПравеПримененияСпецрежима(
		ОтборОрганизация, 
		КонтрольПраваПримененияСпецрежима.ИмяПоказателяСпецрежимаДоходы());
		
	СледующееЗначениеНапоминания         = ИнформацияОПравеПримененияСпецрежима.СледующееЗначениеНапоминания;
	СсылкаНаСтатьюИТС                    = ИнформацияОПравеПримененияСпецрежима.СсылкаНаСтатьюИТС;
	
	Элементы.ИнформацияОПравеПримененияСпецрежима.Видимость = ИнформацияОПравеПримененияСпецрежима.Показать;
	Элементы.ИнформацияОПравеПримененияСпецрежима.ЦветФона = ИнформацияОПравеПримененияСпецрежима.ЦветФонаГруппы;
	Элементы.ТекстИнформации.Заголовок = ИнформацияОПравеПримененияСпецрежима.ТекстИнформации;
	
	Элементы.НапомнитьПозже.Заголовок  = ИнформацияОПравеПримененияСпецрежима.ТекстНапомнитьПозже;
	// В случае если это последний шаг, то прячем команду "Напомнить позже"
	Элементы.НапомнитьПозже.Видимость  = (ИнформацияОПравеПримененияСпецрежима.СледующееЗначениеНапоминания < 100);
	
КонецПроцедуры

&НаСервере
Процедура ОтложитьПоказНапоминанияНаСервере()
	
	КонтрольПраваПримененияСпецрежима.ОтложитьПоказНапоминания(
		ОтборОрганизация, 
		КонтрольПраваПримененияСпецрежима.ИмяПоказателяСпецрежимаДоходы(), 
		СледующееЗначениеНапоминания);
		
	Элементы.ИнформацияОПравеПримененияСпецрежима.Видимость = Ложь;
	
КонецПроцедуры

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьБаннерДиректБанк(Форма)
	
	Элементы = Форма.Элементы;
	ВидимостьБаннера = Ложь;
	Если ЗначениеЗаполнено(Форма.ОсновнойБанковскийСчет)
		И Форма.ВидимостьЭлементовДиректБанк = "ПоказатьБаннер" Тогда 
		
		ВидимостьБаннера = Истина;
		
	КонецЕсли;
	Элементы.ГруппаРекламаДиректБанк.Видимость = ВидимостьБаннера;
	
КонецПроцедуры

&НаСервере
Процедура ОтборОрганизацияПриИзмененииСервер()

	ОтборОрганизацияИспользование = ЗначениеЗаполнено(ОтборОрганизация);
	
	СкрытьРезультатСозданияДокументов(ЭтотОбъект);

	УстановитьВосстановленныеОтборы(Истина);
	
	УОрганизацииТолькоОдинБанковскийСчет = Справочники.БанковскиеСчета.КоличествоБанковскихСчетовОрганизации(ОтборОрганизация) = 1;
	
	ОсновнойБанковскийСчет = ?(УОрганизацииТолькоОдинБанковскийСчет, ОтборОрганизация.ОсновнойБанковскийСчет, Справочники.БанковскиеСчета.ПустаяСсылка());
	
	ВидимостьЭлементовДиректБанк = ?(УОрганизацииТолькоОдинБанковскийСчет,
		ЭлектронноеВзаимодействиеБПВызовСервера.ВидимостьЭлементовДиректБанк(
		ОтборОрганизация, ОтборОрганизация.ОсновнойБанковскийСчет),
		"НеПоказывать");
		
	УстановитьПрименяетсяУСНПатент();
	
	ПоказатьБаннерДиректБанк(ЭтотОбъект);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначениеРеквизитаОбъекта(Знач Ссылка, Знач Реквизит)

	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, Реквизит);

КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьОтключениеВидимостиВидеороликов()
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ВРег("ЖурналДеньги"), ВРег("Видеоролики"), Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОтчета(ИмяОтчета)

	ФормаОтчета = ПолучитьФорму("Отчет." + ИмяОтчета + ".ФормаОбъекта",, ЭтотОбъект);
	
	ФормаОтчета.ПодключитьОбработчикОжидания("Подключаемый_СформироватьПриОткрытии",
		БухгалтерскиеОтчетыКлиент.ИнтервалЗапускаФормированияОтчетаПриОткрытии(),
		Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(ФормаОтчета.Элементы.Результат,
		"ФормированиеОтчета");
	ФормаОтчета.Открыть();

КонецПроцедуры

#КонецОбласти
