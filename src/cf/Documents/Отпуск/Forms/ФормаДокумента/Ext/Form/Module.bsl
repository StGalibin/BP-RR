#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("РежимОткрытияОкна") 
		И ЗначениеЗаполнено(Параметры.РежимОткрытияОкна) Тогда
		РежимОткрытияОкна = Параметры.РежимОткрытияОкна;
	КонецЕсли; 
	
	Если Параметры.Ключ.Пустая() Тогда
		
		Если Параметры.Свойство("Сотрудник") И ЗначениеЗаполнено(Параметры.Сотрудник) Тогда 
			Объект.Сотрудник	= Параметры.Сотрудник;
		КонецЕсли;
		
		// Заполнение нового документа.
		ЗначенияДляЗаполнения = Новый Структура("Организация, Ответственный, Месяц",
			"Объект.Организация",
			"Объект.Ответственный",
			"Объект.ПериодРегистрации");
			
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
		
		ЗаполнитьДанныеФормыПоОрганизации();
		
		ПриПолученииДанныхНаСервере();
		
		УстановитьДатуНачалаСобытия();
		
	КонецЕсли;

	// Обработчик подсистемы "Дополнительные отчеты и обработки".
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Обработчик подсистемы "ВерсионированиеОбъектов".
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Обработчик подсистемы "Печать".
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененыРезультатыРасчетаНДФЛ" И Источник.ВладелецФормы = ЭтаФорма Тогда
		ОбновитьДанныеНДФЛНаСервере(Параметр);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПриПолученииДанныхНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("ЗаписьДокумента", Объект.Ссылка);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ЗаполнитьДанныеФормыПоОрганизации();
	РассчитатьНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	
	СотрудникПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	ДатаНачалаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияОсновногоОтпускаПриИзменении(Элемент)
	
	ПриИзмененииПериодаОтпуска();
	ОбновитьКоличествоДнейОсновногоОтпуска(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой", Модифицированность);
	ПриИзмененииМесяцаНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("МесяцНачисленияСтрокойНачалоВыбораЗавершение", ЭтотОбъект);
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой", , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбораЗавершение(ЗначениеВыбрано, ДополнительныеПараметры) Экспорт
	
	ПриИзмененииМесяцаНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой", Направление, Модифицированность);
	ПодключитьОбработчикОжидания("ОбработчикОжиданияМесяцНачисленияПриИзменении", 0.3, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СреднийЗаработокПриИзменении(Элемент)
	
	РассчитатьНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланируемаяДатаВыплатыПриИзменении(Элемент)
	
	ПересчитатьНДФЛ();
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	НачисленияПриОкончанииРедактированияНаСервере();
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

&НаКлиенте
Процедура ОткрытьСреднийЗаработок(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьСреднийЗаработокЗавершение", ЭтотОбъект);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Сотрудник", 		Объект.Сотрудник);
	ПараметрыОткрытия.Вставить("Организация", 		Объект.Организация);
	ПараметрыОткрытия.Вставить("ДатаНачалаСобытия", Объект.ДатаНачалаСобытия);
	ПараметрыОткрытия.Вставить("ДокументСсылка", 	Объект.Ссылка);
	ПараметрыОткрытия.Вставить("Сотрудник", 		Объект.Сотрудник);
	
	ДанныеДляРасчетаСреднегоЗаработка = ДанныеДляРасчетаСреднегоЗаработка();
	ПараметрыОткрытия.Вставить("ДанныеОНачислениях", 	ДанныеДляРасчетаСреднегоЗаработка.ДанныеОНачислениях);
	ПараметрыОткрытия.Вставить("ДанныеОВремени", 		ДанныеДляРасчетаСреднегоЗаработка.ДанныеОВремени);
	
	ОткрытьФорму("ОбщаяФорма.ВводДанныхДляРасчетаСреднегоЗаработкаОбщий", ПараметрыОткрытия, ЭтаФорма, , , ,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодробнееОРасчетеНДФЛ(Команда)
	
	УчетНДФЛКлиент.ОткрытьФормуПодробнееОРасчетеНДФЛ(Объект.Организация, ЭтаФорма, Объект.ПериодРегистрации, Объект.Сотрудник);
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ПриИзмененииПериодаОтпуска()
	
	УстановитьДатуНачалаСобытия();
	Если Объект.ДатаНачалаОсновногоОтпуска > Объект.ДатаОкончанияОсновногоОтпуска
		И ЗначениеЗаполнено(Объект.ДатаОкончанияОсновногоОтпуска) Тогда
		
		Объект.ДатаОкончанияОсновногоОтпуска = Объект.ДатаНачалаОсновногоОтпуска;
		
	КонецЕсли; 
	
	УстановитьКоличествоДнейОсновногоОтпуска();
	
КонецПроцедуры

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	
	НачисленияОтпуска = РасчетЗарплаты.НачисленияПоКатегории(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска);
	Если НачисленияОтпуска.Количество() > 0 Тогда
		НачислениеОтпуск = НачисленияОтпуска[0];
	КонецЕсли;
	
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Объект.Сотрудник, "ДатаПриема,Подразделение", Объект.ДатаНачалаОсновногоОтпуска);
	Если КадровыеДанные.Количество() = 0 Тогда
		Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	Иначе
		Подразделение = КадровыеДанные[0].Подразделение;
		ДатаПриемаНаРаботу = КадровыеДанные[0].ДатаПриема;
	КонецЕсли;
			
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой");
	ОбновитьКоличествоДнейОсновногоОтпуска(ЭтаФорма);
	
	МесяцСобытия = НачалоМесяца(Объект.ДатаНачалаСобытия);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДатуНачалаСобытия()
	
	Объект.ДатаНачалаСобытия = '00010101';
	
	Если ЗначениеЗаполнено(Объект.ДатаНачалаОсновногоОтпуска) Тогда
		Объект.ДатаНачалаСобытия = Объект.ДатаНачалаОсновногоОтпуска;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаНачалаСобытия) Тогда
		Объект.ДатаНачалаСобытия = Объект.ПериодРегистрации;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииМесяцаНачисления()
	
	УстановитьДатуНачалаСобытия();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКоличествоДнейОсновногоОтпуска()
	
	КоличествоДнейОсновногоОтпуска = КоличествоДнейОтпуска(Объект.ДатаНачалаОсновногоОтпуска, Объект.ДатаОкончанияОсновногоОтпуска);
	
	Если Объект.КоличествоДнейОсновногоОтпуска <> КоличествоДнейОсновногоОтпуска Тогда
		Объект.КоличествоДнейОсновногоОтпуска = КоличествоДнейОсновногоОтпуска;
		РассчитатьСреднийЗаработокИНачисления();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция КоличествоДнейОтпуска(ДатаНачалаОсновногоОтпуска, ДатаОкончанияОсновногоОтпуска)
	
	КоличествоДней = 0;
	
	Если ЗначениеЗаполнено(ДатаНачалаОсновногоОтпуска) И ДатаНачалаОсновногоОтпуска <= ДатаОкончанияОсновногоОтпуска Тогда
		
		КоличествоДней = КонецДня(ДатаОкончанияОсновногоОтпуска) - НачалоДня(ДатаНачалаОсновногоОтпуска) + 1;
		КоличествоДней = КоличествоДней / УчетПособийСоциальногоСтрахованияКлиентСервер.ДлинаСуток();
		
		ПроизводственныйКалендарьРФ = КалендарныеГрафики.ПроизводственныйКалендарьРоссийскойФедерации();
		Если ПроизводственныйКалендарьРФ <> Неопределено Тогда
			
			РазностьДат = РасчетЗарплатыБазовый.РазностьДатьПроизводственныхКалендарейПоВидамДней(
				ПроизводственныйКалендарьРФ , ДатаНачалаОсновногоОтпуска, ДатаОкончанияОсновногоОтпуска);
				
			КоличествоДней = КоличествоДней - РазностьДат.Получить(Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат КоличествоДней;
	
КонецФункции

&НаСервере
Функция РабочихДнейЧасовВПериоде(ДатаНачалаОсновногоОтпуска, ДатаОкончанияОсновногоОтпуска)
	
	РабочихДнейЧасовВПериоде = Неопределено;
	Если ЗначениеЗаполнено(ДатаНачалаОсновногоОтпуска) И ДатаНачалаОсновногоОтпуска <= ДатаОкончанияОсновногоОтпуска Тогда
		
		ПроизводственныйКалендарьРФ = КалендарныеГрафики.ПроизводственныйКалендарьРоссийскойФедерации();
		Если ПроизводственныйКалендарьРФ <> Неопределено Тогда
			
			РабочихДнейЧасовВПериоде = РасчетЗарплатыБазовый.РабочихДнейЧасовВПериоде(
				ПроизводственныйКалендарьРФ, ДатаНачалаОсновногоОтпуска, ДатаОкончанияОсновногоОтпуска);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РабочихДнейЧасовВПериоде;
	
КонецФункции


&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьКоличествоДнейОсновногоОтпуска(Форма)
	
	Если ЗначениеЗаполнено(Форма.Объект.КоличествоДнейОсновногоОтпуска) Тогда
		Форма.НадписьДней = НСтр("ru='дн.'");	
	Иначе
		Форма.НадписьДней = "";	
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбработчикОжиданияМесяцНачисленияПриИзменении()
	
	УстановитьДатуНачалаСобытия();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеФормыПоОрганизации()
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли; 
	
	ЗапрашиваемыеЗначения = Новый Структура;
	ЗапрашиваемыеЗначения.Вставить("Организация", "Объект.Организация");
	
	ЗапрашиваемыеЗначения.Вставить("Руководитель", "Объект.Руководитель");
	ЗапрашиваемыеЗначения.Вставить("ДолжностьРуководителя", "Объект.ДолжностьРуководителя");
	
	ЗарплатаКадры.ЗаполнитьЗначенияВФорме(ЭтаФорма, ЗапрашиваемыеЗначения, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Организация"));	
	
КонецПроцедуры

&НаСервере
Процедура СотрудникПриИзмененииНаСервере()
	
	Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		
		КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Объект.Сотрудник, "ДатаПриема,Подразделение,ФизическоеЛицо", Объект.ДатаНачалаСобытия);
		Если КадровыеДанные.Количество() > 0 Тогда
			Подразделение = КадровыеДанные[0].Подразделение;
			ФизическоеЛицо = КадровыеДанные[0].ФизическоеЛицо;
			ДатаПриемаНаРаботу = КадровыеДанные[0].ДатаПриема;
		КонецЕсли; 
	
	КонецЕсли;
	
	Объект.ФизическоеЛицо = ФизическоеЛицо;
	МесяцСобытия = '00010101';
	РассчитатьСреднийЗаработокИНачисления();
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьНачисления()
	
	Объект.Начисления.Очистить();
	
	ДатаНачала = Объект.ДатаНачалаОсновногоОтпуска;
	ДатаОкончания = Объект.ДатаОкончанияОсновногоОтпуска;
	
	Пока ЗначениеЗаполнено(ДатаНачала) И ДатаНачала <= ДатаОкончания Цикл
		
		СтрокаНачислений = Объект.Начисления.Добавить();
		
		СтрокаНачислений.Начисление = НачислениеОтпуск;
		СтрокаНачислений.Сотрудник = Объект.Сотрудник;
		СтрокаНачислений.Подразделение = Подразделение;
		
		СтрокаНачислений.ДатаНачала = ДатаНачала;
		
		Если КонецМесяца(ДатаНачала) >= ДатаОкончания Тогда
			СтрокаНачислений.ДатаОкончания = ДатаОкончания;
		Иначе
			СтрокаНачислений.ДатаОкончания = КонецМесяца(ДатаНачала);
		КонецЕсли;
		
		СтрокаНачислений.ОплаченоДней = КоличествоДнейОтпуска(СтрокаНачислений.ДатаНачала, СтрокаНачислений.ДатаОкончания);
		СтрокаНачислений.Результат = Объект.СреднийЗаработок * СтрокаНачислений.ОплаченоДней;
		
		РабочихДнейЧасов = РабочихДнейЧасовВПериоде(СтрокаНачислений.ДатаНачала, СтрокаНачислений.ДатаОкончания);
		Если РабочихДнейЧасов = Неопределено Тогда
			
			СтрокаНачислений.ОтработаноДней = 0;
			СтрокаНачислений.ОтработаноЧасов = 0;
			
		Иначе
			
			СтрокаНачислений.ОтработаноДней = РабочихДнейЧасов.Дней;
			СтрокаНачислений.ОтработаноЧасов = РабочихДнейЧасов.Часов;
			
		КонецЕсли;
		
		ДатаНачала = КонецМесяца(ДатаНачала) + 1;
		
	КонецЦикла;
	
	ПересчитатьНДФЛ();
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьНДФЛ()
	
	Объект.НДФЛ.Очистить();
	Объект.ПримененныеВычетыНаДетейИИмущественные.Очистить();
	
	УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию();
	
	ОбъектФормы = РеквизитФормыВЗначение("Объект");
	
	ДокументОбъект = ОбъектФормы.Скопировать();
	ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	ДокументОбъект.СформироватьДоходыНДФЛ();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Отпуск.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТФизическиеЛица
		|ИЗ
		|	Документ.Отпуск КАК Отпуск
		|ГДЕ
		|	Отпуск.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
	Запрос.Выполнить();
	
	РезультатРасчетаНДФЛ = УчетНДФЛ.РезультатРасчетаНДФЛ(
		Запрос.МенеджерВременныхТаблиц, Объект.Ссылка, Объект.Организация, Объект.ПериодРегистрации, Ложь);
	
	ОтменитьТранзакцию();
	УстановитьПривилегированныйРежим(Ложь);
	
	Для каждого ДанныеНДФЛ Из РезультатРасчетаНДФЛ.НДФЛ Цикл
		ЗаполнитьЗначенияСвойств(Объект.НДФЛ.Добавить(), ДанныеНДФЛ);
	КонецЦикла;
	
	Для каждого ДанныеВычетов Из РезультатРасчетаНДФЛ.ПримененныеВычетыНаДетейИИмущественные Цикл
		ЗаполнитьЗначенияСвойств(Объект.ПримененныеВычетыНаДетейИИмущественные.Добавить(), ДанныеВычетов);
	КонецЦикла;
	
	РасчетЗарплатыБазовый.ЗаполнитьКорректировкиВыплаты(Объект, "ПериодРегистрации");
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСреднийЗаработокИНачисления()
	
	Если МесяцСобытия <> НачалоМесяца(Объект.ДатаНачалаСобытия) Тогда
		
		Объект.ОтработанноеВремяДляСреднегоОбщий.Очистить();
		Объект.СреднийЗаработокОбщий.Очистить();
		
		НачалоПериода = ДобавитьМесяц(НачалоМесяца(Объект.ДатаНачалаСобытия), -12);
		НачалоПериода = Макс(НачалоПериода, НачалоМесяца(ДатаПриемаНаРаботу));
		
		ОкончаниеПериода = Макс(НачалоМесяца(Объект.ДатаНачалаСобытия) - 1, НачалоПериода);
		
		ДанныеДляРасчета = РасчетЗарплатыДляНебольшихОрганизаций.ДанныеДляРасчетаОбщегоСреднегоЗаработкаСотрудника(
			Объект.Сотрудник, Объект.Организация, НачалоПериода, ОкончаниеПериода);
		
		Для каждого ДанныеОВремени Из ДанныеДляРасчета.ДанныеОВремени Цикл
			СтрокаДанныхОВремени = Объект.ОтработанноеВремяДляСреднегоОбщий.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДанныхОВремени, ДанныеОВремени);
			СтрокаДанныхОВремени.Сотрудник = Объект.Сотрудник;
		КонецЦикла;
		
		Для каждого ДанныеОНачислениях Из ДанныеДляРасчета.ДанныеОНачислениях Цикл
			СтрокаДанныеОНачислениях = Объект.СреднийЗаработокОбщий.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДанныеОНачислениях, ДанныеОНачислениях);
			СтрокаДанныеОНачислениях.Сотрудник = Объект.Сотрудник;
		КонецЦикла;
		
		ТаблицыПоСотруднику = Новый Структура;
		ТаблицыПоСотруднику.Вставить("ДанныеОНачислениях", Объект.СреднийЗаработокОбщий);
		ТаблицыПоСотруднику.Вставить("ДанныеОВремени", Объект.ОтработанноеВремяДляСреднегоОбщий);
		
		ПараметрыПолученияДанныхСреднего = РасчетЗарплатыДляНебольшихОрганизаций.ПараметрыПолученияДанныхСреднегоОбщего();
		ПараметрыПолученияДанныхСреднего.Вставить("ТаблицыПоСотруднику", 	ТаблицыПоСотруднику); 
		ПараметрыПолученияДанныхСреднего.Вставить("ДатаНачалаПериода",  	НачалоПериода); 
		ПараметрыПолученияДанныхСреднего.Вставить("ДатаОкончанияПериода",	ОкончаниеПериода); 
		ПараметрыПолученияДанныхСреднего.Вставить("ДатаНачалаСобытия", 		Объект.ДатаНачалаСобытия);
		
		ДанныеРасчетаСреднегоЗаработка = РасчетЗарплатыДляНебольшихОрганизаций.ДанныеРасчетаСреднегоЗаработкаОбщего(ПараметрыПолученияДанныхСреднего);
		
		Объект.СреднийЗаработок = ДанныеРасчетаСреднегоЗаработка.Итоги.СреднедневнойЗаработок;
		
		МесяцСобытия = НачалоМесяца(Объект.ДатаНачалаСобытия);
		
	КонецЕсли; 
	
	РассчитатьНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСреднийЗаработокЗавершение(Знач РезультатРедактирования, Знач ДополнительныеПараметры) Экспорт
	
	Если РезультатРедактирования <> Неопределено Тогда
		ПеренестиДанныеУчетаСреднегоЗаработкаВДокумент(РезультатРедактирования);
		РассчитатьНачисления();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеДляРасчетаСреднегоЗаработка()
	
	СтруктураВозврата = Новый Структура;
	
	СтруктураВозврата.Вставить("ДанныеОНачислениях", ПоместитьВоВременноеХранилище(Объект.СреднийЗаработокОбщий.Выгрузить(), УникальныйИдентификатор));
	СтруктураВозврата.Вставить("ДанныеОВремени", ПоместитьВоВременноеХранилище(Объект.ОтработанноеВремяДляСреднегоОбщий.Выгрузить(), УникальныйИдентификатор));
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Процедура ПеренестиДанныеУчетаСреднегоЗаработкаВДокумент(АдресДанныхВХранилище)
	
	ДанныеУчетаСреднегоЗаработка = ПолучитьИзВременногоХранилища(АдресДанныхВХранилище);
	
	Объект.СреднийЗаработок = ДанныеУчетаСреднегоЗаработка.СреднийЗаработок;
	
	Объект.ОтработанноеВремяДляСреднегоОбщий.Очистить();
	ДанныеОВремени = ПолучитьИзВременногоХранилища(ДанныеУчетаСреднегоЗаработка.ДанныеОВремени);
	Если ЗначениеЗаполнено(ДанныеОВремени) Тогда
		
		Для каждого СведенияОВремени Из ДанныеОВремени Цикл
			ЗаполнитьЗначенияСвойств(Объект.ОтработанноеВремяДляСреднегоОбщий.Добавить(), СведенияОВремени);
		КонецЦикла;
		
	КонецЕсли; 
	
	Объект.СреднийЗаработокОбщий.Очистить();
	ДанныеОНачислениях = ПолучитьИзВременногоХранилища(ДанныеУчетаСреднегоЗаработка.ДанныеОНачислениях);
	Если ЗначениеЗаполнено(ДанныеОНачислениях) Тогда
		
		Для каждого СведенияОНачислениях Из ДанныеОНачислениях Цикл
			ЗаполнитьЗначенияСвойств(Объект.СреднийЗаработокОбщий.Добавить(), СведенияОНачислениях);
		КонецЦикла;
		
	КонецЕсли; 
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция СведенияОбНДФЛ() Экспорт
	
	ДополнительныеСведения = УчетНДФЛФормы.ДополнительныеДанныеДляПолученияСведенийОДоходахНДФЛДокумента();
	ДополнительныеСведения.МесяцНачисления = Объект.ПериодРегистрации;
	ДополнительныеСведения.ПланируемаяДатаВыплаты = Объект.ПланируемаяДатаВыплаты;
	
	СведенияОДоходахНДФЛ = УчетНДФЛФормы.СведенияОДоходахНДФЛДокумента(Объект, "Начисления", ДополнительныеСведения);	
	АдресСведенийОбНДФЛ = УчетНДФЛФормы.СведенияОбНДФЛ(ЭтотОбъект);
	
	ДанныеОбНДФЛ = ПолучитьИзВременногоХранилища(АдресСведенийОбНДФЛ);
	ДанныеОбНДФЛ.Вставить("СведенияОДоходах", СведенияОДоходахНДФЛ.СведенияОДоходах);
	ДанныеОбНДФЛ.Вставить("ВычетыКДоходам", СведенияОДоходахНДФЛ.ВычетыКДоходам);
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеОбНДФЛ, ЭтаФорма.УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция НДФЛПодробнееНаСервере(ФизическиеЛица) Экспорт
	
	Если ТипЗнч(ФизическиеЛица) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическиеЛица);
	Иначе
		СписокФизическихЛиц = ФизическиеЛица;
	КонецЕсли;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	НДФЛПодробнее = Новый Массив;
	НДФЛПодробнее.Добавить(ДокументОбъект.Ссылка);
	НДФЛПодробнее.Добавить(УчетНДФЛФормы.РегистрНалоговогоУчетаПоНДФЛ(ДокументОбъект, Модифицированность, СписокФизическихЛиц, Объект.ПериодРегистрации));
	
	Возврат НДФЛПодробнее;
	
КонецФункции

&НаСервере
Процедура ОбновитьДанныеНДФЛНаСервере(АдресВременногоХранилища)
	
	Параметр = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	Объект.НДФЛ.Загрузить(Параметр.НДФЛ);
	Объект.ПримененныеВычетыНаДетейИИмущественные.Загрузить(Параметр.ПримененныеВычетыНаДетейИИмущественные);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ДатаНачалаПриИзмененииНаСервере()
	
	ПриИзмененииПериодаОтпуска();
	ОбновитьКоличествоДнейОсновногоОтпуска(ЭтаФорма);
	
	Если ЗначениеЗаполнено(Объект.ДатаНачалаСобытия) Тогда
		Объект.ПланируемаяДатаВыплаты = Документы.Отпуск.ПланируемаяДатыВыплатыОтпуска(Объект.ДатаНачалаСобытия);
		ПересчитатьНДФЛ();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НачисленияПриОкончанииРедактированияНаСервере()
	
	ПересчитатьНДФЛ();
	
КонецПроцедуры

#КонецОбласти
