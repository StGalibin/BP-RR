////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	Если Параметры.Свойство("Организация") Тогда
		Если ЗначениеЗаполнено(Параметры.Организация) Тогда
			Объект.Организация = Параметры.Организация;
			ОрганизацияПриИзмененииНаСервере();
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("РежимРасшифровки") Тогда
		Если ЗначениеЗаполнено(Параметры.РежимРасшифровки) Тогда
			Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппыУменьшениеНалога;
		КонецЕсли;
	КонецЕсли;

	// Активизировать первую непустую табличную часть
	СписокТабличныхЧастей = Новый СписокЗначений;
	СписокТабличныхЧастей.Добавить("Строки", "Строки");
	СписокТабличныхЧастей.Добавить("ОС", "ОС");
	СписокТабличныхЧастей.Добавить("НМА", "НМА");
	СписокТабличныхЧастей.Добавить("УменьшениеНалога", "УменьшениеНалога");
	
	АктивизироватьТабличнуюЧасть = ОбщегоНазначенияБПВызовСервера.ПолучитьПервуюНепустуюВидимуюТабличнуюЧасть(
		ЭтаФорма, СписокТабличныхЧастей);
	ОбщегоНазначенияБПВызовСервера.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);

	УстановитьУсловноеОформление();
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтаФорма,
		"БП.Документ.ЗаписьКУДиР",
		"ФормаДокумента",
		НСтр("ru='Новости: Запись книги доходов и расходов УСН, по патенту'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);
		
	// Проверка на изменение сроков действия патентов.
	Если НЕ ТребуетсяВызовСервера Тогда
		ТребуетсяВызовСервера = ПрименяетсяУСНПатент;
	КонецЕсли;
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеятельностьНаПатентеПриИзменении(Элемент)
	
	Если Объект.ДеятельностьНаПатенте Тогда
		
		Если Элементы.Патент.СписокВыбора.Количество() = 1 Тогда
			Объект.Патент	= Элементы.Патент.СписокВыбора[0].Значение;
		КонецЕсли;
		
		Объект.ОС.Очистить();
		Объект.НМА.Очистить();
		
	Иначе
		Объект.Патент	= Неопределено;
	КонецЕсли;
	
	УстановитьЗаголовокФормы(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ Строки

&НаКлиенте
Процедура СтрокиГрафа5ПриИзменении(Элемент)
	
	ДанныеТекущейСтроки = Элементы.Строки.ТекущиеДанные;
	
	Если ДанныеТекущейСтроки.Графа5 = 0 Тогда
		ДанныеТекущейСтроки.ДоходыЕНВД = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокиДоходыЕНВДПриИзменении(Элемент)
	
	ДанныеТекущейСтроки = Элементы.Строки.ТекущиеДанные;
	
	Если ДанныеТекущейСтроки.ДоходыЕНВД Тогда
		ДанныеТекущейСтроки.ДоходТорговыйСбор = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокиГрафа7ПриИзменении(Элемент)
	
	ДанныеТекущейСтроки = Элементы.Строки.ТекущиеДанные;
	
	Если ДанныеТекущейСтроки.Графа7 = 0 Тогда 
		ДанныеТекущейСтроки.РасходыЕНВД = Ложь;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();


	// СтрокиГрафа5, СтрокиГрафа6, СтрокиГрафа7, СтрокиНДС, СтрокиДоходыЕНВД, СтрокиРасходыЕНВД

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СтрокиГрафа5");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СтрокиГрафа6");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СтрокиГрафа7");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СтрокиНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СтрокиДоходыЕНВД");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СтрокиРасходыЕНВД");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ДеятельностьНаПатенте", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	// Видимость полей для раздельного учета при уплате торгового сбора
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СтрокиДоходыТорговыйСбор");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УменьшениеНалогаНадписьРасходы");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УменьшениеНалогаНадписьРасходыТорговыйСбор");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УменьшениеНалогаПФРТорговыйСбор");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УменьшениеНалогаФССТорговыйСбор");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УменьшениеНалогаФОМСТорговыйСбор");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УменьшениеНалогаФСС_НСТорговыйСбор");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УменьшениеНалогаБольничныеТорговыйСбор");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УменьшениеНалогаДобровольноеСтрахованиеТорговыйСбор");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"РаздельныйУчетУСНТорговыйСбор", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ДеятельностьНаПатенте", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// СтрокиДоходыТорговыйСбор
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СтрокиДоходыТорговыйСбор");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Строки.ДоходыЕНВД", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	// СтрокиРасходыЕНВД

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СтрокиРасходыЕНВД");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Строки.Графа7", ВидСравненияКомпоновкиДанных.Равно, 0);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);


	// СтрокиДоходыЕНВД

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СтрокиДоходыЕНВД");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Строки.Графа5", ВидСравненияКомпоновкиДанных.Равно, 0);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	ТекущаяДатаДокумента			= Объект.Дата;

	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	УстановитьЗаголовокФормы(ЭтаФорма);
	
	НадписьПатент = НСтр("ru = 'Патент:'");
	
	ЗаполнитьСписокВыбораПатентаНаСервере();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.ДеятельностьНаПатенте.Видимость = Форма.ПрименяетсяУСНПатент И Не Форма.ПрименяетсяТолькоУСНПатент;
	
	Элементы.Патент.Доступность = Объект.ДеятельностьНаПатенте ИЛИ Форма.ПрименяетсяТолькоУСНПатент;
	
	Элементы.ГруппаОС.Видимость               = Не Объект.ДеятельностьНаПатенте;
	Элементы.ГруппаНМА.Видимость              = Не Объект.ДеятельностьНаПатенте;
	Элементы.ГруппыУменьшениеНалога.Видимость = Не Объект.ДеятельностьНаПатенте;
	
	Элементы.УменьшениеНалогаГруппаРеквизитыЗаписи.Группировка = ?(Форма.РаздельныйУчетУСНТорговыйСбор,
		ГруппировкаКолонок.Вертикальная, ГруппировкаКолонок.Горизонтальная);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ПрименяетсяУСНПатент       = УчетнаяПолитика.ПрименяетсяУСНПатент(Объект.Организация, Объект.Дата);
	ПлательщикЕНВД             = УчетнаяПолитика.ПлательщикЕНВД(Объект.Организация, Объект.Дата);
	ПрименяетсяТолькоУСНПатент = ПрименяетсяУСНПатент И НЕ ПлательщикЕНВД
		И УчетнаяПолитика.ПрименяетсяОсобыйПорядокНалогообложения(Объект.Организация, Объект.Дата);
	
	РаздельныйУчетУСНТорговыйСбор = УчетнаяПолитика.ПрименяетсяУСНДоходы(Объект.Организация, Объект.Дата)
		И УчетнаяПолитика.ПлательщикТорговогоСбораЗаПериод(Объект.Организация, НачалоГода(Объект.Дата), КонецГода(Объект.Дата));

КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	ДатаОбработатьИзменение();
	
	ЗаполнитьСписокВыбораПатентаНаСервере();
	Если ЗначениеЗаполнено(Объект.Патент) И Элементы.Патент.СписокВыбора.НайтиПоЗначению(Объект.Патент) = Неопределено Тогда
		Объект.Патент	= Неопределено;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ДатаОбработатьИзменение()

	УстановитьФункциональныеОпцииФормы();
	
	Если НЕ ПрименяетсяУСНПатент Тогда
		Объект.ДеятельностьНаПатенте	= Ложь;
		Объект.Патент	= Неопределено;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ОрганизацияОбработатьИзменение();
	
	ЗаполнитьСписокВыбораПатентаНаСервере();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ОрганизацияОбработатьИзменение()
	
	УстановитьФункциональныеОпцииФормы();
	
	ЗаполнитьЗначенияСвойств(Объект, НалоговыйУчетУСН.ДеятельностьНаПатентеПоУмолчанию(Объект.Организация, Объект.Дата));
	Если Объект.ДеятельностьНаПатенте Тогда
		Объект.ОС.Очистить();
		Объект.НМА.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораПатентаНаСервере()

	Если ПрименяетсяУСНПатент Тогда
		МассивПатентовОрганизации	= Справочники.Патенты.ПолучитьПатентыОрганизации(Объект.Организация, Объект.Дата);
		Элементы.Патент.СписокВыбора.ЗагрузитьЗначения(МассивПатентовОрганизации);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()

	Для Каждого СтрокаТаблицы Из Объект.УменьшениеНалога Цикл
		
		НачалоПериода = ВыборПериодаКлиентСервер.НачалоПериодаОтчета(Перечисления.ДоступныеПериодыОтчета.Месяц, СтрокаТаблицы.ПериодНачисления);
		КонецПериода  = ВыборПериодаКлиентСервер.КонецПериодаОтчета(Перечисления.ДоступныеПериодыОтчета.Месяц, СтрокаТаблицы.ПериодНачисления);
		
		СтрокаТаблицы.ПериодСтрокой = ВыборПериодаКлиентСервер.ПолучитьПредставлениеПериодаОтчета(Перечисления.ДоступныеПериодыОтчета.Месяц, НачалоПериода, КонецПериода);
		
		ЗаполнитьДобавленныеКолонкиСтрокиУменьшениеНалога(СтрокаТаблицы);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УменьшениеНалогаПериодСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц");
	ОписаниеОповещения = Новый ОписаниеОповещения("УменьшениеНалогаПериодСтрокойНачалоВыбораЗавершение", ЭтотОбъект);
	ВыборПериодаКлиент.ПериодНачалоВыбора(ЭтаФорма, Элемент, СтандартнаяОбработка, ВидПериода,Элементы.УменьшениеНалога.ТекущиеДанные.ПериодНачисления, ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура УменьшениеНалогаПериодСтрокойНачалоВыбораЗавершение(СтруктураПериода, ДополнительныеПараметры) Экспорт
	
	// Установим полученный период
	Если СтруктураПериода <> Неопределено Тогда
		Элементы.УменьшениеНалога.ТекущиеДанные.ПериодСтрокой = СтруктураПериода.Период;
		Элементы.УменьшениеНалога.ТекущиеДанные.ПериодНачисления = СтруктураПериода.НачалоПериода;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УменьшениеНалогаПериодСтрокойОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц");
	КонецПериода = "";
	ВыборПериодаКлиент.ПериодОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка,
		ВидПериода, Элементы.УменьшениеНалога.ТекущиеДанные.ПериодСтрокой, Элементы.УменьшениеНалога.ТекущиеДанные.ПериодНачисления, КонецПериода);
		
КонецПроцедуры

&НаКлиенте
Процедура УменьшениеНалогаПериодСтрокойПриИзменении(Элемент)
	
	КонецПериода = "";	
	ВыборПериодаКлиент.ПериодПриИзменении(Элемент, Элементы.УменьшениеНалога.ТекущиеДанные.ПериодСтрокой, Элементы.УменьшениеНалога.ТекущиеДанные.ПериодНачисления, КонецПериода);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиУменьшениеНалога(СтрокаТаблицы)

	СтрокаТаблицы.НадписьРасходы = НСтр("ru = 'Расходы:'");
	СтрокаТаблицы.НадписьРасходыТорговыйСбор = НСтр("ru = 'в т.ч. на торговом сборе:'");

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьСостояниеДокумента();
	
	УстановитьЗаголовокФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПатентПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Патент) Тогда
		Объект.ДеятельностьНаПатенте = Истина;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокФормы(Форма)
	
	Объект	= Форма.Объект;
	
	Если Объект.ДеятельностьНаПатенте Тогда
		ТекстЗаголовка	= НСтр("ru = 'Запись книги доходов по патенту'");
	Иначе
		ТекстЗаголовка	= НСтр("ru = 'Запись книги доходов и расходов УСН'");
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		Форма.Заголовок = ТекстЗаголовка + НСтр("ru = ' (создание)'");
	Иначе
		Форма.Заголовок = ТекстЗаголовка + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru=' %1 от %2'"), Объект.Номер, Объект.Дата);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	Оповестить("ИзменениеЗаписиКУДиР");

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтаФорма,
		Команда
	);

КонецПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаКлиенте
Процедура УменьшениеНалогаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		СтрокаТаблицы = Элементы.УменьшениеНалога.ТекущиеДанные;
		ЗаполнитьДобавленныеКолонкиСтрокиУменьшениеНалога(СтрокаТаблицы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УменьшениеНалогаОбработатьИзменениеСуммы(СтрокаТаблицы, ИмяСуммы)

	// Ограничения для сумм "в том числе":
	// 1. Модуль суммы "в том числе" не может быть больше, чем у основной суммы
	// 2. Знак суммы "в том числе" не может отличаться от знака основной суммы
	
	// Правила обработки (применяются последовательно):
	// Если зависимая сумма отличается знаком от основной - она обнуляется
	// Если зависимая сумма по модулю больше основной - она приравнивается к основной
	
	ИмяЗависимойСуммы = ИмяСуммы + "ТорговыйСбор";
	
	ОсновнаяСумма  = СтрокаТаблицы[ИмяСуммы];
	ЗависимаяСумма = СтрокаТаблицы[ИмяЗависимойСуммы];
	
	ЗнакСуммы      = ?(ОсновнаяСумма < 0, -1, 1);
	ЗнакЗависимой  = ?(ЗависимаяСумма < 0, -1, 1);
	
	Если ЗнакСуммы <> ЗнакЗависимой Тогда
		ЗависимаяСумма = 0;
	ИначеЕсли ОсновнаяСумма*ЗнакСуммы < ЗависимаяСумма*ЗнакСуммы Тогда
		ЗависимаяСумма = ОсновнаяСумма;
	КонецЕсли;
	
	СтрокаТаблицы[ИмяЗависимойСуммы] = ЗависимаяСумма;

КонецПроцедуры

&НаКлиенте
Процедура УменьшениеНалогаСуммыПФРПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.УменьшениеНалога.ТекущиеДанные;
	
	ИмяСуммы = "ПФР";
	УменьшениеНалогаОбработатьИзменениеСуммы(СтрокаТаблицы, ИмяСуммы);
	
КонецПроцедуры

&НаКлиенте
Процедура УменьшениеНалогаСуммыФССПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.УменьшениеНалога.ТекущиеДанные;
	
	ИмяСуммы = "ФСС";
	УменьшениеНалогаОбработатьИзменениеСуммы(СтрокаТаблицы, ИмяСуммы);
	
КонецПроцедуры

&НаКлиенте
Процедура УменьшениеНалогаСуммыФОМСПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.УменьшениеНалога.ТекущиеДанные;
	
	ИмяСуммы = "ФОМС";
	УменьшениеНалогаОбработатьИзменениеСуммы(СтрокаТаблицы, ИмяСуммы);
	
КонецПроцедуры

&НаКлиенте
Процедура УменьшениеНалогаСуммыФСС_НСПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.УменьшениеНалога.ТекущиеДанные;
	
	ИмяСуммы = "ФСС_НС";
	УменьшениеНалогаОбработатьИзменениеСуммы(СтрокаТаблицы, ИмяСуммы);
	
КонецПроцедуры

&НаКлиенте
Процедура УменьшениеНалогаСуммыБольничныеПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.УменьшениеНалога.ТекущиеДанные;
	
	ИмяСуммы = "Больничные";
	УменьшениеНалогаОбработатьИзменениеСуммы(СтрокаТаблицы, ИмяСуммы);
	
КонецПроцедуры

&НаКлиенте
Процедура УменьшениеНалогаСуммыДобровольноеСтрахованиеПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.УменьшениеНалога.ТекущиеДанные;
	
	ИмяСуммы = "ДобровольноеСтрахование";
	УменьшениеНалогаОбработатьИзменениеСуммы(СтрокаТаблицы, ИмяСуммы);
	
КонецПроцедуры




