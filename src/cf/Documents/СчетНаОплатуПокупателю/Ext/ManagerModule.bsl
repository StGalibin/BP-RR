
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

Функция ТекстЗапросаДанныеДляОбновленияЦенДокументов() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СчетНаОплатуПокупателюВозвратнаяТара.Номенклатура,
	|	СчетНаОплатуПокупателюВозвратнаяТара.Цена,
	|	&Валюта,
	|	&СпособЗаполненияЦены,
	|	ИСТИНА КАК ЦенаВключаетНДС
	|ПОМЕСТИТЬ ВозвратнаяТара
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.ВозвратнаяТара КАК СчетНаОплатуПокупателюВозвратнаяТара
	|ГДЕ
	|	СчетНаОплатуПокупателюВозвратнаяТара.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетНаОплатуПокупателюТовары.Номенклатура КАК Номенклатура,
	|	СчетНаОплатуПокупателюТовары.Цена КАК Цена,
	|	&Валюта КАК Валюта,
	|	&СпособЗаполненияЦены,
	|	&ЦенаВключаетНДС
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуПокупателюТовары
	|ГДЕ
	|	СчетНаОплатуПокупателюТовары.Ссылка = &Ссылка
	|	И НЕ СчетНаОплатуПокупателюТовары.Номенклатура В
	|				(ВЫБРАТЬ
	|					ВозвратнаяТара.Номенклатура
	|				ИЗ
	|					ВозвратнаяТара КАК ВозвратнаяТара)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВозвратнаяТара.Номенклатура,
	|	ВозвратнаяТара.Цена,
	|	&Валюта,
	|	&СпособЗаполненияЦены,
	|	ВозвратнаяТара.ЦенаВключаетНДС
	|ИЗ
	|	ВозвратнаяТара КАК ВозвратнаяТара
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Цена,
	|	Валюта";
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДанныеДляПечатиЧека(НомераТаблиц) Экспорт
	
	НомераТаблиц.Вставить("ВТ_ОплачиваемыеСчета", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ОплачиваемаяНоменклатура", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ОплачиваемыеДокументы", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВТ_РасшифровкаПлатежа.СчетНаОплату КАК Документ,
	|	ДокументСчетНаОплатуПокупателю.Организация КАК Организация,
	|	ДокументСчетНаОплатуПокупателю.Дата КАК Дата,
	|	ЕСТЬNULL(ДокументСчетНаОплатуПокупателю.СуммаВключаетНДС, ИСТИНА) КАК СуммаВключаетНДС,
	|	ЕСТЬNULL(ДокументСчетНаОплатуПокупателю.СуммаСкидки, 0) КАК СуммаСкидкиПоДокументу,
	|	ВТ_РасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ДоговорыКонтрагентов.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	ЕСТЬNULL(ДокументСчетНаОплатуПокупателю.ВалютаДокумента, &ВалютаРегламентированногоУчета) КАК ВалютаДокумента,
	|	ВТ_РеквизитыШапки.ВалютаДокумента КАК ВалютаПлатежа,
	|	СУММА(ВТ_РасшифровкаПлатежа.СуммаПлатежа) КАК СуммаОплаты,
	|	СУММА(ВТ_РасшифровкаПлатежа.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	ВТ_РасшифровкаПлатежа.СтавкаНДС
	|ПОМЕСТИТЬ ВТ_ОплачиваемыеДокументы
	|ИЗ
	|	ВТ_РасшифровкаПлатежа КАК ВТ_РасшифровкаПлатежа
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РеквизитыШапки КАК ВТ_РеквизитыШапки
	|		ПО ВТ_РасшифровкаПлатежа.Ссылка = ВТ_РеквизитыШапки.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПокупателю КАК ДокументСчетНаОплатуПокупателю
	|		ПО ВТ_РасшифровкаПлатежа.СчетНаОплату = ДокументСчетНаОплатуПокупателю.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО ВТ_РасшифровкаПлатежа.ДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_РасшифровкаПлатежа.СтавкаНДС,
	|	ДокументСчетНаОплатуПокупателю.Организация,
	|	ДокументСчетНаОплатуПокупателю.Дата,
	|	ВТ_РасшифровкаПлатежа.СчетНаОплату,
	|	ЕСТЬNULL(ДокументСчетНаОплатуПокупателю.СуммаВключаетНДС, ИСТИНА),
	|	ВТ_РеквизитыШапки.ВалютаДокумента,
	|	ВТ_РасшифровкаПлатежа.ДоговорКонтрагента,
	|	ЕСТЬNULL(ДокументСчетНаОплатуПокупателю.ВалютаДокумента, &ВалютаРегламентированногоУчета),
	|	ЕСТЬNULL(ДокументСчетНаОплатуПокупателю.СуммаСкидки, 0),
	|	ДоговорыКонтрагентов.РасчетыВУсловныхЕдиницах
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетНаОплатуПокупателюТовары.Ссылка КАК Документ,
	|	СчетНаОплатуПокупателюТовары.Ссылка.Дата КАК ДатаДокумента,
	|	СчетНаОплатуПокупателюТовары.Номенклатура,
	|	&ЧастьЗапросаДляВыбораСодержанияУслуг КАК Наименование,
	|	МАКСИМУМ(ЕСТЬNULL(ШтрихкодыНоменклатуры.Штрихкод, НЕОПРЕДЕЛЕНО)) КАК Штрихкод,
	|	СУММА(ВЫБОР
	|			КОГДА СчетНаОплатуПокупателюТовары.Количество = 0
	|					И ЕСТЬNULL(СчетНаОплатуПокупателюТовары.Номенклатура.Услуга, ИСТИНА)
	|				ТОГДА 1
	|			ИНАЧЕ СчетНаОплатуПокупателюТовары.Количество
	|		КОНЕЦ) КАК Количество,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ВТ_ОплачиваемыеДокументы.СуммаВключаетНДС
	|				ТОГДА СчетНаОплатуПокупателюТовары.Цена
	|			КОГДА СчетНаОплатуПокупателюТовары.Количество = 0
	|				ТОГДА СчетНаОплатуПокупателюТовары.Сумма + СчетНаОплатуПокупателюТовары.СуммаНДС
	|			ИНАЧЕ (СчетНаОплатуПокупателюТовары.Сумма + СчетНаОплатуПокупателюТовары.СуммаНДС) / СчетНаОплатуПокупателюТовары.Количество
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
	|	СУММА(СчетНаОплатуПокупателюТовары.СуммаСкидки) КАК СуммаСкидок,
	|	СчетНаОплатуПокупателюТовары.СтавкаНДС,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_ОплачиваемыеДокументы.СуммаВключаетНДС
	|				ТОГДА СчетНаОплатуПокупателюТовары.Сумма - СчетНаОплатуПокупателюТовары.СуммаСкидки
	|			ИНАЧЕ СчетНаОплатуПокупателюТовары.Сумма + СчетНаОплатуПокупателюТовары.СуммаНДС - СчетНаОплатуПокупателюТовары.СуммаСкидки
	|		КОНЕЦ) КАК Сумма,
	|	СУММА(ЕСТЬNULL(ВТ_РеализованнаяНоменклатура.Количество, 0)) КАК КоличествоОтгружено
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуПокупателюТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОплачиваемыеДокументы КАК ВТ_ОплачиваемыеДокументы
	|		ПО СчетНаОплатуПокупателюТовары.Ссылка = ВТ_ОплачиваемыеДокументы.Документ
	|			И СчетНаОплатуПокупателюТовары.СтавкаНДС = ВТ_ОплачиваемыеДокументы.СтавкаНДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО СчетНаОплатуПокупателюТовары.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РеализованнаяНоменклатура КАК ВТ_РеализованнаяНоменклатура
	|		ПО (ВТ_РеализованнаяНоменклатура.СчетНаОплату = СчетНаОплатуПокупателюТовары.Ссылка)
	|			И (ВТ_РеализованнаяНоменклатура.Номенклатура = СчетНаОплатуПокупателюТовары.Номенклатура)
	|			И (ВТ_РеализованнаяНоменклатура.Содержание = СчетНаОплатуПокупателюТовары.Содержание)
	|ГДЕ
	|	(СчетНаОплатуПокупателюТовары.Количество <> 0
	|			ИЛИ ЕСТЬNULL(СчетНаОплатуПокупателюТовары.Номенклатура.Услуга, ИСТИНА))
	|	И НЕ ВТ_ОплачиваемыеДокументы.Документ ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетНаОплатуПокупателюТовары.Ссылка,
	|	СчетНаОплатуПокупателюТовары.Ссылка.Дата,
	|	&ЧастьЗапросаДляВыбораСодержанияУслуг,
	|	СчетНаОплатуПокупателюТовары.СтавкаНДС,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ВТ_ОплачиваемыеДокументы.СуммаВключаетНДС
	|				ТОГДА СчетНаОплатуПокупателюТовары.Цена
	|			КОГДА СчетНаОплатуПокупателюТовары.Количество = 0
	|				ТОГДА СчетНаОплатуПокупателюТовары.Сумма + СчетНаОплатуПокупателюТовары.СуммаНДС
	|			ИНАЧЕ (СчетНаОплатуПокупателюТовары.Сумма + СчетНаОплатуПокупателюТовары.СуммаНДС) / СчетНаОплатуПокупателюТовары.Количество
	|		КОНЕЦ КАК ЧИСЛО(15, 2)),
	|	СчетНаОплатуПокупателюТовары.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОплачиваемыеСчета.Документ,
	|	ОплачиваемыеСчета.Организация,
	|	ОплачиваемыеСчета.Дата,
	|	ОплачиваемыеСчета.СуммаСкидкиПоДокументу,
	|	ОплачиваемыеСчета.РасчетыВУсловныхЕдиницах
	|		И ОплачиваемыеСчета.ВалютаДокумента <> ОплачиваемыеСчета.ВалютаПлатежа КАК РасчетыВУсловныхЕдиницах,
	|	ОплачиваемыеСчета.СтавкаНДС,
	|	ОплачиваемыеСчета.СуммаОплаты,
	|	ОплачиваемыеСчета.СуммаВзаиморасчетов,
	|	СУММА(ЕСТЬNULL(ОплатаСчетов.Сумма, 0)) КАК СуммаОплатыВсего
	|ИЗ
	|	ВТ_ОплачиваемыеДокументы КАК ОплачиваемыеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОплатаСчетов КАК ОплатаСчетов
	|		ПО ОплачиваемыеСчета.Документ = ОплатаСчетов.СчетНаОплату
	|			И ОплачиваемыеСчета.СтавкаНДС = ОплатаСчетов.СтавкаНДС
	|			И ОплачиваемыеСчета.Организация = ОплатаСчетов.Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	ОплачиваемыеСчета.СтавкаНДС,
	|	ОплачиваемыеСчета.Документ,
	|	ОплачиваемыеСчета.Организация,
	|	ОплачиваемыеСчета.Дата,
	|	ОплачиваемыеСчета.СуммаОплаты,
	|	ОплачиваемыеСчета.СуммаВзаиморасчетов,
	|	ОплачиваемыеСчета.РасчетыВУсловныхЕдиницах
	|		И ОплачиваемыеСчета.ВалютаДокумента <> ОплачиваемыеСчета.ВалютаПлатежа,
	|	ОплачиваемыеСчета.СуммаСкидкиПоДокументу";
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	ЧастьЗапросаДляВыбораСодержанияУслуг = ОбщегоНазначенияБПВызовСервера.ПолучитьЧастьЗапросаДляВыбораСодержанияУслуг("СчетНаОплатуПокупателюТовары");
	Возврат СтрЗаменить(ТекстЗапроса, "&ЧастьЗапросаДляВыбораСодержанияУслуг", ЧастьЗапросаДляВыбораСодержанияУслуг);
КонецФункции

#КонецОбласти 

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Запрос = Новый Запрос;
	СписокУсловий = Новый Массив;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 51
		|	СчетНаОплатуПокупателю.Номер,
		|	СчетНаОплатуПокупателю.Дата КАК Дата,
		|	СчетНаОплатуПокупателю.Ссылка,
		|	СчетНаОплатуПокупателю.СуммаДокумента
		|ИЗ
		|	Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументов КАК СтатусыДокументов
		|		ПО СчетНаОплатуПокупателю.Ссылка = СтатусыДокументов.Документ
		|ГДЕ
		|	&Условия
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
	
	СтрокаПоиска = "%";
	ЕстьСпецсимвол = Ложь;
	// Символы %_[] являются служебными в языке запросов. В случае наличия их в поисковой строке необходимо использовать спецсимвол
	Для Позиция = 1 По СтрДлина(Параметры.СтрокаПоиска) Цикл
		
		ТекущийСимвол = Сред(Параметры.СтрокаПоиска, Позиция, 1);
		
		Если СтрНайти("_%[]~", ТекущийСимвол) > 0 Тогда
			СтрокаПоиска = СтрокаПоиска + "~"+ТекущийСимвол;
			ЕстьСпецСимвол = Истина;
		Иначе 
			СтрокаПоиска = СтрокаПоиска + ТекущийСимвол;
		КонецЕсли;
	
	КонецЦикла;
	
	СтрокаПоиска = СтрокаПоиска+"%";
	
	СписокУсловий.Добавить("СчетНаОплатуПокупателю.Номер ПОДОБНО &Номер"+?(ЕстьСпецсимвол, " СПЕЦСИМВОЛ ""~"" ", ""));
	Запрос.УстановитьПараметр("Номер", СтрокаПоиска);
	
	Для каждого ПараметрОтбора Из Параметры.Отбор Цикл
		
		ИмяРеквизита      = ПараметрОтбора.Ключ;
		ЗначениеРеквизита = ПараметрОтбора.Значение;
		
		Если  ИмяРеквизита = "Оплата" Тогда
			ПутьКРеквизиту = "ВЫРАЗИТЬ(ЕСТЬNULL(СтатусыДокументов.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусОплатыСчета.НеОплачен)) КАК Перечисление.СтатусОплатыСчета)";
		ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта(ИмяРеквизита, Метаданные.Документы.СчетНаОплатуПокупателю) Тогда
			ПутьКРеквизиту = "СчетНаОплатуПокупателю."+ИмяРеквизита;
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если ИмяРеквизита = "ДоговорКонтрагента" Тогда
			ДополнитьОтборПоДоговору(ЗначениеРеквизита);
		КонецЕсли;
		
		Если ТипЗнч(ЗначениеРеквизита) = Тип("ФиксированныйМассив") Тогда
			Условие = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 В (&%2)", ПутьКРеквизиту, ИмяРеквизита);
		Иначе
			Условие = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 = &%2", ПутьКРеквизиту, ИмяРеквизита);
		КонецЕсли;
		
		СписокУсловий.Добавить(Условие);
		Запрос.УстановитьПараметр(ИмяРеквизита, ЗначениеРеквизита);
	
	КонецЦикла;
	
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&Условия", СтрСоединить(СписокУсловий, " И "));
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() > 0 И Выборка.Количество() < 51 Тогда
		
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Новый СписокЗначений;
		
		Пока Выборка.Следующий() Цикл
			
			ПредставлениеДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 от %2 (%3)",
				Выборка.Номер,
				Формат(Выборка.Дата, "ДЛФ=D"),
				Формат(Выборка.СуммаДокумента, "ЧЦ=15; ЧДЦ=2"));
		
			ДанныеВыбора.Добавить(Выборка.Ссылка,ПредставлениеДокумента);
		
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПредварительныйПросмотрПечатнойФормыСчетНаОплату") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПредварительныйПросмотрПечатнойФормыСчетНаОплату", "Счет на оплату", 
			ПечатьТорговыхДокументов.ПечатьПредварительныйПросмотрСчетаНаОплату(ПараметрыПечати.Организация, ОбъектыПечати, "СчетЗаказ"));
		ЗаполнитьПараметрыЭлектроннойПочты = Ложь;
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПриложениеКДоговору") Тогда
		ТаблицаСведенийСчетНаОплату = ПолучитьТаблицуСведенийСчетаНаОплату(МассивОбъектов);
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПриложениеКДоговору", "Приложение к договору", 
			ПечатьТорговыхДокументов.ПечатьПриложенияКДоговору(ТаблицаСведенийСчетНаОплату, ОбъектыПечати),,"Документ.СчетНаОплатуПокупателю.ПФ_MXL_ПриложениеКДоговору");
	КонецЕсли;
	
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов,
		КоллекцияПечатныхФорм,
		ОбъектыПечати,
		ПараметрыВывода);
	
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Счет на оплату
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьСчетаНаОплату";
	КомандаПечати.Идентификатор  = "СчетЗаказ";
	КомандаПечати.Представление  = НСтр("ru = 'Счет на оплату'");
	КомандаПечати.Обработчик     = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок        = 10;
	
	// Счет на оплату (с печатью и подписями) 
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьСчетаНаОплату";
	КомандаПечати.Идентификатор  = "СчетЗаказСПечатью";
	КомандаПечати.Представление  = НСтр("ru = 'Счет на оплату (с печатью и подписями) '");
	КомандаПечати.Обработчик     = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок        = 20;

	// Текст договора
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Договора";
	КомандаПечати.Представление = НСтр("ru = 'Договор'");
	КомандаПечати.Обработчик    = "ПечатьДоговоровКлиент.ВыполнитьКомандуПечатиТекстаДоговора";
	КомандаПечати.СписокФорм    = "ФормаДокумента";
	КомандаПечати.Порядок       = 30;
	КомандаПечати.ФункциональныеОпции = "ВестиУчетПоДоговорам";

	// Приложение к договору (спецификация)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПриложениеКДоговору";
	КомандаПечати.Представление = НСтр("ru = 'Приложение к договору'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиПриложенияКДоговору";
	КомандаПечати.СписокФорм    = "ФормаДокумента";
	КомандаПечати.Порядок       = 40;
	КомандаПечати.ФункциональныеОпции = "ВестиУчетПоДоговорам";

	Если ПравоДоступа("Использование", Метаданные.Отчеты.РеестрДокументов) Тогда
		// Реестр документов
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "Реестр";
		КомандаПечати.Представление = НСтр("ru = 'Реестр документов'");
		КомандаПечати.ЗаголовокФормы= НСтр("ru = 'Реестр документов ""Счет покупателю""'");
		КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
		КомандаПечати.СписокФорм    = "ФормаСписка";
		КомандаПечати.Порядок       = 100;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТаблицуСведенийСчетаНаОплату(Знач МассивДокументов, ДокументыБезСчетовНаОплату = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаСведений = ПечатьТорговыхДокументов.ПолучитьОписаниеСчетаНаОплату();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("ДополнительнаяКолонкаПечатныхФормДокументов", Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить());
	Запрос.Текст = ПолучитьТекстЗапросаДляФормированияТаблицыСведенийСчетаНаОплату();
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Выборка = РезультатЗапроса[1].Выбрать();
	СтрокиДокументов = РезультатЗапроса[2].Выгрузить();
	СтрокиДокументов.Индексы.Добавить("Документ");
	
	Пока Выборка.Следующий() Цикл
		
		СведенияОДокументе = ТаблицаСведений.Добавить();
		ЗаполнитьЗначенияСвойств(СведенияОДокументе, Выборка);
		
		ТаблицаДокумента = ПечатьТорговыхДокументов.ПолучитьОписаниеТаблицыСчетаНаОплату();
		
		Отбор = Новый Структура("Документ", Выборка.Документ);
		СтрокиДокумента = СтрокиДокументов.НайтиСтроки(Отбор);
		
		Для Каждого Строка Из СтрокиДокумента Цикл
			
			СтрокаТаблицыДокумента = ТаблицаДокумента.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыДокумента, Строка);
			
		КонецЦикла;
		
		СведенияОДокументе.ТаблицаДокумента = ТаблицаДокумента;
		
		
		ПорядокЗаполнения = Новый Структура("ЗаполнятьРуководителя, ЗаполнятьГлавногоБухгалтера");
		ПечатьТорговыхДокументов.ЗаполнитьДанныеОтветственныхЛиц(СведенияОДокументе, ПорядокЗаполнения);
		
		Если НЕ ЗначениеЗаполнено(СведенияОДокументе.РуководительДолжностьНаименование) Тогда
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СведенияОДокументе.Получатель, "ЮридическоеФизическоеЛицо")
				= Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
				СведенияОДокументе.РуководительДолжностьНаименование = "Индивидуальный предприниматель";
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаСведений;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляФормированияТаблицыСведенийСчетаНаОплату()
	
	ЧастьЗапросаДляВыбораСодержанияУслуг = ОбщегоНазначенияБПВызовСервера.ПолучитьЧастьЗапросаДляВыбораСодержанияУслуг("СчетНаОплату");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СчетНаОплату.Ссылка КАК Ссылка,
	|	СчетНаОплату.Дата КАК ДатаДокумента,
	|	СчетНаОплату.СуммаВключаетНДС КАК СуммаВключаетНДС
	|ПОМЕСТИТЬ ДокументыДляПечати
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю КАК СчетНаОплату
	|ГДЕ
	|	СчетНаОплату.Ссылка В(&МассивДокументов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетНаОплату.Ссылка КАК Документ,
	|	СчетНаОплату.Дата КАК ДатаДляПолученияСведений,
	|	ДанныеПервичныхДокументов.Номер КАК НомерДокумента,
	|	ДанныеПервичныхДокументов.Дата КАК ДатаДокумента,
	|	СчетНаОплату.ВалютаДокумента КАК Валюта,
	|	СчетНаОплату.ВалютаДокумента.Код КАК ВалютаКод,
	|	СчетНаОплату.ВалютаДокумента.Наименование КАК ВалютаНаименование,
	|	СчетНаОплату.СуммаДокумента КАК СуммаДокумента,
	|	СчетНаОплату.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	СчетНаОплату.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	СчетНаОплату.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	СчетНаОплату.Организация КАК Организация,
	|	СчетНаОплату.ПодразделениеОрганизации КАК Подразделение,
	|	СчетНаОплату.Организация КАК Поставщик,
	|	СчетНаОплату.Организация КАК Руководители,
	|	СчетНаОплату.ОрганизацияПолучатель КАК Получатель,
	|	СчетНаОплату.Контрагент КАК Покупатель,
	|	СчетНаОплату.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	СчетНаОплату.ДоговорКонтрагента.Номер КАК НомерДоговора,
	|	СчетНаОплату.ДоговорКонтрагента.Дата КАК ДатаДоговора,
	|	СчетНаОплату.ДоговорКонтрагента.Руководитель КАК ФИОИсполнителя,
	|	СчетНаОплату.ДоговорКонтрагента.ДолжностьРуководителя КАК ДолжностьИсполнителя,
	|	СчетНаОплату.ДоговорКонтрагента.РуководительКонтрагента КАК ФИОЗаказчика,
	|	СчетНаОплату.ДоговорКонтрагента.ДолжностьРуководителяКонтрагента КАК ДолжностьЗаказчика,
	|	СчетНаОплату.СтруктурнаяЕдиница КАК БанковскийСчетПродавца,
	|	СчетНаОплату.СтруктурнаяЕдиница.ТекстКорреспондента КАК ТекстКорреспондента,
	|	СчетНаОплату.СтруктурнаяЕдиница.БанкДляРасчетов КАК БанкДляРасчетов,
    |   СчетНаОплату.Руководитель КАК Руководитель,
    |   СчетНаОплату.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
    |   СчетНаОплату.ЗаРуководителяНаОсновании КАК ЗаРуководителяНаОсновании,
    |   СчетНаОплату.ЗаГлавногоБухгалтераНаОсновании КАК ЗаГлавногоБухгалтераНаОсновании,
    |	ВЫБОР
	|		КОГДА СчетНаОплату.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА СчетНаОплату.СтруктурнаяЕдиница.БанкДляРасчетов.Наименование + "" "" + СчетНаОплату.СтруктурнаяЕдиница.БанкДляРасчетов.Город
	|		ИНАЧЕ СчетНаОплату.СтруктурнаяЕдиница.Банк.Наименование + "" "" + СчетНаОплату.СтруктурнаяЕдиница.Банк.Город
	|	КОНЕЦ КАК НаименованиеБанкаПолучателя,
	|	ВЫБОР
	|		КОГДА СчетНаОплату.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА СчетНаОплату.СтруктурнаяЕдиница.БанкДляРасчетов
	|		ИНАЧЕ СчетНаОплату.СтруктурнаяЕдиница.Банк
	|	КОНЕЦ КАК БанкПолучателя,
	|	ВЫБОР
	|		КОГДА СчетНаОплату.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА СчетНаОплату.СтруктурнаяЕдиница.БанкДляРасчетов.Код
	|		ИНАЧЕ СчетНаОплату.СтруктурнаяЕдиница.Банк.Код
	|	КОНЕЦ КАК БикБанкаПолучателя,
	|	ВЫБОР
	|		КОГДА СчетНаОплату.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА СчетНаОплату.СтруктурнаяЕдиница.БанкДляРасчетов.КоррСчет
	|		ИНАЧЕ СчетНаОплату.СтруктурнаяЕдиница.Банк.КоррСчет
	|	КОНЕЦ КАК СчетБанкаПолучателя,
	|	ВЫБОР
	|		КОГДА СчетНаОплату.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА СчетНаОплату.СтруктурнаяЕдиница.БанкДляРасчетов.Город
	|		ИНАЧЕ СчетНаОплату.СтруктурнаяЕдиница.Банк.Город
	|	КОНЕЦ КАК ГородБанкаПолучателя,
	|	ВЫБОР
	|		КОГДА СчетНаОплату.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА СчетНаОплату.СтруктурнаяЕдиница.Банк.КоррСчет
	|		ИНАЧЕ СчетНаОплату.СтруктурнаяЕдиница.НомерСчета
	|	КОНЕЦ КАК НомерСчетаПолучателя,
	|	ВЫБОР
	|		КОГДА СчетНаОплату.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА "" р/с "" + СчетНаОплату.СтруктурнаяЕдиница.НомерСчета + "" в "" + СчетНаОплату.СтруктурнаяЕдиница.Банк.Наименование + "" "" + СчетНаОплату.СтруктурнаяЕдиница.Банк.Город
	|	КОНЕЦ КАК БанкТекстКорресподента,
	|	СчетНаОплату.СуммаСкидки КАК СуммаСкидки,
	|	СчетНаОплату.СтруктурнаяЕдиница.НомерСчета КАК НомерСчета,
	|	СчетНаОплату.СтруктурнаяЕдиница.Банк.Наименование КАК БанкНаименование,
	|	СчетНаОплату.СтруктурнаяЕдиница.Банк.Код КАК БИК,
	|	СчетНаОплату.СтруктурнаяЕдиница.Банк.КоррСчет КАК КоррСчет,
	|	ЕстьNull(ДополнительныеУсловия.ТекстУсловий, """") КАК ТекстДополнительныхУсловий,
	|	ЕстьNull(СрокиОплатыДокументов.СрокОплаты, ДатаВремя(1,1,1)) КАК СрокОплаты
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю КАК СчетНаОплату
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО СчетНаОплату.Ссылка = ДанныеПервичныхДокументов.Документ
	|			И СчетНаОплату.Организация = ДанныеПервичныхДокументов.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СрокиОплатыДокументов КАК СрокиОплатыДокументов
	|		ПО СчетНаОплату.Ссылка = СрокиОплатыДокументов.Документ
	|			И СчетНаОплату.Организация = СрокиОплатыДокументов.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДополнительныеУсловия КАК СправочникДополнительныеУсловия
	|		ПО СчетНаОплату.ДополнительныеУсловия = СправочникДополнительныеУсловия.Ссылка
	|			
	|ГДЕ
	|	СчетНаОплату.Ссылка В
	|			(ВЫБРАТЬ
	|				ДокументыДляПечати.Ссылка
	|			ИЗ
	|				ДокументыДляПечати КАК ДокументыДляПечати)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетНаОплату.Ссылка КАК Документ,
	|	ДокументыДляПечати.ДатаДокумента КАК ДатаДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Товары) КАК ТабличнаяЧасть,
	|	1 КАК ПорядокТабличнойЧасти,
	|	СчетНаОплату.НомерСтроки КАК НомерСтроки,
	|	СчетНаОплату.Номенклатура КАК Номенклатура,
	|	СчетНаОплату.Номенклатура.Услуга КАК ЭтоУслуга,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Код)
	|			ТОГДА СчетНаОплату.Номенклатура.Код
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА СчетНаОплату.Номенклатура.Артикул
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК НоменклатураАртикул,
	|	&ЧастьЗапросаДляВыбораСодержанияУслуг КАК НоменклатураНаименование,
	|	&ЧастьЗапросаДляВыбораСодержанияУслуг КАК Содержание,
	|	ЕСТЬNULL(СчетНаОплату.Номенклатура.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(СчетНаОплату.Номенклатура.ЕдиницаИзмерения.Код, """") КАК ЕдиницаИзмеренияКод,
	|	ЕСТЬNULL(СчетНаОплату.Номенклатура.ЕдиницаИзмерения.Наименование, """") КАК ЕдиницаИзмеренияНаименование,
	|	ЕСТЬNULL(СчетНаОплату.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное, """") КАК ЕдиницаИзмеренияНаименованиеПолное,
	|	СчетНаОплату.Количество КАК Количество,
	|	СчетНаОплату.Цена КАК Цена,
	|	СчетНаОплату.Сумма КАК Сумма,
	|	СчетНаОплату.СуммаСкидки КАК СуммаСкидки,
	|	СчетНаОплату.СтавкаНДС КАК СтавкаНДС,
	|	СчетНаОплату.СуммаНДС КАК СуммаНДС
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплату
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыДляПечати КАК ДокументыДляПечати
	|		ПО СчетНаОплату.Ссылка = ДокументыДляПечати.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента,
	|	Документ,
	|	ПорядокТабличнойЧасти,
	|	НомерСтроки";
	
	Возврат СтрЗаменить(ТекстЗапроса, "&ЧастьЗапросаДляВыбораСодержанияУслуг", ЧастьЗапросаДляВыбораСодержанияУслуг);
	
КонецФункции

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Информация", "Контрагент");
	Результат.Вставить("Оплата", "СтатусыДокументов.Статус");
	Результат.Вставить("Отгрузка", "СтатусыДокументов.ДополнительныйСтатус");
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру с перечнем полей, которые могут быть поставлены в текст 
// договора по данным из документа.
//
Функция ПодготовитьПараметрыПечатиТекстаДоговора(СсылкаНаДокумент) Экспорт

	Результат = Новый Структура();
	Результат.Вставить("Организация", 		Справочники.Организации.ПустаяСсылка());
	Результат.Вставить("БанковскийСчет", 	Справочники.БанковскиеСчета.ПустаяСсылка());
	Результат.Вставить("ВалютаДокумента", 	Справочники.Валюты.ПустаяСсылка());
	Результат.Вставить("СуммаСНДС", 		0);
	Результат.Вставить("СуммаНДС", 			0);


	РеквизитыДокумента 	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаДокумент, 
		"Организация, СтруктурнаяЕдиница, СуммаДокумента, СуммаВключаетНДС, ВалютаДокумента");

	Результат.Организация 		= РеквизитыДокумента.Организация;
	Результат.БанковскийСчет	= РеквизитыДокумента.СтруктурнаяЕдиница;
	Результат.СуммаСНДС			= РеквизитыДокумента.СуммаДокумента;
	Результат.ВалютаДокумента	= РеквизитыДокумента.ВалютаДокумента;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СсылкаНаДокумент", СсылкаНаДокумент);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ТЧТовары.СуммаНДС) КАК СуммаНДС
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.Товары КАК ТЧТовары
	|
	|	ГДЕ
	|		ТЧТовары.Ссылка = &СсылкаНаДокумент";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат.СуммаНДС = Выборка.СуммаНДС;
		Если НЕ РеквизитыДокумента.СуммаВключаетНДС Тогда
			Результат.СуммаСНДС = Результат.СуммаСНДС + Выборка.СуммаНДС;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Заполняет список команд отправки по электронной почте.
// 
// Параметры:
//   КомандыОтправки - ТаблицаЗначений - состав полей см. в функции ОтправкаПочтовыхСообщений.КомандыОтправки
//
Процедура ДобавитьКомандыОтправки(КомандыОтправки) Экспорт
	
	// Счет на оплату
	КомандаОтправки = КомандыОтправки.Добавить();
	КомандаОтправки.МенеджерПечати  = "Обработка.ПечатьСчетаНаОплату";
	КомандаОтправки.Идентификатор = "СчетЗаказ";
	КомандаОтправки.Представление = НСтр("ru='Счет на оплату'");
	КомандаОтправки.Порядок       = 10;
	
	// Счет на оплату (с печатью и подписями)
	КомандаОтправки = КомандыОтправки.Добавить();
	КомандаОтправки.МенеджерПечати  = "Обработка.ПечатьСчетаНаОплату";
	КомандаОтправки.Идентификатор = "СчетЗаказСПечатью";
	КомандаОтправки.Представление = НСтр("ru='Счет на оплату (с печатью и подписями)'");
	КомандаОтправки.Порядок       = 20;
	
КонецПроцедуры

Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	МассивРеквизитов = Новый Массив();
	МассивРеквизитов.Добавить("УдалитьУчитыватьНДС");
	
	Возврат МассивРеквизитов;
	
КонецФункции

Процедура ПеренестиРегистрациюПользовательскойПечатнойФормыСчета() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПользовательскиеМакетыПечатиДокумента.ИмяМакета
	|ИЗ
	|	РегистрСведений.ПользовательскиеМакетыПечати КАК ПользовательскиеМакетыПечатиДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПользовательскиеМакетыПечати КАК ПользовательскиеМакетыПечатиОбщие
	|		ПО ПользовательскиеМакетыПечатиДокумента.ИмяМакета = ПользовательскиеМакетыПечатиОбщие.ИмяМакета
	|			И (ПользовательскиеМакетыПечатиОбщие.Объект = ""ОбщийМакет"")
	|ГДЕ
	|	ПользовательскиеМакетыПечатиДокумента.Объект = ""Документ.СчетНаОплатуПокупателю""
	|	И ПользовательскиеМакетыПечатиДокумента.ИмяМакета = ""ПФ_MXL_СчетЗаказ""
	|	И ПользовательскиеМакетыПечатиОбщие.ИмяМакета ЕСТЬ NULL ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		МенеджерЗаписи = РегистрыСведений.ПользовательскиеМакетыПечати.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ИмяМакета = "ПФ_MXL_СчетЗаказ";
		МенеджерЗаписи.Объект    = "Документ.СчетНаОплатуПокупателю";
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.Объект = "ОбщийМакет";
			МенеджерЗаписи.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Формирует пакеты электронных документов вида счет на оплату стандарта CML 2.08
// 
// Параметры:
//  МассивОбъектов - Массив - массив ссылок на документы СчетаНаОплатуПокупателю
// 
// Возвращаемое значение:
//  Массив - содержит структуры со свойствами:
//    * Представление - Строка - наименование электронного счета
//    * АдресВоВременномХранилище - Строка - адрес данных электронного счета во временном хранилище
//
Функция СформироватьСчетаНаОплатуПокупателюВXML(МассивОбъектов) Экспорт
	
	ФайлыКОтправке          = Новый Массив;
	УникальныйИдентификатор = Новый УникальныйИдентификатор;
	МассивКОбработке        = Новый Массив;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	СчетНаОплатуПокупателю.Ссылка КАК СчетНаОплату,
	|	СчетНаОплатуПокупателю.Контрагент.ИНН,
	|	ПРЕДСТАВЛЕНИЕ(СчетНаОплатуПокупателю.Ссылка) КАК СчетНаОплатуПредставление,
	|	СчетНаОплатуПокупателю.Организация.ИНН,
	|	СчетНаОплатуПокупателю.Организация КАК Организация,
	|	ВЫБОР СчетНаОплатуПокупателю.Организация.ЮридическоеФизическоеЛицо
	|		КОГДА ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоЮрЛицо
	|ПОМЕСТИТЬ СчетаНаОплату
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
	|ГДЕ
	|	СчетНаОплатуПокупателю.Ссылка В(&МассивСсылок)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаНаОплату.СчетНаОплату,
	|	СчетаНаОплату.КонтрагентИНН,
	|	СчетаНаОплату.СчетНаОплатуПредставление,
	|	СчетаНаОплату.ОрганизацияИНН,
	|	СчетаНаОплату.ЭтоЮрЛицо,
	|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо КАК Руководитель
	|ИЗ
	|	СчетаНаОплату КАК СчетаНаОплату
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
	|				,
	|				ВЫРАЗИТЬ(СтруктурнаяЕдиница КАК Справочник.Организации) В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							СчетаНаОплату.Организация
	|						ИЗ
	|							СчетаНаОплату КАК СчетаНаОплату)
	|					И ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)) КАК ОтветственныеЛицаОрганизацийСрезПоследних
	|		ПО (СчетаНаОплату.Организация = (ВЫРАЗИТЬ(ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница КАК Справочник.Организации)))");
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивОбъектов);
	ВыборкаДанных = Запрос.Выполнить().Выбрать();
	Пока ВыборкаДанных.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(ВыборкаДанных.КонтрагентИНН) Тогда
			
			ШаблонСообщения = НСтр("ru = 'Сообщение будет отправлено без электронного документа %1. Не заполнен ИНН контрагента.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, """" + ВыборкаДанных.СчетНаОплатуПредставление + """");
			ЗаписьЖурналаРегистрации("Обмен ЭД через электронную почту", УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.СчетНаОплатуПокупателю,, ТекстСообщения);
			
			Продолжить;
			
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ВыборкаДанных.ОрганизацияИНН) Тогда
			
			ШаблонСообщения = НСтр("ru = 'Сообщение будет отправлено без электронного документа %1. Не заполнен ИНН организации.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, """" + ВыборкаДанных.СчетНаОплатуПредставление + """");
			ЗаписьЖурналаРегистрации("Обмен ЭД через электронную почту", УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.СчетНаОплатуПокупателю,, ТекстСообщения);
				
			Продолжить;
			
		КонецЕсли;
		Если ВыборкаДанных.ЭтоЮрЛицо И НЕ ЗначениеЗаполнено(ВыборкаДанных.Руководитель) Тогда
			
			ШаблонСообщения = НСтр("ru = 'Сообщение будет отправлено без электронного документа %1. Не заполнен руководитель организации.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, """" + ВыборкаДанных.СчетНаОплатуПредставление + """");
			ЗаписьЖурналаРегистрации("Обмен ЭД через электронную почту", УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.СчетНаОплатуПокупателю,, ТекстСообщения);
				
			Продолжить;
			
		КонецЕсли;
		
		МассивКОбработке.Добавить(ВыборкаДанных.СчетНаОплату);
		
	КонецЦикла;
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	Если МассивКОбработке.Количество() > 0 Тогда
	
		Обработки.ОбменСКонтрагентами.ПодготовитьДанныеДляЗаполненияДокументов(
			Новый Структура("МассивСсылокНаОбъект", МассивКОбработке), АдресХранилища);
	
	КонецЕсли;
	ТаблицаЭлектронныхСчетов = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если НЕ ЗначениеЗаполнено(ТаблицаЭлектронныхСчетов) Тогда
		Возврат ФайлыКОтправке;
	КонецЕсли;
	
	ШаблонИмениФайла = Нстр("ru='Электронный счет на оплату № %1 от %2.zip'");
	
	Для Каждого ЭлектронныйСчет Из ТаблицаЭлектронныхСчетов Цикл
		ОписаниеФайла = Новый Структура;
		ЭлектронныйСчет.АдресХранилища = ПоместитьВоВременноеХранилище(ЭлектронныйСчет.ДвоичныеДанныеПакета, УникальныйИдентификатор);
		СтрокиПредставленияСчета = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ЭлектронныйСчет.НаименованиеФайла, " ");
		ПредставлениеСчета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениФайла,
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(СтрокиПредставленияСчета[2], Истина),
			Формат(СтрокиПредставленияСчета[4], "ДЛФ=DD"));
		ОписаниеФайла.Вставить("Представление"            , ПредставлениеСчета);
		ОписаниеФайла.Вставить("АдресВоВременномХранилище", ЭлектронныйСчет.АдресХранилища);
		ФайлыКОтправке.Добавить(ОписаниеФайла);
	КонецЦикла;
	
	Возврат ФайлыКОтправке;
	
КонецФункции

// Читает данные электронных документов вида счет на оплату стандарта CML 2.08
//
// Параметры:
//  АдресаXMLФайлов - Массив - массив строк с адресами данных электронных счетов во временном хранилище
//
// Возвращаемое значение:
//  ДанныеСчетов - ТаблицаЗначений - таблица значений с колонками:
//    * ИНН - Строка - ИНН контрагента
//    * НомерСчета - Строка - номер электронного счета на оплату
//    * ДанныеСчета - Структура - содержит структуру заполненную данными электронного счета, см. ЗаполнитьСтруктуруДанныхСчета()
//
Функция РазобратьСчетаНаОплатуПокупателюXML(АдресаXMLФайлов) Экспорт
	
	ДанныеСчетов = Новый ТаблицаЗначений;
	ДанныеСчетов.Колонки.Добавить("Показывать"       , Новый ОписаниеТипов("Булево"));
	ДанныеСчетов.Колонки.Добавить("Наименование"     , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)));
	ДанныеСчетов.Колонки.Добавить("ИНН"              , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(12)));
	ДанныеСчетов.Колонки.Добавить("НомерСчета"       , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20)));
	ДанныеСчетов.Колонки.Добавить("ДатаСчета"        , Новый ОписаниеТипов("Дата"));
	ДанныеСчетов.Колонки.Добавить("СуммаДокумента"   , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ДанныеСчетов.Колонки.Добавить("ДанныеДокумента"  , Новый ОписаниеТипов("Структура"));
	ДанныеСчетов.Колонки.Добавить("ТабличныйДокумент", Новый ОписаниеТипов("ТабличныйДокумент"));
	
	ДанныеСчетов.Индексы.Добавить("ИНН, НомерСчета");
	
	Для Каждого АдресXMLФайла Из АдресаXMLФайлов Цикл
		
		СтруктураЭД = Новый Структура();
		СтруктураЭД.Вставить("НаправлениеЭД"           , Перечисления.НаправленияЭД.Входящий);
		СтруктураЭД.Вставить("УникальныйИдентификатор" , Новый УникальныйИдентификатор);
		СтруктураЭД.Вставить("АдресВХранилище"         , АдресXMLФайла);
		СтруктураЭД.Вставить("СсылкаНаДокумент"        , Неопределено);
		СтруктураЭД.Вставить("ИмяФайла"                , Неопределено);
		СтруктураЭД.Вставить("ФайлАрхива"              , Истина);
		
		СтруктураРеквизитовСчета = ПрочитатьЭлектронныйСчет(СтруктураЭД);
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовСчета) Тогда
			
			Отбор = Новый Структура("ИНН, НомерСчета",
				СтруктураРеквизитовСчета.РеквизитыКонтрагента.ИНН,
				СтруктураРеквизитовСчета.ШапкаДокумента.Номер);
			
			Если ДанныеСчетов.НайтиСтроки(Отбор).Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаДанныхСчета                   = ДанныеСчетов.Добавить();
			СтрокаДанныхСчета.Показывать        = Истина;
			СтрокаДанныхСчета.Наименование      = СтруктураРеквизитовСчета.РеквизитыКонтрагента.Наименование;
			СтрокаДанныхСчета.ИНН               = СтруктураРеквизитовСчета.РеквизитыКонтрагента.ИНН;
			СтрокаДанныхСчета.НомерСчета        = СтруктураРеквизитовСчета.ШапкаДокумента.Номер;
			СтрокаДанныхСчета.ДатаСчета         = СтруктураРеквизитовСчета.ШапкаДокумента.Дата;
			СтрокаДанныхСчета.СуммаДокумента    = СтруктураРеквизитовСчета.ШапкаДокумента.СуммаДокумента;
			СтрокаДанныхСчета.ДанныеДокумента   = СтруктураРеквизитовСчета;
			СтрокаДанныхСчета.ТабличныйДокумент = СтруктураРеквизитовСчета.ТабличныйДокумент;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеСчетов;
	
КонецФункции

Функция ПрочитатьЭлектронныйСчет(СтруктураЭД)
	
	ДанныеЭД = ПолучитьИзВременногоХранилища(СтруктураЭД.АдресВХранилище);
	
	Если ТипЗнч(ДанныеЭД) = Тип("Структура") Тогда
		ДвоичныеДанные = ДанныеЭД.ДвоичныеДанные;
	Иначе
		ДвоичныеДанные = ДанныеЭД;
	КонецЕсли;
	
	РазделительПути = ПолучитьРазделительПути();
	ПапкаДляРаспаковки = ЭлектронноеВзаимодействиеСлужебный.ТекущийКаталогВременныхФайлов() + РазделительПути
		+ "Ext" + РазделительПути + СтруктураЭД.УникальныйИдентификатор + РазделительПути;
		
	СоздатьКаталог(ПапкаДляРаспаковки);
	ИмяФайлаАрхива = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("zip");
	ДвоичныеДанные.Записать(ИмяФайлаАрхива);
	
	УдалитьФайлы(ПапкаДляРаспаковки, "*");
	
	ЧтениеЗИП = Новый ЧтениеZIPФайла(ИмяФайлаАрхива);
	Попытка
		ЧтениеЗИП.ИзвлечьВсе(ПапкаДляРаспаковки);
		УдалитьФайлы(ИмяФайлаАрхива);
		
	Исключение
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Если НЕ ЭлектронноеВзаимодействиеСлужебный.ВозможноИзвлечьФайлы(ЧтениеЗИП, ПапкаДляРаспаковки) Тогда
			ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("006");
		КонецЕсли;
		ЭлектронноеВзаимодействиеБПВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru='Распаковка архива ЭД'"),
			ТекстОшибки, ТекстСообщения);
		
		УдалитьФайлы(ИмяФайлаАрхива);
		УдалитьФайлы(ПапкаДляРаспаковки);
		Возврат Неопределено;
	КонецПопытки;
	
	МассивФайлИнформации = НайтиФайлы(ПапкаДляРаспаковки, "meta*.xml", Истина);
	Если МассивФайлИнформации.Количество() > 0 Тогда
		ФайлИнформации = МассивФайлИнформации[0];
	КонецЕсли;
	
	МассивФайлКарточки = НайтиФайлы(ПапкаДляРаспаковки, "card*.xml", Истина);
	Если МассивФайлКарточки.Количество() > 0 Тогда
		ФайлКарточки = МассивФайлКарточки[0];
	КонецЕсли;
	
	ИмяФайлаКартинок = Неопределено;
	МассивФайловКартинок = НайтиФайлы(ПапкаДляРаспаковки, "*.zip", Истина);
	Если МассивФайловКартинок.Количество() > 0 Тогда
		ФайлКартинок = МассивФайловКартинок[0];
		ИмяФайлаКартинок = ФайлКартинок.ПолноеИмя;
	КонецЕсли;
	
	Если ФайлКарточки = Неопределено Или ФайлИнформации = Неопределено Тогда
		УдалитьФайлы(ПапкаДляРаспаковки);
		Возврат Неопределено;
	КонецЕсли;
	
	СоответствиеФайлПараметры = ОбменСКонтрагентамиВнутренний.ПараметрыФайловЭДО(ФайлИнформации, ФайлКарточки);
	
	Для Каждого ЭлементСоответствия Из СоответствиеФайлПараметры Цикл
		МассивФайловИсточник = НайтиФайлы(ПапкаДляРаспаковки, ЭлементСоответствия.Ключ, Истина);
		Если МассивФайловИсточник.Количество() > 0 Тогда
			ИмяФайла = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("xml");
			ИмяФайлаХМЛ = МассивФайловИсточник[0].Имя;
			КопироватьФайл(МассивФайловИсточник[0].ПолноеИмя, ИмяФайла);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРазбора = ОбменСКонтрагентамиВнутренний.СформироватьДеревоРазбора(ИмяФайла,
		Перечисления.НаправленияЭД.Входящий,
		,
		ИмяФайлаКартинок);
		
	Если ТипЗнч(СтруктураРазбора) = Тип("Структура")
		И СтруктураРазбора.СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
		ДанныеСчета = ЗаполнитьСтруктуруДанныхСчета(СтруктураРазбора.СтрокаОбъекта, СтруктураРазбора.ДеревоРазбора);
		
	Иначе
		УдалитьФайлы(ПапкаДляРаспаковки);
		Возврат Неопределено;
	КонецЕсли;
	
	ТабличныйДокументСчета = ОбменСКонтрагентамиВнутренний.ПечатнаяФормаЭД(
			СтруктураРазбора, СтруктураЭД.НаправлениеЭД, Новый Структура("ИД", СтруктураЭД.УникальныйИдентификатор));
	Если ТипЗнч(ТабличныйДокументСчета) = Тип("ТабличныйДокумент") Тогда
		ДанныеСчета.Вставить("ТабличныйДокумент", ТабличныйДокументСчета);
	КонецЕсли;
	
	УдалитьФайлы(ПапкаДляРаспаковки);
	Возврат ДанныеСчета;
	
КонецФункции

Функция ЗаполнитьСтруктуруДанныхСчета(СтрокаОбъекта, ДеревоРазбора)
	
	РеквизитыКонтрагента = Новый Структура;
	
	ЮрФизЛицо = ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта,
		"Контрагент.ЮрФизЛицо");
	
	ПолноеНаименованиеКонтрагента = ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ПолноеНаименование");
	РеквизитыКонтрагента.Вставить("Наименование", Справочники.Контрагенты.ПолучитьКраткоеНаименованиеКонтрагента(ПолноеНаименованиеКонтрагента));
	Если ЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		РеквизитыКонтрагента.Вставить("НаименованиеПолное", ПолноеНаименованиеКонтрагента);
	Иначе
		Фамилия = ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
			СтрокаОбъекта, "Контрагент.Фамилия");
		Имя = ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
			СтрокаОбъекта, "Контрагент.Имя");
		Отчество = ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
			СтрокаОбъекта, "Контрагент.Отчество");
		РеквизитыКонтрагента.Вставить("НаименованиеПолное", Фамилия + " " + Имя + " " + Отчество);
	КонецЕсли;
	РеквизитыКонтрагента.Вставить("ИНН", ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ИНН"));
	РеквизитыКонтрагента.Вставить("КПП", ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.КПП"));
	РеквизитыКонтрагента.Вставить("КодПоОКПО", ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ОКПО"));
		
	
	АдресСтруктурой = ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.АдресСтруктурой");
	ФактическийАдрес = Обработки.ПрямойОбменЭД.НоваяКонтактнаяИнформация();
	
	Если ЗначениеЗаполнено(АдресСтруктурой) Тогда
		ПредставлениеАдреса = ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
			СтрокаОбъекта, "Контрагент.ФактическийАдрес_Представление");
		ФактическийАдрес.КонтактнаяИнформация = Обработки.ПрямойОбменЭД.ПолучитьXMLПредставлениеАдреса(
			АдресСтруктурой, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, ПредставлениеАдреса);
		ФактическийАдрес.Представление = ПредставлениеАдреса;
	Иначе
		ФактическийАдрес.КонтактнаяИнформация = Неопределено;
		ФактическийАдрес.Представление = "";
	КонецЕсли;
	
	РеквизитыКонтрагента.Вставить("ФактическийАдрес", ФактическийАдрес);
	
	Контакты = ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.Контакты");
		
	Если ЗначениеЗаполнено(Контакты) Тогда
		Для Каждого Контакт Из Контакты Цикл
			ЭлементКонтактнойИнформации = Обработки.ПрямойОбменЭД.НоваяКонтактнаяИнформация();
			Если Контакт.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента Тогда
				ЭлементКонтактнойИнформации.Представление = Контакт.Представление;
				ЭлементКонтактнойИнформации.КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(
					Контакт.Представление, , Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
				РеквизитыКонтрагента.Вставить("Телефон", ЭлементКонтактнойИнформации);
			ИначеЕсли Контакт.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты Тогда
				ЭлементКонтактнойИнформации.Представление = Контакт.Представление;
				ЭлементКонтактнойИнформации.КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(
					Контакт.Представление, , Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты);
				РеквизитыКонтрагента.Вставить("АдресЭлектроннойПочты", ЭлементКонтактнойИнформации);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
	РеквизитыКонтрагента.Вставить("БИК", ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.Код"));
	РеквизитыКонтрагента.Вставить("Банк", ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.Наименование"));
	РеквизитыКонтрагента.Вставить("КоррСчет", ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.КоррСчет"));
	РеквизитыКонтрагента.Вставить("НомерСчета", ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.НомерСчета"));
	РеквизитыКонтрагента.Вставить("БанкДляРасчетовБИК", ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.БанкКорреспондент.Код"));
	РеквизитыКонтрагента.Вставить("БанкДляРасчетов", ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.БанкКорреспондент.Наименование"));
	РеквизитыКонтрагента.Вставить("БанкДляРасчетовКоррСчет", ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.БанкКорреспондент.КоррСчет"));
		
	ДанныеЗаполненияШапки = Новый Структура;
	
	ДанныеЗаполненияШапки.Вставить("Номер", ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Номер"));
	ДанныеЗаполненияШапки.Вставить("Дата", ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Дата"));
	ДанныеЗаполненияШапки.Вставить("КодВалюты", ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Валюта.Код"));
	ДанныеЗаполненияШапки.Вставить("НаименованиеВалюты",ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Валюта.Наименование"));
	ДанныеЗаполненияШапки.Вставить("НазначениеПлатежа", ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"НазначениеПлатежа"));
	ДанныеЗаполненияШапки.Вставить("СуммаДокумента", ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"ИтогоПоДокументуСумма"));
	ДанныеЗаполненияШапки.Вставить("СуммаНДС", ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"СуммаНалогаИтог"));
	ДанныеЗаполненияШапки.Вставить("ЦенаВключаетНДС", ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ЦенаВключаетНДС"));
	
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	СуммаНДСПоСтавкам = Новый ТаблицаЗначений;
	СуммаНДСПоСтавкам.Колонки.Добавить("СтавкаНДС");
	СуммаНДСПоСтавкам.Колонки.Добавить("СуммаНДС");
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		ДанныеОСуммеСтавкеНДС = СуммаНДСПоСтавкам.Добавить();
		ДанныеОСуммеСтавкеНДС.СтавкаНДС = ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
			СтрокаТЧ, "СтавкаНДС");
		ДанныеОСуммеСтавкеНДС.СуммаНДС = ЭлектронноеВзаимодействиеБП.ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
			СтрокаТЧ, "СуммаНДС");
	КонецЦикла;
	
	СуммаНДСПоСтавкам.Свернуть("СтавкаНДС", "СуммаНДС");
	
	Если СуммаНДСПоСтавкам.Количество() = 1 Тогда
		СтавкаНДС = СуммаНДСПоСтавкам[0].СтавкаНДС;
	Иначе
		СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
	КонецЕсли;
	ДанныеЗаполненияШапки.Вставить("СтавкаНДС", СтавкаНДС);
	
	ТекстНДС = "";
	Для Каждого СтрокаНДС ИЗ СуммаНДСПоСтавкам Цикл
		ТекстНДС = ТекстНДС + ?(ПустаяСтрока(ТекстНДС), "", ", ");
		Если СтрокаНДС.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			ТекстНДС = ТекстНДС + "Без налога (НДС)";
		ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаНДС.СтавкаНДС) Тогда
			ТекстНДС = "";
		Иначе
			ТекстНДС = ТекстНДС + "НДС(" + СтрокаНДС.СтавкаНДС + ") " + Формат(СтрокаНДС.СуммаНДС, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=");
		КонецЕсли;
	КонецЦикла;
	
	ТекстНДС = ?(ПустаяСтрока(ТекстНДС), "", "В т.ч. ") + ТекстНДС;
	
	ШаблонНазначенияПлатежа = Нстр("ru='Оплата по счету №%1 от %2
		|Сумма %3'");
	НазначениеПлатежа = СтрШаблон(ШаблонНазначенияПлатежа,
		ДанныеЗаполненияШапки.Номер,
		Формат(ДанныеЗаполненияШапки.Дата, "ДФ=dd.MM.yyyy"),
		Формат(Число(ДанныеЗаполненияШапки.СуммаДокумента), "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ="));
	НазначениеПлатежа = НазначениеПлатежа + Символы.ПС + ТекстНДС;
	ДанныеЗаполненияШапки.Вставить("НазначениеПлатежа", НазначениеПлатежа);
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("ШапкаДокумента"      , ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("РеквизитыКонтрагента", РеквизитыКонтрагента);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Процедура ОбработатьТаблицуУслуги(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	СчетНаОплатуПокупателюУдалитьУслуги.Ссылка КАК СчетНаОплату
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.УдалитьУслуги КАК СчетНаОплатуПокупателюУдалитьУслуги";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			Если Не ЗначениеЗаполнено(Выборка.СчетНаОплату) Тогда
				Продолжить;
			КонецЕсли;
			
			ДокументОбъект = Выборка.СчетНаОплату.ПолучитьОбъект();
			
			Если ДокументОбъект = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ДокументОбъект.УдалитьУслуги.Количество() > 0 Тогда
				ТаблицаУслуг = ДокументОбъект.УдалитьУслуги.Выгрузить();
				
				Для Каждого СтрокаТЧ Из ТаблицаУслуг Цикл
					НоваяСтрока = ДокументОбъект.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
				КонецЦикла;
				
				ДокументОбъект.УдалитьУслуги.Очистить();
			Иначе
				Продолжить;
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
		Исключение
			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось объединить товары и услуги в ""%1"" по причине:
			|%2'"), 
			Выборка.СчетНаОплату,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,, 
			Выборка.СчетНаОплату, ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбъектовОбработано + ПроблемныхОбъектов = 0 Тогда
		
		Параметры.ОбработкаЗавершена = Истина;
		
	Иначе
		
		Параметры.ОбработкаЗавершена = Ложь;
		
		Если ОбъектовОбработано = 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре СчетНаОплатуПокупателю.ОбработатьТаблицуУслуги
			|не удалось объединить товары и услуги в %1 документах Счет покупателю'"),
			ПроблемныхОбъектов);
			ВызватьИсключение ТекстСообщения;
		Иначе
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедура СчетНаОплатуПокупателю.ОбработатьТаблицуУслуги
			|обработала очередную порцию документов Счет покупателю: %1 элементов'"),
			ОбъектовОбработано));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьОтборПоДоговору(ЗначениеОтбора) Экспорт

	Если ТипЗнч(ЗначениеОтбора) = Тип("ФиксированныйМассив") Тогда
		ОтборПоДоговору = Новый Массив(ЗначениеОтбора);
	Иначе
		ОтборПоДоговору = Новый Массив;
		ОтборПоДоговору.Добавить(ЗначениеОтбора);
	КонецЕсли;
	
	ОтборПоДоговору.Добавить(Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	
	ЗначениеОтбора = Новый ФиксированныйМассив(ОтборПоДоговору);

КонецПроцедуры

Процедура УправлениеПоказомНовостиИзмененныйМакет() Экспорт

	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_СчетЗаказ");
	
	Новость = ОбработкаНовостей.ПолучитьСсылкуНаНовость(Справочники.ЛентыНовостей.НайтиПоКоду("whatisnew"), "ea00dfd8-5534-11e5-8d9d-0050569f2f4f");
	
	// Макет не измененный - новость не нужна
	Если НЕ Новость.Ссылка.Пустая() И ЗначениеЗаполнено(Макет.Области.Найти("Скидка")) Тогда
		
		СписокНовостей = Новый СписокЗначений;
		СписокНовостей.Добавить(Новость.Ссылка);
		
		СтруктураОтбор = Новый Структура("СписокНовостей", СписокНовостей);
		
		ЗначениеСостояний = Новый Структура("Прочтена, ОповещениеВключено", Истина, Ложь);
		
		ОбработкаНовостей.УстановитьСостояниеНовостейДляПользователей(Неопределено, СтруктураОтбор, ЗначениеСостояний);
	
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецЕсли