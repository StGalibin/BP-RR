#Область ОбработчикиСобытий

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ОтправкаПочтовыхСообщений.ПриСозданииНаСервере(ЭтотОбъект);
	
	ОбщегоНазначенияБПВызовСервера.УстановитьОтборПоОсновнойОрганизации(ЭтаФорма);
	
	УстановитьУсловноеОформление();
	
	// Видимость команд установки статуса документов
	ЕстьПравоИзмененияСтатусовДокументов = СтатусыДокументов.ПравоИзмененияСтатусовДокументов(Метаданные.Документы.СчетНаОплатуПокупателю);
	Элементы.ФормаИзменитьСтатус.Видимость = ЕстьПравоИзмененияСтатусовДокументов;
	Элементы.СписокКонтекстноеМенюИзменитьСтатус.Видимость = ЕстьПравоИзмененияСтатусовДокументов;
	
	НадписьЗапланировано = НадписьЗапланировано();
	Элементы.НадписьЗапланировано.Видимость = ЗначениеЗаполнено(НадписьЗапланировано);
	
	УстановитьНастройкиДоступностьИнтернетМагазина();
	
	Список.Параметры.УстановитьЗначениеПараметра(
		"СтатусОплатыПоУмолчанию", Перечисления.СтатусОплатыСчета.СтатусНовогоДокумента());
	Список.Параметры.УстановитьЗначениеПараметра(
		"СтатусОтгрузкиПоУмолчанию", Перечисления.СтатусыОтгрузки.СтатусНовогоДокумента());
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереСписокДокументов(Список);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = Новый Массив;
	ИдентификаторыСобытийПриОткрытии.Добавить("ПриОткрытии");
	РазделениеВключено = ОбщегоНазначенияПовтИсп.РазделениеВключено();
	Если Не РазделениеВключено Тогда
		ИдентификаторыСобытийПриОткрытии.Добавить("ПриОткрытии_Подключение1СЭДО");
	КонецЕсли;
	
	ИспользуетсяЭП = ЭлектронноеВзаимодействиеБП.НастроенОбменЭДО();
	Если ИспользуетсяЭП Тогда
		ИдентификаторыСобытийПриОткрытии.Добавить("ПриОткрытии_ИспользуетсяЭП");
	КонецЕсли;
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтаФорма,
		"БП.Документ.СчетНаОплатуПокупателю",
		"ФормаСписка",
		НСтр("ru='Новости: Счета покупателям'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыПриСозданииНаСервере = ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаСписка();
	ПараметрыПриСозданииНаСервере.Форма = ЭтотОбъект;
	ПараметрыПриСозданииНаСервере.МестоРазмещенияКоманд = Элементы.КомандыЭДО;
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаСписка(Отказ, СтандартнаяОбработка, ПараметрыПриСозданииНаСервере);
	// Конец подсистема "ОбменСКонтрагентами".
	
	ТарификацияБП.РазместитьИнформациюОбОграниченииПоКоличествуОбъектов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеОсновнойОрганизации" Тогда
		
		ОбщегоНазначенияБПКлиент.ИзменитьОтборПоОсновнойОрганизации(Список, ,Параметр);
		
	ИначеЕсли ИмяСобытия = "Запись_ПравилаРегулярныхСчетовПокупателям"
		Или ИмяСобытия = "Запись_РегулярныеСчетаПокупателям"
		Или ИмяСобытия = "Запись_СчетПокупателю" И Параметр.Свойство("ВведенДокументПоПравилу") Тогда
		
		НадписьЗапланировано = НадписьЗапланировано();
		Элементы.НадписьЗапланировано.Видимость = (НадписьЗапланировано <> "");
	ИначеЕсли ИмяСобытия = "ИзменениеНастройкиОбменаСИнтернетМагазином" Тогда
		
		УстановитьНастройкиДоступностьИнтернетМагазина();
		
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
	ПрисоединенныеФайлыБПКлиент.ОбновитьСписокПослеДобавленияФайла(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыОповещенияЭДО = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаСписка();
	ПараметрыОповещенияЭДО.Форма = ЭтотОбъект;
	ПараметрыОповещенияЭДО.ИмяДинамическогоСписка = "Список";
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаСписка(ИмяСобытия, Параметр, Источник, ПараметрыОповещенияЭДО);
	// Конец подсистема "ОбменСКонтрагентами".
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РеквизитыОрганизацииЗаполнены = ОбщегоНазначенияБПКлиент.ПроверитьНаличиеОрганизаций();
	
	Если РеквизитыОрганизацииЗаполнены Тогда
		
		// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
		ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
		// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
		
	КонецЕсли;
	
	// Подсистема "ОбменСКонтрагентами".
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец подсистема "ОбменСКонтрагентами".
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СкрытьРезультатСозданияДокументовНажатие(Элемент)
	
	Элементы.ГруппаСостояниеЗагрузкиИнтернетМагазина.Видимость = Ложь
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)

	КлючеваяОперация = "СозданиеФормыСчетНаОплатуПокупателям";
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	КлючеваяОперация = "ОткрытиеФормыСчетНаОплатуПокупателям";
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	
КонецПроцедуры

&НаСервере
Процедура СписокПередЗагрузкойПользовательскихНастроекНаСервере(Элемент, Настройки)
	
	ОбщегоНазначенияБП.ВосстановитьОтборСписка(Список, Настройки, "Организация");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Строка <> Неопределено Тогда
		
		Если ПрисоединенныеФайлыБПКлиент.ПараметрыПеретаскиванияСодержатФайлы(ПараметрыПеретаскивания) Тогда
			
			СтандартнаяОбработка = Ложь;
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Ссылка"                 , Строка);
			ДополнительныеПараметры.Вставить("ПараметрыПеретаскивания", ПараметрыПеретаскивания);
			ДополнительныеПараметры.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПеретаскиваниеФайловОтветПолучен",
				ПрисоединенныеФайлыБПКлиент,
				ДополнительныеПараметры);
			ШаблонВопроса = НСтр("ru='Присоединить файлы к документу %1?'");
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонВопроса, Строка);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса,РежимДиалогаВопрос.ДаНет);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИзменитьСтатус(Команда)
	
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	
	СписокДокументов = Новый СписокЗначений;
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		
		Если ТипЗнч(ВыделеннаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущаяСтрока = Элементы.Список.ДанныеСтроки(ВыделеннаяСтрока);
		
		Если ТекущаяСтрока <> Неопределено Тогда
			СписокДокументов.Добавить(ТекущаяСтрока.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
	Если СписокДокументов.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена для указанного объекта'"));
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Документ.СчетНаОплатуПокупателю.Форма.ИзменитьСтатус",
		Новый Структура("СписокДокументов", СписокДокументов),
		ЭтотОбъект,
		КлючУникальности);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтаФорма,
		Команда
	);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзИнтернетМагазина(Команда)
	
	Элементы.ГруппаСостояниеЗагрузкиИнтернетМагазина.Видимость = Ложь;
	
	ДлительнаяОперация = ЗагрузитьЗаказыИнтернетМагазина();
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗагрузитьЗаказыИнтернетМагазинаЗавершение", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);

КонецПроцедуры

&НаКлиенте
Процедура НастроитьОбменСИнтернетМагазином(Команда)
	
	ОткрытьФорму("Обработка.ОбменСИнтернетМагазином.Форма.ФормаНастройки",,ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Срок оплаты красным, если просрочен.
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СрокОплаты");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор, 
		"Список.СрокОплаты", ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, ТекущаяДатаСеанса());
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор, 
		"Список.Оплата", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.СтатусОплатыСчета.Отменен);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор, 
		"Список.Оплата", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.СтатусОплатыСчета.Оплачен);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныеДанныеЦвет);
	
	СтатусыДокументов.УстановитьУсловноеОформлениеСтатусовСчетовНаОплату(УсловноеОформление);
	// Созданные из запланированных
	
	СписокВыделения = Неопределено;
	Если Параметры.Свойство("СписокВыделения", СписокВыделения) И ЗначениеЗаполнено(СписокВыделения) Тогда
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Список");
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Список.Ссылка", ВидСравненияКомпоновкиДанных.ВСписке, СписокВыделения.Ссылка);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(Новый Шрифт(),,, Истина));
		
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = Новый Массив;
	ИдентификаторыСобытийПриОткрытии.Добавить("ПриОткрытии");
	Если ИспользуетсяЭП Тогда
		ИдентификаторыСобытийПриОткрытии.Добавить("ПриОткрытии_ИспользуетсяЭП");
	КонецЕсли;
	Если Не РазделениеВключено Тогда
		ИдентификаторыСобытийПриОткрытии.Добавить("ПриОткрытии_Подключение1СЭДО");
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеСлужебныйКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

#Область ИнтернетМагазин

&НаСервере
Процедура УстановитьНастройкиДоступностьИнтернетМагазина()
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОбменСИнтернетМагазином") Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьПравоОбмена = ОбменСИнтернетМагазином.ЕстьПравоНастройкиОбменаСИнтернетМагазином();
	
	Элементы.ФормаНастроитьОбменСИнтернетМагазином.Видимость = ЕстьПравоОбмена;
	Элементы.ФормаЗагрузитьИзИнтернетМагазина.Видимость      = ЕстьПравоОбмена;

	Логотип = ОбменСИнтернетМагазином.ЛоготипТекущейCMS();
	
	Элементы.ФормаЗагрузитьИзИнтернетМагазина.Картинка = Логотип;
	Элементы.ФормаЗагрузитьИзИнтернетМагазина.Отображение = ?(Логотип <> БиблиотекаКартинок.Пустая,
		ОтображениеКнопки.КартинкаИТекст, ОтображениеКнопки.Текст);
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьЗаказыИнтернетМагазина()
	
	ПараметрыПроцедуры = Новый Структура(); 
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.Вставить("НаименованиеФоновогоЗадания",
		НСтр("ru = 'Загрузка заказов из интернет-магазина'"));
		
	ПараметрыПроцедуры = Новый Структура;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("ОбменСИнтернетМагазином.ЗагрузитьЗаказыИнтернетМагазина", 
		ПараметрыПроцедуры, ПараметрыВыполненияВФоне);
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьЗаказыИнтернетМагазинаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда  // отменено пользователем
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ПоказатьПредупреждение(,Результат.КраткоеПредставлениеОшибки);
		Возврат;
	ИначеЕсли НЕ Результат.Статус = "Выполнено" Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗагрузки = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	Если ЗначениеЗаполнено(РезультатЗагрузки.ОписаниеОшибки) 
		И (НЕ РезультатЗагрузки.Успешно
		ИЛИ РезультатЗагрузки.СтатистикаЗагрузки.Пропущено.Количество()>0) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатЗагрузки.ОписаниеОшибки);
	КонецЕсли;
	
	Если РезультатЗагрузки.Успешно Тогда
	
		Если РезультатЗагрузки.СтатистикаЗагрузки.Обработано = 0 Тогда
			Элементы.ТекстСостояниеЗагрузки.Заголовок = НСтр("ru='Новых документов для загрузки не обнаружено'");
		Иначе
			ШаблонТекста = НСтр("ru = 'Обработано: %1. Создано: %2. Обновлено: %3'");
			СтатистикаЗагрузки = РезультатЗагрузки.СтатистикаЗагрузки;
			Обработано = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(СтатистикаЗагрузки.Обработано,          "документ, документа, документов");
			Создано    = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(СтатистикаЗагрузки.Создано.Количество(),   "документ, документа, документов");
			Обновлено  = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(СтатистикаЗагрузки.Обновлено.Количество(), "документ, документа, документов");
			
			Элементы.ТекстСостояниеЗагрузки.Заголовок = СтрШаблон(ШаблонТекста, Обработано, Создано, Обновлено);
			
			Если СтатистикаЗагрузки.Обновлено.Количество() > 0 Тогда
				Элементы.Список.ТекущаяСтрока = СтатистикаЗагрузки.Обновлено[0];
			ИначеЕсли СтатистикаЗагрузки.Создано.Количество() > 0 Тогда
				Элементы.Список.ТекущаяСтрока = СтатистикаЗагрузки.Создано[0];
			КонецЕсли;
			Элементы.Список.Обновить();
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ГруппаСостояниеЗагрузкиИнтернетМагазина.Видимость = РезультатЗагрузки.Успешно;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЗапланированоОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФорму("Справочник.ПравилаРегулярныхСчетовПокупателям.ФормаСписка",, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область РегулярныеСчета

&НаСервереБезКонтекста
Функция НадписьЗапланировано()
	
	ДанныеДляНадписи = Справочники.ПравилаРегулярныхСчетовПокупателям.ДанныеДляНадписиЗапланировано();
	
	КоличествоЗапланировано = ДанныеДляНадписи.КоличествоЗапланировано;
	КоличествоПросрочено    = ДанныеДляНадписи.КоличествоПросрочено;
	ДатаСледующего          = ДанныеДляНадписи.ДатаСледующего;
	ОсталосьДней            = ДанныеДляНадписи.ОсталосьДней;
	
	Если КоличествоЗапланировано = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ЭлементыНадписи = Новый Массив;
	
	Если КоличествоПросрочено > 0 Тогда
		ЦветСсылки = ЦветаСтиля.ПросроченныеДанныеЦвет;
	Иначе 
		ЦветСсылки = ЦветаСтиля.ГиперссылкаТабличнойЧасти;
	КонецЕсли;
	
	ЭлементыНадписи.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Периодические счета'"),, ЦветСсылки,, "Ссылка"));
	ЭлементыНадписи.Добавить(": ");
	
	Если КоличествоЗапланировано <> КоличествоПросрочено Тогда
		
		ПредметИсчисления = НСтр("ru = 'запланирован, запланировано, запланировано'");
		
		ЭлементыНадписи.Добавить(
			СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(КоличествоЗапланировано, ПредметИсчисления));
		
		Если КоличествоПросрочено > 0 Тогда
			ЭлементыНадписи.Добавить(", из них ");
		КонецЕсли;
		
	КонецЕсли;
	
	Если КоличествоПросрочено > 0 Тогда
		
		ПредметИсчисления = НСтр("ru = 'просрочен, просрочено, просрочено'");
		
		ЭлементыНадписи.Добавить(
			СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(КоличествоПросрочено, ПредметИсчисления));
		
	Иначе
		
		ЭлементыНадписи.Добавить(", ");
		
		Если КоличествоЗапланировано <> 1 Тогда
			ЭлементыНадписи.Добавить(НСтр("ru = 'следующий '"));
		КонецЕсли;
		
		ЭлементыНадписи.Добавить(Формат(ДатаСледующего, "ДЛФ=DD"));
		
		Если ОсталосьДней = 0 Тогда
			
			ЭлементыНадписи.Добавить(Нстр("ru = ' (Сегодня)'"));
			
		ИначеЕсли ОсталосьДней = 1 Тогда
			
			ЭлементыНадписи.Добавить(Нстр("ru = ' (Завтра)'"));
			
		ИначеЕсли ОсталосьДней < 8 Тогда
			
			ПараметрыПредметаИсчисления = НСтр("ru = 'день, дня, дней'");
			НадписьДней = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(ОсталосьДней, ПараметрыПредметаИсчисления);
			
			ЭлементыНадписи.Добавить(СтрШаблон(Нстр("ru = ' (осталось %1)'"), НадписьДней));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(ЭлементыНадписи);
	
КонецФункции

#КонецОбласти

#КонецОбласти
