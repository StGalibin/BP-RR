#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ГруппаПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
		
		// Если документ скопирован и есть расчетв у.е., пересчитаем суммы взаиморасчетов на дату документа
		Если ЕстьРасчетыВУсловныхЕдиницах И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ПересчитатьСуммыВзаиморасчетов();
		КонецЕсли;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтотОбъект,
		"БП.Документ.ОплатаПлатежнойКартой",
		"ФормаДокумента",
		НСтр("ru = 'Новости: Оплата платежной картой'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтотОбъект, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УстановитьСостояниеДокумента();
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ПараметрыЗаписи.Вставить("ОплаченныеСчета", ОплаченныеСчета());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ОбновитьФорму", ВладелецФормы, Объект.Ссылка);
	
	Если ПараметрыЗаписи.Свойство("ОплаченныеСчета") И ПараметрыЗаписи.ОплаченныеСчета.Количество() > 0 Тогда
		ОповеститьОбИзменении(Тип("ДокументСсылка.СчетНаОплатуПокупателю"));
		Оповестить("ИзмененСтатусДокументов", ПараметрыЗаписи.ОплаченныеСчета, Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НапечататьЧекВыполнить()
	
	НапечататьЧек();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)
	
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтотОбъект,
		Команда
	);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата,
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);
	
	// Если есть договоры в у.е., то необходимо получение курсов валют.
	Если НЕ ТребуетсяВызовСервера Тогда
		ТребуетсяВызовСервера = ЕстьРасчетыВУсловныхЕдиницах;
	КонецЕсли;
	
	// Проверка на изменение сроков действия патентов.
	Если НЕ ТребуетсяВызовСервера Тогда
		ТребуетсяВызовСервера = ПрименяетсяУСНПатент;
	КонецЕсли;
	
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииСервер();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	ВидОперацииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	КонтрагентПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура РозничнаяВыручкаРасходыУСНПриИзменении(Элемент)
	
	Если Объект.Графа7_УСН = 0 Тогда
		Объект.НДС_УСН = 0;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ВидОплатыПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ВидОплаты) Тогда
		ВидОплатыПриИзмененииНаСервере();
	Иначе
		ОчиститьСвязанныеРеквизиты();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОплатыОткрытие(Элемент, СтандартнаяОбработка)
	
	Если Объект.ВидОплаты.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыПередачи = Новый Структура;
	
	ДопустимыеТипыОплаты = Новый Массив;
	
	ДопустимыеТипыОплаты.Добавить(ПредопределенноеЗначение("Перечисление.ТипыОплат.ПлатежнаяКарта"));
	ДопустимыеТипыОплаты.Добавить(ПредопределенноеЗначение("Перечисление.ТипыОплат.БанковскийКредит"));
	
	ПараметрыПередачи.Вставить("ТипОплатыДоступныеЗначения", ДопустимыеТипыОплаты);
	ПараметрыПередачи.Вставить("Ключ", Объект.ВидОплаты);
	
	ОткрытьФорму("Справочник.ВидыОплатОрганизаций.ФормаОбъекта", ПараметрыПередачи, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОтражениеДоходовПриИзменении(Элемент)
	
	ОтражениеДоходовПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражениеДоходовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ПрименяетсяУСНПатент Тогда
		УчетПСНКлиент.ОбработатьВыборНовогоПатента(Элемент, ВыбранноеЗначение, Объект.Организация, Объект.Дата);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражениеДоходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ПрименяетсяУСНПатент Тогда
		УчетПСНКлиент.ДобавитьВСписокНовыйПатент(Элемент.СписокВыбора);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеВидОплатыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыПередачи = Новый Структура;
	
	ПараметрыПередачи.Вставить("Эквайер"          , Объект.Эквайер);
	ПараметрыПередачи.Вставить("СчетРасчетов"     , Объект.СчетКасса);
	ПараметрыПередачи.Вставить("ДоговорЭквайринга", Объект.ДоговорЭквайринга);
	ПараметрыПередачи.Вставить("Организация"      , Объект.Организация);
	ПараметрыПередачи.Вставить("ТолькоПросмотр"   , ЭтотОбъект.ТолькоПросмотр);
	
	ЧтоВыполнитьПослеЗакрытия = Новый ОписаниеОповещения("ОбработатьЗакрытиеФормыРеквизиовЭквайера", ЭтотОбъект);
	
	ОткрытьФорму("Документ.ОплатаПлатежнойКартой.Форма.ФормаУправленияПараметрамиЭквайринга", 
				  ПараметрыПередачи, 
				  Элемент,
				  ,
				  ,
				  ,
				  ЧтоВыполнитьПослеЗакрытия);
				  
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ПоказатьЗначение( , Объект.ДокументОснование);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыРасшифровкаПлатежа

&НаКлиенте
Процедура РасшифровкаПлатежаПриИзменении(Элемент)
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	ОпределитьНаличиеРасчетовВУсловныхЕдиницах(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПередУдалением(Элемент, Отказ)
	
	Отказ = Объект.РасшифровкаПлатежа.Количество() = 1;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	ИнициализироватьСвойстваПлатежаНаКлиенте();
	Если НоваяСтрока И НЕ Копирование Тогда
		ЗаполнитьЗначенияСвойств(СтрокаПлатеж, СвойстваПлатежа);
	КонецЕсли;
	
	Если НоваяСтрока И ЕстьРасчетыВУсловныхЕдиницах Тогда
		ЗаполнитьНадписиВРасшифровке(СтрокаПлатеж);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	ИнициализироватьСвойстваПлатежаНаКлиенте(Истина); // Только создаем структуру, если она еще не создана.
	
	Если СтрокаПлатеж.ДоговорКонтрагента <> СвойстваПлатежа.ДоговорКонтрагента Тогда
		РасшифровкаПлатежаДоговорКонтрагентаПриИзмененииНаСервере(СтрокаПлатеж.ПолучитьИдентификатор());
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаПлатеж, СвойстваПлатежа); 
	
	ПересчитатьСуммуНДС(СтрокаПлатеж);
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтотОбъект);
	
	ЕстьРасчетыВУсловныхЕдиницах = ЕстьРасчетыВУсловныхЕдиницах ИЛИ СтрокаПлатеж.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах;
	
	ЗаполнитьНадписиВРасшифровке(СтрокаПлатеж);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКонтрагентаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	ЗначенияЗаполнения = Новый Структура;
	ВидыДоговора   = ВидыДоговораСКонтрагентом(Объект.ВидОперации);
	ЗначенияЗаполнения.Вставить("Организация", Объект.Организация);
	ЗначенияЗаполнения.Вставить("Владелец", Объект.Контрагент);
	ЗначенияЗаполнения.Вставить("ВидДоговора", Новый ФиксированныйМассив(ВидыДоговора));
	ЗначенияЗаполнения.Вставить("ВалютаВзаиморасчетов", Объект.ВалютаДокумента);
	ОплатаВВалюте = Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета;
	ЗначенияЗаполнения.Вставить("ОплатаВВалюте", ОплатаВВалюте);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ТекущиеДанные.ДоговорКонтрагента);
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСпособПогашенияЗадолженностиПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если СтрокаПлатеж.СпособПогашенияЗадолженности <> ПредопределенноеЗначение("Перечисление.СпособыПогашенияЗадолженности.ПоДокументу") Тогда
		СтрокаПлатеж.Сделка = Неопределено;
	КонецЕсли;
	
	Если СтрокаПлатеж.СпособПогашенияЗадолженности <> ПредопределенноеЗначение("Перечисление.СпособыПогашенияЗадолженности.НеПогашать")
		И НЕ ЗначениеЗаполнено(СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом) Тогда
		
		ИнициализироватьСвойстваПлатежаНаКлиенте(Истина); // Только создаем структуру, если она еще не создана.
		
		Если СтрокаПлатеж.ДоговорКонтрагента <> СвойстваПлатежа.ДоговорКонтрагента Тогда
			ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтотОбъект);
			ПараметрыОбъекта.ДоговорКонтрагента = СтрокаПлатеж.ДоговорКонтрагента;
			СвойстваПлатежа = СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, Ложь);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаПлатеж, СвойстваПлатежа, "СчетУчетаРасчетовСКонтрагентом");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	СчетУчета = СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом;
	СчетАвансов = СтрокаПлатеж.СчетУчетаРасчетовПоАвансам;
	ЭтоВозвратПокупателю = 
		(Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОплатаПлатежнойКартой.ВозвратПокупателю"));
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не указана дата'"));
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не указана организация'"));
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не указан контрагент'"));
		Возврат;
	ИначеЕсли ВестиУчетПоДоговорам И НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не указан договор'"));
		Возврат;
	ИначеЕсли НЕ ЭтоВозвратПокупателю И НЕ ЗначениеЗаполнено(СчетУчета) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не указан счет расчетов'"));
		Возврат;
	ИначеЕсли ЭтоВозвратПокупателю И НЕ ЗначениеЗаполнено(СчетАвансов) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не указан счет авансов'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("Организация",           Объект.Организация);
	ПараметрыОбъекта.Вставить("Дата",                  Объект.Дата);
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента",    СтрокаПлатеж.ДоговорКонтрагента);
	ПараметрыОбъекта.Вставить("Контрагент",            Объект.Контрагент);
	Если ЭтоВозвратПокупателю Тогда
		ПараметрыОбъекта.Вставить("СчетУчета",             СчетАвансов);
		ПараметрыОбъекта.Вставить("ОстаткиОбороты",        "Кт");
	Иначе
		ПараметрыОбъекта.Вставить("СчетУчета",             СчетУчета);
		ПараметрыОбъекта.Вставить("ОстаткиОбороты",        "Дт");
	КонецЕсли;
	ПараметрыОбъекта.Вставить("ТипыДокументов",        "Метаданные.Документы.ОплатаПлатежнойКартой.ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты.Сделка.Тип");
	ПараметрыОбъекта.Вставить("РежимОтбораДокументов", ПредопределенноеЗначение("Перечисление.РежимОтбораДокументов.ПоОстаткам"));
	
	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаПлатежаПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтотОбъект);
	ПересчитатьСуммуНДС(СтрокаПлатеж);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКурсВзаиморасчетовПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для выбора курса взаиморасчетов нужно выбрать договор контрагента.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("ДоговорКонтрагента",      СтрокаПлатеж.ДоговорКонтрагента);
	ПараметрыДокумента.Вставить("КратностьВзаиморасчетов", СтрокаПлатеж.КратностьВзаиморасчетов);
	ПараметрыДокумента.Вставить("КурсВзаиморасчетов",      СтрокаПлатеж.КурсВзаиморасчетов);
	ПараметрыДокумента.Вставить("Дата",                    Объект.Дата);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СтрокаПлатеж", СтрокаПлатеж);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Общаяформа.ФормаВводаКурсаИКратности", ПараметрыДокумента,,,,,ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	СтрокаПлатеж = ДополнительныеПараметры.СтрокаПлатеж;
	
	СтруктураКурсаИКратности = РезультатЗакрытия;
	
	Если СтруктураКурсаИКратности <> Неопределено Тогда
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;
	КонецЕсли;
	
	РассчитатьСуммуВзаиморасчетов(Элементы.РасшифровкаПлатежа.ТекущиеДанные, ЭтотОбъект);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	ПроверкаКурсовВалют(СтрокаПлатеж, ЭтотОбъект);
	
	Если СтрокаПлатеж.СуммаВзаиморасчетов <> 0 И КратностьДокумента <> 0 Тогда
		СуммаРуб = СтрокаПлатеж.СуммаПлатежа * КурсДокумента / КратностьДокумента;
		СтрокаПлатеж.КурсВзаиморасчетов = СуммаРуб / СтрокаПлатеж.СуммаВзаиморасчетов * СтрокаПлатеж.КратностьВзаиморасчетов;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСтавкаНДСПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	ПересчитатьСуммуНДС(СтрокаПлатеж);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыРасшифровкаВыручки

&НаКлиенте
Процедура РасшифровкаВыручкиПриИзменении(Элемент)
	
	СуммаДоИзменения = Объект.СуммаДокумента;
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
	Если ПрименениеУСН И СуммаДоИзменения <> Объект.СуммаДокумента Тогда
		ЗаполнитьОтражениеВУСННаСервере();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаВыручкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаВыручкиПередУдалением(Элемент, Отказ)
	
	Отказ = Объект.РасшифровкаПлатежа.Количество() = 1;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаВыручкиСуммаПлатежаПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаВыручки.ТекущиеДанные;
	ПересчитатьСуммуНДС(СтрокаПлатеж);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаВыручкиСтавкаНДСПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаВыручки.ТекущиеДанные;
	ПересчитатьСуммуНДС(СтрокаПлатеж);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РеквизитыШапки

&НаКлиентеНаСервереБезКонтекста
Функция ВидыДоговораСКонтрагентом(ВидОперации)
	
	ВидыДоговора = Новый Массив;
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОплатаПлатежнойКартой.ОплатаПокупателя") 
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОплатаПлатежнойКартой.ВозвратПокупателю") Тогда
		ВидыДоговора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
		ВидыДоговора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером"));
		ВидыДоговора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку"));
		ВидыДоговора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом"));
		ВидыДоговора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку"));
	КонецЕсли;
	
	Возврат ВидыДоговора;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекущиеПараметрыОбъекта(Форма)
	
	Объект = Форма.Объект;
	
	ПараметрыОбъекта = Новый Структура(
		"Номер, Дата, ВидОперации, Организация, Контрагент, ВалютаДокумента, СчетКасса");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента",
		?(Форма.СвойстваПлатежа = Неопределено, Неопределено,    Форма.СвойстваПлатежа.ДоговорКонтрагента));
	ПараметрыОбъекта.Вставить("ВалютаРегламентированногоУчета",  Форма.ВалютаРегламентированногоУчета);
	ПараметрыОбъекта.Вставить("ОплатаВВалюте",                   Ложь);
	ПараметрыОбъекта.Вставить("РозничнаяТорговляОблагаетсяЕНВД", Форма.РозничнаяТорговляОблагаетсяЕНВД);
	ПараметрыОбъекта.Вставить("УчетВПродажныхЦенах",			 Форма.УчетВПродажныхЦенах);
	ПараметрыОбъекта.Вставить("ПрименениеУСН", 					 Форма.ПрименениеУСН);
	ПараметрыОбъекта.Вставить("ПлательщикЕНВД", 			     Форма.ПлательщикЕНВД);
	ПараметрыОбъекта.Вставить("ПрименяетсяОсобыйПорядокНалогообложения", Форма.ПрименяетсяОсобыйПорядокНалогообложения);
	ПараметрыОбъекта.Вставить("ЭтоРасчетыСКонтрагентом",         Форма.ЭтоРасчетыСКонтрагентом);
	
	Возврат ПараметрыОбъекта;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОпределитьНаличиеРасчетовВУсловныхЕдиницах(Форма)
	
	Объект = Форма.Объект;
	
	ЕстьРасчетыВУЕ = Ложь;
	Для каждого СтрокаПлатеж Из Объект.РасшифровкаПлатежа Цикл
		Если СтрокаПлатеж.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах Тогда
			ЕстьРасчетыВУЕ = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Форма.ЕстьРасчетыВУсловныхЕдиницах = ЕстьРасчетыВУЕ;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораКонтрагентаКакСклада(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ЗначениеНТТ = 
		ПредопределенноеЗначение(
			"Перечисление.ТипыСкладов.НеавтоматизированнаяТорговаяТочка");
	
	НовыеПараметры = Новый Массив();
	НовыеПараметры.Добавить(
		Новый ПараметрВыбора(
			"Отбор.ТипСклада", 
			ЗначениеНТТ));
	
	Элементы.Контрагент.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораДоговораСКонтрагентом(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	НовыеПараметры = Новый Массив();
	ВидыДоговора   = ВидыДоговораСКонтрагентом(Объект.ВидОперации);
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора", Новый ФиксированныйМассив(ВидыДоговора)));
	
	ОплатаВВалюте = Объект.ВалютаДокумента <> Форма.ВалютаРегламентированногоУчета;
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ОплатаВВалюте", ОплатаВВалюте));
	
	Элементы.РасшифровкаПлатежаДоговорКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораВидаОплаты()

	ТипыОплатБезналичныеОплаты = Новый Массив;
	ТипыОплатБезналичныеОплаты.Добавить(Перечисления.ТипыОплат.ПлатежнаяКарта);
	ТипыОплатБезналичныеОплаты.Добавить(Перечисления.ТипыОплат.БанковскийКредит);
	
	Организации = Справочники.ВидыОплатОрганизаций.ОрганизацииДляОтбораВидовОплат(Объект.Организация);
	
	ПараметрыБезналичныхОплат = Новый Массив;
	
	ПараметрыБезналичныхОплат.Добавить(Новый ПараметрВыбора("Отбор.ТипОплаты", Новый ФиксированныйМассив(ТипыОплатБезналичныеОплаты)));
	ПараметрыБезналичныхОплат.Добавить(Новый ПараметрВыбора("Отбор.Организация", Новый ФиксированныйМассив(Организации)));
	
	Элементы.ВидОплаты.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыБезналичныхОплат);

КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииНаСервере()
	
	ЭтоРасчетыСКонтрагентом = ((Объект.ВидОперации = Перечисления.ВидыОперацийОплатаПлатежнойКартой.ОплатаПокупателя)
		ИЛИ (Объект.ВидОперации = Перечисления.ВидыОперацийОплатаПлатежнойКартой.ВозвратПокупателю));
	
	УстановитьОграничениеТипаКонтрагента(ЭтотОбъект);
	Объект.Контрагент = Элементы.Контрагент.ОграничениеТипа.ПривестиЗначение(Объект.Контрагент);
	
	ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтотОбъект);
	НовыеПараметры   = НовыеПараметрыПриИзмененииВидаОперации(ПараметрыОбъекта);
	
	Если ЭтоРасчетыСКонтрагентом Тогда
		ИнициализироватьСвойстваПлатежаНаСервере(Истина);
		ЗаполнитьЗначенияСвойств(СвойстваПлатежа, НовыеПараметры);
		УстановитьПараметрыВыбораДоговораСКонтрагентом(ЭтотОбъект);
	Иначе
		
		ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры,
			"ВалютаДокумента");
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, НовыеПараметры, "КурсДокумента, КратностьДокумента, НТТНаЕНВД");
		
		УстановитьПараметрыВыбораКонтрагентаКакСклада(ЭтотОбъект)
		
	КонецЕсли;
	
	ЗаполнитьОтражениеВУСННаСервере();
	УправлениеЭлементамиОтраженияВУСННаСервере();
	
	ПерезаполнитьРасшифровкуПлатежа();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ЗаполнитьСписокВыбораОтражениеДоходов();
	
	УстановитьВидимостьСтраницНаСервере();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер()
	
	УстановитьФункциональныеОпцииФормы();
	
	Если ПрименениеУСН ИЛИ ПрименяетсяОсобыйПорядокНалогообложения Тогда
		ИнициализироватьСвойстваПлатежаНаСервере();
		СвойстваПлатежа.Вставить("СтавкаНДС", Перечисления.СтавкиНДС.БезНДС);
	КонецЕсли;
	
	ПересчитатьСуммыВзаиморасчетов();
	
	ЗаполнитьСписокВыбораОтражениеДоходов();
	
	ЗаполнитьОтражениеВУСННаСервере();
	УправлениеЭлементамиОтраженияВУСННаСервере();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	УстановитьФункциональныеОпцииФормы();
	
	ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтотОбъект);
	НовыеПараметры   = НовыеПараметрыПриИзмененииОрганизации(ПараметрыОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, НовыеПараметры, "ПодразделениеОрганизации");
	
	ИнициализироватьСвойстваПлатежаНаСервере(Истина);
	ЗаполнитьЗначенияСвойств(СвойстваПлатежа, НовыеПараметры);
	
	УправлениеЭлементамиОтраженияВУСННаСервере();
	
	ПерезаполнитьРасшифровкуПлатежа(Истина);
	
	УстановитьПараметрыВыбораВидаОплаты();
	
	ЗаполнитьОтражениеВУСННаСервере();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ЗаполнитьСписокВыбораОтражениеДоходов();
	Если Элементы.ОтражениеДоходов.СписокВыбора.Количество() > 0 Тогда
		ОтражениеДоходовПриИзмененииНаСервере();
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	
	ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтотОбъект);
	НовыеПараметры   = НовыеПараметрыПриИзмененииКонтрагента(ПараметрыОбъекта);
	
	Если ЭтоРасчетыСКонтрагентом Тогда
		ИнициализироватьСвойстваПлатежаНаСервере(Истина);
		ЗаполнитьЗначенияСвойств(СвойстваПлатежа, НовыеПараметры);
	Иначе
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, НовыеПараметры, "НТТНаЕНВД");
		ЗаполнитьСписокВыбораОтражениеДоходов();
		Если Элементы.ОтражениеДоходов.СписокВыбора.Количество() > 0 Тогда
			ОтражениеДоходовПриИзмененииНаСервере();
		КонецЕсли;
	КонецЕсли;
	
	Если ПрименениеУСН Тогда
		ЗаполнитьОтражениеВУСННаСервере();
	КонецЕсли;
	УправлениеЭлементамиОтраженияВУСННаСервере();
	
	ПерезаполнитьРасшифровкуПлатежа();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораОтражениеДоходов()
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийОплатаПлатежнойКартой.РозничнаяВыручка Тогда
		
		СписокВыбора = Элементы.ОтражениеДоходов.СписокВыбора;
		СписокВыбора.Очистить();
		
		// При применении ОСНО показ списка возможен только у ИП на патенте
		СтрокаОсновнойСистемы = СтрШаблон(НСтр("ru = '%1'"),
			?(НТТНаЕНВД, НСтр("ru = 'ЕНВД'"), ?(ПрименениеУСН, НСтр("ru = 'УСН'"), НСтр("ru = 'Доход ИП'"))));
		
		Если Не ПрименяетсяТолькоУСНПатент Тогда
			СписокВыбора.Добавить("Основная", СтрокаОсновнойСистемы);
		КонецЕсли;
		
		Если РаздельныйУчетУСНТорговыйСбор И Не НТТНаЕНВД Тогда
			СписокВыбора.Добавить("ТорговыйСбор", НСтр("ru = 'Деятельность на торговом сборе'"));
		КонецЕсли;
		
		Если ПрименяетсяУСНПатент Тогда
			ПатентыОрганизации = Справочники.Патенты.ПолучитьПатентыОрганизации(Объект.Организация, Объект.Дата);
			Для каждого Патент Из ПатентыОрганизации Цикл
				СписокВыбора.Добавить(Патент, Патент);
			КонецЦикла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОтражениеДоходов)
			И СписокВыбора.Количество() > 0
			И СписокВыбора.НайтиПоЗначению(ОтражениеДоходов) = Неопределено Тогда
			
			ОтражениеДоходов = СписокВыбора[0].Значение;
			ОтражениеДоходовПриИзмененииНаСервере();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтражениеДоходовПриИзмененииНаСервере()
	
	Если ТипЗнч(ОтражениеДоходов) = Тип("СправочникСсылка.Патенты") Тогда
		
		Объект.Патент                      = ОтражениеДоходов;
		Объект.ДеятельностьНаТорговомСборе = Ложь;
		
		Если ПрименениеУСН И УчетВПродажныхЦенах Тогда
			Объект.Графа5_УСН = 0;
			Объект.Графа7_УСН = 0;
			Объект.НДС_УСН    = 0;
		КонецЕсли;
		
	Иначе
		
		Объект.Патент                      = Справочники.Патенты.ПустаяСсылка();
		Объект.ДеятельностьНаТорговомСборе = ОтражениеДоходов = "ТорговыйСбор";
		
		ЗаполнитьОтражениеВУСННаСервере();
		
	КонецЕсли;
	
	Объект.ДеятельностьНаПатенте = ЗначениеЗаполнено(Объект.Патент);
	
	УправлениеЭлементамиОтраженияВУСННаСервере();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтражениеВУСННаСервере()
	
	ПараметрыУСН = УчетУСНКлиентСервер.ПараметрыФормыДокументаДляУСН(ЭтотОбъект);
	НалоговыйУчетУСН.ЗаполнитьОтражениеДокументаВУСН(Объект, ПараметрыУСН);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении()

	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
	
		Если ЭтоРасчетыСКонтрагентом Тогда
			СтрокаПлатеж = Объект.РасшифровкаПлатежа[0];
			СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
			ПересчитатьСуммуНДС(СтрокаПлатеж);
			РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтотОбъект);
		Иначе
			СтрокаПлатеж = Объект.РасшифровкаПлатежа[0];
			СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
			ПересчитатьСуммуНДС(СтрокаПлатеж);
			Если ПрименениеУСН И УчетВПродажныхЦенах Тогда
				ЗаполнитьОтражениеВУСННаСервере();
			КонецЕсли; 
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВидОплатыПриИзмененииНаСервере()
	
	СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ВидОплаты, "Контрагент, ДоговорКонтрагента, СчетУчетаРасчетов");
	
	Объект.СчетКасса         = СтруктураРеквизитов.СчетУчетаРасчетов;
	Объект.Эквайер = СтруктураРеквизитов.Контрагент;
	Объект.ДоговорЭквайринга = СтруктураРеквизитов.ДоговорКонтрагента;
	
	СформироватьПредставлениеВидаОплаты(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеВидаОплаты(Форма)
	
	Объект = Форма.Объект;
	СчетРасчетов = ?(ЗначениеЗаполнено(Объект.СчетКасса), Строка(Объект.СчетКасса), НСтр("ru = '<Счет дебета>'"));
	Эквайер     = ?(ЗначениеЗаполнено(Объект.Эквайер), Строка(Объект.Эквайер), НСтр("ru = '<Эквайер>'"));
	Договор      = ?(ЗначениеЗаполнено(Объект.ДоговорЭквайринга), Строка(Объект.ДоговорЭквайринга), НСтр("ru = '<Договор>'"));
	
	Если Форма.ВестиУчетПоДоговорам Тогда
		ТекстВидОплаты = СтрШаблон(
			НСтр("ru= '%1, %2, %3'"),
			СчетРасчетов, Эквайер, Договор);
	Иначе
		ТекстВидОплаты = СтрШаблон(
			НСтр("ru= '%1, %2'"),
			СчетРасчетов, Эквайер);
	КонецЕсли;
	
	Форма.ПредставлениеВидОплаты = ТекстВидОплаты;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОграничениеТипаКонтрагента(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Если Форма.ЭтоРасчетыСКонтрагентом Тогда 
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		Элементы.Контрагент.Заголовок = "Контрагент";
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОплатаПлатежнойКартой.РозничнаяВыручка") Тогда
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Склады");
		Элементы.Контрагент.Заголовок = "Склад";
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НовыеПараметрыПриИзмененииВидаОперации(Знач ПараметрыОбъекта)
	
	НовыеПараметры  = Новый Структура;
	
	Если ПараметрыОбъекта.ЭтоРасчетыСКонтрагентом Тогда
		
		СвойстваПлатежа = СвойстваСтрокРасшифровкиПлатежаСервер(ПараметрыОбъекта, Истина);
		Для каждого СвойствоПлатежа Из СвойстваПлатежа Цикл
			НовыеПараметры.Вставить(СвойствоПлатежа.Ключ, СвойствоПлатежа.Значение);
		КонецЦикла;
		
	Иначе
		
		НовыеПараметры.Вставить("ВалютаДокумента",    ПараметрыОбъекта.ВалютаРегламентированногоУчета);
		НовыеПараметры.Вставить("КурсДокумента",      1);
		НовыеПараметры.Вставить("КратностьДокумента", 1);
		Если ПараметрыОбъекта.УчетВПродажныхЦенах Тогда
			ЕНВД = Ложь;
			СчетаДоходовРасходов = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаВНТТ(ПараметрыОбъекта.Организация,
				ПараметрыОбъекта.Контрагент, ПараметрыОбъекта.Дата,
				Новый Структура("РозничнаяТорговляОблагаетсяЕНВД", ПараметрыОбъекта.РозничнаяТорговляОблагаетсяЕНВД));
			ЕНВД = БухгалтерскийУчетПовтИсп.СчетОтноситсяКДеятельностиЕНВД(СчетаДоходовРасходов.СчетДоходовОтРеализации)
				И ПараметрыОбъекта.ПлательщикЕНВД;
			НовыеПараметры.Вставить("НТТНаЕНВД", ЕНВД);
		Иначе
			НовыеПараметры.Вставить("НТТНаЕНВД", Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НовыеПараметры;
	
КонецФункции

&НаСервереБезКонтекста
Функция НовыеПараметрыПриИзмененииОрганизации(Знач ПараметрыОбъекта)
	
	НовыеПараметры  = Новый Структура;
	
	ОсновноеПодразделение = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");
	Если БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ОсновноеПодразделение, ПараметрыОбъекта.Организация) Тогда
		НовыеПараметры.Вставить("ПодразделениеОрганизации", ОсновноеПодразделение);
	Иначе
		НовыеПараметры.Вставить("ПодразделениеОрганизации", Неопределено);
	КонецЕсли;
	
	Если ПараметрыОбъекта.ПрименениеУСН ИЛИ ПараметрыОбъекта.ПрименяетсяОсобыйПорядокНалогообложения Тогда
		НовыеПараметры.Вставить("СтавкаНДС", Перечисления.СтавкиНДС.БезНДС);
	КонецЕсли;
	
	Если ПараметрыОбъекта.ЭтоРасчетыСКонтрагентом Тогда
		
		СвойстваПлатежа = СвойстваСтрокРасшифровкиПлатежаСервер(ПараметрыОбъекта, Истина);
		Для каждого СвойствоПлатежа Из СвойстваПлатежа Цикл
			НовыеПараметры.Вставить(СвойствоПлатежа.Ключ, СвойствоПлатежа.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат НовыеПараметры;
	
КонецФункции

&НаСервереБезКонтекста
Функция НовыеПараметрыПриИзмененииКонтрагента(Знач ПараметрыОбъекта)
	
	НовыеПараметры = Новый Структура;
	
	Если ПараметрыОбъекта.ЭтоРасчетыСКонтрагентом Тогда
		
		СвойстваПлатежа = СвойстваСтрокРасшифровкиПлатежаСервер(ПараметрыОбъекта, Истина);
		Для каждого СвойствоПлатежа Из СвойстваПлатежа Цикл
			НовыеПараметры.Вставить(СвойствоПлатежа.Ключ, СвойствоПлатежа.Значение);
		КонецЦикла;
		
	Иначе
		
		Если ПараметрыОбъекта.УчетВПродажныхЦенах Тогда
			ЕНВД = Ложь;
			СчетаДоходовРасходов = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаВНТТ(ПараметрыОбъекта.Организация,
				ПараметрыОбъекта.Контрагент, ПараметрыОбъекта.Дата,
				Новый Структура("РозничнаяТорговляОблагаетсяЕНВД", ПараметрыОбъекта.РозничнаяТорговляОблагаетсяЕНВД));
			ЕНВД = БухгалтерскийУчетПовтИсп.СчетОтноситсяКДеятельностиЕНВД(СчетаДоходовРасходов.СчетДоходовОтРеализации)
				И ПараметрыОбъекта.ПлательщикЕНВД;
			НовыеПараметры.Вставить("НТТНаЕНВД", ЕНВД);
		Иначе
			НовыеПараметры.Вставить("НТТНаЕНВД", Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НовыеПараметры;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьЗакрытиеФормыРеквизиовЭквайера(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;	
		
	ЗаполнитьЗначенияСвойств(Объект, РезультатЗакрытия);
	
	Модифицированность = Истина;
		
	СформироватьПредставлениеВидаОплаты(ЭтотОбъект);
	
КонецПроцедуры	

&НаКлиенте
Процедура ОчиститьСвязанныеРеквизиты()
	
	Объект.СчетКасса			= ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПустаяСсылка");
	Объект.Эквайер				= ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	Объект.ДоговорЭквайринга	= ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
	
	СформироватьПредставлениеВидаОплаты(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область РеквизитыРасшифровкиПлатежа

&НаКлиентеНаСервереБезКонтекста
Функция СвойстваСтрокРасшифровкиПлатежа(Знач ПараметрыОбъекта, Знач ПолучатьДоговор)
	
	Если НЕ ЗначениеЗаполнено(ПараметрыОбъекта.ВидОперации)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.Организация)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.Дата)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.Контрагент)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбъекта.ВалютаДокумента)
		ИЛИ (НЕ ЗначениеЗаполнено(ПараметрыОбъекта.ДоговорКонтрагента) И НЕ ПолучатьДоговор) Тогда
		
		СвойстваПлатежа = ПустаяСтруктураСвойстваПлатежа();
		
		Возврат СвойстваПлатежа;
		
	Иначе
		
		ПараметрыПлатежа = Новый Структура("ВидОперации, Организация, Дата, Контрагент, ДоговорКонтрагента,
			|ПрименениеУСН, ПрименяетсяОсобыйПорядокНалогообложения");
		ЗаполнитьЗначенияСвойств(ПараметрыПлатежа, ПараметрыОбъекта);
		
		Возврат СвойстваСтрокРасшифровкиПлатежаСервер(ПараметрыПлатежа, ПолучатьДоговор);
		
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьСуммуНДС(СтрокаПлатежа)
	
	ЗначениеСтавкиНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаПлатежа.СтавкаНДС);
	СтрокаПлатежа.СуммаНДС = СтрокаПлатежа.СуммаПлатежа * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверкаКурсовВалют(СтрокаПлатеж, Форма)
	
	Форма.КурсДокумента      = ?(Форма.КурсДокумента      = 0, 1, Форма.КурсДокумента);
	Форма.КратностьДокумента = ?(Форма.КратностьДокумента = 0, 1, Форма.КратностьДокумента);
	
	Если СтрокаПлатеж <> Неопределено Тогда
		СтрокаПлатеж.КурсВзаиморасчетов      = ?(СтрокаПлатеж.КурсВзаиморасчетов      = 0, 1, СтрокаПлатеж.КурсВзаиморасчетов);
		СтрокаПлатеж.КратностьВзаиморасчетов = ?(СтрокаПлатеж.КратностьВзаиморасчетов = 0, 1, СтрокаПлатеж.КратностьВзаиморасчетов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, Форма)
	
	ПроверкаКурсовВалют(СтрокаПлатеж, Форма);
	СтрокаПлатеж.СуммаВзаиморасчетов = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
		СтрокаПлатеж.СуммаПлатежа,
		Форма.Объект.ВалютаДокумента, СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов,
		Форма.КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
		Форма.КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПустаяСтруктураСвойстваПлатежа()
	
	СвойстваПлатежа = Новый Структура("ДоговорКонтрагента,
		|СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам,
		|ДоговорКонтрагентаВалютаВзаиморасчетов, ДоговорКонтрагентаРасчетыВУсловныхЕдиницах,
		|СпособПогашенияЗадолженности, СтавкаНДС,
		|КурсВзаиморасчетов, КратностьВзаиморасчетов");
	
	Возврат СвойстваПлатежа;
	
КонецФункции

&НаСервереБезКонтекста
Функция СвойстваСтрокРасшифровкиПлатежаСервер(Знач ПараметрыПлатежа, Знач ПолучатьДоговор)
	
	СвойстваПлатежа = ПустаяСтруктураСвойстваПлатежа();
	
	Если ПолучатьДоговор Тогда
		ПараметрыПлатежа.ДоговорКонтрагента = УчетДенежныхСредствБП.ПолучитьДоговорКонтрагента(ПараметрыПлатежа);
	КонецЕсли;
	
	СвойстваПлатежа.ДоговорКонтрагента            = ПараметрыПлатежа.ДоговорКонтрагента;
	СвойстваПлатежа.СпособПогашенияЗадолженности  = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам") И НЕ ЗначениеЗаполнено(ПараметрыПлатежа.ДоговорКонтрагента) Тогда
		
		УстановитьСчетаУчетаРасчетовСКонтрагентом(ПараметрыПлатежа, СвойстваПлатежа);
		
	ИначеЕсли ЗначениеЗаполнено(ПараметрыПлатежа.ДоговорКонтрагента) Тогда
		
		УстановитьСчетаУчетаРасчетовСКонтрагентом(ПараметрыПлатежа, СвойстваПлатежа);
		
		СвойстваДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ПараметрыПлатежа.ДоговорКонтрагента, "ВалютаВзаиморасчетов,РасчетыВУсловныхЕдиницах");
			
		СвойстваПлатежа.ДоговорКонтрагентаВалютаВзаиморасчетов     = СвойстваДоговора.ВалютаВзаиморасчетов;
		СвойстваПлатежа.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах = СвойстваДоговора.РасчетыВУсловныхЕдиницах;
		
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СвойстваДоговора.ВалютаВзаиморасчетов, ПараметрыПлатежа.Дата);
		СвойстваПлатежа.КурсВзаиморасчетов      = СтруктураКурса.Курс;
		СвойстваПлатежа.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
		
	КонецЕсли;
	
	Возврат СвойстваПлатежа;
	
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьСчетаУчетаРасчетовСКонтрагентом(ПараметрыПлатежа, СвойстваПлатежа)
	
	СчетаУчета = СчетаУчетаРасчетовСКонтрагентом(ПараметрыПлатежа);
	ЗаполнитьЗначенияСвойств(СвойстваПлатежа, СчетаУчета);
	
	Если ПараметрыПлатежа.ВидОперации = Перечисления.ВидыОперацийОплатаПлатежнойКартой.ОплатаПокупателя 
		ИЛИ ПараметрыПлатежа.ВидОперации = Перечисления.ВидыОперацийОплатаПлатежнойКартой.ВозвратПокупателю Тогда
		СвойстваПлатежа.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
		СвойстваПлатежа.СтавкаНДС = ?(ПараметрыПлатежа.ВидОперации = Перечисления.ВидыОперацийОплатаПлатежнойКартой.ОплатаПокупателя 
			И (ПараметрыПлатежа.ПрименениеУСН ИЛИ ПараметрыПлатежа.ПрименяетсяОсобыйПорядокНалогообложения), 
			Перечисления.СтавкиНДС.БезНДС, Перечисления.СтавкиНДС.НДС18);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьСвойстваПлатежаНаКлиенте(ТолькоСоздатьКлючи = Ложь)
	
	Если СвойстваПлатежа = Неопределено Тогда
		
		Если ТолькоСоздатьКлючи Тогда
			СвойстваПлатежа = ПустаяСтруктураСвойстваПлатежа();
		Иначе
			ИнициализироватьСвойстваПлатежаНаСервере();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСвойстваПлатежаНаСервере(ТолькоСоздатьКлючи = Ложь)
	
	Если СвойстваПлатежа = Неопределено Тогда
		
		Если ТолькоСоздатьКлючи Тогда
			СвойстваПлатежа = ПустаяСтруктураСвойстваПлатежа();
		Иначе
			ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтотОбъект);
			Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
				ПараметрыОбъекта.Вставить("ДоговорКонтрагента", Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента);
			КонецЕсли;
			СвойстваПлатежа = СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьРасшифровкуПлатежа(ЭтоИзменениеОрганизации = Ложь)
	СворачиватьТЧПриИзмененииОрганизации =
		Объект.ВидОперации = Перечисления.ВидыОперацийОплатаПлатежнойКартой.ОплатаПокупателя
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийОплатаПлатежнойКартой.ВозвратПокупателю;
	
	Если ЭтоИзменениеОрганизации И НЕ СворачиватьТЧПриИзмененииОрганизации Тогда
		Возврат;
	КонецЕсли;
	
	ИнициализироватьСвойстваПлатежаНаСервере();
	Объект.РасшифровкаПлатежа.Очистить();
	Если ЭтоРасчетыСКонтрагентом Тогда
		СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПлатеж, СвойстваПлатежа);
		СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
		ПересчитатьСуммуНДС(СтрокаПлатеж);
		РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ЭтотОбъект);
		
		Элементы.РасшифровкаПлатежа.ТекущаяСтрока = СтрокаПлатеж.ПолучитьИдентификатор();
		
	Иначе
		СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();
		СтрокаПлатеж.СтавкаНДС = ?(ПрименениеУСН ИЛИ ПрименяетсяОсобыйПорядокНалогообложения,
			Перечисления.СтавкиНДС.БезНДС,
			Перечисления.СтавкиНДС.НДС18);
		СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
		ПересчитатьСуммуНДС(СтрокаПлатеж);
		
		Элементы.РасшифровкаВыручки.ТекущаяСтрока = СтрокаПлатеж.ПолучитьИдентификатор();
		
	КонецЕсли;
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьКурсИСуммуВзаиморасчетов(СтрокаПлатежа)
	
	СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
		СтрокаПлатежа.ДоговорКонтрагентаВалютаВзаиморасчетов, Объект.Дата);
	
	СтрокаПлатежа.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатежа.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
	
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатежа, ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СчетаУчетаРасчетовСКонтрагентом(ПараметрыОбъекта)
	
	СчетаУчета = Новый Структура("СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам");
	
	СтруктураСчетов = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
		ПараметрыОбъекта.Организация, ПараметрыОбъекта.Контрагент, ПараметрыОбъекта.ДоговорКонтрагента);
	
	СчетаУчета.Вставить("СчетУчетаРасчетовСКонтрагентом", СтруктураСчетов.СчетРасчетовПокупателя);
	СчетаУчета.Вставить("СчетУчетаРасчетовПоАвансам",     СтруктураСчетов.СчетАвансовПокупателя);
	
	Возврат СчетаУчета;
	
КонецФункции

&НаСервере
Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзмененииНаСервере(Знач ИдСтроки)

	СтрокаПлатеж = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ИдСтроки);
	
	ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтотОбъект);
	ПараметрыОбъекта.ДоговорКонтрагента = СтрокаПлатеж.ДоговорКонтрагента;
	СвойстваПлатежа = СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, Ложь);

	ЗаполнитьЗначенияСвойств(СтрокаПлатеж, СвойстваПлатежа);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНадписиВРасшифровке(СтрокаПлатеж)
	
	СтрокаПлатеж.НадписьВалюта = НСтр("ru = 'Вал.'");
	СтрокаПлатеж.НадписьКурс   = НСтр("ru = 'Курс'");
	СтрокаПлатеж.НадписьСумма  = НСтр("ru = 'Сумма'");
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСуммыВзаиморасчетов()
	
	Отбор = Новый Структура("ДоговорКонтрагентаРасчетыВУсловныхЕдиницах", Истина);
	ПлатежиВУсловныхЕдиницах = Объект.РасшифровкаПлатежа.НайтиСтроки(Отбор);
	Для каждого СтрокаПлатеж Из ПлатежиВУсловныхЕдиницах Цикл
		РассчитатьКурсИСуммуВзаиморасчетов(СтрокаПлатеж);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ОплаченныеСчета()
	
	ОплаченныеСчета = Новый Массив;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийОплатаПлатежнойКартой.ОплатаПокупателя 
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийОплатаПлатежнойКартой.ВозвратПокупателю Тогда
		
		УникальныеЗначения = Новый Соответствие;
		
		Для Каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
			СчетНаОплату = СтрокаРасшифровки.СчетНаОплату;
			Если ЗначениеЗаполнено(СчетНаОплату) И УникальныеЗначения[СчетНаОплату] = Неопределено Тогда
				ОплаченныеСчета.Добавить(СчетНаОплату);
				УникальныеЗначения.Вставить(СчетНаОплату, Истина);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ОплаченныеСчета;
	
КонецФункции

#КонецОбласти

#Область ПечатьЧека

&НаКлиенте
Процедура НапечататьЧек()
	
	ОчиститьСообщения();
	
	ОписаниеОшибки = "";
	
	Если Объект.НомерЧекаККМ <> 0 Тогда
		ТекстСообщения = НСтр("ru = 'Чек уже пробит на фискальном устройстве!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияБПКлиент.ПроверитьВозможностьПечатиЧека(ЭтотОбъект) Тогда
		
		Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
			Контекст = Новый Структура();
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыборФискальногоУстройстваЗавершение", ЭтотОбъект, Контекст);
			ПоддерживаемыеТипыВО = Новый Массив();
			ПоддерживаемыеТипыВО.Добавить("ФискальныйРегистратор");
			ПоддерживаемыеТипыВО.Добавить("ПринтерЧеков");
			ПоддерживаемыеТипыВО.Добавить("ККТ");
			МенеджерОборудованияКлиент.ПредложитьВыбратьУстройство(ОписаниеОповещения, ПоддерживаемыеТипыВО,
				НСтр("ru = 'Выберите фискальное устройство'"), НСтр("ru = 'Фискальное устройство не подключено.'"));
		Иначе
			ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФискальногоУстройстваЗавершение(ИдентификаторУстройства, Параметры) Экспорт
	Если НЕ ЗначениеЗаполнено(ИдентификаторУстройства) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
	
	ДанныеУстройства = МенеджерОборудованияКлиентПовтИсп.ПолучитьДанныеУстройства(ИдентификаторУстройства);
	ТипУстройства = ?(ДанныеУстройства.Свойство("ТипОборудованияИмя"), ДанныеУстройства.ТипОборудованияИмя, "ККТ");
	
	Если ТипУстройства = "ККТ" Тогда
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ПолучитьПараметрыЗавершение", ЭтотОбъект, Параметры);
		МенеджерОборудованияКлиент.НачатьПолучениеПараметровФискальногоУстройства(ОповещениеПриЗавершении, УникальныйИдентификатор , ИдентификаторУстройства, Ложь);
	Иначе
		ПолучитьПараметрыЗавершение(Неопределено, Параметры);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьПараметрыЗавершение(ПараметрыФискальногоУстройства, Параметры) Экспорт
	
	ОписаниеОшибки = "";
	Если ПараметрыФискальногоУстройства =  Неопределено Тогда
		ВерсияФормата = "1.1.0.0";
	ИначеЕсли НЕ ПараметрыФискальногоУстройства.Результат Тогда 
		ОписаниеОшибки = ПараметрыФискальногоУстройства.ОписаниеОшибки;
	Иначе
		ВерсияФормата = ОбщегоНазначенияБПКлиентСервер.ПолучитьВерсиюФФД(ПараметрыФискальногоУстройства.ВыходныеПараметры.ВерсияФФДФН, ПараметрыФискальногоУстройства.ВыходныеПараметры.ВерсияФФДККТ);
	КонецЕсли; 

	Если НЕ ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ПараметрыУстройства = МенеджерОборудованияКлиентПовтИсп.ПолучитьПараметрыУстройства(Параметры.ИдентификаторУстройства);
		НомерСекции         = ?(ПараметрыУстройства.Свойство("НомерСекции"), ПараметрыУстройства.НомерСекции, 0);
		
		МассивЧеков = ПодготовитьДанныеДляПробитияЧека(НомерСекции, ВерсияФормата, ОписаниеОшибки);
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ТекстСообщения = НСтр("ru = 'При подключении устройства произошла ошибка.
			|Чек не напечатан на фискальном устройстве.
			|Дополнительное описание:
			|%ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	ИначеЕсли МассивЧеков.Количество() > 0 Тогда
		НапечататьОдинЧек(МассивЧеков, Параметры.ИдентификаторУстройства, ВерсияФормата);
	КонецЕсли;

КонецПроцедуры 

&НаКлиенте
Процедура НапечататьОдинЧек(МассивЧеков, ИдентификаторУстройства, ВерсияФормата)
	ОбщиеПараметры    = МассивЧеков[0];
	
	Контекст = Новый Структура();
	Контекст.Вставить("МассивЧеков", МассивЧеков);
	Контекст.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
	Контекст.Вставить("ВерсияФормата", ВерсияФормата);
	
	Оповещение = Новый ОписаниеОповещения("НапечататьОдинЧекЗавершение", ЭтотОбъект, Контекст);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПараметрыПечатиЧека",     МассивЧеков[0]);
	ПараметрыФормы.Вставить("Организация",             Объект.Организация);
	ПараметрыФормы.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
	ПараметрыФормы.Вставить("ВерсияФормата",           ВерсияФормата);
	
	ОткрытьФорму("Обработка.ПечатьЧека.Форма", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура НапечататьОдинЧекЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатВыполнения.Результат Тогда
		
		Параметры.МассивЧеков.Удалить(0);
		Объект.НомерЧекаККМ = РезультатВыполнения.ВыходныеПараметры[1];
		
		Если Параметры.МассивЧеков.Количество() > 0 Тогда
			НапечататьОдинЧек(Параметры.МассивЧеков, Параметры.ИдентификаторУстройства, Параметры.ВерсияФормата);
		Иначе
			Модифицированность = Истина;
			Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
			
		КонецЕсли;
	Иначе
		
		ТекстСообщения = НСтр("ru = 'При печати чека произошла ошибка.
			|Чек не напечатан на фискальном устройстве.
			|Дополнительное описание:
			|%ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,
			"%ДополнительноеОписание%",
			РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьДанныеДляПробитияЧека(Знач НомерСекции, Знач ВерсияФормата, ОписаниеОшибки)
	
	Возврат Документы.ОплатаПлатежнойКартой.СобратьДанныеЧеков(Объект.Ссылка, НомерСекции, ВерсияФормата, ОписаниеОшибки);
	
КонецФункции

#КонецОбласти

#Область УправлениеФормой

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();


	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.РасшифровкаПлатежа.СпособПогашенияЗадолженности", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СпособыПогашенияЗадолженности.НеПогашать);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// РасшифровкаПлатежаСуммаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСуммаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.РасшифровкаПлатежа.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.РасшифровкаПлатежа.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// Используются только при расчетах в валюте и у.е.

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаНадписьВалюта");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаНадписьКурс");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаНадписьСумма");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаДоговорКонтрагентаВалютаВзаиморасчетов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаКурсВзаиморасчетов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСуммаВзаиморасчетов");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ЕстьРасчетыВУсловныхЕдиницах", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// РасшифровкаПлатежаСделка

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСделка");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.РасшифровкаПлатежа.Сделка", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Документ>'"));


	// РасшифровкаПлатежаСпособПогашенияЗадолженности

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСпособПогашенияЗадолженности");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.РасшифровкаПлатежа.СпособПогашенияЗадолженности", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Способ погашения>'"));


	// РасшифровкаПлатежаСделка

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСделка");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.РасшифровкаПлатежа.СпособПогашенияЗадолженности", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СпособыПогашенияЗадолженности.ПоДокументу);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.РасшифровкаПлатежа.Сделка", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);


	// РасшифровкаПлатежаСделка

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСделка");
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.СпособыПогашенияЗадолженности.Автоматически);
	СписокЗначений.Добавить(Перечисления.СпособыПогашенияЗадолженности.НеПогашать);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.РасшифровкаПлатежа.СпособПогашенияЗадолженности", ВидСравненияКомпоновкиДанных.ВСписке, СписокЗначений);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	// РасшифровкаПлатежаСчетНаОплату
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСчетНаОплату");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ВидОперации",
		ВидСравненияКомпоновкиДанных.Равно,
		Перечисления.ВидыОперацийОплатаПлатежнойКартой.ВозвратПокупателю);
		
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// РасшифровкаПлатежаКурсВзаиморасчетов, РасшифровкаПлатежаСуммаВзаиморасчетов

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаКурсВзаиморасчетов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСуммаВзаиморасчетов");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.РасшифровкаПлатежа.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Счет расчетов>'"));


	// РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Счет авансов>'"));


	// ПредставлениеВидОплаты

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПредставлениеВидОплаты");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.СчетКасса", ВидСравненияКомпоновкиДанных.НеЗаполнено);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Эквайер", ВидСравненияКомпоновкиДанных.НеЗаполнено);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ДоговорЭквайринга", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.Контрагент.Доступность = Истина;
	
	Элементы.ДокументОснование.Видимость = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОплатаПлатежнойКартой.ВозвратПокупателю") И Форма.ЕстьПравоЧтенияПодключаемоеОборудование);
	Элементы.НапечататьЧек.Видимость     = Форма.ЕстьПравоЧтенияПодключаемоеОборудование;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОплатаПлатежнойКартой.ВозвратПокупателю")
		И Форма.УчетВПРодажныхЦенах Тогда
		
		Если Форма.ПрименениеУСН И Не Форма.ПрименениеУСНДоходы Тогда
			Элементы.РозничнаяВыручкаНДСУСН.Доступность = Объект.Графа7_УСН <> 0;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСтраницНаСервере()
	
	МассивСтраниц = Новый Массив;
	МассивСтраниц.Добавить(Элементы.ГруппаРозничнаяВыручка);
	МассивСтраниц.Добавить(Элементы.ГруппаРасчетыСКонтрагентами);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийОплатаПлатежнойКартой.РозничнаяВыручка Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРозничнаяВыручка;
	Иначе
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРасчетыСКонтрагентами;
	КонецЕсли;
	
	Для каждого ТекСтраница Из МассивСтраниц Цикл
		Если ТекСтраница <> Элементы.ГруппаСтраницы.ТекущаяСтраница Тогда
			Если ТекСтраница.Видимость Тогда
				ТекСтраница.Видимость = Ложь;
			КонецЕсли;
		Иначе
			Если НЕ ТекСтраница.Видимость Тогда
				ТекСтраница.Видимость = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтотОбъект);
	
	ПрименениеУСН                   = УчетнаяПолитика.ПрименяетсяУСН(Объект.Организация,       Объект.Дата);
	ПрименениеУСНДоходы             = УчетнаяПолитика.ПрименяетсяУСНДоходы(Объект.Организация, Объект.Дата);
	ПрименяетсяУСНПатент            = УчетнаяПолитика.ПрименяетсяУСНПатент(Объект.Организация, Объект.Дата);
	ПлательщикЕНВД                  = УчетнаяПолитика.ПлательщикЕНВД(Объект.Организация,       Объект.Дата);
	ПрименяетсяОсобыйПорядокНалогообложения =
		УчетнаяПолитика.ПрименяетсяОсобыйПорядокНалогообложения(Объект.Организация, Объект.Дата);
	ПрименяетсяТолькоУСНПатент      = ПрименяетсяУСНПатент И НЕ ПлательщикЕНВД И ПрименяетсяОсобыйПорядокНалогообложения;
	РаздельныйУчетУСНТорговыйСбор   = УчетнаяПолитика.РаздельныйУчетТорговыйСборПриУСН(Объект.Организация, Объект.Дата);
	
	УчетВПродажныхЦенах             = УчетнаяПолитика.СпособОценкиТоваровВРознице(Объект.Организация, Объект.Дата)
		= Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости;
	РозничнаяТорговляОблагаетсяЕНВД = УчетнаяПолитика.РозничнаяТорговляОблагаетсяЕНВД(Объект.Организация, Объект.Дата);
	ВестиУчетПоДоговорам            = ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам");
	
	НТТНаЕНВД = Ложь;
	Если ПлательщикЕНВД И УчетВПродажныхЦенах Тогда
		СчетаДоходовРасходов = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаВНТТ(Объект.Организация, Объект.Контрагент,
			Объект.Дата, Новый Структура("РозничнаяТорговляОблагаетсяЕНВД", РозничнаяТорговляОблагаетсяЕНВД));
		НТТНаЕНВД = БухгалтерскийУчетПовтИсп.СчетОтноситсяКДеятельностиЕНВД(СчетаДоходовРасходов.СчетДоходовОтРеализации);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	ТекущаяДатаДокумента           = Объект.Дата;
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ЗаголовокСтатьяДДС             = НСтр("ru = 'Статья движения ден.средств:'");
	НадписьПатент                  = НСтр("ru = 'Патент:'");
	
	СвойстваПлатежа = Неопределено; // При открытии формы структуру не инициализируем, будет создана при первом обращении.
	ЕстьПравоЧтенияПодключаемоеОборудование = ПравоДоступа("Чтение", Метаданные.Справочники.ПодключаемоеОборудование);
	
	УправлениеЭлементамиОтраженияВУСННаСервере();
	
	УстановитьСостояниеДокумента();
	
	ЭтоРасчетыСКонтрагентом = (Объект.ВидОперации = Перечисления.ВидыОперацийОплатаПлатежнойКартой.ОплатаПокупателя) 
		ИЛИ (Объект.ВидОперации = Перечисления.ВидыОперацийОплатаПлатежнойКартой.ВозвратПокупателю);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ЗаполнитьСписокВыбораОтражениеДоходов();
	УстановитьОтражениеДоходов();
	
	// Заполнение свойств элементов формы
	УстановитьОграничениеТипаКонтрагента(ЭтотОбъект);
	
	ПараметрыОбъекта = ТекущиеПараметрыОбъекта(ЭтотОбъект);
	НовыеПараметры   = НовыеПараметрыПриИзмененииВидаОперации(ПараметрыОбъекта);
	
	Если ЭтоРасчетыСКонтрагентом Тогда
		ИнициализироватьСвойстваПлатежаНаСервере(Истина);
		ЗаполнитьЗначенияСвойств(СвойстваПлатежа, НовыеПараметры);
		УстановитьПараметрыВыбораДоговораСКонтрагентом(ЭтотОбъект);
	Иначе
		ЗаполнитьЗначенияСвойств(Объект,     НовыеПараметры, "ВалютаДокумента");
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, НовыеПараметры, "КурсДокумента, КратностьДокумента, НТТНаЕНВД");
		УстановитьПараметрыВыбораКонтрагентаКакСклада(ЭтотОбъект)
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		РеквизитыДокументаОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ДокументОснование, "Дата, Номер");
		ДокументОснование = СтрШаблон("%1 № %2 от %3", 
			Объект.ДокументОснование.Метаданные().Представление(), 
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыДокументаОснования.Номер, Истина, Истина), 
			Формат(РеквизитыДокументаОснования.Дата, "ДФ=dd.MM.yyyy"));
	КонецЕсли; 
	
	УстановитьПараметрыВыбораВидаОплаты();
	
	СформироватьПредставлениеВидаОплаты(ЭтотОбъект);
	
	
	УстановитьВидимостьСтраницНаСервере();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтражениеДоходов() Экспорт
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийОплатаПлатежнойКартой.РозничнаяВыручка И УчетВПродажныхЦенах Тогда
		
		Если ПустаяСтрока(ОтражениеДоходов) Тогда
			Если Объект.ДеятельностьНаПатенте Тогда
				ОтражениеДоходов = Объект.Патент;
			ИначеЕсли Объект.ДеятельностьНаТорговомСборе Тогда
				ОтражениеДоходов = "ТорговыйСбор";
			Иначе
				ОтражениеДоходов = "Основная";
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьРасчетыВУсловныхЕдиницах = Ложь;
	МассивДоговоров    = Объект.РасшифровкаПлатежа.Выгрузить(, "ДоговорКонтрагента").ВыгрузитьКолонку("ДоговорКонтрагента");
	СвойстваДоговоров  = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		МассивДоговоров, "ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах");

	Для каждого СтрокаПлатеж Из Объект.РасшифровкаПлатежа Цикл
		Если ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
			СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов     = СвойстваДоговоров[
				СтрокаПлатеж.ДоговорКонтрагента].ВалютаВзаиморасчетов;
			СтрокаПлатеж.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах = СвойстваДоговоров[
				СтрокаПлатеж.ДоговорКонтрагента].РасчетыВУсловныхЕдиницах;
			
			ЕстьРасчетыВУсловныхЕдиницах = ЕстьРасчетыВУсловныхЕдиницах
				ИЛИ СтрокаПлатеж.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах;
		Иначе
			СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов     = Справочники.Валюты.ПустаяСсылка();
			СтрокаПлатеж.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьРасчетыВУсловныхЕдиницах Тогда
		Для каждого СтрокаПлатеж Из Объект.РасшифровкаПлатежа Цикл
			ЗаполнитьНадписиВРасшифровке(СтрокаПлатеж);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиОтраженияВУСННаСервере()
	
	// Видимость элементов настройки отражения в НУ (патент и КУДиР):
	// 
	// - Если выключена ФО "ПрименениеУСН", то элементы настройки КУДиР не отображаются
	// - Если применяется УСН, элементы настройки КУДиР отображаются,
	//   состав отображаемых элементов зависит от вида операции и ФО формы
	Элементы.ГруппаРозничнаяВыручкаОтражениеВНУ.Видимость = Ложь;
	Если Объект.ВидОперации = Перечисления.ВидыОперацийОплатаПлатежнойКартой.РозничнаяВыручка Тогда
		
		Если УчетВПродажныхЦенах Тогда
			Элементы.ГруппаРозничнаяВыручкаОтражениеВНУ.Видимость = ПрименяетсяУСНПатент ИЛИ ПрименениеУСН;
			
			Элементы.ОтражениеДоходов.Видимость                   = ПрименяетсяУСНПатент ИЛИ ПрименениеУСН ИЛИ ПлательщикЕНВД;
			Элементы.ГруппаРозничнаяВыручкаРасходыУСН.Видимость   = ПрименениеУСН И НЕ НТТНаЕНВД И НЕ Объект.ДеятельностьНаПатенте;
		Иначе
			Элементы.ГруппаРозничнаяВыручкаОтражениеВНУ.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()
	
	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, ИдентификаторыСобытийПриОткрытии);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#КонецОбласти