&НаКлиенте
Перем СтрокаПоискаПоКБК;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РеквизитыОрганизацииСсылка = ПроверкаРеквизитовОрганизации.СтрокаСообщенияНеЗаполненБанковскийСчет();
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ГруппаПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ЗаполнитьСписокОчередностьПлатежа();
	
	// При создании платежки из списка задач бухгалтера заполняем правило и период события
	Если Параметры.Свойство("ПериодСобытия") Тогда
		
		Если ТипЗнч(Параметры.Правило) = Тип("СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов")
			ИЛИ ТипЗнч(Параметры.Правило) = Тип("СправочникСсылка.Патенты") Тогда
			ПравилоУплатыНалогов            = Параметры.Правило;
			ПериодСобытияКалендаря          = Параметры.ПериодСобытия;
		Иначе
			ПравилоРегулярногоПлатежа       = Параметры.Правило;
			ПериодСобытияРегулярногоПлатежа = Параметры.ПериодСобытия;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Параметры.Свойство("ВидОперации") Тогда
		Объект.ВидОперации = Параметры.ВидОперации;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		ВидПлатежаПоУмолчанию();
		Если НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			УстановитьОчередностьПлатежа();
			ОбновитьПодсказкуОчередностьПлатежа(ЭтотОбъект);
		КонецЕсли;
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	Если Параметры.ЗначенияЗаполнения.Свойство("КодБК")
		И Параметры.ЗначенияЗаполнения.Свойство("КодНалоговогоОргана")
		И НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		ВидГосударственногоОргана = Справочники.Контрагенты.ВидГосударственногоОрганаПоКБК(Параметры.ЗначенияЗаполнения.КодБК);
		Если ЗначениеЗаполнено(ВидГосударственногоОргана)
			И ВидГосударственногоОргана <> Перечисления.ВидыГосударственныхОрганов.Прочий Тогда
			
			ЗаполнитьСведенияОГосударственномОрганеПоКоду(ВидГосударственногоОргана, Параметры.ЗначенияЗаполнения.КодНалоговогоОргана);
			
		КонецЕсли;
	КонецЕсли;
	
	ДлительнаяОперацияПроверкиПлатежныхРеквизитов = ПроверитьПлатежныеРеквизитыВФоне();
	
	// Уведомим об изменениях в правилах платежей в бюджет
	НомерСчетаПолучателя = Объект.СчетКонтрагента.НомерСчета;
	
	// Если платежка не соответствует правилам платежей в бюджет,
	// то предложим пользователю варианты выхода из случая
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		Если НЕ Объект.ПеречислениеВБюджет
			И (ПлатежиВБюджетКлиентСервер.ЭтоСчетПлатежаВБюджет(НомерСчетаПолучателя, Объект.Дата)
			ИЛИ УчетДенежныхСредствБП.ПлатежГосОргану(Объект.ВидОперации, Объект.Контрагент))Тогда
			ИзменитьПеречислениеВБюджет();
		Иначе
			НайтиОшибкиПлатежаВБюджет(Параметры.ЗначениеКопирования.Дата);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ИспользоватьНесколькоБанковскихСчетовОрганизации =
			Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Объект.Организация);
	Иначе
		ИспользоватьНесколькоБанковскихСчетовОрганизации = Истина;
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтотОбъект,
		"БП.Документ.ПлатежноеПоручение",
		"ФормаДокумента",
		НСтр("ru = 'Новости: Платежное поручение'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
	// КомандыЭДО
	ОбменСБанками.ПриСозданииНаСервере(ЭтотОбъект, Элементы.КомандыЭДО, Истина);
	// Конец КомандыЭДО
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("Подключаемый_ПредупреждениеОбОшибке", 0.5, Истина);
	
	ЗапуститьПроверкуФоновогоЗадания();
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	Если ПоказатьИндексыСПАРК Тогда
	
		СПАРКРискиКлиент.ПриОткрытии(ЭтотОбъект, Неопределено);
		
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("РегистрСведенийКлючЗаписи.РеквизитыУплатыНалоговИПлатежейВБюджет") Тогда
		
		Если Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога") Тогда
			
			Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога");
			ВидОперацииОбработатьИзменение();
			
			// СПАРК Риски
			ИндексыСПАРКРиски = Неопределено; // Сбросить полученные значения
			ПодключитьОбработчикОжидания("Подключаемый_ОбновитьОтображениеИндексыСПАРК", 0.1, Истина);
			// Конец СПАРК Риски
			
		КонецЕсли;
		
		ИзменитьПеречислениеВБюджет(ВыбранноеЗначение);
		
		УправлениеФормой(ЭтотОбъект);
		
		УведомитьПользователяПлатежиВБюджет();
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ПравилаРегулярныхПлатежей") Тогда
		
		НадписьСледующийПлатеж = НадписьСледующийПлатеж(ВыбранноеЗначение, ПериодСобытияРегулярногоПлатежа);
		
		Если УстановитьПравилоПоДокументу(Объект.Организация, Объект.Ссылка, ПравилоРегулярногоПлатежа, ПериодСобытияРегулярногоПлатежа) Тогда
			ОбновитьЗадачиБухгалтера();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.ПравилаРегулярныхПлатежей") Тогда
		
		ПравилоРегулярногоПлатежа = НовыйОбъект;
		НадписьСледующийПлатеж    = НадписьСледующийПлатеж(НовыйОбъект, ПериодСобытияРегулярногоПлатежа);
		
		Если УстановитьПравилоПоДокументу(Объект.Организация, Объект.Ссылка, ПравилоРегулярногоПлатежа, ПериодСобытияРегулярногоПлатежа) Тогда
			ОбновитьЗадачиБухгалтера();
			Оповестить("ДобавитьБлокИнформационнойПанели", "ПериодическиеПлатежи");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ВыборРеквизитовПлательщика" И Источник = ЭтотОбъект Тогда
		ИзмененКПП = Параметр.КПППлательщика <> Объект.КПППлательщика;
		Модифицированность = ИзмененКПП ИЛИ Параметр.ИННПлательщика <> Объект.ИННПлательщика
			ИЛИ СокрЛП(Параметр.ТекстПлательщика) <> СокрЛП(Объект.ТекстПлательщика);
		ЗаполнитьЗначенияСвойств(Объект, Параметр);
		Если ИзмененКПП И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога") Тогда
			ОбработатьИзменениеКПППлательщика();
		ИначеЕсли Модифицированность Тогда
			НадписьРеквизитыПлательщика = УстановитьНадписьРеквизитыПлательщика(ЭтотОбъект);
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ВыборРеквизитовПолучателя" И Источник = ЭтотОбъект Тогда
		ЗаполнитьЗначенияСвойств(Объект, Параметр);
		НадписьРеквизитыПолучателя = УстановитьНадписьРеквизитыПолучателя(ЭтотОбъект);
		Модифицированность = Истина;
	ИначеЕсли ИмяСобытия = "ОбновитьФорму" И ТипЗнч(Источник) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
		
		Прочитать();
		
		// СПАРК Риски
		ИндексыСПАРКРиски = Неопределено; // Сбросить полученные значения
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьОтображениеИндексыСПАРК", 0.1, Истина);
		// Конец СПАРК Риски
		
	ИначеЕсли ИмяСобытия = "ИзменениеНастроекПлатежныхПорученийИТребований" Тогда
		НастройкиПечатиПриИзмененииНаСервере();
		Модифицированность = Истина;
	ИначеЕсли ИмяСобытия = "Запись_Контрагенты" Тогда
		Если Источник = Объект.Контрагент Тогда
			УстановитьРеквизитыПолучателяНаСервере(Истина);
			Модифицированность = Истина;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "Запись_Организации" Тогда
		Если Источник = Объект.Организация Тогда
			ОбработатьИзмененияВОрганизацииНаСервере();
			Модифицированность = Истина;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ОбновитьСостояниеОбменСБанками" Тогда
		Состояние = ПолучитьСостояниеОбмена(Объект.Ссылка);
	ИначеЕсли ИмяСобытия = "ИзмененБанковскийСчет" Тогда
		Если Параметр.Владелец = Объект.Организация Тогда
			УстановитьРеквизитыПлательщикаНаСервере();
			Модифицированность = Истина;
		ИначеЕсли Параметр.Владелец = Объект.Контрагент Тогда
			УстановитьРеквизитыПолучателяНаСервере(Истина, Ложь);
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	СПАРКРискиКлиент.ОбработкаОповещения(ЭтотОбъект, Неопределено, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ЗаполнитьСписокОчередностьПлатежа();
	ЗаполнитьПравилоРегулярногоПлатежаНаСервере(Объект.Ссылка);
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ПроверитьПередЗаписью(Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы И Модифицированность Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Отказ = Истина;
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		Оповещение   = Новый ОписаниеОповещения("ВопросПередЗакрытиемЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "ПроведениеПлатежноеПоручение";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ПропуститьПроверку")
		И ПараметрыЗаписи.ПропуститьПроверку Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Объект.ПеречислениеВБюджет Тогда
		СброситьПризнакПлатежаВБюджет(ЭтотОбъект);
		Возврат;
	КонецЕсли;
	
	РезультатПроверки = ПроверкаРеквизитовПередЗаписьюНаСервере();
	
	ТекстВопроса = "";
	Если РезультатПроверки.ПредупредитьОбОшибках Тогда
		
		ТекстВопроса = НСтр("ru = 'При проверке правильности заполнения реквизитов обнаружены ошибки.
			|Записать с ошибками?'");
		
	ИначеЕсли РезультатПроверки.ПредупредитьДублиУИН И НЕ СчетПоГосконтракту Тогда
		
		ШаблонТекстаВопроса = НСтр("ru = '%1
			|
			|Записать документ?'");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонТекстаВопроса,
			РезультатПроверки.ИнформацияДублиУИН);
		
	ИначеЕсли РезультатПроверки.ПредупредитьУИНСодержитБуквы Тогда
		
		ШаблонТекстаВопроса = НСтр("ru = '%1
			|
			|Записать документ?'");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонТекстаВопроса,
			РезультатПроверки.ИнформацияУИНСодержитБуквы);
		
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстВопроса) Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина; // Примем решение позже, в зависимости от ответа пользователя
	
	ПоказатьВопрос(
		Новый ОписаниеОповещения("ВопросЗаписатьСОшибкамиЗавершение", ЭтотОбъект, ПараметрыЗаписи),
		ТекстВопроса,
		РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПроверкаРеквизитовОрганизации.ПередЗаписьюНаСервере(
			Объект.Организация,
			Объект.СчетОрганизации,
			ИспользоватьНесколькоБанковскихСчетовОрганизации,
			Отказ,
			ПараметрыЗаписи);
			
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Состояние", Состояние);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ ЗначениеЗаполнено(ПравилоРегулярногоПлатежа) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("ПравилоОбновлено",
		УстановитьПравилоПоДокументу(ТекущийОбъект.Организация, ТекущийОбъект.Ссылка, ПравилоРегулярногоПлатежа, ПериодСобытияРегулярногоПлатежа));
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ХранилищеОбщихНастроек.Сохранить("ПлатежноеПоручение_ВидПлатежа",, Объект.ВидПлатежа);
	
	УстановитьСостояниеДокумента();
	
	//Если задано правило уплаты налогов, зарегистрируем документ в регистре
	Если ТекущийОбъект.ПеречислениеВБюджет И ЗначениеЗаполнено(ПравилоУплатыНалогов) Тогда
		РегистрыСведений.ЗадачиБухгалтераНалоговыеПлатежи.ДобавитьЗаписьПравила(
			ТекущийОбъект.Организация,
			ТекущийОбъект.Ссылка,
			ПравилоУплатыНалогов,
			ПериодСобытияКалендаря);
	КонецЕсли;
	
	Если УчетДенежныхСредствКлиентСервер.РасчетыСФизическимиЛицами(ТекущийОбъект.ВидОперации)
		И НЕ ТекущийОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ЛичныеСредстваПредпринимателя Тогда
		РегистрыСведений.ОсновныеВариантыПеречисленияСотруднику.УстановитьОсновнойВариантПеречисления(ТекущийОбъект.Организация,
			ТекущийОбъект.Контрагент, ТекущийОбъект.ВидОперации, ТекущийОбъект.СчетКонтрагента, ТекущийОбъект.НазначениеПлатежа);
	КонецЕсли;
	
	ПроверитьИзменитьНастройкуПлатежаВБюджет();
	
	РазблокироватьДанныеФормыДляРедактирования();
	
	Состояние = ПолучитьСостояниеОбмена(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ОбновитьФорму", ВладелецФормы, Объект.Ссылка);
	
	ДокументОплачен = Состояние = ПредопределенноеЗначение("Перечисление.СостоянияБанковскихДокументов.Оплачено");
	Если Объект.ПеречислениеВБюджет Тогда
		ПараметрыНалога = Новый Структура;
		ПараметрыНалога.Вставить("Организация",       Объект.Организация);
		ПараметрыНалога.Вставить("Налог",             Объект.Налог);
		ПараметрыНалога.Вставить("ДокументОснование", Объект.ДокументОснование);
		ПараметрыНалога.Вставить("ПоказательПериода", Объект.ПоказательПериода);
		ПараметрыНалога.Вставить("КБК",               Объект.КодБК);
		ПараметрыНалога.Вставить("ОКАТО",             Объект.КодОКАТО);
		ПараметрыНалога.Вставить("Ссылка",            Объект.Ссылка);
		ПараметрыНалога.Вставить("Оплачено",          ДокументОплачен);
		ПараметрыНалога.Вставить("Сумма",             Объект.СуммаДокумента);
		Оповестить("Запись_ПлатежныйДокумент_УплатаНалогов", ПараметрыНалога);
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику") Тогда
		ПараметрыЗарплаты = Новый Структура;
		ПараметрыЗарплаты.Вставить("Организация", Объект.Организация);
		ПараметрыЗарплаты.Вставить("Ссылка",            Объект.Ссылка);
		ПараметрыЗарплаты.Вставить("Ведомость",         Объект.ПлатежнаяВедомость);
		ПараметрыЗарплаты.Вставить("Оплачено",          ДокументОплачен);
		Оповестить("Запись_ПлатежныйДокумент_ВыплатаЗарплаты", ПараметрыЗарплаты);
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП") Тогда
		ПараметрыЗарплаты = Новый Структура;
		ПараметрыЗарплаты.Вставить("Организация", Объект.Организация);
		ПараметрыЗарплаты.Вставить("Ссылка",            Объект.Ссылка);
		ПараметрыЗарплаты.Вставить("Ведомость",         Объект.ДокументОснование);
		ПараметрыЗарплаты.Вставить("Оплачено",          ДокументОплачен);
		Оповестить("Запись_ПлатежныйДокумент_ВыплатаЗарплаты", ПараметрыЗарплаты);
	КонецЕсли;
	
	НадписьСледующийПлатеж = НадписьСледующийПлатеж(ПравилоРегулярногоПлатежа, ПериодСобытияРегулярногоПлатежа);
	
	Если ПараметрыЗаписи.Свойство("ПравилоОбновлено") И ПараметрыЗаписи.ПравилоОбновлено Тогда
		
		ОбновитьЗадачиБухгалтера();
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ВидОперации) И ВидОперацииДоИзменения <> Объект.ВидОперации Тогда
		
		ВидОперацииПриИзмененииСервер();
		
		ЗапуститьПроверкуФоновогоЗадания();
		
		УведомитьПользователяПлатежиВБюджет();
		
		// СПАРК Риски
		ИндексыСПАРКРиски = Неопределено; // Сбросить полученные значения
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьОтображениеИндексыСПАРК", 0.1, Истина);
		// Конец СПАРК Риски
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СписаниеСРасчетногоСчетаФормыКлиент.ВидОперацииАвтоПодбор(Объект.ВидОперации, ДанныеВыбора, Ожидание, СтандартнаяОбработка, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	Перем ПериодПлатежа;
	
	УстановитьОчередностьПлатежаПо345ФЗ(ЭтотОбъект);
	ИзменитьПодсказкуОчередностьПлатежа();
	
	ИзменилсяМесяц = НачалоМесяца(Объект.Дата) <> НачалоМесяца(ПредыдущаяДата);
	РеквизитыПерезаполнены = Ложь;
	ПлатежГосОргану = ПлатежГосОргану(Объект.ВидОперации, Объект.Контрагент);
	Если ПлатежГосОргану Тогда
		Если ПлатежиВБюджетКлиентСервер.ПрименяетсяОКТМО8Символов(Объект.Дата) Тогда
			Объект.КодОКАТО = Лев(Объект.КодОКАТО, 8);
			НадписьРеквизитыПлатежейВБюджет = НадписьРеквизитыПлатежейВБюджет(ЭтотОбъект);
		КонецЕсли;
		
		Если ПлатежиВБюджетКлиентСервер.РеквизитЗаполнен(Объект.ПоказательПериода) Тогда
			ПоказателиПериода = ПлатежиВБюджетКлиентСервер.РазобратьНалоговыйПериод(Объект.ПоказательПериода);
			ПериодПлатежа = ПоказателиПериода.Дата;
		КонецЕсли;
		
		Если ПлатежиВБюджетКлиентСервер.ДействуетПриказ107н(ПредыдущаяДата)
			<> ПлатежиВБюджетКлиентСервер.ДействуетПриказ107н(Объект.Дата) Тогда
			Объект.ПеречислениеВБюджет = Истина;
			ИзменениеПериодаПримененияПравилПлатежаВБюджет();
		ИначеЕсли ПлатежиВБюджетКлиентСервер.ДействуетПриказ2017_90н(ПредыдущаяДата)
			<> ПлатежиВБюджетКлиентСервер.ДействуетПриказ2017_90н(Объект.Дата)
			ИЛИ ЗначениеЗаполнено(ПериодПлатежа)
			И ПлатежиВБюджетКлиентСервер.ДействуетПриказ2017_90н(ПериодПлатежа)
			<> ПлатежиВБюджетКлиентСервер.ДействуетПриказ2017_90н(Объект.Дата) Тогда
			НалогПриИзмененииНаСервере(РеквизитыПерезаполнены, "");
		Иначе
			Если ИзменилсяМесяц Тогда
				ИзменитьПеречислениеВБюджет(,, Истина);
				УправлениеФормой(ЭтотОбъект);
				РеквизитыПерезаполнены = Истина;
			КонецЕсли;
		КонецЕсли;
		
		УведомитьПользователяПлатежиВБюджет();
	КонецЕсли;
	
	Если НачалоДня(Объект.Дата) <> НачалоДня(ПредыдущаяДата) ИЛИ ИзменилсяМесяц Тогда
		ИзменитьПлатежныеРеквизитыПриИзмененииДаты(РеквизитыПерезаполнены, ИзменилсяМесяц);
	КонецЕсли;
	
	ЗапуститьПроверкуФоновогоЗадания();
	
	ДатаСледующегоПлатежа = ДатаСледующегоПлатежа(ПравилоРегулярногоПлатежа, ПериодСобытияРегулярногоПлатежа);
	
	Если ЗначениеЗаполнено(ДатаСледующегоПлатежа) И Объект.Дата >= ДатаСледующегоПлатежа Тогда
		
		ТекстВопроса = НСтр(
			"ru = 'Дата документа больше срока следующего платежа.
			|Перейти к редактированию расписания (документ будет записан)?'");
		Оповещение   = Новый ОписаниеОповещения("ВопросРедактированиеПравилаЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
	ПредыдущаяДата = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		
		ОрганизацияПриИзмененииНаСервере();
		
		ЗапуститьПроверкуФоновогоЗадания();
		
		УведомитьПользователяПлатежиВБюджет();
		
		// СПАРК Риски
		ИндексыСПАРКРиски = Неопределено; // Сбросить полученные значения
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьОтображениеИндексыСПАРК", 0.1, Истина);
		// Конец СПАРК Риски
		
	Иначе
		
		УправлениеФормой(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетОрганизацииПриИзменении(Элемент)
	
	УстановитьРеквизитыПлательщикаНаСервере(ПустаяСтрока(Объект.ИННПлательщика));
	
	Если СчетПоГосконтракту Тогда
		УстановитьСчетПолучателя();
		
		Если ЗначениеЗаполнено(Объект.СчетКонтрагента) Тогда
			СчетКонтрагентаПриИзмененииНаСервере();
		КонецЕсли;
		
		Объект.ИдентификаторПлатежа = ИдентификаторГосконтактаПоСчету(Объект.СчетОрганизации);
		УправлениеФормой(ЭтотОбъект);
		
	Иначе
		
		УправлениеФормой(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НалогПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Налог) Тогда
		Объект.ПоказательПериода = "";
		АктуализированыРеквизитыПлатежаВБюджет = Ложь;
		НалогПриИзмененииНаСервере(АктуализированыРеквизитыПлатежаВБюджет, СтрокаПоискаПоКБК);
		
		Если АктуализированыРеквизитыПлатежаВБюджет Тогда
			ПоказатьОповещениеПользователя(НСтр("ru = 'Коды бюджетной классификации успешно обновлены'"),
				"e1cib/data/Справочник.ВидыНалоговИПлатежейВБюджет.Форма.ФормаСписка",
				НСтр("ru = 'Налоги и взносы'"),
				БиблиотекаКартинок.Информация32);
		КонецЕсли;
		
		ЗапуститьПроверкуФоновогоЗадания();
		
		УведомитьПользователяПлатежиВБюджет();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НалогАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если СтрДлина(Текст) > 13 Тогда
		
		СтрокаПоискаПоКБК = СтрЗаменить(ПараметрыПолученияДанных.СтрокаПоиска, " ", "");
		
		Если СтрДлина(СтрокаПоискаПоКБК) <= 20 И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаПоискаПоКБК) Тогда
			
			// Строка поиска похожа на КБК. Код включает код подвида доходов.
			ДанныеВыбора = ДанныеВыбораНалогаПоКБК(СтрокаПоискаПоКБК);
			
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НалогОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если СтрДлина(Текст) > 13 Тогда
		
		СтрокаПоискаПоКБК = СтрЗаменить(ПараметрыПолученияДанных.СтрокаПоиска, " ", "");
		
		Если СтрДлина(СтрокаПоискаПоКБК) <= 20 И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаПоискаПоКБК) Тогда
			
			// Строка поиска похожа на КБК. Код включает код подвида доходов.
			ДанныеВыбора = ДанныеВыбораНалогаПоКБК(СтрокаПоискаПоКБК);
			
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВидНалоговогоОбязательстваПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Налог) И ЗначениеЗаполнено(Объект.ВидНалоговогоОбязательства) Тогда
		
		ВидаНалоговогоОбязательстваОбработатьИзменение(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НалогоплательщикПриИзменении(Элемент)
	
	НалогоплательщикПриИзмененииНеСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииНаСервере(Истина, Истина);
	
	ЗапуститьПроверкуФоновогоЗадания();
	
	УведомитьПользователяПлатежиВБюджет();
	
	// Если пользователь не изменил вид операции, но выбрал государственный орган,
	// то предложим ему изменить вид операции
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику") 
		И ЭтоГосударственныйОрганУплатыНалога(Объект.Контрагент) Тогда
		
		ТекстВопроса = СтрШаблон(НСтр("ru='Получатель ""%1"" является государственным органом.
			|
			|Изменить вид операции на ""Уплата налога""?'"), Объект.Контрагент);
			
		КнопкиОтвета = Новый СписокЗначений;
		КнопкиОтвета.Добавить(КодВозвратаДиалога.Да, "Да, это уплата налога");
		КнопкиОтвета.Добавить(КодВозвратаДиалога.Отмена, "Нет, это другой платеж");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросЭтоУплатаНалогаЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, КнопкиОтвета);
		
	КонецЕсли;
	
	// СПАРК Риски
	ИндексыСПАРКРиски = Неопределено; // Сбросить полученные значения
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьОтображениеИндексыСПАРК", 0.1, Истина);
	// Конец СПАРК Риски
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетКонтрагентаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СчетКонтрагента) Тогда
		
		СчетКонтрагентаПриИзмененииНаСервере(ПустаяСтрока(Объект.ИННПолучателя));
		
		ЗапуститьПроверкуФоновогоЗадания();
		
		УведомитьПользователяПлатежиВБюджет();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	ДоговорПриИзмененииНаСервере(Ложь);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура БанкАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура БанкОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура БанкОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьРеквизитыПолучателяНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОчиститьСообщения();
	ЕстьОшибки = Ложь;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет") Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Поле", "Заполнение", НСтр("ru = 'Организация'"));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Организация", "Объект", ЕстьОшибки);
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Получатель'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Контрагент", "Объект", ЕстьОшибки);
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.СчетКонтрагента) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Счет получателя'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "СчетКонтрагента", "Объект", ЕстьОшибки);
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЭтоПлательщик",  Ложь);
	СтруктураПараметров.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	СтруктураПараметров.Вставить("Объект",         Объект);
	
	ОткрытьФорму("Документ.ПлатежноеПоручение.Форма.РеквизитыПлательщикаПолучателя", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	Объект.СуммаНДС = ПересчитатьСуммуНДС(Объект.СуммаДокумента, Объект.СтавкаНДС);
	
	Если Объект.СуммаПроцентов > Объект.СуммаДокумента Тогда
		Объект.СуммаПроцентов = Объект.СуммаДокумента;
	КонецЕсли;
	
	СформироватьНазначениеПлатежаНаСервере(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	
	Объект.СуммаНДС = ПересчитатьСуммуНДС(Объект.СуммаДокумента, Объект.СтавкаНДС);
	СформироватьНазначениеПлатежаНаСервере(Истина);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаНДСПриИзменении(Элемент)
	
	СформироватьНазначениеПлатежаНаСервере(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьРеквизитыПлатежейВБюджетНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОчиститьСообщения();
	ЕстьОшибки = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Организация'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Организация", "Объект", ЕстьОшибки);
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуРедактированияРеквизитовПлатежаВБюджет();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияРеквизитовПлатежаВБюджет(ИсправитьОшибки = Ложь, АдресОшибок = "")
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаРедактированияРеквизитовПлатежаВБюджетЗавершение", ЭтотОбъект);
	
	РеквизитыПлатежаВБюджет = ПлатежиВБюджетКлиентСервер.НовыйРеквизитыПлатежаВБюджет();
	
	// Заполним показатели
	Для каждого ОписаниеРеквизита Из ПлатежиВБюджетКлиентСерверПереопределяемый.РеквизитыДокумента_ПлатежноеПоручение() Цикл
		РеквизитыПлатежаВБюджет[ОписаниеРеквизита.Ключ] = Объект[ОписаниеРеквизита.Значение];
	КонецЦикла;
	
	// Заполним контекст
	СвойстваКонтекста = Новый Структура;
	СвойстваКонтекста.Вставить("Период",                     Объект.Дата);
	СвойстваКонтекста.Вставить("Организация",                Объект.Организация);
	СвойстваКонтекста.Вставить("Налогоплательщик",           Объект.Налогоплательщик);
	СвойстваКонтекста.Вставить("СчетПолучателя",             Объект.СчетКонтрагента);
	СвойстваКонтекста.Вставить("Налог",                      Объект.Налог);
	СвойстваКонтекста.Вставить("ВидНалоговогоОбязательства", Объект.ВидНалоговогоОбязательства);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Реквизиты",                РеквизитыПлатежаВБюджет);
	ПараметрыФормы.Вставить("СвойстваКонтекста",        СвойстваКонтекста);
	ПараметрыФормы.Вставить("ТолькоПросмотр",           ТолькоПросмотр);
	ПараметрыФормы.Вставить("ИсправитьОшибки",          ИсправитьОшибки);
	ПараметрыФормы.Вставить("АдресИнформацииОбОшибках", АдресОшибок);
	ПараметрыФормы.Вставить("Ссылка",                   Объект.Ссылка);
	ПараметрыФормы.Вставить("ПеречислениеВБюджет",      Объект.ПеречислениеВБюджет);
	ПараметрыФормы.Вставить("УплатаНалога",
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц"));
	ПараметрыФормы.Вставить("СчетПоГосконтракту",       СчетПоГосконтракту);
	
	ОткрытьФорму(
		"ОбщаяФорма.РеквизитыПлатежаВБюджет",
		ПараметрыФормы,
		ЭтотОбъект,
		,
		,
		,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначениеПлатежаПриИзменении(Элемент)
	
	Если ПустаяСтрока(Объект.НазначениеПлатежа) Тогда
		НазначениеПлатежаБылоИзмененоВручную = Ложь;
	Иначе
		НазначениеПлатежаБылоИзмененоВручную = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчередностьПлатежаПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСледующийПлатежНажатие(Элемент, СтандартнаяОбработка)
	
	Если Объект.Организация.Пустая() Тогда
		// Организация, по которой создается регулярный платеж, задается в форме документа и не может быть пустой.
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Организация'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Организация", "Объект");
	
	ИначеЕсли Объект.Ссылка.Пустая()  Тогда
		// Если редактируем правило по новому документу - запишем документ
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
				|Выполнение команды ""Расписание повторения платежа"" возможно только после записи данных.
				|Данные будут записаны.'");
					
		Оповещение = Новый ОписаниеОповещения("ВопросРедактированиеПравилаЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, ТекстВопроса);
		
	Иначе
		
		ОткрытьПравилоРегулярногоПлатежа();
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетКонтрагентаExtendedTooltipОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "e1cib/app/Документ.ПлатежноеПоручение.Форма.ФормаПроверкиПлатежныхРеквизитов" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ПлатежныеРеквизиты", ПлатежныеРеквизиты());
		ПараметрыФормы.Вставить("Контрагент", Объект.Контрагент);
		ОписаниеОповещения = Новый ОписаниеОповещения("СчетКонтрагентаExtendedTooltipОбработкаНавигационнойСсылкиЗавершение", ЭтотОбъект);
		ОткрытьФорму("Документ.ПлатежноеПоручение.Форма.ФормаПроверкиПлатежныхРеквизитов",
			ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор,,, ОписаниеОповещения);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "e1cib/app/Обработка.ИнтернетПоддержкаПользователей.Форма.ОбщаяАвторизация" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьПлатежныеРеквизиты", ЭтотОбъект);
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетКонтрагентаExtendedTooltipОбработкаНавигационнойСсылкиЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если ТипЗнч(РезультатВыполнения) = Тип("Структура") И РезультатВыполнения.Свойство("ПерезаполнитьКонтрагента") Тогда
		
		УстановитьКонтрагентаНаСервере(РезультатВыполнения.Контрагент, РезультатВыполнения.СчетКонтрагента);
		
	КонецЕсли;
	
	ЗапуститьПроверкуФоновогоЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежнаяВедомостьОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
		Элемент = ПредопределенноеЗначение("Документ.ВедомостьНаВыплатуЗарплаты.ПустаяСсылка");
	Иначе
		Элемент = ПредопределенноеЗначение("Документ.ВедомостьНаВыплатуЗарплатыВКассу.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежнаяВедомостьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация",  Объект.Организация);
		ПараметрыФормы.Вставить("ВидМестаВыплаты", ПредопределенноеЗначение("Перечисление.ВидыМестВыплатыЗарплаты.БанковскийСчет"));
		ОткрытьФорму("Документ.ВедомостьНаВыплатуЗарплаты.ФормаВыбора",
			Новый Структура("ПараметрыОтбораСписка, ТекущаяСтрока", ПараметрыФормы, Объект.ПлатежнаяВедомость), Элемент);
		
	Иначе
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация", Объект.Организация);
		ОткрытьФорму("Документ.ВедомостьНаВыплатуЗарплатыВБанк.ФормаВыбора",
			Новый Структура("Отбор, ТекущаяСтрока", ПараметрыФормы, Объект.ПлатежнаяВедомость), Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежнаяВедомостьПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Контрагент) И ЗначениеЗаполнено(Объект.ПлатежнаяВедомость) Тогда
		Объект.СуммаДокумента = СуммаВыплаченнойЗарплатыРаботнику(
			Объект.Ссылка, Объект.Контрагент, Объект.ПлатежнаяВедомость, УчетЗарплатыИКадровВоВнешнейПрограмме);
	Иначе
		Объект.СуммаДокумента = 0;
	КонецЕсли;
	ПлатежнаяВедомостьПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеНаЛичныйСчетПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
	Если ПеречислениеНаЛичныйСчет Тогда
		Объект.Банк = "";
	КонецЕсли;
	
	КонтрагентПриИзмененииНаСервере(Ложь);
	ЗапуститьПроверкуФоновогоЗадания();
	УведомитьПользователяПлатежиВБюджет();
	
КонецПроцедуры

&НаКлиенте
Процедура БанкПриИзменении(Элемент)
	
	КонтрагентПриИзмененииНаСервере();
	
	ЗапуститьПроверкуФоновогоЗадания();
	
	УведомитьПользователяПлатежиВБюджет();
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыОрганизацииСсылкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ПроверкаРеквизитовОрганизацииКлиент.РеквизитыОрганизацииСсылкаОбработкаНавигационнойСсылки(Объект.Организация, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаПроцентовПриИзменении(Элемент)
	
	Если Объект.СуммаПроцентов > Объект.СуммаДокумента Тогда
		Объект.СуммаПроцентов = Объект.СуммаДокумента;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ПараметрыДоговора = Новый Структура;
	ПараметрыДоговора.Вставить("Организация", Объект.Организация);
	ПараметрыДоговора.Вставить("Владелец", Объект.Контрагент);
	ПараметрыДоговора.Вставить("ВидДоговора", ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
	
	РаботаСДоговорамиКонтрагентовБПКлиент.ДоговорОбработкаВыбора(Элемент, ВыбранноеЗначение, ПараметрыДоговора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСДоговорамиКонтрагентовБПКлиент.ЗаполнитьСписокВыбора(Элемент, Текст, ПредлагатьНовыйДоговор, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Информация1СПАРКОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СПАРКРискиКлиент.ОбработкаНавигационнойСсылки(ЭтотОбъект, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРЕДУПРЕЖДЕНИЕ ОБ ИЗМЕНЕНИЯХ ПРАВИЛ ПЛАТЕЖЕЙ В БЮДЖЕТ

&НаКлиенте
Функция ЕстьОшибкиЗаполненияПлатежаВБюджет()
	
	Возврат ЗначениеЗаполнено(АдресОшибок);
	
КонецФункции

&НаСервере
Функция НайтиОшибкиПлатежаВБюджет(Знач ПредыдущаяДата = '0001-01-01')
	
	АдресОшибок = ""; // Устанавливает реквизит формы
	
	Если НЕ Объект.ПеречислениеВБюджет Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПлатежиВБюджетКлиентСервер.ДействуетПриказ107н(ПредыдущаяДата) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПлатежиВБюджетКлиентСервер.ДействуетПриказ107н(Объект.Дата) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Ошибки = Документы.ПлатежноеПоручение.ПроверитьЗаполнениеРеквизитовДляПеречисленияВБюджет(Объект, Ложь);
	Если Ошибки.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	АдресОшибок = ПоместитьВоВременноеХранилище(Ошибки, УникальныйИдентификатор);
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВопросИсправитьОшибкиПлатежаВБюджетЗавершение(РезультатВопроса, АдресОшибок) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		// Исправить прямо сейчас
		ОткрытьФормуРедактированияРеквизитовПлатежаВБюджет(Истина);
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Пропустить Тогда
		// Показать ошибки
		ОткрытьФормуРедактированияРеквизитовПлатежаВБюджет(Ложь, АдресОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УведомитьПользователяПлатежиВБюджет()
	
	Если ЕстьОшибкиЗаполненияПлатежаВБюджет() Тогда
		
		ИсправитьОшибкиПлатежаВБюджет();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсправитьОшибкиПлатежаВБюджет()
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'С %1 применяются новые правила заполнения платежных поручений в бюджет.
			|
			|Это платежное поручение не соответствует новым правилам.
			|
			|Исправить реквизиты платежа в бюджет сейчас?'"),
		Формат(ПлатежиВБюджетКлиентСервер.НачалоДействияПриказа107н(), "ДЛФ=DD"));
		
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.Да,         НСтр("ru = 'Да, исправить сейчас'"));
	Кнопки.Добавить(КодВозвратаДиалога.Нет,        НСтр("ru = 'Нет, исправить позже'"));
	Кнопки.Добавить(КодВозвратаДиалога.Пропустить, НСтр("ru = 'Показать ошибки'"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВопросИсправитьОшибкиПлатежаВБюджетЗавершение", ЭтотОбъект, АдресОшибок);
	
	АдресОшибок = ""; // Очищаем значение реквизита формы. До следующего вызова НайтиОшибкиПлатежаВБюджет не используем реквизит формы.
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки,, Кнопки[0].Значение);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	ПараметрыЗаписи.Вставить("Закрыть",     Истина);
	
	Если Записать(ПараметрыЗаписи) Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДосьеКонтрагента(Команда)
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ПараметрыФормы = Новый Структура("Контрагент", Объект.Контрагент);
		ОткрытьФорму("Отчет.ДосьеКонтрагента.Форма", ПараметрыФормы);
	Иначе
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,,НСтр("ru = 'Получатель'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Объект.Контрагент");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеПлатежиВБюджет(Команда)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("РежимВыбора", Истина);
	
	СписокОрганизаций   = Новый СписокЗначений;
	СписокОрганизаций.Добавить(Объект.Организация);
	СписокОрганизаций.Добавить(ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
	
	СтруктураОтбора     = Новый Структура("Организация", СписокОрганизаций);
	СтруктураПараметров.Вставить("Отбор", СтруктураОтбора);
	
	ОткрытьФорму("РегистрСведений.РеквизитыУплатыНалоговИПлатежейВБюджет.Форма.ФормаВыбора", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПлатежногоПоручения(Команда)
	
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.СчетОрганизации) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Банковский счет'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "СчетОрганизации", "Объект", Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СчетКонтрагента) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Счет получателя'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "СчетКонтрагента", "Объект", Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// См. Документы.ПлатежноеПоручение.НовыеПараметрыНазначенияПлатежа();
	ПараметрыНазначенияПлатежа = Новый Структура(
		"Организация, Налогоплательщик, Дата, ВидОперации,
		|Налог, ВидНалоговогоОбязательства,
		|Контрагент, ПеречислениеВБюджет, ПлатежнаяВедомость,
		|СчетКонтрагента, ДоговорКонтрагента, КПППлательщика, КодБК, ДокументОснование, ПоказательПериода");
	ЗаполнитьЗначенияСвойств(ПараметрыНазначенияПлатежа, Объект);
	
	АвтоТекстНазначения = АвтоТекстНазначенияПлатежа(ПараметрыНазначенияПлатежа, ШаблонНазначенияПлатежаВБюджет);
	
	ПараметрыФормы = Новый Структура(
		"БанковскийСчетОрганизации, БанковскийСчетКонтрагента, АвтоТекстНазначения, ОткрытИзПлатежки",
		Объект.СчетОрганизации, Объект.СчетКонтрагента, АвтоТекстНазначения, Истина);
	
	ОткрытьФорму("ОбщаяФорма.НастройкиПлатежныхПорученийТребований", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)
	
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтотОбъект,
		Команда
	);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ОбработатьИзмененияВОрганизацииНаСервере()
	
	ИспользоватьНесколькоБанковскихСчетовОрганизации =
		Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Объект.Организация);
	
	ОсновнойБанковскийСчетОрганизацииЗаполнен =
		ПроверкаРеквизитовОрганизации.ОсновнойБанковскийСчетОрганизацииЗаполнен(Объект.Организация);

	Элементы.ПредупреждениеОЗаполненииРеквизитовСчета.Видимость =
		ПроверкаРеквизитовОрганизацииКлиентСервер.ПоказатьПредупреждениеОРеквизитахСчета(ЭтотОбъект, Объект.Организация);
		
	Если НЕ ИспользоватьНесколькоБанковскихСчетовОрганизации И ОсновнойБанковскийСчетОрганизацииЗаполнен И Не ЗначениеЗаполнено(Объект.СчетОрганизации) Тогда
		Объект.СчетОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "ОсновнойБанковскийСчет");
	КонецЕсли;
		
	УстановитьРеквизитыПлательщикаНаСервере(Истина);

КонецПроцедуры

// Работа с регулярными платежами
&НаСервереБезКонтекста
Функция ДатаСледующегоПлатежа(ПравилоРегулярногоПлатежа, ПериодСобытия)
	
	Если ЗначениеЗаполнено(ПравилоРегулярногоПлатежа) 
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПравилоРегулярногоПлатежа, "Выполняется") Тогда
		
		Возврат Справочники.ПравилаРегулярныхПлатежей.ДатаБлижайшегоПлатежа(ПравилоРегулярногоПлатежа, ПериодСобытия);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ИзменитьПлатежныеРеквизитыПриИзмененииДаты(РеквизитыПерезаполнены, ИзменилсяМесяц)
	
	Если НЕ РеквизитыПерезаполнены Тогда
		Документы.ПлатежноеПоручение.ИзменитьПлатежныеРеквизитыПриИзмененииДаты(Объект, ПредыдущаяДата);
		
		НадписьРеквизитыПлательщика = УстановитьНадписьРеквизитыПлательщика(ЭтотОбъект);
		НадписьРеквизитыПолучателя  = УстановитьНадписьРеквизитыПолучателя(ЭтотОбъект);
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
	Если ИзменилсяМесяц Тогда
		ЗаполнитьВидНалоговогоОбязательстваНаСервере(ЭтотОбъект);
	КонецЕсли;
	
	ДлительнаяОперацияПроверкиПлатежныхРеквизитов = ПроверитьПлатежныеРеквизитыВФоне();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПравилоРегулярногоПлатежаНаСервере(ПлатежноеПоручение)
	
	ЗаписьПоПлатежномуПоручению = РегистрыСведений.РегулярныеПлатежи.ЗаписьПравилаПоПлатежномуПоручению(ПлатежноеПоручение);
	
	Если ЗаписьПоПлатежномуПоручению <> Неопределено Тогда
		ПравилоРегулярногоПлатежа       = ЗаписьПоПлатежномуПоручению.Правило;
		ПериодСобытияРегулярногоПлатежа = ЗаписьПоПлатежномуПоручению.ПериодСобытия;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбновитьЗадачиБухгалтераНаСервере(Организация, УникальныйИдентификаторФормы)
	
	// Обеспечиваем актуальность в дальнейшем.
	КалендарьБухгалтера.ЗапланироватьОбновлениеЗадачБухгалтера();
	
	РезультатВыполнения = КалендарьБухгалтера.ЗапуститьЗаполнениеВФоне(УникальныйИдентификаторФормы, Организация, Ложь, Ложь, Истина);
	Возврат РезультатВыполнения;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьЗадачиБухгалтераЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	Если ЗначениеЗаполнено(Результат) И Результат Тогда
		
		ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.ЗадачиБухгалтера"));
		Оповестить("ПериодическиеПлатежи_Изменение");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗадачиБухгалтера()
	
	ДлительнаяОперация = ОбновитьЗадачиБухгалтераНаСервере(Объект.Организация, УникальныйИдентификатор);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбновитьЗадачиБухгалтераЗавершение", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПравилоРегулярногоПлатежа()
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРегулярныхПлатежей = Новый Структура;
	ПараметрыРегулярныхПлатежей.Вставить("ДатаДокумента", Объект.Дата);
	ПараметрыРегулярныхПлатежей.Вставить("ПериодСобытия", ПериодСобытияРегулярногоПлатежа);
	
	Если ЗначениеЗаполнено(ПравилоРегулярногоПлатежа) Тогда
		
		ПараметрыРегулярныхПлатежей.Вставить("Ключ", ПравилоРегулярногоПлатежа);
		
	Иначе
		ЗначенияЗаполнения = Новый Структура;
		
		ЗначенияЗаполнения.Вставить("Организация",      Объект.Организация);
		ЗначенияЗаполнения.Вставить("Периодичность",    ПредопределенноеЗначение("Перечисление.Периодичность.Месяц"));
		ЗначенияЗаполнения.Вставить("НачалоВыполнения", ДобавитьМесяц(Объект.Дата, 1));
		ЗначенияЗаполнения.Вставить("Выполняется",      Истина);
		
		ПараметрыРегулярныхПлатежей.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		
	КонецЕсли;
	
	ОткрытьФорму("Справочник.ПравилаРегулярныхПлатежей.ФормаОбъекта", ПараметрыРегулярныхПлатежей, ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УстановитьПравилоПоДокументу(Организация, ПлатежноеПоручение, ПравилоРегулярногоПлатежа, ПериодСобытияРегулярногоПлатежа)
	
	Возврат РегистрыСведений.РегулярныеПлатежи.ДобавитьЗаписьПравила(Организация, ПлатежноеПоручение, ПравилоРегулярногоПлатежа, ПериодСобытияРегулярногоПлатежа);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НадписьСледующийПлатеж(ПравилоРегулярногоПлатежа, ПериодСобытияРегулярногоПлатежа)
	
	ДатаСледующегоПлатежа = ДатаСледующегоПлатежа(ПравилоРегулярногоПлатежа, ПериодСобытияРегулярногоПлатежа);
	
	Если ЗначениеЗаполнено(ДатаСледующегоПлатежа) Тогда
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Следующий платеж %1'"),
			Формат(ДатаСледующегоПлатежа, "ДЛФ=D"));
	
	Иначе
		
		Возврат НСтр("ru = 'Повторять платеж?'");
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы(ЭтотОбъект);
	
	// Установка реквизитов формы
	ВалютаРегламентированногоУчета        = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	УчетЗарплатыИКадровВоВнешнейПрограмме = ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме");
	ВедетсяУчетРасчетовПоЗарплатеСводно   = ПолучитьФункциональнуюОпцию("ВедетсяУчетРасчетовПоЗарплатеСводно");
	ВидОперацииДоИзменения                = Объект.ВидОперации;
	ЕстьПравоПросмотраДосье               = ПравоДоступа("Просмотр", Метаданные.Отчеты.ДосьеКонтрагента);
	ОсновнойБанковскийСчетОрганизацииЗаполнен = ПроверкаРеквизитовОрганизации.ОсновнойБанковскийСчетОрганизацииЗаполнен(Объект.Организация);
	
	ПредыдущаяДата = Объект.Дата;
	
	ВидыПеречисленийВБюджет = Новый Структура;
	Для каждого ЗначениеПеречисления Из Метаданные.Перечисления.ВидыПеречисленийВБюджет.ЗначенияПеречисления Цикл
		ВидыПеречисленийВБюджет.Вставить(ЗначениеПеречисления.Имя, Перечисления.ВидыПеречисленийВБюджет[ЗначениеПеречисления.Имя]);
	КонецЦикла;
	
	ПлатежГосОргану  = УчетДенежныхСредствБП.ПлатежГосОргану(Объект.ВидОперации, Объект.Контрагент);
	ПереводМеждуСчетами = Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет;
	ПеречислениеФизическомуЛицу = УчетДенежныхСредствКлиентСервер.РасчетыСФизическимиЛицами(Объект.ВидОперации)
		И Объект.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ЛичныеСредстваПредпринимателя;
	ПеречислениеНаЛичныйСчет = ПеречислениеФизическомуЛицу И НЕ ЗначениеЗаполнено(Объект.Банк);
	УплатаНалогаЗаТретьихЛиц = Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц;
	
	АвтоЗначенияРеквизитов = УчетДенежныхСредствБП.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
		?(УплатаНалогаЗаТретьихЛиц, Объект.Налогоплательщик, Объект.Организация),
		Объект.СчетОрганизации,
		?(ПереводМеждуСчетами, Объект.Организация, ?(ПеречислениеФизическомуЛицу И НЕ ПеречислениеНаЛичныйСчет, Объект.Банк, Объект.Контрагент)),
		Объект.СчетКонтрагента,
		ПлатежГосОргану,
		Объект.Дата);
	
	ПараметрыНазначенияПлатежа = Документы.ПлатежноеПоручение.НовыеПараметрыНазначенияПлатежа();
	ЗаполнитьЗначенияСвойств(ПараметрыНазначенияПлатежа, Объект);
	ТекстНазначенияАвто = АвтоТекстНазначенияПлатежа(ПараметрыНазначенияПлатежа, ШаблонНазначенияПлатежаВБюджет);
	
	АвтоЗначенияРеквизитов.Вставить("ТекстНазначенияПлатежа", ТекстНазначенияАвто);
	НазначениеПлатежаБылоИзмененоВручную = Документы.ПлатежноеПоручение.НазначениеПлатежаИзмененоВручную(
		Объект.НазначениеПлатежа, ТекстНазначенияАвто);
	
	ОпределитьЮрФизЛицо();
	НадписьРеквизитыПлательщика     = УстановитьНадписьРеквизитыПлательщика(ЭтотОбъект);
	НадписьРеквизитыПолучателя      = УстановитьНадписьРеквизитыПолучателя(ЭтотОбъект);
	НадписьРеквизитыПлатежейВБюджет = НадписьРеквизитыПлатежейВБюджет(ЭтотОбъект);
	НадписьСледующийПлатеж          = НадписьСледующийПлатеж(ПравилоРегулярногоПлатежа, ПериодСобытияРегулярногоПлатежа);
	
	ДокументСписания = Документы.ПлатежноеПоручение.НайтиДокументСписания(Объект.Ссылка, Объект.ДокументОснование, НадписьДокументСписания);
	
	ПараметрыДляСчетов = Новый Массив;
	ПараметрыДляСчетов.Добавить(Новый ПараметрВыбора("Отбор.ВалютаДенежныхСредств", ВалютаРегламентированногоУчета));
	
	Элементы.СчетОрганизации.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыДляСчетов);
	Элементы.СчетКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыДляСчетов);
	
	УстановитьОграничениеТипаКонтрагента(ЭтотОбъект);
	УстановитьВладельцаСчетаКонтрагента(ЭтотОбъект);
	УстановитьПараметрыВыбораБанковскихСчетов(ЭтотОбъект);
	УстановитьПараметрыВыбораДоговораСКонтрагентом(ЭтотОбъект);
	УстановитьСостояниеДокумента();
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам") Тогда
		ПредлагатьНовыйДоговор = РаботаСДоговорамиКонтрагентовБП.ПредлагатьНовыйДоговор(Объект.Организация, Объект.Контрагент);
	КонецЕсли;
	
	ЗаполнитьВидНалоговогоОбязательстваНаСервере(ЭтотОбъект, Истина);
	
	Состояние = ПолучитьСостояниеОбмена(Объект.Ссылка);
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	ЦветаСПАРК = ИнтернетПоддержкаПользователейБП.ЦветаСПАРК();
	
	ИндексыСПАРКРиски = Неопределено; // Сбросить полученные значения
	ПоказатьИндексыСПАРК = ПоказатьИнформациюСпарк(ЭтотОбъект);
	Если ПоказатьИндексыСПАРК Тогда
		
		ПараметрыПроцедуры = Новый Структура;
		ПараметрыПроцедуры.Вставить("ОбъектМетаданных", "Документ.ПлатежноеПоручение");
		СПАРКРиски.ПриСозданииНаСервере(
			ЭтотОбъект,
			Неопределено,
			Объект.Контрагент,
			ПараметрыПроцедуры);
		
	Иначе
		
		Элементы.Группа1СПАРК.Видимость = Ложь;
		
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	ПеречислениеЗарплаты        = Ложь;
	ПереводМеждуСчетами         = Ложь;
	ПеречислениеКонтрагенту     = Ложь;
	ПеречислениеКредитаЗайма    = Ложь;
	УплатаНалога                = Ложь;
	УплатаНалогаЗаТретьихЛиц    = Ложь;
	
	Элементы.ПредупреждениеОЗаполненииРеквизитовСчета.Видимость = ПроверкаРеквизитовОрганизацииКлиентСервер.ПоказатьПредупреждениеОРеквизитахСчета(Форма, Объект.Организация);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога") Тогда
		УплатаНалога = Истина;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц") Тогда
		УплатаНалогаЗаТретьихЛиц = Истина;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ЛичныеСредстваПредпринимателя") Тогда
		ПереводМеждуСчетами = Истина;
	ИначеЕсли УчетДенежныхСредствКлиентСервер.РасчетыСФизическимиЛицами(Объект.ВидОперации) Тогда
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику") Тогда
			Если Форма.УчетЗарплатыИКадровВоВнешнейПрограмме И Форма.ВедетсяУчетРасчетовПоЗарплатеСводно Тогда
				ПеречислениеЗарплаты = Ложь;
			Иначе
				ПеречислениеЗарплаты = Истина;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗайма")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВозвратКредита")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаКонтрагенту") 
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам") Тогда
		ПеречислениеКонтрагенту     = Истина;
		ПеречислениеКредитаЗайма    = Истина;
	ИначеЕсли Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП")
		И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание") Тогда
		ПеречислениеКонтрагенту = Истина;
	КонецЕсли;
	
	Элементы.ПеречислениеНаЛичныйСчет.Видимость = Форма.ПеречислениеФизическомуЛицу;
	Элементы.Банк.Видимость                     = Форма.ПеречислениеФизическомуЛицу И НЕ Форма.ПеречислениеНаЛичныйСчет;
	Если Форма.ПеречислениеФизическомуЛицу Тогда
		Элементы.Контрагент.Заголовок = НСтр("ru = 'Сотрудник'");
	Иначе
		Элементы.Контрагент.Заголовок = НСтр("ru = 'Получатель'");
	КонецЕсли;
	
	Элементы.ПлатежнаяВедомость.Видимость   = ПеречислениеЗарплаты;
	Элементы.Контрагент.Доступность         = НЕ ПереводМеждуСчетами;
	Элементы.СчетКонтрагента.Доступность    = ПереводМеждуСчетами
		ИЛИ НЕ Форма.ПеречислениеФизическомуЛицу И ЗначениеЗаполнено(Объект.Контрагент)
		ИЛИ (Форма.ПеречислениеФизическомуЛицу И НЕ Форма.ПеречислениеНаЛичныйСчет И ЗначениеЗаполнено(Объект.Банк)
			ИЛИ Форма.ПеречислениеНаЛичныйСчет И ЗначениеЗаполнено(Объект.Контрагент));
	
	Элементы.ДоговорКонтрагента.Видимость   = ПеречислениеКонтрагенту;
	Элементы.ДоговорКонтрагента.Доступность = ЗначениеЗаполнено(Объект.Контрагент);
	
	Элементы.СуммаПроцентов.Видимость       = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗайма")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВозвратКредита");
	Элементы.СтавкаНДС.Видимость            = ПеречислениеКонтрагенту И НЕ ПеречислениеКредитаЗайма;
	Элементы.СуммаНДС.Видимость             = ПеречислениеКонтрагенту И НЕ ПеречислениеКредитаЗайма;
	Элементы.СуммаНДС.Доступность           = Объект.СтавкаНДС <> ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС")
		И Объект.СтавкаНДС <> ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС0") И ПеречислениеКонтрагенту И НЕ ПеречислениеКредитаЗайма;
	
	Элементы.ГруппаПеречислениеНалога.Видимость = УплатаНалога;
	Элементы.ВидНалоговогоОбязательства.Доступность = ЗначениеЗаполнено(Объект.Налог);
	
	Элементы.ГруппаПеречислениеНалогаЗаТретьихЛиц.Видимость = УплатаНалогаЗаТретьихЛиц;
	
	Элементы.ГруппаРеквизитыПлатежейВБюджет.Видимость = Форма.ПлатежГосОргану;
	
	Элементы.ИдентификаторПлатежа.Видимость = ПеречислениеКонтрагенту И НЕ Форма.ПлатежГосОргану ИЛИ Форма.СчетПоГосконтракту;
	Если Объект.Дата >= ПлатежиВБюджетКлиентСервер.НачалоПримененияИдентификатораПлатежа() Тогда
		Элементы.ИдентификаторПлатежа.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Авто;
		Элементы.ИдентификаторПлатежа.ПредупреждениеПриРедактировании            = "";
	Иначе
		Элементы.ИдентификаторПлатежа.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Отображать;
		Элементы.ИдентификаторПлатежа.ПредупреждениеПриРедактировании            =
			НСтр("ru = 'До 31.03.2014 идентификатор платежа используется только для платежей в бюджет'");
	КонецЕсли;
	
	// Отображение кнопки "Досье".
	Если Форма.ЕстьПравоПросмотраДосье И ПеречислениеКонтрагенту И НЕ ПеречислениеКредитаЗайма Тогда
		Элементы.ДосьеКонтрагента.Видимость = Истина;
		Элементы.Контрагент.Ширина = 33;
		Элементы.Контрагент.РастягиватьПоГоризонтали = Ложь;
	Иначе
		Элементы.ДосьеКонтрагента.Видимость = Ложь;
		Элементы.Контрагент.Ширина = 0;
		Элементы.Контрагент.РастягиватьПоГоризонтали = Неопределено;
	КонецЕсли;
	
	ОбновитьПодсказкуОчередностьПлатежа(Форма);
	
	УстановитьСвойстваПоляСостояние(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФункциональныеОпцииФормы(Форма)
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПодсказкуОчередностьПлатежа(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Если Объект.ОчередностьПлатежа > 0 Тогда
		Если Объект.ОчередностьПлатежа > Элементы.ОчередностьПлатежа.СписокВыбора.Количество() Тогда
			// Если ОчередностьПлатежа = 6 будут выбирать после вступления в действие 345-Ф, не будем у такого значения отображать подсказку
			Форма.РасшифровкаОчередностиПлатежа = "";
		Иначе
			Форма.РасшифровкаОчередностиПлатежа = Сред(Элементы.ОчередностьПлатежа.СписокВыбора[
				Объект.ОчередностьПлатежа - 1].Представление, 5);
		КонецЕсли;
	Иначе
		Форма.РасшифровкаОчередностиПлатежа = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьЮрФизЛицо()
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияЮрФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "ЮридическоеФизическоеЛицо");
		СчетПоГосконтракту   = ЗначениеЗаполнено(Объект.СчетОрганизации) И
			ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СчетОрганизации, "ГосударственныйКонтракт"));
	Иначе
		ОрганизацияЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		СчетПоГосконтракту   = Ложь;
	КонецЕсли;
	
	Если УчетДенежныхСредствКлиентСервер.РасчетыСФизическимиЛицами(Объект.ВидОперации)
		ИЛИ ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		КонтрагентЮрФизЛицо  = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
		КонтрагентЮрФизЛицо  = ОрганизацияЮрФизЛицо;
	ИначеЕсли ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентЮрФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "ЮридическоеФизическоеЛицо");
	Иначе
		КонтрагентЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьИзменитьКПППлательщика()
	
	Если НЕ ЗначениеЗаполнено(Объект.Налог) ИЛИ ПлатежиВБюджетКлиентСервер.ПлатежАдминистрируетсяНалоговымиОрганами(Объект.КодБК) Тогда
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			СведенияОКонтрагенте = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Контрагент, "ГосударственныйОрган, ВидГосударственногоОргана");
			Если СведенияОКонтрагенте.ГосударственныйОрган 
				И СведенияОКонтрагенте.ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган Тогда
				
				РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.НайтиРегистрациюВНалоговомОргане(Объект.Организация, Объект.Контрагент);
				Если ЗначениеЗаполнено(РегистрацияВНалоговомОргане) Тогда
					Объект.КПППлательщика = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РегистрацияВНалоговомОргане, "КПП");
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеКПППлательщика()
	
	Если НЕ ЗначениеЗаполнено(Объект.Налог) ИЛИ ПлатежиВБюджетКлиентСервер.ПлатежАдминистрируетсяНалоговымиОрганами(Объект.КодБК) Тогда
		РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.НайтиПоКПП(Объект.Организация, Объект.КПППлательщика);
		Если ЗначениеЗаполнено(РегистрацияВНалоговомОргане) Тогда
			РеквизитыГосОргана = ДанныеГосударственныхОрганов.ГосударственныйОрган(
				Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган, РегистрацияВНалоговомОргане.Код);
			Если ЗначениеЗаполнено(РеквизитыГосОргана.Ссылка) И Объект.Контрагент <> РеквизитыГосОргана.Ссылка Тогда
				Объект.Контрагент      = РеквизитыГосОргана.Ссылка;
				Объект.СчетКонтрагента = РеквизитыГосОргана.ПлатежныеРеквизиты.БанковскийСчет;
				УстановитьВладельцаСчетаКонтрагента(ЭтотОбъект);
				УстановитьПараметрыВыбораБанковскихСчетов(ЭтотОбъект);
				
				УстановитьРеквизитыПолучателяНаСервере();
				НадписьРеквизитыПолучателя = УстановитьНадписьРеквизитыПолучателя(ЭтотОбъект);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьРеквизитыПлатежаВБюджет(ЭтотОбъект, Истина);
	НадписьРеквизитыПлательщика = УстановитьНадписьРеквизитыПлательщика(ЭтотОбъект);
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ПроверкаРеквизитовПередЗаписьюНаСервере()
	
	Результат = Новый Структура;
	Результат.Вставить("ПредупредитьОбОшибках",        Ложь);
	Результат.Вставить("ПредупредитьДублиУИН",         Ложь);
	Результат.Вставить("ПредупредитьУИНСодержитБуквы", Ложь);
	Результат.Вставить("ИнформацияДублиУИН",           "");
	Результат.Вставить("ИнформацияУИНСодержитБуквы",   "");
	
	// Проверяем все, кроме УИН и выводим перечень ошибок
	Ошибки = Документы.ПлатежноеПоручение.ПроверитьЗаполнениеРеквизитовДляПеречисленияВБюджет(
		Объект, Истина, Ложь, НЕ СчетПоГосконтракту,
		КонтекстПлатежногоДокумента);
	
	// Проверяем дубли УИН
	ДублиУИН = ПлатежиВБюджет.ПроверитьДублиУИН(Объект.ИдентификаторПлатежа, Объект.Ссылка);
	
	
	// Проверяем, что после начала действия формата ГИС ГМП версии 1.16.1, в УИН не в формате 1.15 (с буквами)
	УИНСодержитБуквы = НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Объект.ИдентификаторПлатежа);
	
	Если Ошибки.Количество() > 0 Тогда
		
		// Информацию о дублях УИН выводим среди других ошибок
		Для каждого Ошибка Из ДублиУИН Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Ошибка.Описание, Объект.Ссылка);
		КонецЦикла;
		
		Результат.ПредупредитьОбОшибках = Истина;
		
	ИначеЕсли ДублиУИН.Количество() > 0 Тогда
		
		// Информацию о дублях УИН выводим отдельно
		Результат.ПредупредитьДублиУИН = Истина;
		
		ТекстыСообщений = Новый Массив;
		Для каждого ОписаниеОшибки Из ДублиУИН Цикл
			ТекстыСообщений.Добавить(ОписаниеОшибки.Описание);
		КонецЦикла;
		
		Результат.ИнформацияДублиУИН = СтрСоединить(ТекстыСообщений, Символы.ПС);
		
	ИначеЕсли УИНСодержитБуквы Тогда
		
		Результат.ПредупредитьУИНСодержитБуквы = Истина;
		
		Результат.ИнформацияУИНСодержитБуквы = НСтр("ru = 'Уникальный идентификатор начисления содержит буквы.
			|С 1 октября 2015 г. идентификатор должен содержать только цифры.
			|Буквы допускаются при оплате по старым идентификаторам.'");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция АвтоТекстНазначенияПлатежа(Знач ПараметрыНазначенияПлатежа, ШаблонНазначенияПлатежаВБюджет)
	
	Возврат Документы.ПлатежноеПоручение.ТекстНазначенияПлатежа(ПараметрыНазначенияПлатежа, ШаблонНазначенияПлатежаВБюджет);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПересчитатьСуммуНДС(СуммаДокумента, СтавкаНДС)
	
	ПроцентНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС);
	СуммаНДС   = Окр(СуммаДокумента * ПроцентНДС / (100 + ПроцентНДС), 2);
	
	Возврат СуммаНДС;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция УстановитьНадписьРеквизитыПлательщика(Форма)
	
	Объект = Форма.Объект;
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ПоказатьКПП   = Форма.АвтоЗначенияРеквизитов.ВсегдаУказыватьКПППлательщика ИЛИ НЕ ПустаяСтрока(Объект.КПППлательщика);
		ШаблонНадписи = НСтр("ru = 'ИНН %1%2%3, %4'");
		
		ИндивидуальныйПредприниматель =
			Форма.ОрганизацияЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо");
		КППНетребуется = НЕ ПоказатьКПП И ПустаяСтрока(Объект.КПППлательщика);
		ТекстКПП       = ?(ИндивидуальныйПредприниматель, "", НСтр("ru = ', КПП <не требуется>'"));
		ТекстНадписи   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонНадписи,
			?(ПустаяСтрока(Объект.ИННПлательщика), НСтр("ru = '<не указан>'"), СокрЛП(Объект.ИННПлательщика)),
			?(КППНетребуется, "", НСтр("ru = ', КПП '")),
			?(КППНетребуется, ТекстКПП, СокрЛП(Объект.КПППлательщика)),
			СокрЛП(Объект.ТекстПлательщика));
	Иначе
		ТекстНадписи = "";
	КонецЕсли;
	
	Возврат ТекстНадписи;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция УстановитьНадписьРеквизитыПолучателя(Форма)
	
	Объект = Форма.Объект;
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ПоказатьКПП    = Форма.АвтоЗначенияРеквизитов.ВсегдаУказыватьКПППолучателя ИЛИ НЕ ПустаяСтрока(Объект.КПППолучателя);
		ШаблонНадписи  = НСтр("ru = 'ИНН %1%2%3, %4'");
		
		ФизЛицо = Форма.КонтрагентЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо");
		КППНетребуется = НЕ ПоказатьКПП И ПустаяСтрока(Объект.КПППолучателя);
		ТекстКПП       = ?(ФизЛицо, "", НСтр("ru = ', КПП <не требуется>'"));
		ТекстНадписи   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонНадписи,
			?(ПустаяСтрока(Объект.ИННПолучателя), НСтр("ru = '<не указан>'"), СокрЛП(Объект.ИННПолучателя)),
			?(КППНетребуется, "", НСтр("ru = ', КПП '")),
			?(КППНетребуется, ТекстКПП, СокрЛП(Объект.КПППолучателя)),
			СокрЛП(Объект.ТекстПолучателя));
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет") Тогда
		ТекстНадписи = УстановитьНадписьРеквизитыПлательщика(Форма);
	Иначе
		ТекстНадписи = "";
	КонецЕсли;
	
	Возврат ТекстНадписи;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НадписьРеквизитыПлатежейВБюджет(Форма)
	
	Объект = Форма.Объект;
	
	Если НЕ Объект.ПеречислениеВБюджет Тогда
		Возврат НСтр("ru = '<КБК> и <ОКТМО> не требуются'");
	КонецЕсли;
	
	Возврат ПлатежиВБюджетКлиентСерверПереопределяемый.НадписьРеквизитыПлатежейВБюджет(Объект);
	
КонецФункции

&НаСервере
Процедура ПерезаполнитьНазначениеПлатежаНаСервере()
	
	ПараметрыНазначенияПлатежа = Документы.ПлатежноеПоручение.НовыеПараметрыНазначенияПлатежа();
	ЗаполнитьЗначенияСвойств(ПараметрыНазначенияПлатежа, Объект);
	АвтоЗначенияРеквизитов.ТекстНазначенияПлатежа = АвтоТекстНазначенияПлатежа(ПараметрыНазначенияПлатежа, ШаблонНазначенияПлатежаВБюджет);
	Документы.ПлатежноеПоручение.СформироватьНазначениеПлатежа(Объект, АвтоЗначенияРеквизитов, НазначениеПлатежаБылоИзмененоВручную);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьНазначениеПлатежаНаСервере(ТолькоСумму = Ложь)
	
	Документы.ПлатежноеПоручение.СформироватьНазначениеПлатежа(
		Объект,
		АвтоЗначенияРеквизитов,
		НазначениеПлатежаБылоИзмененоВручную,
		ТолькоСумму);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРеквизитыПолучателяНаСервере(ОбработкаОповещения = Ложь, ИзменениеКонтрагента = Истина)
	
	Если ОбработкаОповещения И ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) И ЗначениеЗаполнено(Объект.Организация) Тогда
			
			РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(
				Объект.ДоговорКонтрагента,
				Объект.Контрагент,
				Объект.Организация,
				УчетДенежныхСредствКлиентСервер.ОпределитьВидДоговораСКонтрагентом(Объект.ВидОперации));
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.СчетКонтрагента) Тогда
			Объект.СчетКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "ОсновнойБанковскийСчет");
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьВспомогательныеРеквизитыПолучателя(ИзменениеКонтрагента);
	НадписьРеквизитыПолучателя = УстановитьНадписьРеквизитыПолучателя(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРеквизитыПлательщикаНаСервере(Знач ИзменениеОрганизации = Ложь)
	
	ПереводМеждуСчетами = Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет;
	УплатаНалогаЗаТретьихЛиц = Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц;
	
	СчетПоГосконтракту = ЗначениеЗаполнено(Объект.СчетОрганизации) И
		ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СчетОрганизации, "ГосударственныйКонтракт"));
	
	АвтоЗначенияРеквизитов = УчетДенежныхСредствБП.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
		?(УплатаНалогаЗаТретьихЛиц, Объект.Налогоплательщик, Объект.Организация),
		Объект.СчетОрганизации,
		?(ПереводМеждуСчетами, Объект.Организация, ?(ПеречислениеФизическомуЛицу И НЕ ПеречислениеНаЛичныйСчет, Объект.Банк, Объект.Контрагент)),
		Объект.СчетКонтрагента,
		Объект.ПеречислениеВБюджет,
		Объект.Дата);
	
	Если ИзменениеОрганизации ИЛИ ПустаяСтрока(Объект.КПППлательщика) <> ПустаяСтрока(АвтоЗначенияРеквизитов.КПППлательщика) Тогда
		ЗаполнитьЗначенияСвойств(Объект, АвтоЗначенияРеквизитов, "ТекстПлательщика, ИННПлательщика, КПППлательщика", "");
	Иначе
		ЗаполнитьЗначенияСвойств(Объект, АвтоЗначенияРеквизитов, "ТекстПлательщика");
	КонецЕсли;
	
	НадписьРеквизитыПлательщика = УстановитьНадписьРеквизитыПлательщика(ЭтотОбъект);
	
	Если Объект.ПеречислениеВБюджет И НЕ УплатаНалогаЗаТретьихЛиц И ИзменениеОрганизации Тогда
		СтруктураРеквизитов = Документы.ПлатежноеПоручение.РеквизитыПлатежногоПорученияВБюджетПоУмолчанию(
			Объект.Дата,
			Объект.Организация,
			Объект.ПеречислениеВБюджет,
			Объект.Налог,
			Объект.ВидНалоговогоОбязательства,
			,
			,
			Объект.СчетКонтрагента);
		
		Объект.СтатусСоставителя        = СтруктураРеквизитов.СтатусСоставителя;
		НадписьРеквизитыПлатежейВБюджет = НадписьРеквизитыПлатежейВБюджет(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокОчередностьПлатежа()
	
	ЗаполнитьСписокВыбора(Элементы.ОчередностьПлатежа, УчетДенежныхСредствКлиентСервер.ПолучитьСписокОчередностьПлатежа(Объект.Дата));
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВидОперацииОрганизации()
	
	ДоступныеОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПолучитьСписокДоступныхЗначений(
		Новый Структура("Организация, СчетОрганизации", Объект.Организация, Объект.СчетОрганизации),, Истина);
	
	Если ДоступныеОперации.Количество() > 0 И ДоступныеОперации.НайтиПоЗначению(Объект.ВидОперации) = Неопределено Тогда
		
		Объект.ВидОперации = ДоступныеОперации[0].Значение;
		ВидОперацииПриИзмененииСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПереводМеждуСвоимиСчетами()
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ЛичныеСредстваПредпринимателя Тогда
		
		Объект.СчетКонтрагента = Неопределено;
		Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
			УстановитьРеквизитыПолучателяНаСервере();
			Объект.Контрагент    = Неопределено;
		Иначе
			РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Организация, "ИндивидуальныйПредприниматель");
			Объект.Контрагент    = РеквизитыОрганизации.ИндивидуальныйПредприниматель;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ПроверитьВидОперацииОрганизации();
	
	УстановитьФункциональныеОпцииФормы(ЭтотОбъект);
	
	ПереводМеждуСвоимиСчетами();
	УстановитьВладельцаСчетаКонтрагента(ЭтотОбъект);
	УстановитьПараметрыВыбораБанковскихСчетов(ЭтотОбъект);
	
	ОпределитьЮрФизЛицо();
	
	УчетДенежныхСредствБП.УстановитьБанковскийСчет(
		Объект.СчетОрганизации,
		Объект.Организация,
		Объект.ВалютаДокумента);
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентОбработатьИзменение();
	КонецЕсли;
	
	Если Объект.ПеречислениеВБюджет Тогда
		ИзменилсяКонтрагент = Ложь;
		ЗаполнитьРеквизитыПлатежаВБюджет(ЭтотОбъект, ИзменилсяКонтрагент);
		Если ИзменилсяКонтрагент Тогда
			КонтрагентПриИзмененииНаСервере();
		КонецЕсли;
	Иначе
		СброситьПризнакПлатежаВБюджет(ЭтотОбъект);
	КонецЕсли;
	
	ИспользоватьНесколькоБанковскихСчетовОрганизации =
		Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Объект.Организация);
	
	ОсновнойБанковскийСчетОрганизацииЗаполнен = ПроверкаРеквизитовОрганизации.ОсновнойБанковскийСчетОрганизацииЗаполнен(Объект.Организация);
	
	УстановитьРеквизитыПлательщикаНаСервере(Истина);
	
	Если СчетПоГосконтракту Тогда
		Объект.ИдентификаторПлатежа = ИдентификаторГосконтактаПоСчету(Объект.СчетОрганизации);
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура НалогПриИзмененииНаСервере(АктуализированыРеквизитыПлатежаВБюджет, СтрокаПоискаПоКБК)
	
	АктуализированыРеквизитыПлатежаВБюджет = Ложь;
	Если НЕ Справочники.ВидыНалоговИПлатежейВБюджет.РеквизитыАктуальны(Объект.Налог, Объект.Дата) Тогда
		Справочники.ВидыНалоговИПлатежейВБюджет.ОбновитьПоставляемыеДанныеИзКлассификатора();
		АктуализированыРеквизитыПлатежаВБюджет = Истина;
	КонецЕсли;
	
	НалогОбработатьИзменение(СтрокаПоискаПоКБК);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура НалогОбработатьИзменение(СтрокаПоискаПоКБК)
	
	ВидНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Налог, "ВидНалога");
	
	Объект.ВидНалоговогоОбязательства = Справочники.ВидыНалоговИПлатежейВБюджет.ВидНалоговогоОбязательстваПоКБК(
		СтрокаПоискаПоКБК, Объект.Дата, ВидНалога);
	ЗаполнитьВидНалоговогоОбязательстваНаСервере(ЭтотОбъект);
	
	ТекущийПолучатель = Объект.Контрагент;
	Получатель = ДанныеГосударственныхОрганов.АдминистраторНалогаОрганизации(Объект.Налог, Объект.Организация, Объект.Дата);
	Если ЗначениеЗаполнено(Получатель) И ТекущийПолучатель <> Получатель Тогда
		Объект.Контрагент = Получатель;
	КонецЕсли;
	
	Если Объект.Налог <> Справочники.ВидыНалоговИПлатежейВБюджет.ПрочиеНалогиИСборы Тогда
		РегистрацияВНалоговомОргане = Документы.ПлатежноеПоручение.РегистрацияВНалоговомОрганеПоДаннымПлатежногоПоручения(
			Объект.Организация, Объект.Контрагент, Объект.КПППлательщика);
		
		НастройкаЗаполнения = РегистрыСведений.РеквизитыУплатыНалоговИПлатежейВБюджет.КлючНастройкиУплатыНалога(
			Объект.Налог, Объект.Организация, РегистрацияВНалоговомОргане);
	КонецЕсли;
	
	ПерезаполнитьСтатьюДДС(ЭтотОбъект);
	
	ЗаполнитьРеквизитыПлатежаВБюджет(ЭтотОбъект,, НастройкаЗаполнения);
	
	Если ТекущийПолучатель <> Объект.Контрагент Тогда
		КонтрагентПриИзмененииНаСервере(, Истина, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииСервер()
	
	ВидОперацииОбработатьИзменение();
	
	Если Объект.ПеречислениеВБюджет Тогда
		ИзменитьПеречислениеВБюджет(,,, Истина);
	Иначе
		СброситьПризнакПлатежаВБюджет(ЭтотОбъект);
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура НалогоплательщикПриИзмененииНеСервере()
	
	АвтоЗначенияРеквизитов = УчетДенежныхСредствБП.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
		Объект.Налогоплательщик,
		Объект.СчетОрганизации,
		Объект.Контрагент,
		Объект.СчетКонтрагента,
		Объект.ПеречислениеВБюджет,
		Объект.Дата);
	
	// При изменении налогоплательщика нельзя затирать реквизиты получателя и текст плательщика.
	ЗаполнитьЗначенияСвойств(Объект, АвтоЗначенияРеквизитов,, "ИННПолучателя, КПППолучателя, ТекстПлательщика, ТекстПолучателя");
	
	ЗаполнитьРеквизитыПлатежаВБюджет(ЭтотОбъект);
	
	НадписьРеквизитыПлательщика = УстановитьНадписьРеквизитыПлательщика(ЭтотОбъект);
	
	Документы.ПлатежноеПоручение.СформироватьНазначениеПлатежа(Объект, АвтоЗначенияРеквизитов, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере(ОпределятьОсновнойВариантПеречисления = Ложь, Знач ИзменениеКонтрагента = Ложь, Знач ЗаполнениеПоНастройкеПлатежаВБюджет = Ложь)
	
	Если ЗаполнениеПоНастройкеПлатежаВБюджет Тогда
		КонтрагентОбработатьИзменение(ОпределятьОсновнойВариантПеречисления, ИзменениеКонтрагента, Истина);
	Иначе
		КонтрагентОбработатьИзменение(ОпределятьОсновнойВариантПеречисления, ИзменениеКонтрагента);
		ЗаполнитьРеквизитыПлатежаВБюджет(ЭтотОбъект, Истина);
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СчетКонтрагентаПриИзмененииНаСервере(Знач ИзменениеКонтрагента = Ложь, Знач ЗаполнениеПоНастройкеПлатежаВБюджет = Ложь)
	
	Если УчетДенежныхСредствКлиентСервер.РасчетыСФизическимиЛицами(Объект.ВидОперации)
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП Тогда
		Если Объект.ПеречислениеВБюджет Тогда
			ПлатежГосОргану            = Ложь;
			Объект.ПеречислениеВБюджет = Ложь;
			СброситьПризнакПлатежаВБюджет(ЭтотОбъект);
			УправлениеФормой(ЭтотОбъект);
		КонецЕсли;
	ИначеЕсли НЕ ЗаполнениеПоНастройкеПлатежаВБюджет Тогда
		ПлатежГосОргану = УчетДенежныхСредствБП.ПлатежГосОргану(Объект.ВидОперации, Объект.Контрагент);
		Если ПлатежГосОргану Тогда
			ИзменитьПеречислениеВБюджет(, ИзменениеКонтрагента);
			УправлениеФормой(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьВспомогательныеРеквизитыПолучателя(ИзменениеКонтрагента);
	
	НадписьРеквизитыПолучателя = УстановитьНадписьРеквизитыПолучателя(ЭтотОбъект);
	
	Если ЗаполнениеПоНастройкеПлатежаВБюджет И НЕ ПустаяСтрока(Объект.НазначениеПлатежа) Тогда
		НазначениеПлатежаБылоИзмененоВручную = Истина;
	КонецЕсли;
	
	СформироватьНазначениеПлатежаНаСервере(Ложь);
	
	ДлительнаяОперацияПроверкиПлатежныхРеквизитов = ПроверитьПлатежныеРеквизитыВФоне();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИдентификаторГосконтактаПоСчету(ОтдельныйСчет)
	
	Идентификатор = "";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ОтдельныйСчет);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БанковскиеСчета.ГосударственныйКонтракт.Код КАК Идентификатор
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Идентификатор = Выборка.Идентификатор;
	КонецЕсли;
	
	Возврат Идентификатор;
	
КонецФункции

&НаСервере
Процедура ДоговорПриИзмененииНаСервере(ИзменениеКонтрагента = Истина)
	
	Если ВидОперацииБезДоговора(Объект.ВидОперации) ИЛИ Объект.ПеречислениеВБюджет Тогда
		Объект.СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
		Объект.СуммаНДС  = 0;
		Возврат;
	КонецЕсли;
	
	УстановитьРеквизитыПолучателяНаСервере(, ИзменениеКонтрагента);
	Объект.СтавкаНДС = УчетДенежныхСредствБП.ПолучитьСтавкуНДСПоДоговору(Объект.ДоговорКонтрагента);
	Объект.СуммаНДС  = ПересчитатьСуммуНДС(Объект.СуммаДокумента, Объект.СтавкаНДС);
	
	Документы.ПлатежноеПоручение.СформироватьНазначениеПлатежа(
		Объект, АвтоЗначенияРеквизитов, НазначениеПлатежаБылоИзмененоВручную);
		
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ПредлагатьНовыйДоговор = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастройкиПечатиПриИзмененииНаСервере()
	
	ПереводМеждуСчетами = Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет;
	УплатаНалогаЗаТретьихЛиц = Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц;
	
	АвтоЗначенияРеквизитов = УчетДенежныхСредствБП.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
		?(УплатаНалогаЗаТретьихЛиц, Объект.Налогоплательщик, Объект.Организация),
		Объект.СчетОрганизации,
		?(ПереводМеждуСчетами, Объект.Организация, ?(ПеречислениеФизическомуЛицу И НЕ ПеречислениеНаЛичныйСчет, Объект.Банк, Объект.Контрагент)),
		Объект.СчетКонтрагента,
		Объект.ПеречислениеВБюджет,
		Объект.Дата);
	
	ЗаполнитьЗначенияСвойств(
		Объект,
		АвтоЗначенияРеквизитов,
		"ТекстПлательщика, КПППлательщика, ТекстПолучателя, КПППолучателя");
	
	НадписьРеквизитыПлательщика     = УстановитьНадписьРеквизитыПлательщика(ЭтотОбъект);
	НадписьРеквизитыПолучателя      = УстановитьНадписьРеквизитыПолучателя(ЭтотОбъект);
	НадписьРеквизитыПлатежейВБюджет = НадписьРеквизитыПлатежейВБюджет(ЭтотОбъект);
	
	Документы.ПлатежноеПоручение.СформироватьНазначениеПлатежа(
		Объект, АвтоЗначенияРеквизитов, НазначениеПлатежаБылоИзмененоВручную);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьВидОперацииУплатаНалога()
	
	Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога;
	
	ВидОперацииОбработатьИзменение();
	
	УправлениеФормой(ЭтотОбъект);
	
	ТекущийЭлемент = Элементы.Налог;
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииОбработатьИзменение()
	
	ВидОперацииДоИзменения = Объект.ВидОперации;
	
	УплатаНалогаЗаТретьихЛиц = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц");
	ПеречислениеФизическомуЛицу = УчетДенежныхСредствКлиентСервер.РасчетыСФизическимиЛицами(Объект.ВидОперации)
		И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ЛичныеСредстваПредпринимателя");
	
	ПеречислениеНаЛичныйСчет = Истина;
	Объект.Банк = "";
	
	Если НЕ УплатаНалогаЗаТретьихЛиц Тогда
		Объект.Налогоплательщик = "";
	КонецЕсли;
	
	Если ПеречислениеФизическомуЛицу Тогда
		ОсновнойВариантПеречисления = РегистрыСведений.ОсновныеВариантыПеречисленияСотруднику.ПолучитьОсновнойВариантПеречисления(
		Новый Структура("Организация, ФизическоеЛицо, ВидОперации, БанковскийСчет, НазначениеПлатежа",
			Объект.Организация, Объект.Контрагент, Объект.ВидОперации, Объект.СчетКонтрагента, ""));
		
		Объект.СчетКонтрагента = ОсновнойВариантПеречисления.БанковскийСчет;
		Если ЗначениеЗаполнено(Объект.СчетКонтрагента) Тогда
			ВладелецСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СчетКонтрагента, "Владелец");
			Если ВладелецСчета <> Объект.Контрагент Тогда
				Объект.Банк = ВладелецСчета;
				ПеречислениеНаЛичныйСчет = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		Объект.ПеречислениеВБюджет = Истина;
	Иначе
		Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.ПустаяСсылка();
		
		ПлатежГосОргану = УчетДенежныхСредствБП.ПлатежГосОргану(Объект.ВидОперации, Объект.Контрагент);
		Если ПлатежГосОргану Тогда
			Объект.ПеречислениеВБюджет = ПлатежГосОргану;
		КонецЕсли;
		
		Если НЕ Объект.ПеречислениеВБюджет Тогда
			СброситьПризнакПлатежаВБюджет(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьОграничениеТипаКонтрагента(ЭтотОбъект);
	
	ПереводМеждуСвоимиСчетами();
	УстановитьВладельцаСчетаКонтрагента(ЭтотОбъект);
	УстановитьПараметрыВыбораБанковскихСчетов(ЭтотОбъект);
	
	ОпределитьЮрФизЛицо();
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) И Объект.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет
		ИЛИ НЕ ЗначениеЗаполнено(Объект.СчетКонтрагента) Тогда
		УстановитьСчетПолучателя(Истина);
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП Тогда
		Объект.ДокументОснование = Документы.ВедомостьНаВыплатуЗарплатыВБанк.ПустаяСсылка();
	КонецЕсли;
	
	Если ВидОперацииБезДоговора(Объект.ВидОперации) Тогда
		Объект.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		ПредлагатьНовыйДоговор = Ложь;
	Иначе
		УстановитьПараметрыВыбораДоговораСКонтрагентом(ЭтотОбъект);
		ПодобратьДоговор();
	КонецЕсли;
	
	ДоговорПриИзмененииНаСервере(Ложь);
	
	ПерезаполнитьСтатьюДДС(ЭтотОбъект);
	
	ПерезаполнитьНазначениеПлатежаНаСервере();
	
	УстановитьОчередностьПлатежа();
	ОбновитьПодсказкуОчередностьПлатежа(ЭтотОбъект);
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	ПоказатьИндексыСПАРК = ПоказатьИнформациюСпарк(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСчетПолучателя(Знач ИзменениеКонтрагента = Ложь, Знач ЗаполнениеПоНастройкеПлатежаВБюджет = Ложь)
	
	Если СчетПоГосконтракту Тогда
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			РеквизитыСчетаОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				Объект.СчетОрганизации, "ГосударственныйКонтракт, ВалютаДенежныхСредств");
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Владелец", Объект.Контрагент);
			Запрос.УстановитьПараметр("Контракт", РеквизитыСчетаОрганизации.ГосударственныйКонтракт);
			Запрос.УстановитьПараметр("Валюта",   РеквизитыСчетаОрганизации.ВалютаДенежныхСредств);
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	БанковскиеСчета.Ссылка,
			|	БанковскиеСчета.ПометкаУдаления КАК ПометкаУдаления
			|ИЗ
			|	Справочник.БанковскиеСчета КАК БанковскиеСчета
			|ГДЕ
			|	БанковскиеСчета.Владелец = &Владелец
			|	И БанковскиеСчета.ВалютаДенежныхСредств = &Валюта
			|	И БанковскиеСчета.ГосударственныйКонтракт = &Контракт
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПометкаУдаления УБЫВ";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Объект.СчетКонтрагента = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
	Иначе
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(
			Объект.СчетКонтрагента,
			?(ПеречислениеФизическомуЛицу И НЕ ПеречислениеНаЛичныйСчет, Объект.Банк, Объект.Контрагент),
			Объект.ВалютаДокумента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.СчетКонтрагента) Тогда
		СчетКонтрагентаПриИзмененииНаСервере(ИзменениеКонтрагента, ЗаполнениеПоНастройкеПлатежаВБюджет);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоГосударственныйОрганУплатыНалога(Знач Контрагент)
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РеквизитыКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент, "ГосударственныйОрган, ВидГосударственногоОргана");
	
	Возврат РеквизитыКонтрагента.ГосударственныйОрган
		И РеквизитыКонтрагента.ВидГосударственногоОргана <> ПредопределенноеЗначение("Перечисление.ВидыГосударственныхОрганов.Прочий");

КонецФункции

&НаСервере
Процедура КонтрагентОбработатьИзменение(ОпределятьОсновнойВариантПеречисления = Ложь, ИзменениеКонтрагента = Ложь, ЗаполнениеПоНастройкеПлатежаВБюджет = Ложь)
	
	ПлатежГосОргану               = УчетДенежныхСредствБП.ПлатежГосОргану(Объект.ВидОперации, Объект.Контрагент);
	Объект.ПеречислениеВБюджет    = ПлатежГосОргану;
	Если Объект.ПеречислениеВБюджет Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ВидПеречисленияВБюджет) Тогда
			Объект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж;
		КонецЕсли;
	Иначе
		Объект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ПустаяСсылка();
	КонецЕсли;
	
	ОпределитьЮрФизЛицо();
	
	Если ПеречислениеФизическомуЛицу Тогда
		
		Если ОпределятьОсновнойВариантПеречисления Тогда
			ПеречислениеНаЛичныйСчет = Истина;
			
			ОсновнойВариантПеречисления = РегистрыСведений.ОсновныеВариантыПеречисленияСотруднику.ПолучитьОсновнойВариантПеречисления(
				Новый Структура("Организация, ФизическоеЛицо, ВидОперации, БанковскийСчет, НазначениеПлатежа",
					Объект.Организация, Объект.Контрагент, Объект.ВидОперации, Объект.СчетКонтрагента, ""));
			
			Объект.СчетКонтрагента = ОсновнойВариантПеречисления.БанковскийСчет;
			Если ЗначениеЗаполнено(Объект.СчетКонтрагента) Тогда
				ВладелецСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СчетКонтрагента, "Владелец");
				Если ВладелецСчета <> Объект.Контрагент Тогда
					Объект.Банк = ВладелецСчета;
					ПеречислениеНаЛичныйСчет = Ложь;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Объект.СчетКонтрагента = "";
		КонецЕсли;
	КонецЕсли;
		
	Если ИзменениеКонтрагента ИЛИ НЕ ЗначениеЗаполнено(Объект.СчетКонтрагента) Тогда
		УстановитьСчетПолучателя(Истина, ЗаполнениеПоНастройкеПлатежаВБюджет);
	КонецЕсли;
	
	УплатаНалогаЗаТретьихЛиц = Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц;
	
	Если ПлатежГосОргану И НЕ УплатаНалогаЗаТретьихЛиц И ИзменениеКонтрагента И НЕ ЗаполнениеПоНастройкеПлатежаВБюджет Тогда
		ПроверитьИзменитьКПППлательщика();
	КонецЕсли;
	
	Если НЕ ВидОперацииБезДоговора(Объект.ВидОперации) Тогда
		ПодобратьДоговор();
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику Тогда
		Если ЗначениеЗаполнено(Объект.Контрагент) И ЗначениеЗаполнено(Объект.ПлатежнаяВедомость) Тогда
			Объект.СуммаДокумента = СуммаВыплаченнойЗарплатыРаботнику(
				Объект.Ссылка, Объект.Контрагент, Объект.ПлатежнаяВедомость, УчетЗарплатыИКадровВоВнешнейПрограмме);
		Иначе
			Объект.СуммаДокумента = 0;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВладельцаСчетаКонтрагента(ЭтотОбъект);
	УстановитьПараметрыВыбораБанковскихСчетов(ЭтотОбъект);
	
	ДоговорПриИзмененииНаСервере();
	
	ПереводМеждуСчетами = Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет;
	
	АвтоЗначенияРеквизитов = УчетДенежныхСредствБП.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
		?(УплатаНалогаЗаТретьихЛиц, Объект.Налогоплательщик, Объект.Организация),
		Объект.СчетОрганизации,
		?(ПереводМеждуСчетами, Объект.Организация, ?(ПеречислениеФизическомуЛицу И НЕ ПеречислениеНаЛичныйСчет, Объект.Банк, Объект.Контрагент)),
		Объект.СчетКонтрагента,
		Объект.ПеречислениеВБюджет,
		Объект.Дата);
	
	// При изменении контрагента нельзя затирать реквизиты организации.
	ЗаполнитьЗначенияСвойств(Объект, АвтоЗначенияРеквизитов,, "ИННПлательщика, КПППлательщика, ТекстПлательщика");
	
	НадписьРеквизитыПлательщика = УстановитьНадписьРеквизитыПлательщика(ЭтотОбъект);
	НадписьРеквизитыПолучателя  = УстановитьНадписьРеквизитыПолучателя(ЭтотОбъект);
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	ПоказатьИндексыСПАРК = ПоказатьИнформациюСпарк(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьПеречислениеВБюджет(НастройкаЗаполнения = Неопределено, ИзменениеКонтрагента = Ложь, ПолучитьКонтекст = Ложь, ИзменениеВидаОперации = Ложь)
	
	БИКСчетаПолучателя   = "";
	НомерСчетаПолучателя = "";
	Если ЗначениеЗаполнено(Объект.СчетКонтрагента) Тогда
		РеквизитыСчетаПолучателя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.СчетКонтрагента, "Банк.Код, НомерСчета");
		БИКСчетаПолучателя   = РеквизитыСчетаПолучателя.БанкКод;
		НомерСчетаПолучателя = РеквизитыСчетаПолучателя.НомерСчета;
	КонецЕсли;
	
	УплатаНалогаЗаТретьихЛиц = Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц;
	
	Объект.ПеречислениеВБюджет = Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога
		ИЛИ УплатаНалогаЗаТретьихЛиц
		ИЛИ ПлатежГосОргану
		  И ПлатежиВБюджетКлиентСервер.ЭтоСчетПлатежаВБюджет(НомерСчетаПолучателя, Объект.Дата)
		  И БанковскиеПравила.ЭтоОтделениеЦентральногоБанка(БИКСчетаПолучателя);
	
	Если Объект.ПеречислениеВБюджет Тогда
		Объект.СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
		Объект.СуммаНДС  = 0;
		ПлатежГосОргану  = Истина;
		Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
			Объект.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
	Иначе
		СброситьПризнакПлатежаВБюджет(ЭтотОбъект);
	КонецЕсли;
	
	ПереводМеждуСчетами = Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет;
	
	АвтоЗначенияРеквизитов = УчетДенежныхСредствБП.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
		?(УплатаНалогаЗаТретьихЛиц, Объект.Налогоплательщик, Объект.Организация),
		Объект.СчетОрганизации,
		?(ПереводМеждуСчетами, Объект.Организация, ?(ПеречислениеФизическомуЛицу И НЕ ПеречислениеНаЛичныйСчет, Объект.Банк, Объект.Контрагент)),
		Объект.СчетКонтрагента,
		Объект.ПеречислениеВБюджет,
		Объект.Дата);
	
	Если НЕ ИзменениеКонтрагента И НЕ ИзменениеВидаОперации Тогда
		ЗаполнитьЗначенияСвойств(Объект, АвтоЗначенияРеквизитов,, "ИННПлательщика, КПППлательщика, ТекстПлательщика");
	Иначе
		ЗаполнитьЗначенияСвойств(Объект, АвтоЗначенияРеквизитов);
	КонецЕсли;
	
	НадписьРеквизитыПлательщика     = УстановитьНадписьРеквизитыПлательщика(ЭтотОбъект);
	НадписьРеквизитыПолучателя      = УстановитьНадписьРеквизитыПолучателя(ЭтотОбъект);
	НадписьРеквизитыПлатежейВБюджет = НадписьРеквизитыПлатежейВБюджет(ЭтотОбъект);
	
	ИзменилсяКонтрагент = ИзменениеКонтрагента;
	ЗаполнитьРеквизитыПлатежаВБюджет(ЭтотОбъект, ИзменилсяКонтрагент, НастройкаЗаполнения);
	Если НЕ ИзменениеКонтрагента И ИзменилсяКонтрагент Тогда
		КонтрагентПриИзмененииНаСервере(,, Истина);
	КонецЕсли;
	
	Если КонтекстПлатежногоДокумента <> Неопределено Тогда
		Если ПолучитьКонтекст Тогда
			КонтекстПлатежногоДокумента = Документы.ПлатежноеПоручение.КонтекстПлатежногоДокумента(Объект);
		Иначе
			Если НомерСчетаПолучателя <> КонтекстПлатежногоДокумента.НомерСчетаПолучателя Тогда
				КонтекстПлатежногоДокумента.НомерСчетаПолучателя = НомерСчетаПолучателя;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СброситьПризнакПлатежаВБюджет(Форма)
	
	Объект = Форма.Объект;
	
	Если НЕ ПустаяСтрока(Объект.СтатусСоставителя) Тогда
		Объект.СтатусСоставителя = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВидОперацииБезДоговора(ВидОперации)
	
	Возврат УчетДенежныхСредствКлиентСервер.РасчетыСФизическимиЛицами(ВидОперации)
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание;
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиДокументСписанияНаСервере(Знач ПлатежноеПоручение, Знач ДокументОснование, НаименованиеДокумента)
	
	Возврат Документы.ПлатежноеПоручение.НайтиДокументСписания(ПлатежноеПоручение, ДокументОснование, НаименованиеДокумента);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСписокВыбора(Элемент, СписокДанных)
	
	Элемент.СписокВыбора.Очистить();
	Для каждого ЭлементДанных Из СписокДанных Цикл
		Элемент.СписокВыбора.Добавить(ЭлементДанных.Значение, ЭлементДанных.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьРеквизитыПлательщикаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОчиститьСообщения();
	ЕстьОшибки = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Организация'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Организация", "Объект", ЕстьОшибки);
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.СчетОрганизации) Тогда
		Если ИспользоватьНесколькоБанковскихСчетовОрганизации Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Банковский счет'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "СчетОрганизации", "Объект", ЕстьОшибки);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Реквизиты банковского счета не заполнены'"), ,"РеквизитыОрганизацииСсылка", ,ЕстьОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЭтоПлательщик",  Истина);
	СтруктураПараметров.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	СтруктураПараметров.Вставить("Объект",         Объект);
	
	ОткрытьФорму("Документ.ПлатежноеПоручение.Форма.РеквизитыПлательщикаПолучателя", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыПлатежаВБюджет(Форма, ИзменилсяКонтрагент = Ложь, НастройкаЗаполнения = Неопределено)
	
	Объект = Форма.Объект;
	
	УплатаНалогаЗаТретьихЛиц = Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц;
	ЭтоПеречислениеНалога = Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога;
	Если ЭтоПеречислениеНалога Тогда
		Если (НЕ ЗначениеЗаполнено(Объект.Налог)
			ИЛИ Объект.Налог = ПредопределенноеЗначение("Справочник.ВидыНалоговИПлатежейВБюджет.ПрочиеНалогиИСборы"))
		И НастройкаЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	РеквизитыОбъекта = ПлатежиВБюджетКлиентСерверПереопределяемый.НовыеРеквизитыПлатежаВБюджет(Объект, Объект.ПеречислениеВБюджет);
	Если УплатаНалогаЗаТретьихЛиц Тогда
		ЗаполнитьРеквизитыПлатежаВБюджетНаСервере(РеквизитыОбъекта, ИсточникДанныхКонтекстаПлатежногоДокумента(Форма), Неопределено);
		ЗаполнитьЗначенияСвойств(Объект, РеквизитыОбъекта, "КодОКАТО, СтатусСоставителя");
	ИначеЕсли Объект.ПеречислениеВБюджет Тогда
		ЗаполнитьРеквизитыПлатежаВБюджетНаСервере(РеквизитыОбъекта, ИсточникДанныхКонтекстаПлатежногоДокумента(Форма), НастройкаЗаполнения);
		
		ИсключатьСвойства = Новый Массив;
		
		// Функция вызвана из обработчика изменения контрагента
		Если ИзменилсяКонтрагент И РеквизитыОбъекта.Свойство("Контрагент") Тогда
			ИсключатьСвойства.Добавить("Контрагент");
			
			Если РеквизитыОбъекта.Свойство("СчетКонтрагента") Тогда
				ИсключатьСвойства.Добавить("СчетКонтрагента");
			КонецЕсли;
		КонецЕсли;
		
		// Назначение платежа заполняем значением "по умолчанию" только для вида операции Уплата налога
		Если ЭтоПеречислениеНалога Тогда
			Если РеквизитыОбъекта.Свойство("ШаблонНазначенияПлатежаВБюджет") Тогда
				Форма.ШаблонНазначенияПлатежаВБюджет = РеквизитыОбъекта.ШаблонНазначенияПлатежаВБюджет;
			КонецЕсли;
		Иначе
			ИсключатьСвойства.Добавить("НазначениеПлатежа");
		КонецЕсли;
		
		Если Форма.СчетПоГосконтракту Тогда
			ИсключатьСвойства.Добавить("ИдентификаторПлатежа");
		КонецЕсли;
		
		ИзменилсяКонтрагент = ИзменилсяКонтрагент ИЛИ РеквизитыОбъекта.Свойство("Контрагент") И РеквизитыОбъекта.Контрагент <> Объект.Контрагент;
		
		ИсключатьСвойстваИзЗаполнения = СтрСоединить(ИсключатьСвойства, ",");
		Если ПустаяСтрока(ИсключатьСвойстваИзЗаполнения) Тогда
			ЗаполнитьЗначенияСвойств(Объект, РеквизитыОбъекта);
		Иначе
			ЗаполнитьЗначенияСвойств(Объект, РеквизитыОбъекта,, ИсключатьСвойстваИзЗаполнения);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НастройкаЗаполнения) Тогда
			ЗаполнитьВидНалоговогоОбязательстваНаСервере(Форма);
		КонецЕсли;
	Иначе
		СброситьПризнакПлатежаВБюджет(Форма);
	КонецЕсли;
	
	Форма.НадписьРеквизитыПлатежейВБюджет = НадписьРеквизитыПлатежейВБюджет(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИсточникДанныхКонтекстаПлатежногоДокумента(Форма)
	
	Объект = Форма.Объект;
	
	ИсточникДанныхКонтекста = Новый Структура;
	ИсточникДанныхКонтекста.Вставить("Период",                      Объект.Дата);
	Если Месяц(Объект.Дата) = Месяц(Форма.ПредыдущаяДата)
		И ПлатежиВБюджетКлиентСервер.РеквизитЗаполнен(Объект.ПоказательПериода) Тогда
		ПоказателиПериода = ПлатежиВБюджетКлиентСервер.РазобратьНалоговыйПериод(Объект.ПоказательПериода);
		ИсточникДанныхКонтекста.Вставить("ПериодПлатежа",           ПоказателиПериода.Дата);
	КонецЕсли;
	ИсточникДанныхКонтекста.Вставить("Организация",                 Объект.Организация);
	ИсточникДанныхКонтекста.Вставить("Налогоплательщик",            Объект.Налогоплательщик);
	ИсточникДанныхКонтекста.Вставить("КПППлательщика",              Объект.КПППлательщика);
	ИсточникДанныхКонтекста.Вставить("Получатель",                  Объект.Контрагент);
	ИсточникДанныхКонтекста.Вставить("СчетПолучателя",              Объект.СчетКонтрагента);
	ИсточникДанныхКонтекста.Вставить("Налог",                       Объект.Налог);
	ИсточникДанныхКонтекста.Вставить("ВидНалоговогоОбязательства",  Объект.ВидНалоговогоОбязательства);
	ИсточникДанныхКонтекста.Вставить("РегистрацияВНалоговомОргане", Неопределено);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц") Тогда
		ИсточникДанныхКонтекста.Вставить("КодБК", Объект.КодБК);
	КонецЕсли;
	
	Возврат ИсточникДанныхКонтекста;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыПлатежаВБюджетНаСервере(РеквизитыОбъекта, Знач ИсточникДанных, Знач НастройкаЗаполнения)
	
	Если НастройкаЗаполнения <> Неопределено Тогда
		ДанныеЗаполнения = РегистрыСведений.РеквизитыУплатыНалоговИПлатежейВБюджет.ДанныеЗаполнения(
			НастройкаЗаполнения, ИсточникДанных.Период, ИсточникДанных.Организация);
	КонецЕсли;
	
	Документы.ПлатежноеПоручение.ЗаполнитьРеквизитыПлатежаВБюджетДопустимымиЗначениями(
		РеквизитыОбъекта, ИсточникДанных, ДанныеЗаполнения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВспомогательныеРеквизитыПолучателя(ИзменениеКонтрагента = Истина)
	
	ПереводМеждуСчетами = Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет;
	УплатаНалогаЗаТретьихЛиц = Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц;
	
	АвтоЗначенияРеквизитов = УчетДенежныхСредствБП.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
		?(УплатаНалогаЗаТретьихЛиц, Объект.Налогоплательщик, Объект.Организация),
		Объект.СчетОрганизации,
		?(ПереводМеждуСчетами, Объект.Организация, ?(ПеречислениеФизическомуЛицу И НЕ ПеречислениеНаЛичныйСчет, Объект.Банк, Объект.Контрагент)),
		Объект.СчетКонтрагента,
		Объект.ПеречислениеВБюджет,
		Объект.Дата);
	
	Если ИзменениеКонтрагента ИЛИ ПустаяСтрока(Объект.КПППолучателя) <> ПустаяСтрока(АвтоЗначенияРеквизитов.КПППолучателя) Тогда
		ЗаполнитьЗначенияСвойств(Объект, АвтоЗначенияРеквизитов, "ТекстПолучателя, ИННПолучателя, КПППолучателя", "");
	Иначе
		ЗаполнитьЗначенияСвойств(Объект, АвтоЗначенияРеквизитов, "ТекстПолучателя");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПодсказкуОчередностьПлатежа()
	
	ЗаполнитьСписокВыбора(Элементы.ОчередностьПлатежа, УчетДенежныхСредствКлиентСервер.ПолучитьСписокОчередностьПлатежа(Объект.Дата));
	ОбновитьПодсказкуОчередностьПлатежа(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьДокументСписанияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Параметры.Ключ) ИЛИ Модифицированность Тогда
		ОбъектЗаписан = Записать();
		
		Если НЕ ОбъектЗаписан Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументСписания) Тогда
		ПоказатьЗначение(, ДокументСписания);
	ИначеЕсли НЕ ТолькоПросмотр Тогда
		Если Объект.ПометкаУдаления Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Нельзя вводить оплату на основании документа, помеченного на удаление!'"));
			Возврат;
		КонецЕсли;
		
		ПараметрыСписания = Новый Структура("Основание", Параметры.Ключ);
		ОткрытьФорму("Документ.СписаниеСРасчетногоСчета.ФормаОбъекта", ПараметрыСписания, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчередностьПлатежаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ИзменениеПериодаПримененияПравилПлатежаВБюджет()
	
	НадписьРеквизитыПлатежейВБюджет = НадписьРеквизитыПлатежейВБюджет(ЭтотОбъект);
	
	УстановитьРеквизитыПлательщикаНаСервере();
	
	НайтиОшибкиПлатежаВБюджет(ПредыдущаяДата);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПлатежныеРеквизиты(Ответ, ДопПараметры) Экспорт
	
	ДлительнаяОперацияПроверкиПлатежныхРеквизитов = ПроверитьПлатежныеРеквизитыВФоне();
	
	ЗапуститьПроверкуФоновогоЗадания();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОГосударственномОрганеПоКоду(Вид, Код)
	
	Если Вид = Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган Тогда
		Реквизиты = ДанныеГосударственныхОрганов.РеквизитыНалоговогоОрганаПоКоду(Код);
	ИначеЕсли Вид = Перечисления.ВидыГосударственныхОрганов.ОрганПФР Тогда
		Реквизиты = ДанныеГосударственныхОрганов.РеквизитыОтделенияПФРПоКоду(Код);
	ИначеЕсли Вид = Перечисления.ВидыГосударственныхОрганов.ОрганФСС Тогда
		Реквизиты = ДанныеГосударственныхОрганов.РеквизитыОтделенияФССПоКоду(Код);
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Реквизиты.ОписаниеОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Реквизиты.Ссылка) Тогда
		ДанныеГосударственныхОрганов.ОбновитьДанныеГосударственногоОргана(Реквизиты);
	КонецЕсли;
	
	УстановитьКонтрагентаНаСервере(Реквизиты.Ссылка, Реквизиты.ПлатежныеРеквизиты.БанковскийСчет);
	
КонецПроцедуры

&НаСервере
Функция ТребуетсяПроверитьПлатежныеРеквизиты()
	
	Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НужноВыполнятьПроверку =
			ЗначениеЗаполнено(Объект.Контрагент)
			И ЗначениеЗаполнено(Объект.СчетКонтрагента)
			И (Объект.Дата + 86400 * 10 > ТекущаяДатаСеанса())
			И Объект.ПеречислениеВБюджет
			И Состояние <> Перечисления.СостоянияБанковскихДокументов.Оплачено;
	
	Если НужноВыполнятьПроверку Тогда
		
		РеквизитыКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Контрагент,
			"ГосударственныйОрган, ВидГосударственногоОргана, КодГосударственногоОргана");
		Если РеквизитыКонтрагента.ГосударственныйОрган
			И ЗначениеЗаполнено(РеквизитыКонтрагента.ВидГосударственногоОргана)
			И РеквизитыКонтрагента.ВидГосударственногоОргана <> Перечисления.ВидыГосударственныхОрганов.Прочий
			И ЗначениеЗаполнено(РеквизитыКонтрагента.КодГосударственногоОргана) Тогда
			
			Возврат Истина;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ПроверитьПлатежныеРеквизитыВФоне() Экспорт
	
	Если ТребуетсяПроверитьПлатежныеРеквизиты() Тогда
		
		ПараметрыЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
		ПараметрыЗапуска.НаименованиеФоновогоЗадания = НСтр("ru = 'Проверка платежных реквизитов в документе'");
		ПараметрыЗапуска.ОжидатьЗавершение = 0;
		
		ПараметрыВыполнения = Новый Структура;
		ПараметрыВыполнения.Вставить("Контрагент", Объект.Контрагент);
		ПараметрыВыполнения.Вставить("ПлатежныеРеквизиты", ПлатежныеРеквизиты());
		
		Результат = ДлительныеОперации.ВыполнитьВФоне("ДанныеГосударственныхОрганов.ПроверитьПлатежныеРеквизитыКонтрагентаВФоне",
			ПараметрыВыполнения,
			ПараметрыЗапуска);
		
		Если Результат.Статус = "Ошибка" Тогда
			УстановитьСостояниеКонтрагентаОшибка();
		ИначеЕсли Результат.Статус = "Выполнено" Тогда
			УстановитьСостояниеКонтрагента(Результат);
			Возврат Неопределено;
		Иначе
			УстановитьСостояниеКонтрагентаПроверяется();
			Возврат Результат;
		КонецЕсли;
		
	Иначе
		
		УстановитьСостояниеКонтрагентаНеТребуетсяПроверка();
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПлатежныеРеквизиты()
	
	ПлатежныеРеквизиты = Новый Структура();
	ПлатежныеРеквизиты.Вставить("ПолучательПлатежа", Объект.ТекстПолучателя);
	ПлатежныеРеквизиты.Вставить("ИНН", Объект.ИННПолучателя);
	ПлатежныеРеквизиты.Вставить("КПП", Объект.КПППолучателя);
	
	РеквизитыРасчетногоСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.СчетКонтрагента, "НомерСчета, Банк");
	ПлатежныеРеквизиты.Вставить("РасчетныйСчет", РеквизитыРасчетногоСчета.НомерСчета);
	Если ЗначениеЗаполнено(РеквизитыРасчетногоСчета.Банк) Тогда
		РеквизитыБанка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыРасчетногоСчета.Банк, "Код");
		ПлатежныеРеквизиты.Вставить("БИК", РеквизитыБанка.Код);
	Иначе
		ПлатежныеРеквизиты.Вставить("БИК", "");
	КонецЕсли;
	
	Возврат ПлатежныеРеквизиты;
	
КонецФункции

&НаСервере
Процедура УстановитьСостояниеКонтрагента(Результат)
	
	Элементы.ГруппаСчетКонтрагентаПроверка.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
	
	РеквизитыНеверны = Ложь;
	
	Подстроки = Новый Массив;
	
	Если Результат <> Неопределено Тогда
		
		//Задание выполнено
		
		Если ЗначениеЗаполнено(Результат.АдресРезультата)
			И ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда
			
			РезультатРаботыФоновогоЗадания = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
			
			Если РезультатРаботыФоновогоЗадания <> Неопределено
				И РезультатРаботыФоновогоЗадания.Свойство("РезультатПроверки") Тогда
				
				Подстроки.Добавить(РезультатРаботыФоновогоЗадания.РезультатПроверки);
				Подстроки.Добавить(Символы.ПС);
				
				Если РезультатРаботыФоновогоЗадания.Свойство("ТребуетсяАутентификация")
					И РезультатРаботыФоновогоЗадания.ТребуетсяАутентификация = Истина Тогда
					
					СсылкаНаПодключениеКИТС = Новый ФорматированнаяСтрока(НСтр("ru = 'Подключиться'")
						,,,, "e1cib/app/Обработка.ИнтернетПоддержкаПользователей.Форма.ОбщаяАвторизация");
					Подстроки.Добавить(СсылкаНаПодключениеКИТС);
					
				КонецЕсли;
				
				Если РезультатРаботыФоновогоЗадания.Свойство("Сервис1СКонтрагентНеПодключен")
					И РезультатРаботыФоновогоЗадания.Сервис1СКонтрагентНеПодключен = Истина Тогда
					
					Ссылка1СКонтрагент = Новый ФорматированнаяСтрока(НСтр("ru = 'Подробная информация'")
						,,,, "https://portal.1c.ru/applications/3");
					Подстроки.Добавить(Ссылка1СКонтрагент);
					
				КонецЕсли;
				
				
				Если РезультатРаботыФоновогоЗадания.Свойство("ПлатежныеРеквизитыНайдены")
					И РезультатРаботыФоновогоЗадания.ПлатежныеРеквизитыНайдены Тогда
					
					Если РезультатРаботыФоновогоЗадания.Свойство("ПлатежныеРеквизитыАктуальны") Тогда
						Если РезультатРаботыФоновогоЗадания.ПлатежныеРеквизитыАктуальны = Ложь Тогда
							КрасныйЦвет = Новый Цвет(251, 212, 212);
							Элементы.ГруппаСчетКонтрагентаПроверка.ЦветФона = КрасныйЦвет;
							Если Не ТолькоПросмотр Тогда
								СсылкаНаПодробнее = Новый ФорматированнаяСтрока(НСтр("ru = 'Исправить'")
									,,,, "e1cib/app/Документ.ПлатежноеПоручение.Форма.ФормаПроверкиПлатежныхРеквизитов");
								Подстроки.Добавить(СсылкаНаПодробнее);
							КонецЕсли;
							
							РеквизитыНеверны = Истина;
							
							РезультатПроверкиСчетаКонтрагента = РезультатПроверкиСчетаКонтрагентаОшибка();
							
						Иначе
							ЗеленыйЦвет = Новый Цвет(215, 240, 199);
							Элементы.ГруппаСчетКонтрагентаПроверка.ЦветФона = ЗеленыйЦвет;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ГруппаСчетКонтрагентаОшибкаПроверки.Видимость = РеквизитыНеверны;
	
	Элементы.СчетКонтрагента.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(Подстроки);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеКонтрагентаПроверяется()
	
	Элементы.ГруппаСчетКонтрагентаОшибкаПроверки.Видимость = Ложь;
	
	Элементы.ГруппаСчетКонтрагентаПроверка.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
	
	Подстроки = Новый Массив;
	Подстроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Выполняется проверка платежных реквизитов'")));
	Подстроки.Добавить(Символы.ПС);
	
	Элементы.СчетКонтрагента.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(Подстроки);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеКонтрагентаНеТребуетсяПроверка()
	
	Элементы.ГруппаСчетКонтрагентаОшибкаПроверки.Видимость = Ложь;
	
	Элементы.ГруппаСчетКонтрагентаПроверка.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
	
	Подстроки = Новый Массив;
	Подстроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Для платежных поручений на уплату налогов и взносов
															|есть возможность проверить актуальность платежных реквизитов
															|государственных органов.
															|Проверка выполняется для неоплаченных платежных поручений,
															|созданных не более 10 дней назад.'")));
	
	Элементы.СчетКонтрагента.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(Подстроки);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеКонтрагентаОшибка()
	
	Элементы.ГруппаСчетКонтрагентаОшибкаПроверки.Видимость = Ложь;
	
	Элементы.ГруппаСчетКонтрагентаПроверка.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
	
	Подстроки = Новый Массив;
	Подстроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'При проверке платежных реквизитов возникла ошибка.
														|Подробности в журнале регистрации.'")));
	
	Элементы.СчетКонтрагента.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(Подстроки);
	
КонецПроцедуры

&НаСервере
Функция РезультатПроверкиСчетаКонтрагентаОшибка()
	
	Подстроки = Новый Массив;
	
	Подстроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Возможно, платежные реквизиты уплаты налога указаны неверно'"),
		, ЦветаСтиля.ПоясняющийПроблемуТекст));
	Если Не ТолькоПросмотр Тогда
		Подстроки.Добавить("  ");
		Подстроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Исправить'")
			,,,, "e1cib/app/Документ.ПлатежноеПоручение.Форма.ФормаПроверкиПлатежныхРеквизитов"));
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(Подстроки);
	
КонецФункции

&НаСервере
Функция УстановитьКонтрагентаНаСервере(Контрагент, СчетКонтрагента)
	
	Модифицированность = Истина;
	
	ИзменилсяКонтрагент = Объект.Контрагент <> Контрагент;
	
	Объект.Контрагент      = Контрагент;
	Объект.СчетКонтрагента = СчетКонтрагента;
	
	ОпределитьЮрФизЛицо();
	
	Если ИзменилсяКонтрагент И Объект.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		ПодобратьДоговор();
		ДоговорПриИзмененииНаСервере();
	КонецЕсли;
	
	ЗаполнитьВспомогательныеРеквизитыПолучателя();
	НадписьРеквизитыПолучателя = УстановитьНадписьРеквизитыПолучателя(ЭтотОбъект);
	
	ДлительнаяОперацияПроверкиПлатежныхРеквизитов = ПроверитьПлатежныеРеквизитыВФоне();
	
КонецФункции

&НаСервере
Процедура ПодобратьДоговор()
	
	ПараметрыПлатежа = Новый Структура;
	ПараметрыПлатежа.Вставить("ОплатаВВалюте",        Новый Структура("ЗначениеОтбора", Ложь));
	ПараметрыПлатежа.Вставить("ВалютаВзаиморасчетов", Новый Структура("ЗначениеОтбора", ВалютаРегламентированногоУчета));
	ВидыДоговоров = УчетДенежныхСредствКлиентСервер.ОпределитьВидДоговораСКонтрагентом(Объект.ВидОперации);
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ВидДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "ВидДоговора");
		Если ВидыДоговоров.Найти(ВидДоговора) = Неопределено Тогда
			Объект.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(
		Объект.ДоговорКонтрагента, Объект.Контрагент, Объект.Организация, ВидыДоговоров, ПараметрыПлатежа);
		
	ПредлагатьНовыйДоговор = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) 
		И Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику И ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам") Тогда
		ПредлагатьНовыйДоговор = РаботаСДоговорамиКонтрагентовБП.ПредлагатьНовыйДоговор(Объект.Организация, Объект.Контрагент);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВидПлатежаПоУмолчанию()
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидПлатежа) Тогда
		СохраненныйВид = ХранилищеОбщихНастроек.Загрузить("ПлатежноеПоручение_ВидПлатежа");
		Если СохраненныйВид <> "" Тогда
			Объект.ВидПлатежа = СохраненныйВид;
		Иначе
			Объект.ВидПлатежа = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПроверкуФоновогоЗадания()
	
	Если ДлительнаяОперацияПроверкиПлатежныхРеквизитов <> Неопределено Тогда
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПроверитьПлатежныеРеквизитыВФонеЗавершение", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперацияПроверкиПлатежныхРеквизитов, ОповещениеОЗавершении, ПараметрыОжидания);
		
		ДлительнаяОперацияПроверкиПлатежныхРеквизитов = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПлатежныеРеквизитыВФонеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПредотвратитьСбросРедактируемогоЗначения();
	
	УстановитьСостояниеКонтрагента(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредотвратитьСбросРедактируемогоЗначения() Экспорт
	
	// Обход особенности платформы, когда затирается редактируемое значение
	// в текущем элементе при изменении формы.
	Если НЕ ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		Если ТипЗнч(ТекущийЭлемент) = Тип("ПолеФормы") И ТекущийЭлемент.Вид = ВидПоляФормы.ПолеВвода Тогда
			ТекущийЭлемент.ОбновлениеТекстаРедактирования = ОбновлениеТекстаРедактирования.ПриИзмененииЗначения;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СуммаВыплаченнойЗарплатыРаботнику(Знач Ссылка, Знач ФизЛицо, Знач ПлатежнаяВедомость, УчетЗарплатыИКадровВоВнешнейПрограмме)
	
	СуммаДокумента = 0;
	
	Если ЗначениеЗаполнено(ПлатежнаяВедомость) И ЗначениеЗаполнено(ФизЛицо) Тогда
		
		Ведомости = Новый Массив;
		Ведомости.Добавить(ПлатежнаяВедомость);
		
		ТаблицаНеоплаченныхВедомостей = УчетЗарплаты.ПолучитьДанныеВедомостейДляОплатыТаблично(Ссылка, Ведомости, ФизЛицо, Ложь);
		ТаблицаОплаченныхВедомостей   = УчетЗарплаты.ПолучитьДанныеВедомостейДляОплатыТаблично(Ссылка, Ведомости, ФизЛицо, Истина);
		
		Если ТаблицаНеоплаченныхВедомостей.Количество() = 0 И ТаблицаОплаченныхВедомостей.Количество() = 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В выбранной ведомости отсутствуют сведения о заработной плате сотрудника %1!'"), ФизЛицо);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.ПлатежнаяВедомость");
			
		Иначе
			
			ВедомостьОплачена = ТаблицаОплаченныхВедомостей.Количество() <> 0;
			
			Если ВедомостьОплачена Тогда
				ТекстСообщения  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'По текущей ведомости заработная плата сотрудника %1 выплачена!'"), ФизЛицо);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.ПлатежнаяВедомость");
				СтрокаВедомости = ТаблицаОплаченныхВедомостей[0];
				СуммаДокумента  = СтрокаВедомости.СуммаКВыплате + СтрокаВедомости.КомпенсацияЗаЗадержкуЗарплаты;
			Иначе
				СтрокаВедомости = ТаблицаНеоплаченныхВедомостей[0];
				СуммаДокумента  = СтрокаВедомости.СуммаКВыплате + СтрокаВедомости.КомпенсацияЗаЗадержкуЗарплаты;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат СуммаДокумента;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоОплатаТруда(ВидОперации)
	
	Возврат ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДепонентов
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеСотрудникуПоДоговоруПодряда;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОчередностьПлатежаПо345ФЗ(Форма)
	
	Объект = Форма.Объект;
	
	Если Объект.Дата < УчетДенежныхСредствКлиентСервер.НачалоДействияНовыхПравилОчередностиПлатежа() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ОчередностьПлатежа = УчетДенежныхСредствКлиентСервер.ОчередностьПлатежаПоУмолчаниюДо345ФЗ() Тогда
		Объект.ОчередностьПлатежа = УчетДенежныхСредствКлиентСервер.ОчередностьПлатежаПоУмолчанию();
	ИначеЕсли Объект.ПеречислениеВБюджет Тогда
		
		РеквизитыДокумента           = ПлатежиВБюджетКлиентСерверПереопределяемый.РеквизитыДокумента_ПлатежноеПоручение();
		ИмяРеквизитаОснованиеПлатежа = РеквизитыДокумента["ОснованиеПлатежа"];
		КодОснованияПлатежа          = Объект[ИмяРеквизитаОснованиеПлатежа];
		
		Если ПлатежиВБюджетКлиентСервер.ЭтоПлатежПоИсполнительномуЛисту(Объект.СтатусСоставителя, КодОснованияПлатежа) Тогда
			
			Если Объект.ОчередностьПлатежа > УчетДенежныхСредствКлиентСервер.ОчередностьПлатежаПоИсполнительномуЛисту() Тогда
				Объект.ОчередностьПлатежа = УчетДенежныхСредствКлиентСервер.ОчередностьПлатежаПоИсполнительномуЛисту();
			КонецЕсли;
			
		Иначе // Не по исполнительному листу
			
			Если Объект.ОчередностьПлатежа < УчетДенежныхСредствКлиентСервер.ОчередностьПлатежаНалогиВзносы() Тогда
				Объект.ОчередностьПлатежа = УчетДенежныхСредствКлиентСервер.ОчередностьПлатежаНалогиВзносы();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОчередностьПлатежа()
	
	Если Объект.ПеречислениеВБюджет Тогда
		УстановитьОчередностьПлатежаПо345ФЗ(ЭтотОбъект);
	ИначеЕсли ЭтоОплатаТруда(Объект.ВидОперации)
		И Объект.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеСотрудникуПоДоговоруПодряда Тогда
		Объект.ОчередностьПлатежа = УчетДенежныхСредствКлиентСервер.ОчередностьПлатежаОплатаТруда();
	Иначе
		Объект.ОчередностьПлатежа = УчетДенежныхСредствКлиентСервер.ОчередностьПлатежаПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОграничениеТипаКонтрагента(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗайма")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВозвратКредита")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаКонтрагенту") Тогда
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаРаботнику")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДепонентов")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ЛичныеСредстваПредпринимателя")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеСотрудникуПоДоговоруПодряда") Тогда
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
	Иначе
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("Неопределено");
	КонецЕсли;
	
	Объект.Контрагент = Элементы.Контрагент.ОграничениеТипа.ПривестиЗначение(Объект.Контрагент);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораБанковскихСчетов(Форма)
	
	Элементы = Форма.Элементы;
	
	НовыйМассивПараметров = Новый Массив;
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВалютаДенежныхСредств", Форма.ВалютаРегламентированногоУчета));
	Элементы.СчетОрганизации.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	
	НовыйМассивПараметров = Новый Массив();
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВалютаДенежныхСредств", Форма.ВалютаРегламентированногоУчета));
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец", Форма.ВладелецСчетаКонтрагента));
	Элементы.СчетКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВладельцаСчетаКонтрагента(Форма)
	
	Объект = Форма.Объект;
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет") Тогда
		Форма.ВладелецСчетаКонтрагента = Объект.Организация;
	Иначе
		Форма.ВладелецСчетаКонтрагента = ?(Форма.ПеречислениеФизическомуЛицу И НЕ Форма.ПеречислениеНаЛичныйСчет, Объект.Банк, Объект.Контрагент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораДоговораСКонтрагентом(Форма) Экспорт
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	НовыеПараметры = Новый Массив();
	ВидыДоговора   = УчетДенежныхСредствКлиентСервер.ОпределитьВидДоговораСКонтрагентом(Объект.ВидОперации);
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора",   Новый ФиксированныйМассив(ВидыДоговора)));
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ОплатаВВалюте", Ложь));
	
	Элементы.ДоговорКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ПлатежнаяВедомостьПриИзмененииНаСервере()
	
	Если НЕ НазначениеПлатежаБылоИзмененоВручную Тогда
		АвтоЗначенияРеквизитов.Вставить("ТекстНазначенияПлатежа", "");
	КонецЕсли;
	
	Документы.ПлатежноеПоручение.СформироватьНазначениеПлатежа(
		Объект, АвтоЗначенияРеквизитов, НазначениеПлатежаБылоИзмененоВручную);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеВыбораНалогаПоКБК(Знач КодБК)
	
	Возврат Справочники.ВидыНалоговИПлатежейВБюджет.ДанныеВыбораПоКБК(КодБК);
	
КонецФункции

&НаСервереБезКонтекста
Функция РеквизитыПлатежаВБюджетПриИзмененииВидаНалоговогоОбязательства(Знач РеквизитыОбъекта)
	Перем ПериодПлатежа;
	
	ВидНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыОбъекта.Налог, "ВидНалога");
	
	Если НЕ ЗначениеЗаполнено(ПериодПлатежа) И ВидНалога = Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть Тогда
		ПоказателиПериода = ПлатежиВБюджетПереопределяемый.ПоказателиНалоговогоПериода(
			РеквизитыОбъекта.Организация,
			ВидНалога,
			РеквизитыОбъекта.Дата,
			РеквизитыОбъекта.ВидНалоговогоОбязательства);
		ПериодПлатежа = ПоказателиПериода.Период;
		РеквизитыОбъекта.ПоказательПериода = ПоказателиПериода.ПоказательПериода;
	ИначеЕсли РеквизитыОбъекта.Свойство("ПоказательПериода") Тогда
		ПоказателиПериода = ПлатежиВБюджетКлиентСервер.РазобратьНалоговыйПериод(РеквизитыОбъекта.ПоказательПериода);
		ПериодПлатежа = ПоказателиПериода.Дата;
	КонецЕсли;
	
	РеквизитыПлатежаВБюджет = Новый Структура("КодБК, НазначениеПлатежа, ПоказательПериода");
	
	ШаблонКБК = ПлатежиВБюджетКлиентСервер.КодГлавногоАдминистратора(РеквизитыОбъекта.КодБК) + ПлатежиВБюджетКлиентСервер.ШаблонКБК(РеквизитыОбъекта.КодБК, Истина);
	
	Если ЗначениеЗаполнено(ПериодПлатежа) Тогда
		РеквизитыПлатежаВБюджет.КодБК = Справочники.ВидыНалоговИПлатежейВБюджет.КБКПоВидуНалоговогоОбязательства(
			ШаблонКБК, ВидНалога, РеквизитыОбъекта.ВидНалоговогоОбязательства, РеквизитыОбъекта.Дата, ПериодПлатежа);
	Иначе
		РеквизитыПлатежаВБюджет.КодБК = Справочники.ВидыНалоговИПлатежейВБюджет.КБКПоВидуНалоговогоОбязательства(
			ШаблонКБК, ВидНалога, РеквизитыОбъекта.ВидНалоговогоОбязательства, РеквизитыОбъекта.Дата);
	КонецЕсли;
	
	РеквизитыПлатежаВБюджет.НазначениеПлатежа = НазначениеПлатежаПриИзмененииПоказателяПериода(РеквизитыОбъекта);
	РеквизитыПлатежаВБюджет.ПоказательПериода = РеквизитыОбъекта.ПоказательПериода;
	
	Возврат РеквизитыПлатежаВБюджет;
	
КонецФункции

&НаСервереБезКонтекста
Функция НазначениеПлатежаПриИзмененииПоказателяПериода(Знач РеквизитыОбъекта)
	
	НазначениеПлатежа = Справочники.ВидыНалоговИПлатежейВБюджет.НазначениеПлатежа(
		РеквизитыОбъекта.Налог,
		РеквизитыОбъекта.ВидНалоговогоОбязательства,
		РеквизитыОбъекта.Организация,
		РеквизитыОбъекта.Дата,
		ПлатежиВБюджетКлиентСервер.ПредставлениеНалоговогоПериода(РеквизитыОбъекта.ПоказательПериода),
		РеквизитыОбъекта.ШаблонНазначенияПлатежаВБюджет);
	
	Возврат НазначениеПлатежа;
	
КонецФункции

&НаСервере
Процедура ПроверитьИзменитьНастройкуПлатежаВБюджет()
	
	// Ничего не делаем, если на документ помечен на удаление.
	Если Объект.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	// Проверку производим только:
	//  - для вида операции "Уплата налога";
	//  - Налог заполнен;
	//  - это не предопределенный налог "ПрочиеНалогиИСборы", по которому могут отражать множество "прочих" налогов (и поэтому нет смысла запоминать его настройки);
	//  - это уплата налога (взноса), т.к. все остальные виды платежа являются "единичными" и требуют ручной обработки.
	
	Если Объект.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога
		ИЛИ НЕ ЗначениеЗаполнено(Объект.Налог)
		ИЛИ Объект.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.ПрочиеНалогиИСборы
		ИЛИ Объект.ВидНалоговогоОбязательства <> Перечисления.ВидыПлатежейВГосБюджет.Налог Тогда
		Возврат;
	КонецЕсли;
	
	РегистрацияВНалоговомОргане = Документы.ПлатежноеПоручение.РегистрацияВНалоговомОрганеПоДаннымПлатежногоПоручения(
		Объект.Организация, Объект.Контрагент, Объект.КПППлательщика);
	
	РеквизитыОбъекта = ПлатежиВБюджетНастройки.РеквизитыПлатежногоДокумента();
	ЗаполнитьЗначенияСвойств(РеквизитыОбъекта, Объект);
	ПоказателиПериода = ПлатежиВБюджетПереопределяемый.ПоказателиПериода();
	
	Если КонтекстПлатежногоДокумента = Неопределено Тогда
		КонтекстПлатежногоДокумента = Документы.ПлатежноеПоручение.КонтекстПлатежногоДокумента(Объект);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ПоказателиПериода, КонтекстПлатежногоДокумента);
	РеквизитыОбъекта.Вставить("ПоказателиПериода", ПоказателиПериода);
	
	РеквизитыВБюджетПоУмолчанию = Документы.ПлатежноеПоручение.РеквизитыПлатежногоПорученияВБюджетПоУмолчанию(
		Объект.Дата,
		Объект.Организация,
		Объект.ПеречислениеВБюджет,
		Объект.Налог,
		Объект.ВидНалоговогоОбязательства,
		КонтекстПлатежногоДокумента,
		РегистрацияВНалоговомОргане);
	
	НастройкиТребующиеИзменения = ПлатежиВБюджетНастройки.ПроверитьНастройкуПлатежаВБюджет(
		РеквизитыОбъекта, РеквизитыВБюджетПоУмолчанию, РегистрацияВНалоговомОргане);
	Если ПлатежиВБюджетНастройки.НастройкиИзменились(НастройкиТребующиеИзменения.ИзмененныеНастройки) Тогда
		ПлатежиВБюджетНастройки.СоздатьИзменитьНастройкуПлатежаВБюджет(
			РеквизитыОбъекта, НастройкиТребующиеИзменения, РеквизитыВБюджетПоУмолчанию);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПлатежГосОргану(ВидОперации, Контрагент);
	
	Возврат УчетДенежныхСредствБП.ПлатежГосОргану(ВидОперации, Контрагент);
	
КонецФункции

#Область СПАРК

// Обновляет отображение индексов СПАРК Риски.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура Подключаемый_ОбновитьОтображениеИндексыСПАРК()
	
	ПредотвратитьСбросРедактируемогоЗначения();
	
	ОбновитьОтображениеИндексыСПАРК();
	
КонецПроцедуры

// Обновляет отображение индексов СПАРК Риски.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура ОбновитьОтображениеИндексыСПАРК()
	
	Если ПоказатьИндексыСПАРК Тогда
		
		ПараметрыОтображения = Новый Структура;
		ПараметрыОтображения.Вставить("ОбъектМетаданных", "Документ.ПлатежноеПоручение");
		
		СПАРКРискиКлиент.ОтобразитьИндексыСПАРК(
			ИндексыСПАРКРиски,
			Неопределено,
			Объект.Контрагент, // Искать по ссылке
			ЭтотОбъект,
			ПараметрыОтображения,
			Истина);
		
	Иначе
		
		Элементы.Группа1СПАРК.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПоказатьИнформациюСпарк(Форма)
	
	Объект = Форма.Объект;
	
	Если ТипЗнч(Объект.Контрагент) <> Тип("СправочникСсылка.Контрагенты") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтранаРегистрации = Неопределено;
	ГосударственныйОрган = Ложь;
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Контрагент, 
			"СтранаРегистрации, ГосударственныйОрган");
		СтранаРегистрации = ЗначенияРеквизитов.СтранаРегистрации;
		ГосударственныйОрган = ЗначенияРеквизитов.ГосударственныйОрган;
		
	КонецЕсли;
	
	ПоказатьИнформацию = (Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаКонтрагенту
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗайма
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами)
		И Форма.КонтрагентЮрФизЛицо <> Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо
		И Форма.Состояние <> Перечисления.СостоянияБанковскихДокументов.Оплачено
		И СтранаРегистрации = Справочники.СтраныМира.Россия
		И Не ГосударственныйОрган;
	
	Возврат ПоказатьИнформацию;
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПОДКЛЮЧАЕМЫЕ ОБРАБОТЧИКИ

&НаКлиенте
Процедура Подключаемый_ПредупреждениеОбОшибке()
	
	УведомитьПользователяПлатежиВБюджет();
	
КонецПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()
	
	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, ИдентификаторыСобытийПриОткрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеСлужебныйКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ЗАВЕРШЕНИЕ НЕМОДАЛЬНЫХ ВЫЗОВОВ

&НаКлиенте
Процедура ОбработкаРедактированияРеквизитовПлатежаВБюджетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Если Результат.Свойство("ПеречислениеВБюджет") Тогда
		Объект.ПеречислениеВБюджет = Результат.ПеречислениеВБюджет;
	КонецЕсли;
	
	Если Объект.ПеречислениеВБюджет Тогда
		
		РеквизитыДокумента = ПлатежиВБюджетКлиентСерверПереопределяемый.РеквизитыДокумента_ПлатежноеПоручение();
		
		// Если налоговый платеж по гособоронзаказу, то вместо УИН используется УИП
		Если СчетПоГосконтракту Тогда
			РеквизитыДокумента.Удалить("ИдентификаторПлатежа");
			РеквизитыДокумента.Вставить("ИдентификаторКонтракта", "ИдентификаторПлатежа");
		КонецЕсли;
		
		Для каждого РеквизитПлатежаВБюджет Из Результат Цикл
			ИмяРеквизита         = РеквизитыДокумента[РеквизитПлатежаВБюджет.Ключ];
			Если ИмяРеквизита <> Неопределено И РеквизитПлатежаВБюджет.Значение <> Неопределено Тогда
				Объект[ИмяРеквизита] = РеквизитПлатежаВБюджет.Значение;
			КонецЕсли;
		КонецЦикла;
		
		РеквизитыОбъекта = Новый Структура("КодБК, Налог, ВидНалоговогоОбязательства, Организация, Дата, ПоказательПериода");
		ЗаполнитьЗначенияСвойств(РеквизитыОбъекта, Объект);
		
		РеквизитыОбъекта.Вставить("ШаблонНазначенияПлатежаВБюджет", СокрЛП(ШаблонНазначенияПлатежаВБюджет));
		
		Если Результат.Модифицированность Тогда
			УплатаНалогаЗаТретьихЛиц = Объект.ВидОперации
				= ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц");
			Если УплатаНалогаЗаТретьихЛиц Тогда
				ПерезаполнитьНазначениеПлатежаНаСервере();
			Иначе
				НазначениеПлатежа = НазначениеПлатежаПриИзмененииПоказателяПериода(РеквизитыОбъекта);
				Если НЕ ПустаяСтрока(НазначениеПлатежа) Тогда
					Если НЕ НазначениеПлатежаБылоИзмененоВручную
						ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога") Тогда
						Объект.НазначениеПлатежа = НазначениеПлатежа;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		УстановитьОчередностьПлатежаПо345ФЗ(ЭтотОбъект);
		ОбновитьПодсказкуОчередностьПлатежа(ЭтотОбъект);
		
		// Заменим (добавим) УИН (уникальный идентификатор начисления)
		// С 01 января 2014 по 30 марта 2014 он указывается в назначении платежа
		ПлатежиВБюджетКлиентСервер.ЗаменитьВНазначенииПлатежаУИН(
			Объект.НазначениеПлатежа,
			Объект.ИдентификаторПлатежа,
			Объект.Дата,
			Истина);
		
	Иначе
		
		СброситьПризнакПлатежаВБюджет(ЭтотОбъект);
		
	КонецЕсли;
	
	НадписьРеквизитыПлатежейВБюджет = НадписьРеквизитыПлатежейВБюджет(ЭтотОбъект);
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПараметрыЗаписи = Новый Структура("Закрыть", Истина);
		Если Записать(ПараметрыЗаписи) Тогда
			Закрыть();
		КонецЕсли;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаписатьСОшибкамиЗавершение(Ответ, ПараметрыЗаписи) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ПараметрыЗаписи.Вставить("ПропуститьПроверку", Истина);
		Записать(ПараметрыЗаписи);
		
		Если ПараметрыЗаписи.Свойство("Закрыть")
			И ПараметрыЗаписи.Закрыть Тогда
			Закрыть();
		ИначеЕсли ПараметрыЗаписи.Свойство("ОткрытьПравилоРегулярногоПлатежа") Тогда
			ОткрытьПравилоРегулярногоПлатежа();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросРедактированиеПравилаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ПараметрыЗаписи = Новый Структура("ОткрытьПравилоРегулярногоПлатежа");
		
		Если Записать(ПараметрыЗаписи) Тогда
			
			ОткрытьПравилоРегулярногоПлатежа();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЭтоУплатаНалогаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьВидОперацииУплатаНалога();
	
	ЗапуститьПроверкуФоновогоЗадания();
	
	УведомитьПользователяПлатежиВБюджет();
	
	// СПАРК Риски
	ИндексыСПАРКРиски = Неопределено; // Сбросить полученные значения
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьОтображениеИндексыСПАРК", 0.1, Истина);
	// Конец СПАРК Риски
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВидаНалоговогоОбязательстваОбработатьИзменение(Форма)
	
	РеквизитыОбъекта = Новый Структура("КодБК, Налог, ВидНалоговогоОбязательства, Организация, Дата, ПоказательПериода, ШаблонНазначенияПлатежаВБюджет");
	ЗаполнитьЗначенияСвойств(РеквизитыОбъекта, Форма.Объект);
	
	РеквизитыПлатежаВБюджет = РеквизитыПлатежаВБюджетПриИзмененииВидаНалоговогоОбязательства(РеквизитыОбъекта);
	ЗаполнитьЗначенияСвойств(Форма.Объект, РеквизитыПлатежаВБюджет);
	
	СтатьяДДСПоУмолчанию = СтатьяДДСПриИзмененииВидаНалоговогоОбязательства(РеквизитыОбъекта);
	Если СтатьяДДСПоУмолчанию <> Неопределено Тогда
		Форма.Объект.СтатьяДвиженияДенежныхСредств = СтатьяДДСПоУмолчанию;
	КонецЕсли;
	
	Форма.НадписьРеквизитыПлатежейВБюджет = НадписьРеквизитыПлатежейВБюджет(Форма);
	
	УправлениеФормой(Форма);
	
КонецПроцедуры

// Заполняет список выбора вида налогового обязательства
//
// Параметры:
//   ДобавитьТекущееЗначениеПриОтсутствии - Булево - Истина, если при отсутствии в списке текущего значения реквизита,
//     необходимо его добавить. Например, при создании формы или в случаях, когда пользователь явно указал
//     некорректный вид обязательства.
//
&НаСервереБезКонтекста
Процедура ЗаполнитьВидНалоговогоОбязательстваНаСервере(Форма, ДобавитьТекущееЗначениеПриОтсутствии = Ложь)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Объект.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		Возврат;
	КонецЕсли;
	
	СписокВидовНалоговыхОбязательств = Перечисления.ВидыПлатежейВГосБюджет.СписокВидовНалоговыхОбязательств(Объект.Налог, Объект.Дата);
	Если СписокВидовНалоговыхОбязательств.НайтиПоЗначению(Объект.ВидНалоговогоОбязательства) = Неопределено Тогда
		Если ДобавитьТекущееЗначениеПриОтсутствии Тогда
			СписокВидовНалоговыхОбязательств.Добавить(Объект.ВидНалоговогоОбязательства);
		ИначеЕсли СписокВидовНалоговыхОбязательств.Количество() > 0 Тогда
			Объект.ВидНалоговогоОбязательства = СписокВидовНалоговыхОбязательств[0].Значение;
			ВидаНалоговогоОбязательстваОбработатьИзменение(Форма);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьСписокВыбора(Элементы.ВидНалоговогоОбязательства, СписокВидовНалоговыхОбязательств);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтатьяДДСПриИзмененииВидаНалоговогоОбязательства(Знач РеквизитыОбъекта)
	
	ВидНалоговогоОбязательства = РеквизитыОбъекта.ВидНалоговогоОбязательства;
	Если ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.Налог 
		ИЛИ ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.НалогАкт
		ИЛИ ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.НалогСам Тогда
		ВидНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыОбъекта.Налог, "ВидНалога");
		Если ВидНалога = Перечисления.ВидыНалогов.НалогНаПрибыль_РегиональныйБюджет
			ИЛИ ВидНалога = Перечисления.ВидыНалогов.НалогНаПрибыль_ФедеральныйБюджет Тогда
			КонтекстОперации = "НалогНаПрибыль";
		КонецЕсли;
	Иначе
		КонтекстОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога;
	КонецЕсли;
	
	СтатьяДДСПоУмолчанию = УчетДенежныхСредствВызовСервера.СтатьяДДСПоУмолчанию(КонтекстОперации);
	
	Если НЕ ЗначениеЗаполнено(СтатьяДДСПоУмолчанию) Тогда
		Если КонтекстОперации = "НалогНаПрибыль" Тогда
			СтатьяДДСПоУмолчанию = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
		Иначе
			СтатьяДДСПоУмолчанию = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтатьяДДСПоУмолчанию;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПерезаполнитьСтатьюДДС(Форма)
	
	Объект = Форма.Объект;
	КонтекстОперации = Объект.ВидОперации;
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога
		И (Объект.ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.Налог 
			ИЛИ Объект.ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.НалогАкт
			ИЛИ Объект.ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.НалогСам) Тогда
			
		ВидНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Налог, "ВидНалога");
		Если ВидНалога = Перечисления.ВидыНалогов.НалогНаПрибыль_РегиональныйБюджет
			ИЛИ ВидНалога = Перечисления.ВидыНалогов.НалогНаПрибыль_ФедеральныйБюджет Тогда
			КонтекстОперации = "НалогНаПрибыль";
		КонецЕсли;
		
	КонецЕсли;
	
	Объект.СтатьяДвиженияДенежныхСредств = УчетДенежныхСредствБП.СтатьяДДСПоУмолчанию(КонтекстОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеПриИзменении(Элемент)
	
	СостояниеПриИзмененииНаСервере();
	
	// СПАРК Риски
	ИндексыСПАРКРиски = Неопределено;
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьОтображениеИндексыСПАРК", 0.1, Истина);
	// Конец СПАРК Риски
	
КонецПроцедуры

&НаСервере
Процедура СостояниеПриИзмененииНаСервере()

	Если Состояние = Перечисления.СостоянияБанковскихДокументов.Оплачено Тогда
		
		ДокументСписания = НайтиДокументСписанияНаСервере(
			Объект.Ссылка, Объект.ДокументОснование, НадписьДокументСписания);
			
	КонецЕсли;
		
	ПоказатьИндексыСПАРК = ПоказатьИнформациюСпарк(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура СостояниеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбменСБанкамиКлиент.ОткрытьАктуальныйЭД(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойстваПоляСостояние(Форма)

	Объект		 = Форма.Объект;
	Элементы	 = Форма.Элементы;
	Если Форма.ТолькоПросмотр Тогда
		
		Элементы.Состояние.ТолькоПросмотр = Истина;
		Элементы.Состояние.КнопкаОткрытия = Ложь;
		
	Иначе
		
		Если ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.СчетОрганизации) Тогда
			
			ЕстьНастройкаДиректБанк = Ложь;
			СписокВыбора = Новый Массив;
			НастройкаДиректБанк(ЕстьНастройкаДиректБанк, Объект.Организация, Объект.СчетОрганизации, СписокВыбора);
			Элементы.Состояние.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
			Элементы.Состояние.ТолькоПросмотр = ЕстьНастройкаДиректБанк;
			Элементы.Состояние.КнопкаОткрытия = ЕстьНастройкаДиректБанк;
			
		Иначе
			
			Элементы.Состояние.ТолькоПросмотр = Истина;
			Элементы.Состояние.КнопкаОткрытия = Ложь;
			
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура НастройкаДиректБанк(ЕстьНастройкаДиректБанк, Знач Организация, Знач БанковскийСчет, СписокВыбора)
	
	Банк = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, "Банк");
	
	ЕстьНастройкаДиректБанк = ОбменСБанками.НастройкаОбмена(Организация, Банк) <> Неопределено;
	
	СписокВыбора.Добавить(Перечисления.СостоянияБанковскихДокументов.Подготовлено);
	СписокВыбора.Добавить(Перечисления.СостоянияБанковскихДокументов.Отправлено);
	СписокВыбора.Добавить(Перечисления.СостоянияБанковскихДокументов.Оплачено);
	СписокВыбора.Добавить(Перечисления.СостоянияБанковскихДокументов.Отклонено);
	Если ЕстьНастройкаДиректБанк Тогда
			
		СписокВыбора.Добавить(Перечисления.СостоянияБанковскихДокументов.НаПодписи);
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСостояниеОбмена(Ссылка)

	Возврат РегистрыСведений.СостоянияБанковскихДокументов.ТекущееСостояниеДокумента(Ссылка);

КонецФункции

// Конец СтандартныеПодсистемы.Печать
