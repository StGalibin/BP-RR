#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура СкопироватьТабличныеЧастиСчетаНаОплату(ИменаТабличныхЧастей, Счет)
	
	Перем РеквизитыОснования;
	
	Если Не ЗначениеЗаполнено(Счет) Тогда
		Возврат;
	КонецЕсли;
	
	МассивИмен = СтрРазделить(ИменаТабличныхЧастей, ", ", Ложь);
	
	Для Каждого ИмяТабЧасти Из МассивИмен Цикл
		ЭтотОбъект[ИмяТабЧасти].Очистить();
	КонецЦикла;
	
	СкопироватьТовары         = (МассивИмен.Найти("Товары") <> Неопределено);
	СкопироватьУслуги         = (МассивИмен.Найти("Услуги") <> Неопределено);
	СкопироватьВозвратнуюТару = (МассивИмен.Найти("ВозвратнаяТара") <> Неопределено);
	
	РеализацииПоСчету = Документы.РеализацияТоваровУслуг.РеализацииПоСчету(Счет);
	ЭтаРеализация = РеализацииПоСчету.Найти(Ссылка);
	Если ЭтаРеализация <> Неопределено Тогда
		РеализацииПоСчету.Удалить(ЭтаРеализация);
	КонецЕсли;
	
	// Товары и Услуги
	Если СкопироватьТовары Или СкопироватьУслуги Тогда
		
		ТоварыУслугиКРеализации = Документы.РеализацияТоваровУслуг.ТоварыУслугиКРеализацииПоСчету(Счет, РеализацииПоСчету);
		
		Для Каждого СтрокаОснования Из ТоварыУслугиКРеализации Цикл
			
			Если СтрокаОснования.ЭтоУслуга Тогда
				Если СкопироватьУслуги Тогда
					ЗаполнитьЗначенияСвойств(Услуги.Добавить(), СтрокаОснования);
				КонецЕсли;
			Иначе
				Если СкопироватьТовары Тогда
					ЗаполнитьЗначенияСвойств(Товары.Добавить(), СтрокаОснования);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Счет, "ДокументБезНДС, СуммаВключаетНДС");
		ДокументБезНДС = РеквизитыОснования.ДокументБезНДС;
		
	КонецЕсли;
	
	// Пересчет сумм в табличной части Товары
	Если СкопироватьТовары И РеквизитыОснования.СуммаВключаетНДС <> СуммаВключаетНДС Тогда
		Для Каждого СтрокаТЧ Из Товары Цикл
			СтрокаТЧ.Сумма = СтрокаТЧ.Сумма + ?(СуммаВключаетНДС, СтрокаТЧ.СуммаНДС, -СтрокаТЧ.СуммаНДС);
			СтрокаТЧ.Цена = ?(СтрокаТЧ.Количество = 0, 0, СтрокаТЧ.Сумма/СтрокаТЧ.Количество);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, СуммаВключаетНДС);
		КонецЦикла;
	КонецЕсли;
	
	// Пересчет сумм в табличной части Услуги
	Если СкопироватьУслуги И  РеквизитыОснования.СуммаВключаетНДС <> СуммаВключаетНДС Тогда
		Для Каждого СтрокаТЧ Из Услуги Цикл
			СтрокаТЧ.Сумма = СтрокаТЧ.Сумма + ?(СуммаВключаетНДС, СтрокаТЧ.СуммаНДС, -СтрокаТЧ.СуммаНДС);
			СтрокаТЧ.Цена = ?(СтрокаТЧ.Количество = 0, СтрокаТЧ.Сумма, СтрокаТЧ.Сумма/СтрокаТЧ.Количество);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, СуммаВключаетНДС);
		КонецЦикла;
	КонецЕсли;
	
	// Возвратная тара
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВозвратнуюТару") И СкопироватьВозвратнуюТару Тогда
		ВозвратнаяТараКРеализации = Документы.РеализацияТоваровУслуг.ВозвратнаяТараКРеализацииПоСчету(Счет, РеализацииПоСчету);
		ВозвратнаяТара.Загрузить(ВозвратнаяТараКРеализации);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоПоступлению(ИмяТабЧасти, Режим, Поступление, ИмяТабЧастиИсточника = Неопределено, ЗаполнятьСчетаУчета = Истина) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Поступление) Тогда
		Возврат;
	КонецЕсли;
	
	ПлательщикНДС	= УчетнаяПолитика.ПлательщикНДС(Организация, Дата);
	
	ТабличнаяЧасть = ЭтотОбъект[ИмяТабЧасти];
	СтрокиДляЗаполненияСчетов = Новый Массив;
	
	Если ТабличнаяЧасть.Количество() > 0 И Режим = "Заполнить" Тогда
		ТабличнаяЧасть.Очистить();
	КонецЕсли;
	
	ТабЧастьИсточник = ?(ИмяТабЧастиИсточника = Неопределено, ИмяТабЧасти, ИмяТабЧастиИсточника);

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Поступление", Поступление);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.НомерСтроки,
	|	ПоступлениеТоваровУслугТовары.Номенклатура,
	|	ПоступлениеТоваровУслугТовары.Количество" +?(ТабЧастьИсточник = "Товары",",
	|	ПоступлениеТоваровУслугТовары.КоличествоМест,
	|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения,
	|	ПоступлениеТоваровУслугТовары.Коэффициент,
	|	ПоступлениеТоваровУслугТовары.СтавкаНДС,
	|	ПоступлениеТоваровУслугТовары.НомерГТД,
	|	ПоступлениеТоваровУслугТовары.СтранаПроисхождения", "") + "
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг."+ТабЧастьИсточник + " КАК ПоступлениеТоваровУслугТовары
	|
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка = &Поступление";
	
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, ДеятельностьНаПатенте, Склад,
		|ЭтоКомиссия, Реализация, ТипЦен, СуммаВключаетНДС, ДокументБезНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ЭтотОбъект);
	ДанныеОбъекта.Реализация	= Истина;
	ДанныеОбъекта.ЭтоКомиссия	= (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВидДоговора")
		= Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
		
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам);
	КонецЕсли;
		
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта, Ложь);
		
	Для Каждого СтрокаТоваров Из ТаблицаТоваров Цикл
		
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТоваров);
		
		СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТоваров.Номенклатура);
		Если СведенияОНоменклатуре = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИмяТабЧасти = "Товары" И ТабЧастьИсточник = "Товары" Тогда
			
			Если НЕ ПлательщикНДС Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = СведенияОНоменклатуре.СтавкаНДС;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИмяТабЧасти = "Товары" И ТабЧастьИсточник = "Оборудование" Тогда
			
			СтрокаТабличнойЧасти.ЕдиницаИзмерения	= СведенияОНоменклатуре.ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент		= СведенияОНоменклатуре.Коэффициент;
			СтрокаТабличнойЧасти.СтавкаНДС			= СведенияОНоменклатуре.СтавкаНДС;
			
		КонецЕсли;
		
		Если ИмяТабЧасти = "Услуги" Тогда 
			
			СтрокаТабличнойЧасти.Содержание = СведенияОНоменклатуре.НаименованиеПолное;
			
		КонецЕсли;
		
		СтрокаТабличнойЧасти.Цена = СведенияОНоменклатуре.Цена;
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ?(ИмяТабЧасти = "Услуги", 1, 0));
		
		Если ИмяТабЧасти <> "ВозвратнаяТара" Тогда
			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, СуммаВключаетНДС);
			
		КонецЕсли;
		
		СтрокиДляЗаполненияСчетов.Добавить(СтрокаТабличнойЧасти);
		
	КонецЦикла;
	
	Если ЗаполнятьСчетаУчета Тогда
		
		СчетаУчетаВДокументах.ЗаполнитьСтроки(
			СтрокиДляЗаполненияСчетов, ИмяТабЧасти, ЭтотОбъект, Документы.РеализацияТоваровУслуг);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоСчету(ИменаТабличныхЧастей, Счет) Экспорт
	
	Если Не ЗначениеЗаполнено(Счет) Тогда
		Возврат;
	КонецЕсли;
	
	СкопироватьТабличныеЧастиСчетаНаОплату(ИменаТабличныхЧастей, Счет);
	
	МассивИмен = СтрРазделить(ИменаТабличныхЧастей, ", ", Ложь);
	Для Каждого ИмяТабЧасти Из МассивИмен Цикл
		СчетаУчетаВДокументах.ЗаполнитьСтроки(ЭтотОбъект[ИмяТабЧасти], ИмяТабЧасти, ЭтотОбъект, Документы.РеализацияТоваровУслуг);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПоДокументуОснованию(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		
		// Заполним реквизиты шапки по документу основанию.
		ВидОперации = Документы.РеализацияТоваровУслуг.ОпределитьВидОперацииПоДокументуОснованию(Основание);
		
		ДанныеОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "АдресДоставки, СтруктурнаяЕдиница");
		АдресДоставки = ДанныеОснования.АдресДоставки;
		СчетНаОплатуПокупателю = Основание;
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание, Истина);
		
		ПараметрыОбъекта = Новый Структура("ВидОперации, ДеятельностьНаПатенте");
		ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, ЭтотОбъект);
		
		МассивВидовДоговоров   = Документы.РеализацияТоваровУслуг.ПолучитьМассивВидовДоговоров(ВидОперации, ДеятельностьНаПатенте);
		ВидДоговораКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВидДоговора");
		
		Если МассивВидовДоговоров.Найти(ВидДоговораКонтрагента) = Неопределено Тогда
			ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
		
		// заполним банковский счет
		Если ЗначениеЗаполнено(ДанныеОснования.СтруктурнаяЕдиница)
		   И ТипЗнч(ДанныеОснования.СтруктурнаяЕдиница) = БухгалтерскийУчетКлиентСерверПереопределяемый.ТипЗначенияБанковскогоСчетаОрганизации() Тогда
			БанковскийСчетОрганизации = ДанныеОснования.СтруктурнаяЕдиница;
		КонецЕсли;
		
		ИменаТабличныхЧастей = "Товары, Услуги, ВозвратнаяТара";
		СкопироватьТабличныеЧастиСчетаНаОплату(ИменаТабличныхЧастей, Основание);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ДанныеОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, 
			"ВалютаДокумента, ПодразделениеОрганизации, ВидОперации, Организация, Склад");
			
		Если ДанныеОснования.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
			ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование;
		Иначе
			ВидОперации = Документы.РеализацияТоваровУслуг.ОпределитьВидОперацииПоДокументуОснованию(Основание);
		КонецЕсли;
		
		ТипСклада = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеОснования.Склад, "ТипСклада");
		Если ТипСклада <> Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
			Склад = ДанныеОснования.Склад;
		КонецЕсли;
		
		Организация              = ДанныеОснования.Организация;
		ВалютаДокумента          = ДанныеОснования.ВалютаДокумента;
		ПодразделениеОрганизации = ДанныеОснования.ПодразделениеОрганизации;
		ЗаполнениеДокументов.Заполнить(ЭтотОбъект);
		
		// Флаги включения налогов.
		Если ЗначениеЗаполнено(ТипЦен) Тогда
			СуммаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТипЦен, "ЦенаВключаетНДС");
		Иначе
			СуммаВключаетНДС = Истина;
		КонецЕсли;
		
		// Счета учета будут заполнены позднее, при вызове ЗаполнениеДокументов.Заполнить()
		ЗаполнитьПоПоступлению("Товары", "Заполнить", Основание, "Товары", Ложь);
		ЗаполнитьПоПоступлению("ВозвратнаяТара", "Заполнить", Основание, "ВозвратнаяТара", Ложь);
		Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование Тогда
			ЗаполнитьПоПоступлению("Товары", "Добавить", Основание, "Оборудование", Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено Тогда
		
		Если ТипДанныхЗаполнения = Тип("Структура")
			И ДанныеЗаполнения.Свойство("АдресТаблицыНоменклатуры") Тогда
			
			СуммаВключаетНДС = ДанныеЗаполнения.СуммаВключаетНДС;
			ЗаполнитьИзТаблицыНоменклатуры(ДанныеЗаполнения.АдресТаблицыНоменклатуры, СуммаВключаетНДС);
			
		Иначе
		
			Если ТипДанныхЗаполнения <> Тип("Структура")
				И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
				ДокументОснование = ДанныеЗаполнения;
			ИначеЕсли ТипДанныхЗаполнения = Тип("Структура")
				И ДанныеЗаполнения.Свойство("Основание")
				И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Основание.Метаданные()) Тогда
				ДокументОснование = ДанныеЗаполнения.Основание;
			КонецЕсли;

			Если ДокументОснование <> Неопределено Тогда
				ЗаполнитьПоДокументуОснованию(ДокументОснование);
			Иначе
				СуммаВключаетНДС = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		СуммаВключаетНДС = Истина;
	КонецЕсли;
	
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения, Истина);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();
	
	СчетНаОплатуПокупателю = Документы.СчетНаОплатуПокупателю.ПустаяСсылка();
	
	ЗачетАвансов.Очистить();
	
	ОтветственныеЛицаБП.УстановитьОтветственныхЛиц(ЭтотОбъект);
	
	СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
	ВалютаДокумента, Дата);
	
	КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
	
	Если Товары.Количество() > 0 Тогда
		МассивТовары = Новый Массив(Товары.Количество());
		
		Товары.ЗагрузитьКолонку(МассивТовары, "Себестоимость");
		Товары.ЗагрузитьКолонку(МассивТовары, "ДокументОприходования");
		
		Если ОбъектКопирования.ЕстьМаркируемаяПродукцияГИСМ Тогда
			Товары.ЗагрузитьКолонку(МассивТовары, "КиЗ_ГИСМ");
		КонецЕсли;
	КонецЕсли;
	
	РаботаСНоменклатурой.ОбновитьСодержаниеУслуг(Услуги, Дата);
	РаботаСНоменклатурой.ОбновитьСодержаниеУслуг(АгентскиеУслуги, Дата);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВозвратнуюТару")
		И ВозвратнаяТара.Количество() > 0 Тогда
		ВозвратнаяТара.Очистить();
	КонецЕсли;
	
	ЭтоОтгрузка = ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности;
	
	Если ЭтоОтгрузка Тогда
		// Для вида операциия "Отгрузка ..." синхронизацию счета-фактуры делаем всегда, т.к. зависит от учетной политики.
		НачислятьНДСПоОтгрузке = УчетнаяПолитика.НачислятьНДСПоОтгрузке(Организация, Дата);
		Если НачислятьНДСПоОтгрузке Тогда
			УчетНДСПереопределяемый.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураВыданный");
		Иначе
			УчетНДСПереопределяемый.УстановкаПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураВыданный", Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если УчетнаяПолитика.СпособОценкиМПЗ(Организация, Дата) <> Перечисления.СпособыОценки.ФИФО 
		И НЕ ПолучитьФункциональнуюОпцию("ОсуществляетсяРеализацияТоваровУслугКомитентов")
		И Товары.Количество() > 0 Тогда
		
		МассивТовары = Новый Массив(Товары.Количество());
		Товары.ЗагрузитьКолонку(МассивТовары, "ДокументОприходования");
		
	КонецЕсли; 

	// При групповом перепроведении реквизиты документов не меняются,
	// поэтому обновление связанных данных выполнять не требуется.
	Если ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	РаботаСДоговорамиКонтрагентовБП.ЗаполнитьДоговорПередЗаписью(ЭтотОбъект);
	
	ЭтоКомиссия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ДоговорКонтрагента, "ВидДоговора") = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары")
		+ УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги")
		+ УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "АгентскиеУслуги");

	// Почистим лишние табличные частях.
	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Товары Тогда
	
		Услуги.Очистить();
		АгентскиеУслуги.Очистить();
		ВозвратнаяТара.Очистить();
	
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Услуги Тогда
		
		Товары.Очистить();
		АгентскиеУслуги.Очистить();
		ВозвратнаяТара.Очистить();
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование Тогда
		Для каждого СтрокаТаблицы Из ЭтотОбъект.Товары Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.НомерГТД)Тогда
				СтрокаТаблицы.НомерГТД = Неопределено;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТаблицы.СтранаПроисхождения)Тогда
				СтрокаТаблицы.СтранаПроисхождения = Неопределено;
			КонецЕсли;
		КонецЦикла;
	
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности Тогда
		Услуги.Очистить();
		АгентскиеУслуги.Очистить();
		
	КонецЕсли;
	
	// Если передаем товар на комиссию, то услуг не может быть
	Если ЭтоКомиссия ИЛИ ЭтоОтгрузка Тогда
		Услуги.Очистить();
	КонецЕсли;

	СчетаУчетаВДокументах.ЗаполнитьПередЗаписью(ЭтотОбъект, РежимЗаписи);
	
	// Для вида операциия "Отгрузка ..." синхронизацию счета-фактуры делаем всегда, т.к. зависит от учетной политики.
	Если НЕ ЭтоОтгрузка И ПравоДоступа("Изменение", Метаданные.Документы.СчетФактураВыданный) Тогда
		Если ЭтоКомиссия Тогда 
			УчетНДСПереопределяемый.УстановкаПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураВыданный", Истина);
		Иначе 	
			УчетНДСПереопределяемый.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураВыданный");
		КонецЕсли;
	КонецЕсли;
	
	Если ПравоДоступа("Изменение", Метаданные.Документы.КорректировкаРеализации) Тогда
		Документы.КорректировкаРеализации.ОбновитьРеквизитыСвязанныхДокументовКорректировки(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	ИнтеграцияГИСМБП.УстановитьПризнакЕстьМаркируемаяПродукцияГИСМ(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		УчетНДСПереопределяемый.ПроверитьСоответствиеРеквизитовСчетаФактурыВыданного(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ПроверяемыеРеквизиты.Найти("Склад") = Неопределено Тогда
		ПроверяемыеРеквизиты.Добавить("Склад");
	КонецЕсли;

	// Определяем условия проведения документа:
	ЭтоКомиссия             = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ДоговорКонтрагента, "ВидДоговора") = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером;
	ВестиУчетПоДоговорам    = ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам");
	
	// Исключаем из проверки реквизиты, заполнение которых стало необязательным:
	МассивНепроверяемыхРеквизитов = Новый Массив();

	// Не проверяем заполненность табличных частей (включая реквизиты), 
	// которые не используются при определенных видах операции и будут очищены в ПередЗаписью
	НеИспользуемыеТабличныеЧасти = Документы.РеализацияТоваровУслуг.НеИспользуемыеТабличныеЧасти(ВидОперации, ЭтоКомиссия);
	
	ОбщегоНазначенияБП.ИсключитьИзПроверкиНеиспользуемыеТабличныеЧасти(
		ПроверяемыеРеквизиты,
		НеИспользуемыеТабличныеЧасти);
		
	// Документ без данных о реализованных товарах или услугах
	// считаем заполненным некорректно.
	
	ОсновныеСписки = Новый Массив();
	ОсновныеСписки.Добавить("Товары");
	ОсновныеСписки.Добавить("ВозвратнаяТара");
	ОсновныеСписки.Добавить("Услуги");
	ОсновныеСписки.Добавить("АгентскиеУслуги");
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ОсновныеСписки, НеИспользуемыеТабличныеЧасти);
	
	ОбщегоНазначенияБП.ИсключитьИзПроверкиОсновныеТабличныеЧасти(
		ЭтотОбъект, 
		ОсновныеСписки, 
		ПроверяемыеРеквизиты);
		
	МассивНепроверяемыхРеквизитов.Добавить("Патент");
	
	// Склад нужен только тогда, когда реализовываются материальные ценности
	Если Товары.Количество() + ВозвратнаяТара.Количество() = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Склад");
	КонецЕсли;

	// Проверяем корректность заполнения реквизитов шапки:
	
	Если НЕ ВестиУчетПоДоговорам Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДоговорКонтрагента");
	КонецЕсли;
	
	Если ВестиУчетПоДоговорам И ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ТекстСообщения = "";
		Если НЕ УчетВзаиморасчетов.ПроверитьВозможностьПроведенияВРеглУчете(
			ЭтотОбъект, ДоговорКонтрагента, ТекстСообщения) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Корректность",
				НСтр("ru = 'Договор'"),,, ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,
				"ДоговорКонтрагента", "Объект", Отказ);
		КонецЕсли;
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия
		Или ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Товары
		Или ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности
		Или ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Услуги Тогда
	
		Если ДеятельностьНаПатенте И Не ЗначениеЗаполнено(Патент) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Заполнение",
				НСтр("ru = 'Доходы в НУ'"),,, ТекстСообщения);
			Поле = "ОтражениеДоходов";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, , Отказ);
		КонецЕсли;
	
	КонецЕсли;

	// Исключаем из проверки те реквизиты табличных частей, обязательность которых
	//  зависит от значений других рекивизитов в строках табличных частей:
	МассивНепроверяемыхРеквизитов.Добавить("Товары.СтранаПроисхождения");
	
	// Проверяем табличную часть "Товары":
	Если Товары.Количество() > 0 Тогда
		ИмяСписка = НСтр("ru = 'Товары'");
		
		Для каждого СтрокаТовары Из Товары Цикл
			// Проверка номера ГТД.
			Если УчетТоваров.НеУказанаСтранаПроисхождения(СтрокаТовары.НомерГТД, СтрокаТовары.СтранаПроисхождения) Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, НСтр("ru = 'Страна происхождения'"),
					СтрокаТовары.НомерСтроки, ИмяСписка);
					
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаТовары.НомерСтроки, "СтранаПроисхождения");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;

	// Проверка заполнения табличной части "АгентскиеУслуги"
	ИмяСписка = НСтр("ru = 'Агентские услуги'");

	Если ЭтоКомиссия И АгентскиеУслуги.Количество() > 0 Тогда
		ТекстСообщения = НСтр("ru = 'Документ передачи на комиссию не может содержать услуг.'");
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Список", "Корректность",,,
			ИмяСписка, ТекстСообщения);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "АгентскиеУслуги", "Объект", Отказ);
	КонецЕсли;

	// Проверка заполнения табличной части "Зачет авансов"
	Если СпособЗачетаАвансов <> Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ЗачетАвансов");
	ИначеЕсли ЗачетАвансов.Количество() = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ЗачетАвансов");
	
		ТекстСообщения = НСтр("ru = 'Не введено ни одной строки с документом аванса!'");
		Поле = "ПорядокУчетаРасчетов";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , Поле, Отказ);
	КонецЕсли;
	

	// Проверка табличной части "Возвратная тара"

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВозвратнуюТару") Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.Номенклатура");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.Количество");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.Сумма");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.СчетУчета");
	КонецЕсли;

	// Эти реквизиты проверяются в документе с помощью специального, нетипового механизма. Проверка размещена в ПроверитьЗаполнениеСубконто()
	МассивНепроверяемыхРеквизитов.Добавить("Товары.Субконто");
	МассивНепроверяемыхРеквизитов.Добавить("Услуги.Субконто");
	
	// Удаляем из проверяемых реквизитов все, по которым автоматическая проверка не нужна:
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

	РеквизитыЗаСсылками = Документы.РеализацияТоваровУслуг.РеквизитыЗаСсылками(ВидОперации);
	
	Если Не СчетаУчетаВДокументах.ПроверитьЗаполнение(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, РеквизитыЗаСсылками) Тогда
		ПроверитьЗаполнениеСубконто(Отказ);
	КонецЕсли;
	
	ПроверкаЗаполненияДокументов.ПроверитьРеквизитыЗаСсылками(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, РеквизитыЗаСсылками);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА

	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;

	ПараметрыПроведения = Документы.РеализацияТоваровУслуг.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ

	// Таблица списанных товаров
	ТаблицаСписанныеТовары = УчетТоваров.ПодготовитьТаблицуСписанныеТовары(ПараметрыПроведения.СписаниеТоваровТаблицаТовары,
		ПараметрыПроведения.СписаниеТоваровРеквизиты, Отказ);

	// Таблица списанной тары
	ТаблицаСписаннаяТара = УчетТоваров.ПодготовитьТаблицуСписанныеТовары(ПараметрыПроведения.ТараТаблицаТовары,
		ПараметрыПроведения.ТараРеквизиты, Отказ);

	// Таблица взаиморасчетов с учетом зачета авансов
	ТаблицаВзаиморасчеты = УчетВзаиморасчетов.ПодготовитьТаблицуВзаиморасчетовЗачетАвансов(
		ПараметрыПроведения.ЗачетАвансовТаблицаДокумента, ПараметрыПроведения.ЗачетАвансовТаблицаАвансов,
		ПараметрыПроведения.ЗачетАвансовРеквизиты, Отказ);
		
	СтруктураТаблицДляУСН = 
		Документы.РеализацияТоваровУслуг.ПодготовитьСтруктуруТаблицУСН(
				ПараметрыПроведения.ЗачетАвансовРеквизиты,
				ПараметрыПроведения.ЗачетАвансовТаблицаДокумента,
				ТаблицаВзаиморасчеты);
			
	ТаблицаПрочихРасчетовУСН = СтруктураТаблицДляУСН.ТаблицаПрочихРасчетовУСН;
	ТаблицаВзаиморасчетыУСН    = СтруктураТаблицДляУСН.ТаблицаВзаиморасчетыУСН;
	
	ТаблицаВзаиморасчеты = УчетВзаиморасчетов.ОчиститьСуммыСпециальныхРежимовЗачетАвансов(
		ПараметрыПроведения.ЗачетАвансовРеквизиты, ТаблицаВзаиморасчеты, Отказ);
	
	СтруктураТаблицДляИП = 
		Документы.РеализацияТоваровУслуг.ПодготовитьСтруктуруТаблицИП(
			ПараметрыПроведения.Реквизиты, ТаблицаВзаиморасчеты);
			
	ТаблицаПрочихРасчетовИП = СтруктураТаблицДляИП.ТаблицаПрочихРасчетовИП;
	ТаблицаВзаиморасчетыИП  = СтруктураТаблицДляИП.ТаблицаВзаиморасчетыИП;
			
	ЕдинаяТаблицаДляРегистраПрочихРасчетов = ТаблицаПрочихРасчетовУСН.Скопировать();
	
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(
		ТаблицаПрочихРасчетовИП, 
		ЕдинаяТаблицаДляРегистраПрочихРасчетов);

	// Таблицы выручки от реализации: собственных товаров и услуг и отдельно комиссионных
	ТаблицыРеализация = УчетДоходовРасходов.ПодготовитьТаблицыВыручкиОтРеализации(
		ПараметрыПроведения.РеализацияТаблицаДокумента, ТаблицаВзаиморасчеты, ТаблицаСписанныеТовары,
		ПараметрыПроведения.Реквизиты, Отказ);
	ТаблицаСобственныеТоварыУслуги = ТаблицыРеализация.СобственныеТоварыУслуги;
	ТаблицаТоварыУслугиКомитентов = ТаблицыРеализация.ТоварыУслугиКомитентов;
	ТаблицаРеализованныеТоварыКомитентов = ТаблицыРеализация.РеализованныеТоварыКомитентов;

	Документы.РеализацияТоваровУслуг.ДобавитьКолонкуСодержание(ТаблицыРеализация.СобственныеТоварыУслуги);
	Документы.РеализацияТоваровУслуг.ДобавитьКолонкуСодержание(ПараметрыПроведения.НДСТоварыОтгрузка);
	// Структура таблиц для отражения в налоговом учете УСН
	СтруктураТаблицУСН = Новый Структура("ТаблицаТМЦ, ТаблицаРасчетов", ТаблицаСписанныеТовары, ТаблицаВзаиморасчетыУСН);
	
	// Учет доходов и расходов ИП
	Если ПараметрыПроведения.Реквизиты[0].ВидОперации <> Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности
		И ПараметрыПроведения.Реквизиты[0].ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		
		СписанныеМПЗ = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицуСписанныеМПЗ(
			ТаблицаСписанныеТовары, ПараметрыПроведения.РеализацияТаблицаДокумента, ПараметрыПроведения.Реквизиты)
	КонецЕсли;
	
	ТаблицыСписанияТоваровИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицыСписанияМПЗ(
		СписанныеМПЗ, ПараметрыПроведения.Реквизиты, Отказ);
	ТаблицаОказаниеУслугИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицуОказаниеУслуг(
		ТаблицыРеализация.СобственныеТоварыУслуги, ПараметрыПроведения.Реквизиты);
	
	Если Не ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда
		ТаблицаСтатусовСчетов = СтатусыДокументов.ПодготовитьТаблицуСтатусовОтгрузкиПоСчетам(
			ПараметрыПроведения.ОтгрузкаТоваровОказаниеУслугПоСчету,
			ПараметрыПроведения.ОтгрузкаВозвратнойТарыПоСчету,
			ПараметрыПроведения.Реквизиты);
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	// Движения по прочим расчетам
	УчетВзаиморасчетов.СформироватьДвиженияПоПрочимРасчетам(ЕдинаяТаблицаДляРегистраПрочихРасчетов, Движения, Отказ);

	УчетТоваров.СформироватьДвиженияСписаниеТоваров(ТаблицаСписанныеТовары,
		ПараметрыПроведения.СписаниеТоваровРеквизиты, Движения, Отказ);
		
	УчетТоваров.СформироватьДвиженияВозвратТоваровПоставщику(
		ПараметрыПроведения.ТараТаблицаТовары, ТаблицаСписаннаяТара,
		ПараметрыПроведения.ТараРеквизиты, Движения, Отказ);

	УчетТоваров.СформироватьДвиженияКорректировкаСтоимостиТары(
		ПараметрыПроведения.ТараТаблицаТовары, ТаблицаСписаннаяТара,
		ПараметрыПроведения.ТараРеквизиты, Движения, Отказ);

	УчетВзаиморасчетов.СформироватьДвиженияЗачетАвансов(ТаблицаВзаиморасчеты,
		ПараметрыПроведения.ЗачетАвансовРеквизиты, Движения, Отказ);
	УчетВзаиморасчетов.СформироватьДвиженияЗачетАвансовКомитентов(ТаблицаТоварыУслугиКомитентов,
		ПараметрыПроведения.ЗачетАвансовКомитентовРеквизиты, Движения, Отказ);
	УчетВзаиморасчетов.СформироватьТолькоДвиженияПоСчетамУСНЗачетАвансов(ТаблицаВзаиморасчетыУСН,
		ПараметрыПроведения.ЗачетАвансовРеквизиты, Движения, Отказ);
	УчетДоходовРасходов.СформироватьДвиженияРеализация(
		ТаблицаСобственныеТоварыУслуги, ТаблицаТоварыУслугиКомитентов, ТаблицаРеализованныеТоварыКомитентов,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	УчетДоходовРасходов.СформироватьДвиженияПереоценкаТоваровВРознице(
		ПараметрыПроведения.ПереоценкаТоваровВРозницеТаблицаТовары, ТаблицаСписанныеТовары,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	РегистрыНакопления.РеализацияУслуг.ДобавитьДвижения(
		Движения.РеализацияУслуг,
		ПараметрыПроведения.ТаблицаРеализацияУслуг,
		ТаблицаСобственныеТоварыУслуги,
		ПараметрыПроведения.Реквизиты);
	// Учет НДС
	УчетНДС.СформироватьДвиженияРеализацияТоваровУслуг(
		ТаблицаСобственныеТоварыУслуги, ПараметрыПроведения.НДСТоварыРеализация, ТаблицаСписанныеТовары,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	УчетНДС.СформироватьДвиженияРеализацияКомиссионныхТоваров(
		ПараметрыПроведения.НДСТоварыНаКомиссииРеализация, 
		ТаблицаТоварыУслугиКомитентов,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетНДСБП.СформироватьДвиженияОтгрузкаКомиссионеру(
		ПараметрыПроведения.НДСТоварыОтгрузкаКомиссионеру, ТаблицаСписанныеТовары,  
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	НДСТоварыОтгрузка = Документы.РеализацияТоваровУслуг.ПодготовитьТаблицуНДСПоОтгрузкеСУчетомКурсаАвансов(
		ПараметрыПроведения.НДСТоварыОтгрузка, ТаблицаВзаиморасчеты, ПараметрыПроведения.Реквизиты);
		
	УчетНДС.СформироватьДвиженияОтгрузкаБезПереходаПраваСобственности(
		НДСТоварыОтгрузка, ТаблицаСписанныеТовары,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	// Задолженность при отгрузке без перехода права собственности в у.е.
	УчетВзаиморасчетов.СформироватьДвиженияЗадолженностьПоОтгрузкеВУЕ(
		ТаблицаВзаиморасчеты, ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	// Движения регистра "Рублевые суммы документов в валюте"

	УчетНДСБП.СформироватьДвиженияРублевыеСуммыДокументовВВалюте(ТаблицаСобственныеТоварыУслуги, 
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	УчетНДСБП.СформироватьДвиженияРублевыеСуммыДокументовВВалюте(ТаблицаТоварыУслугиКомитентов, 
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	УчетНДСБП.СформироватьДвиженияРублевыеСуммыДокументовВВалютеБезНДС(ПараметрыПроведения.ТараТаблицаТовары, 
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	УчетНДСБП.СформироватьДвиженияРублевыеСуммыДокументовВВалюте(
		НДСТоварыОтгрузка, ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	УчетНДСБП.СформироватьДвиженияРублевыеСуммыДокументовВВалюте(ПараметрыПроведения.РублевыеСуммыДокументаВВалюте, 
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	// Учет УСН
	НалоговыйУчетУСН.СформироватьДвиженияУСН(ЭтотОбъект, СтруктураТаблицУСН);
	
	// Учет доходов и расходов ИП
	ТаблицаИПМПЗОтгруженные	= УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияСписаниеМПЗ(
		ТаблицыСписанияТоваровИП,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	ТаблицаИПМПЗОтгруженныеУслуги = УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияОказаниеУслуг(
		ТаблицаОказаниеУслугИП,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаИПМПЗОтгруженныеУслуги, ТаблицаИПМПЗОтгруженные);
		
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияЗачетОплатыПокупателя(
		ТаблицаИПМПЗОтгруженные,
		СтруктураТаблицДляИП.ТаблицаВзаиморасчетыИП, 
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	// ПЕРЕОЦЕНКА ВАЛЮТНЫХ ОСТАТКОВ
	ТаблицаПереоценка = УчетДоходовРасходов.ПодготовитьТаблицуПереоценкаВалютныхОстатковПоПроводкамДокумента(
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	УчетДоходовРасходов.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценка,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	УчетУСН.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценка,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	Если Не ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда
		СтатусыДокументов.СформироватьДвиженияСтатусовДокументов(
			ТаблицаСтатусовСчетов, ПараметрыПроведения.Реквизиты);
	КонецЕсли;
	
	// Отложенные расчеты с контрагентами.
	УчетВзаиморасчетовОтложенноеПроведение.ЗарегистрироватьОтложенныеРасчетыСКонтрагентами(
		ЭтотОбъект, Отказ, ПараметрыПроведения.РасчетыСКонтрагентамиОтложенноеПроведение);

	// Регистрация в последовательности.
	РаботаСПоследовательностями.ЗарегистрироватьОтложенныеРасчетыВПоследовательности(
		ЭтотОбъект,
		Отказ,
		ПараметрыПроведения.РасчетыСКонтрагентамиОтложенноеПроведение,
		РаботаСПоследовательностями.ПодготовитьТаблицуСчетовТоваровДляАнализа(ТаблицаСписанныеТовары, ТаблицаСписаннаяТара),
		Перечисления.ВидыРегламентныхОпераций.РасчетДолейСписанияКосвенныхРасходов);

	Движения.Записать();
	УчетНДСПереопределяемый.УстановкаПроведенияУСчетаФактуры(Ссылка, "СчетФактураВыданный", Истина, Отказ,
		ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект));
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();

	УчетНДСПереопределяемый.УстановкаПроведенияУСчетаФактуры(Ссылка, "СчетФактураВыданный", Ложь, Отказ);

	РаботаСПоследовательностями.ОтменитьРегистрациюВПоследовательности(ЭтотОбъект, Отказ);

КонецПроцедуры

Процедура ПроверитьЗаполнениеСубконто(Отказ)
	
	УчетДоходовИРасходовПредпринимателя.ПроверитьЗаполнениеСубконтоНоменклатурныеГруппы(
		ЭтотОбъект, 
		"СчетДоходов", 
		"Субконто", 
		НСтр("ru = 'Субконто'"), 
		"Товары", 
		НСтр("ru = 'Товары'"), 
		Отказ);
			
	УчетДоходовИРасходовПредпринимателя.ПроверитьЗаполнениеСубконтоНоменклатурныеГруппы(
		ЭтотОбъект,
		"СчетДоходов",
		"Субконто",
		НСтр("ru = 'Субконто'"),
		"Услуги",
		НСтр("ru = 'Услуги'"),
		Отказ);
			
КонецПроцедуры

Процедура ЗаполнитьИзТаблицыНоменклатуры(АдресТаблицыНоменклатуры, СуммаВключаетНДС)
	
	ТаблицаНоменклатуры = ПолучитьИзВременногоХранилища(АдресТаблицыНоменклатуры);
	
	Для каждого Элемент Из ТаблицаНоменклатуры Цикл
		
		Если Элемент.Номенклатура.Услуга Тогда
			НоваяСтрока = Услуги.Добавить();
		Иначе
			НоваяСтрока = Товары.Добавить();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент);
		НоваяСтрока.СтавкаНДС = Элемент.Номенклатура.СтавкаНДС;
		НоваяСтрока.СуммаНДС  = УчетНДСКлиентСервер.РассчитатьСуммуНДС(НоваяСтрока.Сумма,
			СуммаВключаетНДС,
			УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
		
	КонецЦикла;

КонецПроцедуры

#КонецЕсли