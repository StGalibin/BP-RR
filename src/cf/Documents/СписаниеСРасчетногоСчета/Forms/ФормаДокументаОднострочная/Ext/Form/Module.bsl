&НаКлиенте
Перем СтрокаПоискаПоКБК;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СписаниеСРасчетногоСчетаФормы.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтотОбъект,
		"БП.Документ.СписаниеСРасчетногоСчета",
		"ФормаДокументаОднострочная",
		НСтр("ru = 'Новости: Списание с расчетного счета'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	СписаниеСРасчетногоСчетаФормы.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	СписаниеСРасчетногоСчетаФормы.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	СписаниеСРасчетногоСчетаФормыКлиент.ПослеЗаписи(ЭтотОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СписаниеСРасчетногоСчетаФормыКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
	Если НЕ Отказ Тогда
		
		Если СписаниеСРасчетногоСчетаФормыКлиентСервер.ЕстьРасшифровкаПлатежа(ЭтотОбъект) Тогда
			Если Объект.РасшифровкаПлатежа.Количество() < 2 Тогда
				ЗаполнитьРасшифровкаПлатежаИзРеквизитовФормы(ЭтотОбъект);
			КонецЕсли;
			
		ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП") Тогда
			Если Объект.ПеречислениеЗаработнойПлаты.Количество() < 2 Тогда
				ЗаполнитьПеречислениеЗаработнойПлатыИзРеквизитовФормы(ЭтотОбъект);
			КонецЕсли;
			
		ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДепонентов") Тогда
			Если Объект.ПеречислениеДепонентов.Количество() < 2 Тогда
				ЗаполнитьПеречислениеДепонентовИзРеквизитовФормы(ЭтотОбъект);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	СписаниеСРасчетногоСчетаФормы.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	СписаниеСРасчетногоСчетаФормыКлиент.ПередЗакрытием(ЭтотОбъект, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьФорму" И ТипЗнч(Источник) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		Прочитать();
	ИначеЕсли ИмяСобытия = "ИзмененБанковскийСчет" И Параметр.Владелец = Объект.Организация Тогда
		Если НЕ ЗначениеЗаполнено(Объект.СчетОрганизации) Тогда
			Объект.СчетОрганизации = Параметр.Ссылка;
			СчетОрганизацииПриИзмененииСервер(Новый Массив);
		КонецЕсли;
		
		УстановитьФункциональныеОпцииФормы();
	ИначеЕсли ИмяСобытия = "Запись_Организации" Тогда
		Если Источник = Объект.Организация Тогда
			
			СписаниеСРасчетногоСчетаФормыВызовСервера.ОбработатьИзмененияВОрганизации(
				Объект.Организация, ИспользоватьНесколькоБанковскихСчетовОрганизации,
				ОсновнойБанковскийСчетОрганизацииЗаполнен,
				Объект.СчетОрганизации);
			
			Элементы.ПредупреждениеОЗаполненииРеквизитовСчета.Видимость =
				ПроверкаРеквизитовОрганизацииКлиентСервер.ПоказатьПредупреждениеОРеквизитахСчета(ЭтотОбъект, Объект.Организация);
			Модифицированность = Истина;
			
		КонецЕсли;
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтотОбъект, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Документ.СписаниеСРасчетногоСчета.Форма.ФормаРасшифровкаПлатежа" Тогда
		ОбработкаВыбораРасшифровкаПлатежаНаСервере(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.СписаниеСРасчетногоСчета.Форма.ФормаПеречислениеЗаработнойПлаты" Тогда
		ОбработкаВыбораПеречислениеЗаработнойПлатыНаСервере(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.СписаниеСРасчетногоСчета.Форма.ФормаПеречислениеДепонентов" Тогда
		ОбработкаВыбораПеречислениеДепонентовНаСервере(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.СписаниеСРасчетногоСчета.Форма.ФормаПеречислениеНДФЛ" Тогда
		ОбработкаВыбораПеречислениеНДФЛНаСервере(ВыбранноеЗначение);
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Модифицированность = Истина;
		
		ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
		
		Если ВыбранноеЗначение.Свойство("СчетДт") Тогда
			Объект.СчетУчетаРасчетовСКонтрагентом = ВыбранноеЗначение.СчетДт;
			Если ВыбранноеЗначение.Свойство("АдресТаблицыНалоговыйАгентНДСВХранилище") Тогда
				ОбработкаВыбораНалоговыйАгентНДС(ВыбранноеЗначение);
			Иначе
				Объект.НалоговыйАгентНДС.Очистить();
			КонецЕсли;
			ПорядокОтраженияУплатыНалогаПриИзмененииНаСервере();
		КонецЕсли;
		
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	СписаниеСРасчетногоСчетаФормы.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата,
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);
	
	// Если есть договоры в у.е., то необходимо получение курсов валют.
	Если НЕ ТребуетсяВызовСервера Тогда
		ТребуетсяВызовСервера = ЕстьРасчетыВУсловныхЕдиницах;
	КонецЕсли;
	
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииСервер();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		ВидОперацииПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СписаниеСРасчетногоСчетаФормыКлиент.ВидОперацииАвтоПодбор(Объект.ВидОперации, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НалогПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Налог) Тогда
		НалогПриИзмененииНаСервере(Новый Массив, СтрокаПоискаПоКБК);
	Иначе
		ЭтоУплатаНДФЛ = Ложь;
	КонецЕсли;
	ОтобразитьГиперссылкуПерейтиВТаблицу();
	
КонецПроцедуры

&НаКлиенте
Процедура НалогАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СписаниеСРасчетногоСчетаФормыКлиент.НалогАвтоПодбор(
		ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НалогОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	СписаниеСРасчетногоСчетаФормыКлиент.НалогОкончаниеВводаТекста(
		ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидНалоговогоОбязательстваПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ВидНалоговогоОбязательства) Тогда
		ВидНалоговогоОбязательстваПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НалогЗаОбособленноеПодразделениеПриИзменении(Элемент)
	
	Если НЕ НалогЗаОбособленноеПодразделение Тогда
		Объект.РегистрацияВНалоговомОргане = Неопределено;
	КонецЕсли;
	СписаниеСРасчетногоСчетаФормыКлиентСервер.УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокОтраженияБУНажатие(Элемент, СтандартнаяОбработка)
	
	Если НЕ ТолькоПросмотр Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;

	СписаниеСРасчетногоСчетаФормыКлиент.ПорядокОтраженияБУНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетОрганизацииПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.СчетОрганизации) Тогда
		Возврат;
	КонецЕсли;
	
	СчетОрганизацииПриИзмененииСервер(Новый Массив);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
	СписаниеСРасчетногоСчетаФормыКлиент.ПодразделениеОрганизацииПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетБанкПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.СчетБанк) Тогда
		Возврат;
	КонецЕсли;
	
	СчетБанкПриИзмененииСервер(Новый Массив);
	
КонецПроцедуры

&НаКлиенте
Процедура НалогоплательщикПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Налогоплательщик) Тогда
		НалогоплательщикПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НалогоплательщикАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НалогоплательщикОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НалогоплательщикОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетКонтрагентаПриИзменении(Элемент)
	
	СчетКонтрагентаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	СуммаДокументаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСуммаДокументаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФормуТаблицы();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьРазбитьПлатежНажатие(Элемент)
	
	ОткрытьФормуТаблицы();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаРасчетовСКонтрагентомПереводПриИзменении(Элемент)
	
	СписаниеСРасчетногоСчетаФормыКлиентСервер.ПереводНаДругойСчетУстановитьДоступностьПодразделениеДт(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаПрочиеПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентом) Тогда
		Возврат;
	КонецЕсли;
	
	СчетУчетаПрочиеПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтПрочие1ПриИзменении(Элемент)
	
	СписаниеСРасчетногоСчетаФормыКлиент.СубконтоДтПрочиеПриИзменении(ЭтотОбъект, Элемент, 1, "Прочие");
	
	Если ПрименениеУСН И НЕ ПрименениеУСНДоходы Тогда
		ЗаполнитьОтражениеВУСННаСервере(Истина, Истина);
		СписаниеСРасчетногоСчетаФормыКлиентСервер.УправлениеЭлементамиОтраженияВУСН(ЭтотОбъект);
		СписаниеСРасчетногоСчетаФормыКлиентСервер.СформироватьТекстРасходыУСН(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтПрочие2ПриИзменении(Элемент)
	
	СписаниеСРасчетногоСчетаФормыКлиент.СубконтоДтПрочиеПриИзменении(ЭтотОбъект, Элемент, 2, "Прочие");
	
	Если ПрименениеУСН И НЕ ПрименениеУСНДоходы Тогда
		ЗаполнитьОтражениеВУСННаСервере(Истина, Истина);
		СписаниеСРасчетногоСчетаФормыКлиентСервер.УправлениеЭлементамиОтраженияВУСН(ЭтотОбъект);
		СписаниеСРасчетногоСчетаФормыКлиентСервер.СформироватьТекстРасходыУСН(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтПрочие3ПриИзменении(Элемент)
	
	СписаниеСРасчетногоСчетаФормыКлиент.СубконтоДтПрочиеПриИзменении(ЭтотОбъект, Элемент, 3, "Прочие");
	
	Если ПрименениеУСН И НЕ ПрименениеУСНДоходы Тогда
		ЗаполнитьОтражениеВУСННаСервере(Истина, Истина);
		СписаниеСРасчетногоСчетаФормыКлиентСервер.УправлениеЭлементамиОтраженияВУСН(ЭтотОбъект);
		СписаниеСРасчетногоСчетаФормыКлиентСервер.СформироватьТекстРасходыУСН(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтПрочие1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписаниеСРасчетногоСчетаФормыКлиент.СубконтоДтПрочиеНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка, "Прочие");
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтПрочие2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписаниеСРасчетногоСчетаФормыКлиент.СубконтоДтПрочиеНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка, "Прочие");
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтПрочие3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписаниеСРасчетногоСчетаФормыКлиент.СубконтоДтПрочиеНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка, "Прочие");
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаЗадержкаЗарплатыПриИзменении(Элемент)
	
	СписаниеСРасчетногоСчетаФормыКлиент.СчетУчетаЗадержкаЗарплатыПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтЗадержкаЗарплаты1ПриИзменении(Элемент)
	
	СписаниеСРасчетногоСчетаФормыКлиент.СубконтоДтЗадержкаЗарплатыПриИзменении(ЭтотОбъект, Элемент, 1, "ЗадержкаЗарплаты");
	
	Если ПрименениеУСН И НЕ ПрименениеУСНДоходы Тогда
		ЗаполнитьОтражениеВУСННаСервере(Истина, Истина);
		СписаниеСРасчетногоСчетаФормыКлиентСервер.УправлениеЭлементамиОтраженияВУСН(ЭтотОбъект);
		СписаниеСРасчетногоСчетаФормыКлиентСервер.СформироватьТекстРасходыУСН(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтЗадержкаЗарплаты2ПриИзменении(Элемент)
	
	СписаниеСРасчетногоСчетаФормыКлиент.СубконтоДтЗадержкаЗарплатыПриИзменении(ЭтотОбъект, Элемент, 2, "ЗадержкаЗарплаты");
	
	Если ПрименениеУСН И НЕ ПрименениеУСНДоходы Тогда
		ЗаполнитьОтражениеВУСННаСервере(Истина, Истина);
		СписаниеСРасчетногоСчетаФормыКлиентСервер.УправлениеЭлементамиОтраженияВУСН(ЭтотОбъект);
		СписаниеСРасчетногоСчетаФормыКлиентСервер.СформироватьТекстРасходыУСН(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтЗадержкаЗарплаты3ПриИзменении(Элемент)
	
	СписаниеСРасчетногоСчетаФормыКлиент.СубконтоДтЗадержкаЗарплатыПриИзменении(ЭтотОбъект, Элемент, 3, "ЗадержкаЗарплаты");
	
	Если ПрименениеУСН И НЕ ПрименениеУСНДоходы Тогда
		ЗаполнитьОтражениеВУСННаСервере(Истина, Истина);
		СписаниеСРасчетногоСчетаФормыКлиентСервер.УправлениеЭлементамиОтраженияВУСН(ЭтотОбъект);
		СписаниеСРасчетногоСчетаФормыКлиентСервер.СформироватьТекстРасходыУСН(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтЗадержкаЗарплаты1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписаниеСРасчетногоСчетаФормыКлиент.СубконтоДтЗадержкаЗарплатыНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка, "ЗадержкаЗарплаты");
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтЗадержкаЗарплаты2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписаниеСРасчетногоСчетаФормыКлиент.СубконтоДтЗадержкаЗарплатыНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка, "ЗадержкаЗарплаты");
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДтЗадержкаЗарплаты3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписаниеСРасчетногоСчетаФормыКлиент.СубконтоДтЗадержкаЗарплатыНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка, "ЗадержкаЗарплаты");
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтвержденоВыпискойБанкаПриИзменении(Элемент)
	
	СписаниеСРасчетногоСчетаФормыКлиент.ПодтвержденоВыпискойБанкаПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПлатежноеПоручениеНажатие(Элемент, СтандартнаяОбработка)
	
	СписаниеСРасчетногоСчетаФормыКлиент.НадписьПлатежноеПоручениеНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйПериодРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СписаниеСРасчетногоСчетаФормыКлиент.НалоговыйПериодРегулирование(ЭтотОбъект, Элемент, Направление, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйПериодПриИзменении(Элемент)
	
	СписаниеСРасчетногоСчетаФормыКлиент.НалоговыйПериодПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйПериодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписаниеСРасчетногоСчетаФормыКлиент.НалоговыйПериодНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВедомостьЗарплатаРаботникуПриИзменении(Элемент)
	
	ВедомостьЗарплатаРаботникуПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВедомостьЗарплатаРаботникуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписаниеСРасчетногоСчетаФормыКлиент.ВедомостьЗарплатаРаботникуНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВедомостьЗарплатаРаботникуОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписаниеСРасчетногоСчетаФормыКлиентСервер.УстановитьПустоеЗначениеПеречислениеЗаработнойПлатыВедомость(
		ЭтотОбъект, Объект.ПлатежнаяВедомость);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
	
	Если ПрименениеУСН И НЕ ПрименениеУСНДоходы Тогда
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога") Тогда
			ЗаполнитьОтражениеВУСННаСервере(Ложь, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДвиженияДенежныхСредствПрочиеПриИзменении(Элемент)
	
	Если ПрименениеУСН И НЕ ПрименениеУСНДоходы Тогда
		ЗаполнитьОтражениеВУСННаСервере(Ложь, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееРасходыУСНПриИзменении(Элемент)
	
	СписаниеСРасчетногоСчетаФормыКлиент.ПрочееРасходыУСНПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочееНДСУСНПриИзменении(Элемент)
	
	СписаниеСРасчетногоСчетаФормыКлиент.ПрочееНДСУСНПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыОрганизацииСсылкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ПроверкаРеквизитовОрганизацииКлиент.РеквизитыОрганизацииСсылкаОбработкаНавигационнойСсылки(Объект.Организация, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасшифровкаПлатежа

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзменении(Элемент)
	
	СписаниеСРасчетногоСчетаФормыКлиент.ИнициализироватьСвойстваПлатежа(ЭтотОбъект); // Только создаем структуру, если она еще не создана.
	
	Если РасшифровкаПлатежаДоговорКонтрагента = СвойстваПлатежа.ДоговорКонтрагента Тогда
		Возврат;
	КонецЕсли;
	
	РасшифровкаПлатежаДоговорКонтрагентаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКонтрагентаОткрытие(Элемент, СтандартнаяОбработка)
	
	СписаниеСРасчетногоСчетаФормыКлиент.РасшифровкаПлатежаДоговорКонтрагентаОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКонтрагентаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СписаниеСРасчетногоСчетаФормыКлиент.РасшифровкаПлатежаДоговорКонтрагентаОбработкаВыбора(ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКонтрагентаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СписаниеСРасчетногоСчетаФормыКлиент.РасшифровкаПлатежаДоговорКонтрагентаАвтоПодбор(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСпособПогашенияЗадолженностиПриИзменении(Элемент)
	
	СписаниеСРасчетногоСчетаФормыКлиент.РасшифровкаПлатежаСпособПогашенияЗадолженностиПриИзменении(
		ЭтотОбъект, Элемент);
	
	СписаниеСРасчетногоСчетаФормыКлиентСервер.УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписаниеСРасчетногоСчетаФормыКлиент.РасшифровкаПлатежаСделкаНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКурсВзаиморасчетовПриИзменении(Элемент)
	
	СписаниеСРасчетногоСчетаФормыКлиент.РасшифровкаПлатежаКурсВзаиморасчетовПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписаниеСРасчетногоСчетаФормыКлиент.РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Элемент)
	
	СписаниеСРасчетногоСчетаФормыКлиент.РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСтавкаНДСПриИзменении(Элемент)
	
	СписаниеСРасчетногоСчетаФормыКлиент.РасшифровкаПлатежаСтавкаНДСПриИзменении(ЭтотОбъект, Элемент);
	
	СформироватьНазначениеПлатежа();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаНДСПриИзменении(Элемент)
	
	СформироватьНазначениеПлатежа();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентомПриИзменении(Элемент)
	
	СписаниеСРасчетногоСчетаФормыКлиент.РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентомПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаНДСУСНПриИзменении(Элемент)
	
	СписаниеСРасчетногоСчетаФормыКлиент.РасшифровкаПлатежаНДСУСНПриИзменении(ЭтотОбъект, Элемент);
	СписаниеСРасчетногоСчетаФормыКлиентСервер.ОбновитьИтогиУСН(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаРасходыУСНПриИзменении(Элемент)
	
	СписаниеСРасчетногоСчетаФормыКлиент.РасшифровкаПлатежаРасходыУСНПриИзменении(ЭтотОбъект, Элемент);
	
	СписаниеСРасчетногоСчетаФормыКлиентСервер.ОбновитьИтогиУСН(ЭтотОбъект);
	
	СписаниеСРасчетногоСчетаФормыКлиентСервер.УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаВидПлатежаПоКредитамЗаймамПриИзменении(Элемент)
	
	СписаниеСРасчетногоСчетаФормыКлиент.РасшифровкаПлатежаВидПлатежаПоКредитамЗаймамПриИзменении(ЭтотОбъект, Элемент);
	
	СписаниеСРасчетногоСчетаФормыКлиентСервер.ОбновитьИтогиУСН(ЭтотОбъект);
	
	СписаниеСРасчетногоСчетаФормыКлиентСервер.УправлениеФормой(ЭтотОбъект)
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПеречислениеЗаработнойПлаты

&НаКлиенте
Процедура ПеречислениеЗаработнойПлатыВедомостьПриИзменении(Элемент)
	
	ПеречислениеЗаработнойПлатыВедомостьПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеЗаработнойПлатыВедомостьОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписаниеСРасчетногоСчетаФормыКлиентСервер.УстановитьПустоеЗначениеПеречислениеЗаработнойПлатыВедомость(
		ЭтотОбъект, ПеречислениеЗаработнойПлатыВедомость);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеЗаработнойПлатыВедомостьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписаниеСРасчетногоСчетаФормыКлиент.ПеречислениеЗаработнойПлатыВедомостьНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПеречислениеДепонентов

&НаКлиенте
Процедура ПеречислениеДепонентовВедомостьПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Контрагент) И ЗначениеЗаполнено(ПеречислениеДепонентовВедомость) Тогда
		Объект.СуммаДокумента = СписаниеСРасчетногоСчетаФормыВызовСервера.СуммаНеВыплаченнойЗарплатыРаботнику(
			Объект.Ссылка, Объект.Организация, Объект.Дата, Объект.Контрагент, ПеречислениеДепонентовВедомость, УчетЗарплатыИКадровВоВнешнейПрограмме);
	Иначе
		Объект.СуммаДокумента = 0;
	КонецЕсли;
	
	ПеречислениеДепонентовСуммаПлатежа = Объект.СуммаДокумента;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеДепонентовВедомостьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписаниеСРасчетногоСчетаФормыКлиент.ПеречислениеДепонентовВедомостьНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеДепонентовВедомостьОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СписаниеСРасчетногоСчетаФормыКлиентСервер.УстановитьПустоеЗначениеПеречислениеДепонентовВедомость(
		ЭтотОбъект, ПеречислениеДепонентовВедомость);
	
	ПеречислениеДепонентовСуммаПлатежа = Объект.СуммаДокумента;
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура РеестрУплатыНДФЛ(Команда)
	
	СписаниеСРасчетногоСчетаФормыКлиент.РеестрУплатыНДФЛ(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)
	
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтотОбъект,
		Команда
	);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()
	
	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, ИдентификаторыСобытийПриОткрытии);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере() Экспорт
	
	СписаниеСРасчетногоСчетаФормы.ПодготовитьФормуНаСервере(ЭтотОбъект);
	
	Если Документы.СписаниеСРасчетногоСчета.ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
		// Заполняем реквизиты формы, связанные с расшифровкой платежа
		Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
			СписаниеСРасчетногоСчетаФормыКлиентСервер.ЗаполнитьЗначенияТекущиеДанныеРасшифровкаПлатежа(
				ЭтотОбъект, Объект.РасшифровкаПлатежа[0],, Ложь);
		КонецЕсли;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП Тогда
		
		Если Объект.ПеречислениеЗаработнойПлаты.Количество() > 0 Тогда
			ПеречислениеЗаработнойПлатыВедомость = Объект.ПеречислениеЗаработнойПлаты[0].Ведомость;
		КонецЕсли;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДепонентов Тогда
		
		Если Объект.ПеречислениеДепонентов.Количество() > 0 Тогда
			ПеречислениеДепонентовВедомость    = Объект.ПеречислениеДепонентов[0].Ведомость;
			ПеречислениеДепонентовСуммаПлатежа = Объект.ПеречислениеДепонентов.Итог("СуммаПлатежа");
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПеречислениеЗаработнойПлатыВедомость) Тогда
		СписаниеСРасчетногоСчетаФормыКлиентСервер.УстановитьПустоеЗначениеПеречислениеЗаработнойПлатыВедомость(
			ЭтотОбъект, ПеречислениеЗаработнойПлатыВедомость);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПеречислениеДепонентовВедомость) Тогда
		СписаниеСРасчетногоСчетаФормыКлиентСервер.УстановитьПустоеЗначениеПеречислениеДепонентовВедомость(
			ЭтотОбъект, ПеречислениеДепонентовВедомость);
	КонецЕсли;
	
	// Установку видимости производим после всей остальной инициализации	
	СписаниеСРасчетногоСчетаФормы.УстановитьВидимостьСтраницНаСервере(ЭтотОбъект);
	СписаниеСРасчетногоСчетаФормыКлиентСервер.УправлениеФормой(ЭтотОбъект);
	
	ОтобразитьГиперссылкуПерейтиВТаблицу();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	СписаниеСРасчетногоСчетаФормы.УстановитьФункциональныеОпцииФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииСервер()
	
	СписаниеСРасчетногоСчетаФормы.ВидОперацииПриИзмененииСервер(ЭтотОбъект);
	
	ОтобразитьГиперссылкуПерейтиВТаблицу();
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер()
	
	СписаниеСРасчетногоСчетаФормы.ДатаПриИзмененииСервер(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	СписаниеСРасчетногоСчетаФормы.ОрганизацияПриИзмененииСервер(ЭтотОбъект);
	
	// Ведомости могут быть очищены при смене организации, установим для них соответствующий тип.
	Если НЕ ЗначениеЗаполнено(ПеречислениеЗаработнойПлатыВедомость) Тогда
		СписаниеСРасчетногоСчетаФормыКлиентСервер.УстановитьПустоеЗначениеПеречислениеЗаработнойПлатыВедомость(
			ЭтотОбъект, ПеречислениеЗаработнойПлатыВедомость);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПеречислениеДепонентовВедомость) Тогда
		СписаниеСРасчетногоСчетаФормыКлиентСервер.УстановитьПустоеЗначениеПеречислениеДепонентовВедомость(
			ЭтотОбъект, ПеречислениеДепонентовВедомость);
	КонецЕсли;
	
	// Список видов операций может быть изменен.
	ОтобразитьГиперссылкуПерейтиВТаблицу();
	
КонецПроцедуры

&НаСервере
Процедура СчетОрганизацииПриИзмененииСервер(ПричиныИзменения)
	
	СписаниеСРасчетногоСчетаФормы.СчетОрганизацииПриИзмененииСервер(ЭтотОбъект, ПричиныИзменения);
	
КонецПроцедуры

&НаСервере
Процедура НалогПриИзмененииНаСервере(ПричиныИзменения, СтрокаПоискаПоКБК)
	
	СписаниеСРасчетногоСчетаФормы.НалогПриИзмененииНаСервере(ЭтотОбъект, ПричиныИзменения, СтрокаПоискаПоКБК);
	
КонецПроцедуры

&НаСервере
Процедура ВидНалоговогоОбязательстваПриИзмененииНаСервере()
	
	СписаниеСРасчетногоСчетаФормы.ВидНалоговогоОбязательстваПриИзмененииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура НалогоплательщикПриИзмененииСервер()
	
	СписаниеСРасчетногоСчетаФормы.НалогоплательщикПриИзмененииСервер(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	
	СписаниеСРасчетногоСчетаФормы.КонтрагентПриИзмененииСервер(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СчетКонтрагентаПриИзмененииСервер()
	
	СписаниеСРасчетногоСчетаФормы.СчетКонтрагентаПриИзмененииСервер(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СчетБанкПриИзмененииСервер(ПричиныИзменения)
	
	СписаниеСРасчетногоСчетаФормы.СчетБанкПриИзмененииСервер(ЭтотОбъект, ПричиныИзменения);
	
КонецПроцедуры

&НаСервере
Процедура СчетУчетаПрочиеПриИзмененииСервер()
	
	СписаниеСРасчетногоСчетаФормы.СчетУчетаПрочиеПриИзмененииСервер(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзмененииНаСервере()
	
	СтрокаПлатеж = СписаниеСРасчетногоСчетаФормыКлиентСервер.ТекущиеДанныеРасшифровкаПлатежа(ЭтотОбъект);
	
	ПараметрыОбъекта = СписаниеСРасчетногоСчетаФормыКлиентСервер.ТекущиеПараметрыОбъекта(ЭтотОбъект);
	
	СписаниеСРасчетногоСчетаФормы.РасшифровкаПлатежаДоговорКонтрагентаПриИзмененииНаСервере(
		ЭтотОбъект, ПараметрыОбъекта, СтрокаПлатеж);
	
	СписаниеСРасчетногоСчетаФормыКлиентСервер.ЗаполнитьЗначенияТекущиеДанныеРасшифровкаПлатежа(ЭтотОбъект, СтрокаПлатеж);
	
	СписаниеСРасчетногоСчетаФормыКлиентСервер.ОбновитьИтогиУСН(ЭтотОбъект);
	СформироватьНазначениеПлатежаСервер(Ложь);
	
	СписаниеСРасчетногоСчетаФормы.УстановитьВидимостьСтраницНаСервере(ЭтотОбъект);
	
	СписаниеСРасчетногоСчетаФормыКлиентСервер.УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СуммаДокументаПриИзмененииСервер()
	
	СписаниеСРасчетногоСчетаФормы.СуммаДокументаПриИзмененииСервер(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьНазначениеПлатежаСервер(ТолькоСумму = Ложь)
	
	СписаниеСРасчетногоСчетаФормы.СформироватьНазначениеПлатежаСервер(ЭтотОбъект, ТолькоСумму);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьРасшифровкаПлатежаВоВременноеХранилищеНаСервере()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.РасшифровкаПлатежа.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ПоместитьПеречислениеЗаработнойПлатыВоВременноеХранилищеНаСервере()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.ПеречислениеЗаработнойПлаты.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ПоместитьПеречислениеДепонентовВоВременноеХранилищеНаСервере()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.ПеречислениеДепонентов.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ПоместитьПеречислениеНДФЛВоВременноеХранилищеНаСервере()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.ПеречислениеНДФЛ.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ОтобразитьГиперссылкуПерейтиВТаблицу() Экспорт
	
	КоличествоСтрок = 1;
	ВидимостьРазбитьПлатеж = Истина;
	
	Если Документы.СписаниеСРасчетногоСчета.ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда 
		
		КоличествоСтрок = Макс(Объект.РасшифровкаПлатежа.Количество(), 1);
		Элементы.ГруппаРасшифровкаПлатежа.Видимость = КоличествоСтрок = 1;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП Тогда
		
		КоличествоСтрок = Макс(Объект.ПеречислениеЗаработнойПлаты.Количество(), 1);
		// Скрываем видимость ведомости для вида операции "по ведомостям" и для одного работника,
		// чтобы при отключенной ФО по статьям ДДС не было лишних полей.
		Элементы.ПеречислениеЗаработнойПлатыВедомость.Видимость = КоличествоСтрок = 1;
		Элементы.ВедомостьЗарплатаРаботнику.Видимость           = КоличествоСтрок = 1;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДепонентов Тогда
		
		КоличествоСтрок = Макс(Объект.ПеречислениеДепонентов.Количество(), 1);
		Элементы.ПеречислениеДепонентовВедомость.Видимость = КоличествоСтрок = 1;
		
	ИначеЕсли ЭтоУплатаНДФЛ И НЕ УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
		
		КоличествоСтрок = Объект.ПеречислениеНДФЛ.Количество();
		
	Иначе
		
		ВидимостьРазбитьПлатеж = Ложь;
		
	КонецЕсли;
		
	Если НЕ (ЭтоУплатаНДФЛ И НЕ УчетЗарплатыИКадровВоВнешнейПрограмме) Тогда
		Если КоличествоСтрок > 1 Тогда
			ВидимостьРазбитьПлатеж = Ложь;
			// Отображаем гиперссылку для общей суммы документа с валютой.
			Если БухгалтерскийУчетПереопределяемый.ИспользоватьВалютныйУчет() Тогда
				НадписьСуммаДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 %2 (%3)'"),
				Формат(Объект.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧН="),
				Объект.ВалютаДокумента,
				СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(КоличествоСтрок, НСтр("ru = 'строка, строки, строк'")));
			Иначе
				НадписьСуммаДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 (%2)'"),
				Формат(Объект.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧН="),
				СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(КоличествоСтрок, НСтр("ru = 'строка, строки, строк'")));
			КонецЕсли;
			
			Элементы.ГруппаСуммаДокументаВалютаДокумента.Видимость = Ложь;
			Элементы.НадписьСуммаДокумента.Видимость               = Истина;
		Иначе
			// Cумма документа доступна для редактирования непосредственно.
			Элементы.ГруппаСуммаДокументаВалютаДокумента.Видимость = Истина;
			Элементы.НадписьСуммаДокумента.Видимость               = Ложь;
		КонецЕсли;
		
		Элементы.НадписьРазбитьПлатеж.Видимость      = ВидимостьРазбитьПлатеж;
		Элементы.НадписьУказатьСотрудников.Видимость = Ложь;
		
	Иначе
		
		Если КоличествоСтрок = 1 Тогда
			НадписьСуммаДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 %2 (%3)'"), 
				Формат(Объект.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧН="),
				Объект.ВалютаДокумента,
				СокрЛП(Строка(Объект.ПеречислениеНДФЛ[0].ФизическоеЛицо)));
		ИначеЕсли КоличествоСтрок <> 0 Тогда
			НадписьСуммаДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 %2 (за %3)'"),
				Формат(Объект.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧН="),
				Объект.ВалютаДокумента,
				СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(КоличествоСтрок, НСтр("ru = 'сотрудника, сотрудников, сотрудников'")));
		Иначе
			НадписьСуммаДокумента = "";
		КонецЕсли;
		
		ВидимостьУказатьСотрудников = НЕ ЗначениеЗаполнено(НадписьСуммаДокумента);
		
		Элементы.НадписьУказатьСотрудников.Видимость           = ВидимостьУказатьСотрудников;
		Элементы.ГруппаСуммаДокументаВалютаДокумента.Видимость = ВидимостьУказатьСотрудников;
		Элементы.НадписьСуммаДокумента.Видимость               = НЕ ВидимостьУказатьСотрудников;
		Элементы.НадписьРазбитьПлатеж.Видимость                = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьНазначениеПлатежа()
	
	Если ПустаяСтрока(Объект.НазначениеПлатежа) ИЛИ Объект.НазначениеПлатежа = СгенерированноеНазначенияПлатежа Тогда
		СформироватьНазначениеПлатежаСервер(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуТаблицы()
	
	Если СписаниеСРасчетногоСчетаФормыКлиентСервер.ЕстьРасшифровкаПлатежа(ЭтотОбъект) Тогда
		
		ОткрытьФормуРасшифровкаПлатежа();
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП") Тогда
		
		ОткрытьФормуПеречислениеЗаработнойПлаты();
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДепонентов") Тогда
		
		ОткрытьФормуПеречислениеДепонентов();
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога") Тогда
		
		ОткрытьФормуПеречислениеНДФЛ();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьРасшифровкаПлатежаИзРеквизитовФормы(Форма)
	
	Если НЕ Форма.Модифицированность Тогда
		// Если ничего не менялось в документе, то и программно не модифицируем.
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();
	Иначе
		СтрокаПлатеж = Объект.РасшифровкаПлатежа[0];
	КонецЕсли;
	
	СтрокаПлатеж.ДоговорКонтрагента             = Форма.РасшифровкаПлатежаДоговорКонтрагента;
	СтрокаПлатеж.СпособПогашенияЗадолженности   = Форма.РасшифровкаПлатежаСпособПогашенияЗадолженности;
	СтрокаПлатеж.Сделка                         = Форма.РасшифровкаПлатежаСделка;
	СтрокаПлатеж.СуммаПлатежа                   = Объект.СуммаДокумента;
	СтрокаПлатеж.КурсВзаиморасчетов             = Форма.РасшифровкаПлатежаКурсВзаиморасчетов;
	СтрокаПлатеж.КратностьВзаиморасчетов        = Форма.РасшифровкаПлатежаКратностьВзаиморасчетов;
	СтрокаПлатеж.СуммаВзаиморасчетов            = Форма.РасшифровкаПлатежаСуммаВзаиморасчетов;
	СтрокаПлатеж.СтавкаНДС                      = Форма.РасшифровкаПлатежаСтавкаНДС;
	СтрокаПлатеж.СуммаНДС                       = Форма.РасшифровкаПлатежаСуммаНДС;
	СтрокаПлатеж.СтатьяДвиженияДенежныхСредств  = Форма.РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств;
	СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = Форма.РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом;
	СтрокаПлатеж.СчетУчетаРасчетовПоАвансам     = Форма.РасшифровкаПлатежаСчетУчетаРасчетовПоАвансам;
	СтрокаПлатеж.РасходыУСН                     = Форма.РасшифровкаПлатежаРасходыУСН;
	СтрокаПлатеж.НДСУСН                         = Форма.РасшифровкаПлатежаНДСУСН;
	СтрокаПлатеж.РаспределятьРасходыУСН         = Форма.РасшифровкаПлатежаРаспределятьРасходыУСН;
	СтрокаПлатеж.ВидПлатежаПоКредитамЗаймам     = Форма.РасшифровкаПлатежаВидПлатежаПоКредитамЗаймам;
	СтрокаПлатеж.СчетНаОплату                   = Форма.РасшифровкаПлатежаСчетНаОплату;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРасшифровкаПлатежа()
	
	Отказ = Ложь;
	
	// Проверим, чтобы ключевые поля документы были заполнены, чтобы в дополнительной форме отборы работали корректно.
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Дата'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Дата", "Объект", Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Организация'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Организация", "Объект", Отказ);
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц") Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Налогоплательщик) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Налогоплательщик'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Налогоплательщик", "Объект", Отказ);
		КонецЕсли;
	Иначе
		Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Получатель'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Контрагент", "Объект", Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СчетОрганизации) Тогда
		
		Если ИспользоватьНесколькоБанковскихСчетовОрганизации Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Банковский счет'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "СчетОрганизации", "Объект", Отказ);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Реквизиты банковского счета не заполнены'"),, "РеквизитыОрганизацииСсылка",, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТолькоПросмотр Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	Если Объект.РасшифровкаПлатежа.Количество() < 2 Тогда
		// Актуальные данные содержатся в реквизитах формы,
		// перенесем их в табличную часть.
		ЗаполнитьРасшифровкаПлатежаИзРеквизитовФормы(ЭтотОбъект);
	КонецЕсли;
	
	Шапка = Новый Структура("ВалютаДокумента, ВидОперации, Дата, Контрагент, Организация,
		|СчетБанк, СчетКонтрагента, СчетОрганизации, НазначениеПлатежа");
	ЗаполнитьЗначенияСвойств(Шапка, Объект);
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц") Тогда
		Шапка.Контрагент = Объект.Налогоплательщик;
	КонецЕсли;
	
	РеквизитыФормы = "СвойстваПлатежа,ВалютаРегламентированногоУчета, ПользовательУправляетСчетамиУчета,
		|ЕстьРасчетыВУсловныхЕдиницах, КратностьДокумента, КурсДокумента, ОплатаВВалюте,
		|ПлательщикЕНВД, ПрименениеУСН, ПрименениеУСНДоходы";
	ПараметрыФормы = Новый Структура(РеквизитыФормы);
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, ЭтотОбъект, РеквизитыФормы);
	
	ПараметрыФормы.Вставить("Шапка", Шапка);
	
	АдресХранилищаРасшифровкаПлатежа = ПоместитьРасшифровкаПлатежаВоВременноеХранилищеНаСервере();
	ПараметрыФормы.Вставить("АдресХранилищаРасшифровкаПлатежа", АдресХранилищаРасшифровкаПлатежа);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Ключ",           Параметры.Ключ);
	СтруктураПараметров.Вставить("ПараметрыФормы", ПараметрыФормы);
	СтруктураПараметров.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	
	ОткрытьФорму("Документ.СписаниеСРасчетногоСчета.Форма.ФормаРасшифровкаПлатежа", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораРасшифровкаПлатежаНаСервере(ВыбранноеЗначение)
	
	ТаблицаРасшифровкаПлатежа = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресХранилищаРасшифровкаПлатежа);
	Объект.РасшифровкаПлатежа.Загрузить(ТаблицаРасшифровкаПлатежа);
	
	СписаниеСРасчетногоСчетаФормы.ЗаполнитьДобавленныеКолонкиТаблиц(ЭтотОбъект);
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
		СписаниеСРасчетногоСчетаФормыКлиентСервер.ЗаполнитьЗначенияТекущиеДанныеРасшифровкаПлатежа(
			ЭтотОбъект, Объект.РасшифровкаПлатежа[0],, Ложь);
	КонецЕсли;
	
	СписаниеСРасчетногоСчетаФормыКлиентСервер.ОбновитьИтогиУСН(ЭтотОбъект);
	СформироватьНазначениеПлатежаСервер(Ложь);
	
	СписаниеСРасчетногоСчетаФормы.УстановитьВидимостьСтраницНаСервере(ЭтотОбъект);
	СписаниеСРасчетногоСчетаФормыКлиентСервер.УправлениеФормой(ЭтотОбъект);
	
	ОтобразитьГиперссылкуПерейтиВТаблицу();
	
	Модифицированность = Истина;
	
	ПредлагатьНовыйДоговор = Ложь;
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику
		И НЕ ОплатаВВалюте И ВестиУчетПоДоговорам Тогда
		ПредлагатьНовыйДоговор = РаботаСДоговорамиКонтрагентовБП.ПредлагатьНовыйДоговор(Объект.Организация, Объект.Контрагент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПеречислениеЗаработнойПлатыИзРеквизитовФормы(Форма)
	
	Если НЕ Форма.Модифицированность Тогда
		// Если ничего не менялось в документе, то и программно не модифицируем.
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	
	Если Объект.ПеречислениеЗаработнойПлаты.Количество() = 0 Тогда
		СтрокаПлатеж = Объект.ПеречислениеЗаработнойПлаты.Добавить();
	Иначе
		СтрокаПлатеж = Объект.ПеречислениеЗаработнойПлаты[0];
	КонецЕсли;
	
	СтрокаПлатеж.Ведомость    = Форма.ПеречислениеЗаработнойПлатыВедомость;
	СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПеречислениеЗаработнойПлаты()
	
	Отказ = Ложь;
	
	// Проверим, чтобы ключевые поля документы были заполнены, чтобы в дополнительной форме отборы работали корректно.
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Дата'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Дата", "Объект", Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Организация'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Организация", "Объект", Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТолькоПросмотр Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	Если Объект.ПеречислениеЗаработнойПлаты.Количество() < 2 Тогда
		// Актуальные данные содержатся в реквизитах формы,
		// перенесем их в табличную часть.
		ЗаполнитьПеречислениеЗаработнойПлатыИзРеквизитовФормы(ЭтотОбъект);
	КонецЕсли;
	
	Шапка = Новый Структура("Дата, Организация, ВидОперации, НазначениеПлатежа");
	ЗаполнитьЗначенияСвойств(Шапка, Объект);
	
	РеквизитыФормы = "УчетЗарплатыИКадровВоВнешнейПрограмме";
	ПараметрыФормы = Новый Структура(РеквизитыФормы);
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, ЭтотОбъект, РеквизитыФормы);
	
	ПараметрыФормы.Вставить("Шапка", Шапка);
	
	АдресХранилищаПеречислениеЗаработнойПлаты = ПоместитьПеречислениеЗаработнойПлатыВоВременноеХранилищеНаСервере();
	ПараметрыФормы.Вставить("АдресХранилищаПеречислениеЗаработнойПлаты", АдресХранилищаПеречислениеЗаработнойПлаты);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Ключ",           Параметры.Ключ);
	СтруктураПараметров.Вставить("ПараметрыФормы", ПараметрыФормы);
	СтруктураПараметров.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	
	ОткрытьФорму("Документ.СписаниеСРасчетногоСчета.Форма.ФормаПеречислениеЗаработнойПлаты", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПеречислениеЗаработнойПлатыНаСервере(ВыбранноеЗначение)
	
	ТаблицаПеречислениеЗаработнойПлаты = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресХранилищаПеречислениеЗаработнойПлаты);
	Объект.ПеречислениеЗаработнойПлаты.Загрузить(ТаблицаПеречислениеЗаработнойПлаты);
	
	Объект.СуммаДокумента = Объект.ПеречислениеЗаработнойПлаты.Итог("СуммаПлатежа");
	Если Объект.ПеречислениеЗаработнойПлаты.Количество() > 0 Тогда
		ПеречислениеЗаработнойПлатыВедомость = Объект.ПеречислениеЗаработнойПлаты[0].Ведомость;
	КонецЕсли;
	
	СформироватьНазначениеПлатежаСервер(Ложь);
	
	СписаниеСРасчетногоСчетаФормы.УстановитьВидимостьСтраницНаСервере(ЭтотОбъект);
	СписаниеСРасчетногоСчетаФормыКлиентСервер.УправлениеФормой(ЭтотОбъект);
	
	ОтобразитьГиперссылкуПерейтиВТаблицу();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПеречислениеДепонентовИзРеквизитовФормы(Форма)
	
	Если НЕ Форма.Модифицированность Тогда
		// Если ничего не менялось в документе, то и программно не модифицируем.
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	
	Если Объект.ПеречислениеДепонентов.Количество() = 0 Тогда
		СтрокаПлатеж = Объект.ПеречислениеДепонентов.Добавить();
	Иначе
		СтрокаПлатеж = Объект.ПеречислениеДепонентов[0];
	КонецЕсли;
	
	СтрокаПлатеж.Ведомость    = Форма.ПеречислениеДепонентовВедомость;
	СтрокаПлатеж.СуммаПлатежа = Форма.ПеречислениеДепонентовСуммаПлатежа;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПеречислениеДепонентов()
	
	Отказ = Ложь;
	
	// Проверим, чтобы ключевые поля документы были заполнены, чтобы в дополнительной форме отборы работали корректно.
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Дата'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Дата", "Объект", Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Организация'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Организация", "Объект", Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Получатель'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Контрагент", "Объект", Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТолькоПросмотр Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	Если Объект.ПеречислениеДепонентов.Количество() < 2 Тогда
		// Актуальные данные содержатся в реквизитах формы,
		// перенесем их в табличную часть.
		ЗаполнитьПеречислениеДепонентовИзРеквизитовФормы(ЭтотОбъект);
	КонецЕсли;
	
	Шапка = Новый Структура("Дата, Организация, Контрагент, ВидОперации, НазначениеПлатежа");
	ЗаполнитьЗначенияСвойств(Шапка, Объект);
	
	РеквизитыФормы = "УчетЗарплатыИКадровВоВнешнейПрограмме";
	ПараметрыФормы = Новый Структура(РеквизитыФормы);
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, ЭтотОбъект, РеквизитыФормы);
	
	ПараметрыФормы.Вставить("Шапка", Шапка);
	
	АдресХранилищаПеречислениеДепонентов = ПоместитьПеречислениеДепонентовВоВременноеХранилищеНаСервере();
	ПараметрыФормы.Вставить("АдресХранилищаПеречислениеДепонентов", АдресХранилищаПеречислениеДепонентов);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Ключ",           Параметры.Ключ);
	СтруктураПараметров.Вставить("ПараметрыФормы", ПараметрыФормы);
	СтруктураПараметров.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	
	ОткрытьФорму("Документ.СписаниеСРасчетногоСчета.Форма.ФормаПеречислениеДепонентов", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПеречислениеДепонентовНаСервере(ВыбранноеЗначение)
	
	ТаблицаПеречислениеДепонентов = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресХранилищаПеречислениеДепонентов);
	Объект.ПеречислениеДепонентов.Загрузить(ТаблицаПеречислениеДепонентов);
	
	Объект.СуммаДокумента = Объект.ПеречислениеДепонентов.Итог("СуммаПлатежа");
	Если Объект.ПеречислениеДепонентов.Количество() > 0 Тогда
		ПеречислениеДепонентовВедомость    = Объект.ПеречислениеДепонентов[0].Ведомость;
		ПеречислениеДепонентовСуммаПлатежа = Объект.СуммаДокумента;
	КонецЕсли;
	
	СформироватьНазначениеПлатежаСервер(Ложь);
	
	СписаниеСРасчетногоСчетаФормы.УстановитьВидимостьСтраницНаСервере(ЭтотОбъект);
	СписаниеСРасчетногоСчетаФормыКлиентСервер.УправлениеФормой(ЭтотОбъект);
	
	ОтобразитьГиперссылкуПерейтиВТаблицу();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтражениеВУСННаСервере(ЗаполнитьСуммы = Истина, ЗаполнитьСодержание = Ложь)
	
	СписаниеСРасчетногоСчетаФормы.ЗаполнитьОтражениеВУСННаСервере(ЭтотОбъект, ЗаполнитьСуммы, ЗаполнитьСодержание);
	
КонецПроцедуры

&НаСервере
Процедура ПорядокОтраженияУплатыНалогаПриИзмененииНаСервере()
	
	СписаниеСРасчетногоСчетаФормы.ПорядокОтраженияУплатыНалогаПриИзмененииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ВедомостьЗарплатаРаботникуПриИзмененииНаСервере()
	
	СписаниеСРасчетногоСчетаФормы.ВедомостьЗарплатаРаботникуПриИзмененииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПеречислениеДепонентовПриИзмененииНаСервере() Экспорт
	
	Если Объект.ПеречислениеДепонентов.Количество() > 0 Тогда
		ПеречислениеДепонентовВедомость = Объект.ПеречислениеДепонентов[0].Ведомость;
	КонецЕсли;
	
	ОтобразитьГиперссылкуПерейтиВТаблицу();
	
КонецПроцедуры

&НаСервере
Процедура ПеречислениеЗаработнойПлатыВедомостьПриИзмененииНаСервере()
	
	СуммаКВыплатеДоИзменения = Объект.СуммаДокумента;
	
	Если ЗначениеЗаполнено(ПеречислениеЗаработнойПлатыВедомость) Тогда
		Объект.СуммаДокумента = СписаниеСРасчетногоСчетаФормы.СуммаЗаработнойПлатыПоВедомости(
			ПеречислениеЗаработнойПлатыВедомость, Объект.Ссылка, УчетЗарплатыИКадровВоВнешнейПрограмме);
	Иначе
		Объект.СуммаДокумента = 0;
	КонецЕсли;
		
	Если СуммаКВыплатеДоИзменения <> Объект.СуммаДокумента Тогда
		СформироватьНазначениеПлатежаСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПеречислениеНДФЛ()
	
	Отказ = Ложь;
	
	// Проверим, чтобы ключевые поля документы были заполнены, чтобы в дополнительной форме отборы работали корректно.
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Дата'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Дата", "Объект", Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Организация'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Организация", "Объект", Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТолькоПросмотр Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	Шапка = Новый Структура("Дата, Организация, ВидОперации, НалоговыйПериод, СуммаДокумента");
	ЗаполнитьЗначенияСвойств(Шапка, Объект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Шапка", Шапка);
	
	АдресХранилищаПеречислениеНДФЛ = ПоместитьПеречислениеНДФЛВоВременноеХранилищеНаСервере();
	ПараметрыФормы.Вставить("АдресХранилищаПеречислениеНДФЛ", АдресХранилищаПеречислениеНДФЛ);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Ключ",           Параметры.Ключ);
	СтруктураПараметров.Вставить("ПараметрыФормы", ПараметрыФормы);
	СтруктураПараметров.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	
	ОткрытьФорму("Документ.СписаниеСРасчетногоСчета.Форма.ФормаПеречислениеНДФЛ", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПеречислениеНДФЛНаСервере(ВыбранноеЗначение)
	
	ТаблицаПеречислениеНДФЛ = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресХранилищаПеречислениеНДФЛ);
	Объект.ПеречислениеНДФЛ.Загрузить(ТаблицаПеречислениеНДФЛ);
	
	СуммаДокумента = Объект.ПеречислениеНДФЛ.Итог("Сумма");
	Если СуммаДокумента <> 0 Тогда
		Объект.СуммаДокумента = Объект.ПеречислениеНДФЛ.Итог("Сумма");
	КонецЕсли;
	СуммаДокументаПриИзмененииСервер();
	ОтобразитьГиперссылкуПерейтиВТаблицу();
	
	Модифицированность = Истина;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораНалоговыйАгентНДС(ВыбранноеЗначение)
	
	ТаблицаНалоговыйАгентНДС = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТаблицыНалоговыйАгентНДСВХранилище);
	Объект.НалоговыйАгентНДС.Загрузить(ТаблицаНалоговыйАгентНДС);
	Объект.СуммаДокумента = Объект.НалоговыйАгентНДС.Итог("Сумма");
	
	Объект.СубконтоДт1 = Неопределено;
	Объект.СубконтоДт2 = Неопределено;
	Объект.СубконтоДт3 = Неопределено;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#КонецОбласти
