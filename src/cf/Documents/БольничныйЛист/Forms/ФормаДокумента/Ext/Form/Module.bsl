#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		
		// Заполнение "пустого" документа.
		ЗначенияДляЗаполнения = Новый Структура("Организация, Ответственный, Месяц",
			"Объект.Организация",
			"Объект.Ответственный",
			"Объект.ПериодРегистрации");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
		
		ОбработатьИзменениеМесяцаНачисленияНаСервере();
		
		ЗаполнитьТекущиеДанныеСотрудника(Истина);
		
		ПриПолученииДанныхНаСервере();
		
	КонецЕсли;
	
	// Обработчик подсистемы "Дополнительные отчеты и обработки".
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Обработчик подсистемы "ВерсионированиеОбъектов".
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Обработчик подсистемы "Печать".
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	Если Объект.ДоляНеполногоВремени = 0 Тогда
		Объект.ДоляНеполногоВремени = 1;
	КонецЕсли;
	
	ПриПолученииДанныхНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ИсточникВыбора.ВладелецФормы) = Тип("УправляемаяФорма") 
		И ИсточникВыбора.ВладелецФормы = ЭтаФорма И ЗначениеЗаполнено(ВыбранноеЗначение) 
		И ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.БольничныйЛист") Тогда
		
	    Объект.ПервичныйБольничныйЛист = ВыбранноеЗначение;
		УстановитьСвойстваПоляПервичногоБольничногоЛиста(ЭтаФорма);
		ЗаполнитьПоПервичномуБольничномуЛисту();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененыРезультатыРасчетаНДФЛ" И Источник.ВладелецФормы = ЭтаФорма Тогда
		ОбновитьДанныеНДФЛНаСервере(Параметр);
	КонецЕсли;
	
	УчетПособийОбработкаОповещения(ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("ЗаписьДокумента", Объект.Ссылка);
	
	Если ПараметрыЗаписи.Свойство("ИмяПроцедурыПослеЗаписи") Тогда
		Обработчик = Новый ОписаниеОповещения(ПараметрыЗаписи.ИмяПроцедурыПослеЗаписи, ЭтотОбъект, ПараметрыЗаписи);
		ПараметрыЗаписи.Удалить("ИмяПроцедурыПослеЗаписи");
		ВыполнитьОбработкуОповещения(Обработчик, Истина);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	
	СотрудникПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой", Модифицированность);
	
	ОбработатьИзменениеМесяцаНачисленияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("МесяцНачисленияСтрокойНачалоВыбораЗавершение", ЭтотОбъект);
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой", , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОбработатьИзменениеМесяцаНачисленияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой", Направление, Модифицированность);
	ОбработатьИзменениеМесяцаНачисленияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЯвляетсяПродолжениемБолезниПриИзменении(Элемент)
	
	ЯвляетсяПродолжениемБолезниПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПервичныйЛистокНетрудоспособностиНажатие(Элемент, СтандартнаяОбработка)

	ПараметрыОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
		ПараметрыОтбора.Вставить("ДатаОкончания", НачалоДня(НачалоДня(Объект.ДатаНачала)-1));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ПараметрыОтбора.Вставить("Организация", Объект.Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		ПараметрыОтбора.Вставить("Сотрудник", Объект.Сотрудник);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ПричинаНетрудоспособности) Тогда
		ПараметрыОтбора.Вставить("ПричинаНетрудоспособности", Объект.ПричинаНетрудоспособности);
	КонецЕсли;
	
	ПараметрыОткрытияФормыВыбора = Новый Структура;
	ПараметрыОткрытияФормыВыбора.Вставить("РежимВыбораПервичногоБольничногоЛиста", Истина);
	
	Если ПараметрыОтбора.Количество() > 0 Тогда
		ПараметрыОткрытияФормыВыбора.Вставить("Отбор", ПараметрыОтбора);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ПервичныйБольничныйЛист) Тогда
		ПараметрыОткрытияФормыВыбора.Вставить("ПервичныйБольничныйЛист", Объект.ПервичныйБольничныйЛист);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыОткрытияФормыВыбора.Вставить("ТекущийДокумент", Объект.Ссылка);
	КонецЕсли;
	
	ОткрытьФорму("Документ.БольничныйЛист.ФормаВыбора", ПараметрыОткрытияФормыВыбора, ЭтаФорма);
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПричинаНетрудоспособностиПриИзменении(Элемент)
	
	ПричинаНетрудоспособностиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	ДатаНачалаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	ДатаОкончанияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНарушенияРежимаПриИзменении(Элемент)
	
	РассчитатьНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентОплатыПриИзменении(Элемент)
	
	РассчитатьНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименятьЛьготыПриНачисленииПособияПриИзменении(Элемент)
	
	УстановитьДоступностьФинансированиеФедеральнымБюджетом(ЭтаФорма);
	УстановитьСвойстваПоляРезультатаЗаСчетФБ(ЭтаФорма, Объект.ПрименятьЛьготыПриНачисленииПособия);
	
	Если НЕ Объект.ПрименятьЛьготыПриНачисленииПособия Тогда
		Объект.ФинансированиеФедеральнымБюджетом = Неопределено;
	КонецЕсли;
	
	ОпределитьРазмерыПособияПоСтажу(ЭтаФорма);
	РассчитатьНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура ФинансированиеФедеральнымБюджетомПриИзменении(Элемент)
	
	ОпределитьРазмерыПособияПоСтажу(ЭтаФорма);
	РассчитатьНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура СреднийДневнойЗаработокПриИзменении(Элемент)
	
	РассчитатьНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура РайонныйКоэффициентРФНаНачалоСобытияПриИзменении(Элемент)
	
	РассчитатьНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоляНеполногоВремениПриИзменении(Элемент)
	
	Если Объект.ДоляНеполногоВремени = 0 Тогда
		Объект.ДоляНеполногоВремени = 1;
	КонецЕсли;
	РассчитатьСреднийЗаработок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОграничениеПособияПриИзменении(Элемент)
	
	РассчитатьНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентОплатыБезЛьготПриИзменении(Элемент)
	
	РассчитатьНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура ОграничениеПособияБезЛьготПриИзменении(Элемент)
	
	РассчитатьНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура СлучайУходаЗаБольнымРебенкомПриИзменении(Элемент)
	
	СлучайУходаЗаБольнымРебенкомПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПоловиннойОплатыПриИзменении(Элемент)
	
	РассчитатьНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланируемаяДатаВыплатыПриИзменении(Элемент)
	
	ПересчитатьНДФЛ();
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыНачисления

&НаКлиенте
Процедура НачисленияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	НачисленияПриОкончанииРедактированияНаСервере();
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

&НаКлиенте
Процедура ОткрытьСреднийЗаработок(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.ФизическоеЛицо)
		Или Не ЗначениеЗаполнено(Объект.ПричинаНетрудоспособности)
		Или Не ЗначениеЗаполнено(Объект.ДатаНачалаСобытия) Тогда
		
		ВызватьИсключение НСтр("ru='Необходимо заполнить обязательные для заполнения поля'");
		
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресПараметровВХранилище", АдресПараметровВХранилище());
	ПараметрыОткрытия.Вставить("ТолькоПросмотр", Объект.ЯвляетсяПродолжениемБолезни);
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьОповещениеОбИзмененииСреднегоЗаработкаФСС", ЭтаФорма);
	
	ОткрытьФорму("ОбщаяФорма.ВводДанныхДляРасчетаСреднегоЗаработкаФСС", ПараметрыОткрытия, ЭтаФорма, , , ,Оповещение , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперСсылкаЗаявлениеНаВыплатуПособияНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	УчетПособийНажатиеГиперссылкиЗаявлениеНаВыплатуПособия();
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаВводДополнительныхДанныхНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	УчетПособийЗаполнитьДанныеДляРеестраСведенийВФСС();
КонецПроцедуры

&НаКлиенте
Процедура ПодробнееОРасчетеНДФЛ(Команда)
	
	УчетНДФЛКлиент.ОткрытьФормуПодробнееОРасчетеНДФЛ(Объект.Организация, ЭтаФорма, Объект.ПериодРегистрации, Объект.Сотрудник);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеИзФСС(Команда)
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не выбрана организация.'"), , "Объект.Организация");
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не выбран сотрудник.'"), , "Объект.Сотрудник");
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.НомерЛисткаНетрудоспособности) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнен номер листка нетрудоспособности.'"), , "Объект.НомерЛисткаНетрудоспособности");
		Возврат;
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Получение данных ЭЛН из ФСС...'"));
	ПараметрыЗаписи = Новый Структура("РежимЗаписи, ИмяПроцедурыПослеЗаписи");
	ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Запись;
	ПараметрыЗаписи.ИмяПроцедурыПослеЗаписи = "ПолучитьДанныеИзФССПослеЗаписи";
	Записать(ПараметрыЗаписи);
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	ВидОплатыЗаСчетРаботодателя = НачисленияПоКатегории(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя);
	ВидОплатыПособия 			= НачисленияПоКатегории(КатегорияНачисленияПоПричинеНетрудоспособности(Объект.ПричинаНетрудоспособности));
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой");
	
	ОбновитьОтображениеСлучайУходаЗаБольнымРебенком(ЭтаФорма);
	УстановитьДоступностьЭлементовПоПервичномуБольничномуЛисту(ЭтаФорма);
	УстановитьСвойстваПоляПервичногоБольничногоЛиста(ЭтаФорма);
	ОбновитьНадписьДнейОсвобожденияОтРаботы(ЭтаФорма);
	УстановитьДоступностьФинансированиеФедеральнымБюджетом(ЭтаФорма);
	УстановитьСвойстваПоляРезультатаЗаСчетФБ(ЭтаФорма, Объект.ПрименятьЛьготыПриНачисленииПособия);
	
	ЗаполнитьТекущиеДанныеСотрудника();
	ЗаполнитьИтоговыеСуммыНачислений();
	
	ГодНачалаСобытия = Год(Объект.ДатаНачалаСобытия);
	
	УчетПособийДополнитьФорму();

КонецПроцедуры

&НаСервере
Процедура ЯвляетсяПродолжениемБолезниПриИзмененииНаСервере()
	
	Если НЕ Объект.ЯвляетсяПродолжениемБолезни Тогда
		
		Объект.ПервичныйБольничныйЛист = Документы.БольничныйЛист.ПустаяСсылка();
		УстановитьДоступностьЭлементовПоПервичномуБольничномуЛисту(ЭтаФорма);
		
	КонецЕсли; 
	УстановитьСвойстваПоляПервичногоБольничногоЛиста(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьЭлементовПоПервичномуБольничномуЛисту(Форма)
	
	ИменаЭлементов = Новый Массив;
	ИменаЭлементов.Добавить("ПроцентОплатыБезЛьгот");
	ИменаЭлементов.Добавить("ОграничениеПособияБезЛьгот");
	ИменаЭлементов.Добавить("ПрименятьЛьготыПриНачисленииПособия");
	ИменаЭлементов.Добавить("ФинансированиеФедеральнымБюджетом");
	ИменаЭлементов.Добавить("ДатаНачала");
	ИменаЭлементов.Добавить("ПроцентОплаты");
	ИменаЭлементов.Добавить("ОграничениеПособия");
	ИменаЭлементов.Добавить("РайонныйКоэффициентРФНаНачалоСобытия");

	ДоступностьЭлементов = Не ЗначениеЗаполнено(Форма.Объект.ПервичныйБольничныйЛист);
	
	Для Каждого ИмяЭлемента Из ИменаЭлементов Цикл
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ИмяЭлемента, "Доступность", ДоступностьЭлементов);
	КонецЦикла;
	
	Если ДоступностьЭлементов Тогда
		ЗаголовокКомандыОткрытьСреднийЗаработок = НСтр("ru='Изменить'");
	Иначе
		ЗаголовокКомандыОткрытьСреднийЗаработок = НСтр("ru='Подробнее'");
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ОткрытьСреднийЗаработок",
		"Заголовок",
		ЗаголовокКомандыОткрытьСреднийЗаработок);
	
	МассивПараметровВыбора = Новый Массив;
	
	Если Не ДоступностьЭлементов И ЗначениеЗаполнено(Форма.Объект.ПричинаНетрудоспособности) Тогда
		
		ПричиныНетрудоспособности = Новый Массив;
		ПричиныНетрудоспособности.Добавить(Форма.Объект.ПричинаНетрудоспособности);
		ПособиеПриДолечивании = ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.ПособиеПриДолечивании");
		
		Если Форма.Объект.ПричинаНетрудоспособности <> ПособиеПриДолечивании Тогда
			ПричиныНетрудоспособности.Добавить(ПособиеПриДолечивании);
		КонецЕсли; 
		
		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(ПричиныНетрудоспособности)));
		
	КонецЕсли; 
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ПричинаНетрудоспособности",
		"ПараметрыВыбора",
		Новый ФиксированныйМассив(МассивПараметровВыбора));
	
	МассивПараметровВыбора = Новый Массив;
	Если Не ДоступностьЭлементов
		И Форма.Объект.ПричинаНетрудоспособности = ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.ПоУходуЗаРебенком") Тогда
		
		СлучаиУходаЗаБольнымиДетьми = Новый Массив;
		Если ЗначениеЗаполнено(Форма.Объект.СлучайУходаЗаБольнымРебенком) Тогда
			
			СлучаиУходаЗаБольнымиДетьми.Добавить(Форма.Объект.СлучайУходаЗаБольнымРебенком);
			
			Если Форма.Объект.СлучайУходаЗаБольнымРебенком = ПредопределенноеЗначение("Перечисление.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетВСтационаре") Тогда
				СлучаиУходаЗаБольнымиДетьми.Добавить(ПредопределенноеЗначение("Перечисление.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетАмбулаторно"));
			КонецЕсли; 
			
			Если Форма.Объект.СлучайУходаЗаБольнымРебенком = ПредопределенноеЗначение("Перечисление.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетПриОсобомЗаболеванииВСтационаре") Тогда
				СлучаиУходаЗаБольнымиДетьми.Добавить(ПредопределенноеЗначение("Перечисление.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетПриОсобомЗаболеванииАмбулаторно"));
			КонецЕсли; 
			
			Если Форма.Объект.СлучайУходаЗаБольнымРебенком = ПредопределенноеЗначение("Перечисление.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетВСтационаре") Тогда
				СлучаиУходаЗаБольнымиДетьми.Добавить(ПредопределенноеЗначение("Перечисление.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетАмбулаторно"));
			КонецЕсли; 
			
			Если Форма.Объект.СлучайУходаЗаБольнымРебенком = ПредопределенноеЗначение("Перечисление.СлучаиУходаЗаБольнымиДетьми.ПоУходуЗаРебенкомИнвалидомВСтационаре") Тогда
				СлучаиУходаЗаБольнымиДетьми.Добавить(ПредопределенноеЗначение("Перечисление.СлучаиУходаЗаБольнымиДетьми.ПоУходуЗаРебенкомИнвалидомАмбулаторно"));
			КонецЕсли; 
			
			Если Форма.Объект.СлучайУходаЗаБольнымРебенком = ПредопределенноеЗначение("Перечисление.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетПриПоствакцинальномОсложненииВСтационаре") Тогда
				СлучаиУходаЗаБольнымиДетьми.Добавить(ПредопределенноеЗначение("Перечисление.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетПриПоствакцинальномОсложненииАмбулаторно"));
			КонецЕсли; 
			
			МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СлучаиУходаЗаБольнымиДетьми)));
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"СлучайУходаЗаБольнымРебенком",
		"ПараметрыВыбора",
		Новый ФиксированныйМассив(МассивПараметровВыбора));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойстваПоляПервичногоБольничногоЛиста(Форма)

	Форма.Элементы.НадписьПервичныйЛистокНетрудоспособности.Доступность = Форма.Объект.ЯвляетсяПродолжениемБолезни;
	Если ЗначениеЗаполнено(Форма.Объект.ПервичныйБольничныйЛист) Тогда
		Форма.НадписьПервичныйЛистокНетрудоспособности = Строка(Форма.Объект.ПервичныйБольничныйЛист);
	Иначе
		Форма.НадписьПервичныйЛистокНетрудоспособности = Нстр("ru = 'Выбрать листок нетрудоспособности...'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойстваПоляРезультатаЗаСчетФБ(Форма, Видимость, ИмяПоляРезультатЗаСчетФБ = "НачисленияРезультатВТомЧислеЗаСчетФБ")

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ИмяПоляРезультатЗаСчетФБ, "Видимость", Видимость);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьНадписьДнейОсвобожденияОтРаботы(Форма)
	
	Если ЗначениеЗаполнено(Форма.Объект.ДатаОкончания) И ЗначениеЗаполнено(Форма.Объект.ДатаНачала)
		И Форма.Объект.ДатаНачала <= Форма.Объект.ДатаОкончания Тогда
		
		ДнейОсвобожденияОтРаботы = КонецДня(Форма.Объект.ДатаОкончания) - НачалоДня(Форма.Объект.ДатаНачала) + 1;
		ДнейОсвобожденияОтРаботы = ДнейОсвобожденияОтРаботы / УчетПособийСоциальногоСтрахованияКлиентСервер.ДлинаСуток();
		Форма.НадписьДнейОсвобожденияОтРаботы = Строка(ДнейОсвобожденияОтРаботы) + " " + НСтр("ru ='дн'") + ".";
		
	Иначе
		
		Форма.НадписьДнейОсвобожденияОтРаботы = "";
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоПервичномуБольничномуЛисту()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьПоПервичномуБольничномуЛисту(Объект.ПервичныйБольничныйЛист);
	ЗначениеВРеквизитФормы(ДокументОбъект,"Объект");
	
	ГодНачалаСобытия = Неопределено;
	РассчитатьСреднийЗаработок();
	
	УстановитьДоступностьЭлементовПоПервичномуБольничномуЛисту(ЭтаФорма);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДнейОплаты(Форма)
	
	Объект = Форма.Объект;
	
	Если Не ЗначениеЗаполнено(Объект.ДатаНачала) 
		Или Не ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		Объект.ДнейОплаты = 0;
		Возврат;
	КонецЕсли;
	
	ДлинаСуток = УчетПособийСоциальногоСтрахованияКлиентСервер.ДлинаСуток();
	
	Если Объект.ДатаНачалаСобытия <> Объект.ДатаНачала Тогда
		ДнейКОплате = (Объект.ДатаОкончания - Объект.ДатаНачала) / ДлинаСуток + 1;
		ОплаченоРанее = (Объект.ДатаНачала - Объект.ДатаНачалаСобытия) / ДлинаСуток;
	Иначе
		ДнейКОплате = (Объект.ДатаОкончания - Объект.ДатаНачала) / ДлинаСуток + 1;
		ОплаченоРанее = 0;
	КонецЕсли;
	
	// Учтем ограничение периода оплаты по одному страховому случаю.
	Если Объект.ПричинаНетрудоспособности = ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.ПособиеПриДолечивании") Тогда
		// П.2 ст.6 Федерального закона от 29 декабря 2006 г. № 255-ФЗ.
		Объект.ДнейОплаты = Макс(Мин(ДнейКОплате, 24) - ОплаченоРанее,0)
	ИначеЕсли Объект.ПричинаНетрудоспособности = ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.ПоУходуЗаВзрослым") Тогда
		// Пп. 6 п.5 ст.6 Федерального закона от 29 декабря 2006 г. № 255-ФЗ.
		Объект.ДнейОплаты = Макс(Мин(ДнейКОплате, 7) - ОплаченоРанее,0)
	ИначеЕсли Объект.СлучайУходаЗаБольнымРебенком = ПредопределенноеЗначение("Перечисление.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетАмбулаторно")
		Или Объект.СлучайУходаЗаБольнымРебенком = ПредопределенноеЗначение("Перечисление.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетВСтационаре") Тогда
		// Пп. 2 п.5 ст.6 Федерального закона от 29 декабря 2006 г. № 255-ФЗ.
		Объект.ДнейОплаты = Макс(Мин(ДнейКОплате, 15) - ОплаченоРанее,0)
	Иначе
		Объект.ДнейОплаты = Макс(ДнейКОплате - ОплаченоРанее,0)
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьФинансированиеФедеральнымБюджетом(Форма)
	
	ДоступностьЭлементов = Форма.Объект.ПрименятьЛьготыПриНачисленииПособия;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ФинансированиеФедеральнымБюджетом",
		"Доступность",
		ДоступностьЭлементов);

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ПроцентОплатыБезЛьгот",
		"Доступность",
		ДоступностьЭлементов);

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ОграничениеПособияБезЛьгот",
		"Доступность",
		ДоступностьЭлементов);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОпределитьРазмерыПособияПоСтажу(Форма)
	
	Объект =  Форма.Объект;
	ДатаУвольненияСотрудника  = Форма.ДатаУвольненияСотрудника;

	Если Объект.ПрименятьЛьготыПриНачисленииПособия 
		И Не Объект.ФинансированиеФедеральнымБюджетом = ПредопределенноеЗначение("Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.ЗачетНестраховыхПериодов") Тогда
		
		Объект.ПроцентОплаты = 100;
		Объект.ОграничениеПособия = ПредопределенноеЗначение("Перечисление.ВидыОграниченияПособия.ОбщееОграничение"); 
		
	Иначе
		
		Если Объект.ПричинаНетрудоспособности = ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.ТравмаНаПроизводстве")
			Или Объект.ПричинаНетрудоспособности = ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.Профзаболевание") Тогда
			
			Если Объект.ДатаНачалаСобытия >= УчетПособийСоциальногоСтрахованияКлиентСервер.ДатаВводаОграниченийДляПособийПоНС_ПЗ() Тогда
				Объект.ОграничениеПособия = ПредопределенноеЗначение("Перечисление.ВидыОграниченияПособия.МаксимальныйРазмерЕжемесячнойСтраховойВыплаты");
			Иначе
				Объект.ОграничениеПособия = ПредопределенноеЗначение("Перечисление.ВидыОграниченияПособия.БезОграничений");
			КонецЕсли;
			
			Объект.ПроцентОплаты = 100;
			
			Возврат	
			
		КонецЕсли;
		
		Объект.ОграничениеПособия = ПредопределенноеЗначение("Перечисление.ВидыОграниченияПособия.ОбщееОграничение");
		
		Если Объект.ПричинаНетрудоспособности = ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.ПоБеременностиИРодам") Тогда	
			
			Объект.ПроцентОплаты = 100;
			Возврат;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДатаУвольненияСотрудника) 
			И Объект.ДатаНачалаСобытия > ДатаУвольненияСотрудника Тогда
			
			// Сотрудник уволен, в течение 30 календарных дней, оплачивается 60%.
			Объект.ПроцентОплаты = 60;
			Возврат;
			
		КонецЕсли;
		
		Объект.ПроцентОплаты = 60;
		
	КонецЕсли;
	
	Если Объект.ПричинаНетрудоспособности = ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.ТравмаНаПроизводстве")
		Или Объект.ПричинаНетрудоспособности = ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.Профзаболевание") Тогда
		
		Если Объект.ДатаНачалаСобытия >=  УчетПособийСоциальногоСтрахованияКлиентСервер.ДатаВводаОграниченийДляПособийПоНС_ПЗ() Тогда
			Объект.ОграничениеПособияБезЛьгот = ПредопределенноеЗначение("Перечисление.ВидыОграниченияПособия.МаксимальныйРазмерЕжемесячнойСтраховойВыплаты");
		Иначе
			Объект.ОграничениеПособияБезЛьгот = ПредопределенноеЗначение("Перечисление.ВидыОграниченияПособия.БезОграничений");
		КонецЕсли;
		
		Объект.ПроцентОплатыБезЛьгот = 100;
		
		Возврат	
		
	КонецЕсли;
	
	Объект.ОграничениеПособияБезЛьгот = ПредопределенноеЗначение("Перечисление.ВидыОграниченияПособия.ОбщееОграничение");
	Если Объект.ПричинаНетрудоспособности = ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.ПоБеременностиИРодам") Тогда	
		
		Объект.ПроцентОплатыБезЛьгот = 100;
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаУвольненияСотрудника) 
		И Объект.ДатаНачалаСобытия > ДатаУвольненияСотрудника Тогда
		
		// Сотрудник уволен, в течение 30 календарных дней, оплачивается 60%.
		Объект.ПроцентОплатыБезЛьгот = 60;
		
		Возврат;
		
	КонецЕсли;
	
	Объект.ПроцентОплатыБезЛьгот = 60;
	
КонецПроцедуры

&НаСервере
Процедура СотрудникПриИзмененииНаСервере()
	
	Объект.ПрименятьЛьготыПриНачисленииПособия 	= Ложь;
	Объект.ФинансированиеФедеральнымБюджетом 	= Неопределено;
	
	ЗаполнитьТекущиеДанныеСотрудника(Истина);
	
	ГодНачалаСобытия = Неопределено;
	РассчитатьСреднийЗаработок();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТекущиеДанныеСотрудника(ЗаполнитьОбъект = Ложь)
	
	ДатаУвольненияСотрудника = Неопределено;
	ПодразделениеСотрудника = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		
		КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Объект.Сотрудник, "ФизическоеЛицо,Подразделение,ДатаУвольнения,ВидЗанятости", Объект.ДатаНачалаСобытия);
		Если КадровыеДанные.Количество() > 0 Тогда 
			ДатаУвольненияСотрудника = КадровыеДанные[0].ДатаУвольнения;
			ПодразделениеСотрудника = КадровыеДанные[0].Подразделение;
			Объект.ФизическоеЛицо = КадровыеДанные[0].ФизическоеЛицо;
			Объект.ОсновноеМестоРаботы = КадровыеДанные[0].ВидЗанятости = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы;
		КонецЕсли;
		
	Иначе
		Объект.ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗаполнитьОбъект И ЗначениеЗаполнено(ПодразделениеСотрудника) Тогда
		Объект.РайонныйКоэффициентРФНаНачалоСобытия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПодразделениеСотрудника, "РайонныйКоэффициентРФ");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НачисленияПриОкончанииРедактированияНаСервере()
	
	ПересчитатьНДФЛ();
	ЗаполнитьИтоговыеСуммыНачислений();
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСреднийЗаработок()
	
	Если ЗначениеЗаполнено(Объект.ДатаНачалаСобытия)
		И ЗначениеЗаполнено(Объект.Сотрудник)
		И ЗначениеЗаполнено(Объект.ПричинаНетрудоспособности)  Тогда
		
		ОбновитьДанныеОЗаработкеИОтработанномВремениДляРасчетаСреднегоЗаработка();
		
		УстановитьПривилегированныйРежим(Истина);
		
		ПараметрыРасчета = ПараметрыРасчетаСреднегоДневногоЗаработкаФСС();
		
		Объект.СреднийДневнойЗаработок = УчетПособийСоциальногоСтрахования.СреднийДневнойЗаработокФСС(ПараметрыРасчета);
		Объект.МинимальныйСреднедневнойЗаработок = УчетПособийСоциальногоСтрахования.МинимальныйСреднедневнойЗаработокФСС(ПараметрыРасчета);
		
		РассчитатьНачисления();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеОЗаработкеИОтработанномВремениДляРасчетаСреднегоЗаработка()
	
	Если Не Объект.ЯвляетсяПродолжениемБолезни Тогда
	
		Если ГодНачалаСобытия <> Год(Объект.ДатаНачалаСобытия) Тогда
			
			Объект.СреднийЗаработокФСС.Очистить();
			Объект.ОтработанноеВремяДляСреднегоФСС.Очистить();
			
			РасчетныеГоды = Новый Массив;
			РасчетныеГоды.Добавить(Объект.ПериодРасчетаСреднегоЗаработкаПервыйГод);
			РасчетныеГоды.Добавить(Объект.ПериодРасчетаСреднегоЗаработкаВторойГод);
			
			СведенияОЗаработке = РасчетЗарплатыДляНебольшихОрганизаций.ДанныеОЗаработкеДляРасчетаСреднегоФСС(
				Объект.Сотрудник, Объект.Организация, Объект.ДатаНачалаСобытия, РасчетныеГоды);
			
			Если СведенияОЗаработке.Количество() = 0 Тогда
				
				Документы.БольничныйЛист.ЗаполнитьДанныеСреднегоЗаработкаПоПредыдущемуДокументу(
					Объект, РасчетныеГоды);
				
			ИначеЕсли СведенияОЗаработке.Количество() = 1 Тогда
				
				Если СведенияОЗаработке.Получить(Объект.ПериодРасчетаСреднегоЗаработкаПервыйГод) = Неопределено Тогда
					
					Документы.БольничныйЛист.ЗаполнитьДанныеСреднегоЗаработкаПоПредыдущемуДокументу(
						Объект, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.ПериодРасчетаСреднегоЗаработкаПервыйГод));
					
				Иначе
					
					Документы.БольничныйЛист.ЗаполнитьДанныеСреднегоЗаработкаПоПредыдущемуДокументу(
						Объект, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.ПериодРасчетаСреднегоЗаработкаВторойГод));
					
				КонецЕсли;
				
			КонецЕсли;
			
			ДнейБолезниУходаЗаДетьми = 0;
			
			ПособиеЗаНеполныйРасчетныйПериод = УчетПособийСоциальногоСтрахования.ПособиеЗаНеполныйРасчетныйПериод(Объект.ФизическоеЛицо, Объект.ДатаНачалаСобытия);
			
			Для каждого СведенияГода Из СведенияОЗаработке Цикл
				
				ЗаработокГода = 0;
				Для каждого СведенияМесяца Из СведенияГода.Значение Цикл
					
					Если СведенияМесяца.Значение.Сумма <> 0 Тогда
						
						СтрокаСведений = Объект.СреднийЗаработокФСС.Добавить();
						СтрокаСведений.ФизическоеЛицо = Объект.ФизическоеЛицо;
						СтрокаСведений.Период = Дата(СведенияГода.Ключ, СведенияМесяца.Ключ, 1);
						СтрокаСведений.Сумма = СведенияМесяца.Значение.Сумма;
						
						Если НЕ УчетПособийСоциальногоСтрахования.НеВключатьПериодВДанныеДляРасчета(СтрокаСведений.Период, ПособиеЗаНеполныйРасчетныйПериод) Тогда
							ЗаработокГода = ЗаработокГода + СтрокаСведений.Сумма;
						КонецЕсли;
						
					КонецЕсли;
					
					Если СведенияМесяца.Значение.ДнейБолезниУходаЗаДетьми <> 0 Тогда
						
						СтрокаСведений = Объект.ОтработанноеВремяДляСреднегоФСС.Добавить();
						СтрокаСведений.ФизическоеЛицо = Объект.ФизическоеЛицо;
						СтрокаСведений.Период = Дата(СведенияГода.Ключ, СведенияМесяца.Ключ, 1);
						СтрокаСведений.ДнейБолезниУходаЗаДетьми = СведенияМесяца.Значение.ДнейБолезниУходаЗаДетьми;
						
						Если НЕ УчетПособийСоциальногоСтрахования.НеВключатьПериодВДанныеДляРасчета(СтрокаСведений.Период, ПособиеЗаНеполныйРасчетныйПериод)  Тогда
							ДнейБолезниУходаЗаДетьми = ДнейБолезниУходаЗаДетьми + СтрокаСведений.ДнейБолезниУходаЗаДетьми;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
			ГодНачалаСобытия = Год(Объект.ДатаНачалаСобытия);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыРасчетаСреднегоДневногоЗаработкаФСС()
	
	ПараметрыРасчета = УчетПособийСоциальногоСтрахованияКлиентСервер.ПараметрыРасчетаСреднегоДневногоЗаработкаФСС();
	ПараметрыРасчета.ДатаНачалаСобытия = Объект.ДатаНачалаСобытия;
	ПараметрыРасчета.ПериодРасчетаСреднегоЗаработкаНачало = Дата(Объект.ПериодРасчетаСреднегоЗаработкаПервыйГод, 1, 1) ;
	ПараметрыРасчета.ПериодРасчетаСреднегоЗаработкаОкончание = КонецДня(Дата(Объект.ПериодРасчетаСреднегоЗаработкаВторойГод, 12, 31));
	ПараметрыРасчета.РасчетныеГоды = УчетПособийСоциальногоСтрахования.ГодыПериодаРасчетаСреднего(Объект);
	
	ФизическоеЛицо = Неопределено;
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Объект.Сотрудник, "ФизическоеЛицо", Объект.ДатаНачалаСобытия);
	Если НЕ КадровыеДанные.Количество() = 0 Тогда
		ФизическоеЛицо = КадровыеДанные[0].ФизическоеЛицо;
	КонецЕсли;
	ПараметрыРасчета.НеполныйРасчетныйПериод = УчетПособийСоциальногоСтрахования.ПособиеЗаНеполныйРасчетныйПериод(ФизическоеЛицо, Объект.ДатаНачалаСобытия);
	
	ПараметрыРасчета.ДанныеНачислений = ДанныеОЗаработкеДляРасчетаСреднегоЗаработка();
	ПараметрыРасчета.ДанныеВремени = ДанныеОбОтработанномВремениДляРасчетаСреднегоЗаработка();
	ПараметрыРасчета.ДанныеСтрахователей = УчетПособийСоциальногоСтрахования.ПустаяТаблицаДанныеСтрахователейСреднийЗаработокФСС();
	ПараметрыРасчета.ИспользоватьДниБолезниУходаЗаДетьми = Объект.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам;
	ПараметрыРасчета.ПрименятьПредельнуюВеличину = Объект.ПричинаНетрудоспособности <> Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве
													И Объект.ПричинаНетрудоспособности <> Перечисления.ПричиныНетрудоспособности.Профзаболевание; 
	ПараметрыРасчета.ПорядокРасчета = УчетПособийСоциальногоСтрахованияКлиентСервер.ПорядокРасчетаСреднегоЗаработкаФСС(Объект.ДатаНачалаСобытия);
	ПараметрыРасчета.РайонныйКоэффициентРФ = Объект.РайонныйКоэффициентРФНаНачалоСобытия;
	ПараметрыРасчета.ДоляНеполногоВремени = Объект.ДоляНеполногоВремени;
	ПараметрыРасчета.Сотрудник = Объект.Сотрудник;
		
	Возврат ПараметрыРасчета;
	
КонецФункции

&НаСервере
Функция ДанныеОЗаработкеДляРасчетаСреднегоЗаработка()
	
	ДанныеОЗаработкеДляРасчетаСреднегоЗаработка = УчетПособийСоциальногоСтрахования.ПустаяТаблицаНачисленийСреднийЗаработокФСС();
	
	Для каждого СтрокаДанных Из Объект.СреднийЗаработокФСС Цикл
		СтрокаДанныхОЗаработке = ДанныеОЗаработкеДляРасчетаСреднегоЗаработка.Добавить();
		СтрокаДанныхОЗаработке.ФизическоеЛицо = СтрокаДанных.ФизическоеЛицо;
		СтрокаДанныхОЗаработке.ПорядокРасчета = Перечисления.ПорядокРасчетаСреднегоЗаработкаФСС.Постановление2011;
		СтрокаДанныхОЗаработке.Период = СтрокаДанных.Период;
		СтрокаДанныхОЗаработке.Сумма = СтрокаДанных.Сумма;
	КонецЦикла;
	
	Возврат ДанныеОЗаработкеДляРасчетаСреднегоЗаработка;
	
КонецФункции

&НаСервере
Функция ДанныеОбОтработанномВремениДляРасчетаСреднегоЗаработка()
	
	ДанныеОбОтработанномВремениДляРасчетаСреднегоЗаработка = УчетПособийСоциальногоСтрахования.ПустаяТаблицаОтработанноеВремяСреднийЗаработокФСС();
	
	Для каждого СтрокаДанных Из Объект.ОтработанноеВремяДляСреднегоФСС Цикл
		СтрокаДанныхОбОтработанномВремени = ДанныеОбОтработанномВремениДляРасчетаСреднегоЗаработка.Добавить();
		СтрокаДанныхОбОтработанномВремени.ФизическоеЛицо = СтрокаДанных.ФизическоеЛицо;
		СтрокаДанныхОбОтработанномВремени.Период = СтрокаДанных.Период;
		СтрокаДанныхОбОтработанномВремени.ДнейБолезниУходаЗаДетьми = СтрокаДанных.ДнейБолезниУходаЗаДетьми;
	КонецЦикла;
	
	Возврат ДанныеОбОтработанномВремениДляРасчетаСреднегоЗаработка;
	
КонецФункции

&НаСервере
Процедура РассчитатьНачисления()
	
	// Заполнение начислений
	ТаблицаИнтервалов = ТаблицаИнтерваловОплаты();
	ГраницыИнтервалов = ГраницыИнтервалов(ТаблицаИнтервалов);
	
	ПроизводственныйКалендарьРФ = КалендарныеГрафики.ПроизводственныйКалендарьРоссийскойФедерации();
	
	Объект.Начисления.Очистить();
	
	ТаблицаРасчета = Объект.начисления.Выгрузить();
	ТаблицаРасчета.Колонки.Добавить("МРОТ", Новый ОписаниеТипов("Число"));
	ТаблицаРасчета.Колонки.Добавить("КалендарныеДни", Новый ОписаниеТипов("Число"));
	ТаблицаРасчета.Колонки.Добавить("РайонныйКоэффициентРФ", Новый ОписаниеТипов("Число"));
	
	Для Каждого СтрокаИнтервалов Из ТаблицаИнтервалов Цикл
		Если Не ЗначениеЗаполнено(СтрокаИнтервалов.Начисление) Тогда
			Продолжить;
		КонецЕсли;
		ДатаНачала = СтрокаИнтервалов.ДатаНачала;
		ДатаОкончания = СтрокаИнтервалов.ДатаОкончания;
		Пока ДатаНачала <= ДатаОкончания Цикл
			СтрокаНачислений = ТаблицаРасчета.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНачислений, СтрокаИнтервалов);
			СтрокаНачислений.ДатаНачала = ДатаНачала;
			Если КонецМесяца(ДатаНачала) >= ДатаОкончания Тогда
				СтрокаНачислений.ДатаОкончания = ДатаОкончания;
			Иначе
				СтрокаНачислений.ДатаОкончания = КонецМесяца(ДатаНачала);
			КонецЕсли;
			СтрокаНачислений.Сотрудник = Объект.Сотрудник;
			СтрокаНачислений.Подразделение = ПодразделениеСотрудника;
			СтрокаНачислений.КалендарныеДни = (НачалоДня(СтрокаНачислений.ДатаОкончания) - НачалоДня(СтрокаНачислений.ДатаНачала)) / УчетПособийСоциальногоСтрахованияКлиентСервер.ДлинаСуток() + 1;
			СтрокаНачислений.МРОТ = ЗарплатаКадры.МинимальныйРазмерОплатыТрудаРФ(СтрокаНачислений.ДатаНачала);
			СтрокаНачислений.РайонныйКоэффициентРФ = Объект.РайонныйКоэффициентРФНаНачалоСобытия;
			ДатаНачала = КонецМесяца(ДатаНачала) + 1;
		КонецЦикла; 
	КонецЦикла;
	
	СтруктурыЗаписей = ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаРасчета);
	
	ТаблицаРасчета.Колонки.Добавить("ФиксРасчет", Новый ОписаниеТипов("Булево"));
	ТаблицаРасчета.Колонки.Добавить("Сторно", Новый ОписаниеТипов("Булево"));
	ТаблицаРасчета.Колонки.Добавить("ФиксСторно", Новый ОписаниеТипов("Булево"));
	
	ТаблицаСДанными = Новый ТаблицаЗначений;
	ТаблицаСДанными.Колонки.Добавить("ЗаписьРасчета");
	ТаблицаСДанными.Колонки.Добавить("Показатели");
	ТаблицаСДанными.Колонки.Добавить("ДатаНачала");
	ТаблицаСДанными.Колонки.Добавить("Результат");
	ТаблицаСДанными.Колонки.Добавить("Дополнительно", Новый ОписаниеТипов("Структура"));
	ТаблицаСДанными.Колонки.Добавить("ТерриторииУсловияТруда", Новый ОписаниеТипов("Массив"));
	
	Для НомерСтроки = 0 По ТаблицаРасчета.Количество() - 1 Цикл
		СтрокаСДанными = ТаблицаСДанными.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСДанными, ТаблицаРасчета[НомерСтроки]);
		СтрокаСДанными.ЗаписьРасчета = ТаблицаРасчета[НомерСтроки];
		СтрокаСДанными.Показатели = СтруктурыЗаписей[НомерСтроки];
	КонецЦикла;
	
	ПараметрыОплаты = Новый Структура("ПараметрыРасчетаПособияПоНетрудоспособности");
	ПараметрыОплаты.ПараметрыРасчетаПособияПоНетрудоспособности = Объект;
	
	УчетПособийСоциальногоСтрахования.РассчитатьПособиеПоНетрудоспособности(ТаблицаСДанными, ПараметрыОплаты, Ложь);
	
	ПособиеПлатитУчастникПилотногоПроекта = ПрямыеВыплатыПособийСоциальногоСтрахования.ПособиеПлатитУчастникПилотногоПроекта(Объект.Организация, Объект.ПериодРегистрации);
	Для Каждого СтрокаТаблицыСДанными Из ТаблицаСДанными Цикл
		СтрокаНачисления = Объект.Начисления.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНачисления, СтрокаТаблицыСДанными.Показатели);
		СтрокаНачисления.ОплаченоДней = СтрокаТаблицыСДанными.Показатели.КалендарныеДни;
		СтрокаНачисления.Результат = СтрокаТаблицыСДанными.Результат;
		СтрокаНачисления.РезультатВТомЧислеЗаСчетФБ = СтрокаТаблицыСДанными.Дополнительно.РезультатВТомЧислеЗаСчетФБ;
		Если СтрокаТаблицыСДанными.Показатели.Начисление <> ВидОплатыПособия Тогда
			СтрокаНачисления.РезультатВТомЧислеЗаСчетФБ = 0;
		КонецЕсли; 
		Если ПособиеПлатитУчастникПилотногоПроекта И СтрокаТаблицыСДанными.Показатели.Начисление = ВидОплатыПособия Тогда
			СтрокаНачисления.Результат = 0;
			СтрокаНачисления.РезультатВТомЧислеЗаСчетФБ = 0;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьИтоговыеСуммыНачислений();
	
	ПересчитатьНДФЛ();
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьНДФЛ()
	
	Объект.НДФЛ.Очистить();
	Объект.ПримененныеВычетыНаДетейИИмущественные.Очистить();
	
	УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию();
	
	ОбъектФормы = РеквизитФормыВЗначение("Объект");
	
	ДокументОбъект = ОбъектФормы.Скопировать();
	ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	ДокументОбъект.СформироватьДоходыНДФЛ();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	БольничныйЛист.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТФизическиеЛица
		|ИЗ
		|	Документ.БольничныйЛист КАК БольничныйЛист
		|ГДЕ
		|	БольничныйЛист.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
	Запрос.Выполнить();
	
	РезультатРасчетаНДФЛ = УчетНДФЛ.РезультатРасчетаНДФЛ(
		Запрос.МенеджерВременныхТаблиц, Объект.Ссылка, Объект.Организация, Объект.ПериодРегистрации, Ложь);
	
	ОтменитьТранзакцию();
	УстановитьПривилегированныйРежим(Ложь);
	
	Для каждого ДанныеНДФЛ Из РезультатРасчетаНДФЛ.НДФЛ Цикл
		ЗаполнитьЗначенияСвойств(Объект.НДФЛ.Добавить(), ДанныеНДФЛ);
	КонецЦикла;
	
	Для каждого ДанныеВычетов Из РезультатРасчетаНДФЛ.ПримененныеВычетыНаДетейИИмущественные Цикл
		ЗаполнитьЗначенияСвойств(Объект.ПримененныеВычетыНаДетейИИмущественные.Добавить(), ДанныеВычетов);
	КонецЦикла;
	
	РасчетЗарплатыБазовый.ЗаполнитьКорректировкиВыплаты(Объект, "ПериодРегистрации");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НачисленияПоКатегории(КатегорияНачисления)
	
	Начисления = РасчетЗарплаты.НачисленияПоКатегории(КатегорияНачисления);
	Если Начисления.Количество() > 0 Тогда
		Возврат Начисления[0];
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ДатыИзменений()
	
	ВидНеоплачиваемогоВремени 	= Неопределено;
	
	// Создаем таблицу точек на оси времени и начислений которые с ними связаны
	// затем строим из этих точек интервалы.
	ДатыИзменений = Новый ТаблицаЗначений;
	ДатыИзменений.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ДатыИзменений.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	
	Если Не Объект.НазначитьПособие Тогда
		НоваяДата = ДатыИзменений.Добавить();
		НоваяДата.Дата = Объект.ДатаНачала;
		НоваяДата.Начисление = ВидНеоплачиваемогоВремени;
		Возврат ДатыИзменений;
	КонецЕсли;
	
	ДатаНачалаОплатыЗаСчетФСС = Объект.ДатаНачалаСобытия + УчетПособийСоциальногоСтрахованияКлиентСервер.КоличествоДнейЗаСчетРаботодателя(Объект.ДатаНачалаСобытия) * УчетПособийСоциальногоСтрахованияКлиентСервер.ДлинаСуток();
	
	Если Объект.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ОбщееЗаболевание Тогда
		
		Если ДатаНачалаОплатыЗаСчетФСС > Объект.ДатаНачала Тогда
			НоваяДата = ДатыИзменений.Добавить();
			НоваяДата.Дата = Объект.ДатаНачала;
			НоваяДата.Начисление = ВидОплатыЗаСчетРаботодателя;
			// Оплата за счет ФСС
			Если ДатаНачалаОплатыЗаСчетФСС <= Объект.ДатаОкончания Тогда
				НоваяДата = ДатыИзменений.Добавить();
				НоваяДата.Дата = ДатаНачалаОплатыЗаСчетФСС;
				НоваяДата.Начисление = ВидОплатыПособия;
			КонецЕсли;
		Иначе
			НоваяДата = ДатыИзменений.Добавить();
			НоваяДата.Дата = Объект.ДатаНачала;
			НоваяДата.Начисление = ВидОплатыПособия;
		КонецЕсли;
	Иначе
		НоваяДата = ДатыИзменений.Добавить();
		НоваяДата.Дата = Объект.ДатаНачала;
		НоваяДата.Начисление = ВидОплатыПособия;
		
		Если ЗначениеЗаполнено(Объект.ДатаОкончания)
			И Объект.ДатаНачалаПоловиннойОплаты > Объект.ДатаНачала
			И Объект.ДатаНачалаПоловиннойОплаты <= Объект.ДатаОкончания Тогда
			НоваяДата = ДатыИзменений.Добавить();
			НоваяДата.Дата = Объект.ДатаНачалаПоловиннойОплаты;
			НоваяДата.Начисление = ВидОплатыПособия;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДатаНарушенияРежима) 
		И Объект.ДатаНарушенияРежима > Объект.ДатаНачала
		И Объект.ДатаНарушенияРежима <= Объект.ДатаОкончания
		И ДатыИзменений.Найти(Объект.ДатаНарушенияРежима, "Дата") = Неопределено Тогда
		НоваяДата = ДатыИзменений.Добавить();
		НоваяДата.Дата = Объект.ДатаНарушенияРежима;
		Если Объект.ДатаНарушенияРежима >= ДатаНачалаОплатыЗаСчетФСС Тогда
			НоваяДата.Начисление = ВидОплатыПособия;
		Иначе
			НоваяДата.Начисление = ВидОплатыЗаСчетРаботодателя;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДатыИзменений;
	
КонецФункции

&НаСервере
Функция ТаблицаИнтерваловОплаты()
	
	ТаблицаИнтервалов = Новый ТаблицаЗначений;
	ТаблицаИнтервалов.Колонки.Добавить("Начисление");
	ТаблицаИнтервалов.Колонки.Добавить("ДатаНачала");
	ТаблицаИнтервалов.Колонки.Добавить("ДатаОкончания");
	ТаблицаИнтервалов.Колонки.Добавить("Длительность");
	
	Если Не ЗначениеЗаполнено(Объект.ДатаНачала) 
		Или Не ЗначениеЗаполнено(Объект.ДатаОкончания) 
		Или Объект.ДатаНачала > Объект.ДатаОкончания Тогда
		Возврат ТаблицаИнтервалов;
	КонецЕсли;
	
	ДатыИзменений = ДатыИзменений();
	ДатыИзменений.Сортировать("Дата");
	
	ПредыдущаяСтрока = Неопределено;
	Для Каждого СтрокаДаты Из ДатыИзменений Цикл
		НовыйИнтервал = ТаблицаИнтервалов.Добавить();
		НовыйИнтервал.ДатаНачала = СтрокаДаты.Дата;
		НовыйИнтервал.Начисление = СтрокаДаты.Начисление;
		Если ПредыдущаяСтрока <> Неопределено Тогда
			ПредыдущаяСтрока.ДатаОкончания = СтрокаДаты.Дата - 1;
		КонецЕсли;
		ПредыдущаяСтрока = НовыйИнтервал;
	КонецЦикла;
	
	НовыйИнтервал.ДатаОкончания = Объект.ДатаОкончания;
	
	Возврат ТаблицаИнтервалов;
	
КонецФункции

&НаСервере
Функция ГраницыИнтервалов(ТаблицаИнтервалов)
	
	Границы = Новый СтандартныйПериод;
	
	Границы.ДатаНачала = Дата(1, 1, 1);
	Границы.ДатаОкончания = Дата(1, 1, 1);
	
	Для Каждого СтрокаТаблицы Из ТаблицаИнтервалов Цикл
		Если Не ЗначениеЗаполнено(Границы.ДатаНачала) Тогда
			Границы.ДатаНачала = СтрокаТаблицы.ДатаНачала;
		КонецЕсли;
		Границы.ДатаНачала = Мин(Границы.ДатаНачала, СтрокаТаблицы.ДатаНачала);
		Границы.ДатаОкончания = Макс(Границы.ДатаОкончания, СтрокаТаблицы.ДатаОкончания);
	КонецЦикла;
	
	Возврат Границы;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьИтоговыеСуммыНачислений()
	
	СтрокиЗаСчетРаботодателя = Объект.Начисления.НайтиСтроки(Новый Структура("Начисление", ВидОплатыЗаСчетРаботодателя));
	НачисленоРаботодатель = 0;
	Для каждого СтрокаЗаСчетРаботодателя Из СтрокиЗаСчетРаботодателя Цикл
		НачисленоРаботодатель = НачисленоРаботодатель + СтрокаЗаСчетРаботодателя.Результат;
	КонецЦикла;
	
	СтрокиПособия = Объект.Начисления.НайтиСтроки(Новый Структура("Начисление", ВидОплатыПособия));
	НачисленоФСС = 0;
	Для каждого СтрокаЗаСчетФСС Из СтрокиПособия Цикл
		НачисленоФСС = НачисленоФСС + СтрокаЗаСчетФСС.Результат;
	КонецЦикла;
	
	НачисленоИтог = НачисленоРаботодатель + НачисленоФСС;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьОтображениеСлучайУходаЗаБольнымРебенком(Форма)
	
	Если Форма.Объект.ПричинаНетрудоспособности = ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.ПоУходуЗаРебенком") Тогда
		ТекущаяСтраница = Форма.Элементы.СлучайУходаЗаБольнымРебенкомСтраница;
	Иначе
		ТекущаяСтраница = Форма.Элементы.СлучайУходаЗаБольнымРебенкомПустоСтраница;
	КонецЕсли; 
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"СлучайУходаЗаБольнымРебенкомСтраницы",
		"ТекущаяСтраница",
		ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КатегорияНачисленияПоПричинеНетрудоспособности(ПричинаНетрудоспособности)
	
	КатегорияНачисления = ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста");
	Если ПричинаНетрудоспособности = ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.ПоБеременностиИРодам") Тогда
		КатегорияНачисления = ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодам");
	ИначеЕсли ПричинаНетрудоспособности = ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.ТравмаНаПроизводстве") Тогда
		КатегорияНачисления = ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве");
	ИначеЕсли ПричинаНетрудоспособности = ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.Профзаболевание") Тогда
		КатегорияНачисления = ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание");
	КонецЕсли;
	
	Возврат КатегорияНачисления;
	
КонецФункции

&НаСервере
Процедура СкорректироватьДатуНачалаПоловиннойОплаты()
	
	Объект.ДатаНачалаПоловиннойОплаты = Неопределено;
	
	ДатаНачалаПоловиннойОплаты = Объект.ДатаНачалаСобытия + 10 * УчетПособийСоциальногоСтрахованияКлиентСервер.ДлинаСуток();
	
	Если Объект.ПричинаНетрудоспособности <> ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.ПоУходуЗаРебенком") 
		Или НЕ ЗначениеЗаполнено(Объект.ДатаНачала)
		Или НЕ ЗначениеЗаполнено(Объект.ДатаОкончания) 
		Или Объект.ДатаОкончания < НачалоДня(ДатаНачалаПоловиннойОплаты) - 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.СлучайУходаЗаБольнымРебенком = ПредопределенноеЗначение("Перечисление.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетАмбулаторно") 
		Или Объект.СлучайУходаЗаБольнымРебенком = ПредопределенноеЗначение("Перечисление.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетПриПоствакцинальномОсложненииАмбулаторно")
		Или Объект.СлучайУходаЗаБольнымРебенком = ПредопределенноеЗначение("Перечисление.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетАмбулаторно")
		Или Объект.СлучайУходаЗаБольнымРебенком = ПредопределенноеЗначение("Перечисление.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетПриОсобомЗаболеванииАмбулаторно")
		Или Объект.СлучайУходаЗаБольнымРебенком = ПредопределенноеЗначение("Перечисление.СлучаиУходаЗаБольнымиДетьми.ПоУходуЗаРебенкомИнвалидомАмбулаторно") Тогда
		Объект.ДатаНачалаПоловиннойОплаты = ДатаНачалаПоловиннойОплаты;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СлучайУходаЗаБольнымРебенкомПриИзмененииНаСервере()
	
	СкорректироватьДатуНачалаПоловиннойОплаты();
	РассчитатьНачисления();
	
КонецПроцедуры

&НаСервере
Процедура ПричинаНетрудоспособностиПриИзмененииНаСервере()
	
	ВидОплатыПособия = НачисленияПоКатегории(КатегорияНачисленияПоПричинеНетрудоспособности(Объект.ПричинаНетрудоспособности));
	
	УстановитьДнейОплаты(ЭтаФорма);
	
	ОбновитьОтображениеСлучайУходаЗаБольнымРебенком(ЭтаФорма);
	ОбновитьНадписьДнейОсвобожденияОтРаботы(ЭтаФорма);
	ОпределитьРазмерыПособияПоСтажу(ЭтаФорма);
	
	ГодНачалаСобытия = Неопределено;
	РассчитатьСреднийЗаработок();
	
КонецПроцедуры

&НаСервере
Процедура ДатаНачалаПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ДатаОкончания) И Объект.ДатаОкончания < Объект.ДатаНачала Тогда
		Объект.ДатаОкончания = Объект.ДатаНачала;
	КонецЕсли;
	
	Если НЕ Объект.ЯвляетсяПродолжениемБолезни Тогда
		Объект.ДатаНачалаСобытия = Объект.ДатаНачала;
		СкорректироватьДатуНачалаПоловиннойОплаты();
	КонецЕсли;
	
	ЗаполнитьПериодРасчетаСреднегоЗаработка();
	
	РассчитатьСреднийЗаработок();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодРасчетаСреднегоЗаработка()
	
	ПериодРасчетаСреднего = УчетПособийСоциальногоСтрахованияКлиентСервер.ПериодРасчетаСреднегоЗаработкаФСС(Объект.ДатаНачалаСобытия);
	
	Объект.ПериодРасчетаСреднегоЗаработкаПервыйГод = Год(ПериодРасчетаСреднего.ДатаНачала);
	Объект.ПериодРасчетаСреднегоЗаработкаВторойГод = Год(ПериодРасчетаСреднего.ДатаОкончания);
	
КонецПроцедуры

&НаСервере
Процедура ДатаОкончанияПриИзмененииНаСервере()
	
	СкорректироватьДатуНачалаПоловиннойОплаты();
	УстановитьДнейОплаты(ЭтаФорма);
	
	ОбновитьНадписьДнейОсвобожденияОтРаботы(ЭтаФорма); 	
	
	РассчитатьСреднийЗаработок();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	УстановитьФункциональныеОпцииФормы();
		
	УчетПособийДополнитьФорму();

КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеМесяцаНачисленияНаСервере()
	
	УстановитьУсловияИсчисленияДляПилотногоПроекта();
	
	УчетПособийДополнитьФорму();
	
	Если ЗначениеЗаполнено(Объект.ПериодРегистрации) Тогда
		Объект.ПланируемаяДатаВыплаты = КонецМесяца(Объект.ПериодРегистрации) + 5 * 86400;
		ПересчитатьНДФЛ();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Организация", Объект.Организация));
	
	// Вставить содержимое обработчика.
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"РайонныйКоэффициентРФНаНачалоСобытия",
		"Видимость",
		ПолучитьФункциональнуюОпциюФормы("ПрименятьРайонныйКоэффициент"));
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОповещениеОбИзмененииСреднегоЗаработкаФСС(Знач Результат, Знач ПараметрКоманды) Экспорт
	
	Если НЕ ПустаяСтрока(Результат) Тогда
		
		ЗагрузитьСреднийЗаработокИзХранилища(Результат);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСреднийЗаработокИзХранилища(АдресВХранилище)
	
	Объект.СреднийЗаработокФСС.Очистить();
	Объект.ОтработанноеВремяДляСреднегоФСС.Очистить();
	
	ПараметрыОповещения = ПолучитьИзВременногоХранилища(АдресВХранилище);
	Для каждого СведенияОСреднемЗаработке Из ПараметрыОповещения.СреднийЗаработокФСС Цикл
		ЗаполнитьЗначенияСвойств(Объект.СреднийЗаработокФСС.Добавить(), СведенияОСреднемЗаработке);
	КонецЦикла;
	
	Для каждого СведенияОбОтработанномВремениДляСреднегоФСС Из ПараметрыОповещения.ОтработанноеВремяДляСреднегоФСС Цикл
		ЗаполнитьЗначенияСвойств(Объект.ОтработанноеВремяДляСреднегоФСС.Добавить(), СведенияОбОтработанномВремениДляСреднегоФСС);
	КонецЦикла;
	
	Объект.ПериодРасчетаСреднегоЗаработкаПервыйГод = ПараметрыОповещения.ПервыйГод;
	Объект.ПериодРасчетаСреднегоЗаработкаВторойГод = ПараметрыОповещения.ВторойГод;
	Объект.СреднийДневнойЗаработок = ПараметрыОповещения.СреднийДневнойЗаработок;
	Объект.МинимальныйСреднедневнойЗаработок = ПараметрыОповещения.МинимальныйСреднедневнойЗаработок;
	
	Модифицированность = Истина;
	
	РассчитатьНачисления();
	
КонецПроцедуры

&НаСервере
Функция АдресПараметровВХранилище()
	
	ПараметрыРасчетаСреднегоЗаработка = Новый Структура;
	ПараметрыРасчетаСреднегоЗаработка.Вставить("ДатаНачалаСобытия", Объект.ДатаНачалаСобытия);
	ПараметрыРасчетаСреднегоЗаработка.Вставить("Сотрудник", Объект.Сотрудник);
	ПараметрыРасчетаСреднегоЗаработка.Вставить("Организация", Объект.Организация);
	ПараметрыРасчетаСреднегоЗаработка.Вставить("РайонныйКоэффициентРФНаНачалоСобытия", Объект.РайонныйКоэффициентРФНаНачалоСобытия);
	ПараметрыРасчетаСреднегоЗаработка.Вставить("ПричинаНетрудоспособности", Объект.ПричинаНетрудоспособности);
	ПараметрыРасчетаСреднегоЗаработка.Вставить("ПервыйГод", Объект.ПериодРасчетаСреднегоЗаработкаПервыйГод);
	ПараметрыРасчетаСреднегоЗаработка.Вставить("ВторойГод", Объект.ПериодРасчетаСреднегоЗаработкаВторойГод);
	ПараметрыРасчетаСреднегоЗаработка.Вставить("СреднийЗаработокФСС", Объект.СреднийЗаработокФСС.Выгрузить());
	ПараметрыРасчетаСреднегоЗаработка.Вставить("ОтработанноеВремяДляСреднегоФСС", Объект.ОтработанноеВремяДляСреднегоФСС.Выгрузить());
	
	Возврат ПоместитьВоВременноеХранилище(ПараметрыРасчетаСреднегоЗаработка, УникальныйИдентификатор);
	
КонецФункции

#Область ПилотныйПроектФСС

&НаСервере
Процедура УчетПособийДополнитьФорму()
	Элементы.ГруппаДанныеДляФСС.Видимость = Ложь;
	
	Если ПрямыеВыплатыПособийСоциальногоСтрахования.ПособиеПлатитУчастникПилотногоПроекта(Объект.Организация, Объект.ПериодРегистрации) Тогда
		ПрямыеВыплатыПособийСоциальногоСтрахованияФормы.УстановитьТекстИСсылкуЗаявленияНаВыплатуПособияПоОснованию(ЭтаФорма);
		УстановитьТекстГиперссылкиДанныеЛисткаНетрудоспособности(ЭтаФорма);
		Элементы.ГруппаДанныеДляФСС.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчетПособийОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ВведеныДанныеЛисткаНетрудоспособности" Тогда
		Если Источник = ЭтаФорма Тогда
			ОбновитьДанныеЛисткаНетрудоспособности(Объект, Параметр);
			УстановитьТекстГиперссылкиДанныеЛисткаНетрудоспособности(ЭтаФорма);
			УстановитьСвойстваПоляПервичногоБольничногоЛиста(ЭтаФорма);
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ЗаписаноЗаявлениеСотрудникаНаВыплатуПособия" Тогда
		Если Параметр.Основание = Объект.Ссылка Тогда
			ОбновитьГиперссылкуЗаявлениеОВыплатеПособия(ЭтаФорма, Параметр.Ссылка, Параметр.Дата, Параметр.Номер)
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УчетПособийЗаполнитьДанныеДляРеестраСведенийВФСС()
	ДанныеОбъекта = ПрямыеВыплатыПособийСоциальногоСтрахованияКлиент.СтруктураРеквизитовЛисткаНетрудоспособностиДляРеестраСведенийВФСС();
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.Вставить("СтрокаВозвращаемыхРеквизитов", ПрямыеВыплатыПособийСоциальногоСтрахованияКлиент.СтрокаРеквизитовЛисткаНетрудоспособностиДляРеестраСведенийВФСС());
	ПрямыеВыплатыПособийСоциальногоСтрахованияКлиент.ОткрытьФормуВводаЛисткаНетрудоспособностиДляРеестраСведенийВФСС(ЭтаФорма, ДанныеОбъекта);
КонецПроцедуры

&НаКлиенте
Процедура УчетПособийНажатиеГиперссылкиЗаявлениеНаВыплатуПособия()
	ПрямыеВыплатыПособийСоциальногоСтрахованияКлиент.СоздатьЗаявлениеСотрудникаНаВыплатуПособия(ЭтаФорма, ЗаявлениеНаВыплатуПособия)
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьГиперссылкуЗаявлениеОВыплатеПособия(Форма, Ссылка, Дата, Номер)
	СтрокаГиперссылки =  НСтр("ru = 'Заявление сотрудника на выплату пособия №%1 от %2'");
	Форма.ГиперссылкаЗаявлениеНаВыплатуПособия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаГиперСсылки, Номер, Формат(Дата, "ДЛФ=D"));
	Форма.ЗаявлениеНаВыплатуПособия = Ссылка;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеЛисткаНетрудоспособности(Объект, ВведенныеДанные)
	СтрокаРеквизитовЛисткаНетрудоспособности = ПрямыеВыплатыПособийСоциальногоСтрахованияКлиент.СтрокаРеквизитовЛисткаНетрудоспособностиДляРеестраСведенийВФСС();
	
	ТекущиеДанные = Новый Структура(СтрокаРеквизитовЛисткаНетрудоспособности);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, Объект, СтрокаРеквизитовЛисткаНетрудоспособности);
	
	Если ДанныеЛисткаНетрудоспособностиИзменились(ТекущиеДанные, ВведенныеДанные) Тогда
		ЗаполнитьЗначенияСвойств(Объект, ВведенныеДанные, СтрокаРеквизитовЛисткаНетрудоспособности);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеЛисткаНетрудоспособностиИзменились(ТекущиеДанные, ВведенныеДанные)
	Возврат НЕ ОбщегоНазначения.ДанныеСовпадают(ТекущиеДанные, ВведенныеДанные);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекстГиперссылкиДанныеЛисткаНетрудоспособности(Форма)
	Если ЗначениеЗаполнено(Форма.Объект.НомерЛисткаНетрудоспособности)
		И ЗначениеЗаполнено(Форма.Объект.ДатаВыдачиЛисткаНетрудоспособности) Тогда
		ЗаголовокСсылки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Заполнены данные ЛН №%1 от %2'"),
			Форма.Объект.НомерЛисткаНетрудоспособности,
			Формат(Форма.Объект.ДатаВыдачиЛисткаНетрудоспособности, "ДЛФ=D"));
		Форма.ЗаголовокГиперссылкиЭЛН = ЗаголовокСсылки;
	Иначе
		ЗаголовокСсылки = НСтр("ru = 'Заполнить данные для реестра сведений, передаваемого в ФСС'");
		Форма.ЗаголовокГиперссылкиЭЛН = "";
	КонецЕсли;
	
	Форма.ГиперссылкаВводДополнительныхДанных = ЗаголовокСсылки;
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловияИсчисленияДляПилотногоПроекта()
	
	Если Объект.УсловияИсчисленияКод1 = "47" Тогда
		Объект.УсловияИсчисленияКод1 = Неопределено;
	КонецЕсли;
	
	Если НЕ ПрямыеВыплатыПособийСоциальногоСтрахования.ПособиеПлатитУчастникПилотногоПроекта(Объект.Организация, Объект.ПериодРегистрации) Тогда
		Возврат;
	КонецЕсли;
	
	ДатаУвольненияСотрудника  = ДатаУвольненияСотрудника;
	
	Если ЗначениеЗаполнено(ДатаУвольненияСотрудника) 
		И Объект.ДатаНачалаСобытия > ДатаУвольненияСотрудника Тогда
		Объект.УсловияИсчисленияКод1 = "47";
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЭЛН

&НаКлиенте
Процедура ПолучитьДанныеИзФССПослеЗаписи(Успех, ПараметрыЗаписи) Экспорт
	Если Успех <> Истина Тогда
		Возврат;
	КонецЕсли;
	Состояние(НСтр("ru = 'Получение данных ЭЛН из ФСС...'"));
	
	// Получить параметры, зашифровать и подписать запрос данных ЭЛН.
	РезультатВыгрузки = ВыгрузитьЗапросДляПолученияДанныхЭЛННаСервере();
	Если РезультатВыгрузки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("СтруктураПараметровЗаписи", ПараметрыЗаписи);
	Контекст.Вставить("Организация", РезультатВыгрузки.Организация);
	Контекст.Вставить("ИспользоватьШифрование", Истина);
	Оповещение = Новый ОписаниеОповещения("ПолучитьДанныеИзФССПослеПодписиSOAP", ЭтотОбъект, Контекст);
	
	// Подписание запроса.
	ЭлектронныйДокументооборотСФССКлиент.АдресПодписанногоSOAPОперацииСЭЛНВФСС(
		Оповещение,
		РезультатВыгрузки,
		Контекст.ИспользоватьШифрование);
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеИзФССПослеПодписиSOAP(АдресПодписанногоSOAP, Контекст) Экспорт
	Если Не ЗначениеЗаполнено(АдресПодписанногоSOAP) Тогда
		Возврат;
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Получение данных ЭЛН из ФСС...'"));
	АдресЗашифрованногоОтветаSOAP = Неопределено;
	
	// Отправка запроса.
	ОбменВыполненУспешно = ПолучитьДанныеИзФССНаСервере(АдресПодписанногоSOAP, АдресЗашифрованногоОтветаSOAP, Истина, Ложь);
	Если Не ОбменВыполненУспешно Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПолучитьДанныеИзФССПослеПроверкиПодписиSOAP", ЭтотОбъект, Контекст);
	
	ЭлектронныйДокументооборотСФССКлиент.ПроверитьПодписьSOAPОтветаЭЛНВФСС(
		Оповещение,
		Контекст.Организация,
		АдресЗашифрованногоОтветаSOAP,
		Контекст.ИспользоватьШифрование);
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеИзФССПослеПроверкиПодписиSOAP(Результат, Контекст) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПодписьПрошлаПроверку = (Результат.ПодписьВалидна <> Ложь);
	
	Состояние(НСтр("ru = 'Получение данных ЭЛН из ФСС...'"));
	
	Если Не ПодписьПрошлаПроверку Тогда
		// Выводим сообщение, но продолжаем обмен (данные-то мы получили).
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Подпись ЭЛН недействительна.'"));
	КонецЕсли;
	
	// Обработка результата.
	ОбменВыполненУспешно = ПолучитьДанныеИзФССНаСервере(Неопределено, Результат.АдресРасшифрованногоОтветаSOAP, Ложь, Истина);
	
	Состояние();
	Если ОбменВыполненУспешно Тогда
		Если ПодписьПрошлаПроверку Тогда
			ПараметрыЗаписи = Контекст.СтруктураПараметровЗаписи;
			ПараметрыЗаписи.Вставить("ОчиститьСообщения", Ложь);
			Записать(ПараметрыЗаписи);
		КонецЕсли;
		ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Нстр("ru = 'Загружены данные ЛН №%1.'"),
			Объект.НомерЛисткаНетрудоспособности);
		ПоказатьОповещениеПользователя(НСтр("ru = 'Данные ЭЛН загружены из ФСС'"), , ТекстОповещения, БиблиотекаКартинок.Успешно32);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ВыгрузитьЗапросДляПолученияДанныхЭЛННаСервере()
	Документ = РеквизитФормыВЗначение("Объект");
	Результат = ОбменЛисткамиНетрудоспособностиФСС.ВыгрузитьЗапросДляОбменаЭЛН(Документ, "getPrivateLNData");
	Если Результат <> Неопределено Тогда
		ЗначениеВРеквизитФормы(Документ, "Объект");
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаСервере
Функция ПолучитьДанныеИзФССНаСервере(Знач АдресЗашифрованногоЗапросаSOAP, АдресЗашифрованногоОтветаSOAP,
	Знач ВыполнитьОбмен, Знач ОбработатьРезультаты)
	
	Документ = РеквизитФормыВЗначение("Объект");
	ОбменВыполненУспешно = ОбменЛисткамиНетрудоспособностиФСС.ВыполнитьОбменДаннымиЭЛН(
		Документ,
		"getPrivateLNData",
		АдресЗашифрованногоЗапросаSOAP,
		АдресЗашифрованногоОтветаSOAP,
		ВыполнитьОбмен,
		ОбработатьРезультаты);
	
	Если ОбработатьРезультаты И ОбменВыполненУспешно Тогда
		ЗначениеВРеквизитФормы(Документ, "Объект");
		
		ПричинаНетрудоспособностиПриИзмененииНаСервере();
		ЯвляетсяПродолжениемБолезниПриИзмененииНаСервере();
		ДатаНачалаПриИзмененииНаСервере();
		УстановитьТекстГиперссылкиДанныеЛисткаНетрудоспособности(ЭтотОбъект);
	КонецЕсли;
	
	Возврат ОбменВыполненУспешно;
	
КонецФункции

#КонецОбласти

&НаСервере
Функция СведенияОбНДФЛ() Экспорт
	
	ДополнительныеСведения = УчетНДФЛФормы.ДополнительныеДанныеДляПолученияСведенийОДоходахНДФЛДокумента();
	ДополнительныеСведения.МесяцНачисления = Объект.ПериодРегистрации;
	ДополнительныеСведения.ПланируемаяДатаВыплаты = Объект.ПланируемаяДатаВыплаты;
	
	СведенияОДоходахНДФЛ = УчетНДФЛФормы.СведенияОДоходахНДФЛДокумента(Объект, "Начисления", ДополнительныеСведения);	
	АдресСведенийОбНДФЛ = УчетНДФЛФормы.СведенияОбНДФЛ(ЭтотОбъект);
	
	ДанныеОбНДФЛ = ПолучитьИзВременногоХранилища(АдресСведенийОбНДФЛ);
	ДанныеОбНДФЛ.Вставить("СведенияОДоходах", СведенияОДоходахНДФЛ.СведенияОДоходах);
	ДанныеОбНДФЛ.Вставить("ВычетыКДоходам", СведенияОДоходахНДФЛ.ВычетыКДоходам);
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеОбНДФЛ, ЭтаФорма.УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция НДФЛПодробнееНаСервере(ФизическиеЛица) Экспорт
	
	Если ТипЗнч(ФизическиеЛица) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическиеЛица);
	Иначе
		СписокФизическихЛиц = ФизическиеЛица;
	КонецЕсли;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	НДФЛПодробнее = Новый Массив;
	НДФЛПодробнее.Добавить(ДокументОбъект.Ссылка);
	НДФЛПодробнее.Добавить(УчетНДФЛФормы.РегистрНалоговогоУчетаПоНДФЛ(ДокументОбъект, Модифицированность, СписокФизическихЛиц, Объект.ПериодРегистрации));
	
	Возврат НДФЛПодробнее;
	
КонецФункции

&НаСервере
Процедура ОбновитьДанныеНДФЛНаСервере(АдресВременногоХранилища)
	
	Параметр = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	Объект.НДФЛ.Загрузить(Параметр.НДФЛ);
	Объект.ПримененныеВычетыНаДетейИИмущественные.Загрузить(Параметр.ПримененныеВычетыНаДетейИИмущественные);
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти
