#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	Если Параметры.Свойство("ИзменитьВидОперации")
		И Параметры.ИзменитьВидОперации Тогда
		
		Объект.ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
		
		УстановитьЗаголовокФормы();
		УстановитьЗаголовокКнопкиОплата();
		Модифицированность = Истина;
	КонецЕсли;
	
	ЕстьПравоВводаРозничнаяПродажа    = ПравоДоступа("Добавление", Метаданные.Документы.РозничнаяПродажа);
	ЕстьПравоВводаВозвратОтПокупателя = ПравоДоступа("Добавление", Метаданные.Документы.ВозвратТоваровОтПокупателя);
	
	// Нельзя менять ответственного пока не отработал обработчик обновления
	Элементы.Ответственный.Доступность = Объект.УдалитьОтветственный.Пустая();

	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);

	// Активизировать первую непустую табличную часть
	СписокТабличныхЧастей = Новый СписокЗначений;
	СписокТабличныхЧастей.Добавить("Товары",                "Товары");
	СписокТабличныхЧастей.Добавить("АгентскиеУслуги",       "АгентскиеУслуги");
	СписокТабличныхЧастей.Добавить("ПодарочныеСертификаты", "ПодарочныеСертификаты");
	СписокТабличныхЧастей.Добавить("Оплата",                "Оплата");
	
	АктивизироватьТабличнуюЧасть = ОбщегоНазначенияБПВызовСервера.ПолучитьПервуюНепустуюВидимуюТабличнуюЧасть(
		ЭтаФорма, СписокТабличныхЧастей);
	ОбщегоНазначенияБПВызовСервера.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтаФорма,
		"БП.Документ.РозничнаяПродажа",
		"ФормаДокументаОбщая",
		НСтр("ru='Новости: Розничная продажа (чек)'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
	УстановитьУсловноеОформление();
	УправлениеФормой(ЭтаФорма);
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	УстановитьЗаголовокФормы();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	Если Не ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		Ценообразование.ОбновитьЦеныНоменклатуры(Объект.Ссылка, 
			Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам,
			Объект.ВалютаДокумента,
			Объект.СуммаВключаетНДС);
	КонецЕсли;

	УстановитьСостояниеДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			Если Параметр[1] = Неопределено Тогда
				ТекущийКод = Параметр[0];
			Иначе
				ТекущийКод = Параметр[1][1];
			КонецЕсли;
			НайтиПоШтрихкодуНаСервере(ТекущийКод);
		КонецЕсли;
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ИспользуютсяСканерыШтрихкода И НЕ ТолькоПросмотр Тогда
		// Попробуем подключить сканер штрихкода
		ОповещенияПриПодключении = Новый ОписаниеОповещения("ПодключитьСканерШКЗавершение", ЭтотОбъект); 
		МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПоТипу(ОповещенияПриПодключении, УникальныйИдентификатор, "СканерШтрихкода");
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если СканерШтрихкодаПодключен И ЗавершениеРаботы Тогда
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры 

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	// ПодключаемоеОборудование
	Если СканерШтрихкодаПодключен И НЕ ЗавершениеРаботы Тогда
		ТипыПО = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("СканерШтрихкода");
		ОповещенияПриОтключении = Новый ОписаниеОповещения("ОтключитьСканерШКЗавершение", ЭтотОбъект); 
		МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПоТипу(ОповещенияПриОтключении, УникальныйИдентификатор, ТипыПО);
	КонецЕсли;
	//Конец  ПодключаемоеОборудование
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПринятьОплату(Команда)
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользуетсяФискальныйРегистратор Тогда
		Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
			РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
		Иначе
			ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			РабочееМесто = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыДокумента = ПодготовитьПараметрыФормаОплата(РабочееМесто);
	
	ПараметрыФормыОплаты = Новый Структура;
	
	ПараметрыФормыОплаты.Вставить("Организация",                     Объект.Организация);
	ПараметрыФормыОплаты.Вставить("ЗаголовокКнопкиВыполнить",        ?(ПараметрыДокумента.СписокОборудованияПечатьЧека.Количество() = 0, Элементы.ФормаПринятьОплату.Заголовок, НСтр("ru = 'Напечатать чек'")));
	ПараметрыФормыОплаты.Вставить("ЕстьОплатаКартой",                (ПараметрыДокумента.СписокОборудованияПлатежнаяКарта.Количество() > 0));
	ПараметрыФормыОплаты.Вставить("ЭтоВозврат",                      (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРозничнаяПродажа.Возврат")));
	ПараметрыФормыОплаты.Вставить("АдресТаблицаОплата",              ПараметрыДокумента.АдресТаблицаОплата);
	ПараметрыФормыОплаты.Вставить("СуммаДокумента",                  ИтогВсего);
	ПараметрыФормыОплаты.Вставить("ЗапрашиватьКонтактнуюИнформацию", ПараметрыДокумента.СписокОборудованияПечатьЧека.Количество() > 0);
	
	ОповещениеПриЗакрытииФормыОплаты = Новый ОписаниеОповещения("ПринятьОплатуЗавершение", ЭтотОбъект, ПараметрыДокумента);
	ОткрытьФорму("Документ.РозничнаяПродажа.Форма.ФормаОплаты",ПараметрыФормыОплаты, ЭтотОбъект, , , , ОповещениеПриЗакрытииФормыОплаты, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ПодборТовары(Команда)
	ПараметрыПодбора = ПолучитьПараметрыПодбора("Товары");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПоШтрихкоду(Команда)
	ОписаниеОповещенияПоискПоШтрихкоду = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура("ИспользоватьПодборМаркируемойПродукции", ВестиУчетМаркировкиПродукцииВГИСМ);
	ОткрытьФорму("РегистрСведений.ШтрихкодыНоменклатуры.Форма.ФормаВводШтрихкода", ПараметрыФормы, ЭтаФорма,,,,ОписаниеОповещенияПоискПоШтрихкоду , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ЧекНаВозврат(Команда)
	СтруктураПараметров = Новый Структура;
	ЗначенияЗаполнения = Новый Структура;
	
	Если НЕ Объект.ОтчетОРозничныхПродажах.Пустая() Тогда
		ЗначенияЗаполнения.Вставить("Основание", Объект.ОтчетОРозничныхПродажах);
		ЗначенияЗаполнения.Вставить("РозничнаяПродажа", Объект.Ссылка);
		
		СтруктураПараметров.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		
		ОткрытьФорму("Документ.ВозвратТоваровОтПокупателя.Форма.ФормаДокументаОбщая", СтруктураПараметров, ЭтаФорма, Объект.Ссылка);
	Иначе
		ЗначенияЗаполнения.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийРозничнаяПродажа.Возврат"));
		ЗначенияЗаполнения.Вставить("Основание", Объект.Ссылка);
		
		СтруктураПараметров.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		СтруктураПараметров.Вставить("ИзменитьВидОперации", Истина);
		
		ОткрытьФорму("Документ.РозничнаяПродажа.Форма.ФормаДокументаОбщая", СтруктураПараметров, ЭтаФорма, Объект.Ссылка);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииСклада();
КонецПроцедуры

&НаКлиенте
Процедура НадписьОтчетОРозничныхПродажахНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ПоказатьЗначение(, Объект.ОтчетОРозничныхПродажах);
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеПриИзменении(Элемент)
	
	Если НЕ Объект.Основание.Пустая() Тогда
		ОснованиеПриИзмененииНаСервере();
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	ОбновитьИтоги(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ОбновитьУсловноеОформление(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбработатьИзмененияПоКнопкеЦеныИВалюты();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	ОбновитьИтоги(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НоваяСтрока И НЕ ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	ТекущиеДанные	= Элементы.Товары.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Количество, Цена, Сумма, СтавкаНДС ,СуммаНДС, Всего, ЭтоУслуга, ПродукцияМаркируемаяДляГИСМ, ОсобыйПорядок");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, Склад, ТипЦен, СуммаВключаетНДС, ДокументБезНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ЭтаФорма);
	
	ДанныеОбъекта.Вставить("Реализация", Истина);
	
	ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	Если Объект.Товары.Количество() > 1 
		И ДанныеСтрокиТаблицы.ОсобыйПорядок <> Объект.Товары[0].ОсобыйПорядок Тогда
		ИмяСписка = "Товары";
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Корректность", НСтр("ru = 'Номенклатура'"),
			ТекущиеДанные.НомерСтроки, ИмяСписка, НСтр("ru = 'Один чек не может содержать товары по разным системам налогообложения'"));
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяСписка, ТекущиеДанные.НомерСтроки, "Номенклатура");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "Объект");
	КонецЕсли; 
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Текст) Тогда
		
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ДанныеВыбораНоменклатура(Текст, ПараметрыПолученияДанных);
		
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если НЕ ПустаяСтрока(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ДанныеВыбораНоменклатура(Текст, ПараметрыПолученияДанных);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	ПриИзмененииКоличествоЦена("Товары");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	ПриИзмененииКоличествоЦена("Товары");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	ПриИзмененииСумма("Товары");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	ПриИзмененииСтавкаНДС("Товары");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	ПриИзмененииСуммаНДС("Товары");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если Копирование И ВестиУчетМаркировкиПродукцииВГИСМ Тогда
		Элемент.ТекущиеДанные.КиЗ_ГИСМ = Неопределено;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАгентскиеУслуги

&НаКлиенте
Процедура АгентскиеУслугиПриИзменении(Элемент)
	ОбновитьИтоги(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НоваяСтрока И НЕ ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиНоменклатураПриИзменении(Элемент)
	ТекущиеДанные = Элементы.АгентскиеУслуги.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Содержание, Количество, Цена, Сумма, СтавкаНДС, СуммаНДС, Всего");
	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, ТипЦен, СуммаВключаетНДС, ДокументБезНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ЭтаФорма);
	
	АгентскиеУслугиНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиСодержаниеПриИзменении(Элемент)
	ТекущиеДанные = Элементы.АгентскиеУслуги.ТекущиеДанные;
	РаботаСНоменклатуройКлиент.СодержаниеПриИзменении(ТекущиеДанные, ТекущаяДатаДокумента);
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиКоличествоПриИзменении(Элемент)
	ПриИзмененииКоличествоЦена("АгентскиеУслуги");
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиЦенаПриИзменении(Элемент)
	ПриИзмененииКоличествоЦена("АгентскиеУслуги");
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиСуммаПриИзменении(Элемент)
	ПриИзмененииСумма("АгентскиеУслуги");
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиСтавкаНДСПриИзменении(Элемент)
	ПриИзмененииСтавкаНДС("АгентскиеУслуги");
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиСуммаНДСПриИзменении(Элемент)

	ПриИзмененииСуммаНДС("АгентскиеУслуги");

КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиКонтрагентПриИзменении(Элемент)

	ДанныеСтрокаТаблицы = Новый Структура("Контрагент, ДоговорКонтрагента");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокаТаблицы, Элементы.АгентскиеУслуги.ТекущиеДанные);

	ПараметрыОбъекта = Новый Структура("Организация");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);

	АгентскиеУслугиКонтрагентПриИзмененииНаСервере(ДанныеСтрокаТаблицы, ПараметрыОбъекта);

	ЗаполнитьЗначенияСвойств(Элементы.АгентскиеУслуги.ТекущиеДанные, ДанныеСтрокаТаблицы);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПодарочныеСертификаты

&НаКлиенте
Процедура ПодарочныеСертификатыПриИзменении(Элемент)
	ОбновитьИтоги(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПодарочныеСертификатыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НоваяСтрока И НЕ ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПодарочныеСертификатыВидОплатыОткрытие(Элемент, СтандартнаяОбработка)
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	
	Если ТекущиеДанные.ВидОплаты.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыПередачи = Новый Структура;
	
	ДопустимыеТипыОплаты = Новый Массив;
	
	ДопустимыеТипыОплаты.Добавить(ПредопределенноеЗначение("Перечисление.ТипыОплат.ПодарочныйСертификатСобственный"));
	ДопустимыеТипыОплаты.Добавить(ПредопределенноеЗначение("Перечисление.ТипыОплат.ПодарочныйСертификатСторонний"));
	
	ПараметрыПередачи.Вставить("ТипОплатыДоступныеЗначения", ДопустимыеТипыОплаты);
	ПараметрыПередачи.Вставить("Ключ", ТекущиеДанные.ВидОплаты);
	
	ОткрытьФорму("Справочник.ВидыОплатОрганизаций.ФормаОбъекта", ПараметрыПередачи, ЭтаФорма);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОплата

&НаКлиенте
Процедура ОплатаВидОплатыОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыПередачи = Новый Структура;
	
	ДопустимыеТипыОплаты = Новый Массив;
	
	ДопустимыеТипыОплаты.Добавить(ПредопределенноеЗначение("Перечисление.ТипыОплат.ПлатежнаяКарта"));
	ДопустимыеТипыОплаты.Добавить(ПредопределенноеЗначение("Перечисление.ТипыОплат.БанковскийКредит"));
	
	Если ИспользуютсяПодарочныеСертификаты Тогда
	
		ДопустимыеТипыОплаты.Добавить(ПредопределенноеЗначение("Перечисление.ТипыОплат.ПодарочныйСертификатСобственный"));
		ДопустимыеТипыОплаты.Добавить(ПредопределенноеЗначение("Перечисление.ТипыОплат.ПодарочныйСертификатСторонний"));
		
	КонецЕсли;
	
	ПараметрыПередачи.Вставить("ТипОплатыДоступныеЗначения", ДопустимыеТипыОплаты);
	ПараметрыПередачи.Вставить("Ключ", Элемент.Родитель.ТекущиеДанные.ВидОплаты);
	
	ОткрытьФорму("Справочник.ВидыОплатОрганизаций.ФормаОбъекта", ПараметрыПередачи, ЭтаФорма);
	
КонецПроцедуры


#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункцииБСП
// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#КонецОбласти 


#Область ПечатьЧека

&НаСервере
Функция ТекстЗапросаТаблицаТоваров(НомераТаблиц)
	
	НомераТаблиц.Вставить("ВТ_Сертификаты",                  НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВТ_Товары",                       НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВТ_АгентскиеУслуги",              НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВТ_ТаблицаОплата",                НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВТ_ТаблицаЧека",                  НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВТ_ШтрихкодыНоменклатуры",        НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаДокумента",                НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаОплат",                    НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаКомитенты",                НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаДоговораПлатежногоАгента", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаСертификаты.ВидОплаты,
	|	ТаблицаСертификаты.Сумма
	|ПОМЕСТИТЬ ТаблицаСертификаты
	|ИЗ
	|	&ТаблицаСертификаты КАК ТаблицаСертификаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Количество,
	|	ТаблицаТовары.Цена,
	|	ТаблицаТовары.Сумма,
	|	ТаблицаТовары.СтавкаНДС,
	|	ТаблицаТовары.СуммаНДС
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУслуги.Номенклатура,
	|	ТаблицаУслуги.Содержание,
	|	ВЫБОР
	|		КОГДА ТаблицаУслуги.Количество = 0
	|			ТОГДА 1
	|		ИНАЧЕ ТаблицаУслуги.Количество
	|	КОНЕЦ КАК Количество,
	|	ТаблицаУслуги.Цена,
	|	ТаблицаУслуги.Сумма,
	|	ТаблицаУслуги.СтавкаНДС,
	|	ТаблицаУслуги.СуммаНДС,
	|	ТаблицаУслуги.Контрагент,
	|	ТаблицаУслуги.ДоговорКонтрагента
	|ПОМЕСТИТЬ ВТ_АгентскиеУслуги
	|ИЗ
	|	&ТаблицаУслуги КАК ТаблицаУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОплата.ВидОплаты КАК ВидОплаты,
	|	ТаблицаОплата.Сумма
	|ПОМЕСТИТЬ ТаблицаОплата
	|ИЗ
	|	&ТаблицаОплата КАК ТаблицаОплата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура,
	|	NULL КАК Содержание,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СправочникНоменклатура.Услуга, ИСТИНА)
	|				И ТаблицаТовары.Количество = 0
	|			ТОГДА 1
	|		ИНАЧЕ ТаблицаТовары.Количество
	|	КОНЕЦ КАК Количество,
	|	ТаблицаТовары.Цена,
	|	ТаблицаТовары.Сумма,
	|	ТаблицаТовары.СтавкаНДС,
	|	ТаблицаТовары.СуммаНДС,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СправочникНоменклатура.Услуга, ИСТИНА)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПризнакиПредметаРасчета.Услуга)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПризнакиПредметаРасчета.Товар)
	|	КОНЕЦ КАК ПризнакПредметаРасчета,
	|	ЗНАЧЕНИЕ(Перечисление.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой) КАК ПризнакСпособаРасчета,
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК ДоговорКонтрагента
	|ПОМЕСТИТЬ ТаблицаЧека
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаУслуги.Номенклатура,
	|	ТаблицаУслуги.Содержание,
	|	ТаблицаУслуги.Количество,
	|	ТаблицаУслуги.Цена,
	|	ТаблицаУслуги.Сумма,
	|	ТаблицаУслуги.СтавкаНДС,
	|	ТаблицаУслуги.СуммаНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ПризнакиПредметаРасчета.Услуга),
	|	ЗНАЧЕНИЕ(Перечисление.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой),
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДоговорыКонтрагентов.ПлатежныйАгент, ЛОЖЬ)
	|			ТОГДА ТаблицаУслуги.ДоговорКонтрагента
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ
	|ИЗ
	|	ВТ_АгентскиеУслуги КАК ТаблицаУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО ТаблицаУслуги.ДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
	|	ВидыОплатОрганизаций.Наименование,
	|	1,
	|	ТаблицаСертификаты.Сумма,
	|	ТаблицаСертификаты.Сумма,
	|	ВЫБОР
	|		КОГДА &ДокументБезНДС
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	|	КОНЕЦ,
	|	0,
	|	ЗНАЧЕНИЕ(Перечисление.ПризнакиПредметаРасчета.ПлатежВыплата),
	|	ЗНАЧЕНИЕ(Перечисление.ПризнакиСпособаРасчета.Аванс),
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДоговорыКонтрагентов.ПлатежныйАгент, ЛОЖЬ)
	|			ТОГДА ДоговорыКонтрагентов.Ссылка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ
	|ИЗ
	|	ТаблицаСертификаты КАК ТаблицаСертификаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыОплатОрганизаций КАК ВидыОплатОрганизаций
	|		ПО ТаблицаСертификаты.ВидОплаты = ВидыОплатОрганизаций.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО (ВидыОплатОрганизаций.ДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(ШтрихкодыНоменклатуры.Штрихкод) КАК Штрихкод
	|ПОМЕСТИТЬ ШтрихкодыНоменклатуры
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО ТаблицаТовары.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	ШтрихкодыНоменклатуры.Номенклатура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ТаблицаЧека.Содержание, СправочникНоменклатура.НаименованиеПолное) КАК Наименование,
	|	ЕСТЬNULL(СправочникНоменклатура.Ссылка, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
	|	ЕСТЬNULL(СправочникНоменклатура.Артикул, """") КАК Артикул,
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Штрихкод, """") КАК Штрихкод,
	|	ТаблицаЧека.Количество,
	|	ВЫБОР
	|		КОГДА &СуммаВключаетНДС
	|			ТОГДА ТаблицаЧека.Цена
	|		КОГДА ТаблицаЧека.Количество <> 0
	|			ТОГДА ВЫРАЗИТЬ((ТаблицаЧека.Сумма + ТаблицаЧека.СуммаНДС) / ТаблицаЧека.Количество КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ ТаблицаЧека.Сумма + ТаблицаЧека.СуммаНДС
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА &СуммаВключаетНДС
	|			ТОГДА ТаблицаЧека.Сумма
	|		ИНАЧЕ ТаблицаЧека.Сумма + ТаблицаЧека.СуммаНДС
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА &ЭтоВерсия105
	|				И ТаблицаЧека.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20_120)
	|			ТОГДА 120
	|		КОГДА ТаблицаЧека.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
	|				ИЛИ ТаблицаЧека.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20_120)
	|			ТОГДА 20
	|		КОГДА &ЭтоВерсия105
	|				И ТаблицаЧека.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	|			ТОГДА 118
	|		КОГДА ТаблицаЧека.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	|				ИЛИ ТаблицаЧека.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	|			ТОГДА 18
	|		КОГДА &ЭтоВерсия105
	|				И ТаблицаЧека.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
	|			ТОГДА 110
	|		КОГДА ТаблицаЧека.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	|				ИЛИ ТаблицаЧека.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
	|			ТОГДА 10
	|		КОГДА ТаблицаЧека.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтавкаНДС,
	|	ТаблицаЧека.СуммаНДС,
	|	ВЫБОР
	|		КОГДА &ЭтоВерсия105
	|			ТОГДА ТаблицаЧека.ПризнакСпособаРасчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ПризнакСпособаРасчета,
	|	ВЫБОР
	|		КОГДА &ЭтоВерсия105
	|			ТОГДА ТаблицаЧека.ПризнакПредметаРасчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ПризнакПредметаРасчета,
	|	1 КАК НомерСекции,
	|	ТаблицаЧека.ДоговорКонтрагента
	|ИЗ
	|	ТаблицаЧека КАК ТаблицаЧека
	|		ЛЕВОЕ СОЕДИНЕНИЕ ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО ТаблицаЧека.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТаблицаЧека.Номенклатура = СправочникНоменклатура.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР ВидыОплатОрганизаций.ТипОплаты
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыОплат.Наличные)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыОплатыККТ.Наличные)
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПодарочныйСертификатСобственный)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыОплатыККТ.Предоплата)
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПодарочныйСертификатСторонний)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыОплатыККТ.Предоплата)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыОплатыККТ.Электронно)
	|	КОНЕЦ КАК ТипОплаты,
	|	СУММА(ТаблицаОплата.Сумма) КАК Сумма
	|ИЗ
	|	ТаблицаОплата КАК ТаблицаОплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыОплатОрганизаций КАК ВидыОплатОрганизаций
	|		ПО (ВидыОплатОрганизаций.Ссылка = ТаблицаОплата.ВидОплаты)
	|ГДЕ
	|	ВидыОплатОрганизаций.ТипОплаты <> ЗНАЧЕНИЕ(Перечисление.ТипыОплат.Наличные)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР ВидыОплатОрганизаций.ТипОплаты
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыОплат.Наличные)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыОплатыККТ.Наличные)
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПодарочныйСертификатСобственный)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыОплатыККТ.Предоплата)
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПодарочныйСертификатСторонний)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыОплатыККТ.Предоплата)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыОплатыККТ.Электронно)
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТипОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_АгентскиеУслуги.Контрагент,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_АгентскиеУслуги.ДоговорКонтрагента) КАК КоличествоДоговоров
	|ИЗ
	|	ВТ_АгентскиеУслуги КАК ВТ_АгентскиеУслуги
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_АгентскиеУслуги.Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
	|	АгентскиеУслуги.ДоговорКонтрагента
	|ИЗ
	|	ВТ_АгентскиеУслуги КАК АгентскиеУслуги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО АгентскиеУслуги.ДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
	|ГДЕ
	|	ДоговорыКонтрагентов.ПлатежныйАгент";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
КонецФункции

&НаСервере
Функция ПодготовитьПараметрыПечатиЧека(ВерсияФормата)
	Запрос = Новый Запрос;
	
	ЭтоВерсия105 = НЕ ОбщегоНазначенияКлиентСервер.СравнитьВерсии("1.0.5.0", ВерсияФормата) > 0;
	
	Запрос.УстановитьПараметр("ТаблицаТовары",      Объект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаУслуги",      Объект.АгентскиеУслуги.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаСертификаты", Объект.ПодарочныеСертификаты.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаОплата",      Объект.Оплата.Выгрузить());
	Запрос.УстановитьПараметр("СуммаВключаетНДС",   Объект.СуммаВключаетНДС);
	Запрос.УстановитьПараметр("ДокументБезНДС",     Объект.ДокументБезНДС);
	Запрос.УстановитьПараметр("ЭтоВерсия105",       ЭтоВерсия105);
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаТаблицаТоваров(НомераТаблиц);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ПараметрыПечатиЧека = Новый Структура;
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПечатиЧека.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПечатиЧека;
КонецФункции

&НаСервере
Функция СистемаНалогообложения()
	ПрименяетсяОсобыйПорядокНалогообложения = 
		УчетнаяПолитика.ПрименяетсяОсобыйПорядокНалогообложения(Объект.Организация, Объект.Дата) 
		ИЛИ (Объект.Товары.Количество()>0 И Объект.Товары[0].ОсобыйПорядок);
	
	НалоговыйРежим = Перечисления.ТипыСистемНалогообложенияККТ.ОСН;
	Если ПрименяетсяОсобыйПорядокНалогообложения Тогда
		НалоговыйРежим = ?(УчетнаяПолитика.ПлательщикЕНВД(Объект.Организация, Объект.Дата), Перечисления.ТипыСистемНалогообложенияККТ.ЕНВД, Перечисления.ТипыСистемНалогообложенияККТ.Патент);
	ИначеЕсли УчетнаяПолитика.ПрименяетсяУСНДоходы(Объект.Организация, Объект.Дата) Тогда
		НалоговыйРежим = Перечисления.ТипыСистемНалогообложенияККТ.УСНДоход;
	ИначеЕсли УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Объект.Организация, Объект.Дата) Тогда 
		НалоговыйРежим = Перечисления.ТипыСистемНалогообложенияККТ.УСНДоходРасход;
	КонецЕсли;
	
	Возврат НалоговыйРежим;
КонецФункции

&НаКлиенте
Процедура ПолучитьПараметрыЗавершение(ПараметрыФискальногоУстройства, ДополнительныеПараметры) Экспорт
	
	ОписаниеОшибки = "";
	Если ПараметрыФискальногоУстройства =  Неопределено Тогда
		ВерсияФормата = "1.1.0.0";
	ИначеЕсли НЕ ПараметрыФискальногоУстройства.Результат Тогда 
		ОписаниеОшибки = ПараметрыФискальногоУстройства.ОписаниеОшибки;
	Иначе
		ВерсияФормата = ОбщегоНазначенияБПКлиентСервер.ПолучитьВерсиюФФД(ПараметрыФискальногоУстройства.ВыходныеПараметры.ВерсияФФДФН, ПараметрыФискальногоУстройства.ВыходныеПараметры.ВерсияФФДККТ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ПараметрыОплаты = ДополнительныеПараметры.ПараметрыОплаты;
		Если ПараметрыОплаты.АдресТаблицыОплаты = Неопределено Тогда
			ПараметрыПечатиЧека = ПараметрыПечатиЧекаНаличныеКарта(ПараметрыОплаты, ВерсияФормата, ОписаниеОшибки);
		Иначе
			ПараметрыПечатиЧека = ПараметрыПечатиЧекаСложнаяОплата(ПараметрыОплаты, ВерсияФормата, ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли; 

	Если ЗначениеЗаполнено(ОписаниеОшибки) ИЛИ ПараметрыПечатиЧека = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'При подключении устройства произошла ошибка.
			|Чек не напечатан на фискальном устройстве.
			|Дополнительное описание:
			|%ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ЭтаФорма.Доступность = Ложь; // Блокируем интерфейс пользователя.
	
	Если ДополнительныеПараметры.Свойство("ИдентификаторУстройстваЭТ") Тогда
		ДополнительныеПараметры.Вставить("ИдентификаторУстройства", ДополнительныеПараметры.ИдентификаторУстройства);
		ДополнительныеПараметры.Вставить("ПараметрыПечатиЧека", ПараметрыПечатиЧека);
		
		ОповещениеПриЗавершенииОперации = Новый ОписаниеОповещения("ОперацияПоПлатежнойКартеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ПараметрыОперации = МенеджерОборудованияКлиент.ПараметрыВыполненияЭквайринговойОперации();
		ПараметрыОперации.ТипТранзакции  = "AuthorizeSales";
		ПараметрыОперации.СуммаОперации  = ДополнительныеПараметры.ОплатаКарта;
		ПараметрыОперации.НомерЧека      = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Объект.Номер, Истина, Истина);
		
		МенеджерОборудованияКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(ОповещениеПриЗавершенииОперации, УникальныйИдентификатор, 
			ДополнительныеПараметры.ИдентификаторУстройстваЭТ, ДополнительныеПараметры.ИдентификаторУстройства, ПараметрыОперации);
	Иначе
		Если ДополнительныеПараметры.ИдентификаторУстройства <> Неопределено Тогда 
			ОповещениеПриЗавершенииПечатиЧека = Новый ОписаниеОповещения("ПечатьЧекаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			
			МенеджерОборудованияКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(
				ОповещениеПриЗавершенииПечатиЧека, 
				УникальныйИдентификатор, 
				ПараметрыПечатиЧека, 
				ДополнительныеПараметры.ИдентификаторУстройства,
				,
				,
				);
				
		Иначе
			ПечатьЧекаЗавершение(Новый Структура("Результат", Истина), ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПараметрыПечатиЧека(ПараметрыОплаты, ВерсияФормата, ОписаниеОшибки)
	
	СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Объект.Организация, Объект.Дата);
	
	ОбщиеПараметры = МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека();
	
	ЭтоВерсия110 = НЕ ОбщегоНазначенияКлиентСервер.СравнитьВерсии("1.1.0.0", ВерсияФормата) > 0;
	ЭтоВерсия105 = НЕ ОбщегоНазначенияКлиентСервер.СравнитьВерсии("1.0.5.0", ВерсияФормата) > 0;
	
	ОбщиеПараметры.ТипРасчета = ?(
		Объект.ВидОперации = Перечисления.ВидыОперацийРозничнаяПродажа.Продажа, 
		Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств, 
		Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств);
		
	ДанныеКассира = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛицаТекущегоПользователя(Объект.Организация, Объект.Дата);
	
	ОбщиеПараметры.Кассир    = ?(ДанныеКассира.Представление = Неопределено, Неопределено, СокрЛП(СтрШаблон("%1 %2", Строка(ДанныеКассира.Должность), ДанныеКассира.Представление)));
	ОбщиеПараметры.КассирИНН = ДанныеКассира.ИНН;
	
	ОбщиеПараметры.Электронно = Ложь;
	
	ОбщиеПараметры.НомерКассы     = "00001";
	ОбщиеПараметры.НомерЧека      = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Объект.Номер, Истина, Истина);
	ОбщиеПараметры.НомерСмены     = 1;
	
	ОбщиеПараметры.ОрганизацияНазвание = СведенияОбОрганизации.НаименованиеДляПечатныхФорм;
	ОбщиеПараметры.ОрганизацияИНН      = СведенияОбОрганизации.ИНН;
	ОбщиеПараметры.ОрганизацияКПП      = СведенияОбОрганизации.КПП;
	ОбщиеПараметры.АдресМагазина       = СведенияОбОрганизации.ФактическийАдрес;
	
	ОбщиеПараметры.ОтправительEMail    = СведенияОбОрганизации.Email;
	ОбщиеПараметры.ПокупательEmail     = ПараметрыОплаты.ПокупательEmail;
	ОбщиеПараметры.ПокупательНомер     = ПараметрыОплаты.ПокупательНомер;
	
	ОбщиеПараметры.НаименованиеМагазина = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Склад, "Наименование");
	
	ОбщиеПараметры.СистемаНалогообложения = СистемаНалогообложения();
	
	// Подготовка таблицы товаров
	ПараметрыПечатиЧека = ПодготовитьПараметрыПечатиЧека(ВерсияФормата);
	
	ТаблицаДокумента    = ПараметрыПечатиЧека.ТаблицаДокумента;
	
	СписокДоговоровПлатежногоАгента = ПараметрыПечатиЧека.ТаблицаДоговораПлатежногоАгента.ВыгрузитьКолонку("ДоговорКонтрагента");
	
	Если НЕ ЭтоВерсия110 
		И (СписокДоговоровПлатежногоАгента.Количество() > 1 
			ИЛИ (СписокДоговоровПлатежногоАгента.Количество() = 1 
				И (Объект.Товары.Количество() > 0 
				ИЛИ ПараметрыПечатиЧека.ТаблицаКомитенты.Итог("КоличествоДоговоров") > 1))) Тогда
		ТекстСообщения = НСтр("ru = 'Для версии формата фискальных данных %1 возможен лишь один договор платежного агента в чеке'");
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВерсияФормата);
		Возврат Неопределено;
	КонецЕсли;
	
	Если СписокДоговоровПлатежногоАгента.Количество() = 1 
		И ПараметрыПечатиЧека.ТаблицаКомитенты.Итог("КоличествоДоговоров") = 1 Тогда
		СтруктураРеквизитов = УчетДенежныхСредствБП.РеквизитыПлатежногоАгента(СписокДоговоровПлатежногоАгента[0]);
		ЗаполнитьЗначенияСвойств(ОбщиеПараметры, СтруктураРеквизитов);
	ИначеЕсли ЭтоВерсия105 Тогда
		СписокКомитентовУслуги = ПараметрыПечатиЧека.ТаблицаКомитенты.ВыгрузитьКолонку("Контрагент");
		
		Если НЕ ЭтоВерсия110 
			И (СписокКомитентовУслуги.Количество() > 1 
				ИЛИ (СписокКомитентовУслуги.Количество() = 1 И Объект.Товары.Количество() > 0 )) Тогда
			ТекстСообщения = НСтр("ru = 'Для версии формата фискальных данных %1 возможен лишь один принципал в чеке'");
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВерсияФормата);
			Возврат Неопределено;
		КонецЕсли;
		
		Если НЕ ЭтоВерсия110 И СписокКомитентовУслуги.Количество() = 1 Тогда 
			// Версия фискальных данных < 1.1 и только один комитент на услуги
			ОбщиеПараметры.ПризнакАгента = Перечисления.ПризнакиАгента.Агент;
			КомитентПоЧеку = СписокКомитентовУслуги[0];
			
			ЗаполнитьЗначенияСвойств(ОбщиеПараметры.ДанныеПоставщика, ОбщегоНазначения.ЗначенияРеквизитовОбъекта(КомитентПоЧеку, "Наименование, ИНН"));
			ОбщиеПараметры.ДанныеПоставщика.Вставить("Телефон", УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(КомитентПоЧеку, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента));
		Иначе
			ПараметрыОбъекта = Новый Структура("Организация, Дата");
		
			ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
			
			МассивТоваровНаКомиссии = Новый Массив;
			
			СписокНоменклатуры = ТаблицаДокумента.ВыгрузитьКолонку("Номенклатура");
			СведенияОСпискеНоменклатуры = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(СписокНоменклатуры, ПараметрыОбъекта, Истина, Ложь);
			Для каждого СведенияОНоменклатуре Из СведенияОСпискеНоменклатуры Цикл
				Если СведенияОНоменклатуре.Значение.Комиссионный Тогда
					МассивТоваровНаКомиссии.Добавить(СведенияОНоменклатуре.Ключ);
				КонецЕсли;
			КонецЦикла;
			
			СведенияОКомитентах = УчетДенежныхСредствБП.ПолучитьСведенияОКомитентах(МассивТоваровНаКомиссии, ПараметрыОбъекта.Организация, ПараметрыОбъекта.Дата);
			
			КомитентПоЧеку = УчетДенежныхСредствБП.КомитентПоЧеку(СведенияОКомитентах, МассивТоваровНаКомиссии);
			
			Если КомитентПоЧеку <> Неопределено Тогда
				ОбщиеПараметры.ПризнакАгента = Перечисления.ПризнакиАгента.Комиссионер;
				
				ЗаполнитьЗначенияСвойств(ОбщиеПараметры.ДанныеПоставщика, ОбщегоНазначения.ЗначенияРеквизитовОбъекта(КомитентПоЧеку, "Наименование, ИНН"));
				ОбщиеПараметры.ДанныеПоставщика.Вставить("Телефон", УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(КомитентПоЧеку, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Для каждого СтрокаТовары Из ТаблицаДокумента Цикл
		СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека(); 
		
		ЗаполнитьЗначенияСвойств(СтрокаПозицииЧека, СтрокаТовары);
		
		СтрокаПозицииЧека.ЦенаСоСкидками = СтрокаПозицииЧека.Цена;
		
		Если ЭтоВерсия110  И ОбщиеПараметры.ПризнакАгента = Неопределено ТОгда
			Если ЗначениеЗаполнено(СтрокаТовары.ДоговорКонтрагента) Тогда
				РеквизитыАгента = УчетДенежныхСредствБП.РеквизитыПлатежногоАгента(СтрокаТовары.ДоговорКонтрагента);
				ЗаполнитьЗначенияСвойств(СтрокаПозицииЧека, РеквизитыАгента);
			ИначеЕсли ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда 
				Комитент = СведенияОКомитентах[СтрокаТовары.Номенклатура];
				Если Комитент <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(СтрокаПозицииЧека.ДанныеПоставщика, ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Комитент, "Наименование, ИНН"));
					СтрокаПозицииЧека.ДанныеПоставщика.Вставить("Телефон", УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Комитент, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента));
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли; 
		
		ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
	КонецЦикла;
	
	ОплатыПоДокументу = ПараметрыПечатиЧека.ТаблицаОплат;
	
	Если ПараметрыОплаты.ОплатаНаличные > 0 Тогда
		СтрокаОплаты = ОплатыПоДокументу.Добавить();
		СтрокаОплаты.ТипОплаты = 0;
		СтрокаОплаты.Сумма = ПараметрыОплаты.ОплатаНаличные;
	КонецЕсли;
	
	Для каждого СтрокаОплатыПоДокументу Из ОплатыПоДокументу Цикл
		СтрокаОплаты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаОплатыПоДокументу);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЦикла;
	
	
	Возврат ОбщиеПараметры;
КонецФункции

&НаСервере
Функция ПараметрыПечатиЧекаНаличныеКарта(ПараметрыОплаты, ВерсияФормата, ОписаниеОшибки)
	
	Возврат ПараметрыПечатиЧека(ПараметрыОплаты, ВерсияФормата, ОписаниеОшибки);
	
КонецФункции

&НаСервере
Функция ПараметрыПечатиЧекаСложнаяОплата(ПараметрыОплаты, ВерсияФормата, ОписаниеОшибки)

	ТаблицаОплата = ПолучитьИзВременногоХранилища(ПараметрыОплаты.АдресТаблицыОплаты);
	
	Объект.Оплата.Загрузить(ТаблицаОплата);
	
	УдалитьИзВременногоХранилища(ПараметрыОплаты.АдресТаблицыОплаты);
	
	Возврат ПараметрыПечатиЧекаНаличныеКарта(ПараметрыОплаты, ВерсияФормата, ОписаниеОшибки);

КонецФункции

&НаСервере
Функция СписокОборудованияПечатьЧека(РабочееМесто)
	
	МассивТиповОборудования = Новый Массив;
	МассивТиповОборудования.Добавить(ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ФискальныйРегистратор"));
	МассивТиповОборудования.Добавить(ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ПринтерЧеков"));
	МассивТиповОборудования.Добавить(ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ККТ"));
	
	Возврат СписокОборудованияПоТипу(МассивТиповОборудования, РабочееМесто);

КонецФункции

&НаСервере
Функция СписокОборудованияПлатежнаяКарта(РабочееМесто)

	МассивТиповОборудования = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал"));
	
	Возврат СписокОборудованияПоТипу(МассивТиповОборудования, РабочееМесто);

КонецФункции

&НаСервере
Функция СписокОборудованияПоТипу(МассивТиповОборудования, РабочееМесто)
	
	Если НЕ ИспользуетсяФискальныйРегистратор ИЛИ РабочееМесто = Неопределено Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	ПодключаемоеОборудование.Ссылка
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОборудованиеПоОрганизациям КАК ОборудованиеПоОрганизациям
	|		ПО ПодключаемоеОборудование.Ссылка = ОборудованиеПоОрганизациям.Оборудование
	|ГДЕ
	|	(ОборудованиеПоОрганизациям.Организация В (&Организация)
	|			ИЛИ ОборудованиеПоОрганизациям.Организация ЕСТЬ NULL )
	|	И (ОборудованиеПоОрганизациям.Склад В (&Склады)
	|			ИЛИ ОборудованиеПоОрганизациям.Склад ЕСТЬ NULL )
	|	И ПодключаемоеОборудование.ТипОборудования В(&ТипОборудования)
	|	И ПодключаемоеОборудование.РабочееМесто = &РабочееМесто
	|	И НЕ ПодключаемоеОборудование.ПометкаУдаления
	|	И ПодключаемоеОборудование.УстройствоИспользуется";
	
	МассивОрганизаций = Новый Массив;
	МассивОрганизаций.Добавить(Объект.Организация);
	МассивОрганизаций.Добавить(ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
	
	МассивСкладов = Новый Массив;
	МассивСкладов.Добавить(Объект.Склад);
	МассивСкладов.Добавить(ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка"));
	
	Запрос.УстановитьПараметр("Организация",     МассивОрганизаций);
	Запрос.УстановитьПараметр("Склады",          МассивСкладов);
	Запрос.УстановитьПараметр("ТипОборудования", МассивТиповОборудования);
	Запрос.УстановитьПараметр("РабочееМесто",    РабочееМесто);

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции

&НаСервереБезКонтекста
Функция ВидыОплатПлатежнойКартой(Организация)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	ВидыОплатОрганизаций.Ссылка
	|ИЗ
	|	Справочник.ВидыОплатОрганизаций КАК ВидыОплатОрганизаций
	|ГДЕ
	|	ВидыОплатОрганизаций.Организация = &Организация
	|	И ВидыОплатОрганизаций.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПлатежнаяКарта)
	|	И НЕ ВидыОплатОрганизаций.ПометкаУдаления";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции

&НаКлиенте
Процедура ПринятьОплатуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено И ТипЗнч(Результат) = Тип("Структура") Тогда
		ПараметрыОповещения = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(Результат);
		ПараметрыОповещения.Вставить("СписокОборудования", ДополнительныеПараметры.СписокОборудованияПечатьЧека);
		Если Результат.ОплатаКарта <> 0 Тогда
			СписокВидовОплатПоОрганизации = ВидыОплатПлатежнойКартой(Объект.Организация);
			
			Если СписокВидовОплатПоОрганизации.Количество() = 1 Тогда
				ОплатаКартойЗавершение(СписокВидовОплатПоОрганизации[0], ПараметрыОповещения);
			Иначе
				ОтборВидыОплат = Новый Структура("Организация, ТипОплаты, ПометкаУдаления", Объект.Организация, ПредопределенноеЗначение("Перечисление.ТипыОплат.ПлатежнаяКарта"), Ложь);
				ЗаголовокФормыВыбора = НСтр("ru = 'Выберите вид оплаты'");
				
				ОповещениеПриЗавершенииВыбора = Новый ОписаниеОповещения("ОплатаКартойЗавершение", ЭтотОбъект, ПараметрыОповещения);
				
				ПараметрыОткрытияФормы = Новый Структура("Отбор, Заголовок", ОтборВидыОплат, ЗаголовокФормыВыбора);
				ОткрытьФорму("Справочник.ВидыОплатОрганизаций.ФормаВыбора", ПараметрыОткрытияФормы, ЭтаФорма, УникальныйИдентификатор, , ,ОповещениеПриЗавершенииВыбора);
			КонецЕсли;
		Иначе
			НапечататьЧек(ПараметрыОповещения);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОплатаКартойЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено  Тогда
		Если ЗначениеЗаполнено(Результат) Тогда
			Объект.Оплата.Очистить();
			СтрокаОплата = Объект.Оплата.Добавить();
			СтрокаОплата.ВидОплаты = Результат;
			СтрокаОплата.Сумма = ДополнительныеПараметры.ОплатаКарта;
		КонецЕсли;
		
		ИдентификаторУстройстваЭТ = ИдентификаторУстройстваЭТ(Результат);
		
		Если ЗначениеЗаполнено(ИдентификаторУстройстваЭТ) Тогда
			ДополнительныеПараметры.Вставить("ИдентификаторУстройстваЭТ", ИдентификаторУстройстваЭТ);
		КонецЕсли; 
		
		НапечататьЧек(ДополнительныеПараметры);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НапечататьЧек(ПараметрыОплаты)
	
	ПараметрыОповещения = Новый Структура("ПараметрыОплаты , ПечататьТоварныйЧек, ОплатаКарта", 
		ПараметрыОплаты , ПараметрыОплаты.ПечататьТоварныйЧек, ПараметрыОплаты.ОплатаКарта);
		
	Если ПараметрыОплаты.Свойство("ИдентификаторУстройстваЭТ") Тогда
		ПараметрыОповещения.Вставить("ИдентификаторУстройстваЭТ", ПараметрыОплаты.ИдентификаторУстройстваЭТ);
	КонецЕсли;
	
	СписокОборудования = ПараметрыОплаты.СписокОборудования;
	
	Если СписокОборудования.Количество() = 1 Тогда
		
		ВыбратьУстройствоЗавершение(СписокОборудования[0], ПараметрыОповещения);
		
	ИначеЕсли СписокОборудования.Количество() > 0 Тогда
		ТипыОборудования = Новый Массив;
		ТипыОборудования.Добавить(ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ФискальныйРегистратор"));
		ТипыОборудования.Добавить(ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ПринтерЧеков"));
		ТипыОборудования.Добавить(ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ККТ"));
		
		МассивСкладов = Новый Массив;
		МассивСкладов.Добавить(ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка"));
		МассивСкладов.Добавить(Объект.Склад);
		
		СтруктураОтбора = Новый Структура("Организация, Склад, ТипОборудования, УстройствоИспользуется", Объект.Организация, МассивСкладов, ТипыОборудования, Истина);
		
		ПараметрыФормыВыбора = Новый Структура("Отбор, Заголовок", СтруктураОтбора, НСтр("ru='Выберите фискальный регистратор (принтер чеков)'", "ru") );
		
		ОповещениеПриЗавершенииВыбора = Новый ОписаниеОповещения("ВыбратьУстройствоЗавершение", ЭтотОбъект, ПараметрыОповещения);
		
		ОткрытьФорму("Справочник.ПодключаемоеОборудование.Форма.ФормаВыбораИзСписка", ПараметрыФормыВыбора,ЭтаФорма,УникальныйИдентификатор,,,ОповещениеПриЗавершенииВыбора,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ВыбратьУстройствоЗавершение(Неопределено, ПараметрыОповещения);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ИдентификаторУстройстваЭТ(ВидОплатыОрганизации)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидОплатыОрганизации, "ПодключаемоеОборудование");
	
КонецФункции

&НаКлиенте
Процедура ВыбратьУстройствоЗавершение(ИдентификаторУстройства, Параметры) Экспорт
	ТипУстройства = "";
	Если ЗначениеЗаполнено(ИдентификаторУстройства) Тогда
		ДанныеУстройства = МенеджерОборудованияКлиентПовтИсп.ПолучитьДанныеУстройства(ИдентификаторУстройства);
		ТипУстройства    = ?(ДанныеУстройства.Свойство("ТипОборудованияИмя"), ДанныеУстройства.ТипОборудованияИмя, "ККТ");
	КонецЕсли;
	
	Параметры.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
	
	Если ТипУстройства = "ККТ" Тогда
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ПолучитьПараметрыЗавершение", ЭтотОбъект, Параметры);
		МенеджерОборудованияКлиент.НачатьПолучениеПараметровФискальногоУстройства(ОповещениеПриЗавершении, УникальныйИдентификатор , ИдентификаторУстройства, Ложь);
	Иначе
		ПолучитьПараметрыЗавершение(Неопределено, Параметры);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОперацияПоПлатежнойКартеЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	Если НЕ РезультатВыполнения.Результат Тогда
		ЭтаФорма.Доступность = Истина; // Разблокировка интерфейса пользователя.
		
		ТекстСообщения = НСтр("ru = 'При выполнении операции произошла ошибка:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		Сообщить(ТекстСообщения);
	Иначе
		Если Объект.Оплата.Количество() = 1 Тогда
			Объект.Оплата[0].СсылочныйНомер = РезультатВыполнения.СсылочныйНомер;
			Объект.Оплата[0].НомерПлатежнойКарты = РезультатВыполнения.НомерКарты;
		КонецЕсли;
		
		// Печатаем фискальный чек
		Если ДополнительныеПараметры.ИдентификаторУстройства <> Неопределено Тогда
			ОповещениеПриЗавершенииПечатиЧека = Новый ОписаниеОповещения("ПечатьЧекаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			МенеджерОборудованияКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(
				ОповещениеПриЗавершенииПечатиЧека, 
				УникальныйИдентификатор, 
				ДополнительныеПараметры.ПараметрыПечатиЧека, 
				ДополнительныеПараметры.ИдентификаторУстройства,
				,
				,
				);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры 

&НаКлиенте
Процедура ПечатьЧекаЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	Перем ВыходныеПараметры, ИдентификаторУстройства;
	
	ЭтаФорма.Доступность = Истина; // Разблокировка интерфейса пользователя.
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru = 'При выполнении операции произошла ошибка:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка);
	Иначе
		// Получить номер чека, если номер чека не задан - записываем текущий номер документа
		Объект.НомерЧекаККМ            = ?(РезультатВыполнения.Свойство("ВыходныеПараметры", ВыходныеПараметры), 
			ВыходныеПараметры[1], 
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Объект.Номер, Истина, Истина));
			
		Объект.ИдентификаторУстройства = ?(РезультатВыполнения.Свойство("ИдентификаторУстройства", ИдентификаторУстройства), ИдентификаторУстройства, Неопределено);
		
		ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	
		Записать(ПараметрыЗаписи);
		
		Если ДополнительныеПараметры.ПечататьТоварныйЧек Тогда
			ОбъектыПечати = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Ссылка);
			
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер("Документ.РозничнаяПродажа", "ТоварныйЧек", ОбъектыПечати, ОбщегоНазначенияБПКлиент.ПолучитьЗаголовокПечатнойФормы(ОбъектыПечати));
		КонецЕсли;
		
		ТекстСообщения = НСтр("ru = 'Операция выполнена успешно.'");
		ПоказатьОповещениеПользователя(ТекстСообщения);
		
		Закрыть();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти 

&НаСервере
Процедура НайтиПоШтрихкодуНаСервере(Штрихкод)
	
	Если ВестиУчетМаркировкиПродукцииВГИСМ
		И ИнтеграцияГИСМКлиентСервер.ЭтоНомерКиЗ(Штрихкод) Тогда
		ДанныеКиЗ = Справочники.КонтрольныеЗнакиГИСМ.ДанныеКИЗ_ГИСМПоНомеру(Штрихкод);
		//Если соответствия нет -вводи вручную, выбрав номенклатуру
		Если ДанныеКиЗ <> Неопределено Тогда
			ДобавитьПоШтрихкодуНаСервере(ДанныеКиЗ.Владелец, ДанныеКиЗ.КИЗ_ГИСМ);
		КонецЕсли;
			
	Иначе
		ТаблицаНоменклатурыПоШтрихкоду = РегистрыСведений.ШтрихкодыНоменклатуры.НоменклатураПоШтрихкоду(Штрихкод);
		
		Если ТаблицаНоменклатурыПоШтрихкоду.Количество() = 1 Тогда
			ДобавитьПоШтрихкодуНаСервере(ТаблицаНоменклатурыПоШтрихкоду[0].Номенклатура);
		Иначе
			ДобавитьПоШтрихкодуНаСервере(Справочники.Номенклатура.ПустаяСсылка());
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьСканерШКЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт

	СканерШтрихкодаПодключен = РезультатВыполнения.Результат;

КонецПроцедуры

&НаКлиенте
Процедура ОтключитьСканерШКЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт

	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru = 'При отключении оборудования произошла ошибка: ""%1"".'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	Иначе
		СканерШтрихкодаПодключен = Ложь;
	КонецЕсли;

КонецПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаСервере
Функция ПодготовитьПараметрыФормаОплата(РабочееМесто)
	ПараметрыФормы = Новый Структура;

	ПараметрыФормы.Вставить("СписокОборудованияПечатьЧека", СписокОборудованияПечатьЧека(РабочееМесто));
	ПараметрыФормы.Вставить("СписокОборудованияПлатежнаяКарта", СписокОборудованияПлатежнаяКарта(РабочееМесто));
	ПараметрыФормы.Вставить("АдресТаблицаОплата", ПоместитьВоВременноеХранилище(Объект.Оплата.Выгрузить(), УникальныйИдентификатор));
	
	Возврат ПараметрыФормы;
КонецФункции 

&НаСервере
Функция ПолучитьСведенияОСпискеНоменклатуры(ТаблицаТоваров)
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад, ДокументБезНДС");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ДанныеОбъекта.Вставить("Реализация", Истина);
	
	СписокНоменклатуры = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина);
	
	Возврат БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(СписокНоменклатуры, ДанныеОбъекта, Ложь, Ложь);
КонецФункции 

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	
	ДанныеОбъекта = Новый Структура("ТипЦен, СуммаВключаетНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСведенийОНоменклатуре = ПолучитьСведенияОСпискеНоменклатуры(ТаблицаТоваров);
		
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовара.Номенклатура);
		
		ДобавитьНоменклатуруНаСервере(СтрокаТовара, СведенияОНоменклатуре, ДанныеОбъекта, ИмяТаблицы);
	КонецЦикла;
	
	ОбновитьИтоги(ЭтаФорма);
КонецПроцедуры

&НаСервере
Функция ДобавитьНоменклатуруНаСервере(СтрокаТовара, СведенияОНоменклатуре, ДанныеОбъекта, ИмяТаблицы)
	
	Если ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТипЦен, "ЦенаВключаетНДС");
	Иначе
		ЦенаВключаетНДС = ДанныеОбъекта.СуммаВключаетНДС;
	КонецЕсли;
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Цена = СтрокаТовара.Цена;
	Иначе
		Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
			СтрокаТовара.Цена, ЦенаВключаетНДС, ДанныеОбъекта.СуммаВключаетНДС,
			УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СведенияОНоменклатуре.СтавкаНДС));
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("Номенклатура, КиЗ_ГИСМ, Цена", СтрокаТовара.Номенклатура, СтрокаТовара.КиЗ_ГИСМ, Окр(Цена,2,1));
	СтрокаТабличнойЧасти = НайтиСтрокуТабличнойЧасти("Товары", СтруктураОтбора);
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		// Нашли - увеличиваем количество.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	Иначе
		СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара);
		
		Если СведенияОНоменклатуре <> Неопределено Тогда
				
			СтрокаТабличнойЧасти.СтавкаНДС = СведенияОНоменклатуре.СтавкаНДС;
		КонецЕсли;
		
		Если ЦенаВключаетНДС <> ДанныеОбъекта.СуммаВключаетНДС Тогда
			СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТабличнойЧасти.Цена, ЦенаВключаетНДС, ДанныеОбъекта.СуммаВключаетНДС,
				УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СведенияОНоменклатуре.СтавкаНДС));
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
		КонецЕсли;
		
	КонецЕсли;
	
	// Рассчитываем реквизиты табличной части
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС, СведенияОНоменклатуре);
	
	Возврат СтрокаТабличнойЧасти.ПолучитьИдентификатор();
КонецФункции

&НаСервере
Функция НайтиСтрокуТабличнойЧасти(ИмяТабличнойЧасти, СтруктураОтбора)

	СтрокаТабличнойЧасти = Неопределено;

	МассивНайденныхСтрок = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
	Если МассивНайденныхСтрок.Количество() > 0 Тогда
		// Нашли. Вернем первую найденную строку.
		СтрокаТабличнойЧасти = МассивНайденныхСтрок[0];
	КонецЕсли;

	Возврат СтрокаТабличнойЧасти;

КонецФункции

&НаСервереБезКонтекста
Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам);
	КонецЕсли;
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта, Ложь);
		
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ОсобыйПорядок = СведенияОНоменклатуре.ДоходЕНВД;
	СтрокаТабличнойЧасти.ЭтоУслуга  = СведенияОНоменклатуре.Услуга;
	Если СведенияОНоменклатуре.Цена <> 0 Тогда
		СтрокаТабличнойЧасти.Цена   = СведенияОНоменклатуре.Цена;
	КонецЕсли;
	СтрокаТабличнойЧасти.СтавкаНДС  = СведенияОНоменклатуре.СтавкаНДС;
	Если СведенияОНоменклатуре.ПродукцияМаркируемаяДляГИСМ Тогда
		СтрокаТабличнойЧасти.Количество  = 1;
	КонецЕсли;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ?(СтрокаТабличнойЧасти.ЭтоУслуга, 1, 0));
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС, СведенияОНоменклатуре);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТаблицы, СуммаВключаетНДС, СведенияОНоменклатуре)
	СтрокаТаблицы.Всего = ?(СуммаВключаетНДС, СтрокаТаблицы.Сумма, СтрокаТаблицы.Сумма + СтрокаТаблицы.СуммаНДС);
	
	Если СведенияОНоменклатуре <> Неопределено Тогда
		СтрокаТаблицы.ЭтоУслуга = СведенияОНоменклатуре.Услуга;
		СтрокаТаблицы.ОсобыйПорядок = СведенияОНоменклатуре.ДоходЕНВД;
		СтрокаТаблицы.ПродукцияМаркируемаяДляГИСМ = СведенияОНоменклатуре.ПродукцияМаркируемаяДляГИСМ;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура АгентскиеУслугиНоменклатураПриИзмененииНаСервере(СтрокаТаблицы, Знач ДанныеОбъекта)
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам);
	КонецЕсли;

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТаблицы.Номенклатура, ДанныеОбъекта, Ложь);
		
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы.Содержание	= СведенияОНоменклатуре.НаименованиеПолное;
	СтрокаТаблицы.Цена			= СведенияОНоменклатуре.Цена;
	СтрокаТаблицы.СтавкаНДС		= СведенияОНоменклатуре.СтавкаНДС;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТаблицы, 1);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, ДанныеОбъекта.СуммаВключаетНДС);
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыАгентскиеУслуги(СтрокаТаблицы, ДанныеОбъекта.СуммаВключаетНДС);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыАгентскиеУслуги(СтрокаТаблицы, СуммаВключаетНДС)
	
	СтрокаТаблицы.Всего = ?(СуммаВключаетНДС, СтрокаТаблицы.Сумма, СтрокаТаблицы.Сумма + СтрокаТаблицы.СуммаНДС);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	СоответствиеСведенийОНоменклатуре = ПолучитьСведенияОСпискеНоменклатуры(Объект.Товары);
		
	Для каждого СтрокаТаблицы Из Объект.Товары Цикл
		СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТаблицы.Номенклатура);
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТаблицы, Объект.СуммаВключаетНДС, СведенияОНоменклатуре);
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из Объект.АгентскиеУслуги Цикл
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыАгентскиеУслуги(СтрокаТаблицы, Объект.СуммаВключаетНДС);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСклада()
	РеквизитыСклад   = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Склад, "ТипЦенРозничнойТорговли, ТипЦенРозничнойТорговли.ЦенаВключаетНДС");
	
	ПересчитатьНДС  = Ложь;
	ПересчитатьЦены = (Объект.ТипЦен <> РеквизитыСклад.ТипЦенРозничнойТорговли);
	
	Объект.ТипЦен           = РеквизитыСклад.ТипЦенРозничнойТорговли;
	Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		ПересчитатьНДС  = (Объект.СуммаВключаетНДС <> РеквизитыСклад.ТипЦенРозничнойТорговлиЦенаВключаетНДС);
		Объект.СуммаВключаетНДС = РеквизитыСклад.ТипЦенРозничнойТорговлиЦенаВключаетНДС;
	КонецЕсли;
	
	ЗаполнитьРассчитатьСуммы(ПересчитатьЦены, ПересчитатьНДС);
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	СформироватьНадписьЦеныИВалюта(ЭтаФорма);
КонецПроцедуры 

&НаКлиенте
Процедура ПриИзмененииКоличествоЦена(ИмяТабЧасти)

	СтрокаТаблицы = Элементы[ИмяТабЧасти].ТекущиеДанные;
	
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли; 

	ЭтоУслуга = ИмяТабЧасти = "АгентскиеУслуги" ИЛИ СтрокаТаблицы.ЭтоУслуга;
	ЗначениеПустогоКоличества = ?(ЭтоУслуга, 1, 0);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТаблицы, ЗначениеПустогоКоличества);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, Объект.СуммаВключаетНДС);

	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСумма(ИмяТабЧасти)

	СтрокаТаблицы = Элементы[ИмяТабЧасти].ТекущиеДанные;
	
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если СтрокаТаблицы.Количество = 0 Тогда
		ЭтоУслуга = ИмяТабЧасти = "АгентскиеУслуги" ИЛИ (ИмяТабЧасти = "Товары" И СтрокаТаблицы.ЭтоУслуга);
		Если ЭтоУслуга Тогда
			СтрокаТаблицы.Цена = СтрокаТаблицы.Сумма;
		Иначе
			СтрокаТаблицы.Цена = 0;
		КонецЕсли;
	Иначе
		СтрокаТаблицы.Цена = СтрокаТаблицы.Сумма / СтрокаТаблицы.Количество;
	КонецЕсли;
	
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, Объект.СуммаВключаетНДС);
	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСтавкаНДС(ИмяТабЧасти)

	СтрокаТаблицы = Элементы[ИмяТабЧасти].ТекущиеДанные;
	
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли; 

	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, Объект.СуммаВключаетНДС);

	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСуммаНДС(ИмяТабЧасти)

	СтрокаТаблицы = Элементы[ИмяТабЧасти].ТекущиеДанные;
	
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура АгентскиеУслугиКонтрагентПриИзмененииНаСервере(ДанныеСтрокаТаблицы, Знач ПараметрыОбъекта)

	РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(ДанныеСтрокаТаблицы.ДоговорКонтрагента, ДанныеСтрокаТаблицы.Контрагент, 
		ПараметрыОбъекта.Организация, Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеВыбораНоменклатура(Текст, ПараметрыПолученияДанных)
	ДанныеВыбора = Справочники.Номенклатура.ПолучитьДанныеВыбора(ПараметрыПолученияДанных);
	
	Если ДанныеВыбора.Количество() = 0 Тогда
		ТаблицаНоменклатуры = РегистрыСведений.ШтрихкодыНоменклатуры.НоменклатураПоШтрихкоду(Текст);
		Для каждого СтрокаНоменклатуры Из ТаблицаНоменклатуры Цикл
			ДанныеВыбора.Добавить(СтрокаНоменклатуры.Номенклатура, СтрокаНоменклатуры.Представление);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеВыбора;
КонецФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Если ПравоДоступа("Чтение", Метаданные.Справочники.ПодключаемоеОборудование) Тогда
		ИспользуютсяСканерыШтрихкода = (МенеджерОборудованияВызовСервера.ПолучитьСписокОборудования("СканерШтрихкода").Количество() > 0);
	Иначе
		ИспользуютсяСканерыШтрихкода = Ложь;
	КонецЕсли;
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	Если НЕ Объект.ОтчетОРозничныхПродажах.Пустая() Тогда
		ОтчетОРозничныхПродажах = Объект.ОтчетОРозничныхПродажах;
		ОтчетОРозничныхПродажахНаименование = ОтчетОРозничныхПродажах.Метаданные().Синоним;
		
		НадписьОтчетОРозничныхПродажах = СтрШаблон("%1 № %2 от %3 г.", ОтчетОРозничныхПродажахНаименование, ОтчетОРозничныхПродажах.Номер, Формат(ОтчетОРозничныхПродажах.Дата, "ДФ='дд ММММ гггг'"));
	КонецЕсли;
	
	Элементы.СчетПокупателю.Видимость = ЗначениеЗаполнено(Объект.СчетНаОплатуПокупателю);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УстановитьПараметрыВыбораВидаОплаты();
	
	УстановитьЗаголовокФормы();
	
	УстановитьЗаголовокКнопкиОплата();
	
КонецПроцедуры

&НаСервере
Функция УстановитьЗаголовокКнопкиОплата()

	Если Объект.ВидОперации = Перечисления.ВидыОперацийРозничнаяПродажа.Продажа Тогда
		ТекстЗаголовка = НСтр("ru = 'Принять оплату'");
	Иначе
		ТекстЗаголовка = НСтр("ru = 'Вернуть средства'");
	КонецЕсли;
	
	Элементы.ФормаПринятьОплату.Заголовок = ТекстЗаголовка;

КонецФункции

&НаСервере
Процедура УстановитьЗаголовокФормы()
	ТекстЗаголовка = НСтр("ru = 'Чек'");
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстЗаголовка = ТекстЗаголовка + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru=' %1 от %2'"), Объект.Номер, Формат(Объект.Дата, "ДЛФ=D"));
	Иначе
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru = ' (создание)'");
	КонецЕсли;
	
	Заголовок = ТекстЗаголовка + " (" + Строка(Объект.ВидОперации) + ")";
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораВидаОплаты()
	ТипыОплатБезналичныеОплаты = Новый Массив;
	ТипыОплатБезналичныеОплаты.Добавить(Перечисления.ТипыОплат.ПлатежнаяКарта);
	ТипыОплатБезналичныеОплаты.Добавить(Перечисления.ТипыОплат.БанковскийКредит);
	
	Если ИспользуютсяПодарочныеСертификаты Тогда
		
		ТипыОплатПодарочныеСертификаты = Новый Массив;
	
		ТипыОплатПодарочныеСертификаты.Добавить(Перечисления.ТипыОплат.ПодарочныйСертификатСобственный);
		ТипыОплатБезналичныеОплаты.Добавить(Перечисления.ТипыОплат.ПодарочныйСертификатСобственный);
		
		Если ПрименяютсяДоговораСКомитентамиНаПродажу Тогда
			ТипыОплатПодарочныеСертификаты.Добавить(Перечисления.ТипыОплат.ПодарочныйСертификатСторонний);
			ТипыОплатБезналичныеОплаты.Добавить(Перечисления.ТипыОплат.ПодарочныйСертификатСторонний);
		КонецЕсли;
		
		ПараметрыСертификатов = Новый Массив;
		ПараметрыСертификатов.Добавить(Новый ПараметрВыбора("Отбор.ТипОплаты", Новый ФиксированныйМассив(ТипыОплатПодарочныеСертификаты)));
		ПараметрыСертификатов.Добавить(Новый ПараметрВыбора("Отбор.Организация", Объект.Организация));

		Элементы.ПодарочныеСертификатыВидОплаты.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыСертификатов);
		
	КонецЕсли;
	
	ПараметрыБезналичныхОплат = Новый Массив;
	
	ПараметрыБезналичныхОплат.Добавить(Новый ПараметрВыбора("Отбор.ТипОплаты", Новый ФиксированныйМассив(ТипыОплатБезналичныеОплаты)));
	ПараметрыБезналичныхОплат.Добавить(Новый ПараметрВыбора("Отбор.Организация", Объект.Организация));
	
	Элементы.ОплатаВидОплаты.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыБезналичныхОплат);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ЭтоВозврат = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРозничнаяПродажа.Возврат"));
	
	ПравоВводаВозврата = ?(Объект.ОтчетОРозничныхПродажах.Пустая(), Форма.ЕстьПравоВводаРозничнаяПродажа, Форма.ЕстьПравоВводаВозвратОтПокупателя);
	
	Форма.ТолькоПросмотр                    = Форма.ТолькоПросмотр ИЛИ ЗначениеЗаполнено(Объект.НомерЧекаККМ);
	Элементы.ФормаПринятьОплату.Доступность = НЕ Форма.ТолькоПросмотр;
	Элементы.ФормаЧекНаВозврат.Видимость    = ЗначениеЗаполнено(Объект.НомерЧекаККМ) И НЕ ЭтоВозврат И ПравоВводаВозврата;
	Элементы.Основание.Видимость            = ЭтоВозврат;
	
	СформироватьНадписьЦеныИВалюта(Форма);
	
	ОбновитьИтоги(Форма);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьЦеныИВалюта(Форма)
	
	Объект = Форма.Объект;
	СтруктураНадписи = Новый Структура(
		"СуммаВключаетНДС, ДокументБезНДС, ВалютаРегламентированногоУчета",
		Объект.СуммаВключаетНДС,
		Объект.ДокументБезНДС,
		Форма.ВалютаРегламентированногоУчета);
	Если Форма.ИспользоватьТипыЦенНоменклатуры Тогда
		СтруктураНадписи.Вставить("ТипЦен", Объект.ТипЦен);
	КонецЕсли;
	Форма.ЦеныИВалюта = ОбщегоНазначенияБПКлиентСервер.СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ИспользоватьТипыЦенНоменклатуры  = ПолучитьФункциональнуюОпцию("ИспользоватьТипыЦенНоменклатуры") 
		И ПравоДоступа("Чтение", Метаданные.Справочники.ТипыЦенНоменклатуры);

	ИспользуютсяПодарочныеСертификаты = ПолучитьФункциональнуюОпцию("ИспользуютсяПодарочныеСертификаты");
	
	ИспользуетсяФискальныйРегистратор = ПолучитьФункциональнуюОпцию("ИспользоватьФискальныйРегистратор") 
		И ПравоДоступа("Чтение", Метаданные.Справочники.ПодключаемоеОборудование);
	
	ПрименяютсяДоговораСКомитентамиНаПродажу = ПолучитьФункциональнуюОпцию("ОсуществляетсяРеализацияТоваровУслугКомитентов");
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	
	ВестиУчетМаркировкиПродукцииВГИСМ = ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииГИСМБП");

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)
	Объект = Форма.Объект;
	
	Форма.ИтогВсего = Объект.Товары.Итог("Всего") + Объект.АгентскиеУслуги.Итог("Всего") + Объект.ПодарочныеСертификаты.Итог("Сумма");
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы)
	
	ПараметрыФормы = Новый Структура;
	
	ДатаРасчетов = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	ЗаголовокПодбора = НСтр("ru = 'Подбор номенклатуры в %1 (%2)'");
	
	Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		Параметрыформы.Вставить("ПоказыватьЦены", Истина);
	КонецЕсли;
	
	Если ИмяТаблицы = "Товары" Тогда
		ПредставлениеТаблицы = НСтр("ru = 'Товары'");
		
		ПараметрыФормы.Вставить("ПоказыватьОстатки",   Истина);
	ИначеЕсли ИмяТаблицы = "АгентскиеУслуги" Тогда
		ПредставлениеТаблицы = НСтр("ru = 'Агентские услуги'");
		
		ПараметрыФормы.Вставить("ПоказыватьОстатки"  , Ложь);
	КонецЕсли;
	
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы.Вставить("ЕстьЦена"		, Истина);
	ПараметрыФормы.Вставить("ЕстьКоличество", Истина);
	ПараметрыФормы.Вставить("ДатаРасчетов"	, ДатаРасчетов);
	ПараметрыФормы.Вставить("ТипЦен"		, Объект.ТипЦен);
	ПараметрыФормы.Вставить("Валюта"		, ВалютаРегламентированногоУчета);
	ПараметрыФормы.Вставить("Организация"	, Объект.Организация);
	ПараметрыФормы.Вставить("Склад"			, Объект.Склад);
	ПараметрыФормы.Вставить("Заголовок"		, ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ИмяТаблицы"	, ИмяТаблицы);
	
	Если НЕ ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		ПараметрыФормы.Вставить("ЗаполнятьЦеныПоПродаже"	, Истина);
		ПараметрыФормы.Вставить("СуммаВключаетНДС"			, Объект.СуммаВключаетНДС);
		ПараметрыФормы.Вставить("Реализация"				, Истина);
	КонецЕсли;

	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	НастройкиУсловногоОформления = Новый Структура();

	УсловноеОформление.Элементы.Очистить();

	// Условное оформление, связанное с видимостью, устанавливаем сразу для всех колонок.
	УстановитьУсловноеОформлениеВидимость();

	// Условное оформление для полей, расположенных на страницах

	ОбновитьУсловноеОформление(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьУсловноеОформление(Форма)

	Элементы = Форма.Элементы;

	Если НЕ Форма.НастройкиУсловногоОформления.Свойство("ТоварыПроинициализировано")
		И Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаТовары Тогда

		Форма.УстановитьУсловноеОформлениеТовары();

	ИначеЕсли НЕ Форма.НастройкиУсловногоОформления.Свойство("АгентскиеУслугиПроинициализировано")
		И Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаАгентскиеУслуги Тогда

		Форма.УстановитьУсловноеОформлениеАгентскиеУслуги();

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеВидимость()

	// ТоварыСтавкаНДС, ТоварыСуммаНДС, ТоварыВсего

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтавкаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВсего");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиСтавкаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиСуммаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиВсего");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ДокументБезНДС", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеТовары() Экспорт

	НастройкиУсловногоОформления.Вставить("ТоварыПроинициализировано", Истина);


	// ТоварыКоличество

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКоличество");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ЭтоУслуга", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// ТоварыСуммаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	// ТоварыКиЗ_ГИСМ

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКиЗ_ГИСМ");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ПродукцияМаркируемаяДляГИСМ", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеАгентскиеУслуги() Экспорт

	НастройкиУсловногоОформления.Вставить("АгентскиеУслугиПроинициализировано", Истина);


	// АгентскиеУслугиСуммаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиСуммаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.АгентскиеУслуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.АгентскиеУслуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	Если ПлательщикНДС Тогда 
		Объект.ДокументБезНДС = Ложь;
	КонецЕсли;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	РаботаСНоменклатурой.ОбновитьСодержаниеУслуг(Объект.АгентскиеУслуги, Объект.Дата, ТекущаяДатаДокумента);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УстановитьФункциональныеОпцииФормы();
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(РезультатПоиска, ДополнительныеПараметры) Экспорт
	Если РезультатПоиска <> Неопределено  Тогда
		
		ДобавитьПоШтрихкодуНаСервере(РезультатПоиска.Номенклатура, РезультатПоиска.КиЗ_ГИСМ);
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ДобавитьПоШтрихкодуНаСервере(НоменклатураПоШтрихкоду, КиЗ_ГИСМПоШтрихКоду = Неопределено)
	ДанныеОбъекта = Новый Структура("Дата, Организация, ТипЦен, СуммаВключаетНДС, ДокументБезНДС");
		
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ДанныеОбъекта.Вставить("Реализация", Истина);
	
	Если ЗначениеЗаполнено(НоменклатураПоШтрихкоду) Тогда
		СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(НоменклатураПоШтрихкоду, ДанныеОбъекта, Ложь, Истина);
	Иначе
		СведенияОНоменклатуре = Неопределено;
	КонецЕсли;
	
	СтрокаТовары = НовыйСтрокаТовары();
	
	СтрокаТовары.Номенклатура = НоменклатураПоШтрихкоду;
	СтрокаТовары.Количество   = 1;
	СтрокаТовары.Цена         = ?(СведенияОНоменклатуре = Неопределено, 0, СведенияОНоменклатуре.Цена);
	СтрокаТовары.КиЗ_ГИСМ     = КиЗ_ГИСМПоШтрихКоду;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТовары);
	
	ДобавленнаяСтрока = ДобавитьНоменклатуруНаСервере(СтрокаТовары, СведенияОНоменклатуре, ДанныеОбъекта, "Товары");
	
	Элементы.Товары.ТекущаяСтрока = ДобавленнаяСтрока;
	ЭтаФорма.ТекущийЭлемент = Элементы.ТоварыКоличество;
	
	ОбновитьИтоги(ЭтотОбъект);
КонецФункции

&НаСервере
Функция НовыйСтрокаТовары()
	СтрокаТовары = Новый Структура;
	
	СтрокаТовары.Вставить("Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
	СтрокаТовары.Вставить("Количество", 0);
	СтрокаТовары.Вставить("Цена", 0);
	СтрокаТовары.Вставить("Сумма", 0);
	СтрокаТовары.Вставить("КиЗ_ГИСМ", Неопределено);
	
	Возврат СтрокаТовары
КонецФункции

// Пересчет табличной части документа после изменений в форме "Цены и валюта".
// Выполняется пересчет колонок: цена, скидка, сумма, сумма НДС, всего.
//
&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты()

	// Формирование структуры параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СуммаВключаетНДС",	  Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("ДокументБезНДС",        Объект.ДокументБезНДС);
	СтруктураПараметров.Вставить("Организация",			  Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",		  Объект.Дата);
	СтруктураПараметров.Вставить("ТипЦен", 				  Объект.ТипЦен);
	СтруктураПараметров.Вставить("ТолькоПросмотр",		  ТолькоПросмотр);
	
	ДополнительныеПараметры = Новый Структура;
	
	Если ИспользоватьТипыЦенНоменклатуры Тогда 
		ОткрыватьИзМеню = Ложь;
	Иначе
		ОткрыватьИзМеню = Истина;
		ДополнительныеПараметры.Вставить("СтруктураПараметровКоманды", СтруктураПараметров);
	КонецЕсли;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если ОткрыватьИзМеню Тогда
		
		СписокКоманд = Новый СписокЗначений;
		
		Если Не ПлательщикНДС Тогда
			СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.ДокументБезНДС"));
		КонецЕсли;
		СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДССверху"));
		СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСВСумме"));
		
		Если НЕ ТолькоПросмотр Тогда
			ПоказатьВыборИзМеню(ОповещениеОЗакрытии, СписокКоманд, Элементы.ЦеныИВалюта);
		Иначе
			ОповещениеОЗакрытии = Неопределено;
		КонецЕсли; 
	Иначе
		ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,ЭтаФорма,,,,ОповещениеОЗакрытии);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Свойство("СтруктураПараметровКоманды") Тогда
		
		СтруктураЦеныИВалюта = ДополнительныеПараметры.СтруктураПараметровКоманды;
		
		СуммаВключаетНДСДоИзменения = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		Если РезультатЗакрытия = Неопределено Тогда 
			Возврат;
		ИначеЕсли РезультатЗакрытия.Значение = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.ДокументБезНДС") Тогда
			СтруктураЦеныИВалюта.ДокументБезНДС 	= Истина;
		ИначеЕсли РезультатЗакрытия.Значение = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСВСумме") Тогда
			СтруктураЦеныИВалюта.ДокументБезНДС 	= Ложь;
			СтруктураЦеныИВалюта.СуммаВключаетНДС 	= Истина;
		Иначе
			СтруктураЦеныИВалюта.ДокументБезНДС 	= Ложь;
			СтруктураЦеныИВалюта.СуммаВключаетНДС 	= Ложь;
		КонецЕсли;
		
		СтруктураЦеныИВалюта.Вставить("ПерезаполнитьЦены",    Ложь);
		СтруктураЦеныИВалюта.Вставить("ПересчитатьЦены",      Ложь);
		СтруктураЦеныИВалюта.Вставить("ПересчитатьНДС",       СуммаВключаетНДСДоИзменения <> СтруктураЦеныИВалюта.СуммаВключаетНДС
			ИЛИ Объект.ДокументБезНДС <> СтруктураЦеныИВалюта.ДокументБезНДС);
		СтруктураЦеныИВалюта.Вставить("БылиВнесеныИзменения", СуммаВключаетНДСДоИзменения <> СтруктураЦеныИВалюта.СуммаВключаетНДС
			ИЛИ Объект.ДокументБезНДС <> СтруктураЦеныИВалюта.ДокументБезНДС);
		
	Иначе
		СтруктураЦеныИВалюта = РезультатЗакрытия;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") И СтруктураЦеныИВалюта.БылиВнесеныИзменения Тогда

		Объект.ТипЦен             = СтруктураЦеныИВалюта.ТипЦен;
		Объект.СуммаВключаетНДС   = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		Объект.ДокументБезНДС	  = СтруктураЦеныИВалюта.ДокументБезНДС;
		
		Модифицированность = Истина;

		Если СтруктураЦеныИВалюта.ПерезаполнитьЦены  ИЛИ СтруктураЦеныИВалюта.ПересчитатьНДС Тогда
			ЗаполнитьРассчитатьСуммы(
				СтруктураЦеныИВалюта.ПерезаполнитьЦены,
				СтруктураЦеныИВалюта.ПересчитатьНДС);
		КонецЕсли;
				
		СформироватьНадписьЦеныИВалюта(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммы(ПерезаполнитьЦены = Ложь, ПересчитатьНДС = Ложь);
	ТаблицаЦенНоменклатуры = Неопределено;
	
	Если ПерезаполнитьЦены Тогда
		
		СписокНоменклатуры	= ОбщегоНазначения.ВыгрузитьКолонку(Объект.Товары, "Номенклатура", Истина);
		ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(СписокНоменклатуры,
		ОбщегоНазначения.ВыгрузитьКолонку(Объект.АгентскиеУслуги, "Номенклатура"));
		
		Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
			ТаблицаЦенНоменклатуры = Ценообразование.ПолучитьТаблицуЦенНоменклатуры(
			СписокНоменклатуры,
			Объект.ТипЦен,
			Объект.Дата);
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого Строка Из Объект.Товары Цикл
		ЗаполнитьРассчитатьСуммыВСтроке(Строка, ТаблицаЦенНоменклатуры, ПерезаполнитьЦены, ПересчитатьНДС, ?(Строка.ЭтоУслуга, 1, 0));
	КонецЦикла;
	Для Каждого Строка Из Объект.АгентскиеУслуги Цикл
		ЗаполнитьРассчитатьСуммыВСтроке(Строка, ТаблицаЦенНоменклатуры, ПерезаполнитьЦены, ПересчитатьНДС, 1);
	КонецЦикла;
	
	УправлениеФормой(ЭтаФорма);
	ОбновитьИтоги(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммыВСтроке(Строка, ТаблицаЦенНоменклатуры, ПерезаполнитьЦены,  ПересчитатьНДС, ЗначениеПустогоКоличества)

	Если ПерезаполнитьЦены И ТаблицаЦенНоменклатуры <> Неопределено Тогда
		
		НайденнаяСтрока	= ТаблицаЦенНоменклатуры.Найти(Строка.Номенклатура, "Номенклатура");
		Если НайденнаяСтрока <> Неопределено Тогда
			Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				НайденнаяСтрока.Цена, НайденнаяСтрока.Валюта, ВалютаРегламентированногоУчета, НайденнаяСтрока.Курс,
				1, НайденнаяСтрока.Кратность, 1);
			ЦенаВключаетНДС = НайденнаяСтрока.ЦенаВключаетНДС;
		Иначе
			Цена = 0;
			// Признак того, что цена включает НДС, хранится в реквизите ЦенаВключаетНДС типа цен
			Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
				ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТипЦен, "ЦенаВключаетНДС");
			Иначе
				ЦенаВключаетНДС = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Цена = Строка.Цена;
		// Признак того, что цена включает НДС, хранится в реквизите СуммаВключаетНДС документа
		ЦенаВключаетНДС = ?(ПересчитатьНДС, НЕ Объект.СуммаВключаетНДС, Объект.СуммаВключаетНДС);
	КонецЕсли;

	Если Объект.ДокументБезНДС Тогда
		Строка.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;
	
	Строка.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
		ЦенаВключаетНДС, Объект.СуммаВключаетНДС,
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС));
	Строка.Сумма = Строка.Цена * ?(Строка.Количество =0, ЗначениеПустогоКоличества, Строка.Количество);
	Строка.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(Строка.Сумма, Объект.СуммаВключаетНДС,
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС));
	Строка.Всего = Строка.Сумма + ?(Объект.СуммаВключаетНДС, 0, Строка.СуммаНДС);

КонецПроцедуры

&НаСервере
Процедура ОснованиеПриИзмененииНаСервере()

	ЗаполнитьЗначенияСвойств(Объект, Объект.Основание, "СуммаВключаетНДС, ТипЦен, ДокументБезНДС");
	Документы.РозничнаяПродажа.СкопироватьТабличныеЧасти(Объект, Объект.Основание);

КонецПроцедуры 

#КонецОбласти

