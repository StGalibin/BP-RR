
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ОбщегоНазначенияБПВызовСервера.УстановитьОтборПоОсновнойОрганизации(ЭтаФорма);
	
	МожноРедактировать = ПравоДоступа("Редактирование", Метаданные.Документы.РозничнаяПродажа);
	Элементы.СписокКонтекстноеМенюИзменитьВыделенные.Видимость = МожноРедактировать;
	Элементы.РозничнаяПродажа.Доступность   = ПравоДоступа("Добавление", Метаданные.Документы.РозничнаяПродажа);
	Элементы.ФормаВозвратПоЧеку.Доступность = ПравоДоступа("Добавление", Метаданные.Документы.РозничнаяПродажа);
	Элементы.ЗакрытьСмену.Доступность       = ПравоДоступа("Добавление", Метаданные.Документы.ОтчетОРозничныхПродажах);
	
	ЕстьПравоДобавленияВозвратОтПокупателя = ПравоДоступа("Добавление", Метаданные.Документы.ВозвратТоваровОтПокупателя);
	
	ИспользуетсяНесколькоОрганизаций = Справочники.Организации.ИспользуетсяНесколькоОрганизаций();
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтаФорма,
		"БП.Документ.РозничнаяПродажа",
		"ФормаСписка",
		НСтр("ru='Новости: Розничная продажа (чек)'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеОсновнойОрганизации" Тогда
		ОбщегоНазначенияБПКлиент.ИзменитьОтборПоОсновнойОрганизации(Список, ,Параметр);
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура РозничнаяПродажа(Команда)
	КлючеваяОперация = "СозданиеФормыРозничнаяПродажа";
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);

	СтруктураПараметров = ПолучитьСтруктуруПараметровФормы(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийРозничнаяПродажа.Продажа"));
		
	ОткрытьФорму("Документ.РозничнаяПродажа.ФормаОбъекта", СтруктураПараметров, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВидОперации(Команда)
	
	СтрокаТаблицы = Элементы.Список.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Ключ", СтрокаТаблицы.Ссылка);
	ПараметрыФормы.Вставить("ВидОперации", СтрокаТаблицы.ВидОперации);
	ПараметрыФормы.Вставить("ИзменитьВидОперации", Истина);
	
	ОткрытьФорму("Документ.РозничнаяПродажа.Форма.ФормаДокумента", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтаФорма,
		Команда
	);

КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьСмену(Команда)
	ПараметрыФормы = Новый Структура();
	
	ОткрытыеСмены = ОткрытыеСмены();
	
	Если ОткрытыеСмены.Количество() = 0 Тогда
		Возврат;
	ИначеЕсли ОткрытыеСмены.Количество() = 1 ТОгда
		ЗакрытьСменуЗавершение(ОткрытыеСмены[0]);
	Иначе
		ПараметрыФормы.Вставить("ОткрытыеСмены", ОткрытыеСмены);
		
		ЗначенияЗаполнения = ОбщегоНазначенияБПВызовСервера.ЗначенияЗаполненияДинамическогоСписка(Список.КомпоновщикНастроек);
		
		Если НЕ ИспользуетсяНесколькоОрганизаций Тогда
			ПараметрыФормы.Вставить("Организация", ОткрытыеСмены[0].Организация);
		ИначеЕсли ЗначенияЗаполнения.Свойство("Организация") Тогда 
			ПараметрыФормы.Вставить("Организация", ЗначенияЗаполнения.Организация);
		КонецЕсли;
		
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ЗакрытьСменуЗавершение", ЭтотОбъект);
		ОткрытьФорму("Документ.РозничнаяПродажа.Форма.ФормаЗакрытиеСмены", ПараметрыФормы, ЭтаФорма,,,,ОповещениеПриЗавершении, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВозвратПоЧеку(Команда)
	ТекущаяСтрока = Элементы.Список.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтрока.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРозничнаяПродажа.Возврат") Тогда
		ВызватьИсключение НСтр("ru = 'Оформление возврата по чеку с видом операции ""Возврат"" невозможен.'");
	КонецЕсли;
	
	Если ТекущаяСтрока.ЕстьОтчетОРозничныхПродажах И НЕ ЕстьПравоДобавленияВозвратОтПокупателя Тогда
		ВызватьИсключение НСтр("ru = 'Недостаточно прав для оформления возврата по чеку закрытой кассовой смены.'");
	КонецЕсли; 
	
	СтруктураПараметров = Новый Структура;
	ЗначенияЗаполнения = Новый Структура;
	
	Если ТекущаяСтрока.ЕстьОтчетОРозничныхПродажах Тогда
		ЗначенияЗаполнения.Вставить("Основание", ТекущаяСтрока.ОтчетОРозничныхПродажах);
		ЗначенияЗаполнения.Вставить("РозничнаяПродажа", ТекущаяСтрока.Ссылка);
		
		СтруктураПараметров.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		
		ОткрытьФорму("Документ.ВозвратТоваровОтПокупателя.Форма.ФормаДокументаОбщая", СтруктураПараметров, ЭтотОбъект, ТекущаяСтрока.Ссылка);
	Иначе
		ЗначенияЗаполнения.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийРозничнаяПродажа.Возврат"));
		ЗначенияЗаполнения.Вставить("Основание", ТекущаяСтрока.Ссылка);
		
		СтруктураПараметров.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		СтруктураПараметров.Вставить("ИзменитьВидОперации", Истина);
		
		ОткрытьФорму("Документ.РозничнаяПродажа.Форма.ФормаДокументаОбщая", СтруктураПараметров, ЭтотОбъект, ТекущаяСтрока.Ссылка);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыСписок

&НаСервере
Процедура СписокПередЗагрузкойПользовательскихНастроекНаСервере(Элемент, Настройки)
	
	ОбщегоНазначенияБП.ВосстановитьОтборСписка(Список, Настройки, "Организация");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)

	КлючеваяОперация = "ОткрытиеФормыРозничнаяПродажа";
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ОткрытыеСмены()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РозничнаяПродажа.ИдентификаторУстройства,
	|	РозничнаяПродажа.Организация
	|ИЗ
	|	Документ.РозничнаяПродажа КАК РозничнаяПродажа
	|ГДЕ
	|	РозничнаяПродажа.ОтчетОРозничныхПродажах = ЗНАЧЕНИЕ(Документ.ОтчетОРозничныхПродажах.ПустаяСсылка)
	|	И РозничнаяПродажа.Проведен";
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Запрос.Выполнить().Выгрузить());
КонецФункции

&НаКлиенте
Процедура ЗакрытьСменуЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт 
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.ИдентификаторУстройства) Тогда
		ЭтаФорма.Доступность = Ложь; // Блокируем интерфейс пользователя.
		
		ДанныеКассира = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛицаТекущегоПользователя(Результат.Организация);
		
		ПараметрыОперации = МенеджерОборудованияКлиентСервер.ПараметрыОткрытияЗакрытияСмены();
		
		Если ДанныеКассира.Представление <> Неопределено Тогда
			ПараметрыОперации.Кассир = СокрЛП(СтрШаблон("%1 %2", Строка(ДанныеКассира.Должность), ДанныеКассира.Представление));
		КонецЕсли; 
	
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ПечатьФискальногоОтчетаЗавершение", ЭтотОбъект, Результат);
		МенеджерОборудованияКлиент.НачатьЗакрытиеСменыНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, ПараметрыОперации, Результат.ИдентификаторУстройства);
	Иначе
		ПараметрыОповещения = Новый Структура("Результат, ИдентификаторУстройства", Истина, ПредопределенноеЗначение("Справочник.ПодключаемоеОборудование.ПустаяСсылка"));
		ПечатьФискальногоОтчетаЗавершение(ПараметрыОповещения, Результат);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПечатьФискальногоОтчетаЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт

	ЭтаФорма.Доступность = Истина; // Разблокировка интерфейса пользователя.
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru = 'При формировании отчета произошла ошибка:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		Сообщить(ТекстСообщения);
	Иначе 
		ТекстСообщения = НСтр("ru = 'Отчет сформирован.'");
		ПоказатьОповещениеПользователя(ТекстСообщения);
		
		СозданныеДокументы = СформироватьОтчетыОРозничныхПродажах(ДополнительныеПараметры.Организация, ДополнительныеПараметры.ИдентификаторУстройства);
		
		Для каждого Документ Из СозданныеДокументы Цикл
			Если ЗначениеЗаполнено(Документ) Тогда
				ТекстОповещения = НСтр("ru = 'Сформирован документ'");
				ПоказатьОповещениеПользователя(ТекстОповещения, ПолучитьНавигационнуюСсылку(Документ), Строка(Документ));
			КонецЕсли;
		КонецЦикла;
		
		ОповеститьОбИзменении(Тип("ДокументСсылка.РозничнаяПродажа"));
		ОповеститьОбИзменении(Тип("ДокументСсылка.ОтчетОРозничныхПродажах"));
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьПравоПриемРозничнойВыручки(Организация)
	
	Если НЕ ПравоДоступа("Добавление", Метаданные.Документы.ПриходныйКассовыйОрдер) Тогда
		ЕстьПравоПриемРозничнойВыручки = Ложь;
	ИначеЕсли Пользователи.ЭтоПолноправныйПользователь() ИЛИ НЕ УправлениеДоступом.ОграничиватьДоступНаУровнеЗаписей() Тогда
		ЕстьПравоПриемРозничнойВыручки = Истина;
	Иначе
		НачатьТранзакцию();
		Попытка
			ДокументОбъект = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
			ДокументОбъект.Заполнить(Новый Структура("Организация, ВидОперации", Организация, Перечисления.ВидыОперацийПКО.РозничнаяВыручка));
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			ЕстьПравоПриемРозничнойВыручки = Истина;
		Исключение
			ЕстьПравоПриемРозничнойВыручки = Ложь;
		КонецПопытки;
		ОтменитьТранзакцию();
	КонецЕсли;
	
	Возврат ЕстьПравоПриемРозничнойВыручки;
КонецФункции

&НаСервереБезКонтекста
Функция ТекстЗапросаНезакрытыеЧеки()

	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РозничнаяПродажа.Ссылка,
		|	РозничнаяПродажа.Организация,
		|	РозничнаяПродажа.Склад,
		|	РозничнаяПродажа.СуммаВключаетНДС КАК ЦенаВключаетНДС,
		|	РозничнаяПродажа.ДокументБезНДС,
		|	ВЫБОР
		|		КОГДА РозничнаяПродажа.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРозничнаяПродажа.Продажа)
		|			ТОГДА 1
		|		ИНАЧЕ -1
		|	КОНЕЦ КАК Коэффициент
		|ПОМЕСТИТЬ НезакрытыеЧеки
		|ИЗ
		|	Документ.РозничнаяПродажа КАК РозничнаяПродажа
		|ГДЕ
		|	РозничнаяПродажа.ОтчетОРозничныхПродажах = ЗНАЧЕНИЕ(Документ.ОтчетОРозничныхПродажах.ПустаяСсылка)
		|	И РозничнаяПродажа.ИдентификаторУстройства = &ИдентификаторУстройства
		|	И РозничнаяПродажа.Проведен
		|	И РозничнаяПродажа.Организация = &Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НезакрытыеЧеки.Ссылка КАК РозничнаяПродажа,
		|	НезакрытыеЧеки.Организация,
		|	НезакрытыеЧеки.Склад
		|ИЗ
		|	НезакрытыеЧеки КАК НезакрытыеЧеки
		|
		|СГРУППИРОВАТЬ ПО
		|	НезакрытыеЧеки.Ссылка,
		|	НезакрытыеЧеки.Склад,
		|	НезакрытыеЧеки.Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НезакрытыеЧеки.Организация,
		|	НезакрытыеЧеки.Склад,
		|	НЕОПРЕДЕЛЕНО КАК ОтчетОРозничныхПродажах,
		|	МИНИМУМ(НезакрытыеЧеки.ДокументБезНДС) КАК ДокументБезНДС
		|ИЗ
		|	НезакрытыеЧеки КАК НезакрытыеЧеки
		|
		|СГРУППИРОВАТЬ ПО
		|	НезакрытыеЧеки.Организация,
		|	НезакрытыеЧеки.Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НезакрытыеЧеки.Организация,
		|	НезакрытыеЧеки.Склад,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Цена,
		|	ТаблицаТовары.КиЗ_ГИСМ,
		|	СУММА(ТаблицаТовары.Количество * НезакрытыеЧеки.Коэффициент) КАК Количество,
		|	СУММА(ТаблицаТовары.Сумма * НезакрытыеЧеки.Коэффициент) КАК Сумма,
		|	ТаблицаТовары.СтавкаНДС,
		|	СУММА(ТаблицаТовары.СуммаНДС * НезакрытыеЧеки.Коэффициент) КАК СуммаНДС,
		|	НезакрытыеЧеки.ЦенаВключаетНДС,
		|	ТаблицаТовары.Номенклатура.НомерГТД КАК НомерГТД,
		|	ТаблицаТовары.Номенклатура.СтранаПроисхождения КАК СтранаПроисхождения
		|ИЗ
		|	НезакрытыеЧеки КАК НезакрытыеЧеки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа.Товары КАК ТаблицаТовары
		|		ПО НезакрытыеЧеки.Ссылка = ТаблицаТовары.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.КиЗ_ГИСМ,
		|	ТаблицаТовары.Цена,
		|	ТаблицаТовары.СтавкаНДС,
		|	НезакрытыеЧеки.Организация,
		|	НезакрытыеЧеки.Склад,
		|	НезакрытыеЧеки.ЦенаВключаетНДС
		|
		|ИМЕЮЩИЕ
		|	(СУММА(ТаблицаТовары.Количество * НезакрытыеЧеки.Коэффициент) <> 0
		|		ИЛИ СУММА(ТаблицаТовары.Сумма * НезакрытыеЧеки.Коэффициент) <> 0
		|		ИЛИ СУММА(ТаблицаТовары.СуммаНДС * НезакрытыеЧеки.Коэффициент) <> 0)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НезакрытыеЧеки.Организация,
		|	НезакрытыеЧеки.Склад,
		|	ТаблицаАгентскиеУслуги.Номенклатура,
		|	ТаблицаАгентскиеУслуги.Содержание,
		|	СУММА(ТаблицаАгентскиеУслуги.Количество * НезакрытыеЧеки.Коэффициент) КАК Количество,
		|	ТаблицаАгентскиеУслуги.Цена,
		|	СУММА(ТаблицаАгентскиеУслуги.Сумма * НезакрытыеЧеки.Коэффициент) КАК Сумма,
		|	ТаблицаАгентскиеУслуги.СтавкаНДС,
		|	СУММА(ТаблицаАгентскиеУслуги.СуммаНДС * НезакрытыеЧеки.Коэффициент) КАК СуммаНДС,
		|	ТаблицаАгентскиеУслуги.Контрагент,
		|	ТаблицаАгентскиеУслуги.ДоговорКонтрагента,
		|	НезакрытыеЧеки.ЦенаВключаетНДС
		|ИЗ
		|	Документ.РозничнаяПродажа.АгентскиеУслуги КАК ТаблицаАгентскиеУслуги
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НезакрытыеЧеки КАК НезакрытыеЧеки
		|		ПО ТаблицаАгентскиеУслуги.Ссылка = НезакрытыеЧеки.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаАгентскиеУслуги.Номенклатура,
		|	ТаблицаАгентскиеУслуги.Содержание,
		|	ТаблицаАгентскиеУслуги.Цена,
		|	ТаблицаАгентскиеУслуги.СтавкаНДС,
		|	ТаблицаАгентскиеУслуги.Контрагент,
		|	ТаблицаАгентскиеУслуги.ДоговорКонтрагента,
		|	НезакрытыеЧеки.Организация,
		|	НезакрытыеЧеки.Склад,
		|	НезакрытыеЧеки.ЦенаВключаетНДС
		|
		|ИМЕЮЩИЕ
		|	(СУММА(ТаблицаАгентскиеУслуги.Количество * НезакрытыеЧеки.Коэффициент) <> 0
		|		ИЛИ СУММА(ТаблицаАгентскиеУслуги.Сумма * НезакрытыеЧеки.Коэффициент) <> 0
		|		ИЛИ СУММА(ТаблицаАгентскиеУслуги.СуммаНДС * НезакрытыеЧеки.Коэффициент) <> 0)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НезакрытыеЧеки.Организация,
		|	НезакрытыеЧеки.Склад,
		|	ТаблицаПодарочныеСертификаты.ВидОплаты,
		|	СУММА(ТаблицаПодарочныеСертификаты.Сумма * НезакрытыеЧеки.Коэффициент) КАК Сумма
		|ИЗ
		|	НезакрытыеЧеки КАК НезакрытыеЧеки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа.ПодарочныеСертификаты КАК ТаблицаПодарочныеСертификаты
		|		ПО НезакрытыеЧеки.Ссылка = ТаблицаПодарочныеСертификаты.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаПодарочныеСертификаты.ВидОплаты,
		|	НезакрытыеЧеки.Организация,
		|	НезакрытыеЧеки.Склад
		|
		|ИМЕЮЩИЕ
		|	СУММА(ТаблицаПодарочныеСертификаты.Сумма * НезакрытыеЧеки.Коэффициент) <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НезакрытыеЧеки.Организация,
		|	НезакрытыеЧеки.Склад,
		|	ТаблицаОплата.ВидОплаты,
		|	СУММА(ТаблицаОплата.Сумма * НезакрытыеЧеки.Коэффициент) КАК СуммаОплаты
		|ИЗ
		|	Документ.РозничнаяПродажа.Оплата КАК ТаблицаОплата
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НезакрытыеЧеки КАК НезакрытыеЧеки
		|		ПО ТаблицаОплата.Ссылка = НезакрытыеЧеки.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаОплата.ВидОплаты,
		|	НезакрытыеЧеки.Организация,
		|	НезакрытыеЧеки.Склад
		|
		|ИМЕЮЩИЕ
		|	СУММА(ТаблицаОплата.Сумма * НезакрытыеЧеки.Коэффициент) <> 0";
	
	Возврат ТекстЗапроса;
КонецФункции 

&НаСервереБезКонтекста
Функция СформироватьОтчетыОРозничныхПродажах(Организация, ИдентификаторУстройства)
	Запрос = Новый Запрос;
	
	Запрос.Текст = ТекстЗапросаНезакрытыеЧеки();
	
	Запрос.УстановитьПараметр("Организация",             Организация);
	Запрос.УстановитьПараметр("ИдентификаторУстройства", ИдентификаторУстройства);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаЧеки                  = РезультатЗапроса[1].Выгрузить();
	ТаблицаДокументы             = РезультатЗапроса[2].Выгрузить();
	ТаблицаТовары                = РезультатЗапроса[3].Выгрузить();
	ТаблицаАгентскиеУслуги       = РезультатЗапроса[4].Выгрузить();
	ТаблицаПодарочныеСертификаты = РезультатЗапроса[5].Выгрузить();
	ТаблицаОплаты                = РезультатЗапроса[6].Выгрузить();
	
	ДанныеЗаполнения = Новый Структура("Организация, Склад");
	
	ЕстьПравоПриемРозничнойВыручки = ЕстьПравоПриемРозничнойВыручки(Организация);
	ИспользоватьФиксированноеВремяВДокументах = ПолучитьФункциональнуюОпцию("ФиксированноеВремяВДокументах");
	
	НачатьТранзакцию();
	
	Для каждого СтрокаДокументы Из ТаблицаДокументы Цикл
		
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, СтрокаДокументы);
		
		ТоварыПоДокументу = ТаблицаТовары.Скопировать(ДанныеЗаполнения);
		АгентскиеУслугиПоДокументу = ТаблицаАгентскиеУслуги.Скопировать(ДанныеЗаполнения);
		ПодарочныеСертификатыПоДокументу = ТаблицаПодарочныеСертификаты.Скопировать(ДанныеЗаполнения);
		ОплатаПоДокументу = ТаблицаОплаты.Скопировать(ДанныеЗаполнения);
		
		// Не создаем документ, если все его табличные части будут пустыми.
		Если ТоварыПоДокументу.Количество() = 0 
			И АгентскиеУслугиПоДокументу.Количество() = 0 
			И ПодарочныеСертификатыПоДокументу.Количество() = 0 
			И ОплатаПоДокументу.Количество() = 0 Тогда
			
			Продолжить;
		КонецЕсли;
		
		Для каждого СтрокаТовары Из ТоварыПоДокументу Цикл
			Если НЕ СтрокаТовары.ЦенаВключаетНДС Тогда
				СтрокаТовары.Сумма = СтрокаТовары.Сумма + СтрокаТовары.СуммаНДС;
				СтрокаТовары.Цена  = ?(СтрокаТовары.Количество <> 0, СтрокаТовары.Сумма/СтрокаТовары.Количество, 0);
			КонецЕсли; 
		КонецЦикла;
		
		Для каждого СтрокаАгентскиеУслуги Из АгентскиеУслугиПоДокументу Цикл
			Если НЕ СтрокаАгентскиеУслуги.ЦенаВключаетНДС Тогда
				СтрокаАгентскиеУслуги.Сумма = СтрокаАгентскиеУслуги.Сумма + СтрокаАгентскиеУслуги.СуммаНДС;
				СтрокаАгентскиеУслуги.Цена  = ?(СтрокаАгентскиеУслуги.Количество <> 0, СтрокаАгентскиеУслуги.Сумма/СтрокаАгентскиеУслуги.Количество, 0);
			КонецЕсли; 
		КонецЦикла; 
		
		ОтчетОРозничныхПродажах = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
		ОтчетОРозничныхПродажах.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах;
		ОтчетОРозничныхПродажах.Заполнить(ДанныеЗаполнения);
		ОтчетОРозничныхПродажах.ДокументБезНДС = СтрокаДокументы.ДокументБезНДС;
		
		Если НЕ ИспользоватьФиксированноеВремяВДокументах Тогда
			ОтчетОРозничныхПродажах.УстановитьВремя(РежимАвтоВремя.ТекущееИлиПоследним, Истина);
		КонецЕсли;
		
		ОтчетОРозничныхПродажах.Товары.Загрузить(ТоварыПоДокументу);
		ОтчетОРозничныхПродажах.АгентскиеУслуги.Загрузить(АгентскиеУслугиПоДокументу);
		ОтчетОРозничныхПродажах.ПодарочныеСертификаты.Загрузить(ПодарочныеСертификатыПоДокументу);
		ОтчетОРозничныхПродажах.Оплата.Загрузить(ОплатаПоДокументу);
		
		ОтчетОРозничныхПродажах.Комментарий = НСтр("ru = 'Создан автоматически на основании документа ""Розничная продажа (чек)""'");
		
		ОтчетОРозничныхПродажах.ДополнительныеСвойства.Вставить("ЗаполнитьСчетаУчетаПередЗаписью", Истина);
		ОтчетОРозничныхПродажах.Записать(РежимЗаписиДокумента.Запись);
		
		Если ОтчетОРозничныхПродажах.Оплата.Итог("СуммаОплаты") < ОтчетОРозничныхПродажах.СуммаДокумента 
			И ЕстьПравоПриемРозничнойВыручки Тогда
			ПриходныйОрдер = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
			ПриходныйОрдер.Заполнить(ОтчетОРозничныхПродажах.Ссылка);
			
			Если НЕ ИспользоватьФиксированноеВремяВДокументах Тогда
				ПриходныйОрдер.УстановитьВремя(РежимАвтоВремя.ТекущееИлиПоследним, Истина);
			КонецЕсли;
			
			ПриходныйОрдер.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
		
		СтрокаДокументы.ОтчетОРозничныхПродажах = ОтчетОРозничныхПродажах.Ссылка;
		
	КонецЦикла;
	
	Для каждого СтрокаПоЧеку Из ТаблицаЧеки Цикл
	
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, СтрокаПоЧеку);
		
		НайденныеСтроки = ТаблицаДокументы.НайтиСтроки(ДанныеЗаполнения);
		
		Если НайденныеСтроки.Количество() = 1 Тогда
		
			ДокументОбъект = СтрокаПоЧеку.РозничнаяПродажа.ПолучитьОбъект();
			ДокументОбъект.ОтчетОРозничныхПродажах = НайденныеСтроки[0].ОтчетОРозничныхПродажах;
			ДокументОбъект.Записать();
		
		КонецЕсли;
	
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	Возврат ТаблицаДокументы.ВыгрузитьКолонку("ОтчетОРозничныхПродажах");
КонецФункции

&НаКлиенте
Функция ПолучитьСтруктуруПараметровФормы(ВидОперации)

	СтруктураПараметров = Новый Структура;
	
	ЗначенияЗаполнения = ОбщегоНазначенияБПВызовСервера.ЗначенияЗаполненияДинамическогоСписка(Список.КомпоновщикНастроек);
	Если ЗначениеЗаполнено(ВидОперации) Тогда
		ЗначенияЗаполнения.Вставить("ВидОперации", ВидОперации);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры


// Конец СтандартныеПодсистемы.Печать

#КонецОбласти 
