#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ВремяДокументаПоУмолчанию() Экспорт
	
	Возврат Новый Структура("Часы, Минуты", 14, 0);
	
КонецФункции

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#Область СчетаУчета

Процедура УстановитьПравилаЗаполненияСчетовУчета(Правила) Экспорт
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетКасса", "НаличныеДеньги");
	
	// Табличная часть Товары
	
	//   Запасы (кроме оборудования, розницы в ценах продажи)
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчета",           "Запасы");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "Услуги");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ТоварыВЦенахПродажи");
	
	//   Выручка (кроме оборудования, розницы в ценах продажи)
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетДоходов", "Выручка");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СчетЗапасов", "СчетУчета");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ОперацииСКомиссионером");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "СобственныеЗапасы");
	
	СчетаУчетаВДокументах.ДобавитьУровеньПодчиненности(Правила);
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "Субконто",                 "ВидДеятельности");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаНДСПоРеализации", "ВыручкаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СуммаНДС",  "СуммаНДС");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетРасходов",             "Расходы");
	
	// Запасы (розница в ценах продажи АТТ)
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчета",           "ЗапасыВЦенахПродажи");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "Услуги");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ТоварыВЦенахПродажиАТТ");
	
	//   Выручка (розница в ценах продажи)
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетДоходов", "Выручка");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СчетЗапасов", "СчетУчета");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "Услуги");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "ОперацииСКомиссионером");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "СобственныеЗапасы");
	
	СчетаУчетаВДокументах.ДобавитьУровеньПодчиненности(Правила);
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "Субконто",                 "ВидДеятельности");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаНДСПоРеализации", "ВыручкаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СуммаНДС",  "СуммаНДС");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетРасходов",             "Расходы");
	
	// Запасы (розница в ценах продажи НТТ)
	// В НТТ в продажных ценах документом отражается только комиссия
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетУчета",           "ТоварыПринятыеНаКомиссию");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеЗапрещено(Правила, "Услуги");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "ТоварыВЦенахПродажиНТТ");
	
	// Услуги
	
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Товары", "СчетДоходов", "Выручка");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеРазрешено(Правила, "Услуги");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "Субконто",                 "ВидДеятельности");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетУчетаНДСПоРеализации", "ВыручкаНДС");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "СуммаНДС",  "СуммаНДС");
	
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СчетРасходов",             "Расходы");
	СчетаУчетаВДокументах.ДобавитьВПравилоУсловиеПроверкиЗаполнения(Правила, "ТребуетсяСчетРасходовПоОказаниюУслуг");
	
	
	// Табличная часть Агентские услуги
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "АгентскиеУслуги", "СчетРасчетов", "РасчетыСКомитентом");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Контрагент",         "Контрагент");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "ДоговорКонтрагента", "ДоговорКонтрагента");
	
	// Данные заполнения
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Дата");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Организация");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Склад");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "ДеятельностьНаПатенте");
	
КонецПроцедуры

Процедура ДополнитьДанныеЗаполненияСчетовУчета(ДанныеЗаполнения) Экспорт 
	
КонецПроцедуры

#Область УстаревшиеПроцедурыИФункции

// Устарела: Следует использовать ЗаполнитьПередЗаписью(), 
// ЗаполнитьПередОтображениемПользователю(), Заполнить(), 
// ЗаполнитьОбъектПриИзменении(), ЗаполнитьРеквизитыПриИзменении(),
// либо перед записью документа устанавливать дополнительное свойство 
// ЗаполнитьСчетаУчетаПередЗаписью


Процедура ЗаполнитьСчетРасчетовВСтрокеАгентскойУслуги(Объект, СтрокаТаблицы) Экспорт

	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
		Объект.Организация,  СтрокаТаблицы.Контрагент,  СтрокаТаблицы.ДоговорКонтрагента);

	СтрокаТаблицы.СчетРасчетов = СчетаУчета.СчетРасчетовСКомитентом;

КонецПроцедуры

// Заполняет счета учета номенклатуры в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти) Экспорт

	ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
	
	ДанныеОбъекта = Новый Структура(
		"Дата, ВидОперации, Организация, ДеятельностьНаПатенте, Склад, Реализация, АТТПоПродажнойСтоимости, ДокументБезНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.Реализация = Истина;
	ДанныеОбъекта.АТТПоПродажнойСтоимости = 
		ДанныеОбъекта.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах
		И (УчетнаяПолитика.СпособОценкиТоваровВРознице(ДанныеОбъекта.Организация, ДанныеОбъекта.Дата) = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости)
		И НЕ  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеОбъекта.Склад, "ТипСклада") = Перечисления.ТипыСкладов.ОптовыйСклад;
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТабличнаяЧасть, "Номенклатура", Истина), ДанныеОбъекта);
	
	Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТабличнойЧасти.Номенклатура);
		ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СведенияОНоменклатуре);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

Функция ТекстЗапросаДанныеДляОбновленияЦенДокументов() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтчетОРозничныхПродажахТовары.Номенклатура КАК Номенклатура,
	|	ОтчетОРозничныхПродажахТовары.Цена КАК Цена,
	|	&Валюта КАК Валюта,
	|	&СпособЗаполненияЦены,
	|	&ЦенаВключаетНДС
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Товары КАК ОтчетОРозничныхПродажахТовары
	|ГДЕ
	|	ОтчетОРозничныхПродажахТовары.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтчетОРозничныхПродажахАгентскиеУслуги.Номенклатура,
	|	ОтчетОРозничныхПродажахАгентскиеУслуги.Цена,
	|	&Валюта,
	|	&СпособЗаполненияЦены,
	|	&ЦенаВключаетНДС
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.АгентскиеУслуги КАК ОтчетОРозничныхПродажахАгентскиеУслуги
	|ГДЕ
	|	ОтчетОРозничныхПродажахАгентскиеУслуги.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Цена,
	|	Валюта";
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Вызывается документом СчетФактураВыданный на аванс при вводе на основании
//
Функция ТекстЗапросаСчетФактураВыданныйНаАвансРасшифровкаПлатежа(НомераТаблиц) Экспорт
	
	НомераТаблиц.Вставить("ВТ_РасшифровкаПлатежа", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка.Дата КАК Дата,
	|	ТаблицаДокумента.Ссылка КАК ДокументОснование,
	|	ТаблицаДокумента.Ссылка.Организация КАК Организация,
	|	ВидыОплат.Контрагент КАК Контрагент,
	|	ВидыОплат.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	"""" КАК ИдентификаторГосКонтракта,
	|	ВидыОплат.ДоговорКонтрагента.НаименованиеДляСчетаФактурыНаАванс КАК Номенклатура,
	|	ВидыОплат.СчетУчетаРасчетов КАК СчетАвансов,
	|	ЗНАЧЕНИЕ(Документ.СчетНаОплатуПокупателю.ПустаяСсылка) КАК СчетНаОплату,
	|	ВЫБОР
	|		КОГДА &ПлательщикНДС
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|	КОНЕЦ КАК СтавкаНДС,
	|	СУММА(ТаблицаДокумента.Сумма) КАК Сумма,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияЗадолженности.ПустаяСсылка) КАК СпособПогашенияЗадолженности
	|ПОМЕСТИТЬ РасшифровкаПлатежа
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.ПодарочныеСертификаты КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыОплатОрганизаций КАК ВидыОплат
	|		ПО ТаблицаДокумента.ВидОплаты = ВидыОплат.Ссылка
	|			И (ВидыОплат.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПодарочныйСертификатСобственный))
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &ДокументОснование
	|
	|СГРУППИРОВАТЬ ПО
	|	ВидыОплат.ДоговорКонтрагента,
	|	ТаблицаДокумента.Ссылка,
	|	ВидыОплат.СчетУчетаРасчетов,
	|	ВидыОплат.Контрагент,
	|	ТаблицаДокумента.Ссылка.Дата,
	|	ТаблицаДокумента.Ссылка.Организация,
	|	ВидыОплат.ДоговорКонтрагента.НаименованиеДляСчетаФактурыНаАванс"
	;
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы <> "ФормаДокумента"
		И ВидФормы <> "ФормаОбъекта" Тогда
		Возврат;
	КонецЕсли;

	ВидОперации = Неопределено; 

	Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ключ, "ВидОперации");
	КонецЕсли;

	// Если документ копируется, то вид операции получаем из копируемого документа.
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначениеКопирования")
			И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Параметры.ЗначениеКопирования, "ВидОперации");
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначенияЗаполнения") 
			И ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура") Тогда
			Если Параметры.ЗначенияЗаполнения.Свойство("ВидОперации") Тогда
				ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// При вводе на основании счета на оплату и поступления товаров и услуг, 
	// открывается форма, содержащая только ТЧ Товары или только ТЧ Услуги, если
	// у документа-основания заполнена только соответствующая таблица.
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("Основание")
			И ЗначениеЗаполнено(Параметры.Основание) Тогда
			ВидОперации = ОпределитьВидОперацииПоДокументуОснованию(Параметры.Основание);
		КонецЕсли;
	КонецЕсли;

	СтандартнаяОбработка = Ложь;
	ФормыДокумента = ПолучитьСоответствиеВидовОперацийФормам();
	ВыбраннаяФорма = ФормыДокумента[ВидОперации];
	Если ВыбраннаяФорма = Неопределено Тогда
		ВыбраннаяФорма = "ФормаДокумента";
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСоответствиеВидовОперацийФормам() Экспорт

	ФормыДокумента = Новый Соответствие;
	ФормыДокумента.Вставить(Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах, "ФормаДокументаОбщая");
	ФормыДокумента.Вставить(Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах, "ФормаДокументаОбщая");
	
	Возврат ФормыДокумента;

КонецФункции

Функция ОпределитьВидОперацииПоДокументуОснованию(Основание) Экспорт

	ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ИнвентаризацияТоваровНаСкладе") Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Основание);
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ИнвентаризацияТоваровНаСкладе.Склад.ТипСклада КАК ТипСклада
			|ИЗ
			|	Документ.ИнвентаризацияТоваровНаСкладе КАК ИнвентаризацияТоваровНаСкладе
			|ГДЕ
			|	ИнвентаризацияТоваровНаСкладе.Ссылка = &Ссылка";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() И Выборка.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
			ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВидОперации;

КонецФункции

// Заполняет счета учета номенклатуры в строке табличной части документа
//
// Параметры:
//  ДанныеОбъекта         - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                          вид договора контрагента, признак комиссионной торговли и т.п.)
//  СтрокаТабличнойЧасти  - строка табличной части документа
//  ИмяТабличнойЧасти     - имя табличной части документа
//  СведенияОНоменклатуре - структура сведений о номенклатуре, либо стуктура счетов учета
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СведенияОНоменклатуре) Экспорт

	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СведенияОНоменклатуре.Свойство("СчетаУчета") Тогда
		// СведенияОНоменклатуре - структура сведений номенклатуры
		СчетаУчета = СведенияОНоменклатуре.СчетаУчета;
	ИначеЕсли СведенияОНоменклатуре.Свойство("СчетУчета") Тогда
		// СведенияОНоменклатуре - структура счетов учета номенклатуры
		СчетаУчета = СведенияОНоменклатуре;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ИмяТабличнойЧасти = "Товары" Тогда
		
		Если ДанныеОбъекта.АТТПоПродажнойСтоимости И НЕ СчетаУчета.СчетУчетаЯвляетсяЗабалансовым Тогда
			СтрокаТабличнойЧасти.СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ;
		ИначеЕсли ЗначениеЗаполнено(СчетаУчета.СчетУчета) Тогда 
			СтрокаТабличнойЧасти.СчетУчета = СчетаУчета.СчетУчета;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетДоходов) Тогда
			СтрокаТабличнойЧасти.СчетДоходов = СчетаУчета.СчетДоходов;
		КонецЕсли;
		
		Если СведенияОНоменклатуре.Свойство("Субконто")
			И ЗначениеЗаполнено(СведенияОНоменклатуре.Субконто) Тогда
			
			СтрокаТабличнойЧасти.Субконто = СведенияОНоменклатуре.Субконто;
			
		ИначеЕсли СведенияОНоменклатуре.Свойство("ВидСубконтоТипЗначения")
			И ЗначениеЗаполнено(СведенияОНоменклатуре.ВидСубконтоТипЗначения) Тогда
			
			СтрокаТабличнойЧасти.Субконто =
				СведенияОНоменклатуре.ВидСубконтоТипЗначения.ПривестиЗначение(СтрокаТабличнойЧасти.Субконто);
			
		Иначе
			СтрокаТабличнойЧасти.Субконто = Неопределено;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетРасходов) Тогда
			СтрокаТабличнойЧасти.СчетРасходов = СчетаУчета.СчетРасходов;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаНДСПродажи) Тогда
			СтрокаТабличнойЧасти.СчетУчетаНДСПоРеализации = СчетаУчета.СчетУчетаНДСПродажи;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Заполнение табличной части проданными товарами по инвентаризации товаров на розничном складе
//
Процедура ЗаполнитьТоварыПоИнвентаризацииТоваров(ДокументОбъект, ДокументОснование) Экспорт

	РеквизитыИнвентаризацииТоваров = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ДокументОснование, "Склад");
	
	Если ЗначениеЗаполнено(РеквизитыИнвентаризацииТоваров.Склад) Тогда
		РеквизитыСклада = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			РеквизитыИнвентаризацииТоваров.Склад, "ТипСклада");
	Иначе
		РеквизитыСклада = Новый Структура;
		РеквизитыСклада.Вставить("ТипСклада");
	КонецЕсли;

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДокументСсылка"         , ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДокументОснованиеСсылка", ДокументОснование);
	Запрос.УстановитьПараметр("ТипСклада"			   , РеквизитыСклада.ТипСклада);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокСписание.Номенклатура КАК Номенклатура,
	|	ДокСписание.СчетУчета КАК СчетУчета,
	|	ДокСписание.Ссылка.Склад КАК Склад,
	|	ДокСписание.Количество КАК Количество,
	|	ДокСписание.Цена КАК Цена
	|ПОМЕСТИТЬ ВТ_ВложенныйЗапрос
	|ИЗ
	|	Документ.СписаниеТоваров.Товары КАК ДокСписание
	|ГДЕ
	|	ДокСписание.Ссылка.Проведен
	|	И ДокСписание.Ссылка.ИнвентаризацияТоваровНаСкладе = &ДокументОснованиеСсылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокОтчетККМ.Номенклатура,
	|	ДокОтчетККМ.СчетУчета,
	|	ДокОтчетККМ.Ссылка.Склад,
	|	ДокОтчетККМ.Количество,
	|	ДокОтчетККМ.Цена
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Товары КАК ДокОтчетККМ
	|ГДЕ
	|	ДокОтчетККМ.Ссылка <> &ДокументСсылка
	|	И ДокОтчетККМ.Ссылка.Проведен
	|	И ДокОтчетККМ.Ссылка.ИнвентаризацияТоваровНаСкладе = &ДокументОснованиеСсылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	СчетУчета,
	|	Склад,
	|	Цена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Док.Номенклатура КАК Номенклатура,
	|	Док.СчетУчета КАК СчетУчета,
	|	МАКСИМУМ(Док.КоличествоУчет - Док.Количество) КАК КоличествоОтклонение,
	|	МИНИМУМ(Док.НомерСтроки) КАК НомерСтроки,
	|	ЕСТЬNULL(СУММА(ВТ_ВложенныйЗапрос.Количество), 0) КАК КоличествоСписанное,
	|	Док.ЦенаВРознице КАК Цена
	|ИЗ
	|	Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВложенныйЗапрос КАК ВТ_ВложенныйЗапрос
	|		ПО Док.Номенклатура = ВТ_ВложенныйЗапрос.Номенклатура
	|			И Док.СчетУчета = ВТ_ВложенныйЗапрос.СчетУчета
	|			И Док.Ссылка.Склад = ВТ_ВложенныйЗапрос.Склад
	|ГДЕ
	|	Док.Ссылка = &ДокументОснованиеСсылка
	|	И Док.КоличествоУчет - Док.Количество > 0
	|	И &ТипСклада <> ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.НеавтоматизированнаяТорговаяТочка)
	|
	|СГРУППИРОВАТЬ ПО
	|	Док.Номенклатура,
	|	Док.СчетУчета,
	|	Док.ЦенаВРознице
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Док.Номенклатура,
	|	Док.СчетУчета,
	|	МАКСИМУМ(Док.КоличествоУчет - Док.Количество),
	|	МИНИМУМ(Док.НомерСтроки),
	|	ЕСТЬNULL(СУММА(ВТ_ВложенныйЗапрос.Количество), 0),
	|	Док.ЦенаВРознице
	|ИЗ
	|	Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВложенныйЗапрос КАК ВТ_ВложенныйЗапрос
	|		ПО Док.Номенклатура = ВТ_ВложенныйЗапрос.Номенклатура
	|			И Док.СчетУчета = ВТ_ВложенныйЗапрос.СчетУчета
	|			И Док.Ссылка.Склад = ВТ_ВложенныйЗапрос.Склад
	|			И Док.ЦенаВРознице = ВТ_ВложенныйЗапрос.Цена
	|ГДЕ
	|	Док.Ссылка = &ДокументОснованиеСсылка
	|	И Док.КоличествоУчет - Док.Количество > 0
	|	И &ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.НеавтоматизированнаяТорговаяТочка)
	|
	|СГРУППИРОВАТЬ ПО
	|	Док.Номенклатура,
	|	Док.СчетУчета,
	|	Док.ЦенаВРознице
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'В документе ""%1"" № %2 отсутствуют товары, учетное количество которых превышает фактическое.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения,
			ДокументОснование.Метаданные().Представление(),
			ДокументОснование.Номер);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;

	СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(ДокументОбъект.Организация, ДокументОбъект.Дата);
	Комиссия = (ДокументОбъект.Склад.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка)
		И (СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости);
	
	ТипСклада	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Склад, "ТипСклада");
	СпособОценкиТоваровВРознице	= УчетнаяПолитика.СпособОценкиТоваровВРознице(ДокументОбъект.Организация, ДокументОбъект.Дата);
	
	АТТПоПродажнойСтоимости	= (СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости)
		И ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах
		И НЕ ТипСклада = Перечисления.ТипыСкладов.ОптовыйСклад;
	
	ТаблицаТоваров	= РезультатЗапроса.Выгрузить();
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, ДеятельностьНаПатенте, Склад,
		|ТипЦен, ВалютаДокумента, КурсДокумента, КратностьДокумента,
		|СуммаВключаетНДС, Реализация, АТТПоПродажнойСтоимости, ДокументБезНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ДокументОбъект);
	ДанныеОбъекта.АТТПоПродажнойСтоимости = АТТПоПродажнойСтоимости;
	ДанныеОбъекта.Реализация = Истина;
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта);
	
	Для Каждого СтрокаТоваров Из ТаблицаТоваров Цикл
		
		КоличествоСписать = СтрокаТоваров.КоличествоОтклонение - СтрокаТоваров.КоличествоСписанное;
		Если КоличествоСписать <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТабличнойЧасти = ДокументОбъект.Товары.Добавить();
		
		СтрокаТабличнойЧасти.Номенклатура	= СтрокаТоваров.Номенклатура;
		СтрокаТабличнойЧасти.Количество		= КоличествоСписать;
		
		СведенияОНоменклатуре	= СоответствиеСведенийОНоменклатуре.Получить(СтрокаТоваров.Номенклатура);
		
		Если СведенияОНоменклатуре <> Неопределено Тогда
			
			ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
				ДанныеОбъекта, СтрокаТабличнойЧасти, "Товары", СведенияОНоменклатуре);
			
			СтрокаТабличнойЧасти.СтавкаНДС = СведенияОНоменклатуре.СтавкаНДС;
			
		КонецЕсли;
		
		Если РеквизитыСклада.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
			СтрокаТабличнойЧасти.Цена = СтрокаТоваров.Цена;
		ИначеЕсли СведенияОНоменклатуре <> Неопределено Тогда
			СтрокаТабличнойЧасти.Цена = СведенияОНоменклатуре.Цена;
		КонецЕсли;
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект.СуммаВключаетНДС);
		
	КонецЦикла;

КонецПроцедуры

Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	МассивРеквизитов = Новый Массив();
	МассивРеквизитов.Добавить("УдалитьУчитыватьНДС");
	
	Возврат МассивРеквизитов;
	
КонецФункции

Функция ЕстьОплатаПлатежнойКартойНТТ(Реквизиты)
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах Тогда
		Возврат Ложь;
	КонецЕсли; 

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Период", Реквизиты.Период);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ПодразделениеОрганизации", Реквизиты.Подразделение);
	Запрос.УстановитьПараметр("Склад", Реквизиты.Склад);
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);

	Если Реквизиты.УчетПоПродажнойСтоимости Тогда
		
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
						|	ОплатаПлатежнойКартой.Ссылка
						|ИЗ
						|	Документ.ОплатаПлатежнойКартой КАК ОплатаПлатежнойКартой
						|ГДЕ
						|	ОплатаПлатежнойКартой.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) И &Период
						|	И ОплатаПлатежнойКартой.Организация = &Организация
						|	И ЕСТЬNULL(ОплатаПлатежнойКартой.ПодразделениеОрганизации, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) = &ПодразделениеОрганизации
						|	И ОплатаПлатежнойКартой.Контрагент = &Склад
						|	И ОплатаПлатежнойКартой.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОплатаПлатежнойКартой.РозничнаяВыручка)";
	
	Иначе
	
		Запрос.Текст = "ВЫБРАТЬ
						|	ХозрасчетныйОстатки.СуммаОстаток
						|ИЗ
						|	РегистрБухгалтерии.Хозрасчетный.Остатки(
						|			&Период,
						|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НераспределеннаяРозничнаяВыручкаБН),
						|			&ВидыСубконто,
						|			Организация = &Организация
						|				И ЕСТЬNULL(Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) = &ПодразделениеОрганизации
						|				И Субконто1 = &Склад) КАК ХозрасчетныйОстатки
						|ГДЕ
						|	ХозрасчетныйОстатки.СуммаОстаток > 0";
						
	КонецЕсли;
					
	Возврат НЕ Запрос.Выполнить().Пустой();	

КонецФункции 

Функция ПодготовитьТаблицуНДСДокументаСторноВыручки(ТаблицаСторноВыручки, ТаблицаРеквизиты, ДокументСсылка) Экспорт

	Если ТаблицаСторноВыручки = Неопределено ИЛИ ТаблицаСторноВыручки.Количество() = 0 
		ИЛИ ТаблицаРеквизиты = Неопределено ИЛИ ТаблицаРеквизиты.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период);
	
	Если НЕ ПлательщикНДС
		И НЕ УчетНДС.ВедетсяУчетНДСПоФЗ134(Реквизиты.Период) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаНДС = Новый ТаблицаЗначений;
	ТаблицаНДС.Колонки.Добавить("ДокументОснование", Новый ОписаниеТипов("ДокументСсылка.ОтчетОРозничныхПродажах"));
	ТаблицаНДС.Колонки.Добавить("Период", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТаблицаНДС.Колонки.Добавить("Организация", 	 Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаНДС.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаНДС.Колонки.Добавить("СчетДоходов", 	 Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаНДС.Колонки.Добавить("СтавкаНДС", 	 Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	ТаблицаНДС.Колонки.Добавить("СчетУчетаНДС",  Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаНДС.Колонки.Добавить("Содержание", 	 ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаНДС.Колонки.Добавить("Субконто", 	 Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	ТаблицаНДС.Колонки.Добавить("СуммаБезНДС", 	 ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаНДС.Колонки.Добавить("НДС", 			 ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	Для Каждого СтрокаСторноВыручки ИЗ ТаблицаСторноВыручки Цикл
		
		Если НЕ ПлательщикНДС Тогда
			Если СтрокаСторноВыручки.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС
				ИЛИ СтрокаСторноВыручки.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
				Продолжить;
			КонецЕсли; 
		КонецЕсли; 
		
		НоваяСтрокаНДС = ТаблицаНДС.Добавить();
		НоваяСтрокаНДС.СчетДоходов 	= СтрокаСторноВыручки.СчетДоходов;
		НоваяСтрокаНДС.СтавкаНДС 	= СтрокаСторноВыручки.СтавкаНДС;
		НоваяСтрокаНДС.СуммаБезНДС 	= СтрокаСторноВыручки.СуммаРуб - СтрокаСторноВыручки.СуммаНДСРуб;
		НоваяСтрокаНДС.НДС 			= СтрокаСторноВыручки.СуммаНДСРуб;
	КонецЦикла;
	
	ТаблицаНДС.Свернуть("ДокументОснование, Период, Организация, Подразделение, СчетДоходов, СтавкаНДС,
		|СчетУчетаНДС, Содержание, Субконто", "СуммаБезНДС, НДС");
	
	ТаблицаНДС.ЗаполнитьЗначения(Реквизиты.Регистратор,					"ДокументОснование");
	ТаблицаНДС.ЗаполнитьЗначения(Реквизиты.Период, 						"Период");
	ТаблицаНДС.ЗаполнитьЗначения(Реквизиты.Организация, 				"Организация");
	ТаблицаНДС.ЗаполнитьЗначения(Реквизиты.Подразделение, 				"Подразделение");
	ТаблицаНДС.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.Продажи_НДС, 	"СчетУчетаНДС");
	ТаблицаНДС.ЗаполнитьЗначения("Реализация товаров в розницу", 		"Содержание");
	ТаблицаНДС.ЗаполнитьЗначения(Реквизиты.НоменклатурнаяГруппаВыручки, "Субконто");
	
	Возврат ТаблицаНДС;
	
КонецФункции

функция ПодготовитьСтруктуруТаблицИП(ТаблицаВыручка, ТаблицаБезналичныеОплаты, ТаблицаПроданныеСертификаты, ТаблицаРеквизиты, ТаблицаВыручкиЗаМесяц) Экспорт
	
	ТаблицаПрочихРасчетовИП = УчетВзаиморасчетов.ПустаяТаблицаПоПрочимРасчетам();
	
	// таблица оплат МПЗ, реализованных текущим документом
	ТаблицаВзаиморасчетовИП = Новый ТаблицаЗначений;
	ТаблицаВзаиморасчетовИП.Колонки.Добавить("Контрагент",            Справочники.ТипВсеСсылки());
	ТаблицаВзаиморасчетовИП.Колонки.Добавить("ДокументРасчетов",      Документы.ТипВсеСсылки());
	ТаблицаВзаиморасчетовИП.Колонки.Добавить("ДатаДокументаРасчетов", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТаблицаВзаиморасчетовИП.Колонки.Добавить("СуммаРуб",              ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	// Таблица зачтенных оплат МПЗ, реализованных и оплаченных ранее подарочными сертификатами, проданными в этом документе
	ТаблицаЗачтенныхОплатИП = Новый ТаблицаЗначений;
	ТаблицаЗачтенныхОплатИП.Колонки.Добавить("ДокументРасчетов", Документы.ТипВсеСсылки());
	ТаблицаЗачтенныхОплатИП.Колонки.Добавить("СуммаБУ",          ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	СтруктураВозврата = Новый Структура("ТаблицаПрочихРасчетовИП, ТаблицаВзаиморасчетовИП, ТаблицаЗачтенныхОплатИП",
		ТаблицаПрочихРасчетовИП, ТаблицаВзаиморасчетовИП, ТаблицаЗачтенныхОплатИП);
	
	Если ТаблицаРеквизиты = Неопределено ИЛИ ТаблицаРеквизиты.Количество() = 0 Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Если НЕ УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах Тогда
		
		СуммаДокумента = ?(ТаблицаВыручка = Неопределено, 0, ТаблицаВыручка.Итог("СуммаРуб"));
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Реквизиты.Период));
		Запрос.УстановитьПараметр("КонецПериода",  Реквизиты.Период);
		Запрос.УстановитьПараметр("Склад",         Реквизиты.Склад);
		Запрос.УстановитьПараметр("Организация",   Реквизиты.Организация);
		Запрос.Текст = ТекстЗапросаПоДокументамОплатаПлатежнойКартой();
		
		Результат = Запрос.ВыполнитьПакет();
		
		ТаблицаДокументовОплатаПлатежнойКартой = Результат[1].Выгрузить();
		
		// Установка управляемой блокировки РегистрНакопления.ПрочиеРасчеты
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ПрочиеРасчеты");
		ЭлементБлокировки.УстановитьЗначение("Период",      Новый Диапазон(, Реквизиты.Период));
		ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
		ЭлементБлокировки.ИсточникДанных = ТаблицаДокументовОплатаПлатежнойКартой;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Контрагент",         "Эквайер");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("СчетУчета",          "СчетКасса");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ДоговорКонтрагента", "ДоговорЭквайринга");
			
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ПрочиеРасчеты");
		ЭлементБлокировки.УстановитьЗначение("Период",      Новый Диапазон(, Реквизиты.Период));
		ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
		ЭлементБлокировки.УстановитьЗначение("Контрагент",  Реквизиты.Склад);
		
		Блокировка.Заблокировать();
		
		Контрагенты = ТаблицаДокументовОплатаПлатежнойКартой.ВыгрузитьКолонку("Эквайер");
		ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(Контрагенты);
		
		ДоговорыКонтрагентов = ТаблицаДокументовОплатаПлатежнойКартой.ВыгрузитьКолонку("ДоговорЭквайринга");
		ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(ДоговорыКонтрагентов);
		
		СписокДокументовПоПлатежнымКартам = ТаблицаДокументовОплатаПлатежнойКартой.ВыгрузитьКолонку("Ссылка");
		ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(СписокДокументовПоПлатежнымКартам);
		
		Запрос.УстановитьПараметр("Контрагенты",                       Контрагенты);
		Запрос.УстановитьПараметр("ДоговорыКонтрагентов",              ДоговорыКонтрагентов);
		Запрос.УстановитьПараметр("СписокДокументовПоПлатежнымКартам", СписокДокументовПоПлатежнымКартам);
		Запрос.УстановитьПараметр("ДатаОстатка", Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор));
		Запрос.Текст = ТекстЗапросаДляСтруктурыТаблицИП();
		
		ТаблицаРезультатаЗапроса = Запрос.Выполнить().Выгрузить();
		
		ТаблицаНеоплаченнойБезналичнойВыручки = ТаблицаРезультатаЗапроса.Скопировать(Новый Структура("ВзаиморасчетыИП", Ложь));
		
		СуммаБезналичнойВыручки = ТаблицаНеоплаченнойБезналичнойВыручки.Итог("СуммаРуб");
		СуммаНаличнойВыручки    = Макс(?(ТаблицаВыручка = Неопределено, 0, ТаблицаВыручка.Итог("СуммаРуб")) - СуммаБезналичнойВыручки, 0);
		
		Если СуммаНаличнойВыручки > 0 Тогда
			
			Для Каждого СтрокаРезультата Из ТаблицаРезультатаЗапроса Цикл
				
				Если Не СтрокаРезультата.ВзаиморасчетыИП Или СтрокаРезультата.СуммаРуб = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				СуммаРуб = Мин(СуммаНаличнойВыручки, СтрокаРезультата.СуммаРуб);
				
				Платеж = ТаблицаВзаиморасчетовИП.Добавить();
				ЗаполнитьЗначенияСвойств(Платеж, СтрокаРезультата);
				Платеж.СуммаРуб =  СуммаРуб;
				
				СуммаНаличнойВыручки =  СуммаНаличнойВыручки - СуммаРуб;
				Если СуммаНаличнойВыручки = 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если СуммаБезналичнойВыручки > 0 Тогда
			
			ТаблицаНеоплаченнойБезналичнойВыручки.Колонки["ДокументРасчетов"].Имя = "РасчетныйДокумент";
			ТаблицаНеоплаченнойБезналичнойВыручки.Колонки["СуммаРуб"].Имя         = "СуммаОстаток";
			
			СтруктураВозврата.ТаблицаПрочихРасчетовИП = ПодготовитьТаблицуПрочихРасчетовНТТ(
				Реквизиты, СуммаДокумента, ТаблицаНеоплаченнойБезналичнойВыручки, ТаблицаВыручкиЗаМесяц, ТаблицаПрочихРасчетовИП);
			
		КонецЕсли;
		
	Иначе // АТТ
		
		СуммаВыручкиВсего          = ?(ТаблицаВыручка = Неопределено, 0, ТаблицаВыручка.Итог("СуммаРуб"));
		СуммаБезналичнойВыручки    = ТаблицаБезналичныеОплаты.Итог("СуммаРуб");
		СуммаПроданныхСертификатов = ?(ТаблицаПроданныеСертификаты = Неопределено, 0, ТаблицаПроданныеСертификаты.Итог("СуммаРуб"));
		СуммаНаличнойВыручки       = Макс(СуммаВыручкиВсего - СуммаБезналичнойВыручки, 0);
		
		// наличными в первую очередь оплачиваются реализованные товары и услуги,
		// затем проданные сертификаты, ранее принимавшиеся в оплату, затем - впервые проданные сертификаты
		ВыручкаПоТоварамУслугам         = СуммаВыручкиВсего - СуммаПроданныхСертификатов;
		СуммаНаличнойОплатыМПЗ          = Мин(ВыручкаПоТоварамУслугам, СуммаНаличнойВыручки);
		СуммаНаличнойОплатыСертификатов = Макс(0, СуммаНаличнойВыручки - СуммаНаличнойОплатыМПЗ);
		
		Если СуммаНаличнойОплатыМПЗ > 0 Тогда
			Платеж = ТаблицаВзаиморасчетовИП.Добавить();
			Платеж.Контрагент            = Реквизиты.Склад;
			Платеж.ДокументРасчетов      = Реквизиты.Регистратор;
			Платеж.ДатаДокументаРасчетов = Реквизиты.Период;
			Платеж.СуммаРуб              = СуммаНаличнойОплатыМПЗ;
		КонецЕсли;
		
		// Таблица взаимозачета подарочных сертификатов (принятые и проданные в текущем документе)
		ТаблицаВзаимозачетСертификатов = ТаблицаВзаимозачетаПоСертификатамИП(ТаблицаБезналичныеОплаты,
			ТаблицаПроданныеСертификаты, Реквизиты);
		
		// Таблица зачета ранее принятых в оплату сертификатов проданными
		ТаблицаЗачетОплатПроданнымиСертификатами = ТаблицаЗачитываемыхСертификатамиОплатИП(
			ТаблицаПроданныеСертификаты, Реквизиты);
		
		// Таблица остатков расчетов по оплатам, отраженным ранее как аванс,
		// и по проданным сертификатам, ранее принятым в оплату
		ИменаОтборов = Новый Структура("ДокументРасчетов", "РасчетныйДокумент");
		
		// Неоплаченные остатки хранятся в регистре "Прочие расчеты", ограничим отбор документов допустимыми для регистра типами.
		ОграничениеТипаДокументов = Метаданные.РегистрыНакопления.ПрочиеРасчеты.Измерения.РасчетныйДокумент.Тип;
		
		ДанныеДляОтбораОстатков = ТаблицаБезналичныеОплаты.СкопироватьКолонки("ДокументРасчетов");
		Для каждого СтрокаИсточник Из ТаблицаБезналичныеОплаты Цикл
			Если СтрокаИсточник.ДокументРасчетов <> Реквизиты.Регистратор
				И ОграничениеТипаДокументов.СодержитТип(ТипЗнч(СтрокаИсточник.ДокументРасчетов)) Тогда
				НоваяСтрока = ДанныеДляОтбораОстатков.Добавить();
				НоваяСтрока.ДокументРасчетов = СтрокаИсточник.ДокументРасчетов;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ТаблицаЗачетОплатПроданнымиСертификатами) Тогда
			ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаЗачетОплатПроданнымиСертификатами, ДанныеДляОтбораОстатков);
		КонецЕсли;
		
		НеоплаченныеОстатки = УчетВзаиморасчетов.ПолучитьОстаткиПрочихРасчетов(ДанныеДляОтбораОстатков,
			ИменаОтборов, Реквизиты, Истина);
		НеоплаченныеОстатки.Индексы.Добавить("РасчетныйДокумент");
		
		// Движения по безналичным оплатам
		Для Каждого СтрокаТаблицы Из ТаблицаБезналичныеОплаты Цикл
			
			Если СтрокаТаблицы.ДокументРасчетов = Реквизиты.Регистратор Тогда
				
				Если СтрокаТаблицы.ТипОплаты = Перечисления.ТипыОплат.ПодарочныйСертификатСобственный Тогда
					// Принятие в оплату собственного подарочного сертификата, ранее не продававшегося,
					// является учетной ошибкой и не обрабатывается в налоговом учете ИП
					Продолжить;
				КонецЕсли;
				
				СуммаРасчетов = СтрокаТаблицы.СуммаРуб;
				
				// принятые и проданные в одном документе не отражаются в расчетах
				Если ЗначениеЗаполнено(ТаблицаВзаимозачетСертификатов) Тогда
					Поиск = Новый Структура("Контрагент, ДоговорКонтрагента, ДокументРасчетов, ТипОплаты");
					ЗаполнитьЗначенияСвойств(Поиск, СтрокаТаблицы);
					СтрокиВзаимозачета = ТаблицаВзаимозачетСертификатов.НайтиСтроки(Поиск);
					Для каждого СтрокаВзаимозачета Из СтрокиВзаимозачета Цикл
						СуммаРасчетов = СуммаРасчетов - СтрокаВзаимозачета.СуммаРуб;
					КонецЦикла;
				КонецЕсли;
				
				Если СуммаРасчетов > 0 Тогда
					
					НоваяСтрока = ТаблицаПрочихРасчетовИП.Добавить();
					
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
					
					НоваяСтрока.ВидДвижения       = ВидДвиженияНакопления.Приход;
					НоваяСтрока.РасчетныйДокумент = Реквизиты.Регистратор;
					НоваяСтрока.Сумма             = СтрокаТаблицы.СуммаРуб;
					НоваяСтрока.СчетУчета         = СтрокаТаблицы.СчетРасчетов;
					
				КонецЕсли;
				
			Иначе
				// Принятые в оплату и проданные ранее сертификаты могут быть еще не оплачены
				// (например, при оплате банковской картой, если деньги от эквайера еще не получены);
				// в этом случае неоплаченные расчеты за сертификаты, отраженные в остатках регистра "ПрочиеРасчеты",
				// необходимо перенести на текущий документ.
				//
				// Если же сертификаты оплачены - можно признать доход по реализованным в текущем документе МПЗ
				// (добавить сумму оплаты в ТаблицаВзаиморасчетовИП)
				
				СуммаРаспределенияОплаты = СтрокаТаблицы.СуммаРуб;
				
				Если ЗначениеЗаполнено(НеоплаченныеОстатки) Тогда
					
					Поиск = Новый Структура("РасчетныйДокумент", СтрокаТаблицы.ДокументРасчетов);
					СтрокиНеоплаченнойВыручки = НеоплаченныеОстатки.НайтиСтроки(Поиск);
					
					Для каждого СтрокаНеоплаченнногоОстатка Из СтрокиНеоплаченнойВыручки Цикл
						
						Если СуммаРаспределенияОплаты <= 0 Тогда
							Прервать;
						КонецЕсли;
						
						Если СтрокаНеоплаченнногоОстатка.СуммаОстаток <=0 Тогда
							Продолжить;
						КонецЕсли;
						
						СуммаПереносаРасчетов = Мин(СуммаРаспределенияОплаты, СтрокаНеоплаченнногоОстатка.СуммаОстаток);
						
						// расход
						СтрокаРасход = ТаблицаПрочихРасчетовИП.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаРасход, Реквизиты);
						ЗаполнитьЗначенияСвойств(СтрокаРасход, СтрокаНеоплаченнногоОстатка);
						
						СтрокаРасход.ВидДвижения = ВидДвиженияНакопления.Расход;
						СтрокаРасход.Сумма       = СуммаПереносаРасчетов;
						
						// приход
						СтрокаПриход = ТаблицаПрочихРасчетовИП.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаПриход, СтрокаРасход);
						
						СтрокаПриход.ВидДвижения       = ВидДвиженияНакопления.Приход;
						СтрокаПриход.РасчетныйДокумент = Реквизиты.Регистратор;
						СтрокаПриход.Сумма             = СуммаПереносаРасчетов;
						
						// учтем распределенную сумму в исходных данных
						СуммаРаспределенияОплаты                 = СуммаРаспределенияОплаты - СуммаПереносаРасчетов;
						СтрокаНеоплаченнногоОстатка.СуммаОстаток = СтрокаНеоплаченнногоОстатка.СуммаОстаток - СуммаПереносаРасчетов;
						
					КонецЦикла;
					
					КоличествоСтрок = НеоплаченныеОстатки.Количество();
					Для Счетчик = 1 По КоличествоСтрок Цикл
						ТекущаяСтрока = НеоплаченныеОстатки[КоличествоСтрок - Счетчик];
						Если ТекущаяСтрока.СуммаОстаток <= 0 Тогда
							НеоплаченныеОстатки.Удалить(ТекущаяСтрока);
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
				// Сумма аванса, не найденная в остатках "Прочих расчетов", оплачена. Можно признать доход.
				Если СуммаРаспределенияОплаты > 0 Тогда
					Платеж = ТаблицаВзаиморасчетовИП.Добавить();
					Платеж.Контрагент            = Реквизиты.Склад;
					Платеж.ДокументРасчетов      = Реквизиты.Регистратор;
					Платеж.ДатаДокументаРасчетов = Реквизиты.Период;
					Платеж.СуммаРуб              = СуммаРаспределенияОплаты;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// учтем проданные сертификаты, ранее принимавшиеся в оплату
		// Такие сертификаты учитываются следующим образом:
		//     оплаченные наличными - как оплата покупателем реализации по документу, в котором сертификат был принят в оплату;
		//     оплаченные безналичными - переносят движения "Прочих расчетов" по безналичным оплатам с текущего документа
		//                               на документ принятия в оплату сертификата.
		Если Значениезаполнено(ТаблицаЗачетОплатПроданнымиСертификатами) Тогда
			
			Отбор = Новый Структура("ВидДвижения, РасчетныйДокумент", ВидДвиженияНакопления.Приход, Реквизиты.Регистратор);
			ПолученныеБезналичныеОплаты = ТаблицаПрочихРасчетовИП.Скопировать(Отбор);
			
			Для каждого ПроданныйСертификат Из ТаблицаЗачетОплатПроданнымиСертификатами Цикл
				
				СуммаЗачетаОплаты = ПроданныйСертификат.СуммаБУ;
				
				Поиск = Новый Структура("Контрагент, ДоговорКонтрагента, СчетУчета, РасчетныйДокумент",
					ПроданныйСертификат.Контрагент,
					ПроданныйСертификат.ДоговорКонтрагента,
					ПроданныйСертификат.СчетРасчетов,
					ПроданныйСертификат.ДокументРасчетов);
				
				ОстаткиОплатСертификатом = НеоплаченныеОстатки.НайтиСтроки(Поиск);
				
				Для каждого СтрокаОстаткаОплаты Из ОстаткиОплатСертификатом Цикл
					
					Если СуммаЗачетаОплаты <= 0 Тогда
						Прервать;
					КонецЕсли;
					
					Если СтрокаОстаткаОплаты.СуммаОстаток <= 0 Тогда
						Продолжить;
					КонецЕсли;
					
					ЗачитываемаяСумма = Мин(СуммаЗачетаОплаты, СтрокаОстаткаОплаты.СуммаОстаток);
					
					// Остаток по зачтенной оплате проданным сертификатом списываем из Прочих расчетов
					СтрокаРасход = ТаблицаПрочихРасчетовИП.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаРасход, Реквизиты);
					ЗаполнитьЗначенияСвойств(СтрокаРасход, СтрокаОстаткаОплаты);
					
					СтрокаРасход.ВидДвижения = ВидДвиженияНакопления.Расход;
					СтрокаРасход.Сумма       = ЗачитываемаяСумма;
					
					// распределим на оплаченный наличными и безналом
					ЗачтеноОплаченоНаличными = Мин(СуммаНаличнойОплатыСертификатов, ЗачитываемаяСумма);
					ЗачтеноОплаченоБезналом  = ЗачитываемаяСумма - ЗачтеноОплаченоНаличными;
					
					// оплаченный наличными - включаем в доходы
					Если ЗачтеноОплаченоНаличными > 0 Тогда
						СтрокаОплачено = ТаблицаЗачтенныхОплатИП.Добавить();
						СтрокаОплачено.ДокументРасчетов = СтрокаОстаткаОплаты.РасчетныйДокумент;
						СтрокаОплачено.СуммаБУ          = ЗачтеноОплаченоНаличными;
					КонецЕсли;
					
					// оплаченный безналичными - учитываем в Прочих расчетах
					Если ЗачтеноОплаченоБезналом > 0 Тогда
						
						Для каждого СтрокаБезналичнойОплаты Из ПолученныеБезналичныеОплаты Цикл
							
							Если ЗачтеноОплаченоБезналом <= 0 Тогда
								Прервать;
							КонецЕсли;
							
							Если СтрокаБезналичнойОплаты.Сумма <= 0 Тогда
								Продолжить;
							КонецЕсли;
							
							СуммаПереносаБезналичнойОплаты = Мин(ЗачтеноОплаченоБезналом, СтрокаБезналичнойОплаты.Сумма);
							
							СтрокаРасход = ТаблицаПрочихРасчетовИП.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаРасход, Реквизиты);
							ЗаполнитьЗначенияСвойств(СтрокаРасход, СтрокаБезналичнойОплаты);
							
							СтрокаРасход.ВидДвижения = ВидДвиженияНакопления.Расход;
							СтрокаРасход.Сумма       = СуммаПереносаБезналичнойОплаты;
							
							СтрокаПриход = ТаблицаПрочихРасчетовИП.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаПриход, СтрокаРасход);
							
							СтрокаПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
							СтрокаПриход.РасчетныйДокумент = СтрокаОстаткаОплаты.РасчетныйДокумент;
							
							// учтем перенесенные суммы расчетов в исходных данных
							ЗачтеноОплаченоБезналом          = ЗачтеноОплаченоБезналом - СуммаПереносаБезналичнойОплаты;
							СтрокаБезналичнойОплаты.Сумма = СтрокаБезналичнойОплаты.Сумма - СуммаПереносаБезналичнойОплаты;
							
						КонецЦикла;
						
						КоличествоСтрок = ПолученныеБезналичныеОплаты.Количество();
						Для Счетчик = 1 По КоличествоСтрок Цикл
							ТекущаяСтрока = ПолученныеБезналичныеОплаты[КоличествоСтрок - Счетчик];
							Если ТекущаяСтрока.Сумма <= 0 Тогда
								ПолученныеБезналичныеОплаты.Удалить(ТекущаяСтрока);
							КонецЕсли;
						КонецЦикла;
						
					КонецЕсли;
					
					// учтем распределенные суммы в исходных данных
					СуммаНаличнойОплатыСертификатов  = СуммаНаличнойОплатыСертификатов - ЗачтеноОплаченоНаличными;
					СуммаЗачетаОплаты                = СуммаЗачетаОплаты - ЗачитываемаяСумма;
					СтрокаОстаткаОплаты.СуммаОстаток = СтрокаОстаткаОплаты.СуммаОстаток - ЗачитываемаяСумма;
					
				КонецЦикла;
				
				КоличествоСтрок = НеоплаченныеОстатки.Количество();
				Для Счетчик = 1 По КоличествоСтрок Цикл
					ТекущаяСтрока = НеоплаченныеОстатки[КоличествоСтрок - Счетчик];
					Если ТекущаяСтрока.СуммаОстаток <= 0 Тогда
						НеоплаченныеОстатки.Удалить(ТекущаяСтрока);
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
		
		КонецЕсли;
		
	КонецЕсли;
	
	ТаблицаВзаиморасчетовИП.Свернуть("Контрагент, ДокументРасчетов, ДатаДокументаРасчетов", "СуммаРуб");
	ТаблицаВзаиморасчетовИП.Сортировать("ДатаДокументаРасчетов, ДокументРасчетов", Новый СравнениеЗначений);
	
	СтруктураВозврата.ТаблицаВзаиморасчетовИП = ТаблицаВзаиморасчетовИП;
	СтруктураВозврата.ТаблицаПрочихРасчетовИП = ТаблицаПрочихРасчетовИП;
	СтруктураВозврата.ТаблицаЗачтенныхОплатИП = ТаблицаЗачтенныхОплатИП;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ТекстЗапросаДляСтруктурыТаблицИП()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПрочиеРасчетыОстатки.Организация КАК Организация,
	|	ПрочиеРасчетыОстатки.Контрагент КАК Контрагент,
	|	ПрочиеРасчетыОстатки.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ПрочиеРасчетыОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ПрочиеРасчетыОстатки.СуммаОстаток КАК СуммаОстаток,
	|	ПрочиеРасчетыОстатки.СчетУчета КАК СчетУчета
	|ПОМЕСТИТЬ ТаблицаПрочихРасчетовПоПлатежнымКартам
	|ИЗ
	|	РегистрНакопления.ПрочиеРасчеты.Остатки(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И Контрагент В (&Контрагенты)
	|				И ДоговорКонтрагента В (&ДоговорыКонтрагентов)
	|				И РасчетныйДокумент В (&СписокДокументовПоПлатежнымКартам)) КАК ПрочиеРасчетыОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИСТИНА КАК ВзаиморасчетыИП,
	|	ПрочиеРасчетыОстатки.Организация КАК Организация,
	|	ПрочиеРасчетыОстатки.Контрагент,
	|	ПрочиеРасчетыОстатки.РасчетныйДокумент КАК РасчетныйДокумент,
	|	NULL КАК ДоговорКонтрагента,
	|	ПрочиеРасчетыОстатки.СуммаОстаток,
	|	NULL КАК СчетУчета
	|ПОМЕСТИТЬ ВТПрочиеРасчетыОстатки
	|ИЗ
	|	РегистрНакопления.ПрочиеРасчеты.Остатки(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И Контрагент = &Склад) КАК ПрочиеРасчетыОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЛОЖЬ,
	|	ТаблицаПрочихРасчетовПоПлатежнымКартам.Организация,
	|	ТаблицаПрочихРасчетовПоПлатежнымКартам.Контрагент,
	|	ТаблицаПрочихРасчетовПоПлатежнымКартам.РасчетныйДокумент,
	|	ТаблицаПрочихРасчетовПоПлатежнымКартам.ДоговорКонтрагента,
	|	ТаблицаПрочихРасчетовПоПлатежнымКартам.СуммаОстаток,
	|	ТаблицаПрочихРасчетовПоПлатежнымКартам.СчетУчета
	|ИЗ
	|	ТаблицаПрочихРасчетовПоПлатежнымКартам КАК ТаблицаПрочихРасчетовПоПлатежнымКартам
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчетныйДокумент,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПрочиеРасчетыОстатки.ВзаиморасчетыИП,
	|	ВТПрочиеРасчетыОстатки.Организация,
	|	ВТПрочиеРасчетыОстатки.Контрагент КАК Контрагент,
	|	ВТПрочиеРасчетыОстатки.РасчетныйДокумент КАК ДокументРасчетов,
	|	РеквизитыДокументовРасчетов.Дата КАК ДатаПервичногоДокумента,
	|	РеквизитыДокументовРасчетов.ДатаРегистратора КАК ДатаДокументаРасчетов,
	|	ВТПрочиеРасчетыОстатки.ДоговорКонтрагента,
	|	ВТПрочиеРасчетыОстатки.СуммаОстаток КАК СуммаРуб,
	|	ВТПрочиеРасчетыОстатки.СчетУчета
	|ИЗ
	|	ВТПрочиеРасчетыОстатки КАК ВТПрочиеРасчетыОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК РеквизитыДокументовРасчетов
	|		ПО ВТПрочиеРасчетыОстатки.Организация = РеквизитыДокументовРасчетов.Организация
	|			И ВТПрочиеРасчетыОстатки.РасчетныйДокумент = РеквизитыДокументовРасчетов.Документ
	|ГДЕ
	|	РеквизитыДокументовРасчетов.Организация = &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПервичногоДокумента";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТаблицаВзаимозачетаПоСертификатамИП(ТаблицаБезналичныеОплаты, ТаблицаПроданныеСертификаты, Реквизиты)
	
	Если Не ЗначениеЗаполнено(ТаблицаБезналичныеОплаты) Или Не ЗначениеЗаполнено(ТаблицаПроданныеСертификаты) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаВзаимозачетСертификатов = ТаблицаБезналичныеОплаты.СкопироватьКолонки(
	"Контрагент, ДоговорКонтрагента, ДокументРасчетов, ТипОплаты, СуммаРуб");
	
	Для каждого СтрокаОплаты Из ТаблицаБезналичныеОплаты Цикл
		
		Если СтрокаОплаты.ДокументРасчетов <> Реквизиты.Регистратор
			Или (СтрокаОплаты.ТипОплаты <> Перечисления.ТипыОплат.ПодарочныйСертификатСобственный
			И СтрокаОплаты.ТипОплаты <> Перечисления.ТипыОплат.ПодарочныйСертификатСторонний) Тогда
			Продолжить;
		КонецЕсли;
		
		Поиск = Новый Структура("Контрагент, ДоговорКонтрагента, ДокументРасчетов");
		ЗаполнитьЗначенияСвойств(Поиск, СтрокаОплаты);
		
		СтрокиПроданных = ТаблицаПроданныеСертификаты.НайтиСтроки(Поиск);
		
		СуммаРаспределения = СтрокаОплаты.СуммаРуб;
		
		Для каждого ПроданныйИПолученный Из СтрокиПроданных Цикл
			
			СуммаВзаимозачета  = Мин(СуммаРаспределения, ПроданныйИПолученный.СуммаРуб);
			
			СтрокаВзаимозачета = ТаблицаВзаимозачетСертификатов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаВзаимозачета, СтрокаОплаты);
			
			СтрокаВзаимозачета.СуммаРуб = СуммаВзаимозачета;
			
			СуммаРаспределения = СуммаРаспределения - СуммаВзаимозачета;
			Если СуммаРаспределения = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаВзаимозачетСертификатов;
	
КонецФункции

Функция ТаблицаЗачитываемыхСертификатамиОплатИП(ТаблицаПроданныеСертификаты, Реквизиты)

	Если Не ЗначениеЗаполнено(ТаблицаПроданныеСертификаты) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Впервые проданные сертификаты образуют аванс и в прочих расчетах ИП не отражаются.
	//
	// Принятие в оплату раньше продажи может быть только для сторонних сертификатов.
	// Отберем проданные сторонние сертификаты, ранее принятые в оплату
	ТаблицаЗачитываемыхСертификатов = ТаблицаПроданныеСертификаты.СкопироватьКолонки(
		"Контрагент, ДоговорКонтрагента, ДокументРасчетов, СчетРасчетов, СуммаБУ");
	
	ВидыДоговоров = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаПроданныеСертификаты, "ДоговорКонтрагента", Истина),
		"ВидДоговора");
		
	Для каждого ПроданныйСертификат Из ТаблицаПроданныеСертификаты Цикл
		Если ПроданныйСертификат.ДокументРасчетов <> Реквизиты.Регистратор
			И ВидыДоговоров[ПроданныйСертификат.ДоговорКонтрагента] = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом
			И БухгалтерскийУчетКлиентСерверПереопределяемый.ДокументЯвляетсяРеализацией(ПроданныйСертификат.ДокументРасчетов) Тогда
			
			ЗачитываемыйСертификат = ТаблицаЗачитываемыхСертификатов.Добавить();
			ЗаполнитьЗначенияСвойств(ЗачитываемыйСертификат, ПроданныйСертификат);
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаЗачитываемыхСертификатов;

КонецФункции

Процедура СформироватьДвиженияПоСчетамУСН(ТаблицаРеквизиты, ТаблицаВыручки, ТаблицаПоПрочимРасчетам, Движения, Отказ) Экспорт
	
	Перем СуммаОплатыНаличными;
	
	Если ТаблицаПоПрочимРасчетам = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаВыручки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СуммаОплатыНаличными = ТаблицаВыручки.Итог("СуммаРуб");
	
	Реквизиты = ТаблицаРеквизиты[0];
	Организация                     = Реквизиты.Организация;
	Период                          = Реквизиты.Период;
	Регистратор                     = Реквизиты.Регистратор;
	Подразделение                   = Реквизиты.Подразделение;
	УчитыватьЗадолженностьУСН       = Реквизиты.УчитыватьЗадолженностьУСН;
	УчитыватьЗадолженностьУСНПатент = Реквизиты.УчитыватьЗадолженностьУСНПатент;
	
	СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(Организация, Период);
	
	СвойстваСчетаРасчетыСКомитентомУСН =
		БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(
			ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиКомитент);
	
	СвойстваСчетаРасчетыПатентУСН =
		БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(
			ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиПатент);
	
	СвойстваСчетаРасчетыЕНВДУСН =
		БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(
			ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиЕНВД);
	
	СвойстваСчетаРасчетыТорговыйСборУСН =
		БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(
			ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиТорговыйСбор);
	
	Если СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости Тогда
		
		Отбор = Новый Структура("ВидДвижения", ВидДвиженияНакопления.Расход);
		
		ТаблицаТолькоРасходаПоПрочимРасчетам = ТаблицаПоПрочимРасчетам.Скопировать(Отбор); 
		
		СуммаПодлежащаяПоследующейОплате = ТаблицаТолькоРасходаПоПрочимРасчетам.Итог("Сумма");
		
		Если ТаблицаТолькоРасходаПоПрочимРасчетам.Количество() > 0 Тогда
			
			ВсегоКомитенту    = ТаблицаТолькоРасходаПоПрочимРасчетам.Итог("СуммаРубКомитент");
			ВсегоЕНВД         = ТаблицаТолькоРасходаПоПрочимРасчетам.Итог("СуммаРубЕНВД");
			ВсегоПатент       = ТаблицаТолькоРасходаПоПрочимРасчетам.Итог("СуммаРубПатент");
			ВсегоТорговыйСбор = ТаблицаТолькоРасходаПоПрочимРасчетам.Итог("СуммаРубТорговыйСбор");
			
			Если (СуммаПодлежащаяПоследующейОплате - ВсегоКомитенту - ВсегоЕНВД - ВсегоПатент) > 0 Тогда
			
				СтрокаТаблицы = ТаблицаТолькоРасходаПоПрочимРасчетам[0];
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период      = Период;
				Проводка.Организация = Организация;
				Проводка.Содержание  = "Задолженность за товары и услуги комитента";
				
				Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиКомитент;
				Проводка.Сумма        = СуммаПодлежащаяПоследующейОплате - ВсегоКомитенту - ВсегоЕНВД - ВсегоПатент;
				
				Проводка.СубконтоДт.Контрагенты                     = СтрокаТаблицы.Контрагент;
				Проводка.СубконтоДт.Договоры                        = СтрокаТаблицы.ДоговорКонтрагента;
				Проводка.СубконтоДт.ДокументыРасчетовСКонтрагентами = Регистратор;
				Если СвойстваСчетаРасчетыСКомитентомУСН.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеДт = Подразделение;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Для Каждого СтрокаТаблицы Из ТаблицаТолькоРасходаПоПрочимРасчетам Цикл
			
			Если СтрокаТаблицы.СуммаРубКомитент <> 0 Тогда
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период      = Период;
				Проводка.Организация = Организация;
				Проводка.Содержание  = "Задолженность за товары и услуги комитента";
				
				Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиКомитент;
				Проводка.Сумма        = СтрокаТаблицы.СуммаРубКомитент;
				
				Проводка.СубконтоДт.Контрагенты                     = СтрокаТаблицы.Контрагент;
				Проводка.СубконтоДт.Договоры                        = СтрокаТаблицы.ДоговорКонтрагента;
				Проводка.СубконтоДт.ДокументыРасчетовСКонтрагентами = Регистратор;
				Если СвойстваСчетаРасчетыСКомитентомУСН.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеДт = Подразделение;
				КонецЕсли;
				
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиКомитент;
				
				Проводка.СубконтоКт.Контрагенты                     = СтрокаТаблицы.Контрагент;
				Проводка.СубконтоКт.Договоры                        = СтрокаТаблицы.ДоговорКонтрагента;
				Проводка.СубконтоКт.ДокументыРасчетовСКонтрагентами = СтрокаТаблицы.РасчетныйДокумент;
				Если СвойстваСчетаРасчетыСКомитентомУСН.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеКт = Подразделение;
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаТаблицы.СуммаРубЕНВД <> 0 Тогда
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период      = Период;
				Проводка.Организация = Организация;
				Проводка.Содержание  = "Задолженность за товары и услуги комитента";
				
				Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиКомитент;
				Проводка.Сумма        = СтрокаТаблицы.СуммаРубЕНВД;
				
				Проводка.СубконтоДт.Контрагенты                     = СтрокаТаблицы.Контрагент;
				Проводка.СубконтоДт.Договоры                        = СтрокаТаблицы.ДоговорКонтрагента;
				Проводка.СубконтоДт.ДокументыРасчетовСКонтрагентами = Регистратор;
				Если СвойстваСчетаРасчетыСКомитентомУСН.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеДт = Подразделение;
				КонецЕсли;
				
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиЕНВД;
				
				Проводка.СубконтоКт.Контрагенты                     = СтрокаТаблицы.Контрагент;
				Проводка.СубконтоКт.Договоры                        = СтрокаТаблицы.ДоговорКонтрагента;
				Проводка.СубконтоКт.ДокументыРасчетовСКонтрагентами = СтрокаТаблицы.РасчетныйДокумент;
				Если СвойстваСчетаРасчетыЕНВДУСН.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеКт = Подразделение;
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаТаблицы.СуммаРубПатент <> 0 Тогда
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период      = Период;
				Проводка.Организация = Организация;
				Проводка.Содержание  = "Задолженность по деятельности на патенте";
				
				Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиКомитент;
				Проводка.Сумма        = СтрокаТаблицы.СуммаРубПатент;
				
				Проводка.СубконтоДт.Контрагенты                     = СтрокаТаблицы.Контрагент;
				Проводка.СубконтоДт.Договоры                        = СтрокаТаблицы.ДоговорКонтрагента;
				Проводка.СубконтоДт.ДокументыРасчетовСКонтрагентами = Регистратор;
				Если СвойстваСчетаРасчетыСКомитентомУСН.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеДт = Подразделение;
				КонецЕсли;
				
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиПатент;
				
				Проводка.СубконтоКт.Контрагенты                     = СтрокаТаблицы.Контрагент;
				Проводка.СубконтоКт.Договоры                        = СтрокаТаблицы.ДоговорКонтрагента;
				Проводка.СубконтоКт.ДокументыРасчетовСКонтрагентами = СтрокаТаблицы.РасчетныйДокумент;
				Если СвойстваСчетаРасчетыПатентУСН.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеКт = Подразделение;
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаТаблицы.СуммаРубТорговыйСбор <> 0 Тогда
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период      = Период;
				Проводка.Организация = Организация;
				Проводка.Содержание  = "Задолженность по деятельности на торговом сборе";
				
				Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиКомитент;
				Проводка.Сумма        = СтрокаТаблицы.СуммаРубТорговыйСбор;
				
				Проводка.СубконтоДт.Контрагенты                     = СтрокаТаблицы.Контрагент;
				Проводка.СубконтоДт.Договоры                        = СтрокаТаблицы.ДоговорКонтрагента;
				Проводка.СубконтоДт.ДокументыРасчетовСКонтрагентами = Регистратор;
				Если СвойстваСчетаРасчетыТорговыйСборУСН.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеДт = Подразделение;
				КонецЕсли;
				
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиТорговыйСбор;
				
				Проводка.СубконтоКт.Контрагенты                     = СтрокаТаблицы.Контрагент;
				Проводка.СубконтоКт.Договоры                        = СтрокаТаблицы.ДоговорКонтрагента;
				Проводка.СубконтоКт.ДокументыРасчетовСКонтрагентами = СтрокаТаблицы.РасчетныйДокумент;
				Если СвойстваСчетаРасчетыТорговыйСборУСН.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеКт = Подразделение;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Отбор = Новый Структура("ВидДвижения", ВидДвиженияНакопления.Расход);
		
		ТаблицаБезналичнойОплаты = ТаблицаПоПрочимРасчетам.Скопировать(Отбор);
		
		СуммаБезналичнойОплаты = ТаблицаБезналичнойОплаты.Итог("Сумма");
		
		УчитыватьЗадолженностьУСН = УчетнаяПолитика.ПрименяетсяУСН(Организация, Период);
		
		Если УчитыватьЗадолженностьУСН Тогда
			КоэффициентБезналичнойОплаты = ?(СуммаОплатыНаличными = 0, 0, СуммаБезналичнойОплаты / СуммаОплатыНаличными);
			ТаблицаБезналичнойОплаты.Колонки.Добавить("СуммаРубЕНВДДебет",         ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
			ТаблицаБезналичнойОплаты.Колонки.Добавить("СуммаРубКомитентДебет",     ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
			ТаблицаБезналичнойОплаты.Колонки.Добавить("СуммаРубТорговыйСборДебет", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
			ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
				Окр(ТаблицаВыручки.Итог("СуммаРубЕНВД") * КоэффициентБезналичнойОплаты, 2),
				ТаблицаБезналичнойОплаты,
				"СуммаРубЕНВДДебет",
				"Сумма");
			ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
				Окр(ТаблицаВыручки.Итог("СуммаРубКомитента") * КоэффициентБезналичнойОплаты, 2),
				ТаблицаБезналичнойОплаты,
				"СуммаРубКомитентДебет",
				"Сумма");
			ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
				Окр(ТаблицаВыручки.Итог("СуммаРубТорговыйСбор") * КоэффициентБезналичнойОплаты, 2),
				ТаблицаБезналичнойОплаты,
				"СуммаРубТорговыйСборДебет",
				"Сумма");
		КонецЕсли;
		Если УчитыватьЗадолженностьУСНПатент Тогда
			КоэффициентБезналичнойОплаты = ?(СуммаОплатыНаличными = 0, 0, СуммаБезналичнойОплаты / СуммаОплатыНаличными);
			ТаблицаБезналичнойОплаты.Колонки.Добавить("СуммаРубПатентДебет",      Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
			ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
				Окр(ТаблицаВыручки.Итог("СуммаРубПатент") * КоэффициентБезналичнойОплаты, 2),
				ТаблицаБезналичнойОплаты,
				"СуммаРубПатентДебет",
				"Сумма");
		КонецЕсли;
		
		Для каждого СтрокаБезналичнойОплаты Из ТаблицаБезналичнойОплаты Цикл
			
			// Проводка Кт УСН.01
			Если УчитыватьЗадолженностьУСН И СтрокаБезналичнойОплаты.СуммаРубЕНВД <> 0 Тогда
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период      = Период;
				Проводка.Организация = Организация;
				Проводка.Содержание  = "Задолженность по деятельности ЕНВД";
				
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиЕНВД;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
					"Контрагенты", СтрокаБезналичнойОплаты.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
					"Договоры", СтрокаБезналичнойОплаты.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
					"ДокументыРасчетовСКонтрагентами", СтрокаБезналичнойОплаты.РасчетныйДокумент);
				
				Если СвойстваСчетаРасчетыЕНВДУСН.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеКт = Подразделение;
				КонецЕсли;
				
				Проводка.Сумма = СтрокаБезналичнойОплаты.СуммаРубЕНВД;
				
			КонецЕсли;
			
			// Проводка Дт УСН.01
			Если УчитыватьЗадолженностьУСН И СтрокаБезналичнойОплаты.СуммаРубЕНВДДебет <> 0 Тогда
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период      = Период;
				Проводка.Организация = Организация;
				Проводка.Содержание  = "Задолженность по деятельности ЕНВД";
				
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиЕНВД;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
					"Контрагенты", СтрокаБезналичнойОплаты.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
					"Договоры", СтрокаБезналичнойОплаты.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
					"ДокументыРасчетовСКонтрагентами", Регистратор);
				
				Если СвойстваСчетаРасчетыЕНВДУСН.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеДт = Подразделение;
				КонецЕсли;
				
				Проводка.Сумма = СтрокаБезналичнойОплаты.СуммаРубЕНВДДебет;
				
			КонецЕсли;
			
			// Проводка Кт УСН.02
			Если УчитыватьЗадолженностьУСН И СтрокаБезналичнойОплаты.СуммаРубКомитент <> 0 Тогда
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период      = Период;
				Проводка.Организация = Организация;
				Проводка.Содержание  = "Задолженность за товары и услуги комитента";
				
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиКомитент;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
					"Контрагенты", СтрокаБезналичнойОплаты.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
					"Договоры", СтрокаБезналичнойОплаты.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
					"ДокументыРасчетовСКонтрагентами", СтрокаБезналичнойОплаты.РасчетныйДокумент);
				
				Если СвойстваСчетаРасчетыСКомитентомУСН.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеКт = Подразделение;
				КонецЕсли;
				
				Проводка.Сумма = СтрокаБезналичнойОплаты.СуммаРубКомитент;
				
			КонецЕсли;
			
			// Проводка Дт УСН.02
			Если УчитыватьЗадолженностьУСН И СтрокаБезналичнойОплаты.СуммаРубКомитентДебет <> 0 Тогда
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период      = Период;
				Проводка.Организация = Организация;
				Проводка.Содержание  = "Задолженность за товары и услуги комитента";
				
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиКомитент;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
					"Контрагенты", СтрокаБезналичнойОплаты.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
					"Договоры", СтрокаБезналичнойОплаты.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
					"ДокументыРасчетовСКонтрагентами", Регистратор);
				
				Если СвойстваСчетаРасчетыСКомитентомУСН.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеДт = Подразделение;
				КонецЕсли;
				
				Проводка.Сумма = СтрокаБезналичнойОплаты.СуммаРубКомитентДебет;
				
			КонецЕсли;
			
			// Проводка Кт УСН.03
			Если УчитыватьЗадолженностьУСНПатент И СтрокаБезналичнойОплаты.СуммаРубПатент <> 0 Тогда
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период      = Период;
				Проводка.Организация = Организация;
				Проводка.Содержание  = "Задолженность по деятельности на патенте";
				
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиПатент;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
					"Контрагенты", СтрокаБезналичнойОплаты.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
					"Договоры", СтрокаБезналичнойОплаты.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
					"ДокументыРасчетовСКонтрагентами", СтрокаБезналичнойОплаты.РасчетныйДокумент);
				
				Если СвойстваСчетаРасчетыПатентУСН.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеКт = Подразделение;
				КонецЕсли;
				
				Проводка.Сумма = СтрокаБезналичнойОплаты.СуммаРубПатент;
				
			КонецЕсли;
			
			// Проводка Дт УСН.03
			Если УчитыватьЗадолженностьУСНПатент И СтрокаБезналичнойОплаты.СуммаРубПатентДебет <> 0 Тогда
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период      = Период;
				Проводка.Организация = Организация;
				Проводка.Содержание  = "Задолженность по деятельности на патенте";
				
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиПатент;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
					"Контрагенты", СтрокаБезналичнойОплаты.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
					"Договоры", СтрокаБезналичнойОплаты.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
					"ДокументыРасчетовСКонтрагентами", Регистратор);
				
				Если СвойстваСчетаРасчетыПатентУСН.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеДт = Подразделение;
				КонецЕсли;
				
				Проводка.Сумма = СтрокаБезналичнойОплаты.СуммаРубПатентДебет;
				
			КонецЕсли;
			
			// Проводка Кт УСН.04
			Если УчитыватьЗадолженностьУСН И СтрокаБезналичнойОплаты.СуммаРубТорговыйСбор <> 0 Тогда
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период      = Период;
				Проводка.Организация = Организация;
				Проводка.Содержание  = "Задолженность по деятельности на торговом сборе";
				
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиТорговыйСбор;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
					"Контрагенты", СтрокаБезналичнойОплаты.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
					"Договоры", СтрокаБезналичнойОплаты.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
					"ДокументыРасчетовСКонтрагентами", СтрокаБезналичнойОплаты.РасчетныйДокумент);
				
				Если СвойстваСчетаРасчетыТорговыйСборУСН.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеКт = Подразделение;
				КонецЕсли;
				
				Проводка.Сумма = СтрокаБезналичнойОплаты.СуммаРубТорговыйСбор;
				
			КонецЕсли;
			
			// Проводка Дт УСН.04
			Если УчитыватьЗадолженностьУСН И СтрокаБезналичнойОплаты.СуммаРубТорговыйСборДебет <> 0 Тогда
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период      = Период;
				Проводка.Организация = Организация;
				Проводка.Содержание  = "Задолженность по деятельности на торговом сборе";
				
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиТорговыйСбор;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
					"Контрагенты", СтрокаБезналичнойОплаты.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
					"Договоры", СтрокаБезналичнойОплаты.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
					"ДокументыРасчетовСКонтрагентами", Регистратор);
				
				Если СвойстваСчетаРасчетыТорговыйСборУСН.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеДт = Подразделение;
				КонецЕсли;
				
				Проводка.Сумма = СтрокаБезналичнойОплаты.СуммаРубТорговыйСборДебет;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
		
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьСтруктуруТаблицБезналичнойВыручкиНТТ(ТаблицаРеквизиты, ТаблицаВыручкиЗаМесяц, Отказ) Экспорт
	
	Перем ТаблицаНеоплаченнойБезналичнойВыручки;
	
	ТаблицаПрочихРасчетов = УчетВзаиморасчетов.ПустаяТаблицаПоПрочимРасчетам();
	
	СтруктураВозврата = Новый Структура("ТаблицаПрочихРасчетовНТТ, ТаблицаНеоплаченнойБезналичнойВыручки",
										 ТаблицаПрочихРасчетов,    ТаблицаНеоплаченнойБезналичнойВыручки);
	
	Если ТаблицаРеквизиты = Неопределено
		ИЛИ ТаблицаРеквизиты.Количество() = 0 
		ИЛИ ТаблицаВыручкиЗаМесяц = Неопределено Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Если НЕ Реквизиты.ПрименяетсяУСН Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Организация   = Реквизиты.Организация;
	Период        = Реквизиты.Период;
	Регистратор   = Реквизиты.Регистратор;
	Подразделение = Реквизиты.Подразделение;
	
	СуммаДокумента = Реквизиты.СуммаОплатыНаличными;
	
	ГраницаОстатка = Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор);
	
	СчетаГруппы = Новый Массив;
	СчетаГруппы.Добавить(ПланыСчетов.Хозрасчетный.УСНВспомогательныеСчета);
	
	УсловияОтбора = БухгалтерскийУчет.НовыеУсловияОтбораСубсчетов();
	УсловияОтбора.ИспользоватьВПроводках = Истина;
	УсловияОтбора.Забалансовый = Истина;
	
	СчетаУСН = БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(СчетаГруппы, УсловияОтбора);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода",  Период);
	Запрос.УстановитьПараметр("Организация",   Реквизиты.Организация);
	Запрос.УстановитьПараметр("Склад",         Реквизиты.Склад);
	
	Запрос.Текст = ТекстЗапросаПоДокументамОплатаПлатежнойКартой();
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаДокументовОплатаПлатежнойКартой = Результат[1].Выгрузить();
	
	Блокировка = Новый БлокировкаДанных;
		
	// Установка управляемой блокировки РегистрНакопления.ПрочиеРасчеты
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ПрочиеРасчеты");
	ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
	ЭлементБлокировки.УстановитьЗначение("Период",      Новый Диапазон(, Реквизиты.Период));
	ЭлементБлокировки.ИсточникДанных = ТаблицаДокументовОплатаПлатежнойКартой;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Контрагент", "Эквайер");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ДоговорКонтрагента", "ДоговорЭквайринга");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("СчетУчета", "СчетКасса");
	
	// Дополнительные блокировки по вспомогательным счетам задолженности УСН
	Для каждого СчетУСН Из СчетаУСН Цикл
		ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.Хозрасчетный");
		ЭлементБлокировки.УстановитьЗначение("Период",      Новый Диапазон(, Период));
		ЭлементБлокировки.УстановитьЗначение("Организация", Организация);
		ЭлементБлокировки.УстановитьЗначение("Счет",        СчетУСН);
		ЭлементБлокировки.ИсточникДанных = ТаблицаДокументовОплатаПлатежнойКартой;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты, "Эквайер");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры, "ДоговорЭквайринга");
	КонецЦикла;
		
	Блокировка.Заблокировать();
	
	Контрагенты = ТаблицаДокументовОплатаПлатежнойКартой.ВыгрузитьКолонку("Эквайер");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(Контрагенты);
	
	ДоговорыКонтрагентов = ТаблицаДокументовОплатаПлатежнойКартой.ВыгрузитьКолонку("ДоговорЭквайринга");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(ДоговорыКонтрагентов);
	
	СписокДокументовПоПлатежнымКартам = ТаблицаДокументовОплатаПлатежнойКартой.ВыгрузитьКолонку("Ссылка");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(СписокДокументовПоПлатежнымКартам);
	
	Запрос.УстановитьПараметр("ДатаОстатка", ГраницаОстатка);
	Запрос.УстановитьПараметр("Контрагенты", Контрагенты);
	Запрос.УстановитьПараметр("ДоговорыКонтрагентов", ДоговорыКонтрагентов);
	Запрос.УстановитьПараметр("СписокДокументовПоПлатежнымКартам", СписокДокументовПоПлатежнымКартам);
	Запрос.УстановитьПараметр("СписокСчетовУСН", СчетаУСН);
	
	ВидыСубконто = Новый Массив;
	
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	
	Запрос.Текст = ТекстЗапросаДляСтруктурыТаблицУСН();
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаНеоплаченнойБезналичнойВыручки = РезультатЗапроса[1].Выгрузить();
	ОстаткиПоСчетамУСН                    = РезультатЗапроса[2].Выгрузить();
	
	Если ТаблицаНеоплаченнойБезналичнойВыручки.Количество() = 0 Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ТаблицаПрочихРасчетов.Колонки.Добавить("СуммаРубЕНВД",
		ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаПрочихРасчетов.Колонки.Добавить("СуммаРубКомитент",
		ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаПрочихРасчетов.Колонки.Добавить("СуммаРубТорговыйСбор",
		ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаПрочихРасчетов.Колонки.Добавить("СуммаРубПатент",
		ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
		
	СтруктураВозврата.ТаблицаНеоплаченнойБезналичнойВыручки = ТаблицаНеоплаченнойБезналичнойВыручки;
	СтруктураВозврата.ТаблицаПрочихРасчетовНТТ = ПодготовитьТаблицуПрочихРасчетовНТТ(
													Реквизиты,
													СуммаДокумента,
													ТаблицаНеоплаченнойБезналичнойВыручки,
													ТаблицаВыручкиЗаМесяц,
													ТаблицаПрочихРасчетов,
													ОстаткиПоСчетамУСН);
		
	Возврат СтруктураВозврата;
	
КонецФункции

функция ТекстЗапросаПоДокументамОплатаПлатежнойКартой()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОплатаПлатежнойКартой.Ссылка КАК Ссылка,
	|	ОплатаПлатежнойКартой.Эквайер КАК Эквайер,
	|	ОплатаПлатежнойКартой.ДоговорЭквайринга КАК ДоговорЭквайринга,
	|	ОплатаПлатежнойКартой.СчетКасса
	|ПОМЕСТИТЬ ТаблицаДокументовОплатаПлатежнойКартой
	|ИЗ
	|	Документ.ОплатаПлатежнойКартой КАК ОплатаПлатежнойКартой
	|ГДЕ
	|	ОплатаПлатежнойКартой.Организация = &Организация
	|	И ОплатаПлатежнойКартой.Контрагент = &Склад
	|	И ОплатаПлатежнойКартой.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОплатаПлатежнойКартой.РозничнаяВыручка)
	|	И ОплатаПлатежнойКартой.Дата >= &НачалоПериода
	|	И ОплатаПлатежнойКартой.Дата <= &КонецПериода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументовОплатаПлатежнойКартой.Ссылка,
	|	ТаблицаДокументовОплатаПлатежнойКартой.Эквайер,
	|	ТаблицаДокументовОплатаПлатежнойКартой.ДоговорЭквайринга,
	|	ТаблицаДокументовОплатаПлатежнойКартой.СчетКасса
	|ИЗ
	|	ТаблицаДокументовОплатаПлатежнойКартой КАК ТаблицаДокументовОплатаПлатежнойКартой";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДляСтруктурыТаблицУСН()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПрочиеРасчетыОстатки.Организация КАК Организация,
	|	ПрочиеРасчетыОстатки.Контрагент КАК Контрагент,
	|	ПрочиеРасчетыОстатки.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ПрочиеРасчетыОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ПрочиеРасчетыОстатки.СуммаОстаток КАК СуммаОстаток,
	|	ПрочиеРасчетыОстатки.СчетУчета КАК СчетУчета
	|ПОМЕСТИТЬ ВТОстаткиПрочихРасчетов
	|ИЗ
	|	РегистрНакопления.ПрочиеРасчеты.Остатки(
	|			&ДатаОстатка,
	|			Организация = &Организация
	|				И Контрагент В (&Контрагенты)
	|				И ДоговорКонтрагента В (&ДоговорыКонтрагентов)
	|				И РасчетныйДокумент В (&СписокДокументовПоПлатежнымКартам)) КАК ПрочиеРасчетыОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчетныйДокумент,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОстаткиПрочихРасчетов.Контрагент,
	|	ВТОстаткиПрочихРасчетов.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ВТОстаткиПрочихРасчетов.ДоговорКонтрагента,
	|	ВТОстаткиПрочихРасчетов.СуммаОстаток,
	|	ВТОстаткиПрочихРасчетов.СчетУчета,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПервичногоДокумента
	|ИЗ
	|	ВТОстаткиПрочихРасчетов КАК ВТОстаткиПрочихРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО ВТОстаткиПрочихРасчетов.РасчетныйДокумент = ДанныеПервичныхДокументов.Документ
	|			И ВТОстаткиПрочихРасчетов.Организация = ДанныеПервичныхДокументов.Организация
	|ГДЕ
	|	ДанныеПервичныхДокументов.Организация = &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПервичногоДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК Контрагент,
	|	ХозрасчетныйОстатки.Субконто2 КАК Договор,
	|	ХозрасчетныйОстатки.Субконто3 КАК РасчетныйДокумент,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалЕНВД)
	|				ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаВзаиморасчетовЕНВД,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалКомитент)
	|				ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаВзаиморасчетовКомитент,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалТорговыйСбор)
	|				ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаВзаиморасчетовТорговыйСбор,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалПатент)
	|				ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаВзаиморасчетовПатент,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиЕНВД)
	|					ИЛИ ХозрасчетныйОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалЕНВД)
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБУ_ЕНВД,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиКомитент)
	|					ИЛИ ХозрасчетныйОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалКомитент)
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБУ_Комитент,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиТорговыйСбор)
	|					ИЛИ ХозрасчетныйОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалТорговыйСбор)
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБУ_ТорговыйСбор,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиПатент)
	|					ИЛИ ХозрасчетныйОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалПатент)
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБУ_Патент
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаОстатка,
	|			Счет В (&СписокСчетовУСН),
	|			&ВидыСубконто,
	|			Субконто1 В (&Контрагенты)
	|				И Субконто2 В (&ДоговорыКонтрагентов)
	|				И Субконто3 В (&СписокДокументовПоПлатежнымКартам)
	|				И Организация = &Организация) КАК ХозрасчетныйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Субконто2,
	|	ХозрасчетныйОстатки.Субконто3
	|
	|УПОРЯДОЧИТЬ ПО
	|	РасчетныйДокумент";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПодготовитьТаблицуПрочихРасчетовНТТ(Реквизиты, СуммаДокумента, ТаблицаНеоплаченнойБезналичнойВыручки, ТаблицаВыручкиЗаМесяц, ТаблицаПрочихРасчетов, ОстаткиПоСчетамУСН = Неопределено)
	
	Регистратор = Реквизиты.Регистратор;
	
	Отбор = Новый Структура;
	
	Отбор.Вставить("НаличнаяВыручка", Ложь);
	
	ТаблицаБезналичнойВыручки = ТаблицаВыручкиЗаМесяц.Скопировать(Отбор);
	
	СуммаВыручкиВсегоБезналичная = ТаблицаБезналичнойВыручки.Итог("СуммаРуб");
	
	СуммаНеоплаченнойВыручки = ТаблицаНеоплаченнойБезналичнойВыручки.Итог("СуммаОстаток");
	
	СуммаОплаченнойВыручки = СуммаВыручкиВсегоБезналичная - СуммаНеоплаченнойВыручки;
	
	СуммаПодлежащаяПроведениюПоПрочимРасчетам = Мин(СуммаДокумента, СуммаВыручкиВсегоБезналичная - СуммаОплаченнойВыручки);
	СуммаДляОтраженияВОплаченнойВыручке       = Макс(СуммаДокумента - СуммаПодлежащаяПроведениюПоПрочимРасчетам, 0);
	
	ЕстьОстаткиПоСчетамУСН = НЕ ОстаткиПоСчетамУСН = Неопределено;
	
	Если ЕстьОстаткиПоСчетамУСН Тогда
		ОстаткиПоСчетамУСН.Индексы.Добавить("РасчетныйДокумент");
	КонецЕсли;
	
	Если СуммаПодлежащаяПроведениюПоПрочимРасчетам > 0 Тогда
		
		Для Каждого СтрокаТаблицы Из ТаблицаНеоплаченнойБезналичнойВыручки Цикл
			
			СуммаДвижения = Мин(СтрокаТаблицы.СуммаОстаток, СуммаПодлежащаяПроведениюПоПрочимРасчетам);
			
			НоваяСтрока = ТаблицаПрочихРасчетов.Добавить();
			
			//Свойства
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты);
			НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
			
			//Измерения и ресурсы
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Сумма = СуммаДвижения;
			
			Если ЕстьОстаткиПоСчетамУСН Тогда
			
				СтрокаПоСчетамУСН = ОстаткиПоСчетамУСН.Найти(СтрокаТаблицы.РасчетныйДокумент, "РасчетныйДокумент");
				
				Если НЕ СтрокаПоСчетамУСН = Неопределено Тогда
					
					СуммаБУ_УСН = СтрокаПоСчетамУСН.СуммаБУ_ЕНВД
								+ СтрокаПоСчетамУСН.СуммаБУ_Комитент
								+ СтрокаПоСчетамУСН.СуммаБУ_ТорговыйСбор
								+ СтрокаПоСчетамУСН.СуммаБУ_Патент;
					
					КоэффициентБУ_ЕНВД         = ?(СуммаБУ_УСН = 0, 0, СтрокаПоСчетамУСН.СуммаБУ_ЕНВД/СуммаБУ_УСН);
					КоэффициентБУ_Комитента    = ?(СуммаБУ_УСН = 0, 0, СтрокаПоСчетамУСН.СуммаБУ_Комитент/СуммаБУ_УСН);
					КоэффициентБУ_ТорговыйСбор = ?(СуммаБУ_УСН = 0, 0, СтрокаПоСчетамУСН.СуммаБУ_ТорговыйСбор/СуммаБУ_УСН);
					КоэффициентБУ_Патент       = ?(СуммаБУ_УСН = 0, 0, СтрокаПоСчетамУСН.СуммаБУ_Патент/СуммаБУ_УСН);
					
					НоваяСтрока.СуммаРубЕНВД         = Мин(СтрокаПоСчетамУСН.СуммаБУ_ЕНВД, СуммаДвижения)*КоэффициентБУ_ЕНВД;
					НоваяСтрока.СуммаРубКомитент     = Мин(СтрокаПоСчетамУСН.СуммаБУ_Комитент, СуммаДвижения)*КоэффициентБУ_Комитента;
					НоваяСтрока.СуммаРубТорговыйСбор = Мин(СтрокаПоСчетамУСН.СуммаБУ_ТорговыйСбор, СуммаДвижения)*КоэффициентБУ_ТорговыйСбор;
					НоваяСтрока.СуммаРубПатент       = Мин(СтрокаПоСчетамУСН.СуммаБУ_Патент, СуммаДвижения)*КоэффициентБУ_Патент;
					
				КонецЕсли;
				
			КонецЕсли;
			
			НоваяСтрока = ТаблицаПрочихРасчетов.Добавить();
			
			//Свойства
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты);
			НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
			
			//Измерения и ресурсы
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.РасчетныйДокумент = Регистратор;
			
			НоваяСтрока.Сумма = СуммаДвижения;
			
			СуммаПодлежащаяПроведениюПоПрочимРасчетам = СуммаПодлежащаяПроведениюПоПрочимРасчетам - СуммаДвижения;
			
			Если СуммаПодлежащаяПроведениюПоПрочимРасчетам <= 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТаблицаПрочихРасчетов;
	
КонецФункции

Функция ПодготовитьТаблицуПрочихРасчетовАТТ(ТаблицаБезналичныеОплаты, ТаблицаРеквизиты) Экспорт

	Если ТаблицаБезналичныеОплаты = Неопределено Или ТаблицаБезналичныеОплаты.Количество() = 0
		Или ТаблицаРеквизиты = Неопределено Или ТаблицаРеквизиты.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Если Реквизиты.ПлательщикНДФЛ
		Или (Не Реквизиты.УчитыватьЗадолженностьУСН И Не Реквизиты.УчитыватьЗадолженностьУСНПатент) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаПрочихРасчетов = УчетВзаиморасчетов.ПустаяТаблицаПоПрочимРасчетам();
	
	Для каждого СтрокаОплаты Из ТаблицаБезналичныеОплаты Цикл
	
		Если СтрокаОплаты.ДокументРасчетов = Реквизиты.Регистратор
			И (СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплат.ПлатежнаяКарта
				Или СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплат.БанковскийКредит) Тогда
			
			НоваяСтрока = ТаблицаПрочихРасчетов.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОплаты);
			
			НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
			НоваяСтрока.РасчетныйДокумент = Реквизиты.Регистратор;
			НоваяСтрока.СчетУчета = СтрокаОплаты.СчетРасчетов;
			
			НоваяСтрока.Сумма = СтрокаОплаты.СуммаРуб;
			
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат ТаблицаПрочихРасчетов;

КонецФункции

Функция ПодготовитьТаблицыРаспределенияВыручкиПоОплатам(ВыручкаДляРаспределенияОплатыУСН, БезналичныеОплатыВзаиморасчеты, ПроданныеСертификатыВзаиморасчеты, ТаблицаРеквизиты, Отказ, ЭтоОтложенноеПроведение = Ложь) Экспорт

	Параметры = ПодготовитьПараметрыРаспределенияВыручкиПоОплатам(ВыручкаДляРаспределенияОплатыУСН, БезналичныеОплатыВзаиморасчеты, ПроданныеСертификатыВзаиморасчеты, ТаблицаРеквизиты);
	
	СтруктураТаблиц = Новый Структура("ТаблицаВыручка, БезналичныеОплаты, ПроданныеСертификаты, ТаблицаНаличнаяОплата",
		Параметры.ТаблицаВыручка,
		Параметры.БезналичныеОплаты,
		Параметры.ПроданныеСертификаты,
		Неопределено);
	
	Если Параметры.БезналичныеОплаты.Количество() = 0
		ИЛИ Параметры.ТаблицаВыручка.Количество() = 0 Тогда
		Возврат СтруктураТаблиц;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	Организация               = Реквизиты.Организация;
	Период                    = Реквизиты.Период;
	Регистратор               = Реквизиты.Регистратор;
	ДеятельностьНаПатенте     = Реквизиты.ДеятельностьНаПатенте;
	УчитыватьЗадолженностьУСН = Реквизиты.УчитыватьЗадолженностьУСН;
	УчитыватьЗадолженностьУСНПатент = Реквизиты.УчитыватьЗадолженностьУСНПатент;
	ИспользуетсяОтложенноеПроведение = ПроведениеСервер.ИспользуетсяОтложенноеПроведение(
		Реквизиты.Организация, Реквизиты.Период);
	
	Выручка = Параметры.ТаблицаВыручка;
	
	БезналичныеОплаты    = Параметры.БезналичныеОплаты;
	ПроданныеСертификаты = Параметры.ПроданныеСертификаты;
	
	// Учтем "взаимозачет" по подарочным сертификатам, проданным и принятым в оплату за одну торговую смену
	
	Если БезналичныеОплаты.Количество() > 0 И ПроданныеСертификаты.Количество() > 0 Тогда
		
		УдалитьПринятыеСертификаты  = Новый Массив;
		УдалитьПроданныеСертификаты = Новый Массив;
		
		Отбор = Новый Структура("ТипОплаты, ДокументРасчетов",
			Перечисления.ТипыОплат.ПодарочныйСертификатСобственный,
			Реквизиты.Регистратор);
		ПринятыеСертификаты = БезналичныеОплаты.НайтиСтроки(Отбор);
		
		Для каждого ПринятыйСертификат Из ПринятыеСертификаты Цикл

			ИтогоЗачтено = 0;

			СуммаДляЗачета = ПринятыйСертификат.СуммаВзаиморасчетов;
			
			Если СуммаДляЗачета <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если ИспользуетсяОтложенноеПроведение И НЕ ЭтоОтложенноеПроведение Тогда
				// При отложенном проведении до момента актуализации документ расчетов не определен.
				Отбор = Новый Структура("Контрагент, ДоговорКонтрагента");
			Иначе
				Отбор = Новый Структура("Контрагент, ДоговорКонтрагента, ДокументРасчетов");
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(Отбор, ПринятыйСертификат);
			
			СтрокиПроданныхСертификатов = ПроданныеСертификаты.НайтиСтроки(Отбор);
			
			Для каждого ПроданныйСертификат Из СтрокиПроданныхСертификатов Цикл
				
				Если СуммаДляЗачета <= 0 Тогда
					Прервать;
				КонецЕсли;
				Если ПроданныйСертификат.СуммаВзаиморасчетов <= 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Зачтено = Макс(0, Мин(СуммаДляЗачета, ПроданныйСертификат.СуммаВзаиморасчетов));
				
				// Уменьшаем расчеты по проданным сертификатам на зачтенную сумму; полностью зачтенные строки удаляем.
				
				НоваяСуммаВзаиморасчетов = ПроданныйСертификат.СуммаВзаиморасчетов - Зачтено;
				Если НоваяСуммаВзаиморасчетов = 0 Тогда
					ПроданныйСертификат.СуммаВзаиморасчетов = 0;
					УдалитьПроданныеСертификаты.Добавить(ПроданныйСертификат);
				Иначе
					КоэффЗачета = НоваяСуммаВзаиморасчетов / ПроданныйСертификат.СуммаВзаиморасчетов;
					
					ПроданныйСертификат.СуммаВзаиморасчетов = НоваяСуммаВзаиморасчетов;
					
					ПроданныйСертификат.СуммаБУ                         = Окр(КоэффЗачета * ПроданныйСертификат.СуммаБУ, 2);
					ПроданныйСертификат.СуммаНУ                         = Окр(КоэффЗачета * ПроданныйСертификат.СуммаНУ, 2);
					ПроданныйСертификат.СуммаВзаиморасчетовЕНВД         = Окр(КоэффЗачета * ПроданныйСертификат.СуммаВзаиморасчетовЕНВД, 2);
					ПроданныйСертификат.СуммаБУ_ЕНВД                    = Окр(КоэффЗачета * ПроданныйСертификат.СуммаБУ_ЕНВД, 2);
					ПроданныйСертификат.СуммаВзаиморасчетовКомитента    = Окр(КоэффЗачета * ПроданныйСертификат.СуммаВзаиморасчетовКомитента, 2);
					ПроданныйСертификат.СуммаБУ_Комитента               = Окр(КоэффЗачета * ПроданныйСертификат.СуммаБУ_Комитента, 2);
					ПроданныйСертификат.СуммаВзаиморасчетовПатент       = Окр(КоэффЗачета * ПроданныйСертификат.СуммаВзаиморасчетовПатент, 2);
					ПроданныйСертификат.СуммаБУ_Патент                  = Окр(КоэффЗачета * ПроданныйСертификат.СуммаБУ_Патент, 2);
					ПроданныйСертификат.СуммаВзаиморасчетовТорговыйСбор = Окр(КоэффЗачета * ПроданныйСертификат.СуммаВзаиморасчетовТорговыйСбор, 2);
					ПроданныйСертификат.СуммаБУ_ТорговыйСбор            = Окр(КоэффЗачета * ПроданныйСертификат.СуммаБУ_ТорговыйСбор, 2);
				КонецЕсли;
				
				СуммаДляЗачета = СуммаДляЗачета - Зачтено;
				ИтогоЗачтено   = ИтогоЗачтено   + Зачтено;
				
			КонецЦикла;
			
			КоличествоСтрок = УдалитьПроданныеСертификаты.Количество();
			Для Проход = 1 По КоличествоСтрок Цикл
				ПроданныеСертификаты.Удалить(УдалитьПроданныеСертификаты[КоличествоСтрок - Проход]);
			КонецЦикла;
			УдалитьПроданныеСертификаты.Очистить();
			
			// Уменьшаем расчеты по принятым сертификатам на зачтенную сумму; полностью зачтенные строки удалим из БезналичныеОплаты.
			Если СуммаДляЗачета < ПринятыйСертификат.СуммаВзаиморасчетов Тогда
				
				// Незачтенная сумма остается в расчетах по принятым сертификатам
				
				Если СуммаДляЗачета = 0 Тогда
					ПринятыйСертификат.СуммаВзаиморасчетов = 0;
					УдалитьПринятыеСертификаты.Добавить(ПринятыйСертификат);
				Иначе
					КоэффЗачета = СуммаДляЗачета / ПринятыйСертификат.СуммаВзаиморасчетов;
					
					ПринятыйСертификат.СуммаВзаиморасчетов = СуммаДляЗачета;
					
					ПринятыйСертификат.СуммаРуб                        = Окр(КоэффЗачета * ПринятыйСертификат.СуммаРуб, 2);
					ПринятыйСертификат.СуммаРубПоКурсуАванса           = Окр(КоэффЗачета * ПринятыйСертификат.СуммаРубПоКурсуАванса, 2);
					ПринятыйСертификат.СуммаВзаиморасчетовЕНВД         = Окр(КоэффЗачета * ПринятыйСертификат.СуммаВзаиморасчетовЕНВД, 2);
					ПринятыйСертификат.СуммаРуб_ЕНВД                   = Окр(КоэффЗачета * ПринятыйСертификат.СуммаРуб_ЕНВД, 2);
					ПринятыйСертификат.СуммаВзаиморасчетовКомитента    = Окр(КоэффЗачета * ПринятыйСертификат.СуммаВзаиморасчетовКомитента, 2);
					ПринятыйСертификат.СуммаРуб_Комитента              = Окр(КоэффЗачета * ПринятыйСертификат.СуммаРуб_Комитента, 2);
					ПринятыйСертификат.СуммаВзаиморасчетовПатент       = Окр(КоэффЗачета * ПринятыйСертификат.СуммаВзаиморасчетовПатент, 2);
					ПринятыйСертификат.СуммаРуб_Патент                 = Окр(КоэффЗачета * ПринятыйСертификат.СуммаРуб_Патент, 2);
					ПринятыйСертификат.СуммаВзаиморасчетовТорговыйСбор = Окр(КоэффЗачета * ПринятыйСертификат.СуммаВзаиморасчетовТорговыйСбор, 2);
					ПринятыйСертификат.СуммаРуб_ТорговыйСбор           = Окр(КоэффЗачета * ПринятыйСертификат.СуммаРуб_ТорговыйСбор, 2);
				КонецЕсли;
			КонецЕсли;
			
			// Скорректируем выручку на сумму зачета.
			Если ИтогоЗачтено > 0 Тогда

				ОтборВыручки = Новый Структура("Контрагент, ДоговорКонтрагента");
				ЗаполнитьЗначенияСвойств(ОтборВыручки, ПринятыйСертификат);

				НайденныеСтрокиВыручки = Выручка.НайтиСтроки(ОтборВыручки);

				Если НайденныеСтрокиВыручки.Количество() > 0 Тогда
					СтрокаВыручки = НайденныеСтрокиВыручки[0];
					СтрокаВыручки.СуммаРуб = СтрокаВыручки.СуммаРуб - ИтогоЗачтено;

					Если Реквизиты.УчитыватьЗадолженностьУСНПатент И Реквизиты.ДеятельностьНаПатенте
						И Не Реквизиты.УчитыватьЗадолженностьУСН Тогда
						// Деятельность только на патенте - выручка от продажи сертификатов отражается по патенту.
						// Нужно учесть взаимозачет.
						СтрокаВыручки.СуммаРубПатент = СтрокаВыручки.СуммаРубПатент - ИтогоЗачтено;
					КонецЕсли;

				КонецЕсли;

			КонецЕсли;
			
		КонецЦикла;
		
		КоличествоСтрок = УдалитьПринятыеСертификаты.Количество();
		Для Проход = 1 По КоличествоСтрок Цикл
			БезналичныеОплаты.Удалить(УдалитьПринятыеСертификаты[КоличествоСтрок - Проход]);
		КонецЦикла;
		УдалитьПринятыеСертификаты.Очистить();
		
	КонецЕсли;
	
	// Выделим наличную оплату
	
	ОбщаяСуммаВыручки      = Выручка.Итог("СуммаРуб");
	СуммаБезналичнойОплаты = БезналичныеОплаты.Итог("СуммаРуб");
	СуммаОплатыНаличными   = ОбщаяСуммаВыручки - СуммаБезналичнойОплаты;
	
	// Таблица наличной оплаты
	Если СуммаОплатыНаличными > 0 Тогда
	
		ТаблицаНаличнаяОплата = ПустаяТаблицаНаличнаяОплата();
		СтрокаОплаты = ТаблицаНаличнаяОплата.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаОплаты, Реквизиты);
		
		СтрокаОплаты.СчетУчетаРасчетовСРозничнымПокупателем = ПланыСчетов.Хозрасчетный.РасчетыСРозничнымиПокупателями;
		СтрокаОплаты.СчетУчетаДенежныхСредств               = Реквизиты.СчетКасса;
		СтрокаОплаты.СуммаВзаиморасчетов                    = СуммаОплатыНаличными;
		СтрокаОплаты.СуммаРуб                               = СуммаОплатыНаличными;
		
		СтруктураТаблиц.Вставить("ТаблицаНаличнаяОплата", ТаблицаНаличнаяОплата);
		
	КонецЕсли;
	
	Если ОбщаяСуммаВыручки = 0 И (УчитыватьЗадолженностьУСН Или УчитыватьЗадолженностьУСНПатент) Тогда
		Возврат СтруктураТаблиц;
	КонецЕсли;
	
	// Распределим выручку по строкам безналичных оплат в разрезе специальных налоговых режимов, исключая зачтенные авансы.
	Если УчитыватьЗадолженностьУСН И СуммаБезналичнойОплаты > 0 Тогда
		
		КоэффициентБезналичнойОплаты = СуммаБезналичнойОплаты / ОбщаяСуммаВыручки;
		
		БазаРаспределения = БезналичныеОплаты.ВыгрузитьКолонку("СуммаВзаиморасчетов");
		
		СуммыЕНВД = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
			Выручка.Итог("СуммаРубЕНВД") * КоэффициентБезналичнойОплаты,
			БазаРаспределения,
			2);
		
		СуммыКомитент = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
			Выручка.Итог("СуммаРубКомитента") * КоэффициентБезналичнойОплаты,
			БазаРаспределения,
			2);
		
		СуммыТорговыйСбор = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
			Выручка.Итог("СуммаРубТорговыйСбор") * КоэффициентБезналичнойОплаты,
			БазаРаспределения,
			2);
		
		Индекс = 0;
		Для каждого СтрокаОплаты Из БезналичныеОплаты Цикл
			Если СтрокаОплаты.ДокументРасчетов = Реквизиты.Регистратор Тогда
				// Не зачтенный аванс - отражение расчетов определяется выручкой
				СтрокаОплаты.СуммаВзаиморасчетовЕНВД         = ?(ЗначениеЗаполнено(СуммыЕНВД),         СуммыЕНВД[Индекс], 0);
				СтрокаОплаты.СуммаВзаиморасчетовКомитента    = ?(ЗначениеЗаполнено(СуммыКомитент),     СуммыКомитент[Индекс], 0);
				СтрокаОплаты.СуммаВзаиморасчетовТорговыйСбор = ?(ЗначениеЗаполнено(СуммыТорговыйСбор), СуммыТорговыйСбор[Индекс], 0);
				
				СтрокаОплаты.СуммаРуб_ЕНВД         = СтрокаОплаты.СуммаВзаиморасчетовЕНВД;
				СтрокаОплаты.СуммаРуб_Комитента    = СтрокаОплаты.СуммаВзаиморасчетовКомитента;
				СтрокаОплаты.СуммаРуб_ТорговыйСбор = СтрокаОплаты.СуммаВзаиморасчетовТорговыйСбор;
			КонецЕсли;
			Индекс = Индекс + 1;
		КонецЦикла;
		
	КонецЕсли;
	
	Если УчитыватьЗадолженностьУСНПатент И СуммаБезналичнойОплаты > 0 Тогда
		
		КоэффициентБезналичнойОплаты = СуммаБезналичнойОплаты / ОбщаяСуммаВыручки;
		
		БазаРаспределения = БезналичныеОплаты.ВыгрузитьКолонку("СуммаВзаиморасчетов");
		
		СуммыПатент = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
			Выручка.Итог("СуммаРубПатент") * КоэффициентБезналичнойОплаты,
			БазаРаспределения,
			2);
		
		Индекс = 0;
		Для каждого СтрокаОплаты Из БезналичныеОплаты Цикл
			Если СтрокаОплаты.ДокументРасчетов = Реквизиты.Регистратор Тогда
				// Не зачтенный аванс - отражение расчетов определяется выручкой
				СтрокаОплаты.СуммаВзаиморасчетовПатент = ?(ЗначениеЗаполнено(СуммыПатент), СуммыПатент[Индекс], 0);
				СтрокаОплаты.СуммаРуб_Патент           = СтрокаОплаты.СуммаВзаиморасчетовПатент;
			КонецЕсли;
			Индекс = Индекс + 1;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтруктураТаблиц;
	
КонецФункции

Функция ПодготовитьПараметрыРаспределенияВыручкиПоОплатам(ВыручкаДляРаспределенияОплатыУСН, БезналичныеОплаты, ПроданныеСертификаты, ТаблицаРеквизиты)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаВыручки

	СписокОбязательныхКолонок = ""
	+ "Контрагент,"           // <Справочник.Контрагенты> - контрагент-покупатель
	+ "ДоговорКонтрагента,"   // <Справочник.ДоговорКонтрагентов> - договор контрагента-покупателя
	+ "ТипОплаты,"   		  // <ПеречислениеСсылка.ТипыОплат> - тип оплаты (плат. карта, кредит, сертификат и т.п.)
	+ "СуммаРуб,"             // <Число,15,2> - сумма выручки всего
	+ "СуммаРубЕНВД,"         // <Число,15,2> - сумма выручки по деятельности ЕНВД
	+ "СуммаРубКомитента,"    // <Число,15,2> - сумма выручки комитента
	+ "СуммаРубТорговыйСбор," // <Число,15,2> - сумма выручки по деятельности, облагаемой торговым сбором
	+ "СуммаРубПатент";       // <Число,15,2> - сумма выручки по патенту
	
	Параметры.Вставить("ТаблицаВыручка", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ВыручкаДляРаспределенияОплатыУСН, СписокОбязательныхКолонок));	
	
	// Подготовка таблицы Параметры.БезналичныеОплаты
	
	СписокОбязательныхКолонок = ""
	+ "Контрагент,"                      // <СправочникСсылка.Контрагенты>
	+ "ДоговорКонтрагента,"              // <СправочникСсылка.ДоговорыКонтрагентов>
	+ "ДокументРасчетов,"                // <ДокументСсылка>
	+ "ДатаДокументаРасчетов,"           // <Дата>
	+ "ВидДоговора,"                     //
	+ "ТипОплаты,"                       // <ПеречислениеСсылка.ТипыОплат> - тип оплаты (плат. карта, кредит, сертификат и т.п.)
	+ "ВалютаВзаиморасчетов,"            // <СправочникСсылка.Валюты> - валюта расчетов по договору
	+ "РасчетыВУсловныхЕдиницах,"        // <Булево> - флаг расчетов в условных единицах
	+ "УчетАгентскогоНДС,"                // <Булево> - флаг расчетов по НДС налогового агента
	+ "СчетРасчетов,"                    // <ПланСчетовСсылка.Хозрасчетный> - счет учета расчетов с контрагентом
	+ "СчетАвансов,"                     // <ПланСчетовСсылка.Хозрасчетный> - счет учета расчетов по авансам
	+ "СчетАвансов_ОтгрузкаВУЕ,"         // <ПланСчетовСсылка.Хозрасчетный> - счет авансов, для переквалификации в аванс для отгрузки
	+ "Подразделение,"                   // <Ссылка на справочник подразделений> - подразделение по счету авансов
	+ "ПодразделениеРасчетов,"           // <Ссылка на справочник подразделений> - подразделение по счету расчетов
	+ "РасчетыВВалюте,"                  // <Булево>  - флаг расчетов в валюте (в т.ч. и в условных единицах)
	+ "СуммаВзаиморасчетов,"             // <Число,15,2> - сумма в валюте взаиморасчетов
	+ "ОстатокВзаиморасчетов,"           // <Число,15,2> - остаток взаиморасчетов в валюте взаиморасчетов
	+ "СуммаРубПоКурсуАванса,"           // <Число,15,2> - сумма в рублях по курсу на дату аванса
	+ "СуммаРуб,"                        // <Число,15,2> - сумма в рублях (для валютных расчетов - по курсу на дату документа)
	+ "СуммаВзаиморасчетовЕНВД,"         // <Число,15,2> - сумма в валюте расчетов по деятельности ЕНВД
	+ "СуммаРуб_ЕНВД,"                   // <Число,15,2> - сумма в рублях по деятельности ЕНВД
	+ "СуммаВзаиморасчетовПатент,"       // <Число,15,2> - сумма в валюте расчетов по деятельности на патенте
	+ "СуммаРуб_Патент,"                 // <Число,15,2> - сумма в рублях по деятельности на патенте
	+ "СуммаВзаиморасчетовТорговыйСбор," // <Число,15,2> - сумма в валюте расчетов по деятельности на торговом сборе
	+ "СуммаРуб_ТорговыйСбор,"           // <Число,15,2> - сумма в рублях по деятельности на торговом сборе
	+ "СуммаВзаиморасчетовКомитента,"    // <Число,15,2> - сумма в валюте расчетов при реализации товаров и услуг комитентов
	+ "СуммаРуб_Комитента,"              // <Число,15,2> - сумма в рублях при реализации товаров и услуг комитентов
	+ "СуммаБУ_ОтгрузкаВУЕ";             // <Число,15,2> - сумма по курсу остатка отгрузки в УЕ

	Параметры.Вставить("БезналичныеОплаты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		БезналичныеОплаты, СписокОбязательныхКолонок));
	
	
	// Подготовка таблицы Параметры.ПроданныеСертификаты
	
	СписокОбязательныхКолонок = ""
	+ "Подразделение,"                   // <Ссылка на справочник подразделений> - подразделение расчетов
	+ "Контрагент,"                      // <СправочникСсылка.Контрагенты> - контрагент, покупатель подарочного сертификата
	+ "ДоговорКонтрагента,"              // <СправочникСсылка.ДоговорыКонтрагентов> - договор с покупателем сертификата
	+ "ДокументРасчетов,"                // <ДокументСсылка> - документ расчетов
	+ "ВалютаВзаиморасчетов,"            // <СправочникСсылка.Валюты> - валюта расчетов по договору
	+ "ТипОплаты,"            			 // <ПеречислениеСсылка.ТипыОплат> - тип оплаты (плат. карта, кредит, сертификат и т.п.)
	+ "СчетРасчетов,"                    // <ПланСчетовСсылка.Хозрасчетный> - счет расчетов по сертификатам
	+ "СчетАвансов_ОтгрузкаВУЕ,"         // <ПланСчетовСсылка.Хозрасчетный> - счет авансов, для переквалификации в аванс для отгрузки
	+ "КорСчет,"                         // <ПланСчетовСсылка.Хозрасчетный> - счет, корреспондирующий со счетом расчетов
	+ "КорСубконто1,"                    // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "КорСубконто2,"                    // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "КорСубконто3,"                    // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "КорПодразделение,"                // <Ссылка на справочник подразделений> - подразделение по корсчету
	+ "СуммаВзаиморасчетов,"             // <Число,15,2> - сумма в валюте взаиморасчетов
	+ "СуммаБУ,"                         // <Число,15,2> - сумма в рублях в оценке для бух.учета
	+ "СуммаНУ,"                         // <Число,15,2> - сумма в рублях в оценке для налогового учета
	+ "СуммаВзаиморасчетовЕНВД,"         // <Число,15,2> - сумма по деятельности ЕНВД в валюте взаиморасчетов
	+ "СуммаБУ_ЕНВД,"                    // <Число,15,2> - сумма по деятельности ЕНВД в рублях
	+ "СуммаВзаиморасчетовПатент,"       // <Число,15,2> - сумма по деятельности на патенте в валюте взаиморасчетов
	+ "СуммаБУ_Патент,"                  // <Число,15,2> - сумма по деятельности на патенте в рублях
	+ "СуммаВзаиморасчетовТорговыйСбор," // <Число,15,2> - сумма по деятельности на торговом сборе в валюте взаиморасчетов
	+ "СуммаБУ_ТорговыйСбор,"            // <Число,15,2> - сумма по деятельности на торговом сборе в рублях
	+ "СуммаВзаиморасчетовКомитента,"    // <Число,15,2> - сумма за товары и услуги комитентов в валюте взаиморасчетов
	+ "СуммаБУ_Комитента,"               // <Число,15,2> - сумма за товары и услуги комитентов в рублях
	+ "СуммаБУ_ОтгрузкаВУЕ,"             // <Число,15,2> - сумма по курсу остатка отгрузки в УЕ
	+ "Содержание";                      // <Строка,150>

	Параметры.Вставить("ПроданныеСертификаты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ПроданныеСертификаты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Регистратор,"                    // <ДокументСсылка>
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "ВалютаДокумента,"                // <СправочникСсылка.Валюты>
	+ "Склад,"                          // <СправочникСсылка.Склады>
	+ "ПодразделениеОрганизации,"       //
	+ "СчетКасса,"                      //
	+ "СтатьяДвиженияДенежныхСредств,"  //
	+ "ДеятельностьНаПатенте,"          // <Булево>
	+ "УчитыватьЗадолженностьУСН,"      // <Булево> - Истина для расчетов с покупателями по организации, применяющей УСН
	+ "УчитыватьЗадолженностьУСНПатент" // <Булево> - Истина для расчетов с покупателями по организации, применяющей УСН патент
	;
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПустаяТаблицаНаличнаяОплата()

	ТаблицаОплата = Новый ТаблицаЗначений;
	
	ТаблицаОплата.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаОплата.Колонки.Добавить("СчетУчетаРасчетовСРозничнымПокупателем", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаОплата.Колонки.Добавить("СчетУчетаДенежныхСредств",Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаОплата.Колонки.Добавить("СтатьяДвиженияДенежныхСредств", Новый ОписаниеТипов("СправочникСсылка.СтатьиДвиженияДенежныхСредств"));
	ТаблицаОплата.Колонки.Добавить("СуммаВзаиморасчетов", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаОплата.Колонки.Добавить("СуммаРуб", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	Возврат ТаблицаОплата;

КонецФункции

// ПОДГОТОВКА ПАРАМЕТРОВ ПРОВЕДЕНИЯ ДОКУМЕНТА

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ, ДоговорДляОтложенногоПроведения = Неопределено) Экспорт

	ПараметрыПроведения = Новый Структура;

	ЭтоОтложенноеПроведение = ЗначениеЗаполнено(ДоговорДляОтложенногоПроведения);

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);

	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат    = Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	Если НЕ УчетнаяПолитика.Существует(Реквизиты.Организация, Реквизиты.Период, Истина, ДокументСсылка) Тогда
		Отказ = Истина;
		Возврат ПараметрыПроведения;
	КонецЕсли;

	ВалютаРеглУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();

	Реквизиты.Вставить("ВалютаРеглУчета", ВалютаРеглУчета);
	Реквизиты.Вставить("РасчетыВВалюте",  Реквизиты.ВалютаДокумента <> Реквизиты.ВалютаРеглУчета);

	ПрименяетсяУСН = УчетнаяПолитика.ПрименяетсяУСН(Реквизиты.Организация, Реквизиты.Период);
	ПрименяетсяУСНПатент = УчетнаяПолитика.ПрименяетсяУСНПатент(Реквизиты.Организация, Реквизиты.Период);

	Если ПрименяетсяУСН ИЛИ ПрименяетсяУСНПатент Тогда
		// Для УСН необходимо получать все данные из документа для распределения выручки.
		// Фильтрация по актуализируемому договору выполняется в процедурах модуля НалоговыйУчетУСН
		// при формировании движений.
		ЭтоОтложенноеПроведение = Ложь;

	ИначеЕсли ЭтоОтложенноеПроведение Тогда
		// Для общей системы налогообложения в момент актуализации отложенных расчетов получение данных 
		// из табличных частей документа не требуется.
		Реквизиты.ЕстьТовары = Ложь;
		Реквизиты.ЕстьАгентскиеУслуги = Ложь;
	КонецЕсли;

	Реквизиты.Вставить("ЭтоОтложенноеПроведение", ЭтоОтложенноеПроведение);
	Запрос.УстановитьПараметр("ЭтоОтложенноеПроведение", ЭтоОтложенноеПроведение);
	Запрос.УстановитьПараметр("ДоговорДляОтложенногоПроведения", ДоговорДляОтложенногоПроведения);

	Если Реквизиты.РасчетыВВалюте Тогда
		СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Реквизиты.ВалютаДокумента, Реквизиты.Период);
		КоэффициентРуб = СтруктураКурсаВзаиморасчетов.Курс / СтруктураКурсаВзаиморасчетов.Кратность;
		Реквизиты.Вставить("КурсВзаиморасчетов", 		СтруктураКурсаВзаиморасчетов.Курс);
		Реквизиты.Вставить("КратностьВзаиморасчетов",	СтруктураКурсаВзаиморасчетов.Кратность);
	Иначе
		КоэффициентРуб = 1;
		Реквизиты.Вставить("КурсВзаиморасчетов", 		1);
		Реквизиты.Вставить("КратностьВзаиморасчетов",	1);
	КонецЕсли;

	Запрос.УстановитьПараметр("РасчетыВВалюте", Реквизиты.РасчетыВВалюте);
	Запрос.УстановитьПараметр("КоэффициентРуб", КоэффициентРуб);

	Реквизиты.Вставить("ПрименяетсяУСН", ПрименяетсяУСН);
	Реквизиты.Вставить("ПрименяетсяУСНПатент", ПрименяетсяУСНПатент);
	Реквизиты.Вставить("ПлательщикНДС", УчетнаяПолитика.ПлательщикНДС(Реквизиты.Организация, Реквизиты.Период));
	Реквизиты.Вставить("ПлательщикНДФЛ", УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период));
	Реквизиты.Вставить("ВедетсяУчетНДСПоФЗ134", УчетНДС.ВедетсяУчетНДСПоФЗ134(Реквизиты.Период));
	Реквизиты.Вставить("РозничнаяТорговляОблагаетсяЕНВД",
		УчетнаяПолитика.РозничнаяТорговляОблагаетсяЕНВД(Реквизиты.Организация, Реквизиты.Период));
	
	СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(Реквизиты.Организация, Реквизиты.Период);
	Реквизиты.Вставить("УчетПоПродажнойСтоимости",
		СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости);
	
	ТаблицаРеквизиты[0].УчитыватьЗадолженностьУСН       = Реквизиты.ПрименяетсяУСН;
	ТаблицаРеквизиты[0].УчитыватьЗадолженностьУСНПатент = Реквизиты.ПрименяетсяУСНПатент;
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Запрос.УстановитьПараметр("СинонимТовары",   НСтр("ru = 'Товары'"));
	Запрос.УстановитьПараметр("Период",          Реквизиты.Период);
	Запрос.УстановитьПараметр("Склад",           Реквизиты.Склад);
	Запрос.УстановитьПараметр("Счета9102",
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПрочиеРасходы));
	Запрос.УстановитьПараметр("ВалютаРеглУчета", ВалютаРеглУчета);
	
	Запрос.УстановитьПараметр("ДеятельностьНаПатенте",           Реквизиты.ДеятельностьНаПатенте);
	Запрос.УстановитьПараметр("ДеятельностьНаТорговомСборе",     Реквизиты.ДеятельностьНаТорговомСборе);
	Запрос.УстановитьПараметр("РозничнаяТорговляОблагаетсяЕНВД", Реквизиты.РозничнаяТорговляОблагаетсяЕНВД);
	Запрос.УстановитьПараметр("ПрименяетсяУСНПатент",            Реквизиты.ПрименяетсяУСНПатент);
	Запрос.УстановитьПараметр("ПрименяетсяУСН",                  Реквизиты.ПрименяетсяУСН);
	Запрос.УстановитьПараметр("ПлательщикНДФЛ",                  Реквизиты.ПлательщикНДФЛ);
	Запрос.УстановитьПараметр("УчетПоПродажнойСтоимости",        Реквизиты.УчетПоПродажнойСтоимости);

	Запрос.УстановитьПараметр("ЕстьОплатаПлатежнойКартойНТТ", ЕстьОплатаПлатежнойКартойНТТ(Реквизиты));
	Запрос.УстановитьПараметр("ЕстьБезналичнаяОплатаАТТ",     Реквизиты.ЕстьБезналичнаяОплатаАТТ);
	
	НомераТаблиц = Новый Структура;
	
	Если Реквизиты.РасчетыВВалюте Тогда
		ПодготовитьТаблицыДокументаРасчетыВВалюте(Запрос, Реквизиты);
	Иначе
		Запрос.Текст = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц);
		Результат    = Запрос.ВыполнитьПакет();
	КонецЕсли;
	
	НомераТаблиц = Новый Структура;

	Запрос.Текст = ТекстЗапросаСписаниеТоваров(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаРеализация(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаРеализацияУслуг(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПереоценкаТоваровВРознице(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаТоварыНДС(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаРаспределениеВыручки(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаБезналичнаяОплата(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаПодарочныеСертификаты(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаРегистрацияОтложенныхРасчетовСКонтрагентами(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		+ ТекстЗапросаРегистрацияОтложенныхРасчетовВПоследовательности(НомераТаблиц, ПараметрыПроведения, Реквизиты)
		;

	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда
		Результат = Запрос.ВыполнитьПакет();
		Для Каждого КлючИЗначение Из НомераТаблиц Цикл
			ПараметрыПроведения.Вставить(КлючИЗначение.Ключ, Результат[КлючИЗначение.Значение].Выгрузить());
		КонецЦикла;
	КонецЕсли;

	Возврат ПараметрыПроведения;

КонецФункции

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаСоставДокумента", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", 		 НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", 						 НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МАКСИМУМ(СоставДокумента.ЕстьТовары) КАК ЕстьТовары,
	|	МАКСИМУМ(СоставДокумента.ЕстьТоварыКомитентов) КАК ЕстьТоварыКомитентов,
	|	МАКСИМУМ(СоставДокумента.ЕстьАгентскиеУслуги) КАК ЕстьАгентскиеУслуги,
	|	МАКСИМУМ(СоставДокумента.ЕстьБезналичнаяОплатаАТТ) КАК ЕстьБезналичнаяОплатаАТТ,
	|	МАКСИМУМ(СоставДокумента.ЕстьПодарочныеСертификаты) КАК ЕстьПодарочныеСертификаты
	|ПОМЕСТИТЬ СоставДокумента
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ИСТИНА КАК ЕстьТовары,
	|		ЛОЖЬ КАК ЕстьТоварыКомитентов,
	|		ЛОЖЬ КАК ЕстьАгентскиеУслуги,
	|		ЛОЖЬ КАК ЕстьБезналичнаяОплатаАТТ,
	|		ЛОЖЬ КАК ЕстьПодарочныеСертификаты
	|	ИЗ
	|		Документ.ОтчетОРозничныхПродажах.Товары КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.ОтчетОРозничныхПродажах.Товары КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|		И ЕСТЬNULL(ТаблицаДокумента.СчетУчета.Забалансовый, ЛОЖЬ)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.ОтчетОРозничныхПродажах.АгентскиеУслуги КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.ОтчетОРозничныхПродажах.Оплата КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка
	|		И ТаблицаДокумента.СуммаОплаты > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ВЫБОР
	|			КОГДА ТаблицаДокумента.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|	ИЗ
	|		Документ.ОтчетОРозничныхПродажах.ПодарочныеСертификаты КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.Ссылка = &Ссылка) КАК СоставДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка,
	|	Реквизиты.Дата,
	|	Реквизиты.ВидОперации,
	|	Реквизиты.Организация,
	|	Реквизиты.ВалютаДокумента,
	|	Реквизиты.Склад,
	|	Реквизиты.Склад.ТипСклада КАК ТипСклада,
	|	Реквизиты.Склад.НоменклатурнаяГруппа КАК НоменклатурнаяГруппаВыручки,
	|	Реквизиты.СуммаВключаетНДС,
	|	Реквизиты.Патент,
	|	Реквизиты.ДеятельностьНаПатенте,
	|	Реквизиты.ДеятельностьНаТорговомСборе,
	|	Реквизиты.ПодразделениеОрганизации,
	|	Реквизиты.СчетКасса,
	|	Реквизиты.СтатьяДвиженияДенежныхСредств
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.ВидОперации,
	|	Реквизиты.Организация,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	Реквизиты.ПодразделениеОрганизации КАК КорПодразделениеОрганизации,
	|	Реквизиты.ВалютаДокумента,
	|	Реквизиты.Склад,
	|	Реквизиты.ТипСклада,
	|	Реквизиты.НоменклатурнаяГруппаВыручки,
	|	Реквизиты.Ссылка,
	|	Реквизиты.СуммаВключаетНДС,
	|	Реквизиты.Патент,
	|	Реквизиты.ДеятельностьНаПатенте,
	|	Реквизиты.ДеятельностьНаТорговомСборе,
	|	Реквизиты.ПодразделениеОрганизации,
	|	Реквизиты.СчетКасса,
	|	Реквизиты.СтатьяДвиженияДенежныхСредств,
	|	""Реализация"" КАК ТипСписания,
	|	Реквизиты.Ссылка КАК ДокументРеализации,
	|	НЕОПРЕДЕЛЕНО КАК Контрагент,
	|	ВЫРАЗИТЬ(""Реализация товаров в розницу"" КАК СТРОКА(150)) КАК Содержание,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.Автоматически) КАК СпособЗачетаАвансов,
	|	""Поступление"" КАК НаправлениеДвижения,
	|	ЛОЖЬ КАК ЭтоВозврат,
	|	ЛОЖЬ КАК РасчетыВУсловныхЕдиницах,
	|	ЛОЖЬ КАК УчитыватьЗадолженностьУСН,
	|	ЛОЖЬ КАК УчитыватьЗадолженностьУСНПатент,
	|	ЕСТЬNULL(СоставДокумента.ЕстьТовары, ЛОЖЬ) КАК ЕстьТовары,
	|	ЕСТЬNULL(СоставДокумента.ЕстьТоварыКомитентов, ЛОЖЬ) КАК ЕстьТоварыКомитентов,
	|	ЕСТЬNULL(СоставДокумента.ЕстьАгентскиеУслуги, ЛОЖЬ) КАК ЕстьАгентскиеУслуги,
	|	ЕСТЬNULL(СоставДокумента.ЕстьБезналичнаяОплатаАТТ, ЛОЖЬ) КАК ЕстьБезналичнаяОплатаАТТ,
	|	ЕСТЬNULL(СоставДокумента.ЕстьПодарочныеСертификаты, ЛОЖЬ) КАК ЕстьПодарочныеСертификаты,
	|	ЗНАЧЕНИЕ(Справочник.КодыОперацийРаздела7ДекларацииПоНДС.ПустаяСсылка) КАК КодОперацииПоСделке
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ СоставДокумента КАК СоставДокумента
	|		ПО (ИСТИНА)";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц)

	НомераТаблиц.Вставить("ВременнаяТаблицаТовары",              НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаАгентскиеУслуги",     НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаОплата",              НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаПродажаСертификатов", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка,
	|	ТаблицаТовары.НомерСтроки,
	|	ТаблицаТовары.Номенклатура,
	|	ЕСТЬNULL(ТаблицаТовары.Номенклатура.Услуга, ЛОЖЬ) КАК ЭтоУслуга,
	|	ТаблицаТовары.Количество,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Ссылка.СуммаВключаетНДС
	|			ТОГДА ТаблицаТовары.Сумма
	|		ИНАЧЕ ТаблицаТовары.Сумма + ТаблицаТовары.СуммаНДС
	|	КОНЕЦ КАК СуммаВзаиморасчетов,
	|	ТаблицаТовары.СуммаНДС КАК СуммаНДСВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Ссылка.СуммаВключаетНДС
	|			ТОГДА ТаблицаТовары.Сумма
	|		ИНАЧЕ ТаблицаТовары.Сумма + ТаблицаТовары.СуммаНДС
	|	КОНЕЦ КАК СуммаРуб,
	|	ТаблицаТовары.СуммаНДС КАК СуммаНДСРуб,
	|	ТаблицаТовары.СтавкаНДС,
	|	ТаблицаТовары.НомерГТД,
	|	ТаблицаТовары.СтранаПроисхождения,
	|	ТаблицаТовары.СчетУчета,
	|	ЕСТЬNULL(ТаблицаТовары.СчетУчета.Забалансовый, ЛОЖЬ) КАК ЭтоКомиссия,
	|	ТаблицаТовары.СчетУчетаНДСПоРеализации,
	|	ТаблицаТовары.СчетДоходов,
	|	ВЫБОР
	|		КОГДА СчетаЕНВД.Счет ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоЕНВД,
	|	ТаблицаТовары.СчетРасходов,
	|	ТаблицаТовары.Субконто,
	|	ТаблицаТовары.ДокументОприходования,
	|	ТаблицаТовары.Себестоимость,
	|	СправочникНоменклатура.КодРаздел7ДекларацииНДС,
	|	ЕСТЬNULL(КодыОперацийРаздела7ДекларацииПоНДС.ОперацияНеПодлежитНалогообложению, ЛОЖЬ) КАК КодСоответствуетСт149НКРФ,
	|	ЕСТЬNULL(КодыОперацийРаздела7ДекларацииПоНДС.ВключаетсяВРеестрПодтверждающихДокументов, ЛОЖЬ) КАК КодВключаетсяВРеестр
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Товары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаДоходовИРасходовЕНВД КАК СчетаЕНВД
	|		ПО ТаблицаТовары.СчетДоходов = СчетаЕНВД.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КодыОперацийРаздела7ДекларацииПоНДС КАК КодыОперацийРаздела7ДекларацииПоНДС
	|			ПО СправочникНоменклатура.КодРаздел7ДекларацииНДС = КодыОперацийРаздела7ДекларацииПоНДС.Ссылка
	|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ &ЭтоОтложенноеПроведение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаАгентскиеУслуги.Ссылка,
	|	ТаблицаАгентскиеУслуги.НомерСтроки,
	|	ТаблицаАгентскиеУслуги.Номенклатура,
	|	ТаблицаАгентскиеУслуги.Количество,
	|	ВЫБОР
	|		КОГДА ТаблицаАгентскиеУслуги.Ссылка.СуммаВключаетНДС
	|			ТОГДА ТаблицаАгентскиеУслуги.Сумма
	|		ИНАЧЕ ТаблицаАгентскиеУслуги.Сумма + ТаблицаАгентскиеУслуги.СуммаНДС
	|	КОНЕЦ КАК СуммаВзаиморасчетов,
	|	ТаблицаАгентскиеУслуги.СуммаНДС КАК СуммаНДСВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА ТаблицаАгентскиеУслуги.Ссылка.СуммаВключаетНДС
	|			ТОГДА ТаблицаАгентскиеУслуги.Сумма
	|		ИНАЧЕ ТаблицаАгентскиеУслуги.Сумма + ТаблицаАгентскиеУслуги.СуммаНДС
	|	КОНЕЦ КАК СуммаРуб,
	|	ТаблицаАгентскиеУслуги.СуммаНДС КАК СуммаНДСРуб,
	|	ТаблицаАгентскиеУслуги.СтавкаНДС,
	|	ТаблицаАгентскиеУслуги.Контрагент,
	|	ТаблицаАгентскиеУслуги.ДоговорКонтрагента,
	|	ТаблицаАгентскиеУслуги.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	ТаблицаАгентскиеУслуги.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ТаблицаАгентскиеУслуги.СчетРасчетов,
	|	ЗНАЧЕНИЕ(Справочник.КодыОперацийРаздела7ДекларацииПоНДС.ПустаяСсылка) КАК КодРаздел7ДекларацииНДС,
	|	ЛОЖЬ КАК КодСоответствуетСт149НКРФ,
	|	ЛОЖЬ КАК КодВключаетсяВРеестр
	|ПОМЕСТИТЬ ТаблицаАгентскиеУслуги
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.АгентскиеУслуги КАК ТаблицаАгентскиеУслуги
	|ГДЕ
	|	ТаблицаАгентскиеУслуги.Ссылка = &Ссылка
	|	И НЕ &ЭтоОтложенноеПроведение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОплата.Ссылка,
	|	ТаблицаОплата.НомерСтроки,
	|	ТаблицаОплата.ВидОплаты.ТипОплаты КАК ТипОплаты,
	|	ТаблицаОплата.СуммаОплаты,
	|	ВЫРАЗИТЬ(ТаблицаОплата.СуммаОплаты * &КоэффициентРуб КАК ЧИСЛО(15, 2)) КАК СуммаОплатыРуб,
	|	ТаблицаОплата.ВидОплаты.Контрагент КАК Контрагент,
	|	ТаблицаОплата.ВидОплаты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ТаблицаОплата.ВидОплаты.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	ТаблицаОплата.ВидОплаты.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ТаблицаОплата.ВидОплаты.СчетУчетаРасчетов КАК СчетУчетаРасчетов
	|ПОМЕСТИТЬ ТаблицаОплата
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Оплата КАК ТаблицаОплата
	|ГДЕ
	|	ТаблицаОплата.Ссылка = &Ссылка
	|	И (НЕ &ЭтоОтложенноеПроведение
	|			ИЛИ ТаблицаОплата.ВидОплаты.ДоговорКонтрагента = &ДоговорДляОтложенногоПроведения)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПодарочныеСертификаты.Ссылка,
	|	МИНИМУМ(ТаблицаПодарочныеСертификаты.НомерСтроки) КАК НомерСтроки,
	|	СУММА(ВЫРАЗИТЬ(ТаблицаПодарочныеСертификаты.Сумма * &КоэффициентРуб КАК ЧИСЛО(15, 2))) КАК СуммаРуб,
	|	ТаблицаПодарочныеСертификаты.ВидОплаты.ТипОплаты КАК ТипОплаты,
	|	ТаблицаПодарочныеСертификаты.ВидОплаты.Контрагент КАК Контрагент,
	|	ТаблицаПодарочныеСертификаты.ВидОплаты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ТаблицаПодарочныеСертификаты.ВидОплаты.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	ТаблицаПодарочныеСертификаты.ВидОплаты.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ТаблицаПодарочныеСертификаты.ВидОплаты.СчетУчетаРасчетов КАК СчетУчетаРасчетов,
	|	ТаблицаПодарочныеСертификаты.ВидОплаты.СчетУчетаРасчетов КАК СчетУчетаАвансов
	|ПОМЕСТИТЬ ТаблицаПродажаСертификатов
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.ПодарочныеСертификаты КАК ТаблицаПодарочныеСертификаты
	|ГДЕ
	|	ТаблицаПодарочныеСертификаты.Ссылка = &Ссылка
	|	И (НЕ &ЭтоОтложенноеПроведение
	|			ИЛИ ТаблицаПодарочныеСертификаты.ВидОплаты.ДоговорКонтрагента = &ДоговорДляОтложенногоПроведения)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПодарочныеСертификаты.Ссылка,
	|	ТаблицаПодарочныеСертификаты.ВидОплаты.ТипОплаты,
	|	ТаблицаПодарочныеСертификаты.ВидОплаты.Контрагент,
	|	ТаблицаПодарочныеСертификаты.ВидОплаты.ДоговорКонтрагента,
	|	ТаблицаПодарочныеСертификаты.ВидОплаты.СчетУчетаРасчетов,
	|	ТаблицаПодарочныеСертификаты.ВидОплаты.ДоговорКонтрагента.ВидДоговора,
	|	ТаблицаПодарочныеСертификаты.ВидОплаты.ДоговорКонтрагента.ВалютаВзаиморасчетов,
	|	ТаблицаПодарочныеСертификаты.ВидОплаты.СчетУчетаРасчетов";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Процедура ПодготовитьТаблицыДокументаРасчетыВВалюте(Запрос, Реквизиты)
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаВременныеТаблицыДокументаРасчетыВВалюте(НомераТаблиц, Реквизиты);
	Результат    = Запрос.ВыполнитьПакет();
	
	ТекстЗапроса = "";
	Если Реквизиты.ЕстьТовары Тогда
		СуммыТаблицыТовары = Результат[НомераТаблиц["СуммыТаблицыТовары"]].Выгрузить();
		УчетВзаиморасчетов.ПодготовитьТаблицуДокументаРасчетыВВалюте(СуммыТаблицыТовары, Реквизиты);
		Запрос.УстановитьПараметр("СуммыТаблицыТовары", СуммыТаблицыТовары);
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаРасчетыВВалютеТовары();
	КонецЕсли;
	Если Реквизиты.ЕстьАгентскиеУслуги Тогда
		СуммыТаблицыАгентскиеУслуги = Результат[НомераТаблиц["СуммыТаблицыАгентскиеУслуги"]].Выгрузить();
		УчетВзаиморасчетов.ПодготовитьТаблицуДокументаРасчетыВВалюте(СуммыТаблицыАгентскиеУслуги, Реквизиты);
		Запрос.УстановитьПараметр("СуммыТаблицыАгентскиеУслуги", СуммыТаблицыАгентскиеУслуги);
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаРасчетыВВалютеАгентскиеУслуги();
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда 
		Запрос.Текст = ТекстЗапроса;
		Результат    = Запрос.ВыполнитьПакет();
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаВременныеТаблицыДокументаРасчетыВВалюте(НомераТаблиц, Реквизиты);
	СхемаЗапроса = Новый СхемаЗапроса;
	
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц));
	
	Для каждого ПакетЗапросов Из СхемаЗапроса.ПакетЗапросов Цикл
		Если Реквизиты.ЕстьТовары 
			И ПакетЗапросов.ТаблицаДляПомещения = "ТаблицаТовары"  Тогда
			
			ПакетЗапросов.ТаблицаДляПомещения = "ВременнаяТаблицаТовары";
			ПакетЗапросов.Индекс.Добавить("НомерСтроки");
			
		ИначеЕсли Реквизиты.ЕстьАгентскиеУслуги 
			И ПакетЗапросов.ТаблицаДляПомещения = "ТаблицаАгентскиеУслуги" Тогда
			
			ПакетЗапросов.ТаблицаДляПомещения = "ВременнаяТаблицаАгентскиеУслуги";
			ПакетЗапросов.Индекс.Добавить("НомерСтроки");
			
		КонецЕсли;
	КонецЦикла;
	
	Если Реквизиты.ЕстьТовары Тогда
		НомераТаблиц.Вставить("СуммыТаблицыТовары", НомераТаблиц.Количество());
		
		ЗапросВыбора = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
		ЗапросВыбора.УстановитьТекстЗапроса(
		"ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.НомерСтроки,
		|	ВременнаяТаблицаТовары.СтавкаНДС,
		|	ВременнаяТаблицаТовары.СуммаВзаиморасчетов,
		|	ВременнаяТаблицаТовары.СуммаНДСВзаиморасчетов,
		|	ВременнаяТаблицаТовары.СуммаРуб,
		|	ВременнаяТаблицаТовары.СуммаНДСРуб,
		|	ВременнаяТаблицаТовары.КодРаздел7ДекларацииНДС,
		|	ВременнаяТаблицаТовары.КодСоответствуетСт149НКРФ,
		|	ВременнаяТаблицаТовары.КодВключаетсяВРеестр
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары");
	КонецЕсли;
	
	Если Реквизиты.ЕстьАгентскиеУслуги Тогда
		НомераТаблиц.Вставить("СуммыТаблицыАгентскиеУслуги", НомераТаблиц.Количество());
		
		ЗапросВыбора = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
		ЗапросВыбора.УстановитьТекстЗапроса(
		"ВЫБРАТЬ
		|	ВременнаяТаблицаАгентскиеУслуги.НомерСтроки,
		|	ВременнаяТаблицаАгентскиеУслуги.СтавкаНДС,
		|	ВременнаяТаблицаАгентскиеУслуги.СуммаВзаиморасчетов,
		|	ВременнаяТаблицаАгентскиеУслуги.СуммаНДСВзаиморасчетов,
		|	ВременнаяТаблицаАгентскиеУслуги.СуммаРуб,
		|	ВременнаяТаблицаАгентскиеУслуги.СуммаНДСРуб,
		|	ВременнаяТаблицаАгентскиеУслуги.КодРаздел7ДекларацииНДС,
		|	ВременнаяТаблицаАгентскиеУслуги.КодСоответствуетСт149НКРФ,
		|	ВременнаяТаблицаАгентскиеУслуги.КодВключаетсяВРеестр
		|ИЗ
		|	ВременнаяТаблицаАгентскиеУслуги КАК ВременнаяТаблицаАгентскиеУслуги");
	КонецЕсли; 
	
	Возврат СхемаЗапроса.ПолучитьТекстЗапроса();
КонецФункции

Функция ТекстЗапросаРасчетыВВалютеТовары()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СуммыТаблицыТовары.НомерСтроки КАК НомерСтроки,
	|	СуммыТаблицыТовары.СуммаВзаиморасчетов,
	|	СуммыТаблицыТовары.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыТовары.СуммаРуб,
	|	СуммыТаблицыТовары.СуммаНДСРуб
	|ПОМЕСТИТЬ СуммыТаблицыТовары
	|ИЗ
	|	&СуммыТаблицыТовары КАК СуммыТаблицыТовары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.Ссылка,
	|	ВременнаяТаблицаТовары.НомерСтроки,
	|	ВременнаяТаблицаТовары.Номенклатура,
	|	ВременнаяТаблицаТовары.ЭтоУслуга,
	|	ВременнаяТаблицаТовары.Количество,
	|	СуммыТаблицыТовары.СуммаВзаиморасчетов,
	|	СуммыТаблицыТовары.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыТовары.СуммаРуб,
	|	СуммыТаблицыТовары.СуммаНДСРуб,
	|	ВременнаяТаблицаТовары.СтавкаНДС,
	|	ВременнаяТаблицаТовары.НомерГТД,
	|	ВременнаяТаблицаТовары.СтранаПроисхождения,
	|	ВременнаяТаблицаТовары.СчетУчета,
	|	ВременнаяТаблицаТовары.ЭтоКомиссия,
	|	ВременнаяТаблицаТовары.СчетУчетаНДСПоРеализации,
	|	ВременнаяТаблицаТовары.СчетДоходов,
	|	ВременнаяТаблицаТовары.ЭтоЕНВД,
	|	ВременнаяТаблицаТовары.СчетРасходов,
	|	ВременнаяТаблицаТовары.Субконто,
	|	ВременнаяТаблицаТовары.ДокументОприходования,
	|	ВременнаяТаблицаТовары.Себестоимость,
	|	ВременнаяТаблицаТовары.КодРаздел7ДекларацииНДС,
	|	ВременнаяТаблицаТовары.КодСоответствуетСт149НКРФ,
	|	ВременнаяТаблицаТовары.КодВключаетсяВРеестр
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммыТаблицыТовары КАК СуммыТаблицыТовары
	|		ПО ВременнаяТаблицаТовары.НомерСтроки = СуммыТаблицыТовары.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

Функция ТекстЗапросаРасчетыВВалютеАгентскиеУслуги()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СуммыТаблицыАгентскиеУслуги.НомерСтроки КАК НомерСтроки,
	|	СуммыТаблицыАгентскиеУслуги.СуммаВзаиморасчетов,
	|	СуммыТаблицыАгентскиеУслуги.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыАгентскиеУслуги.СуммаРуб,
	|	СуммыТаблицыАгентскиеУслуги.СуммаНДСРуб
	|ПОМЕСТИТЬ СуммыТаблицыАгентскиеУслуги
	|ИЗ
	|	&СуммыТаблицыАгентскиеУслуги КАК СуммыТаблицыАгентскиеУслуги
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаАгентскиеУслуги.Ссылка,
	|	ВременнаяТаблицаАгентскиеУслуги.НомерСтроки,
	|	ВременнаяТаблицаАгентскиеУслуги.Номенклатура,
	|	ВременнаяТаблицаАгентскиеУслуги.Количество,
	|	СуммыТаблицыАгентскиеУслуги.СуммаВзаиморасчетов,
	|	СуммыТаблицыАгентскиеУслуги.СуммаНДСВзаиморасчетов,
	|	СуммыТаблицыАгентскиеУслуги.СуммаРуб,
	|	СуммыТаблицыАгентскиеУслуги.СуммаНДСРуб,
	|	ВременнаяТаблицаАгентскиеУслуги.СтавкаНДС,
	|	ВременнаяТаблицаАгентскиеУслуги.Контрагент,
	|	ВременнаяТаблицаАгентскиеУслуги.ДоговорКонтрагента,
	|	ВременнаяТаблицаАгентскиеУслуги.ВалютаВзаиморасчетов,
	|	ВременнаяТаблицаАгентскиеУслуги.СчетРасчетов,
	|	ВременнаяТаблицаАгентскиеУслуги.КодРаздел7ДекларацииНДС,
	|	ВременнаяТаблицаАгентскиеУслуги.КодСоответствуетСт149НКРФ,
	|	ВременнаяТаблицаАгентскиеУслуги.КодВключаетсяВРеестр
	|ПОМЕСТИТЬ ТаблицаАгентскиеУслуги
	|ИЗ
	|	ВременнаяТаблицаАгентскиеУслуги КАК ВременнаяТаблицаАгентскиеУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммыТаблицыАгентскиеУслуги КАК СуммыТаблицыАгентскиеУслуги
	|		ПО ВременнаяТаблицаАгентскиеУслуги.НомерСтроки = СуммыТаблицыАгентскиеУслуги.НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

Функция ТекстЗапросаСписаниеТоваров(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если НЕ Реквизиты.ЕстьТовары Тогда
		ПараметрыПроведения.Вставить("Товары", Неопределено);
		Возврат "";
	КонецЕсли;
	
	// Товары для списания партий
	НомераТаблиц.Вставить("Товары", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""Товары"" КАК ИмяСписка,
	|	&СинонимТовары КАК СинонимСписка,
	|	Реквизиты.Дата КАК Период,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.СчетУчета,
	|	ТаблицаТовары.Номенклатура,
	|	Реквизиты.Склад КАК Склад,
	|	ТаблицаТовары.ДокументОприходования КАК ДокументОприходования,
	|	ТаблицаТовары.Себестоимость,
	|	ТаблицаТовары.Количество,
	|	Реквизиты.ПодразделениеОрганизации КАК КорПодразделение,
	|	НЕОПРЕДЕЛЕНО КАК Комитент,
	|	НЕОПРЕДЕЛЕНО КАК ДоговорКомиссии,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетАвансовСКомитентом,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетРасчетовСКомитентом,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаРасчетовСКомитентом,
	|	0 КАК СуммаРасчетовСКомитентом,
	|	ТаблицаТовары.СчетРасходов КАК КорСчетСписания,
	|	ТаблицаТовары.Субконто КАК КорСубконто1,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконто2,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
	|	1 КАК ВидКорСубконто1,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконто2,
	|	НЕОПРЕДЕЛЕНО КАК ВидКорСубконто3
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	НЕ ТаблицаТовары.ЭтоУслуга
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИмяСписка,
	|	НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции
 
Функция ТекстЗапросаРеализация(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если НЕ Реквизиты.ЕстьТовары И НЕ Реквизиты.ЕстьАгентскиеУслуги Тогда
		ПараметрыПроведения.Вставить("Реализация", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("Реализация", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""Товары"" КАК ИмяСписка,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	Реквизиты.ВалютаДокумента КАК ВалютаВзаиморасчетов,
	|	ТаблицаТовары.СуммаРуб КАК СуммаРуб,
	|	ТаблицаТовары.СуммаНДСРуб КАК СуммаНДСРуб,
	|	ТаблицаТовары.СуммаРуб КАК СуммаБУ,
	|	ТаблицаТовары.СуммаРуб КАК СуммаНУ,
	|	ТаблицаТовары.СчетДоходов КАК СчетДоходов,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.ЭтоУслуга
	|			ТОГДА ТаблицаТовары.СчетРасходов
	|		ИНАЧЕ ТаблицаТовары.СчетУчета
	|	КОНЕЦ КАК СчетУчета,
	|	ТаблицаТовары.Субконто КАК Субконто,
	|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаТовары.СчетУчетаНДСПоРеализации КАК СчетУчетаНДСПоРеализации,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Покупатель,
	|	ВЫБОР
	|		КОГДА &ЕстьБезналичнаяОплатаАТТ ИЛИ &ЕстьОплатаПлатежнойКартойНТТ
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСРозничнымиПокупателями)
	|		ИНАЧЕ Реквизиты.СчетКасса
	|	КОНЕЦ КАК КорСчет,
	|	ВЫБОР
	|		КОГДА &ЕстьБезналичнаяОплатаАТТ ИЛИ &ЕстьОплатаПлатежнойКартойНТТ
	|			ТОГДА Реквизиты.Склад
	|		ИНАЧЕ Реквизиты.СтатьяДвиженияДенежныхСредств
	|	КОНЕЦ КАК КорСубконто1,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконто2,
	|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
	|	ТаблицаТовары.ЭтоКомиссия КАК ЭтоКомиссия,
	|	ТаблицаТовары.ЭтоУслуга КАК ЭтоУслуга,
	|	ИСТИНА КАК ЭтоНесырьевойТовар,
	|	НЕОПРЕДЕЛЕНО КАК Комитент,
	|	НЕОПРЕДЕЛЕНО КАК ДоговорКомиссии,
	|	Реквизиты.Ссылка КАК ДокументРасчетовСКомитентом,
	|	Реквизиты.Дата КАК ДатаРеализации,
	|	НЕОПРЕДЕЛЕНО КАК СчетРасчетовСКомитентом,
	|	НЕОПРЕДЕЛЕНО КАК СчетАвансовСКомитентом,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаРасчетовСКомитентом,
	|	0 КАК СуммаРасчетовСКомитентом,
	|	0 КАК СуммаПоступленияОтКомитента,
	|	ВЫБОР КОГДА ТаблицаТовары.ЭтоЕНВД ТОГДА ЗНАЧЕНИЕ(Справочник.КодыОперацийРаздела7ДекларацииПоНДС.ПустаяСсылка) ИНАЧЕ ТаблицаТовары.КодРаздел7ДекларацииНДС КОНЕЦ КАК КодРаздел7ДекларацииНДС,
	|	ВЫБОР КОГДА ТаблицаТовары.ЭтоЕНВД ТОГДА ЛОЖЬ ИНАЧЕ ТаблицаТовары.КодСоответствуетСт149НКРФ КОНЕЦ КАК КодСоответствуетСт149НКРФ,
	|	ВЫБОР КОГДА ТаблицаТовары.ЭтоЕНВД ТОГДА ЛОЖЬ ИНАЧЕ ТаблицаТовары.КодВключаетсяВРеестр КОНЕЦ КАК КодВключаетсяВРеестр
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""АгентскиеУслуги"",
	|	ТаблицаАгентскиеУслуги.НомерСтроки,
	|	ТаблицаАгентскиеУслуги.Номенклатура,
	|	ТаблицаАгентскиеУслуги.Количество,
	|	ТаблицаАгентскиеУслуги.СуммаВзаиморасчетов,
	|	Реквизиты.ВалютаДокумента,
	|	ТаблицаАгентскиеУслуги.СуммаРуб,
	|	ТаблицаАгентскиеУслуги.СуммаНДСРуб,
	|	ТаблицаАгентскиеУслуги.СуммаРуб,
	|	ТаблицаАгентскиеУслуги.СуммаРуб,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка),
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	ТаблицаАгентскиеУслуги.СтавкаНДС,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка),
	|	Реквизиты.ПодразделениеОрганизации,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка),
	|	ВЫБОР
	|		КОГДА &ЕстьБезналичнаяОплатаАТТ ИЛИ &ЕстьОплатаПлатежнойКартойНТТ
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСРозничнымиПокупателями)
	|		ИНАЧЕ Реквизиты.СчетКасса
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ЕстьБезналичнаяОплатаАТТ ИЛИ &ЕстьОплатаПлатежнойКартойНТТ
	|			ТОГДА Реквизиты.Склад
	|		ИНАЧЕ Реквизиты.СтатьяДвиженияДенежныхСредств
	|	КОНЕЦ,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	ИСТИНА,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	ТаблицаАгентскиеУслуги.Контрагент,
	|	ТаблицаАгентскиеУслуги.ДоговорКонтрагента,
	|	Реквизиты.Ссылка,
	|	Реквизиты.Дата,
	|	ТаблицаАгентскиеУслуги.СчетРасчетов,
	|	ТаблицаАгентскиеУслуги.СчетРасчетов,
	|	ТаблицаАгентскиеУслуги.ВалютаВзаиморасчетов,
	|	0,
	|	0,
	|	ТаблицаАгентскиеУслуги.КодРаздел7ДекларацииНДС КАК КодРаздел7ДекларацииНДС,
	|	ТаблицаАгентскиеУслуги.КодСоответствуетСт149НКРФ КАК КодСоответствуетСт149НКРФ,
	|	ТаблицаАгентскиеУслуги.КодВключаетсяВРеестр КАК КодВключаетсяВРеестр
	|ИЗ
	|	ТаблицаАгентскиеУслуги КАК ТаблицаАгентскиеУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИмяСписка,
	|	НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаРеализацияУслуг(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	Если НЕ Реквизиты.ЕстьТовары Тогда
		ПараметрыПроведения.Вставить("ТаблицаРеализацияУслуг", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ТаблицаРеализацияУслуг", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаУслуги.СчетРасходов КАК СчетРасходов,
	|	ТаблицаУслуги.Субконто КАК НоменклатурнаяГруппа,
	|	СУММА(ТаблицаУслуги.СуммаРуб - ТаблицаУслуги.СуммаНДСРуб) КАК Сумма
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаУслуги
	|ГДЕ
	|	ТаблицаУслуги.ЭтоУслуга
	|	И НЕ ТаблицаУслуги.СчетРасходов В (&Счета9102)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаУслуги.СчетРасходов,
	|	ТаблицаУслуги.Субконто";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаПереоценкаТоваровВРознице(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если НЕ Реквизиты.ЕстьТовары
		ИЛИ НЕ Реквизиты.УчетПоПродажнойСтоимости Тогда
		ПараметрыПроведения.Вставить("Переоценка", Неопределено);
		Возврат "";
	КонецЕсли;
	
	// Товары для переоценки при учете по продажным ценам
	НомераТаблиц.Вставить("Переоценка", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""Товары"" КАК ИмяСписка,
	|	&СинонимТовары КАК СинонимСписка,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.СчетУчета,
	|	ТаблицаТовары.Номенклатура,
	|	Реквизиты.Склад,
	|	Реквизиты.ТипСклада,
	|	ТаблицаТовары.Количество,
	|	ТаблицаТовары.СчетРасходов КАК КорСчетСписания,
	|	ТаблицаТовары.Субконто КАК КорСубконтоСписания1,
	|	ТаблицаТовары.СуммаРуб КАК Сумма
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	НЕ ТаблицаТовары.ЭтоУслуга
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИмяСписка,
	|	НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаТоварыНДС(НомераТаблиц, ПараметрыПроведения, Реквизиты)
	
	ТекстЗапроса = "";
	
	Если НЕ Реквизиты.ЕстьТовары
	 ИЛИ (НЕ Реквизиты.ПлательщикНДС
	 И НЕ Реквизиты.ВедетсяУчетНДСПоФЗ134) Тогда
		ПараметрыПроведения.Вставить("ТоварыНДС", Неопределено);
	Иначе
		НомераТаблиц.Вставить("ТоварыНДС", НомераТаблиц.Количество());
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	""Товары"" КАК ИмяСписка,
		|	&СинонимТовары КАК СинонимСписка,
		|	ТаблицаТовары.НомерСтроки КАК НомерСтрокиДокумента,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.СтавкаНДС,
		|	ТаблицаТовары.СчетУчета,
		|	ТаблицаТовары.НомерГТД,
		|	ТаблицаТовары.СтранаПроисхождения,
		|	ТаблицаТовары.Количество
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|ГДЕ
		|	НЕ ТаблицаТовары.ЭтоКомиссия
		|	И НЕ ТаблицаТовары.ЭтоУслуга
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтрокиДокумента"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если НЕ Реквизиты.ЕстьТоварыКомитентов Тогда
		ПараметрыПроведения.Вставить("НДСТоварыНаКомиссииРеализация", Неопределено);
	Иначе
		НомераТаблиц.Вставить("НДСТоварыНаКомиссииРеализация", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса
		+ "ВЫБРАТЬ
		|	""Товары"" КАК ИмяСписка,
		|	&СинонимТовары КАК СинонимСписка,
		|	ТаблицаТовары.НомерСтроки КАК НомерСтрокиДокумента,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.СтавкаНДС,
		|	ТаблицаТовары.СчетУчета,
		|	ТаблицаТовары.НомерГТД,
		|	ТаблицаТовары.СтранаПроисхождения,
		|	ТаблицаТовары.Количество
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.ЭтоКомиссия
		|	И НЕ ТаблицаТовары.ЭтоУслуга
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтрокиДокумента"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаРаспределениеВыручки(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если (Реквизиты.ВидОперации <> Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах
		Или (Не Реквизиты.ЕстьТовары И Не Реквизиты.ЕстьАгентскиеУслуги И Не Реквизиты.ЕстьПодарочныеСертификаты))
			И Не Реквизиты.ЕстьБезналичнаяОплатаАТТ Тогда
		ПараметрыПроведения.Вставить("РеквизитыВыручки", Неопределено);
		ПараметрыПроведения.Вставить("Выручка",          Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ВременнаяТаблицаВыручки", 			НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаСчетаУчетаВНТТ", 	НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаОплатаНаличными", 	НомераТаблиц.Количество());

	НомераТаблиц.Вставить("РеквизитыВыручки", 	НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Выручка", 			НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицыДокумента.Ссылка,
	|	ТаблицыДокумента.СтавкаНДС,
	|	СУММА(ТаблицыДокумента.СуммаРуб) КАК СуммаРуб,
	|	СУММА(ТаблицыДокумента.СуммаНДСРуб) КАК СуммаНДСРуб
	|ПОМЕСТИТЬ ТаблицаВыручки
	|ИЗ
	|	(ВЫБРАТЬ
	|		Реквизиты.Ссылка КАК Ссылка,
	|		ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|		ТаблицаТовары.СуммаРуб КАК СуммаРуб,
	|		ТаблицаТовары.СуммаНДСРуб КАК СуммаНДСРуб
	|	ИЗ
	|		ТаблицаТовары КАК ТаблицаТовары
	|			ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|			ПО (ИСТИНА)
	|	ГДЕ
	|		Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Реквизиты.Ссылка,
	|		ТаблицаАгентскиеУслуги.СтавкаНДС,
	|		ТаблицаАгентскиеУслуги.СуммаРуб,
	|		ТаблицаАгентскиеУслуги.СуммаНДСРуб
	|	ИЗ
	|		ТаблицаАгентскиеУслуги КАК ТаблицаАгентскиеУслуги
	|			ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|			ПО (ИСТИНА)
	|	ГДЕ
	|		Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах)) КАК ТаблицыДокумента
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицыДокумента.Ссылка,
	|	ТаблицыДокумента.СтавкаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПорядокНалогообложенияТорговыхТочек.Склад КАК ТорговаяТочка,
	|	ВЫБОР
	|		КОГДА ПорядокНалогообложенияТорговыхТочек.ОсобыйПорядокНалогообложения
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыручкаЕНВД)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыручкаНеЕНВД)
	|	КОНЕЦ КАК СчетДоходовОтРеализации,
	|	ВЫБОР
	|		КОГДА ПорядокНалогообложенияТорговыхТочек.ОсобыйПорядокНалогообложения
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродажЕНВД)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД)
	|	КОНЕЦ КАК СчетРасходовОтРеализации
	|ПОМЕСТИТЬ ТаблицаСчетаУчетаВНТТ
	|ИЗ
	|	РегистрСведений.ПорядокНалогообложенияТорговыхТочек.СрезПоследних(&Период, Склад = &Склад) КАК ПорядокНалогообложенияТорговыхТочек
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПорядокНалогообложенияТорговыхТочек.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОплатаНаличными.Ссылка,
	|	СУММА(ТаблицаОплатаНаличными.СуммаРуб) КАК СуммаРуб
	|ПОМЕСТИТЬ ТаблицаОплатаНаличными
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаВыручки.Ссылка КАК Ссылка,
	|		ТаблицаВыручки.СуммаРуб КАК СуммаРуб
	|	ИЗ
	|		ТаблицаВыручки КАК ТаблицаВыручки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаОплата.Ссылка,
	|		-1 * ТаблицаОплата.СуммаОплатыРуб
	|	ИЗ
	|		ТаблицаОплата КАК ТаблицаОплата) КАК ТаблицаОплатаНаличными
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОплатаНаличными.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТаблицаОплатаНаличными.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА &ЕстьОплатаПлатежнойКартойНТТ
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСРозничнымиПокупателями)
	|		ИНАЧЕ Реквизиты.СчетКасса
	|	КОНЕЦ КАК СчетУчетаДенежныхСредств,
	|	Реквизиты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	Реквизиты.Склад КАК Склад,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	Реквизиты.НоменклатурнаяГруппаВыручки,
	|	ВЫБОР
	|		КОГДА ТаблицаСчетаУчетаВНТТ.СчетДоходовОтРеализации ЕСТЬ НЕ NULL 
	|				И ТаблицаСчетаУчетаВНТТ.СчетДоходовОтРеализации <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|			ТОГДА ТаблицаСчетаУчетаВНТТ.СчетДоходовОтРеализации
	|		КОГДА &РозничнаяТорговляОблагаетсяЕНВД
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыручкаЕНВД)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыручкаНеЕНВД)
	|	КОНЕЦ КАК СчетДоходов,
	|	ВЫБОР
	|		КОГДА ТаблицаСчетаУчетаВНТТ.СчетРасходовОтРеализации ЕСТЬ НЕ NULL 
	|				И ТаблицаСчетаУчетаВНТТ.СчетРасходовОтРеализации <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|			ТОГДА ТаблицаСчетаУчетаВНТТ.СчетРасходовОтРеализации
	|		КОГДА &РозничнаяТорговляОблагаетсяЕНВД
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродажЕНВД)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД)
	|	КОНЕЦ КАК СчетРасходов,
	|	ТаблицаОплатаНаличными.СуммаРуб КАК СуммаОплатыНаличными,
	|	&ПрименяетсяУСН,
	|	&ПрименяетсяУСНПатент
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСчетаУчетаВНТТ КАК ТаблицаСчетаУчетаВНТТ
	|		ПО Реквизиты.Склад = ТаблицаСчетаУчетаВНТТ.ТорговаяТочка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОплатаНаличными КАК ТаблицаОплатаНаличными
	|		ПО Реквизиты.Ссылка = ТаблицаОплатаНаличными.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВыручки.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаВыручки.СуммаРуб КАК СуммаРуб,
	|	ТаблицаВыручки.СуммаНДСРуб КАК СуммаНДСРуб
	|ИЗ
	|	ТаблицаВыручки КАК ТаблицаВыручки
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтавкаНДС";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаБезналичнаяОплата(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	ТекстЗапроса = "";
	Если Не Реквизиты.ЕстьТовары И Не Реквизиты.ЕстьАгентскиеУслуги И Не Реквизиты.ЕстьПодарочныеСертификаты Тогда
		ПараметрыПроведения.Вставить("ВыручкаДляРаспределенияОплаты", 		Неопределено);
		ПараметрыПроведения.Вставить("ВыручкаДляРаспределенияОплатыУСН", 	Неопределено);
		ПараметрыПроведения.Вставить("ВыручкаДляРаспределенияОплатыИП", 	Неопределено);
	Иначе
		НомераТаблиц.Вставить("ВТ_ВыручкаДляРаспределенияОплаты", НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ВыручкаДляРаспределенияОплатыУСН", НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ВыручкаДляРаспределенияОплатыИП", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ТаблицыДокумента.Контрагент КАК Контрагент,
		|	ТаблицыДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицыДокумента.ТипОплаты КАК ТипОплаты,
		|	СУММА(ТаблицыДокумента.СуммаРуб) КАК СуммаРуб,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ ТаблицыДокумента.ЭтоКомиссия
		|					И НЕ &ДеятельностьНаПатенте
		|					И (НЕ ТаблицыДокумента.ЭтоТовар
		|						ИЛИ НЕ &ДеятельностьНаТорговомСборе)
		|					И ТаблицыДокумента.ЭтоЕНВД
		|				ТОГДА ТаблицыДокумента.СуммаРуб
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаРубЕНВД,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ ТаблицыДокумента.ЭтоСертификат
		|					И НЕ ТаблицыДокумента.ЭтоКомиссия
		|					И &ДеятельностьНаПатенте
		|					И НЕ &ДеятельностьНаТорговомСборе
		|				ТОГДА ТаблицыДокумента.СуммаРуб
		|			КОГДА ТаблицыДокумента.ЭтоСертификат
		|					И НЕ ТаблицыДокумента.ЭтоКомиссия
		|					И &ПрименяетсяУСНПатент
		|					И НЕ &ПрименяетсяУСН
		|					И &ДеятельностьНаПатенте
		|				ТОГДА ТаблицыДокумента.СуммаРуб
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаРубПатент,
		|	СУММА(ВЫБОР
		|			КОГДА ТаблицыДокумента.ЭтоКомиссия
		|				ТОГДА ТаблицыДокумента.СуммаРуб
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаРубКомитента,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ ТаблицыДокумента.ЭтоКомиссия
		|					И (ТаблицыДокумента.ЭтоТовар
		|						ИЛИ ТаблицыДокумента.ЭтоСертификат)
		|					И НЕ &ДеятельностьНаПатенте
		|					И &ДеятельностьНаТорговомСборе
		|				ТОГДА ТаблицыДокумента.СуммаРуб
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаРубТорговыйСбор
		|ПОМЕСТИТЬ ВТ_ВыручкаДляРаспределенияОплаты
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
		|		ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК ДоговорКонтрагента,
		|		ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПустаяСсылка) КАК ТипОплаты,
		|		ТаблицаТовары.ЭтоЕНВД КАК ЭтоЕНВД,
		|		ТаблицаТовары.ЭтоКомиссия КАК ЭтоКомиссия,
		|		НЕ ТаблицаТовары.ЭтоУслуга КАК ЭтоТовар,
		|		ЛОЖЬ КАК ЭтоСертификат,
		|		ТаблицаТовары.СуммаРуб КАК СуммаРуб
		|	ИЗ
		|		ТаблицаТовары КАК ТаблицаТовары
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
		|		ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК ДоговорКонтрагента,
		|		ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПустаяСсылка) КАК ТипОплаты,
		|		ЛОЖЬ,
		|		ИСТИНА,
		|		ЛОЖЬ,
		|		ЛОЖЬ,
		|		ТаблицаАгентскиеУслуги.СуммаРуб
		|	ИЗ
		|		ТаблицаАгентскиеУслуги КАК ТаблицаАгентскиеУслуги
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА ТаблицаПродажаСертификатов.ТипОплаты <> ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПодарочныйСертификатСторонний)
		|				ТОГДА ТаблицаПродажаСертификатов.Контрагент
		|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ТаблицаПродажаСертификатов.ТипОплаты <> ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПодарочныйСертификатСторонний)
		|				ТОГДА ТаблицаПродажаСертификатов.ДоговорКонтрагента
		|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|		КОНЕЦ,
		|		ТаблицаПродажаСертификатов.ТипОплаты,
		|		ЛОЖЬ,
		|		ВЫБОР
		|			КОГДА ТаблицаПродажаСертификатов.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПодарочныйСертификатСторонний)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ,
		|		ЛОЖЬ,
		|		ИСТИНА,
		|		ТаблицаПродажаСертификатов.СуммаРуб
		|	ИЗ
		|		ТаблицаПродажаСертификатов КАК ТаблицаПродажаСертификатов) КАК ТаблицыДокумента
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицыДокумента.Контрагент,
		|	ТаблицыДокумента.ДоговорКонтрагента,
		|	ТаблицыДокумента.ТипОплаты
		|;
		|
		|ВЫБРАТЬ
		|	ВТ_ВыручкаДляРаспределенияОплаты.Контрагент,
		|	ВТ_ВыручкаДляРаспределенияОплаты.ДоговорКонтрагента,
		|	ВТ_ВыручкаДляРаспределенияОплаты.ТипОплаты,
		|	ВТ_ВыручкаДляРаспределенияОплаты.СуммаРуб,
		|	ВТ_ВыручкаДляРаспределенияОплаты.СуммаРубЕНВД,
		|	ВТ_ВыручкаДляРаспределенияОплаты.СуммаРубПатент,
		|	ВТ_ВыручкаДляРаспределенияОплаты.СуммаРубКомитента,
		|	ВТ_ВыручкаДляРаспределенияОплаты.СуммаРубТорговыйСбор
		|ИЗ
		|	ВТ_ВыручкаДляРаспределенияОплаты
		|;
		|
		|ВЫБРАТЬ
		|	СУММА(ВТ_ВыручкаДляРаспределенияОплаты.СуммаРуб) КАК СуммаРуб,
		|	СУММА(ВТ_ВыручкаДляРаспределенияОплаты.СуммаРубЕНВД) КАК СуммаРубЕНВД,
		|	СУММА(ВТ_ВыручкаДляРаспределенияОплаты.СуммаРубПатент) КАК СуммаРубПатент,
		|	СУММА(ВТ_ВыручкаДляРаспределенияОплаты.СуммаРубКомитента) КАК СуммаРубКомитента,
		|	СУММА(ВТ_ВыручкаДляРаспределенияОплаты.СуммаРубТорговыйСбор) КАК СуммаРубТорговыйСбор
		|ИЗ
		|	ВТ_ВыручкаДляРаспределенияОплаты
		|"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	КонецЕсли;
	
	Если Не Реквизиты.ЕстьБезналичнаяОплатаАТТ Тогда
		ПараметрыПроведения.Вставить("БезналичныеОплаты", Неопределено);
		ПараметрыПроведения.Вставить("РеквизитыБезналичныхОплат", Неопределено);
	Иначе
		НомераТаблиц.Вставить("БезналичныеОплаты", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса
		+ "ВЫБРАТЬ
		|	МИНИМУМ(ТаблицаОплата.НомерСтроки) КАК НомерСтроки,
		|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
		|	ТаблицаОплата.Контрагент КАК Контрагент,
		|	ТаблицаОплата.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ВЫРАЗИТЬ(ТаблицаОплата.ДоговорКонтрагента КАК Справочник.ДоговорыКонтрагентов).ВидДоговора КАК ВидДоговора,
		|	ТаблицаОплата.ТипОплаты КАК ТипОплаты,
		|	&ВалютаРеглУчета КАК ВалютаВзаиморасчетов,
		|	ЛОЖЬ КАК РасчетыВУсловныхЕдиницах,
		|	ЛОЖЬ КАК РасчетыВВалюте,
		|	ЛОЖЬ КАК УчетАгентскогоНДС,
		|	ВЫБОР
		|		КОГДА ТаблицаОплата.ТипОплаты В (ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПодарочныйСертификатСобственный), ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПодарочныйСертификатСторонний))
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.Автоматически)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.НеЗачитывать)
		|	КОНЕЦ КАК СпособЗачетаАвансов,
		|	ТаблицаОплата.Ссылка КАК ДокументРасчетов,
		|	ТаблицаОплата.СчетУчетаРасчетов КАК СчетРасчетов,
		|	ТаблицаОплата.СчетУчетаРасчетов КАК СчетАвансов,
		|	ТаблицаОплата.СчетУчетаРасчетов КАК СчетАвансов_ОтгрузкаВУЕ,
		|	НЕОПРЕДЕЛЕНО КАК ПорядокОтраженияАванса,
		|	СУММА(ТаблицаОплата.СуммаОплатыРуб) КАК СуммаВзаиморасчетов,
		|	СУММА(ТаблицаОплата.СуммаОплатыРуб) КАК СуммаРуб,
		|	0 КАК СуммаВзаиморасчетовКомитента,
		|	0 КАК СуммаВзаиморасчетовПатент,
		|	0 КАК СуммаВзаиморасчетовТорговыйСбор,
		|	0 КАК СуммаВзаиморасчетовЕНВД,
		|	0 КАК СуммаБУ_ОтгрузкаВУЕ,
		|	ВЫРАЗИТЬ(""Поступление безналичной оплаты"" КАК СТРОКА(150)) КАК Содержание
		|ИЗ
		|	ТаблицаОплата КАК ТаблицаОплата
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|
		|СГРУППИРОВАТЬ ПО
		|	Реквизиты.ПодразделениеОрганизации,
		|	ТаблицаОплата.Контрагент,
		|	ТаблицаОплата.ДоговорКонтрагента,
		|	ВЫРАЗИТЬ(ТаблицаОплата.ДоговорКонтрагента КАК Справочник.ДоговорыКонтрагентов).ВидДоговора,
		|	ТаблицаОплата.ТипОплаты,
		|	ТаблицаОплата.Ссылка,
		|	ТаблицаОплата.СчетУчетаРасчетов,
		|	ТаблицаОплата.СчетУчетаРасчетов
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
		
		НомераТаблиц.Вставить("РеквизитыБезналичныхОплат", НомераТаблиц.Количество());
		ТекстЗапроса = ТекстЗапроса
		+ "ВЫБРАТЬ
		|	Реквизиты.Ссылка КАК Регистратор,
		|	Реквизиты.Дата КАК Период,
		|	Реквизиты.ВидОперации,
		|	Реквизиты.Организация,
		|	Реквизиты.ВалютаДокумента,
		|	ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.Автоматически) КАК СпособЗачетаАвансов,
		|	""Выбытие"" КАК НаправлениеДвижения,
		|	ЛОЖЬ КАК ЭтоВозврат,
		|	&ПлательщикНДФЛ КАК ПлательщикНДФЛ,
		|	&ПрименяетсяУСН КАК УчитыватьЗадолженностьУСН,
		|	&ПрименяетсяУСНПатент КАК УчитыватьЗадолженностьУСНПатент
		|ИЗ
		|	Реквизиты КАК Реквизиты"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаПодарочныеСертификаты(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	ТекстЗапроса = "";
	Если НЕ Реквизиты.ЕстьПодарочныеСертификаты Тогда
		
		ПараметрыПроведения.Вставить("ВыручкаПоПодарочнымСертификатам", Неопределено);
		
	Иначе
		
		НомераТаблиц.Вставить("ВыручкаПоПодарочнымСертификатам", НомераТаблиц.Количество());
		
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	МИНИМУМ(ТаблицаПродажаСертификатов.НомерСтроки) КАК НомерСтроки,
		|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
		|	ТаблицаПродажаСертификатов.Контрагент КАК Контрагент,
		|	ТаблицаПродажаСертификатов.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаПродажаСертификатов.ВидДоговора КАК ВидДоговора,
		|	ТаблицаПродажаСертификатов.ТипОплаты,
		|	ЛОЖЬ КАК РасчетыВУсловныхЕдиницах,
		|	Реквизиты.ВалютаДокумента КАК ВалютаВзаиморасчетов,
		|	ЛОЖЬ КАК РасчетыВВалюте,
		|	ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияЗадолженности.Автоматически) КАК СпособПогашенияЗадолженности,
		|	ТаблицаПродажаСертификатов.Ссылка КАК ДокументРасчетов,
		|	ТаблицаПродажаСертификатов.СчетУчетаРасчетов КАК СчетРасчетов,
		|	ТаблицаПродажаСертификатов.СчетУчетаАвансов КАК СчетАвансов,
		|	ВЫБОР
		|		КОГДА &ПрименяетсяУСН
		|			ТОГДА ВЫБОР
		|					КОГДА ТаблицаПродажаСертификатов.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПодарочныйСертификатСторонний)
		|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ПорядокОтраженияАвансов.ДоходКомитента)
		|					ИНАЧЕ ВЫБОР
		|							КОГДА &ДеятельностьНаТорговомСборе
		|								ТОГДА ЗНАЧЕНИЕ(Перечисление.ПорядокОтраженияАвансов.ДоходТорговыйСбор)
		|							ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПорядокОтраженияАвансов.ДоходУСН)
		|						КОНЕЦ
		|				КОНЕЦ
		|		КОГДА &ПрименяетсяУСНПатент
		|			ТОГДА ВЫБОР
		|					КОГДА ТаблицаПродажаСертификатов.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПодарочныйСертификатСторонний)
		|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ПорядокОтраженияАвансов.ДоходКомитента)
		|					ИНАЧЕ Реквизиты.Патент
		|				КОНЕЦ
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ПорядокОтраженияАванса,
		|	ВЫБОР
		|		КОГДА &ЕстьБезналичнаяОплатаАТТ
		|				ИЛИ &ЕстьОплатаПлатежнойКартойНТТ
		|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСРозничнымиПокупателями)
		|		ИНАЧЕ Реквизиты.СчетКасса
		|	КОНЕЦ КАК КорСчет,
		|	ВЫБОР
		|		КОГДА &ЕстьБезналичнаяОплатаАТТ
		|				ИЛИ &ЕстьОплатаПлатежнойКартойНТТ
		|			ТОГДА Реквизиты.Склад
		|		ИНАЧЕ Реквизиты.СтатьяДвиженияДенежныхСредств
		|	КОНЕЦ КАК КорСубконто1,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто2,
		|	НЕОПРЕДЕЛЕНО КАК КорСубконто3,
		|	Реквизиты.ПодразделениеОрганизации КАК КорПодразделение,
		|	СУММА(ТаблицаПродажаСертификатов.СуммаРуб) КАК СуммаВзаиморасчетов,
		|	СУММА(ТаблицаПродажаСертификатов.СуммаРуб) КАК СуммаРуб,
		|	""Начислен аванс по подарочным сертификатам"" КАК Содержание
		|ИЗ
		|	ТаблицаПродажаСертификатов КАК ТаблицаПродажаСертификатов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ТаблицаПродажаСертификатов.Ссылка = Реквизиты.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	Реквизиты.ПодразделениеОрганизации,
		|	ТаблицаПродажаСертификатов.Контрагент,
		|	ТаблицаПродажаСертификатов.ДоговорКонтрагента,
		|	ТаблицаПродажаСертификатов.ВидДоговора,
		|	Реквизиты.ВалютаДокумента,
		|	ТаблицаПродажаСертификатов.Ссылка,
		|	ТаблицаПродажаСертификатов.СчетУчетаРасчетов,
		|	ТаблицаПродажаСертификатов.СчетУчетаАвансов,
		|	Реквизиты.Склад,
		|	ТаблицаПродажаСертификатов.ТипОплаты,
		|	ВЫБОР
		|		КОГДА &ЕстьБезналичнаяОплатаАТТ
		|				ИЛИ &ЕстьОплатаПлатежнойКартойНТТ
		|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСРозничнымиПокупателями)
		|		ИНАЧЕ Реквизиты.СчетКасса
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА &ЕстьБезналичнаяОплатаАТТ
		|				ИЛИ &ЕстьОплатаПлатежнойКартойНТТ
		|			ТОГДА Реквизиты.Склад
		|		ИНАЧЕ Реквизиты.СтатьяДвиженияДенежныхСредств
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА &ПрименяетсяУСН
		|			ТОГДА ВЫБОР
		|					КОГДА ТаблицаПродажаСертификатов.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПодарочныйСертификатСторонний)
		|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ПорядокОтраженияАвансов.ДоходКомитента)
		|					ИНАЧЕ ВЫБОР
		|							КОГДА &ДеятельностьНаТорговомСборе
		|								ТОГДА ЗНАЧЕНИЕ(Перечисление.ПорядокОтраженияАвансов.ДоходТорговыйСбор)
		|							ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПорядокОтраженияАвансов.ДоходУСН)
		|						КОНЕЦ
		|				КОНЕЦ
		|		КОГДА &ПрименяетсяУСНПатент
		|			ТОГДА ВЫБОР
		|					КОГДА ТаблицаПродажаСертификатов.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПодарочныйСертификатСторонний)
		|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ПорядокОтраженияАвансов.ДоходКомитента)
		|					ИНАЧЕ Реквизиты.Патент
		|				КОНЕЦ
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ,
		|	Реквизиты.ПодразделениеОрганизации
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки"
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

// ОТЛОЖЕННОЕ ПРОВЕДЕНИЕ

Функция ТекстЗапросаРегистрацияОтложенныхРасчетовСКонтрагентами(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	ЕстьРасчетыСКонтрагентами = Реквизиты.ЕстьАгентскиеУслуги
		ИЛИ Реквизиты.ЕстьБезналичнаяОплатаАТТ
		ИЛИ Реквизиты.ЕстьПодарочныеСертификаты;

	Если НЕ ЕстьРасчетыСКонтрагентами
		ИЛИ Реквизиты.ЭтоОтложенноеПроведение
		ИЛИ НЕ ПроведениеСервер.ИспользуетсяОтложенноеПроведение(Реквизиты.Организация, Реквизиты.Период) Тогда
		ПараметрыПроведения.Вставить("РасчетыСКонтрагентамиОтложенноеПроведение", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("РасчетыСКонтрагентамиОтложенноеПроведение", НомераТаблиц.Количество());

	ТекстЗапроса = "";

	Если Реквизиты.ЕстьАгентскиеУслуги Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаАгентскиеУслуги.Контрагент КАК Контрагент,
		|	ТаблицаАгентскиеУслуги.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаАгентскиеУслуги.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ТаблицаАгентскиеУслуги.ВидДоговора КАК ВидДоговора,
		|	Реквизиты.Дата КАК Дата
		|ИЗ
		|	ТаблицаАгентскиеУслуги КАК ТаблицаАгентскиеУслуги
		|	ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ИСТИНА";
	КонецЕсли;
	
	Если Реквизиты.ЕстьБезналичнаяОплатаАТТ Тогда
		Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|"
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаОплата.Контрагент КАК Контрагент,
		|	ТаблицаОплата.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаОплата.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ТаблицаОплата.ВидДоговора КАК ВидДоговора,
		|	Реквизиты.Дата КАК Дата
		|ИЗ
		|	ТаблицаОплата КАК ТаблицаОплата
		|	ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ИСТИНА";
	КонецЕсли;

	Если Реквизиты.ЕстьПодарочныеСертификаты Тогда
		Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|"
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаПродажаСертификатов.Контрагент КАК Контрагент,
		|	ТаблицаПродажаСертификатов.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаПродажаСертификатов.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ТаблицаПродажаСертификатов.ВидДоговора КАК ВидДоговора,
		|	Реквизиты.Дата КАК Дата
		|ИЗ
		|	ТаблицаПродажаСертификатов КАК ТаблицаПродажаСертификатов
		|	ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО ИСТИНА";
	КонецЕсли;
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаРегистрацияОтложенныхРасчетовВПоследовательности(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если Реквизиты.ЭтоОтложенноеПроведение
		ИЛИ НЕ ПроведениеСервер.ИспользуетсяОтложенноеПроведение(Реквизиты.Организация, Реквизиты.Период) Тогда
		ПараметрыПроведения.Вставить("РеквизитыРегистрацияВПоследовательности", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("РеквизитыРегистрацияВПоследовательности", НомераТаблиц.Количество());

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Реквизиты.ВидОперации
	|ИЗ
	|	Реквизиты КАК Реквизиты";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Процедура ЗарегистрироватьОтложенныеРасчетыВПоследовательности(Объект, ПараметрыПроведения, ТаблицаСписанныеТовары, Отказ) Экспорт

	// Отчет о розничных продажах в НТТ используется данные об остатках забалансовых счетов РВ, 
	// поэтому всегда проводится в хронологической последовательности.
	
	ОбязательноРегистрироватьВПоследовательности = Истина;
	
	Параметры = ПодготовитьПараметрыЗарегистрироватьОтложенныеРасчетыВПоследовательности(
		ПараметрыПроведения.РеквизитыРегистрацияВПоследовательности);
	
	Если Параметры.Реквизиты.Количество() > 0 Тогда

		// Если параметры проведения для регистрации в последовательности заполнены, то анализируем их, 
		// иначе безусловно регистрируем в последовательности.
		Реквизиты = Параметры.Реквизиты[0];
		
		Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах Тогда
			ОбязательноРегистрироватьВПоследовательности = Ложь;
		КонецЕсли;
		
	КонецЕсли;

	Если ОбязательноРегистрироватьВПоследовательности Тогда
		РаботаСПоследовательностями.ЗарегистрироватьВПоследовательности(Объект, Отказ, Ложь);
	Иначе
		РаботаСПоследовательностями.ЗарегистрироватьОтложенныеРасчетыВПоследовательности(
			Объект,
			Отказ,
			ПараметрыПроведения.РасчетыСКонтрагентамиОтложенноеПроведение,
			ТаблицаСписанныеТовары,
			Перечисления.ВидыРегламентныхОпераций.РасчетДолейСписанияКосвенныхРасходов);
	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыЗарегистрироватьОтложенныеРасчетыВПоследовательности(ТаблицаРеквизиты)

	Параметры = Новый Структура;
	
	СписокОбязательныхКолонок = ""
	+ "ВидОперации"                   // <Перечисление.ВидыОперацийОтчетОРозничныхПродажах> - вид операции документа
	;

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура ОбработкаОтложенногоПроведения(Параметры, Отказ) Экспорт
	
	// Отложенное проведение отчета о розничных продажах поддерживается при одновременном выполнении следующих условий:
	//	- способ оценки товаров в рознице по стоимости приобретения
	//	- склад типа АТТ
	//	- для УСН дополнительно не поддерживаются эквайринговые операции
	
	ПараметрыПроведения = ПодготовитьПараметрыПроведения(
		Параметры.Регистратор,
		Отказ,
		Параметры.ДоговорКонтрагента);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	

	// Таблица проданных подарочных сертификатов с зачетом принятых ранее в оплату
	ПроданныеСертификатыВзаиморасчеты = УчетВзаиморасчетовОтложенноеПроведение.ПодготовитьТаблицуВзаиморасчетовПогашениеЗадолженности(
		Параметры,
		ПараметрыПроведения.ВыручкаПоПодарочнымСертификатам,
		ПараметрыПроведения.Реквизиты,
		Отказ);
	
	// В безналичной оплате учтем взаиморасчеты по проданным ранее подарочным сертификатам
	БезналичныеОплатыВзаиморасчеты = УчетВзаиморасчетовОтложенноеПроведение.ПодготовитьТаблицуВзаиморасчетовБезналичнаяРозничнаяВыручка(
		Параметры,	
		ПараметрыПроведения.БезналичныеОплаты,
		ПараметрыПроведения.РеквизитыБезналичныхОплат,
		Отказ);

	ТаблицыРаспределеннойВыручки = ПодготовитьТаблицыРаспределенияВыручкиПоОплатам(
		ПараметрыПроведения.ВыручкаДляРаспределенияОплатыУСН,
		БезналичныеОплатыВзаиморасчеты,
		ПроданныеСертификатыВзаиморасчеты,
		ПараметрыПроведения.Реквизиты,
		Отказ,
		Истина);
	
	ТаблицаБезналичныеОплаты    = ТаблицыРаспределеннойВыручки.БезналичныеОплаты;
	ТаблицаПроданныеСертификаты = ТаблицыРаспределеннойВыручки.ПроданныеСертификаты;
	ТаблицаВыручкаУСН           = ТаблицыРаспределеннойВыручки.ТаблицаВыручка;

	// Структура таблиц для отражения в налоговом учете УСН
	СтруктураТаблицУСН = Новый Структура();
	СтруктураТаблицУСН.Вставить("ПроданныеСертификаты",     ТаблицаПроданныеСертификаты); // АТТ
	СтруктураТаблицУСН.Вставить("БезналичныеОплаты",        ТаблицаБезналичныеОплаты);    // АТТ
	СтруктураТаблицУСН.Вставить("ТаблицаВыручка",           ТаблицаВыручкаУСН);           // АТТ

	// Для движений по Хозрасчетному используем таблицы, отобранные только по актуализируемому договору.
	// Для движений по УСН используем полные данные, отбор по актуализируемому договору
	// будет выполнен в процедурах модуля НалоговыйУчетУСН.
	// При этом наличная оплата в ходе отложенного проведения не изменяется, поэтому ее не передаем.
	ТаблицаПроданныеСертификатыХозрасчетный = УчетВзаиморасчетовОтложенноеПроведение.СкопироватьСтрокиТаблицыПоДоговору(
		ТаблицаПроданныеСертификаты,
		Параметры.ДоговорКонтрагента);
		
	ТаблицаБезналичныеОплатыХозрасчетный = УчетВзаиморасчетовОтложенноеПроведение.СкопироватьСтрокиТаблицыПоДоговору(
		ТаблицаБезналичныеОплаты,
		Параметры.ДоговорКонтрагента);
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	УчетВзаиморасчетовОтложенноеПроведение.СформироватьДвиженияПогашениеЗадолженности(
		Параметры,
		ТаблицаПроданныеСертификатыХозрасчетный,
		ПараметрыПроведения.Реквизиты,
		Отказ);

	УчетВзаиморасчетовОтложенноеПроведение.СформироватьДвиженияПоступленияОтРозничныхПокупателей(
		Параметры,
		ТаблицаБезналичныеОплатыХозрасчетный,
		Неопределено,
		ПараметрыПроведения.Реквизиты, 
		Отказ);

	СформироватьДвиженияУСНОтложенноеПроведение(Параметры, СтруктураТаблицУСН);

КонецПроцедуры

Процедура СформироватьДвиженияУСНОтложенноеПроведение(Параметры, СтруктураТаблицУСН)

	// Если в документе используется одновременно и продажа и оплата собственных подарочных сертификатов,
	// то движения УСН необходимо переформировывать полностью, т.к. возможно изменение выручки
	// на величину "зачета" между такими сертификатами, операции по которым проведены одним днем.
	// Эта информация становится известна после получения остатков взаиморасчетов.
	
	Если НЕ УчетВзаиморасчетовОтложенноеПроведение.ПрименяетсяУСН(Параметры)
		И НЕ УчетВзаиморасчетовОтложенноеПроведение.ПрименяетсяУСНПатент(Параметры) Тогда
		Возврат;
	КонецЕсли;

	ОтборПроданныеСертификаты = Новый Структура();
	ОтборПроданныеСертификаты.Вставить("Контрагент", 			Параметры.Контрагент);
	ОтборПроданныеСертификаты.Вставить("ДоговорКонтрагента", 	Параметры.ДоговорКонтрагента);
	
	ОтборБезналичныеОплаты = Новый Структура();
	ОтборБезналичныеОплаты.Вставить("ТипОплаты", 			Перечисления.ТипыОплат.ПодарочныйСертификатСобственный);
	ОтборБезналичныеОплаты.Вставить("Контрагент", 			Параметры.Контрагент);
	ОтборБезналичныеОплаты.Вставить("ДоговорКонтрагента", 	Параметры.ДоговорКонтрагента);
	
	НайденныеСтрокиПроданныеСертификаты = СтруктураТаблицУСН.ПроданныеСертификаты.НайтиСтроки(ОтборПроданныеСертификаты);
	НайденныеСтрокиБезналичныеОплаты	= СтруктураТаблицУСН.БезналичныеОплаты.НайтиСтроки(ОтборБезналичныеОплаты);
	
	Если НайденныеСтрокиПроданныеСертификаты.Количество() > 0
		И НайденныеСтрокиБезналичныеОплаты.Количество() > 0 Тогда
		
		УчетВзаиморасчетовОтложенноеПроведение.ОчиститьДвиженияУСН(Параметры);
		
		ДокументОбъектУСН = УчетВзаиморасчетовОтложенноеПроведение.ДокументОбъектУСН(Параметры);
		
		НалоговыйУчетУСН.СформироватьДвиженияУСН(ДокументОбъектУСН, СтруктураТаблицУСН, Ложь);
		
	Иначе

		УчетВзаиморасчетовОтложенноеПроведение.СформироватьДвиженияУСН(Параметры, СтруктураТаблицУСН);

	КонецЕсли;

КонецПроцедуры

//ИнтеграцияГИСМ
#Область ДействияПриОбменеГИСМ

Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция) Экспорт
	
	НовыйСтатус        = Неопределено;
	ДальнейшееДействие = Неопределено;
	
	ИспользоватьАвтоматическийОбмен = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическуюОтправкуПолучениеДанныхГИСМ");
	
	Если Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаДанных Тогда
		НовыйСтатус = Перечисления.СтатусыИнформированияГИСМ.КПередаче;
		Если ИспользоватьАвтоматическийОбмен Тогда
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОжидайтеПередачуДанныхРегламентнымЗаданием;
		Иначе
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ВыполнитеОбмен;
		КонецЕсли;
	КонецЕсли;
	
	Если НовыйСтатус = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РегистрыСведений.СтатусыИнформированияГИСМ.ОбновитьСтатус(
		ДокументСсылка,
		НовыйСтатус,
		ДальнейшееДействие);
	
	Возврат НовыйСтатус;
	
КонецФункции

Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	НовыйСтатус     = Неопределено;
	ДальнейшееДействие = Неопределено;
	
	Если Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаДанных Тогда
		
		Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Принято Тогда
			
			НовыйСтатус = Перечисления.СтатусыИнформированияГИСМ.Передано;
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОжидайтеПолучениеКвитанцииОФиксации;
			
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Отклонено
			ИЛИ СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Ошибка Тогда
			
			НовыйСтатус = Перечисления.СтатусыИнформированияГИСМ.ОтклоненоГИСМ;
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанные;
			
		КонецЕсли;
		
	ИначеЕсли Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхПолучениеКвитанции Тогда
		
		Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Принято Тогда
			
			НовыйСтатус = Перечисления.СтатусыИнформированияГИСМ.ПринятоГИСМ;
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.НеТребуется;
			
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Отклонено
			ИЛИ СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Ошибка Тогда
			
			НовыйСтатус = Перечисления.СтатусыИнформированияГИСМ.ОтклоненоГИСМ;
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанные;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НовыйСтатус = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РегистрыСведений.СтатусыИнформированияГИСМ.ОбновитьСтатус(ДокументСсылка, НовыйСтатус, ДальнейшееДействие);
	
	Возврат НовыйСтатус;
	
КонецФункции

#КонецОбласти

#Область СообщенияГИСМ

Функция СообщениеКПередачеXML(ДокументСсылка, Операция) Экспорт
	
	Если Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаДанных Тогда
		Возврат ОтчетОРозничныхПродажахXML(ДокументСсылка);
	ИначеЕсли Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхПолучениеКвитанции Тогда
		Возврат ИнтеграцияГИСМВызовСервера.ЗапросКвитанцииОФиксацииПоСсылкеXML(ДокументСсылка, Перечисления.ОперацииОбменаГИСМ.ПередачаДанных);
	КонецЕсли;
	
КонецФункции

Функция ОтчетОРозничныхПродажахXML(ДокументСсылка) Экспорт
	
	Если ИнтеграцияГИСМ.ИспользоватьВозможностиВерсии("2.41") Тогда
		Возврат ОтчетОРозничныхПродажахXML2_41(ДокументСсылка);
	Иначе
		Возврат ОтчетОРозничныхПродажахXML2_40(ДокументСсылка);
	КонецЕсли;
	
КонецФункции

Функция ОтчетОРозничныхПродажахXML2_40(ДокументСсылка) Экспорт
	
	СообщенияXML = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ГИСМПрисоединенныеФайлы.ВладелецФайла КАК Ссылка,
	|	КОЛИЧЕСТВО(ГИСМПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	Справочник.ГИСМПрисоединенныеФайлы КАК ГИСМПрисоединенныеФайлы
	|ГДЕ
	|	ГИСМПрисоединенныеФайлы.ВладелецФайла = &Ссылка
	|	И ГИСМПрисоединенныеФайлы.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииОбменаГИСМ.ПередачаДанных)
	|	И ГИСМПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыСообщенийГИСМ.Исходящее)
	|
	|СГРУППИРОВАТЬ ПО
	|	ГИСМПрисоединенныеФайлы.ВладелецФайла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетОРозничныхПродажах.Дата КАК Дата,
	|	ЕСТЬNULL(ВременнаяТаблица.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	ОтчетОРозничныхПродажах.Организация КАК Организация,
	|	ОтчетОРозничныхПродажах.ПодразделениеОрганизации КАК Подразделение,
	|	ОтчетОРозничныхПродажах.Номер КАК Номер
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблица КАК ВременнаяТаблица
	|		ПО ОтчетОРозничныхПродажах.Ссылка = ВременнаяТаблица.Ссылка
	|ГДЕ
	|	ОтчетОРозничныхПродажах.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки,
	|	ВЫБОР
	|		КОГДА Товары.Ссылка.СуммаВключаетНДС
	|			ТОГДА Товары.Сумма
	|		ИНАЧЕ Товары.Сумма + Товары.СуммаНДС
	|	КОНЕЦ КАК Стоимость,
	|	Товары.СуммаНДС КАК СуммаНДС,
	|	КонтрольныезнакиГИСМ.Код КАК НомерКиЗ
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтрольныеЗнакиГИСМ КАК КонтрольныезнакиГИСМ
	|		ПО (КонтрольныезнакиГИСМ.Ссылка = Товары.КиЗ_ГИСМ)
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Результат = Запрос.ВыполнитьПакет();
	Шапка = Результат[1].Выбрать();
	Товары = Результат[2].Выгрузить();
	Если Не Шапка.Следующий()
		Или Товары.Количество() = 0 Тогда
		
		СообщениеXML = ИнтеграцияГИСМКлиентСервер.СтруктураСообщенияXML();
		СообщениеXML.Документ = ДокументСсылка;
		СообщениеXML.Описание = СтрШаблон(НСтр("ru = 'Документ %1'"), ДокументСсылка);
		СообщениеXML.ТекстОшибки = НСтр("ru = 'Нет данных для выгрузки.'");
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	РеквизитыОгранизации = ИнтеграцияГИСМВызовСервера.ИННКППGLNОрганизации(Шапка.Организация, Шапка.Подразделение);
	
	СообщениеXML = ИнтеграцияГИСМКлиентСервер.СтруктураСообщенияXML();
	СообщениеXML.Описание = ИнтеграцияГИСМ.ОписаниеОперацииПередачиДанных(
		Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхРозничнаяПродажа, ДокументСсылка, НомерВерсии);
	
	ИмяТипа   = "query";
	ИмяПакета = "retail_sale";
	
	ПередачаДанных = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа);
	
	ОтчетОРозничныхПродажах = ИнтеграцияГИСМ.ОбъектXDTO(ИмяПакета);
	ОтчетОРозничныхПродажах.action_id  = ОтчетОРозничныхПродажах.action_id;
	
	Попытка
		ОтчетОРозничныхПродажах.sender_gln = РеквизитыОгранизации.GLN;
	Исключение
		ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибкиНеЗаполненGLNОрганизации(СообщениеXML, РеквизитыОгранизации.GLN, Шапка.Организация);
	КонецПопытки;
	
	ОтчетОРозничныхПродажах.sales = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(ОтчетОРозничныхПродажах, "sales");
	
	ХранилищеВременныхДат = Новый Соответствие;
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		
		НоваяСтрока = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(ОтчетОРозничныхПродажах.sales, "detail");
		НоваяСтрока.sign_num = СтрокаТЧ.НомерКиЗ;
		НоваяСтрока.cost     = СтрокаТЧ.Стоимость;
		Если ЗначениеЗаполнено(СтрокаТЧ.СуммаНДС) Тогда
			НоваяСтрока.vat_value = СтрокаТЧ.СуммаНДС;
		КонецЕсли;
		
		НоваяСтрока.doc_type   = 4;
		НоваяСтрока.doc_name   = НСтр("ru = 'Отчет о розничных продажах'");
		НоваяСтрока.doc_number = Шапка.Номер;
		
		ИнтеграцияГИСМ.УстановитьДатуСЧасовымПоясом(
			НоваяСтрока,
			"sale_time",
			Шапка.Дата,
			ХранилищеВременныхДат);
		
		ОтчетОРозничныхПродажах.sales.detail.Добавить(НоваяСтрока);
		
	КонецЦикла;
	
	ПередачаДанных.version    = ПередачаДанных.version;
	ПередачаДанных[ИмяПакета] = ОтчетОРозничныхПродажах;
	
	ТекстСообщенияXML = ИнтеграцияГИСМ.ОбъектXDTOВXML(ПередачаДанных, ИмяТипа);
	ТекстСообщенияXML = ИнтеграцияГИСМ.ПреобразоватьВременныеДаты(ХранилищеВременныхДат, ТекстСообщенияXML);
	
	СообщениеXML.ТекстСообщенияXML  = ТекстСообщенияXML;
	СообщениеXML.КонвертSOAP = ИнтеграцияГИСМВызовСервера.ПоместитьТекстСообщенияXMLВКонвертSOAP(ТекстСообщенияXML);
	
	СообщениеXML.ТипСообщения = Перечисления.ТипыСообщенийГИСМ.Исходящее;
	СообщениеXML.Организация  = Шапка.Организация;
	СообщениеXML.Операция     = Перечисления.ОперацииОбменаГИСМ.ПередачаДанных;
	СообщениеXML.Документ     = ДокументСсылка;
	СообщениеXML.Версия       = НомерВерсии;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

Функция ОтчетОРозничныхПродажахXML2_41(ДокументСсылка) Экспорт
	
	СообщенияXML = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ГИСМПрисоединенныеФайлы.ВладелецФайла КАК Ссылка,
	|	КОЛИЧЕСТВО(ГИСМПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	Справочник.ГИСМПрисоединенныеФайлы КАК ГИСМПрисоединенныеФайлы
	|ГДЕ
	|	ГИСМПрисоединенныеФайлы.ВладелецФайла = &Ссылка
	|	И ГИСМПрисоединенныеФайлы.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииОбменаГИСМ.ПередачаДанных)
	|	И ГИСМПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыСообщенийГИСМ.Исходящее)
	|
	|СГРУППИРОВАТЬ ПО
	|	ГИСМПрисоединенныеФайлы.ВладелецФайла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетОРозничныхПродажах.Дата КАК Дата,
	|	ЕСТЬNULL(ВременнаяТаблица.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	ОтчетОРозничныхПродажах.Организация КАК Организация,
	|	ОтчетОРозничныхПродажах.ПодразделениеОрганизации КАК Подразделение,
	|	ОтчетОРозничныхПродажах.Номер КАК Номер
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблица КАК ВременнаяТаблица
	|		ПО ОтчетОРозничныхПродажах.Ссылка = ВременнаяТаблица.Ссылка
	|ГДЕ
	|	ОтчетОРозничныхПродажах.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки,
	|	ВЫБОР
	|		КОГДА Товары.Ссылка.СуммаВключаетНДС
	|			ТОГДА Товары.Сумма
	|		ИНАЧЕ Товары.Сумма + Товары.СуммаНДС
	|	КОНЕЦ КАК Стоимость,
	|	Товары.СуммаНДС КАК СуммаНДС,
	|	КонтрольныезнакиГИСМ.Код КАК НомерКиЗ
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтрольныеЗнакиГИСМ КАК КонтрольныезнакиГИСМ
	|		ПО (КонтрольныезнакиГИСМ.Ссылка = Товары.КиЗ_ГИСМ)
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Результат = Запрос.ВыполнитьПакет();
	Шапка = Результат[1].Выбрать();
	Товары = Результат[2].Выгрузить();
	Если Не Шапка.Следующий()
		Или Товары.Количество() = 0 Тогда
		
		СообщениеXML = ИнтеграцияГИСМКлиентСервер.СтруктураСообщенияXML();
		СообщениеXML.Документ = ДокументСсылка;
		СообщениеXML.Описание = ИнтеграцияГИСМ.ОписаниеОперацииПередачиДанных(
			Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхРозничнаяПродажа, ДокументСсылка);
		СообщениеXML.ТекстОшибки = НСтр("ru = 'Нет данных для выгрузки.'");
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	РеквизитыОгранизации = ИнтеграцияГИСМВызовСервера.ИННКППGLNОрганизации(Шапка.Организация, Шапка.Подразделение);
	
	СообщениеXML = ИнтеграцияГИСМКлиентСервер.СтруктураСообщенияXML();
	СообщениеXML.Описание = ИнтеграцияГИСМ.ОписаниеОперацииПередачиДанных(
		Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхРозничнаяПродажа, ДокументСсылка, НомерВерсии);
	
	ИмяТипа   = "query";
	ИмяПакета = "retail_sale";
	
	ПередачаДанных = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа);
	
	ОтчетОРозничныхПродажах = ИнтеграцияГИСМ.ОбъектXDTO(ИмяПакета);
	ОтчетОРозничныхПродажах.action_id  = ОтчетОРозничныхПродажах.action_id;
	
	Попытка
		ОтчетОРозничныхПродажах.sender_gln = РеквизитыОгранизации.GLN;
	Исключение
		ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибкиНеЗаполненGLNОрганизации(СообщениеXML, РеквизитыОгранизации.GLN, Шапка.Организация);
	КонецПопытки;
	
	ОтчетОРозничныхПродажах.sales = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(ОтчетОРозничныхПродажах, "sales");
	
	ХранилищеВременныхДат = Новый Соответствие;
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		
		НоваяСтрока = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(ОтчетОРозничныхПродажах.sales, "detail");
		
		НоваяСтрока.sign_num   = СтрокаТЧ.НомерКиЗ;
		НоваяСтрока.cost       = СтрокаТЧ.Стоимость;
		Если ЗначениеЗаполнено(СтрокаТЧ.СуммаНДС) Тогда
			НоваяСтрока.vat_value = СтрокаТЧ.СуммаНДС;
		КонецЕсли;
		НоваяСтрока.sale_time  = Шапка.Дата;
		
		НоваяСтрока.sale_docs = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(НоваяСтрока, "sale_docs");
		doc = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(НоваяСтрока.sale_docs, "doc");
		doc.doc_type   = 1;
		doc.doc_name   = НСтр("ru = 'Чек'");
		doc.doc_number = НСтр("ru = 'б/н'");
		doc.doc_date   = Шапка.Дата;
		НоваяСтрока.sale_docs.doc.Добавить(doc);
		
		ОтчетОРозничныхПродажах.sales.detail.Добавить(НоваяСтрока);
		
	КонецЦикла;
	
	ПередачаДанных.version    = ПередачаДанных.version;
	ПередачаДанных[ИмяПакета] = ОтчетОРозничныхПродажах;
	
	ТекстСообщенияXML = ИнтеграцияГИСМ.ОбъектXDTOВXML(ПередачаДанных, ИмяТипа);
	ТекстСообщенияXML = ИнтеграцияГИСМ.ПреобразоватьВременныеДаты(ХранилищеВременныхДат, ТекстСообщенияXML);
	
	СообщениеXML.ТекстСообщенияXML  = ТекстСообщенияXML;
	СообщениеXML.КонвертSOAP = ИнтеграцияГИСМВызовСервера.ПоместитьТекстСообщенияXMLВКонвертSOAP(ТекстСообщенияXML);
	
	СообщениеXML.ТипСообщения = Перечисления.ТипыСообщенийГИСМ.Исходящее;
	СообщениеXML.Организация  = Шапка.Организация;
	СообщениеXML.Операция     = Перечисления.ОперацииОбменаГИСМ.ПередачаДанных;
	СообщениеXML.Документ     = ДокументСсылка;
	СообщениеXML.Версия       = НомерВерсии;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

#КонецОбласти
//Конец ИнтеграцияГИСМ 

#Область ПроцедурыИФункцииПечати

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Справка-отчет кассира (КМ-6)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ОтчетККМ";
	КомандаПечати.Представление = НСтр("ru = 'Справка-отчет кассира (КМ-6)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	
	Если ПравоДоступа("Использование", Метаданные.Отчеты.РеестрДокументов) Тогда
		// Реестр документов
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "Реестр";
		КомандаПечати.Представление = НСтр("ru = 'Реестр документов'");
		КомандаПечати.ЗаголовокФормы= НСтр("ru = 'Реестр документов ""Отчет о розничных продажах""'");
		КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
		КомандаПечати.СписокФорм    = "ФормаСписка";
		КомандаПечати.Порядок       = 100;
	КонецЕсли;
	
КонецПроцедуры

// Функция формирует табличный документ с печатной формой КМ-6 "Справка-отчет кассира операциониста"
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьОтчетаОПродажахККМ(МассивОбъектов, ОбъектыПечати)
	
	Перем ПодразделениеОтветственныхЛиц;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб         = Истина;
	ТабличныйДокумент.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтчетККМОПродажах_ОтчетККМ";
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтчетОРозничныхПродажах.Номер КАК НомерДокумента,
	|	ОтчетОРозничныхПродажах.Дата КАК ДатаДокумента,
	|	ОтчетОРозничныхПродажах.Организация КАК Руководители,
	|	ОтчетОРозничныхПродажах.Организация,
	|	ОтчетОРозничныхПродажах.Ссылка,
	|	ОтчетОРозничныхПродажах.СуммаДокумента,
	|	ОтчетОРозничныхПродажах.ВалютаДокумента,
	|	ОтчетОРозничныхПродажах.ПодразделениеОрганизации,
	|	ОтчетОРозничныхПродажах.ПодразделениеОрганизации.НаименованиеПолное КАК ПодразделениеПредставление,
	|	ОтчетОРозничныхПродажах.Оплата.(
	|		ЕСТЬNULL(СУММА(ВЫБОР
	|					КОГДА ОтчетОРозничныхПродажах.Оплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПлатежнаяКарта)
	|						ТОГДА ОтчетОРозничныхПродажах.Оплата.СуммаОплаты
	|					ИНАЧЕ 0
	|				КОНЕЦ), 0) КАК ПлатежныеКарты,
	|		ЕСТЬNULL(СУММА(ВЫБОР
	|					КОГДА ОтчетОРозничныхПродажах.Оплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплат.БанковскийКредит)
	|						ТОГДА ОтчетОРозничныхПродажах.Оплата.СуммаОплаты
	|					ИНАЧЕ 0
	|				КОНЕЦ), 0) КАК Кредиты,
	|		ЕСТЬNULL(СУММА(ВЫБОР
	|					КОГДА ОтчетОРозничныхПродажах.Оплата.ВидОплаты.ТипОплаты В (ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПодарочныйСертификатСобственный), ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПодарочныйСертификатСторонний))
	|						ТОГДА ОтчетОРозничныхПродажах.Оплата.СуммаОплаты
	|					ИНАЧЕ 0
	|				КОНЕЦ), 0) КАК ПодарочныеСертификаты
	|	)
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|ГДЕ
	|	ОтчетОРозничныхПродажах.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОтчетОРозничныхПродажах.Дата,
	|	ОтчетОРозничныхПродажах.Ссылка";
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	
	Пока Шапка.Следующий() Цикл
		
		ВыборкаОплата = Шапка.Оплата.Выбрать();
		Если ВыборкаОплата.Следующий() Тогда
			ПлатежныеКарты        = ВыборкаОплата.ПлатежныеКарты;
			Кредиты               = ВыборкаОплата.Кредиты;
			ПодарочныеСертификаты = ВыборкаОплата.ПодарочныеСертификаты;
		Иначе
			ПлатежныеКарты        = 0;
			Кредиты               = 0;
			ПодарочныеСертификаты = 0;
		КонецЕсли;
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ОтчетОРозничныхПродажах.ПФ_MXL_ОтчетККМ");
		
		// Выводим шапку накладной
		СведенияОПокупателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Организация,Шапка.ДатаДокумента);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ОрганизацияПредставление = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе);
		ОбластьМакета.Параметры.ДатаДокумента     = Шапка.ДатаДокумента;
		ОбластьМакета.Параметры.ОрганизацияПоОКПО = СведенияОПокупателе.КодПоОКПО;
		ОбластьМакета.Параметры.ОрганизацияИНН    = СведенияОПокупателе.ИНН;
		ОбластьМакета.Параметры.ПрограммаУчета    = "1С:Предприятие 8";
		ОбластьМакета.Параметры.НомерДокумента    = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.НомерДокумента, Истина, Ложь);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		ОбластьМакета.Параметры.Итого = Шапка.СуммаДокумента - Кредиты - ПлатежныеКарты - ПодарочныеСертификаты;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета.Параметры.Итого = ПлатежныеКарты;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета.Параметры.Итого = ПодарочныеСертификаты;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Итог");
		СуммаИтого    = Шапка.СуммаДокумента - Кредиты;
		ОбластьМакета.Параметры.Итого = СуммаИтого;
		
		ОбластьМакета.Параметры.СуммаВыручкиПрописью = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(
			СуммаИтого - ПлатежныеКарты - ПодарочныеСертификаты,
			Шапка.ВалютаДокумента);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Оборот");
		
		ПодразделениеОтветственныхЛиц = Шапка.ПодразделениеОрганизации;
		
		Руководители = ОтветственныеЛицаБП.ОтветственныеЛица(Шапка.Руководители, Шапка.ДатаДокумента, ПодразделениеОтветственныхЛиц);
		Руководитель = Руководители.РуководительПредставление;
		
		ОбластьМакета.Параметры.ФИОРуководителя       = Руководитель;
		ОбластьМакета.Параметры.ДолжностьРуководителя = Руководители.РуководительДолжностьПредставление;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// В табличном документе зададим имя области, в которую был выведен объект.
		// Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент,
			НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

	// Проверяем, нужно ли для макета ОтчетККМ формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ОтчетККМ") Тогда

		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ОтчетККМ", "Справка-отчет кассира (КМ-6)", 
			ПечатьОтчетаОПродажахККМ(МассивОбъектов, ОбъектыПечати), , "Документ.ОтчетОРозничныхПродажах.ПФ_MXL_ОтчетККМ");

	КонецЕсли;
	
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);	

КонецПроцедуры

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "Склад");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбработкаОбновления

Процедура ОбработатьУдалениеРеквизитовТабличнойЧастиОплата() Экспорт

	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		// В подчиненных узлах РИБ не выполняется, добавленные виды оплаты во всех узлах должны иметь одинаковые ссылки
		Возврат;
	КонецЕсли;
	
	// Найдем строки ТЧ "Оплата" с реквизитами, не совпадающими с данными "Вида оплаты",
	// и попробуем подобрать для них подходящие виды оплаты из существующих.
	// Если среди существующих видов оплат подходящих значений нет - создадим новые и подставим в документы
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВидыОплатОрганизаций.Ссылка КАК Ссылка,
	|	ВидыОплатОрганизаций.Организация,
	|	ВидыОплатОрганизаций.ТипОплаты,
	|	ВидыОплатОрганизаций.Контрагент,
	|	ВидыОплатОрганизаций.ДоговорКонтрагента,
	|	ВидыОплатОрганизаций.СчетУчетаРасчетов,
	|	ВидыОплатОрганизаций.ПроцентБанковскойКомиссии
	|ПОМЕСТИТЬ ВТ_ВидыОплаты
	|ИЗ
	|	Справочник.ВидыОплатОрганизаций КАК ВидыОплатОрганизаций
	|ГДЕ
	|	НЕ ВидыОплатОрганизаций.ЭтоГруппа
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетОРозничныхПродажахОплата.Ссылка КАК ДокументСсылка,
	|	ОтчетОРозничныхПродажахОплата.Ссылка.Дата КАК ДокументДата,
	|	ОтчетОРозничныхПродажахОплата.ВидОплаты КАК ДокументВидОплаты,
	|	ОтчетОРозничныхПродажахОплата.УдалитьКонтрагент КАК ДокументКонтрагент,
	|	ОтчетОРозничныхПродажахОплата.УдалитьДоговорКонтрагента КАК ДокументДоговорКонтрагента,
	|	ОтчетОРозничныхПродажахОплата.УдалитьСчетУчетаРасчетов КАК ДокументСчетУчетаРасчетов,
	|	ОтчетОРозничныхПродажахОплата.НомерСтроки КАК ДокументНомерСтроки,
	|	ОтчетОРозничныхПродажахОплата.Ссылка.Организация КАК ДокументОрганизация,
	|	ВЫБОР
	|		КОГДА ОтчетОРозничныхПродажахОплата.УдалитьКонтрагент <> ВидыОплатыДокумента.Контрагент
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОтличаетсяКонтрагент,
	|	ВЫБОР
	|		КОГДА ОтчетОРозничныхПродажахОплата.УдалитьДоговорКонтрагента <> ВидыОплатыДокумента.ДоговорКонтрагента
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОтличаетсяДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА ОтчетОРозничныхПродажахОплата.УдалитьСчетУчетаРасчетов <> ВидыОплатыДокумента.СчетУчетаРасчетов
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОтличаетсяСчетРасчетов,
	|	ВЫБОР
	|		КОГДА ОтчетОРозничныхПродажахОплата.Ссылка.Организация <> ВидыОплатыДокумента.Организация
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОтличаетсяОрганизация
	|ПОМЕСТИТЬ ВТ_СтрокиСИзмененнойАналитикой
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Оплата КАК ОтчетОРозничныхПродажахОплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВидыОплаты КАК ВидыОплатыДокумента
	|		ПО ОтчетОРозничныхПродажахОплата.ВидОплаты = ВидыОплатыДокумента.Ссылка
	|ГДЕ
	|	ОтчетОРозничныхПродажахОплата.Ссылка.Проведен
	|	И (ОтчетОРозничныхПродажахОплата.УдалитьКонтрагент <> ВидыОплатыДокумента.Контрагент
	|				И ОтчетОРозничныхПродажахОплата.УдалитьКонтрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ИЛИ ОтчетОРозничныхПродажахОплата.УдалитьДоговорКонтрагента <> ВидыОплатыДокумента.ДоговорКонтрагента
	|				И ОтчетОРозничныхПродажахОплата.УдалитьДоговорКонтрагента <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ИЛИ ОтчетОРозничныхПродажахОплата.УдалитьСчетУчетаРасчетов <> ВидыОплатыДокумента.СчетУчетаРасчетов
	|				И ОтчетОРозничныхПродажахОплата.УдалитьСчетУчетаРасчетов <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|			ИЛИ ОтчетОРозничныхПродажахОплата.Ссылка.Организация <> ВидыОплатыДокумента.Организация)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СтрокиСИзмененнойАналитикой.ДокументСсылка КАК ДокументСсылка,
	|	ВТ_СтрокиСИзмененнойАналитикой.ДокументДата КАК ДокументДата,
	|	ВТ_СтрокиСИзмененнойАналитикой.ДокументОрганизация,
	|	ВТ_СтрокиСИзмененнойАналитикой.ДокументНомерСтроки,
	|	ВТ_СтрокиСИзмененнойАналитикой.ДокументВидОплаты,
	|	ВТ_СтрокиСИзмененнойАналитикой.ДокументКонтрагент,
	|	ВТ_СтрокиСИзмененнойАналитикой.ДокументДоговорКонтрагента,
	|	ВТ_СтрокиСИзмененнойАналитикой.ДокументСчетУчетаРасчетов,
	|	ВТ_СтрокиСИзмененнойАналитикой.ОтличаетсяКонтрагент,
	|	ВТ_СтрокиСИзмененнойАналитикой.ОтличаетсяДоговорКонтрагента,
	|	ВТ_СтрокиСИзмененнойАналитикой.ОтличаетсяСчетРасчетов,
	|	ВТ_СтрокиСИзмененнойАналитикой.ОтличаетсяОрганизация,
	|	ЕСТЬNULL(ВидыОплатыДляПоиска.Ссылка, НЕОПРЕДЕЛЕНО) КАК ВидОплатыЗамена
	|ИЗ
	|	ВТ_СтрокиСИзмененнойАналитикой КАК ВТ_СтрокиСИзмененнойАналитикой
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВидыОплаты КАК ВидыОплатыДляПоиска
	|		ПО ВТ_СтрокиСИзмененнойАналитикой.ДокументОрганизация = ВидыОплатыДляПоиска.Организация
	|			И ВТ_СтрокиСИзмененнойАналитикой.ДокументКонтрагент = ВидыОплатыДляПоиска.Контрагент
	|			И ВТ_СтрокиСИзмененнойАналитикой.ДокументДоговорКонтрагента = ВидыОплатыДляПоиска.ДоговорКонтрагента
	|			И ВТ_СтрокиСИзмененнойАналитикой.ДокументСчетУчетаРасчетов = ВидыОплатыДляПоиска.СчетУчетаРасчетов
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументДата УБЫВ,
	|	ДокументСсылка УБЫВ
	|ИТОГИ ПО
	|	ДокументСсылка"
	;
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НовыеВидыОплаты = Новый ТаблицаЗначений;
	НовыеВидыОплаты.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.ВидыОплатОрганизаций"));
	НовыеВидыОплаты.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	НовыеВидыОплаты.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	НовыеВидыОплаты.Колонки.Добавить("ДоговорКонтрагента", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	НовыеВидыОплаты.Колонки.Добавить("СчетУчетаРасчетов", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
	СчетчикКопий = Новый Соответствие;
	
	ВыборкаДокументы = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДокументы.Следующий() Цикл
		
		НачатьТранзакцию();
		
		ДокументОбъект = ВыборкаДокументы.ДокументСсылка.ПолучитьОбъект();
		
		ВыборкаСтроки = ВыборкаДокументы.Выбрать();
		
		Пока ВыборкаСтроки.Следующий() Цикл
			Если ЗначениеЗаполнено(ВыборкаСтроки.ВидОплатыЗамена) Тогда
				ДокументОбъект.Оплата[ВыборкаСтроки.ДокументНомерСтроки - 1].ВидОплаты = ВыборкаСтроки.ВидОплатыЗамена;
			Иначе
				// подбираем вид оплаты из уже созданных; если не найден - создаем новый
				Поиск = Новый Структура;
				Поиск.Вставить("Организация",        ВыборкаСтроки.ДокументОрганизация);
				Поиск.Вставить("Контрагент",         ВыборкаСтроки.ДокументКонтрагент);
				Поиск.Вставить("ДоговорКонтрагента", ВыборкаСтроки.ДокументДоговорКонтрагента);
				Поиск.Вставить("СчетУчетаРасчетов",  ВыборкаСтроки.ДокументСчетУчетаРасчетов);
				
				НайденныеСтроки = НовыеВидыОплаты.НайтиСтроки(Поиск);
				
				Если НайденныеСтроки.Количество() > 0 Тогда
					ДокументОбъект.Оплата[ВыборкаСтроки.ДокументНомерСтроки - 1].ВидОплаты = НайденныеСтроки[0].Ссылка;
				Иначе
					
					НовыйВидОплаты = ВыборкаСтроки.ДокументВидОплаты.Скопировать();
					
					Если ВыборкаСтроки.ОтличаетсяКонтрагент Тогда
						НовыйВидОплаты.Контрагент = ВыборкаСтроки.ДокументКонтрагент;
					КонецЕсли;
					Если ВыборкаСтроки.ОтличаетсяДоговорКонтрагента Тогда
						НовыйВидОплаты.ДоговорКонтрагента = ВыборкаСтроки.ДокументДоговорКонтрагента;
					КонецЕсли;
					Если ВыборкаСтроки.ОтличаетсяСчетРасчетов Тогда
						НовыйВидОплаты.СчетУчетаРасчетов = ВыборкаСтроки.ДокументСчетУчетаРасчетов;
					КонецЕсли;
					Если ВыборкаСтроки.ОтличаетсяОрганизация Тогда
						НовыйВидОплаты.Организация = ВыборкаСтроки.ДокументОрганизация;
					КонецЕсли;
					
					НовыйВидОплаты.УстановитьНовыйКод();
					
					КоличествоКопий = СчетчикКопий[ВыборкаСтроки.ДокументВидОплаты];
					Если КоличествоКопий = Неопределено Тогда
						КоличествоКопий = 1;
					Иначе
						КоличествоКопий = КоличествоКопий + 1;
					КонецЕсли;
					
					СчетчикКопий.Вставить(ВыборкаСтроки.ДокументВидОплаты, КоличествоКопий);
					
					НовыйВидОплаты.Наименование = СокрЛП(НовыйВидОплаты.Наименование)
						+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = ' (копия %1)'"), КоличествоКопий);
					
					// запишем новый вид оплаты
					Попытка
						ОбновлениеИнформационнойБазы.ЗаписатьДанные(НовыйВидОплаты, Истина);
					Исключение
						ТекстСообщения = СтрШаблон(
							НСтр("ru = 'Не удалось создать новый вид оплаты для строки №%1 табличной части ""БезналичныеОплаты""
								|%2'"),
							ВыборкаСтроки.ДокументНомерСтроки,
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
						ЗаписьЖурналаРегистрации(
							ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
							УровеньЖурналаРегистрации.Ошибка, 
							Метаданные.Документы.ОтчетОРозничныхПродажах,
							ВыборкаСтроки.ДокументСсылка, 
							ТекстСообщения);
						ОтменитьТранзакцию();
						ВызватьИсключение;
					КонецПопытки;
					
					ДокументОбъект.Оплата[ВыборкаСтроки.ДокументНомерСтроки - 1].ВидОплаты = НовыйВидОплаты.Ссылка;
					
					// Сохраняем сведения о добавленном виде оплаты для поиска в последующих документах
					НоваяСтрока = НовыеВидыОплаты.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, НовыйВидОплаты);
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		
		// записываем измененный документ
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект, Истина);
		Исключение
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось записать документ при обновлении данных о видах оплаты
					|%1'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка, 
				Метаданные.Документы.ОтчетОРозничныхПродажах,
				ВыборкаДокументы.ДокументСсылка, 
				ТекстСообщения);
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
		ЗафиксироватьТранзакцию();
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетаРасчетовАгентскихУслуг(Объект) Экспорт

	Для Каждого СтрокаТаблицы Из Объект.АгентскиеУслуги Цикл
		Документы.ОтчетОРозничныхПродажах.ЗаполнитьСчетРасчетовВСтрокеАгентскойУслуги(Объект, СтрокаТаблицы);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#КонецОбласти 


#КонецЕсли