#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ Параметры.Свойство("Ключ") Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = НСтр("ru = 'Отчет ""Реестр документов"" может быть вызван только из формы списка документов'");
		СообщениеПользователю.Сообщить();
		
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Параметры.Ключ) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(Список, Параметры.Ключ);
	Иначе
		Список = Параметры.Ключ;
	КонецЕсли;
	
	ВыводитьЗаголовок = Истина;
	ВыводитьПодписи = Истина;
	БухгалтерскиеОтчетыВызовСервера.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	Если Параметры.Свойство("Заголовок") Тогда
		Заголовок = Параметры.Заголовок;
		ИмяСписка = Параметры.Заголовок;
	Иначе
		Заголовок = "Список документов";
		ИмяСписка = "Список документов";
	КонецЕсли;
	
	// Определим из отборов в динамическом списке
	ОтборВСписке = Список.КомпоновщикНастроек.ПолучитьНастройки().Отбор;
	
	Если Параметры.Свойство("Организация") Тогда
		Отчет.Организация = Параметры.Организация;
	Иначе
		МассивЭлементовОтбораОрганизация = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(ОтборВСписке, "Организация");
		ЭлементОтбораОрганизация = ?(МассивЭлементовОтбораОрганизация.Количество() > 0, МассивЭлементовОтбораОрганизация[0], Неопределено);
		Если ЭлементОтбораОрганизация <> Неопределено И ЭлементОтбораОрганизация.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
			Если ЭлементОтбораОрганизация.Использование Тогда
				Отчет.Организация = ЭлементОтбораОрганизация.ПравоеЗначение;
			Иначе
				Отчет.Организация = Справочники.Организации.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Могут существовать отборы, задаваемые через использование параметров произвольного запроса.
	// Установим явное использование отборов вместо параметров.
	Для каждого ПараметрЗапроса Из Список.Параметры.Элементы Цикл
		Если Не ПараметрЗапроса.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяОтбора = Строка(ПараметрЗапроса.Параметр);
		Если Лев(ИмяОтбора, 5) <> "Отбор" Тогда // проверка признака отбора через параметры
			Продолжить;
		КонецЕсли;
		ИмяОтбора = Сред(ИмяОтбора, 6);
				
		ДоступныеОтборы = ОтборВСписке.ДоступныеПоляОтбора.Элементы;
		Если ДоступныеОтборы.Найти(ИмяОтбора) = Неопределено Тогда
			Если ИмяОтбора = "Контрагент" И ДоступныеОтборы.Найти("Информация") <> Неопределено Тогда
				// Учитываем особую ситуацию отбора из журнала документов.
				ИмяОтбораВРеестре = "Информация";
			Иначе
				Продолжить;
			КонецЕсли;
		Иначе
			ИмяОтбораВРеестре = ИмяОтбора;
		КонецЕсли;
		
		Для Каждого ЭлементНастроек Из Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
			
			Если ТипЗнч(ЭлементНастроек) <> Тип("ОтборКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			
			ОтборИзПараметра = ЭлементНастроек.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборИзПараметра.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОтбораВРеестре);
			ОтборИзПараметра.ПравоеЗначение = ПараметрЗапроса.Значение;
			ОтборИзПараметра.Использование  = Истина;
			Прервать;
			
		КонецЦикла;
	
	КонецЦикла; 
	
	МассивЭлементовОтбораПоДате = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(ОтборВСписке, "ДатаОтбора");
	ЭлементОтбораПоДате = ?(МассивЭлементовОтбораПоДате.Количество() > 0, МассивЭлементовОтбораПоДате[0], Неопределено);
	ЕстьОтборПоДате = ЭлементОтбораПоДате <> Неопределено И ЭлементОтбораПоДате.Использование;
	
	Если ЕстьОтборПоДате Тогда
		ДатаОтчета = ОбщегоНазначения.ТекущаяДатаПользователя();
		Если ТипЗнч(ЭлементОтбораПоДате.ПравоеЗначение) = Тип("СтандартнаяДатаНачала") Тогда
			ДатаОтбора = ЭлементОтбораПоДате.ПравоеЗначение.Дата;
		Иначе
			ДатаОтбора = ЭлементОтбораПоДате.ПравоеЗначение;
		КонецЕсли;
		
		Отчет.НачалоПериода = НачалоДня(ДатаОтбора);
		Отчет.КонецПериода  = КонецДня(ДатаОтбора);
		
		Если ЭлементОтбораПоДате.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
			Если НачалоДня(ДатаОтбора) < НачалоДня(ДатаОтчета) Тогда
				Отчет.КонецПериода = КонецМесяца(ДатаОтчета);
			Иначе
				Отчет.КонецПериода = КонецМесяца(ДатаОтбора);
			КонецЕсли;
		ИначеЕсли ЭлементОтбораПоДате.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше Тогда
			Отчет.НачалоПериода = Отчет.КонецПериода + 1;
			Если Отчет.НачалоПериода < НачалоДня(ДатаОтчета) Тогда
				Отчет.КонецПериода = КонецМесяца(ДатаОтчета);
			Иначе
				Отчет.КонецПериода = КонецМесяца(Отчет.НачалоПериода);
			КонецЕсли;
		ИначеЕсли ЭлементОтбораПоДате.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
			Если НачалоДня(ДатаОтбора) > НачалоДня(ДатаОтчета) Тогда
				Отчет.НачалоПериода = НачалоМесяца(ДатаОтчета);
			Иначе
				Отчет.НачалоПериода = НачалоМесяца(ДатаОтбора);
			КонецЕсли;
		ИначеЕсли ЭлементОтбораПоДате.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше Тогда
			Отчет.КонецПериода = Отчет.НачалоПериода - 1;
			Если Отчет.НачалоПериода > НачалоДня(ДатаОтчета) Тогда
				Отчет.НачалоПериода = НачалоМесяца(ДатаОтчета);
			Иначе
				Отчет.НачалоПериода = НачалоМесяца(Отчет.КонецПериода);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Параметры.Свойство("Период") Тогда
		Отчет.НачалоПериода = Параметры.Период.ДатаНачала;
		Отчет.КонецПериода = Параметры.Период.ДатаОкончания;
		
		Если НЕ ЗначениеЗаполнено(Параметры.Период.ДатаНачала)
			И НЕ ЗначениеЗаполнено(Параметры.Период.ДатаОкончания) Тогда
			
			Отчет.НачалоПериода = НачалоМесяца(ОбщегоНазначения.ТекущаяДатаПользователя());
			Отчет.КонецПериода  = КонецМесяца(ОбщегоНазначения.ТекущаяДатаПользователя());
			
		КонецЕсли;
	ИначеЕсли Параметры.Свойство("Дата") Тогда
		Отчет.НачалоПериода = НачалоДня(Параметры.Дата);
		Отчет.КонецПериода  = КонецДня(Параметры.Дата);
	КонецЕсли;
	
	Если Параметры.Свойство("ОтборПоТоварамУслугам") Тогда
		Элементы.ГруппаТоварыУслуги.Видимость = Истина;
		ЕстьОтборПоПервичнымДокументам = Истина;
		ЭтоРеализация = СтрНайти(Список.ОсновнаяТаблица, "Реализация") > 0;
		Если Не ЭтоРеализация Тогда 
			Элементы.ТоварыУслуги.СписокВыбора[1].Представление = "Только поступления товаров";
			Элементы.ТоварыУслуги.СписокВыбора[2].Представление = "Только полученные услуги";
		КонецЕсли;
	Иначе
		ЕстьОтборПоПервичнымДокументам = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	КлючНазначения = "";
	Если ВладелецФормы <> Неопределено Тогда
		
		ПозицияКлючаНазначения = СтрНайти(ВладелецФормы.ИмяФормы, ".", НаправлениеПоиска.СКонца) + 1;
		КлючНазначения = Сред(ВладелецФормы.ИмяФормы, ПозицияКлючаНазначения);
		Если КлючНазначения = "ФормаСписка" Тогда
			// Стандартная форма с пустым ключом.
			КлючНазначения = "";
		КонецЕсли;
		
	КонецЕсли;
	
	ИнициализироватьОтчет(КлючНазначения);	
	ПодключитьОбработчикОжидания("ФормированиеРеестраВФонеПриОткрытии", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Модифицированность   = Ложь;
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
	ОчиститьСвязанныеОтборы();
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатПриАктивизацииОбласти(Элемент)
	Если ТипЗнч(Результат.ВыделенныеОбласти) = Тип("ВыделенныеОбластиТабличногоДокумента") Тогда
		ИнтервалОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.2);
		ПодключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый", ИнтервалОжидания, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СКомментариемПриИзменении(Элемент)
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУслугиПриИзменении(Элемент)
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекНастройкиОтборПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
	БухгалтерскиеОтчетыКлиент.ОтборыПриИзменении(ЭтотОбъект, Элемент, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекНастройкиОтборПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	БухгалтерскиеОтчетыКлиент.ОтборыПередНачаломДобавления(ЭтотОбъект, Элемент, Отказ, Копирование, Родитель, Группа);
	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекНастройкиОтборПередНачаломИзменения(Элемент, Отказ)
	
	БухгалтерскиеОтчетыКлиент.ОтборыПередНачаломИзменения(ЭтотОбъект, Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
#Если ВебКлиент Тогда
	ПараметрыОткрытия = Новый Структура("Ключ", Расшифровка);
	ОткрытьФорму(ПолучитьИмяФормы(Расшифровка), ПараметрыОткрытия, ЭтотОбъект);
#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПравоеЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("Дата",               Отчет.КонецПериода);
	СписокПараметров.Вставить("Организация",        Отчет.Организация);
	СписокПараметров.Вставить("СчетУчета",          Неопределено);
	СписокПараметров.Вставить("Номенклатура",       Неопределено);
	СписокПараметров.Вставить("Склад",              Неопределено);
	СписокПараметров.Вставить("Контрагент",         Неопределено);
	СписокПараметров.Вставить("ДоговорКонтрагента", Неопределено);
	
	Если Элементы.Отборы.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Значение           = Неопределено;
	Поле               = Элементы.Отборы.ТекущиеДанные.ЛевоеЗначение;
	ВидСравненияСтрока = Элементы.Отборы.ТекущиеДанные.ВидСравнения;
	ТипПоля            = БухгалтерскиеОтчетыКлиентСервер.ПолучитьСвойствоПоля(
		Отчет.КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора, Поле, "Тип");
	
	Если ТипПоля = Неопределено Тогда
		// Не нашли поле отбора в доступных полях отбора.
		// Эта ситуация возможна, если в Динамическом списке установлена Основая таблица и при этом выставлена галочка Произвольный запрос.
		// При этом в тексте запроса изменен алиас у поля, который участвует в отборе.
		// Для обработки такого несоответствия, в модуле менджера данного списка необходимо создать (или добавить в существующую) экспортную функцию
		// ПолучитьДополнительныеРеквизитыДляРеестра() - из которой возврщать структуру с соответствием Ключ/Значение = Поле/Алиас
		Возврат;
	КонецЕсли;
	
	// Принятая в конфигурации обработка работает только для равенства/неравенства
	Если Строка(ВидСравненияСтрока) = Строка(ВидСравненияКомпоновкиДанных.Равно)
		ИЛИ Строка(ВидСравненияСтрока) = Строка(ВидСравненияКомпоновкиДанных.НеРавно) Тогда
		
		Для каждого СтрокаОтбора Из Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
			Если ТипЗнч(СтрокаОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				Если ТипЗнч(СтрокаОтбора.ПравоеЗначение) <> Тип("ПолеКомпоновкиДанных") Тогда
					ЗначениеОтбора = ?(ТипЗнч(СтрокаОтбора.ПравоеЗначение) <> Тип("СписокЗначений"),
						СтрокаОтбора.ПравоеЗначение,
						СтрокаОтбора.ПравоеЗначение[0].Значение);
					
					ОписаниеТиповПоля = БухгалтерскиеОтчетыКлиентСервер.ПолучитьСвойствоПоля(
						Отчет.КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора, СтрокаОтбора.ЛевоеЗначение, "Тип");
					
					Если ОписаниеТиповПоля = Неопределено Тогда
						Возврат;
					КонецЕсли;
					
					ТипыПоля = ОписаниеТиповПоля.Типы();
					Если ТипыПоля.Количество() = 0 Тогда
						Возврат;
					ИначеЕсли ТипыПоля.Количество() > 1 Тогда
						ПолеОтбора      = ВернутьПолеОтбораКомпоновки(ЭтотОбъект, СтрокаОтбора.ЛевоеЗначение);
						ТипЗначенияПоля = ТипЗнч(ПолеОтбора.ПравоеЗначение);
						
						Если ПолеОтбора.ПравоеЗначение = Неопределено ИЛИ ТипЗначенияПоля = Тип("Неопределено") Тогда
							Возврат;
						КонецЕсли;
					Иначе
						ТипЗначенияПоля = ТипыПоля[0];
					КонецЕсли;
					
					Если ТипЗначенияПоля = ОписанияТиповВидовСубконто.Номенклатура Тогда
						СписокПараметров.Вставить("Номенклатура", ЗначениеОтбора);
					ИначеЕсли ТипЗначенияПоля = ОписанияТиповВидовСубконто.Склад Тогда
						СписокПараметров.Вставить("Склад", ЗначениеОтбора);
					ИначеЕсли ТипЗначенияПоля = ОписанияТиповВидовСубконто.Контрагент Тогда
						СписокПараметров.Вставить("Контрагент", ЗначениеОтбора);
					ИначеЕсли ТипЗначенияПоля = ОписанияТиповВидовСубконто.ДоговорКонтрагента Тогда
						СписокПараметров.Вставить("ДоговорКонтрагента", ЗначениеОтбора);
					КонецЕсли;
					
					Если СтрокаОтбора.ЛевоеЗначение = Элементы.Отборы.ТекущиеДанные.ЛевоеЗначение Тогда
						МассивТипов = Новый Массив;
						МассивТипов.Добавить(ТипЗначенияПоля);
						ТипПоля     = Новый ОписаниеТипов(МассивТипов);
						
						Значение    = ЗначениеОтбора;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		БухгалтерскиеОтчетыКлиент.ОтборОбработатьВыборЗначения(
			ЭтотОбъект, Элемент, СтандартнаяОбработка, Значение, СписокПараметров, ТипПоля);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Печать(Команда)
	
	ПодключитьОбработчикОжидания("ФормированиеРеестраВФонеПриОткрытии", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьСразу(Команда)
	Результат.Напечатать(РежимИспользованияДиалогаПечати.НеИспользовать);
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьНастройки(Команда)
	
	Элементы.Сформировать.КнопкаПоУмолчанию = Истина;
	СкрытьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНастройки(Команда)
	
	Элементы.ПрименитьНастройки.КнопкаПоУмолчанию = Истина;
	ОткрытьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ПараметрыВыбора    = Новый Структура("НачалоПериода,КонецПериода", Отчет.НачалоПериода, Отчет.КонецПериода);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыВыбора, Элементы.ВыбратьПериод,,,, ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМЫ

&НаСервере
Процедура ЗаполнитьОтборКомпоновщикаНастройкиДанных(ЭлементыОткуда, ЭлементыКуда, КорневойУровень = Истина)
	Для каждого ЭлементОтбора Из ЭлементыОткуда Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			НовыйЭлементОтбора = ЭлементыКуда.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбора);
			ЗаполнитьОтборКомпоновщикаНастройкиДанных(ЭлементОтбора.Элементы, НовыйЭлементОтбора.Элементы, Ложь);
		ИначеЕсли ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если КорневойУровень
				И (ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Дата")
				ИЛИ ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаОтбора")
				ИЛИ ЭлементОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно
					И ЭлементОтбора.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных("Организация")) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			НовыйЭлементОтбора = ЭлементыКуда.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбора,, "ИдентификаторПользовательскойНастройки, Представление");
			НовыйЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоступныеПоляВыбора(ЭлементыОткуда, ЭлементыКуда)
	Для каждого ЭлементВыбора Из ЭлементыОткуда Цикл
		Если ЭлементВыбора.Папка Тогда
			Если ЕстьОтборПоПервичнымДокументам Тогда
				ЗаполнитьДоступныеПоляВыбора(ЭлементВыбора.Элементы, ЭлементыКуда);
			КонецЕсли;
		Иначе
			НовоеПолеВыбора = ЭлементыКуда.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(НовоеПолеВыбора, ЭлементВыбора);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПолучитьТекстЗапроса(ИмяТаблицы, КлючНазначения)
	
	РезультатТекст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Таб.Ссылка КАК Ссылка,
		|	Таб.Дата КАК Дата,
		|	Таб.Номер,
		|	Таб.Проведен КАК Проведен,
		|	Таб.ПометкаУдаления КАК ПометкаУдаления";
	
	ТипМетаданных = Лев(ИмяТаблицы,  СтрНайти(ИмяТаблицы, ".") - 1);
	ИмяОбъекта    = Прав(ИмяТаблицы, СтрДлина(ИмяТаблицы) - СтрНайти(ИмяТаблицы, "."));
	
	Если ТипМетаданных = "Документ" Тогда
		Менеджер = "Документы";
		РеквизитыСписка = Метаданные[Менеджер][ИмяОбъекта].Реквизиты;
		РезультатТекст  = РезультатТекст + ",
			|	Таб.ВерсияДанных";
	Иначе
		Менеджер = "ЖурналыДокументов";
		РеквизитыСписка = Метаданные[Менеджер][ИмяОбъекта].Графы;
		РезультатТекст  = РезультатТекст + ",
			|	Таб.Тип";
	КонецЕсли;
	
	Для каждого Реквизит Из РеквизитыСписка Цикл
		РезультатТекст = РезультатТекст + ",";
		РезультатТекст = РезультатТекст + "
			|	Таб." + Реквизит.Имя;
	КонецЦикла;
	
	Попытка
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяТаблицы);
		Если ЗначениеЗаполнено(КлючНазначения) Тогда
			ДополнительныеРеквизиты = МенеджерОбъекта.ПолучитьДополнительныеРеквизитыДляРеестра(КлючНазначения);
			ОтборПоКлючуНазначения = МенеджерОбъекта.ОтборПоКлючуНазначения(КлючНазначения);
		Иначе
			ДополнительныеРеквизиты = МенеджерОбъекта.ПолучитьДополнительныеРеквизитыДляРеестра();
			ОтборПоКлючуНазначения = "";
		КонецЕсли;
	Исключение
		ДополнительныеРеквизиты = Новый Структура;
	КонецПопытки;
	
	РегистрыДополнительныхСведений = Новый Массив;
	
	Для каждого КлючИЗначение Из ДополнительныеРеквизиты Цикл
		
		НазваниеРеквизита = "Таб." + КлючИЗначение.Ключ;
		Если ПустаяСтрока(КлючИЗначение.Значение) Тогда
			НазваниеРеквизита = НазваниеРеквизита + ",";
			ПолеРеквизита = "";
		ИначеЕсли СтрНайти(КлючИЗначение.Значение, "Таб.") > 0 Тогда
			ПолеРеквизита = КлючИЗначение.Значение + " КАК " + КлючИЗначение.Ключ;
		Иначе
			ПозицияТочки = СтрНайти(КлючИЗначение.Значение, ".");
			Если ПозицияТочки > 0 Тогда
				Если КлючИЗначение.Значение = "СтатусыДокументов.Статус" Тогда
					Если РегистрыДополнительныхСведений.Найти("СтатусыДокументов") = Неопределено Тогда
						РегистрыДополнительныхСведений.Добавить("СтатусыДокументов");
					КонецЕсли;
					Если КлючИЗначение.Ключ = "Подписан" Тогда
						ПолеРеквизита =
						"ВЫБОР
						|		КОГДА СтатусыДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДокументовРеализации.Подписан)
						|			ТОГДА ИСТИНА
						|		ИНАЧЕ ЛОЖЬ
						|	КОНЕЦ КАК Подписан";
					ИначеЕсли КлючИЗначение.Ключ = "Оплата" Тогда
						ПолеРеквизита = "ВЫРАЗИТЬ(ЕСТЬNULL(СтатусыДокументов.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусОплатыСчета.НеОплачен)) КАК Перечисление.СтатусОплатыСчета) КАК Оплата";
					ИначеЕсли КлючИЗначение.Ключ = "Оригинал" Тогда
						ПолеРеквизита =
						"ВЫБОР
						|		КОГДА СтатусыДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДокументовПоступления.ОригиналПолучен)
						|			ТОГДА ИСТИНА
						|		ИНАЧЕ ЛОЖЬ
						|	КОНЕЦ КАК Оригинал";
					Иначе
						ПолеРеквизита = КлючИЗначение.Значение + " КАК " + КлючИЗначение.Ключ;
					КонецЕсли;
				ИначеЕсли КлючИЗначение.Значение = "СтатусыДокументов.ДополнительныйСтатус" Тогда
					Если РегистрыДополнительныхСведений.Найти("СтатусыДокументов") = Неопределено Тогда
						РегистрыДополнительныхСведений.Добавить("СтатусыДокументов");
					КонецЕсли;
					Если КлючИЗначение.Ключ = "Отгрузка" Тогда
						ПолеРеквизита = "ВЫРАЗИТЬ(ЕСТЬNULL(СтатусыДокументов.ДополнительныйСтатус, ЗНАЧЕНИЕ(Перечисление.СтатусыОтгрузки.НеОтгружен)) КАК Перечисление.СтатусыОтгрузки) КАК Отгрузка";
					ИначеЕсли КлючИЗначение.Ключ = "Поступление" Тогда
						ПолеРеквизита = "ВЫРАЗИТЬ(ЕСТЬNULL(СтатусыДокументов.ДополнительныйСтатус, ЗНАЧЕНИЕ(Перечисление.СтатусыПоступленияПоСчету.НеПолучен)) КАК Перечисление.СтатусыПоступленияПоСчету) КАК Поступление";
					Иначе
						ПолеРеквизита = КлючИЗначение.Значение + " КАК " + КлючИЗначение.Ключ;
					КонецЕсли;
				КонецЕсли;
			Иначе
				ПолеРеквизита = ?(КлючИЗначение.Значение = "Неопределено", "", "Таб.")
					+ КлючИЗначение.Значение + " КАК " + КлючИЗначение.Ключ;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрНайти(РезультатТекст, НазваниеРеквизита) = 0 Тогда
			РезультатТекст = РезультатТекст + ",
				|	" + ПолеРеквизита;
		Иначе
			РезультатТекст = СтрЗаменить(РезультатТекст, НазваниеРеквизита, ПолеРеквизита);
		КонецЕсли;
		
	КонецЦикла;
	
	РезультатТекст = СтрЗаменить(РезультатТекст, "###", "");
	
	РезультатТекст = РезультатТекст + "
		|ИЗ
		|	" + ТипМетаданных + "." + ИмяОбъекта + " КАК Таб";
	
	Если СтрНайти(РезультатТекст, "Таб.Организация") > 0 Тогда
		РезультатТекст = СтрЗаменить(РезультатТекст, "Таб.НомерВходящегоДокумента",
			"ВЫБОР
			|		КОГДА ДанныеПервичныхДокументов.Номер ЕСТЬ NULL 
			|			ТОГДА """"
			|		ИНАЧЕ ДанныеПервичныхДокументов.Номер
			|	КОНЕЦ");
		РезультатТекст = СтрЗаменить(РезультатТекст, "Таб.ДатаВходящегоДокумента",
			"ВЫБОР
			|		КОГДА ДанныеПервичныхДокументов.Дата ЕСТЬ NULL 
			|			ТОГДА """"
			|		ИНАЧЕ ДанныеПервичныхДокументов.Дата
			|	КОНЕЦ");
		РезультатТекст = РезультатТекст + "
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
			|		ПО Таб.Организация = ДанныеПервичныхДокументов.Организация
			|			И Таб.Ссылка = ДанныеПервичныхДокументов.Документ";
	КонецЕсли;
	
	Для Каждого ИмяРегистра Из РегистрыДополнительныхСведений Цикл
		РезультатТекст = РезультатТекст + "
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений." + ИмяРегистра + " КАК " + ИмяРегистра + "
			|		ПО Таб.Организация = " + ИмяРегистра + ".Организация
			|			И Таб.Ссылка = " + ИмяРегистра + ".Документ";
	КонецЦикла;
	
	РезультатТекст = РезультатТекст + ОтборПоКлючуНазначения;
	
	РезультатТекст = РезультатТекст + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	Таб.Номер";
	
	Возврат РезультатТекст;
	
КонецФункции

&НаСервере
Процедура ИнициализироватьОтчет(КлючНазначения = "")
	
	Если ЗначениеЗаполнено(Список.ОсновнаяТаблица) Тогда
		ТекстЗапроса = ПолучитьТекстЗапроса(Список.ОсновнаяТаблица, КлючНазначения);
	Иначе
		ТекстЗапроса = Список.ТекстЗапроса;
	КонецЕсли;
	
	СКД = Новый СхемаКомпоновкиДанных;
	ИсточникДанных = СКД.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных1";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	НаборДанных = СКД.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя = "НаборДанных1";
	НаборДанных.ИсточникДанных = ИсточникДанных.Имя;
	НаборДанных.Запрос = ТекстЗапроса;
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
	СхемаКомпоновкиДанных = ПоместитьВоВременноеХранилище(СКД, СхемаКомпоновкиДанных);
	
	Отчет.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
	ПоляВыбора = Отчет.КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ЗаполнитьДоступныеПоляВыбора(Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.Элементы, ПоляВыбора.Выбор.Элементы);
	
	ВсеНастройкиСписка = Список.КомпоновщикНастроек.ПолучитьНастройки();
	Если ВсеНастройкиСписка.Отбор.Элементы.Количество() > 0 Тогда
		ЗаполнитьОтборКомпоновщикаНастройкиДанных(ВсеНастройкиСписка.Отбор.Элементы, Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы);
	ИначеЕсли Список.Отбор.Элементы.Количество() > 0 Тогда
		ЗаполнитьОтборКомпоновщикаНастройкиДанных(Список.Отбор.Элементы, Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьРеестр()
	
	ТабДокумент = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Результат.Очистить();
	Результат.АвтоМасштаб          = Истина;
	Результат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеестрДокументов";
	
	Результат.Вывести(ТабДокумент);
	
	Результат.ОбластьПечати = Результат.Область();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьПараметрыОтчета()
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("НачалоПериода",                  Отчет.НачалоПериода);
	ПараметрыОтчета.Вставить("КонецПериода",                   Отчет.КонецПериода);
	ПараметрыОтчета.Вставить("Организация",                    Отчет.Организация);
	ПараметрыОтчета.Вставить("СхемаКомпоновкиДанных",          ПолучитьИзВременногоХранилища(СхемаКомпоновкиДанных));
	ПараметрыОтчета.Вставить("НастройкиКомпоновкиДанных",      Отчет.КомпоновщикНастроек.ПолучитьНастройки());
	ПараметрыОтчета.Вставить("ОтборКомпоновкиДанных",          Отчет.КомпоновщикНастроек.Настройки.Отбор);
	ПараметрыОтчета.Вставить("ИдентификаторОтчета",            БухгалтерскиеОтчетыКлиентСервер.ПолучитьИдентификаторОбъекта(ЭтотОбъект));
	ПараметрыОтчета.Вставить("ТоварыУслуги",                   ТоварыУслуги);
	ПараметрыОтчета.Вставить("ЭтоРеализация",                  ЭтоРеализация);
	ПараметрыОтчета.Вставить("ЕстьОтборПоПервичнымДокументам", ЕстьОтборПоПервичнымДокументам);
	ПараметрыОтчета.Вставить("СКомментарием",                  СКомментарием);
	ПараметрыОтчета.Вставить("ВыводитьПодписи",                ВыводитьПодписи);
	ПараметрыОтчета.Вставить("ВыводитьЗаголовок",              ВыводитьЗаголовок);
	ПараметрыОтчета.Вставить("ИмяСписка",                      ИмяСписка);
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) Тогда
		НовыйЭлементОтбора = ПараметрыОтчета.НастройкиКомпоновкиДанных.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		НовыйЭлементОтбора.Использование  = Истина;
		НовыйЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Дата");
		НовыйЭлементОтбора.ПравоеЗначение = НачалоДня(ПараметрыОтчета.НачалоПериода);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		НовыйЭлементОтбора = ПараметрыОтчета.НастройкиКомпоновкиДанных.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
		НовыйЭлементОтбора.Использование  = Истина;
		НовыйЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Дата");
		НовыйЭлементОтбора.ПравоеЗначение = КонецДня(ПараметрыОтчета.КонецПериода);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.Организация) Тогда
		НовыйЭлементОтбора = ПараметрыОтчета.НастройкиКомпоновкиДанных.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		НовыйЭлементОтбора.Использование  = Истина;
		НовыйЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Организация");
		НовыйЭлементОтбора.ПравоеЗначение = ПараметрыОтчета.Организация;
	КонецЕсли;
	
	Возврат ПараметрыОтчета;
	
КонецФункции

&НаСервере
Функция СформироватьНаСервере()
	
	ИБФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	ДлительныеОперации.ОтменитьВыполнениеЗадания(УИДЗаданиеФормированиеРеестра);
	УИДЗаданиеФормированиеРеестра = Неопределено;
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	ПараметрыДлительногоЗадания = ПодготовитьПараметрыОтчета();
	
	Если ИБФайловая Тогда
		ТЗРеестр    = Отчеты.РеестрДокументов.СформироватьТаблицуДокументов(ПараметрыДлительногоЗадания);
		ТабДокумент = Отчеты.РеестрДокументов.НапечататьРеестр(ПараметрыДлительногоЗадания, ТЗРеестр);
		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ТабДокумент, ЭтотОбъект.УникальныйИдентификатор);
		РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"Отчеты.РеестрДокументов.СформироватьТаблицуДокументовВФоне",
			ПараметрыДлительногоЗадания,
			НСтр("ru = 'Формирование реестра документов'"));
		АдресВоВременномХранилище     = РезультатВыполнения.АдресХранилища;
		УИДЗаданиеФормированиеРеестра = РезультатВыполнения.ИдентификаторЗадания;
	КонецЕсли;
	
	Элементы.Сформировать.КнопкаПоУмолчанию = Истина;
	Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.Отчет;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ПоказатьРеестр();
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервере
Процедура ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере()
	
	ПолеСумма = БухгалтерскиеОтчетыВызовСервера.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		Результат, КэшВыделеннойОбласти);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИмяФормы(Ссылка)
	Возврат "Документ." + Ссылка.Метаданные().Имя + ".ФормаОбъекта";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВернутьПолеОтбораКомпоновки(Форма, Знач ЛевоеЗначение)
	
	Для каждого ЭлементОтбора Из Форма.Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ЭлементОтбора.ЛевоеЗначение = ЛевоеЗначение Тогда
			Возврат ЭлементОтбора;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Процедура ФормированиеРеестраВФоне()
	
	РезультатВыполнения = СформироватьНаСервере();
		
	Если НЕ РезультатВыполнения.ЗаданиеВыполнено Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(УИДЗаданиеФормированиеРеестра) Тогда
			ПоказатьРеестр();
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал,
				Истина);
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьСвязанныеОтборы()
	
	ЭлементыОтбора = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы;
	
	Для каждого ЭлементОтбора Из ЭлементыОтбора Цикл 
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если ЗначениеЗаполнено(ЭлементОтбора.ПравоеЗначение)
				И Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ЭлементОтбора.ПравоеЗначение))
				И ТипЗнч(ЭлементОтбора.ПравоеЗначение.Владелец) = Тип("СправочникСсылка.Организации")
				И ЭлементОтбора.ПравоеЗначение.Владелец <> Отчет.Организация
				Тогда
				
				ЭлементОтбора.Использование  = Ложь;
				ЭлементОтбора.ПравоеЗначение = Неопределено;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьЗапрещенныеПоля(Режим = "") Экспорт
	
	СписокПолей = Новый Массив;
	
	СписокПолей.Добавить("UserFields");
	СписокПолей.Добавить("DataParameters");
	СписокПолей.Добавить("SystemFields");
	СписокПолей.Добавить("Показатели");
	СписокПолей.Добавить("Период");
	СписокПолей.Добавить("Дата");
	
	Возврат Новый ФиксированныйМассив(СписокПолей);
	
КонецФункции

&НаКлиенте
Процедура ФормированиеРеестраВФонеПриОткрытии()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	ПодключитьОбработчикОжидания("ФормированиеРеестраВФоне", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройки()
	
	Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.НастройкиОтчета;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьНастройки()
	
	Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.Отчет;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПОДКЛЮЧАЕМЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура Подключаемый_РезультатПриАктивизацииОбластиПодключаемый()
	
	НеобходимоВычислятьНаСервере = Ложь;
	БухгалтерскиеОтчетыКлиент.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		ПолеСумма, Результат, КэшВыделеннойОбласти, НеобходимоВычислятьНаСервере);
	
	Если НеобходимоВычислятьНаСервере Тогда
		ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере();
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ЗАВЕРШЕНИЕ НЕМОДАЛЬНЫХ ВЫЗОВОВ

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Отчет, РезультатВыбора, "НачалоПериода, КонецПериода");
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
