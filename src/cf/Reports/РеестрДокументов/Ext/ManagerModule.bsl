#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
Функция СформироватьТаблицуДокументов(ПараметрыДлительногоЗадания) Экспорт
	
	ВалютаРеглУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	СКД       = ПараметрыДлительногоЗадания.СхемаКомпоновкиДанных;
	Настройки = ПараметрыДлительногоЗадания.НастройкиКомпоновкиДанных;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));
	
	КомпоновщикМакета   = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки     = КомпоновщикМакета.Выполнить(СКД,
		КомпоновщикНастроек.Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,, Неопределено, Истина);
	ПроцессорВывода     = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	РезультатСОтборами  = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Если РезультатСОтборами.Колонки.Найти("Ссылка") = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИтоговаяТаблицаЗначений = Новый ТаблицаЗначений();
	ИтоговаяТаблицаЗначений.Колонки.Добавить("НомерПП");
	ИтоговаяТаблицаЗначений.Колонки.Добавить("Дата");
	ИтоговаяТаблицаЗначений.Колонки.Добавить("Документ");
	ИтоговаяТаблицаЗначений.Колонки.Добавить("НомерДок");
	ИтоговаяТаблицаЗначений.Колонки.Добавить("ДатаВходящегоДокумента");
	ИтоговаяТаблицаЗначений.Колонки.Добавить("НомерВходящегоДокумента");
	ИтоговаяТаблицаЗначений.Колонки.Добавить("СуммаДок");
	ИтоговаяТаблицаЗначений.Колонки.Добавить("Валюта");
	ИтоговаяТаблицаЗначений.Колонки.Добавить("Инфо");
	ИтоговаяТаблицаЗначений.Колонки.Добавить("Комментарий");
	ИтоговаяТаблицаЗначений.Колонки.Добавить("ДокументРасшифровка");
	ИтоговаяТаблицаЗначений.Колонки.Добавить("Ссылка");
	ИтоговаяТаблицаЗначений.Колонки.Добавить("ДатаСортировка");
	
	НаличиеКомментария = РезультатСОтборами.Колонки.Найти("Комментарий")     <> Неопределено;
	НаличиеСуммы       = РезультатСОтборами.Колонки.Найти("СуммаДокумента")  <> Неопределено;
	НаличиеВалюты      = РезультатСОтборами.Колонки.Найти("ВалютаДокумента") <> Неопределено;
	НаличиеИнформации  = РезультатСОтборами.Колонки.Найти("Информация")      <> Неопределено;
	НаличиеВхДаты      = РезультатСОтборами.Колонки.Найти("ДатаВходящегоДокумента")  <> Неопределено;
	НаличиеВхНомера    = РезультатСОтборами.Колонки.Найти("НомерВходящегоДокумента") <> Неопределено;
	
	ПроверятьТаблицуТовары = Ложь;
	ПроверятьТаблицуУслуги = Ложь;
	Если ПараметрыДлительногоЗадания.ЕстьОтборПоПервичнымДокументам Тогда
		Если ПараметрыДлительногоЗадания.ТоварыУслуги = 1 Тогда
			ТаблицыСТоварами = ВернутьНазванияТаблиц("ЕстьТовары", РезультатСОтборами.Колонки);
			ПроверятьТаблицуТовары = ТаблицыСТоварами.Количество() > 0;
		ИначеЕсли ПараметрыДлительногоЗадания.ТоварыУслуги = 2 Тогда
			ТаблицыСУслугами = ВернутьНазванияТаблиц("ЕстьУслуги", РезультатСОтборами.Колонки);
			ПроверятьТаблицуУслуги = ТаблицыСУслугами.Количество() > 0;
		КонецЕсли;
	КонецЕсли;
	
	ТипСсылки          = Неопределено;
	МетаданныеСсылки   = Неопределено;
	Для каждого Строка Из РезультатСОтборами Цикл
		Ссылка = Строка.Ссылка;
		
		Если ТипЗнч(Ссылка) <> ТипСсылки Тогда
			ТипСсылки        = ТипЗнч(Ссылка);
			МетаданныеСсылки = Ссылка.Метаданные();
		КонецЕсли;
		
		ИнформацияДляРеестра = Новый Структура;
		
		Если ПроверятьТаблицуТовары Тогда
			ЕстьТовары = Ложь;
			Для каждого Колонка Из ТаблицыСТоварами Цикл
				ЕстьТовары = ЕстьТовары ИЛИ Строка[Колонка] <> NULL;
			КонецЦикла;
			
			Если НЕ ЕстьТовары Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ПроверятьТаблицуУслуги Тогда
			ЕстьУслуги = Ложь;
			Для каждого Колонка Из ТаблицыСУслугами Цикл
				ЕстьУслуги = ЕстьУслуги ИЛИ Строка[Колонка] <> NULL;
			КонецЦикла;
			
			Если НЕ ЕстьУслуги Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ИнформацияДляРеестра.Вставить("Документ",            МетаданныеСсылки.Синоним);
		ИнформацияДляРеестра.Вставить("ДокументРасшифровка", Ссылка);
		ИнформацияДляРеестра.Вставить("ДатаСортировка",      Строка.Дата);
		
		Если НЕ ИнформацияДляРеестра.Свойство("Дата") Тогда
			ИнформацияДляРеестра.Вставить("Дата", Формат(Строка.Дата, "ДЛФ=Д"));
		КонецЕсли;
		
		Если НЕ ИнформацияДляРеестра.Свойство("НомерДок") Тогда
			Номер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Строка.Номер, Истина, Ложь);
			ИнформацияДляРеестра.Вставить("НомерДок", Номер);
		КонецЕсли;
		
		Если НаличиеВхДаты И НЕ ИнформацияДляРеестра.Свойство("ДатаВходящегоДокумента") Тогда
			ИнформацияДляРеестра.Вставить("ДатаВходящегоДокумента", Формат(Строка.ДатаВходящегоДокумента, "ДЛФ=Д"));
		КонецЕсли;
		
		Если НаличиеВхНомера И НЕ ИнформацияДляРеестра.Свойство("НомерВходящегоДокумента") Тогда
			ИнформацияДляРеестра.Вставить("НомерВходящегоДокумента", Строка.НомерВходящегоДокумента);
		КонецЕсли;
		
		Если НаличиеКомментария Тогда
			ИнформацияДляРеестра.Вставить("Комментарий", Строка.Комментарий);
		Иначе
			ИнформацияДляРеестра.Вставить("Комментарий", Ссылка.Комментарий);
		КонецЕсли;
		
		Если НЕ ИнформацияДляРеестра.Свойство("СуммаДок") И НаличиеСуммы Тогда
			ИнформацияДляРеестра.Вставить("СуммаДок", Строка.СуммаДокумента);
		КонецЕсли;
		
		Если НЕ ИнформацияДляРеестра.Свойство("Валюта") Тогда
			Если НаличиеВалюты Тогда
				ИнформацияДляРеестра.Вставить("Валюта", Строка.ВалютаДокумента);
			Иначе
				// Если настройка "Ведется учет в валюте и у.е." выключена, значит
				// используется только Валюта регламентированного учета
				ИнформацияДляРеестра.Вставить("Валюта", ВалютаРеглУчета);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ИнформацияДляРеестра.Свойство("Инфо") И НаличиеИнформации Тогда
			ИнформацияДляРеестра.Вставить("Инфо", Строка.Информация);
		КонецЕсли;
		
		НоваяСтрока = ИтоговаяТаблицаЗначений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ИнформацияДляРеестра);
	КонецЦикла;
	
	ИтоговаяТаблицаЗначений.Сортировать("ДатаСортировка");
	
	НомерПП = 0;
	Для каждого Строка Из ИтоговаяТаблицаЗначений Цикл
		НомерПП = НомерПП + 1;
		Строка["НомерПП"] = НомерПП;
		Строка["Комментарий"] = Лев(Строка["Комментарий"], 100);
	КонецЦикла;
	
	Возврат ИтоговаяТаблицаЗначений;
	
КонецФункции

Процедура СформироватьТаблицуДокументовВФоне(ПараметрыДлительногоЗадания, АдресХранилища) Экспорт
	Результат = СформироватьТаблицуДокументов(ПараметрыДлительногоЗадания);
	ТабДокумент = НапечататьРеестр(ПараметрыДлительногоЗадания, Результат);
	ПоместитьВоВременноеХранилище(ТабДокумент, АдресХранилища);
КонецПроцедуры

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбраннаяФорма = "ФормаОтчета";
	
КонецПроцедуры

Функция ВернутьНазванияТаблиц(ЧтоИщем, КолонкиТаблицы)
	
	Массив = Новый Массив;
	
	Для каждого Колонка Из КолонкиТаблицы Цикл
		Если СтрНайти(Колонка.Имя, ЧтоИщем) > 0 Тогда
			Массив.Добавить(Колонка.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

Функция НапечататьРеестр(ПараметрыОтчета, ИтоговаяТаблицаЗначений) Экспорт
	
	Результат = Новый ТабличныйДокумент;
	
	Макет = Отчеты.РеестрДокументов.ПолучитьМакет("Макет");
	Если ПараметрыОтчета.СКомментарием Тогда
		ОбластьОбластьЗаголовкаТЧ = Макет.ПолучитьОбласть("ОбластьЗаголовкаТЧСКомментарием");
		ОбластьОбластьСтрокаТЧ    = Макет.ПолучитьОбласть("ОбластьСтрокаТЧСКомментарием");
		ОбластьИтого              = Макет.ПолучитьОбласть("ИтогоСКомментарием");
		ОбластьИтогоПервая        = Макет.ПолучитьОбласть("ИтогоПерваяСтрокаСКомментарием");
		ОбластьИтогоСредняя       = Макет.ПолучитьОбласть("ИтогоСредняяСтрокаСКомментарием");
		ОбластьИтогоПоследняя     = Макет.ПолучитьОбласть("ИтогоПоследняяСтрокаСКомментарием");
		ОбластьИтогоПустая        = Макет.ПолучитьОбласть("ПустаяСтрокаИтогоСКомментарием");
	Иначе
		ОбластьОбластьЗаголовкаТЧ = Макет.ПолучитьОбласть("ОбластьЗаголовкаТЧ");
		ОбластьОбластьСтрокаТЧ    = Макет.ПолучитьОбласть("ОбластьСтрокаТЧ");
		ОбластьИтого              = Макет.ПолучитьОбласть("Итого");
		ОбластьИтогоПервая        = Макет.ПолучитьОбласть("ИтогоПерваяСтрока");
		ОбластьИтогоСредняя       = Макет.ПолучитьОбласть("ИтогоСредняяСтрока");
		ОбластьИтогоПоследняя     = Макет.ПолучитьОбласть("ИтогоПоследняяСтрока");
		ОбластьИтогоПустая        = Макет.ПолучитьОбласть("ПустаяСтрокаИтого");
	КонецЕсли;
	
	ОбластьОтветственный          = Макет.ПолучитьОбласть("Ответственный");
	
	МассивДляПроверкиВывода = Новый Массив;
	МассивДляПроверкиВывода.Добавить(ОбластьОбластьСтрокаТЧ);
	МассивДляПроверкиВывода.Добавить(ОбластьИтого);
	Если ПараметрыОтчета.ВыводитьПодписи Тогда
		МассивДляПроверкиВывода.Добавить(ОбластьОтветственный);
	КонецЕсли;
	
	Результат.АвтоМасштаб = Истина;
	Результат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	Результат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеестрДокументов";
	
	Если ПараметрыОтчета.ВыводитьЗаголовок Тогда
		ОбластьШапка = Макет.ПолучитьОбласть("ОбластьЗаголовокРеестра");
		ОбластьОтбор = Макет.ПолучитьОбласть("ОписаниеНастроек");
		
		ОбластьШапка.Параметры.РеестрДокументов = ПолучитьЗаголовокРеестра(ПараметрыОтчета);
		Если ЗначениеЗаполнено(ПараметрыОтчета.Организация) Тогда
			ОбластьШапка.Параметры.Организация = ПараметрыОтчета.Организация;
		КонецЕсли;
		Результат.Вывести(ОбластьШапка);
		
		Если ПараметрыОтчета.ЕстьОтборПоПервичнымДокументам Тогда
			ОбластьОписаниеТоварыУслуги = Макет.ПолучитьОбласть("ОписаниеТоварыУслуги");
			Если ПараметрыОтчета.ТоварыУслуги = 0 Тогда
				ОбластьОписаниеТоварыУслуги.Параметры.ОписаниеТоварыУслуги     = НСтр("ru = 'Все документы'");
			ИначеЕсли ПараметрыОтчета.ТоварыУслуги = 1 Тогда
				Если ПараметрыОтчета.ЭтоРеализация Тогда
					ОбластьОписаниеТоварыУслуги.Параметры.ОписаниеТоварыУслуги = НСтр("ru = 'Только реализации товаров'");
				Иначе
					ОбластьОписаниеТоварыУслуги.Параметры.ОписаниеТоварыУслуги = НСтр("ru = 'Только поступления товаров'");
				КонецЕсли;
			ИначеЕсли ПараметрыОтчета.ТоварыУслуги = 2 Тогда
				Если ПараметрыОтчета.ЭтоРеализация Тогда
					ОбластьОписаниеТоварыУслуги.Параметры.ОписаниеТоварыУслуги = НСтр("ru = 'Только оказания услуг'");
				Иначе
					ОбластьОписаниеТоварыУслуги.Параметры.ОписаниеТоварыУслуги = НСтр("ru = 'Только полученные услуги'");
				КонецЕсли;
			КонецЕсли;
			Результат.Вывести(ОбластьОписаниеТоварыУслуги);
		КонецЕсли;
		
		ТекстОтбор = Строка(ПараметрыОтчета.ОтборКомпоновкиДанных);
		Если НЕ ПустаяСтрока(ТекстОтбор) Тогда
			ОбластьОтбор.Параметры.ИмяНастроекОтчета = НСтр("ru = 'Отбор:'");
			ОбластьОтбор.Параметры.ОписаниеНастроекОтчета = ТекстОтбор;
			Результат.Вывести(ОбластьОтбор);
		КонецЕсли;
	КонецЕсли;
	
	Результат.Вывести(ОбластьОбластьЗаголовкаТЧ);
	
	Если ИтоговаяТаблицаЗначений = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	СоответствиеВалют = Новый Соответствие;
	
	Для каждого ИнформацияДляРеестра Из ИтоговаяТаблицаЗначений Цикл
		СуммаДляДобавки = ИнформацияДляРеестра.СуммаДок;
		Если ЗначениеЗаполнено(СуммаДляДобавки)
			И СуммаДляДобавки > 0
			И ЗначениеЗаполнено(ИнформацияДляРеестра.Валюта) Тогда
			СтараяСумма = СоответствиеВалют.Получить(ИнформацияДляРеестра.Валюта);
			Если ЗначениеЗаполнено(СтараяСумма) Тогда 
				СоответствиеВалют.Вставить(ИнформацияДляРеестра.Валюта, СуммаДляДобавки + СтараяСумма);
			Иначе
				СоответствиеВалют.Вставить(ИнформацияДляРеестра.Валюта, СуммаДляДобавки);
			КонецЕсли;
		КонецЕсли;
		
		Если МассивДляПроверкиВывода.Количество() - СоответствиеВалют.Количество() < 2 Тогда
			МассивДляПроверкиВывода.Добавить(ОбластьИтого);
		КонецЕсли;
		
		Если НЕ Результат.ПроверитьВывод(МассивДляПроверкиВывода) Тогда
			Результат.Вывести(ОбластьИтогоПустая);
			Результат.ВывестиГоризонтальныйРазделительСтраниц();
			Результат.Вывести(ОбластьОбластьЗаголовкаТЧ);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ОбластьОбластьСтрокаТЧ.Параметры, ИнформацияДляРеестра);
		Результат.Вывести(ОбластьОбластьСтрокаТЧ);
		
	КонецЦикла;
	
	КоличествоЭлементовСоответствия = СоответствиеВалют.Количество();
	Если КоличествоЭлементовСоответствия = 0 Тогда
		Результат.Вывести(ОбластьИтогоПустая);
	Иначе
		ТекущийНомер = 1;
		Для каждого ЭлементСоответствия Из СоответствиеВалют Цикл
			Если КоличествоЭлементовСоответствия = 1 Тогда
				ОбластьИтого.Параметры.СуммаИтого  = ЭлементСоответствия.Значение;
				ОбластьИтого.Параметры.ВалютаИтого = ЭлементСоответствия.Ключ;
				Результат.Вывести(ОбластьИтого);
				Прервать;
			ИначеЕсли ТекущийНомер = 1 Тогда
				ОбластьИтогоПервая.Параметры.СуммаИтого  = ЭлементСоответствия.Значение;
				ОбластьИтогоПервая.Параметры.ВалютаИтого = ЭлементСоответствия.Ключ;
				Результат.Вывести(ОбластьИтогоПервая);
			ИначеЕсли ТекущийНомер = КоличествоЭлементовСоответствия Тогда
				ОбластьИтогоПоследняя.Параметры.СуммаИтого  = ЭлементСоответствия.Значение;
				ОбластьИтогоПоследняя.Параметры.ВалютаИтого = ЭлементСоответствия.Ключ;
				Результат.Вывести(ОбластьИтогоПоследняя);
			Иначе
				ОбластьИтогоСредняя.Параметры.СуммаИтого  = ЭлементСоответствия.Значение;
				ОбластьИтогоСредняя.Параметры.ВалютаИтого = ЭлементСоответствия.Ключ;
				Результат.Вывести(ОбластьИтогоСредняя);
			КонецЕсли;
			ТекущийНомер = ТекущийНомер + 1;
		КонецЦикла;
	КонецЕсли;
	
	Если ПараметрыОтчета.ВыводитьПодписи Тогда
		Если ЗначениеЗаполнено(ПараметрыОтчета.Организация) Тогда
			Если ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
				ПериодОтветственных = ПараметрыОтчета.КонецПериода;
			Иначе
				ПериодОтветственных = ТекущаяДатаСеанса();
			КонецЕсли;
			
			РеквизитыОтветственныхЛиц = ОтветственныеЛицаБП.ОтветственныеЛица(ПараметрыОтчета.Организация, ПериодОтветственных);
			ОбластьОтветственный.Параметры.Должность = РеквизитыОтветственныхЛиц["ОтветственныйЗаБухгалтерскиеРегистрыДолжностьПредставление"];
			ОбластьОтветственный.Параметры.РасшифровкаПодписи = РеквизитыОтветственныхЛиц["ОтветственныйЗаБухгалтерскиеРегистрыПредставление"];
		КонецЕсли;
		Результат.Вывести(ОбластьОтветственный);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьЗаголовокРеестра(ПараметрыОтчета)
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) ИЛИ ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		Возврат ПараметрыОтчета.ИмяСписка + " " + БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
			ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода);
	Иначе
		Возврат ПараметрыОтчета.ИмяСписка;
	КонецЕсли;
	
КонецФункции

#КонецЕсли