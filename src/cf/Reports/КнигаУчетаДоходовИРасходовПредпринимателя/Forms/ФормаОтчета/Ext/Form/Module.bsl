&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РежимРасшифровки = Параметры.РежимРасшифровки;
	
	Если РежимРасшифровки Тогда
		
		Отчет.Организация   = Параметры.Организация;
		Отчет.НачалоПериода = НачалоМесяца(Параметры.НачалоПериода);
		Отчет.КонецПериода  = КонецМесяца(Параметры.КонецПериода);
		
		СтандартнаяОбработка = Ложь;
		
	Иначе
		
		ТекущаяДата = ОбщегоНазначения.ТекущаяДатаПользователя();
		
		ОрганизацияПоУмолчанию = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
		ЭтоЮрЛицо = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(ОрганизацияПоУмолчанию);
		
		Отчет.Организация = ?(ЭтоЮрЛицо, Справочники.Организации.ПустаяСсылка(), ОрганизацияПоУмолчанию);
		
		Отчет.НачалоПериода = НачалоГода(ТекущаяДата);
		Отчет.КонецПериода  = КонецГода(ТекущаяДата);
		
	КонецЕсли;
	
	ТекущаяДатаОтчета = Отчет.КонецПериода;
	
	Отчет.ОблагаетсяНДС = Не УчетнаяПолитика.ПрименяетсяОсвобождениеОтУплатыНДС(Отчет.Организация, Отчет.НачалоПериода);
	
	Отчеты.КнигаУчетаДоходовИРасходовПредпринимателя.ОбновитьСписокТаблиц(Отчет.СписокТаблиц, РежимРасшифровки);
	
	ОбновитьТекстЗаголовка(ЭтотОбъект);
	
	УстановитьФункциональныеОпцииФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	БухгалтерскиеОтчетыКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	
	Если РежимРасшифровки Тогда
		СформироватьОтчетНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки)
	
	БухгалтерскиеОтчетыВызовСервера.ПриЗагрузкеПользовательскихНастроекНаСервере(ЭтотОбъект, Настройки, Истина);
	ЭтоЮрЛицо = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Отчет.Организация);
	Если ЭтоЮрЛицо Тогда
		Отчет.Организация = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
	ТекущаяДатаОтчета = Отчет.КонецПериода;
	
	Отчеты.КнигаУчетаДоходовИРасходовПредпринимателя.ОбновитьСписокТаблиц(Отчет.СписокТаблиц);
	
	ОбновитьТекстЗаголовка(ЭтотОбъект);
	
	УстановитьФункциональныеОпцииФормы();
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Настройки)
	
	БухгалтерскиеОтчетыВызовСервера.ПриСохраненииПользовательскихНастроекНаСервере(ЭтотОбъект, Настройки, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ ЗначениеЗаполнено(Отчет.НачалоПериода) ИЛИ НЕ ЗначениеЗаполнено(Отчет.КонецПериода) Тогда
		ТекстСообщения = НСтр("ru = 'Не задан период формирования отчета'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Период", , Отказ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Отчет.ВидДеятельности) Тогда
		
		ХарактерДеятельности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Отчет.ВидДеятельности, "ХарактерДеятельности");
		
		ХарактерыДеятельностиОСН       = УчетДоходовИРасходовПредпринимателя.ХарактерыДеятельностиОСН();
		ХарактерыДеятельностиЕНВД      = УчетДоходовИРасходовПредпринимателя.ХарактерыДеятельностиЕНВД();
		ХарактерыДеятельностиУСНПатент = УчетДоходовИРасходовПредпринимателя.ХарактерыДеятельностиУСНПатент();
		
		Если ХарактерыДеятельностиОСН.Найти(ХарактерДеятельности) = Неопределено Тогда
			
			Если НЕ ХарактерыДеятельностиЕНВД.Найти(ХарактерДеятельности) = Неопределено Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Вид деятельности ""%1"" облагается ЕНВД'"), Отчет.ВидДеятельности);
			ИначеЕсли НЕ ХарактерыДеятельностиУСНПатент.Найти(ХарактерДеятельности) = Неопределено Тогда
				Если Отчет.КонецПериода < УчетУСН.ДатаНачалаДействияПатентнойСистемы() Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'В отношении вида деятельности ""%1"" применяется УСН на патенте'"), Отчет.ВидДеятельности);
				Иначе
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'В отношении деятельности ""%1"" применяется патентная система налогообложения'"), Отчет.ВидДеятельности);
				КонецЕсли;
			Иначе
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Для вида деятельности ""%1"" указан некорректный характер деятельности'"), Отчет.ВидДеятельности);
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ВидДеятельности", "Отчет", Отказ);
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	БухгалтерскиеОтчетыКлиент.ПередЗакрытием(ЭтаФорма, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	БухгалтерскиеОтчетыКлиент.ПриЗакрытии(ЭтаФорма, ЗавершениеРаботы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	
	Отчет.НачалоПериода	= НачалоМесяца(Отчет.НачалоПериода);
	Если Год(Отчет.НачалоПериода) <> Год(Отчет.КонецПериода) Тогда
		Отчет.КонецПериода = КонецГода(Отчет.НачалоПериода);
	КонецЕсли;
	Если КонецМесяца(Отчет.КонецПериода) <> КонецМесяца(ТекущаяДатаОтчета) Тогда
		УстановитьФункциональныеОпцииФормы();
	КонецЕсли;
	ТекущаяДатаОтчета = Отчет.КонецПериода;
	
	ОбновитьТекстЗаголовка(ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	
	Отчет.КонецПериода = КонецМесяца(Отчет.КонецПериода);
	Если Год(Отчет.НачалоПериода) <> Год(Отчет.КонецПериода) Тогда
		Отчет.НачалоПериода = НачалоГода(Отчет.КонецПериода);
	КонецЕсли;
	Если КонецМесяца(Отчет.КонецПериода) <> КонецМесяца(ТекущаяДатаОтчета) Тогда
		УстановитьФункциональныеОпцииФормы();
	КонецЕсли;
	ТекущаяДатаОтчета = Отчет.КонецПериода;
	
	ОбновитьТекстЗаголовка(ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДеятельностиПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЛистПриИзменении(Элемент)
	
	ПоказатьВыбранныйЛист();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьРеквизитыПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОблагаетсяНДСПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатПриАктивизацииОбласти(Элемент)
	
	Если ТипЗнч(Результат.ВыделенныеОбласти) = Тип("ВыделенныеОбластиТабличногоДокумента") Тогда
		ИнтервалОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.2);
		ПодключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый", ИнтервалОжидания, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("НачалоПериода", Отчет.НачалоПериода);
	ПараметрыВыбора.Вставить("КонецПериода",  Отчет.КонецПериода);
	ПараметрыВыбора.Вставить("Кратность", ПредопределенноеЗначение("Перечисление.Периодичность.Месяц"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыВыбора, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	СформироватьОтчетНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНастройки(Команда)
	
	Элементы.ПрименитьНастройки.КнопкаПоУмолчанию = Истина;
	Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.НастройкиОтчета;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьНастройки(Команда)
	
	Элементы.Сформировать.КнопкаПоУмолчанию = Истина;
	Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.Отчет;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокТаблицВключить(Команда)
	
	Для Каждого Таблица Из Отчет.СписокТаблиц Цикл
		Таблица.Формировать = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокТаблицВыключить(Команда)
	
	Для Каждого Таблица Из Отчет.СписокТаблиц Цикл
		Таблица.Формировать = Ложь;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьТекстЗаголовка(Форма)
	
	Отчет = Форма.Отчет;
	
	ЗаголовокОтчета = НСтр("ru = 'Книга доходов и расходов предпринимателя'") +
		БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(Отчет.НачалоПериода, Отчет.КонецПериода);

	Если ЗначениеЗаполнено(Отчет.Организация) И Форма.ИспользуетсяНесколькоОрганизаций Тогда
		ЗаголовокОтчета = ЗаголовокОтчета + " " + БухгалтерскиеОтчетыВызовСервера.ПолучитьТекстОрганизация(Отчет.Организация);
	КонецЕсли;
	
	Форма.Заголовок = ЗаголовокОтчета;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Отчет.ОблагаетсяНДС = Не УчетнаяПолитика.ПрименяетсяОсвобождениеОтУплатыНДС(Отчет.Организация, Отчет.НачалоПериода);
	
	ОбновитьТекстЗаголовка(ЭтотОбъект);
	
	УстановитьФункциональныеОпцииФормы();
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьПараметрыОтчета()
	
	ПараметрыОтчета = Новый Структура(
		"Организация, НачалоПериода, КонецПериода, 
		|ВидДеятельности, ОблагаетсяНДС, ВыводитьРеквизиты");
	
	ЗаполнитьЗначенияСвойств(ПараметрыОтчета, Отчет);
	
	СписокТаблиц = Отчет.СписокТаблиц.Выгрузить();
	Для Каждого Таблица Из СписокТаблиц Цикл
		Если Таблица.Формировать Тогда
			Таблица.АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		Иначе
			Таблица.АдресХранилища = "";
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыОтчета.Вставить("СписокТаблиц", СписокТаблиц);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

&НаКлиенте
Процедура СформироватьОтчетНаКлиенте()
	
	ОчиститьСообщения();
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
	
	РезультатВыполнения = СформироватьОтчетНаСервере();
	
	Если Не РезультатВыполнения.ЗаданиеВыполнено Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");		
	КонецЕсли;
	
	Если РезультатВыполнения.Свойство("ОтказПроверкиЗаполнения") Тогда
		ПоказатьНастройки("");
	Иначе	
		Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.Отчет;
	КонецЕсли;
	
	Элементы.Сформировать.КнопкаПоУмолчанию = Истина;
	
КонецПроцедуры

&НаСервере
Функция СформироватьОтчетНаСервере()
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат Новый Структура("ЗаданиеВыполнено", Истина);
	КонецЕсли;
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	ПараметрыОтчета = ПодготовитьПараметрыОтчета();
	
	РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор, 
		"Отчеты.КнигаУчетаДоходовИРасходовПредпринимателя.СформироватьОтчет", 
		ПараметрыОтчета, 
		БухгалтерскиеОтчетыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(ЭтотОбъект));
	
	АдресХранилища       = РезультатВыполнения.АдресХранилища;
	ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	Элементы.Сформировать.КнопкаПоУмолчанию = Истина;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	
	СписокТаблиц = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(СписокТаблиц) = Тип("ТаблицаЗначений") Тогда
		Для Каждого СтараяТаблица Из Отчет.СписокТаблиц Цикл
			Если ЭтоАдресВременногоХранилища(СтараяТаблица.АдресХранилища) Тогда
				УдалитьИзВременногоХранилища(СтараяТаблица.АдресХранилища);
			КонецЕсли;
		КонецЦикла;
		Отчет.СписокТаблиц.Загрузить(СписокТаблиц);
	КонецЕсли;
	
	Элементы.Лист.СписокВыбора.Очистить();
	Для Каждого Таблица Из Отчет.СписокТаблиц Цикл
		Если Таблица.Формировать Тогда
			Если ПустаяСтрока(Таблица.ЗаголовокТаблицы) Тогда
				ПредставлениеТаблицы = Таблица.Наименование;
			Иначе
				ПредставлениеТаблицы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 (%2)",
					Таблица.ЗаголовокТаблицы, Таблица.Наименование);
			КонецЕсли;
			
			Элементы.Лист.СписокВыбора.Добавить(Таблица.КодТаблицы, ПредставлениеТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	ЕстьВыборЛиста = (Элементы.Лист.СписокВыбора.Количество() > 0);
	
	Если Не ЕстьВыборЛиста Тогда
		Лист = 0;
	ИначеЕсли Элементы.Лист.СписокВыбора.НайтиПоЗначению(Лист) = Неопределено Тогда
		Лист = Элементы.Лист.СписокВыбора[0].Значение;
	КонецЕсли;
	
	ПоказатьВыбранныйЛист();
	
	ИдентификаторЗадания = Неопределено;
	
	Элементы.Лист.Доступность = ЕстьВыборЛиста;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
			ЗагрузитьПодготовленныеДанные();
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервере
Процедура ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере()
	
	ПолеСумма = БухгалтерскиеОтчетыВызовСервера.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		Результат, КэшВыделеннойОбласти);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РезультатПриАктивизацииОбластиПодключаемый()
	
	НеобходимоВычислятьНаСервере = Ложь;
	БухгалтерскиеОтчетыКлиент.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		ПолеСумма, Результат, КэшВыделеннойОбласти, НеобходимоВычислятьНаСервере);
	
	Если НеобходимоВычислятьНаСервере Тогда
		ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере();
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый");
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьВыбранныйЛист()
	
	Перем ВыбранныйЛист;
	
	Результат.Очистить();
	
	НайденныеСтроки = Отчет.СписокТаблиц.НайтиСтроки(Новый Структура("КодТаблицы", Лист));
	
	Если НайденныеСтроки.Количество() > 0 И ЭтоАдресВременногоХранилища(НайденныеСтроки[0].АдресХранилища) Тогда
		
		СформированныйЛист = ПолучитьИзВременногоХранилища(НайденныеСтроки[0].АдресХранилища);
		
		Если ТипЗнч(СформированныйЛист) = Тип("ТабличныйДокумент") Тогда
			Результат.Вывести(СформированныйЛист);
			Результат.Автомасштаб         = СформированныйЛист.Автомасштаб;
			Результат.ЧерноБелаяПечать    = СформированныйЛист.ЧерноБелаяПечать;
			Результат.ТолькоПросмотр      = СформированныйЛист.ТолькоПросмотр;
			Результат.ОриентацияСтраницы  = СформированныйЛист.ОриентацияСтраницы;
			Результат.ИмяПараметровПечати = СформированныйЛист.ИмяПараметровПечати;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрОрганизацияФункциональныхОпцийФормы(
		ЭтотОбъект,
		Отчет.Организация,
		Отчет.КонецПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Отчет, РезультатВыбора, "НачалоПериода, КонецПериода");
	
	ОбновитьТекстЗаголовка(ЭтотОбъект);
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти
