#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

Функция ПолучитьМассивОбособленныхПодразделений(ГоловнойКонтрагент) Экспорт
	
	Возврат ПолучитьМассивПодчиненныхКонтрагентов(ГоловнойКонтрагент, Истина);
	
КонецФункции

Функция ПолучитьМассивПодчиненныхКонтрагентов(ГоловнойКонтрагент, ТолькоОбособленныеПодразделения = Ложь) Экспорт
	
	МассивКонтрагентов	= Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(ГоловнойКонтрагент) Тогда
		Возврат МассивКонтрагентов;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГоловнойКонтрагент",	ГоловнойКонтрагент);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка,
	|	Контрагенты.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка <> &ГоловнойКонтрагент
	|	И Контрагенты.ГоловнойКонтрагент = &ГоловнойКонтрагент
	|	И НЕ Контрагенты.ПометкаУдаления
	|	И НЕ Контрагенты.ЭтоГруппа";
	
	Если ТолькоОбособленныеПодразделения Тогда
		Запрос.Текст	= Запрос.Текст + "
		|	И Контрагенты.ОбособленноеПодразделение";
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	МассивКонтрагентов	= Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат МассивКонтрагентов;
	
КонецФункции

Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	МассивРеквизитов = Новый Массив();
	МассивРеквизитов.Добавить("УдалитьЮрФизЛицо");
	Возврат МассивРеквизитов;
	
КонецФункции

Функция ТекстЗапросаПроверкиДублейКонтрагентов()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	НЕ Контрагенты.ЭтоГруппа
	|	И НЕ Контрагенты.Ссылка = &Ссылка
	|	И Контрагенты.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|	И Контрагенты.КПП = &КПП
	|	И Контрагенты.ИНН = &ИНН";
	
	Возврат ТекстЗапроса;
	
КонецФункции

//Процедура возвращает массив дублей по записям в регистре Наличие дублей контрагентов
//На вход получает ИНН, КПП и ссылку на контрагента
Функция ЕстьЗаписиВРегистреДублей(ИНН, КПП, Ссылка) Экспорт
	
	Дубли = Новый Массив;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ИНН", СокрЛП(ИНН));
	Запрос.УстановитьПараметр("КПП", СокрЛП(КПП));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НаличиеДублейУКонтрагентов.Контрагент КАК Ссылка
	|ИЗ
	|	РегистрСведений.НаличиеДублейУКонтрагентов КАК НаличиеДублейУКонтрагентов
	|ГДЕ
	|	НЕ НаличиеДублейУКонтрагентов.Контрагент = &Ссылка
	|	И НаличиеДублейУКонтрагентов.КПП = &КПП
	|	И НаличиеДублейУКонтрагентов.ИНН = &ИНН";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДублей = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДублей.Следующий() Цикл
		Дубли.Добавить(ВыборкаДублей.Ссылка);
	КонецЦикла;
	
	Возврат Дубли;
	
КонецФункции	

//Функция определяет наличие дублей у контрагента.
// ИНН - ИНН проверяемого контрагента, Тип - Строка(12)
// КПП - КПП проверяемого контрагента, Тип - Строка(9)
// Ссылка - Сам проверяемый контрагент, Тип - СправочникСсылка.Контрагенты
Функция ПроверитьДублиСправочникаКонтрагентыПоИННКПП(Знач ИНН, Знач КПП, Знач Ссылка, ПроверкаПриЗаписи = Ложь) Экспорт
	
	Дубли = Новый Массив;
	
	Запрос = Новый Запрос;
	
	//Если записываем элемент, то сначала проверим наличие дублей
	//в регистре. Операция выполняется только при событии объекта ПередЗаписью
	//В интерактивной проверке дублей не применяется, 
	//т.к. на регистр устанавливаются исключительные блокировки.
	Если ПроверкаПриЗаписи Тогда
		Дубли = ЕстьЗаписиВРегистреДублей(ИНН, КПП, Ссылка);
	КонецЕсли;
	
	//Если при записи элемента ничего не нашлось в регистре дублей, 
	//или при интерактивной проверке выполним поиск дублей по справочнику Контрагенты
	Если Дубли.Количество() = 0 Тогда
	
		Запрос.Текст = ТекстЗапросаПроверкиДублейКонтрагентов();
		
		Запрос.УстановитьПараметр("ИНН", СокрЛП(ИНН));
		Запрос.УстановитьПараметр("КПП", СокрЛП(КПП));
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДублей = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДублей.Следующий() Цикл
			Дубли.Добавить(ВыборкаДублей.Ссылка);
		КонецЦикла;
			
	КонецЕсли;	
	
	Возврат Дубли;
	
КонецФункции	

//Процедура делает движения в регистре дублей
// Ссылка - ссылка на эелемнт справочника Контрагенты
// ИНН - ИНН записываемого контрагента
// КПП - КПП записываемого контрагента
// НужноУдалить:
//				Истина - удалить запись по переданному контрагенту
//				Ложь   - сделать запись по переданному контрагенту
Процедура ВыполнитьДвиженияПоРегиструДублей(Ссылка, ИНН = "", КПП = "", НужноУдалить) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.НаличиеДублейУКонтрагентов.СоздатьМенеджерЗаписи();
	
	МенеджерЗаписи.Контрагент = Ссылка;
	МенеджерЗаписи.ИНН        = ИНН;
	МенеджерЗаписи.КПП        = КПП;
	
	МенеджерЗаписи.Прочитать();
	
	ЗаписьСуществует = МенеджерЗаписи.Выбран();
	
	Если НужноУдалить и ЗаписьСуществует Тогда
		МенеджерЗаписи.Удалить();
	ИначеЕсли Не НужноУдалить и НЕ ЗаписьСуществует Тогда
		
		МенеджерЗаписи.Контрагент = Ссылка;
		МенеджерЗаписи.ИНН        = ИНН;
		МенеджерЗаписи.КПП        = КПП;
		
		МенеджерЗаписи.Активность = Истина;
		
		МенеджерЗаписи.Записать(Истина);
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ОтменитьРегистрациюДублей() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НаличиеДублейУКонтрагентов.ИНН КАК ИНН,
	|	НаличиеДублейУКонтрагентов.КПП КАК КПП,
	|	КОЛИЧЕСТВО(НаличиеДублейУКонтрагентов.Контрагент) КАК КоличествоДублей
	|ПОМЕСТИТЬ ТаблицаПодсчетаКоличествоДублей
	|ИЗ
	|	РегистрСведений.НаличиеДублейУКонтрагентов КАК НаличиеДублейУКонтрагентов
	|
	|СГРУППИРОВАТЬ ПО
	|	НаличиеДублейУКонтрагентов.ИНН,
	|	НаличиеДублейУКонтрагентов.КПП
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИНН,
	|	КПП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НаличиеДублейУКонтрагентов.Контрагент,
	|	НаличиеДублейУКонтрагентов.ИНН,
	|	НаличиеДублейУКонтрагентов.КПП,
	|	ТаблицаПодсчетаКоличествоДублей.КоличествоДублей
	|ИЗ
	|	РегистрСведений.НаличиеДублейУКонтрагентов КАК НаличиеДублейУКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПодсчетаКоличествоДублей КАК ТаблицаПодсчетаКоличествоДублей
	|		ПО НаличиеДублейУКонтрагентов.ИНН = ТаблицаПодсчетаКоличествоДублей.ИНН
	|			И НаличиеДублейУКонтрагентов.КПП = ТаблицаПодсчетаКоличествоДублей.КПП
	|ГДЕ
	|	ТаблицаПодсчетаКоличествоДублей.КоличествоДублей = 1";
	
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
		
		ВыполнитьДвиженияПоРегиструДублей(ВыборкаРезультатаЗапроса.Контрагент, 
			ВыборкаРезультатаЗапроса.ИНН, 
			ВыборкаРезультатаЗапроса.КПП, 
			Истина);
			
	КонецЦикла;
		
КонецПроцедуры

Функция ВидГосударственногоОрганаПоКБК(КБК) Экспорт
	
	Если Лев(КБК, 3) = "182" Тогда
		Возврат Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган;
	ИначеЕсли Лев(КБК, 3) = "392" Тогда
		Возврат Перечисления.ВидыГосударственныхОрганов.ОрганПФР;
	ИначеЕсли Лев(КБК, 3) = "393" Тогда
		Возврат Перечисления.ВидыГосударственныхОрганов.ОрганФСС;
	Иначе
		Возврат Перечисления.ВидыГосударственныхОрганов.Прочий;
	КонецЕсли;
	
КонецФункции

// Функция формирует краткое ноаименование контрагента из полного
//
// Параметры:
//  Наименование - Строка - полное наименование контрагента
//
// Возвращаемое значение:
//  Строка - краткое наименование контрагента
//
// Пример:
//  ПолучитьКраткоеНаименованиеКонтрагента("Общество с ограниченной ответственностью Ромашка") вернет "Ромашка ООО"
//  ПолучитьКраткоеНаименованиеКонтрагента("ЗАО Рассвет") вернет "Рассвет ЗАО"
//  ПолучитьКраткоеНаименованиеКонтрагента("Иванов И. И. Индивидуальный предприниматель") вернет "Иванов И.И. ИП"
//
Функция ПолучитьКраткоеНаименованиеКонтрагента(Наименование) Экспорт
	
	КраткоеНаименование = СтрЗаменить(Наименование, """", "");
	
	// Заполнять в порядке СокращенноеНаименованиеОПФ, ПолноеНаименованиеОПФ
	ОПФ = Новый Массив;
	ОПФ.Добавить("ОАО");
	ОПФ.Добавить("Открытое акционерное общество");
	ОПФ.Добавить("ЗАО");
	ОПФ.Добавить("Закрытое акционерное общество");
	ОПФ.Добавить("ПАО");
	ОПФ.Добавить("Публичное акционерное общество");
	ОПФ.Добавить("ООО");
	ОПФ.Добавить("Общество с ограниченной ответственностью");
	ОПФ.Добавить("ИП");
	ОПФ.Добавить("Индивидуальный предприниматель");
	
	КраткоеНаименованиеДляПоиска = СокрЛП(ВРег(КраткоеНаименование));
	Для Индекс = 0 По ОПФ.ВГраница() Цикл
		ПозицияОПФВНаименовании = СтрНайти(КраткоеНаименованиеДляПоиска, Врег(ОПФ[Индекс]));
		Если ПозицияОПФВНаименовании > 0 Тогда
			ДлинаОПФ = СтрДлина(ОПФ[Индекс]);
			// ОПФ В левой части наименования
			Если ПозицияОПФВНаименовании = 1 Тогда
				КраткоеНаименование = Сред(КраткоеНаименование, ДлинаОПФ + 2);
				Если ДлинаОПФ > 3 Тогда
					// заменяем ОПФ на сокращенное
					КраткоеНаименование = КраткоеНаименование + " " + ОПФ[Индекс - 1];
				Иначе
					КраткоеНаименование = КраткоеНаименование + " " + ОПФ[Индекс];
				КонецЕсли;
			Иначе
				// ОПФ в правой части наименования
				Если ДлинаОПФ > 3 Тогда
					КраткоеНаименование = Сред(КраткоеНаименование, 1, СтрДлина(КраткоеНаименование) - ДлинаОПФ);
					КраткоеНаименование = КраткоеНаименование + " " + ОПФ[Индекс - 1];
				КонецЕсли;
			КонецЕсли;
			Возврат КраткоеНаименование;
		КонецЕсли;
	КонецЦикла;
	
	Возврат КраткоеНаименование;
	
КонецФункции

Функция ПолучитьСтруктуруРеквизитовКонтрагента()
	
	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("Наименование");
	СтруктураВозврата.Вставить("НаименованиеПолное");
	СтруктураВозврата.Вставить("ИНН");
	СтруктураВозврата.Вставить("КПП");
	СтруктураВозврата.Вставить("КодПоОКПО");
	СтруктураВозврата.Вставить("Банк");
	СтруктураВозврата.Вставить("БИК");
	СтруктураВозврата.Вставить("НомерСчета");
	СтруктураВозврата.Вставить("КоррСчет");
	СтруктураВозврата.Вставить("БанкДляРасчетов");
	СтруктураВозврата.Вставить("БанкДляРасчетовБИК");
	СтруктураВозврата.Вставить("БанкДляРасчетовКоррСчет");
	СтруктураВозврата.Вставить("ДолжностьРуководителя");
	СтруктураВозврата.Вставить("Руководитель");
	СтруктураВозврата.Вставить("ЮридическоеФизическоеЛицо");
	СтруктураВозврата.Вставить("СвидетельствоДатаВыдачи");
	СтруктураВозврата.Вставить("СвидетельствоСерияНомер");
	СтруктураВозврата.Вставить("ЮридическийАдрес");
	СтруктураВозврата.Вставить("ФактическийАдрес");
	СтруктураВозврата.Вставить("АдресРегистрации");
	СтруктураВозврата.Вставить("РеквизитыАдресРегистрации");
	СтруктураВозврата.Вставить("Телефон");
	СтруктураВозврата.Вставить("АдресЭлектроннойПочты");
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Читает данные электронных документов вида реквизиты организации стандарта CML 4.02
//
// Параметры:
//   АдресаXMLФайлов - Массив - массив строк с адресами данных реквизитов организации во временном хранилище
//
// Возвращаемое значение:
//  ДанныеКарточек - ТаблицаЗначений - таблица значений с колонками:
//    * ИНН - Строка - ИНН контрагента
//    * ДанныеКарточки - Структура - содержит структуру заполненную данными электронного счета,
//        см. ПолучитьСтруктуруРеквизитовКонтрагента()
//
Функция РазобратьКарточкиКонтрагентовXML(АдресаXMLФайлов) Экспорт
	
	ДанныеКарточек = Новый ТаблицаЗначений;
	ДанныеКарточек.Колонки.Добавить("ИНН");
	ДанныеКарточек.Колонки.Добавить("ДанныеКарточки");
	
	ДанныеКарточек.Индексы.Добавить("ИНН");
	
	Для Каждого АдресXMLФайла Из АдресаXMLФайлов Цикл
		
		ДанныеКарточки = ПрочитатьДанныеXMLКарточки(АдресXMLФайла);
		Если ЗначениеЗаполнено(ДанныеКарточки) Тогда
			
			Если ЗначениеЗаполнено(ДанныеКарточек.Найти(ДанныеКарточки.ИНН, "ИНН")) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаДанныхКарточки                = ДанныеКарточек.Добавить();
			СтрокаДанныхКарточки.ИНН            = ДанныеКарточки.ИНН;
			СтрокаДанныхКарточки.ДанныеКарточки = ДанныеКарточки;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеКарточек;
	
КонецФункции

Функция ПрочитатьДанныеXMLКарточки(АдресXMLФайла)
	
	СтруктураРеквизитов = ПолучитьСтруктуруРеквизитовКонтрагента();
	ОбъектXML           = Новый ЧтениеXML;
	ДвоичныеДанные      = ПолучитьИзВременногоХранилища(АдресXMLФайла);
	ВремФайл            = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("xml");
	ДвоичныеДанные.Записать(ВремФайл);
	
	Попытка
		ОбъектXML.ОткрытьФайл(ВремФайл);
		Карточка = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
	Исключение
		ОбъектXML.Закрыть();
		ШаблонСообщения = НСтр("ru = 'Возникла ошибка при чтении данных из файла %1: %2 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			ВремФайл, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронноеВзаимодействиеБПВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Чтение ЭД.'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
	
	Если НЕ Карточка.Тип() = ОбменСКонтрагентамиВнутренний.ПолучитьТипЗначенияCML("Контрагент") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КраткоеНаименование = ПолучитьКраткоеНаименованиеКонтрагента(Карточка.Наименование);
	СтруктураРеквизитов.Наименование = КраткоеНаименование;
	
	СвойствоРасчетныеСчета = Карточка.Свойства().Получить("РасчетныеСчета");
	Если СвойствоРасчетныеСчета <> Неопределено Тогда
		Данные = Карточка.Получить(СвойствоРасчетныеСчета);
		Если Данные <> Неопределено Тогда
			Для Каждого ЗначениеДанных Из Данные.РасчетныйСчет Цикл
				СтруктураРеквизитов.НомерСчета = ЗначениеДанных.НомерСчета;
				СтруктураРеквизитов.БИК        = ЗначениеДанных.Банк.БИК;
				СтруктураРеквизитов.КоррСчет   = ЗначениеДанных.Банк.СчетКорреспондентский;
				СтруктураРеквизитов.Банк       = ЗначениеДанных.Банк.Наименование;
				
				Если ЗначениеДанных.БанкКорреспондент <> Неопределено Тогда
					СтруктураРеквизитов.БанкДляРасчетовБИК      = ЗначениеДанных.БанкКорреспондент.БИК;
					СтруктураРеквизитов.БанкДляРасчетовКоррСчет = ЗначениеДанных.БанкКорреспондент.СчетКорреспондентский;
					СтруктураРеквизитов.БанкДляРасчетов         = ЗначениеДанных.БанкКорреспондент.Наименование;
				КонецЕсли;
			КонецЦикла
		КонецЕсли;
	КонецЕсли;
	
	СвойствоЮрЛицо = Карточка.Свойства().Получить("ЮрЛицо");
	Если СвойствоЮрЛицо <> Неопределено Тогда
		ЗначениеДанных = Карточка.Получить(СвойствоЮрЛицо);
		Если ЗначениеДанных <> Неопределено Тогда
			СвойствоИНН = ЗначениеДанных.Свойства().Получить("ИНН");
			Если СвойствоИНН <> Неопределено Тогда
				СтруктураРеквизитов.ИНН = ЗначениеДанных.Получить(СвойствоИНН);
			КонецЕсли;
			СвойствоКПП = ЗначениеДанных.Свойства().Получить("КПП");
			Если СвойствоКПП <> Неопределено Тогда
				СтруктураРеквизитов.КПП = ЗначениеДанных.Получить(СвойствоКПП);
			КонецЕсли;
			СвойствоОКПО = ЗначениеДанных.Свойства().Получить("ОКПО");
			Если СвойствоОКПО <> Неопределено Тогда
				СтруктураРеквизитов.КодПоОКПО = ЗначениеДанных.Получить(СвойствоОКПО);
			КонецЕсли;
			СвойствоНаименованиеПолное = ЗначениеДанных.Свойства().Получить("ОфициальноеНаименование");
			Если СвойствоНаименованиеПолное <> Неопределено Тогда
				СтруктураРеквизитов.НаименованиеПолное = ЗначениеДанных.Получить(СвойствоНаименованиеПолное);
			КонецЕсли;
			
			СвойствоРуководитель = ЗначениеДанных.Свойства().Получить("Руководитель");
			Если СвойствоРуководитель <> Неопределено Тогда
				ДанныеРуководителя = ЗначениеДанных.Получить(СвойствоРуководитель);
				Если ДанныеРуководителя <> Неопределено Тогда
					СвойствоФизЛицо = ДанныеРуководителя.Свойства().Получить("ФизЛицо");
					Если СвойствоФизЛицо <> Неопределено Тогда
						ЗначениеДанныхРуководителя = ДанныеРуководителя.Получить(СвойствоФизЛицо);
						Если ЗначениеДанных <> Неопределено Тогда
							СтруктураРеквизитов.ДолжностьРуководителя = ЗначениеДанныхРуководителя.Должность;
							СтруктураРеквизитов.Руководитель          = ЗначениеДанныхРуководителя.ПолноеНаименование;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			СвойствоЮрАдрес = ЗначениеДанных.Свойства().Получить("ЮридическийАдрес");
			Если СвойствоЮрАдрес <> Неопределено Тогда
				ДанныеЮрАдрес = ЗначениеДанных.Получить(СвойствоЮрАдрес);
				Если ДанныеЮрАдрес <> Неопределено Тогда
					СтруктураКИ                          = Обработки.ПрямойОбменЭД.НоваяКонтактнаяИнформация();
					СтруктураКИ.Представление            = ДанныеЮрАдрес.Представление;
					СтруктураКИ.КонтактнаяИнформация     = Обработки.ПрямойОбменЭД.ПолучитьXMLПредставлениеАдреса(
						ДанныеЮрАдрес.АдресноеПоле,
						Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента,
						ДанныеЮрАдрес.Представление);
					СтруктураРеквизитов.ЮридическийАдрес = СтруктураКИ;
				КонецЕсли
			КонецЕсли;
			
			СтруктураРеквизитов.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
			
		КонецЕсли
	КонецЕсли;
	
	СвойствоФизЛицо = Карточка.Свойства().Получить("ФизЛицо");
	Если СвойствоФизЛицо <> Неопределено Тогда
		ЗначениеДанных = Карточка.Получить(СвойствоФизЛицо);
		Если ЗначениеДанных <> Неопределено Тогда
			СвойствоИНН = ЗначениеДанных.Свойства().Получить("ИНН");
			Если СвойствоИНН <> Неопределено Тогда
				СтруктураРеквизитов.ИНН = ЗначениеДанных.Получить(СвойствоИНН);
			КонецЕсли;
			СвойствоОКПО = ЗначениеДанных.Свойства().Получить("ОКПО");
			Если СвойствоОКПО <> Неопределено Тогда
				СтруктураРеквизитов.КодПоОКПО = ЗначениеДанных.Получить(СвойствоОКПО);
			КонецЕсли;
			СвойствоНаименованиеПолное = ЗначениеДанных.Свойства().Получить("ПолноеНаименование");
			Если СвойствоНаименованиеПолное <> Неопределено Тогда
				СтруктураРеквизитов.НаименованиеПолное = ЗначениеДанных.Получить(СвойствоНаименованиеПолное);
			КонецЕсли;
			
			СвойствоСвидетельство = ЗначениеДанных.Свойства().Получить("Свидетельство");
			Если СвойствоСвидетельство <> Неопределено Тогда
				ДанныеСвидетельства = ЗначениеДанных.Получить(СвойствоСвидетельство);
				Если ДанныеСвидетельства <> Неопределено Тогда
					СтруктураРеквизитов.СвидетельствоДатаВыдачи = ДанныеСвидетельства.ДатаВыдачи;
					СтруктураРеквизитов.СвидетельствоСерияНомер = ДанныеСвидетельства.Номер;
				КонецЕсли;
			КонецЕсли;
			
			СвойствоАдресРегистрации = ЗначениеДанных.Свойства().Получить("АдресРегистрации");
			Если СвойствоАдресРегистрации <> Неопределено Тогда
				ДанныеАдресРегистрации = ЗначениеДанных.Получить(СвойствоАдресРегистрации);
				Если ДанныеАдресРегистрации <> Неопределено Тогда
					СтруктураКИ                          = Обработки.ПрямойОбменЭД.НоваяКонтактнаяИнформация();
					СтруктураКИ.Представление            = ДанныеАдресРегистрации.Представление;
					СтруктураКИ.КонтактнаяИнформация     = Обработки.ПрямойОбменЭД.ПолучитьXMLПредставлениеАдреса(
						ДанныеАдресРегистрации.АдресноеПоле,
						Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица,
						ДанныеАдресРегистрации.Представление);
					СтруктураРеквизитов.ЮридическийАдрес = СтруктураКИ;
				КонецЕсли
			КонецЕсли;
			
			СтруктураРеквизитов.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
			
		КонецЕсли
	КонецЕсли;
	
	СвойствоКонтакты = Карточка.Свойства().Получить("Контакты");
	Если СвойствоКонтакты <> Неопределено Тогда
		ЗначениеДанных =  Карточка.Получить(СвойствоКонтакты);
		Если ЗначениеДанных <> Неопределено Тогда
			Для Каждого Контакт Из Карточка.Контакты.Контакт Цикл
				Если Контакт.Тип = "Телефон рабочий" Тогда
					СтруктураРеквизитов.Телефон = Контакт.Значение;
				КонецЕсли;
				Если Контакт.Тип = "Почта" Тогда
					СтруктураРеквизитов.АдресЭлектроннойПочты = Контакт.Значение;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	СвойствоАдрес = Карточка.Свойства().Получить("Адрес");
	Если СвойствоАдрес <> Неопределено Тогда
		ЗначениеДанных = Карточка.Получить(СвойствоАдрес);
		Если ЗначениеДанных <> Неопределено Тогда
			СтруктураКИ                          = Обработки.ПрямойОбменЭД.НоваяКонтактнаяИнформация();
			СтруктураКИ.Представление            = ЗначениеДанных.Представление;
			СтруктураКИ.КонтактнаяИнформация     = Обработки.ПрямойОбменЭД.ПолучитьXMLПредставлениеАдреса(
				ЗначениеДанных.АдресноеПоле,
				Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента,
				ЗначениеДанных.Представление);
			СтруктураРеквизитов.ФактическийАдрес = СтруктураКИ;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураРеквизитов;
	
КонецФункции


#Область СведенияОКонтрагенте

Функция СведенияОКонтрагенте(Контрагент, ДатаСведений) Экспорт
	
	СписокСведений = "Наименование, ЮридическоеФизическоеЛицо, ИНН, КПП";
	СведенияОКонтрагенте = Новый Структура(СписокСведений);
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент, 
				"Наименование, НаименованиеПолное, ЮридическоеФизическоеЛицо, ИНН, КПП, СтранаРегистрации");
		
		СведенияОКонтрагенте.ЮридическоеФизическоеЛицо = Реквизиты.ЮридическоеФизическоеЛицо;
		СведенияОКонтрагенте.Наименование = ?(ЗначениеЗаполнено(Реквизиты.НаименованиеПолное), Реквизиты.НаименованиеПолное, Реквизиты.Наименование);
		СведенияОКонтрагенте.ИНН          = Реквизиты.ИНН;
		
		Если Реквизиты.СтранаРегистрации = Справочники.СтраныМира.Россия Тогда
			
			СведенияОКонтрагенте.КПП = КППНаДату(Контрагент, ДатаСведений);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СведенияОКонтрагенте;
	
КонецФункции

Функция КППНаДату(Контрагент, ДатаСведений) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Контрагент)
		ИЛИ ТипЗнч(Контрагент) <> Тип("СправочникСсылка.Контрагенты") Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаСведений) Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "КПП");
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Контрагент", Контрагент);
	Запрос.Параметры.Вставить("ДатаСведений", ДатаСведений);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(ИсторияКППКонтрагентов.Период) КАК Период,
	|	ИсторияКППКонтрагентов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ЗначенияКПП
	|ИЗ
	|	Справочник.Контрагенты.ИсторияКПП КАК ИсторияКППКонтрагентов
	|ГДЕ
	|	ИсторияКППКонтрагентов.Ссылка = &Контрагент
	|	И ИсторияКППКонтрагентов.Период <= &ДатаСведений
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсторияКППКонтрагентов.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсторияКППКонтрагентов.КПП КАК КПП
	|ИЗ
	|	ЗначенияКПП КАК ЗначенияКПП
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты.ИсторияКПП КАК ИсторияКППКонтрагентов
	|		ПО ЗначенияКПП.Ссылка = ИсторияКППКонтрагентов.Ссылка
	|			И ЗначенияКПП.Период = ИсторияКППКонтрагентов.Период";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КПП;
	Иначе
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "КПП");
	КонецЕсли;
	
КонецФункции

Процедура УстановитьАктуальноеЗначениеИсторииКПП(КПП, ИсторияКПП) Экспорт
	
	КоличествоЗаписей = ИсторияКПП.Количество();
	
	Если КоличествоЗаписей > 0 Тогда
		
		ИсторияКПП.Сортировать("Период");
		АктуальнаяЗаписьИстории = ИсторияКПП[КоличествоЗаписей - 1];
		АктуальнаяЗаписьИстории.КПП = КПП;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Печать конвертов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Конверт";
	КомандаПечати.Представление = НСтр("ru = 'Конверт'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиКонверта";
	КомандаПечати.СписокФорм    = "ФормаЭлемента,ФормаСписка";
	
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если ПараметрыПечати.Свойство("ФорматКонверта")
		И ПараметрыПечати.Свойство("ИмяМакета")
		И УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, ПараметрыПечати.ИмяМакета) Тогда
		ТабличныйДокумент = ПечатьКонверта(МассивОбъектов, ОбъектыПечати, ПараметрыПечати);
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			ПараметрыПечати.ИмяМакета,
			"Конверт", 
			ТабличныйДокумент, ,
			"ОбщийМакет." + ПараметрыПечати.ИмяМакета);
	КонецЕсли;
	
КонецПроцедуры

#Область ПечатьКонвертов

Функция ПечатьКонверта(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	Результат = Новый ТабличныйДокумент;
	
	ДополнитьПараметрыПечатиКонверта(ПараметрыПечати);
	УстановитьПараметрыПечатиКонверта(Результат, ПараметрыПечати);
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет." + ПараметрыПечати.ИмяМакета);
	
	ОбъектПечати = МассивОбъектов[0];
	МетаданныеОбъектаПечати = ОбъектПечати.Метаданные();
	
	Запрос = Новый Запрос;
	Если ТипЗнч(ОбъектПечати) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		Запрос.Текст = ТекстЗапросаПечатьКонвертовИзКонтрагентов();
		Запрос.УстановитьПараметр("Организация", ПараметрыПечати.Организация);
		
	ИначеЕсли ТипЗнч(ОбъектПечати) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		
		Запрос.Текст = ТекстЗапросаПечатьКонвертовИзДоговоровКонтрагентов();
		
	ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", МетаданныеОбъектаПечати)
		И ОбщегоНазначения.ЕстьРеквизитОбъекта("Контрагент", МетаданныеОбъектаПечати) Тогда
		
		Запрос.Текст = ТекстЗапросаПечатьКонвертов(МетаданныеОбъектаПечати);
		
	Иначе
		
		Возврат Результат;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ОбъектыПечати", МассивОбъектов);
	ДанныеОбъектовПечати = Запрос.Выполнить().Выгрузить();
	ДанныеОбъектовПечати.Индексы.Добавить("ОбъектПечати");
	
	Получатели = ДанныеОбъектовПечати.ВыгрузитьКолонку("Получатель");
	
	Отправители = ДанныеОбъектовПечати.Скопировать(, "Отправитель");
	Отправители.Свернуть("Отправитель");
	Отправители = Отправители.ВыгрузитьКолонку("Отправитель");
	
	ВидКИПолучателей = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыПечати.ВидАдресаКонтрагента);
	АдресаПолучателей = УправлениеКонтактнойИнформациейБП.КонтактнаяИнформацияОбъектовНаДату(Получатели, , ВидКИПолучателей);
	АдресаПолучателей.Индексы.Добавить("Объект");
	
	ВидКИОтправителей = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации);
	АдресаОтправителей = УправлениеКонтактнойИнформациейБП.КонтактнаяИнформацияОбъектовНаДату(Отправители, , ВидКИОтправителей);
	АдресаОтправителей.Индексы.Добавить("Объект");
	
	ПервыйКонверт = Истина;
	Для Каждого ОбъектПечати Из МассивОбъектов Цикл
		
		Если ПервыйКонверт Тогда
			ПервыйКонверт = Ложь;
		Иначе
			Результат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = Результат.ВысотаТаблицы + 1;
		
		ДанныеОбъектаПечати = ДанныеОбъектовПечати.Найти(ОбъектПечати, "ОбъектПечати");
		
		СтруктурированныеАдреса = Новый Структура("АдресОтправителя, АдресПолучателя");
		Если ЗначениеЗаполнено(Макет.Области.Найти("Заголовок")) Тогда
			ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
			ЗаполнитьЗаголовокКонверта(Результат,
				ДанныеОбъектаПечати,
				ПараметрыПечати,
				ОбластьЗаголовок,
				АдресаПолучателей,
				АдресаОтправителей,
				СтруктурированныеАдреса);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Макет.Области.Найти("Индекс")) Тогда
			ОбластьИндекс = Макет.ПолучитьОбласть("Индекс");
			ЗаполнитьКодовыйШтамп(Результат, СтруктурированныеАдреса, ОбластьИндекс);
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(Результат,
			НомерСтрокиНачало, ОбъектыПечати, ОбъектПечати);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаПечатьКонвертовИзКонтрагентов()
	
	Результат =
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Получатель,
	|	Контрагенты.Ссылка КАК ОбъектПечати,
	|	Контрагенты.НаименованиеПолное КАК ПредставлениеПолучателя,
	|	ВЫБОР
	|		КОГДА Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|			ТОГДА Организации.ФамилияИП + "" "" + Организации.ИмяИП + "" "" + Организации.ОтчествоИП
	|		ИНАЧЕ Организации.НаименованиеСокращенное
	|	КОНЕЦ КАК ПредставлениеОтправителя,
	|	Организации.Ссылка КАК Отправитель
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО (Контрагенты.Ссылка В (&ОбъектыПечати))
	|			И (Организации.Ссылка = &Организация)
	|ГДЕ
	|	НЕ Контрагенты.Ссылка ЕСТЬ NULL ";
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаПечатьКонвертовИзДоговоровКонтрагентов()
	
	Результат =
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Владелец КАК Получатель,
	|	ДоговорыКонтрагентов.Ссылка КАК ОбъектПечати,
	|	ДоговорыКонтрагентов.Владелец.НаименованиеПолное КАК ПредставлениеПолучателя,
	|	ВЫБОР
	|		КОГДА ДоговорыКонтрагентов.Организация.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|			ТОГДА ДоговорыКонтрагентов.Организация.ФамилияИП + "" "" + ДоговорыКонтрагентов.Организация.ИмяИП + "" "" + ДоговорыКонтрагентов.Организация.ОтчествоИП
	|		ИНАЧЕ ДоговорыКонтрагентов.Организация.НаименованиеСокращенное
	|	КОНЕЦ КАК ПредставлениеОтправителя,
	|	ДоговорыКонтрагентов.Организация.Ссылка КАК Отправитель
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка В(&ОбъектыПечати)";
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаПечатьКонвертов(МетаданныеОбъектаПечати)
	
	Результат =
	"ВЫБРАТЬ
	|	Таблица.Контрагент КАК Получатель,
	|	Таблица.Организация КАК Отправитель,
	|	ВЫБОР
	|		КОГДА Таблица.Организация.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|			ТОГДА Таблица.Организация.ФамилияИП + "" "" + Таблица.Организация.ИмяИП + "" "" + Таблица.Организация.ОтчествоИП
	|		ИНАЧЕ Таблица.Организация.НаименованиеСокращенное
	|	КОНЕЦ КАК ПредставлениеОтправителя,
	|	Таблица.Ссылка КАК ОбъектПечати,
	|	Таблица.Контрагент.НаименованиеПолное КАК ПредставлениеПолучателя
	|ИЗ
	|	" + МетаданныеОбъектаПечати.ПолноеИмя() + " КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка В (&ОбъектыПечати)";
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьЗаголовокКонверта(Результат, ДанныеОбъектаПечати, ПараметрыПечати, ОбластьЗаголовок, АдресаПолучателей, АдресаОтправителей, СтруктурированныеАдреса)
	
	АдресПолучателя = АдресаПолучателей.Найти(ДанныеОбъектаПечати.Получатель, "Объект");
	Если АдресПолучателя <> Неопределено Тогда
		СведенияОбАдресеПолучателя = УправлениеКонтактнойИнформацией.СведенияОбАдресе(АдресПолучателя.ЗначенияПолей);
		ЗаполнитьПараметрыПолучателяКонверта(ДанныеОбъектаПечати,
			СведенияОбАдресеПолучателя,
			ПараметрыПечати,
			ОбластьЗаголовок);
	Иначе
		СведенияОбАдресеПолучателя = Неопределено;
	КонецЕсли;
	СтруктурированныеАдреса.АдресПолучателя = СведенияОбАдресеПолучателя;
	
	АдресОтправителя = АдресаОтправителей.Найти(ДанныеОбъектаПечати.Отправитель, "Объект");
	Если АдресОтправителя <> Неопределено Тогда
		СведенияОбАдресеОтправителя = УправлениеКонтактнойИнформацией.СведенияОбАдресе(АдресОтправителя.ЗначенияПолей);
		ЗаполнитьПараметрыОтправителяКонверта(ДанныеОбъектаПечати,
			СведенияОбАдресеОтправителя,
			ПараметрыПечати,
			ОбластьЗаголовок);
	Иначе
		СведенияОбАдресеОтправителя = Неопределено;
	КонецЕсли;
	СтруктурированныеАдреса.АдресОтправителя = СведенияОбАдресеОтправителя;
	
	Если ПараметрыПечати.ПечататьЛоготип Тогда
		ДвоичныеДанныеКартинки = Справочники.Организации.ДвоичныеДанныеКартинкиОрганизации(
			ДанныеОбъектаПечати.Отправитель,
			"ФайлЛоготип");
		
		Если ЗначениеЗаполнено(ДвоичныеДанныеКартинки) Тогда
			Для Каждого Рисунок Из ОбластьЗаголовок.Рисунки Цикл
				Если Рисунок.Имя = "ЗонаИллюстраций" Тогда
					ОбластьЗаголовок.Рисунки.ЗонаИллюстраций.Картинка = Новый Картинка(ДвоичныеДанныеКартинки);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Результат.Вывести(ОбластьЗаголовок);
	
КонецПроцедуры

Процедура ДополнитьПараметрыПечатиКонверта(ПараметрыПечати)
	
	Если ПараметрыПечати.ФорматКонверта = Перечисления.ФорматыПочтовыхКонвертов.C4 Тогда
		РазмерСтраницы = "Envelope C4";
		ДлинаПервойСтроки = 50;
		ДлинаВторойСтроки = 56;
	ИначеЕсли ПараметрыПечати.ФорматКонверта = Перечисления.ФорматыПочтовыхКонвертов.C5 Тогда
		РазмерСтраницы = "Envelope C5";
		ДлинаПервойСтроки = 36;
		ДлинаВторойСтроки = 46;
	Иначе
		РазмерСтраницы = "Envelope DL";
		ДлинаПервойСтроки = 55;
		ДлинаВторойСтроки = 65;
	КонецЕсли;
	
	ПараметрыПечати.Вставить("РазмерСтраницы"   , РазмерСтраницы);
	ПараметрыПечати.Вставить("ДлинаПервойСтроки", ДлинаПервойСтроки);
	ПараметрыПечати.Вставить("ДлинаВторойСтроки", ДлинаВторойСтроки);
	
КонецПроцедуры

Процедура УстановитьПараметрыПечатиКонверта(ТабличныйДокумент, ПараметрыПечати)
	
	ТабличныйДокумент.КлючПараметровПечати    = "ПАРАМЕТРЫ_ПЕЧАТИ_Конверт";
	ТабличныйДокумент.ПолеСверху              = 5;
	ТабличныйДокумент.ПолеСнизу               = 5;
	ТабличныйДокумент.ПолеСправа              = 5;
	ТабличныйДокумент.ПолеСлева               = 5;
	ТабличныйДокумент.РазмерСтраницы          = ПараметрыПечати.РазмерСтраницы;
	ТабличныйДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.АвтоМасштаб             = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыПолучателяКонверта(ДанныеОбъектаПечати, АдресПолучателя, ПараметрыПечати, Макет)
	
	ПредставлениеПолучателя = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(
		ДанныеОбъектаПечати.ПредставлениеПолучателя, " ");
	ЗаполнитьСекциюКонверта("Кому", ПредставлениеПолучателя, ПараметрыПечати, Макет);
	
	ПредставлениеАдресаПолучателя = ПредставлениеПочтовогоАдреса(АдресПолучателя);
	ЗаполнитьСекциюКонверта("Куда", ПредставлениеАдресаПолучателя, ПараметрыПечати, Макет);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыОтправителяКонверта(ДанныеОбъектаПечати, АдресОтправителя, ПараметрыПечати, Макет)
	
	ПредставлениеОтправителя = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(
		ДанныеОбъектаПечати.ПредставлениеОтправителя, " ");
	ЗаполнитьСекциюКонверта("ОтКого", ПредставлениеОтправителя, ПараметрыПечати, Макет);
	
	ПредставлениеАдресаОтправителя = ПредставлениеПочтовогоАдреса(АдресОтправителя);
	ЗаполнитьСекциюКонверта("Откуда", ПредставлениеАдресаОтправителя, ПараметрыПечати, Макет);
	
	Макет.Параметры.ИндексОткуда = АдресОтправителя.Индекс;
	
КонецПроцедуры

Процедура ЗаполнитьКодовыйШтамп(Результат, СтруктурированныеАдреса, ОбластьИндекс)
	
	Если ЗначениеЗаполнено(СтруктурированныеАдреса.АдресПолучателя) Тогда
		ИндексПолучателя = СтруктурированныеАдреса.АдресПолучателя.Индекс;
	Иначе
		ИндексПолучателя = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИндексПолучателя) И СтрДлина(ИндексПолучателя) = 6 Тогда
		Для Каждого Рисунок Из ОбластьИндекс.Рисунки Цикл
			Если СтрНачинаетсяС(Рисунок.Имя, "Индекс") Тогда
				ПозицияИндекса = Прав(Рисунок.Имя, 1);
				ЦифраИндекса = Сред(ИндексПолучателя, ПозицияИндекса, 1);
				Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЦифраИндекса) Тогда
					Продолжить;
				КонецЕсли;
				Рисунок.Картинка = БиблиотекаКартинок["ИндексЦифра" + ЦифраИндекса];
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЦикла;
		ИндексКуда = Новый Структура("ИндексКуда", ИндексПолучателя);
		ОбластьИндекс.Параметры.Заполнить(ИндексКуда);
	Иначе
		Для Каждого Рисунок Из ОбластьИндекс.Рисунки Цикл
			Если СтрНачинаетсяС(Рисунок.Имя, "Индекс") Тогда
				Рисунок.Картинка = БиблиотекаКартинок.ИндексЦифраПустая;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Результат.Вывести(ОбластьИндекс);
	
КонецПроцедуры

Процедура ЗаполнитьСекциюКонверта(ИмяСекции, Данные, ПараметрыПечати, Макет)
	
	Если ИмяСекции = "ОтКого" Тогда
		ВысотаСекции = 1;
	ИначеЕсли ИмяСекции = "Кому" Тогда
		ВысотаСекции = 2;
	ИначеЕсли ИмяСекции = "Откуда" И ПараметрыПечати.РазмерСтраницы = "Envelope DL" Тогда
		ВысотаСекции = 2;
	Иначе
		ВысотаСекции = 3;
	КонецЕсли;
	
	КоличествоВыведенныхВСекциюЭлементов = 0;
	ВГраницаМассиваДанных = Данные.ВГраница();
	Для НомерСекции = 1 По ВысотаСекции Цикл
		
		ИмяПараметра = ИмяСекции + НомерСекции;
		Если НомерСекции = 1 Тогда
			ДлинаСекции = ПараметрыПечати.ДлинаПервойСтроки;
		Иначе
			ДлинаСекции = ПараметрыПечати.ДлинаВторойСтроки;
		КонецЕсли;
		
		ЭлементыПараметра = Новый Массив;
		Пока КоличествоВыведенныхВСекциюЭлементов <= ВГраницаМассиваДанных 
			И СтрДлина(Данные[КоличествоВыведенныхВСекциюЭлементов]) <= ДлинаСекции Цикл
			
			ЭлементыПараметра.Добавить(Данные[КоличествоВыведенныхВСекциюЭлементов]);
			ДлинаСекции = ДлинаСекции - СтрДлина(Данные[КоличествоВыведенныхВСекциюЭлементов]);
			КоличествоВыведенныхВСекциюЭлементов = КоличествоВыведенныхВСекциюЭлементов + 1;
			
		КонецЦикла;
		ФинализироватьСекцию(ИмяПараметра, ЭлементыПараметра, Макет);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ФинализироватьСекцию(ИмяПараметра, ЭлементыПараметра, Макет)
	
	ДанныеСекции = СтрСоединить(ЭлементыПараметра, " ");
	ДанныеСекции = СтрЗаменить(ДанныеСекции, "  ", " ");
	
	ЗначениеПараметра = Новый Структура(ИмяПараметра, ДанныеСекции);
	Макет.Параметры.Заполнить(ЗначениеПараметра);
	
КонецПроцедуры

Функция ПредставлениеПочтовогоАдреса(Адрес)
	
	Результат = Новый Массив;
	ВыводитьСокращениеРегиона = Истина;
	
	Если Адрес.Свойство("Улица") И ЗначениеЗаполнено(Адрес.Улица)
		И Адрес.Свойство("УлицаСокращение") И ЗначениеЗаполнено(Адрес.УлицаСокращение) Тогда
		Если Адрес.УлицаСокращение = "ул" Тогда
			ПредставлениеУлицы = Адрес.УлицаСокращение + ". " + Адрес.Улица + ", ";
		Иначе
			ПредставлениеУлицы = Адрес.Улица + " " + Адрес.УлицаСокращение + "., ";
		КонецЕсли;
		
		Результат.Добавить(ПредставлениеУлицы);
	КонецЕсли;
	
	Если Адрес.Свойство("ДополнительнаяТерритория") И ЗначениеЗаполнено(Адрес.ДополнительнаяТерритория)
		И Адрес.Свойство("ДополнительнаяТерриторияСокращение") И ЗначениеЗаполнено(Адрес.ДополнительнаяТерриторияСокращение) Тогда
		ПредставлениеДопТерритории = Адрес.ДополнительнаяТерриторияСокращение + ". " + Адрес.ДополнительнаяТерритория + ", ";
		Результат.Добавить(ПредставлениеДопТерритории);
	КонецЕсли;
	
	Если Адрес.Свойство("Здание") И ЗначениеЗаполнено(Адрес.Здание) Тогда
		ПредставлениеЗдания = НРег(Адрес.Здание.ТипЗдания) + " " + Адрес.Здание.Номер + ", ";
		Результат.Добавить(ПредставлениеЗдания);
	КонецЕсли;
	
	Если Адрес.Свойство("Корпуса") И ЗначениеЗаполнено(Адрес.Корпуса) Тогда
		ПредставлениеКорпуса = "";
		Для Каждого Корпус Из Адрес.Корпуса Цикл
			ПредставлениеКорпуса = ПредставлениеКорпуса + НРег(Корпус.ТипКорпуса) + " " + Корпус.Номер + ", ";
		КонецЦикла;
		Результат.Добавить(ПредставлениеКорпуса);
	КонецЕсли;
	
	Если Адрес.Свойство("Помещения") И ЗначениеЗаполнено(Адрес.Помещения) Тогда
		ПредставлениеПомещения = "";
		Для Каждого Помещение Из Адрес.Помещения Цикл
			ПредставлениеПомещения = ПредставлениеПомещения + НРег(Помещение.ТипПомещения) + " " + Помещение.Номер + ", ";
		КонецЦикла;
		Результат.Добавить(ПредставлениеПомещения);
	КонецЕсли;
	
	Если Адрес.Свойство("Город") И ЗначениеЗаполнено(Адрес.Город)
		И Адрес.Свойство("ГородСокращение") И ЗначениеЗаполнено(Адрес.ГородСокращение) Тогда
		ПредставлениеГорода = НРег(Адрес.ГородСокращение) + ". " + Адрес.Город + ", ";
		Результат.Добавить(ПредставлениеГорода);
		ВыводитьСокращениеРегиона = Ложь;
	КонецЕсли;
	
	Если Адрес.Свойство("ВнутригородскойРайон") И ЗначениеЗаполнено(Адрес.ВнутригородскойРайон)
		И Адрес.Свойство("ВнутригородскойРайонСокращение") И ЗначениеЗаполнено(Адрес.ВнутригородскойРайонСокращение) Тогда
		ПредставлениеВнутригородскогоРайона = НРег(Адрес.ВнутригородскойРайонСокращение) + ". " + Адрес.ВнутригородскойРайон + ", ";
		Результат.Добавить(ПредставлениеВнутригородскогоРайона);
	КонецЕсли;
	
	Если Адрес.Свойство("НаселенныйПункт") И ЗначениеЗаполнено(Адрес.НаселенныйПункт)
		И Адрес.Свойство("НаселенныйПунктСокращение") И ЗначениеЗаполнено(Адрес.НаселенныйПунктСокращение) Тогда
		ПредставлениеНаселенногоПункта = НРег(Адрес.НаселенныйПунктСокращение) + ". " + Адрес.НаселенныйПункт + ", ";
		Результат.Добавить(ПредставлениеНаселенногоПункта);
		ВыводитьСокращениеРегиона = Ложь;
	КонецЕсли;
	
	Если Адрес.Свойство("Район") И ЗначениеЗаполнено(Адрес.Район)
		И Адрес.Свойство("РайонСокращение") И ЗначениеЗаполнено(Адрес.РайонСокращение) Тогда
		ПредставлениеРайона = Адрес.Район + " " + НРег(Адрес.РайонСокращение) + "., ";
		Результат.Добавить(ПредставлениеРайона);
	КонецЕсли;
	
	Если Адрес.Свойство("Округ") И ЗначениеЗаполнено(Адрес.Округ)
		И Адрес.Свойство("ОкругСокращение") И ЗначениеЗаполнено(Адрес.ОкругСокращение) Тогда
		ПредставлениеОкруга = Адрес.Округ + " " + НРег(Адрес.ОкругСокращение) + "., ";
		Результат.Добавить(ПредставлениеОкруга);
	КонецЕсли;
	
	Если Адрес.Свойство("Регион") И ЗначениеЗаполнено(Адрес.Регион)
		И Адрес.Свойство("РегионСокращение") И ЗначениеЗаполнено(Адрес.РегионСокращение) Тогда
		
		Если Адрес.КодРегиона = "77"           // Москва
			Или Адрес.КодРегиона = "78"        // Санкт-Петербург
			Или Адрес.КодРегиона = "92"        // Севастополь
			Или Адрес.КодРегиона = "99" Тогда  // Байконур
			
			// У города федерального значения префикс "г. " не пишется если речь идет о нас.пункте в составе города федерального значения.
			ПредставлениеРегиона = ?(ВыводитьСокращениеРегиона, "г. ", "") + Адрес.Регион + ", ";
			
		Иначе
			ПредставлениеРегиона = Адрес.Регион + " " + НРег(Адрес.РегионСокращение) + "., ";
			
		КонецЕсли;
		
		Результат.Добавить(ПредставлениеРегиона);
		
	КонецЕсли;
	
	Если Адрес.Свойство("Страна") И ЗначениеЗаполнено(Адрес.Страна) Тогда
		Результат.Добавить(ТРег(Адрес.Страна));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиОбновления

//Процедура обновления справочника контрагенты
Процедура ОбновлениеСправочникаКонтрагентыПриВключенииКонтроляКорректностиИННиКПП() Экспорт
	
	ТаблицаДублейКонтрагентов = Новый ТаблицаЗначений;
	
	ТаблицаДублейКонтрагентов.Колонки.Добавить("Ссылка");
	ТаблицаДублейКонтрагентов.Колонки.Добавить("ИНН");
	ТаблицаДублейКонтрагентов.Колонки.Добавить("КПП");
	ТаблицаДублейКонтрагентов.Колонки.Добавить("ЭтоЮрЛицо");
	ТаблицаДублейКонтрагентов.Колонки.Добавить("Ключ");
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка,
	|	Контрагенты.ИНН,
	|	Контрагенты.КПП,
	|	Контрагенты.ЮридическоеФизическоеЛицо,
	|	Контрагенты.ИННВведенКорректно,
	|	Контрагенты.КППВведенКорректно,
	|	Контрагенты.РасширенноеПредставлениеИНН,
	|	Контрагенты.РасширенноеПредставлениеКПП,
	|	Контрагенты.ОбособленноеПодразделение,
	|	Контрагенты.СтранаРегистрации
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	НЕ Контрагенты.ЭтоГруппа";
	
	ВыборкаРезультата = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаРезультата.Следующий() Цикл
		
		Ссылка = ВыборкаРезультата.Ссылка;
		
		СправочникОбъект = ВыборкаРезультата.Ссылка.ПолучитьОбъект();
		
		ЭтоЮрЛицо = (ВыборкаРезультата.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
		
		РезультатПроверкиИНН = ИдентификационныеНомераНалогоплательщиков.ПроверитьСоответствиеТребованиямИНН(ВыборкаРезультата.ИНН, ЭтоЮрЛицо);
		РезультатПроверкиКПП = ИдентификационныеНомераНалогоплательщиков.ПроверитьСоответствиеТребованиямКПП(ВыборкаРезультата.КПП, ЭтоЮрЛицо, ВыборкаРезультата.ОбособленноеПодразделение);
		
		СправочникОбъект.ИННВВеденКорректно = РезультатПроверкиИНН.СоответствуетТребованиям И (РезультатПроверкиИНН.ЭтоЮрЛицо = ЭтоЮрЛицо);
		СправочникОбъект.КППВведенКорректно = РезультатПроверкиКПП.СоответствуетТребованиям;
		
		Если СправочникОбъект.ИННВВеденКорректно 
			И (СправочникОбъект.КППВведенКорректно ИЛИ НЕ ЭтоЮрЛицо ИЛИ СправочникОбъект.СтранаРегистрации <> Справочники.СтраныМира.Россия) Тогда
			
			НоваяСтрока = ТаблицаДублейКонтрагентов.Добавить();
			
			НоваяСтрока.Ссылка = Ссылка;
			
			Если НЕ ЭтоЮрЛицо Тогда
				НоваяСтрока.Ключ = СокрЛП(ВыборкаРезультата.ИНН);
			Иначе
				НоваяСтрока.Ключ = СокрЛП(ВыборкаРезультата.ИНН) + СокрЛП(ВыборкаРезультата.КПП);
			КонецЕсли;
			
			НоваяСтрока.ИНН = ВыборкаРезультата.ИНН;
			НоваяСтрока.КПП = ВыборкаРезультата.КПП;
			
			НоваяСтрока.ЭтоЮрЛицо = ЭтоЮрЛицо;
			
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект);
		
	КонецЦикла;
	
	ТаблицаДублейКонтрагентов.Индексы.Добавить("Ключ");
	
	ОтборДляПоиска = Новый Структура("Ключ");
	
	Пока ТаблицаДублейКонтрагентов.Количество() > 0 Цикл
		
		ОтборДляПоиска.Ключ = ТаблицаДублейКонтрагентов[0].Ключ;
		
		МассивНайденныхСтрок = ТаблицаДублейКонтрагентов.НайтиСтроки(ОтборДляПоиска);
		
		НужноПисатьВРегистрДублей = МассивНайденныхстрок.Количество() > 1;
		
		Для Каждого ЭлементМассива Из МассивНайденныхстрок Цикл 
				
			Если НужноПисатьВРегистрДублей Тогда
				
				ИНН = ЭлементМассива.ИНН;
				КПП = ЭлементМассива.КПП;
				
				СправочникОбъект = ЭлементМассива.Ссылка.ПолучитьОбъект();
				
				СправочникОбъект.РасширенноеПредставлениеИНН = ИНН;
				
				СправочникОбъект.РасширенноеПредставлениеКПП = КПП;
				
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект);
				
				ВыполнитьДвиженияПоРегиструДублей(ЭлементМассива.Ссылка, ЭлементМассива.ИНН, ЭлементМассива.КПП, Ложь);
				
			КонецЕсли;
			
			ТаблицаДублейКонтрагентов.Удалить(ЭлементМассива);
			
		КонецЦикла;	
		
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ЗаполнитьПризнакПринадлежностьКонтрагентаГосударственнымОрганам(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	Контрагенты.Ссылка КАК Контрагент,
	|	ПлатежноеПоручение.КодБК КАК КодБК,
	|	ЕСТЬNULL(РегистрацииВНалоговомОргане.Код, """") КАК КодНалоговогоОргана,
	|	Организации.КодПодчиненностиФСС,
	|	Организации.КодОрганаПФР,
	|	МАКСИМУМ(ПлатежноеПоручение.Дата) КАК Дата
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО ПлатежноеПоручение.Контрагент = Контрагенты.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО ПлатежноеПоручение.Организация = Организации.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	|		ПО ПлатежноеПоручение.КодОКАТО = РегистрацииВНалоговомОргане.КодПоОКТМО
	|			И (Организации.ГоловнаяОрганизация = РегистрацииВНалоговомОргане.Владелец)
	|ГДЕ
	|	ПлатежноеПоручение.ПеречислениеВБюджет = ИСТИНА
	|	И Контрагенты.ГосударственныйОрган = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	Контрагенты.Ссылка,
	|	ПлатежноеПоручение.КодБК,
	|	ЕСТЬNULL(РегистрацииВНалоговомОргане.Код, """"),
	|	Организации.КодПодчиненностиФСС,
	|	Организации.КодОрганаПФР
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ
	|ИТОГИ ПО
	|	Контрагент";
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			Контрагент = Выборка.Контрагент.ПолучитьОбъект();
			Контрагент.ГосударственныйОрган = Истина;
			ВыборкаКонтрагента = Выборка.Выбрать();
			Пока ВыборкаКонтрагента.Следующий() Цикл
				
				Если НЕ ЗначениеЗаполнено(Контрагент.ВидГосударственногоОргана) Тогда
					Контрагент.ВидГосударственногоОргана = ВидГосударственногоОрганаПоКБК(ВыборкаКонтрагента.КодБК);
				КонецЕсли;
				
				Если Контрагент.ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.Прочий Тогда
					Прервать;
				КонецЕсли;
				
				Если Контрагент.ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.ОрганПФР
					И ЗначениеЗаполнено(ВыборкаКонтрагента.КодОрганаПФР) Тогда
					
					Контрагент.КодГосударственногоОргана = Лев(ВыборкаКонтрагента.КодОрганаПФР, 3);
					
				ИначеЕсли Контрагент.ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.ОрганФСС 
					И ЗначениеЗаполнено(ВыборкаКонтрагента.КодПодчиненностиФСС) Тогда
					
					Контрагент.КодГосударственногоОргана = Лев(ВыборкаКонтрагента.КодПодчиненностиФСС, 4);
					
				ИначеЕсли Контрагент.ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган
					И ЗначениеЗаполнено(ВыборкаКонтрагента.КодНалоговогоОргана) Тогда
					Контрагент.КодГосударственногоОргана = ВыборкаКонтрагента.КодНалоговогоОргана;
				КонецЕсли;
				
			КонецЦикла;
			
			Если Контрагент.ВидГосударственногоОргана <> Перечисления.ВидыГосударственныхОрганов.Прочий
				И НЕ ЗначениеЗаполнено(Контрагент.КодГосударственногоОргана) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не возможно заполнить код государственного органа у контрагента ""%1"". Код государственного органа необходимо заполнить вручную'"),
					Выборка.Контрагент);
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,, 
					Выборка.Контрагент, ТекстСообщения);
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Контрагент);
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
		Исключение
			
			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось заполнить данные государственного органа ""%1"" по причине:
					|%2'"), 
					Выборка.Контрагент,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,, 
				Выборка.Контрагент, ТекстСообщения);
			
		КонецПопытки;
	
	КонецЦикла;
	
	Если ОбъектовОбработано + ПроблемныхОбъектов = 0 Тогда
	
		Параметры.ОбработкаЗавершена = Истина;
	
	Иначе
		
		Параметры.ОбработкаЗавершена = Ложь;

		Если ОбъектовОбработано = 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедуре Контрагенты.ЗаполнитьПризнакПринадлежностьКонтрагентаГосударственнымОрганам
					|не удалось заполнить данные государственных органов в %1 контрагентах.'"), 
					ПроблемныхОбъектов);
			ВызватьИсключение ТекстСообщения;
		Иначе
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,,,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Процедура Контрагенты.ЗаполнитьПризнакПринадлежностьКонтрагентаГосударственнымОрганам
						|обработала очередную порцию записей в справочнике Контрагенты: %1 элементов'"), 
						ОбъектовОбработано));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНалоговыйНомерИностранногоКонтрагента() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.СтранаРегистрации <> ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|	И Контрагенты.СтранаРегистрации <> ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	|	И Контрагенты.ЭтоГруппа = ЛОЖЬ
	|	И Контрагенты.НалоговыйНомер = """"
	|	И Контрагенты.ИНН <> """"";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		КонтрагентОбъект = Выборка.Ссылка.ПолучитьОбъект();
		КонтрагентОбъект.НалоговыйНомер = КонтрагентОбъект.ИНН;
		КонтрагентОбъект.ИНН = "";
		КонтрагентОбъект.ИННВведенКорректно = "";
		КонтрагентОбъект.РасширенноеПредставлениеИНН = "";
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(КонтрагентОбъект);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПустуюСтрануРегистрации() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	|	И Контрагенты.ЭтоГруппа = ЛОЖЬ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		КонтрагентОбъект = Выборка.Ссылка.ПолучитьОбъект();
		КонтрагентОбъект.СтранаРегистрации = Справочники.СтраныМира.Россия;
		Если ЗначениеЗаполнено(КонтрагентОбъект.НалоговыйНомер)
			И НЕ ЗначениеЗаполнено(КонтрагентОбъект.ИНН) Тогда
			КонтрагентОбъект.ИНН = КонтрагентОбъект.НалоговыйНомер;
			КонтрагентОбъект.ИННВведенКорректно = Истина;
			КонтрагентОбъект.РасширенноеПредставлениеИНН = КонтрагентОбъект.ИНН;
			КонтрагентОбъект.НалоговыйНомер    = "";
		КонецЕсли;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(КонтрагентОбъект);
		
	КонецЦикла;
	
КонецПроцедуры

Функция НаименованияНаДату(Контрагент, ДатаСведений) Экспорт
	
	НаименованияКонтрагента = Новый Структура("СокращенноеНаименование, ПолноеНаименование, НаименованиеДляПечатныхФорм", "", "", "");
	
	Если НЕ ЗначениеЗаполнено(Контрагент)
		ИЛИ ТипЗнч(Контрагент) <> Тип("СправочникСсылка.Контрагенты") Тогда
		Возврат НаименованияКонтрагента;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаСведений) Тогда
		Запрос = Новый Запрос();
		Запрос.Параметры.Вставить("Контрагент", Контрагент);
		Запрос.Параметры.Вставить("ДатаСведений", ДатаСведений);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	МАКСИМУМ(ИсторияНаименованийКонтрагентов.Период) КАК Период,
		|	ИсторияНаименованийКонтрагентов.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ЗначенияНаименований
		|ИЗ
		|	Справочник.Контрагенты.ИсторияНаименований КАК ИсторияНаименованийКонтрагентов
		|ГДЕ
		|	ИсторияНаименованийКонтрагентов.Ссылка = &Контрагент
		|	И ИсторияНаименованийКонтрагентов.Период <= &ДатаСведений
		|
		|СГРУППИРОВАТЬ ПО
		|	ИсторияНаименованийКонтрагентов.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсторияНаименованийКонтрагентов.Ссылка.Наименование КАК Наименование,
		|	ИсторияНаименованийКонтрагентов.НаименованиеПолное КАК НаименованиеПолное
		|ИЗ
		|	ЗначенияНаименований КАК ЗначенияНаименований
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты.ИсторияНаименований КАК ИсторияНаименованийКонтрагентов
		|		ПО ЗначенияНаименований.Ссылка = ИсторияНаименованийКонтрагентов.Ссылка
		|			И ЗначенияНаименований.Период = ИсторияНаименованийКонтрагентов.Период";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			НаименованияКонтрагента.СокращенноеНаименование     = Выборка.Наименование;
			НаименованияКонтрагента.ПолноеНаименование          = Выборка.НаименованиеПолное;
			НаименованияКонтрагента.НаименованиеДляПечатныхФорм = Выборка.НаименованиеПолное;
			Возврат НаименованияКонтрагента;
		КонецЕсли;
	КонецЕсли;
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент, "Наименование, НаименованиеПолное");
	НаименованияКонтрагента.СокращенноеНаименование     = ЗначенияРеквизитов.Наименование;
	НаименованияКонтрагента.ПолноеНаименование          = ЗначенияРеквизитов.НаименованиеПолное;
	НаименованияКонтрагента.НаименованиеДляПечатныхФорм = ЗначенияРеквизитов.НаименованиеПолное;
	Возврат НаименованияКонтрагента;
	
КонецФункции

Процедура УстановитьАктуальноеЗначениеИсторииНаименований(НаименованиеПолное, ИсторияНаименований) Экспорт
	
	КоличествоЗаписей = ИсторияНаименований.Количество();
	
	Если КоличествоЗаписей > 0 Тогда
		
		ИсторияНаименований.Сортировать("Период");
		АктуальнаяЗаписьИстории = ИсторияНаименований[КоличествоЗаписей - 1];
		АктуальнаяЗаписьИстории.НаименованиеПолное = НаименованиеПолное;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОсновныеДоговораКонтрагентов(Параметры) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ДоговорыКонтрагентов.Организация,
	|	Контрагенты.Ссылка КАК Контрагент,
	|	ДоговорыКонтрагентов.ВидДоговора,
	|	Контрагенты.УдалитьОсновнойДоговорКонтрагента КАК Договор
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО Контрагенты.УдалитьОсновнойДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
	|ГДЕ
	|	Контрагенты.УдалитьОсновнойДоговорКонтрагента <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)";
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Запишем договоры контрагентов в регистр "ОсновныеДоговорыКонтрагента"
		НаборЗаписей = РегистрыСведений.ОсновныеДоговорыКонтрагента.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
		НаборЗаписей.Отбор.Контрагент.Установить(Выборка.Контрагент);
		НаборЗаписей.Отбор.ВидДоговора.Установить(Выборка.ВидДоговора);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() = 0 Тогда
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Попытка
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			Исключение
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось установить основной договор контрагента ""%1"" по причине:
						|%2'"), 
					Выборка.Контрагент,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,, 
					Выборка.Контрагент, ТекстСообщения);
			КонецПопытки
		КонецЕсли;
		
		Попытка
			// Очистим реквизит ОсновнойДоговорКонтрагента
			Контрагент = Выборка.Контрагент.ПолучитьОбъект();
			Контрагент.УдалитьОсновнойДоговорКонтрагента = Неопределено;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Контрагент);
			ОбъектовОбработано = ОбъектовОбработано + 1;
		Исключение
			// Если не удалось обработать какого-либо контрагента, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось очистить неиспользуемый реквизит ""Основной договор контрагента"" в контрагенте ""%1"" по причине:
					|%2'"), 
					Выборка.Контрагент,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,, 
				Выборка.Контрагент, ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	Если ОбъектовОбработано + ПроблемныхОбъектов = 0 Тогда
		Параметры.ОбработкаЗавершена = Истина;
	Иначе
		Параметры.ОбработкаЗавершена = Ложь;
		Если ОбъектовОбработано = 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедуре Контрагенты.ЗаполнитьОсновныеДоговораКонтрагентов
					|не удалось очистить неиспользуемый реквизит ""Основной договор контрагента"" в %1 контрагентах.'"), 
					ПроблемныхОбъектов);
			ВызватьИсключение ТекстСообщения;
		Иначе
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,,,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Процедура Контрагенты.ЗаполнитьОсновныеДоговораКонтрагентов
						|обработала очередную порцию записей в справочнике Контрагенты: %1 элементов'"), 
						ОбъектовОбработано));
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура УдалитьПробелыИНН() Экспорт

	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка,
	|	Контрагенты.ИНН КАК ИНН
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|	И Контрагенты.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)";
	
	ВыборкаРезультата = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаРезультата.Следующий() Цикл
		Если СтрДлина(ВыборкаРезультата.ИНН) > 10 Тогда
			Объект = ВыборкаРезультата.Ссылка.ПолучитьОбъект();
			Объект.ИНН = СокрП(ВыборкаРезультата.ИНН);
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗадолженностьПоКонтрагенту(Контрагент) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("НамДолжны", 0);
	Результат.Вставить("МыДолжны", 0);
	Результат.Вставить("НеоплаченныеСчетаСумма", 0);
	Результат.Вставить("НеоплаченныеСчетаКоличество", 0);
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СчетНаОплатуПокупателю.Ссылка) КАК НеоплаченныеСчетаКоличество,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(Валюты.Кратность, 0) = 0
	|				ТОГДА СчетНаОплатуПокупателю.СуммаДокумента
	|			ИНАЧЕ СчетНаОплатуПокупателю.СуммаДокумента * Валюты.Курс / Валюты.Кратность
	|		КОНЕЦ) КАК НеоплаченныеСчетаСумма
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументов КАК СтатусыДокументов
	|		ПО (СтатусыДокументов.Документ = СчетНаОплатуПокупателю.Ссылка)
	|			И (СтатусыДокументов.Организация = СчетНаОплатуПокупателю.Организация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, ) КАК Валюты
	|		ПО СчетНаОплатуПокупателю.ВалютаДокумента = Валюты.Валюта
	|ГДЕ
	|	СчетНаОплатуПокупателю.Контрагент = &Контрагент
	|	И СчетНаОплатуПокупателю.Проведен
	|	И ЕСТЬNULL(СтатусыДокументов.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусОплатыСчета.ПустаяСсылка)) В (&СтатусыНеоплаченныхСчетов)
	|	И СчетНаОплатуПокупателю.Организация В(&СписокОрганизаций)
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетНаОплатуПокупателю.Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет В (&СписокСчетовСПокупателями)
	|			ТОГДА ХозрасчетныйОстатки.СуммаРазвернутыйОстатокДт
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НамДолжны,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет В (&СписокСчетовСПоставщиками)
	|			ТОГДА ХозрасчетныйОстатки.СуммаРазвернутыйОстатокКт
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК МыДолжны,
	|	ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов) КАК Договор
	|ПОМЕСТИТЬ Остатки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			,
	|			Счет В (&СписокСчетов),
	|			&СубконтоКонтрагентДоговор,
	|			Организация В (&СписокОрганизаций)
	|				И Субконто1 = &Контрагент) КАК ХозрасчетныйОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Остатки.Договор.ВидДоговора В (&ВидыДоговоровПокупателей)
	|					ТОГДА Остатки.НамДолжны
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК НамДолжны,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Остатки.Договор.ВидДоговора В (&ВидыДоговоровПоставщиков)
	|					ТОГДА Остатки.МыДолжны
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК МыДолжны
	|ИЗ
	|	Остатки КАК Остатки";
	
	СубконтоКонтрагентДоговор = Новый СписокЗначений;
	СубконтоКонтрагентДоговор.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	СубконтоКонтрагентДоговор.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	СтатусыНеоплаченныхСчетов = Новый Массив;
	СтатусыНеоплаченныхСчетов.Добавить(Перечисления.СтатусОплатыСчета.ПустаяСсылка());
	СтатусыНеоплаченныхСчетов.Добавить(Перечисления.СтатусОплатыСчета.НеОплачен);
	СтатусыНеоплаченныхСчетов.Добавить(Перечисления.СтатусОплатыСчета.ОплаченЧастично);
	
	СписокДоступныхОрганизаций = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Ложь);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("СубконтоКонтрагентДоговор", СубконтоКонтрагентДоговор);
	Запрос.УстановитьПараметр("СписокСчетовСПокупателями", МониторРуководителя.СчетаРасчетовСКонтрагентами(1));
	Запрос.УстановитьПараметр("СписокСчетовСПоставщиками", МониторРуководителя.СчетаРасчетовСКонтрагентами(2));
	СписокСчетов = МониторРуководителя.СчетаРасчетовСКонтрагентами(1);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокСчетов, МониторРуководителя.СчетаРасчетовСКонтрагентами(2), Истина);
	Запрос.УстановитьПараметр("СписокСчетов", СписокСчетов);
	Запрос.УстановитьПараметр("ВидыДоговоровПокупателей", БухгалтерскиеОтчеты.ВидыДоговоровПокупателей());
	Запрос.УстановитьПараметр("ВидыДоговоровПоставщиков", БухгалтерскиеОтчеты.ВидыДоговоровПоставщиков());
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокДоступныхОрганизаций);
	Запрос.УстановитьПараметр("СтатусыНеоплаченныхСчетов", СтатусыНеоплаченныхСчетов);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если НЕ РезультатЗапроса[0].Пустой() Тогда
		ЗаполнитьЗначенияСвойств(Результат, РезультатЗапроса[0].Выгрузить()[0]);
	КонецЕсли;
	
	Если НЕ РезультатЗапроса[2].Пустой() Тогда
		ЗаполнитьЗначенияСвойств(Результат, РезультатЗапроса[2].Выгрузить()[0]);
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьСтрануРегистрацииВКонтрагентах() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.ИНН КАК ИНН,
	|	Контрагенты.КПП КАК КПП,
	|	ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка) КАК СтранаРегистрации,
	|	"""" КАК РегистрационныйНомерВСтранеРегистрации,
	|	"""" КАК КодНалогоплательщикаВСтранеРегистрации
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)";
	УчетОбособленныхПодразделений.УстановитьТекстЗапросаЗаполнитьСтрануРегистрацииВКонтрагентах(Запрос.Текст);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Контрагент = Выборка.Контрагент.ПолучитьОбъект();
		Если ЗначениеЗаполнено(Выборка.СтранаРегистрации) Тогда
			УчетОбособленныхПодразделений.ЗаполнитьСтрануРегистрацииКонтрагента(Контрагент, Выборка);
		Иначе
			Контрагент.СтранаРегистрации = Справочники.СтраныМира.Россия;
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Контрагент);
		
	КонецЦикла;
	
КонецПроцедуры

Функция СтранаРегистрацииПоКоду(КодСтраныМираАльфа2) Экспорт
	
	СтранаРегистрации = Справочники.СтраныМира.Россия;
	
	// Программный интерфейс справочника СтраныМира рассчитан только на коды по ОКСМ.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КодАльфа2", КодСтраныМираАльфа2);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтраныМира.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтраныМира КАК СтраныМира
	|ГДЕ
	|	СтраныМира.КодАльфа2 = &КодАльфа2";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтранаРегистрации = Выборка.Ссылка;
	Иначе
		ВсеСтраны = Справочники.СтраныМира.ТаблицаКлассификатора();
		ОписаниеСтраны = ВсеСтраны.Найти(КодСтраныМираАльфа2, "КодАльфа2");
		Если ОписаниеСтраны <> Неопределено Тогда
			СтранаРегистрации = Справочники.СтраныМира.СсылкаПоДаннымКлассификатора(Новый Структура("Код", ОписаниеСтраны.Код));
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтранаРегистрации;
	
КонецФункции


#КонецОбласти


#КонецЕсли