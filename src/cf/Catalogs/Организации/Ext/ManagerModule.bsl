#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает значение функциональной опции 
// "ИспользоватьНесколькоОрганизацийБухгалтерскийУчет".
//
// Возвращаемое значение:
//     Булево - признак использования нескольких организаций.
//
Функция ИспользуетсяНесколькоОрганизаций() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизацийБухгалтерскийУчет");
	
КонецФункции

// Возвращает организацию по умолчанию.
// Если в ИБ есть только одна организация, которая не помечена на удаление и не является предопределенной,
// то будет возвращена ссылка на нее, иначе будет возвращена пустая ссылка.
//
// Возвращаемое значение:
//     СправочникСсылка.Организации - ссылка на организацию
//
Функция ОрганизацияПоУмолчанию(ИмяПользователяИБ = Неопределено) Экспорт
	
	ЗначениеПоУмолчанию = Справочники.Организации.ПустаяСсылка();
	
	Если Не ПравоДоступа("Чтение", Метаданные.Справочники.Организации) Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Если ИспользуетсяНесколькоОрганизаций() Тогда
		
		// В информационной базе ведется учет по нескольким организациям.
		// По умолчанию берем основную организация пользователя.
		
		ОсновнаяОрганизация = ХранилищеОбщихНастроек.Загрузить("ОсновнаяОрганизация",,, ИмяПользователяИБ);
		
		Если ТипЗнч(ОсновнаяОрганизация) = Тип("СправочникСсылка.Организации") Тогда
			// Проверка наличия ссылки и прав доступа
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ОсновнаяОрганизация", ОсновнаяОрганизация);
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Организации.Ссылка КАК Организация
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.Ссылка = &ОсновнаяОрганизация";
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ЗначениеПоУмолчанию = Выборка.Организация;
			КонецЕсли;
		КонецЕсли;
		
		// При включенном ограничении доступа на уровне записей, если у пользователя назначены права
		// доступа только к одной организации, то эта организация устанавливается в качестве основной
		Если НЕ ЗначениеЗаполнено(ЗначениеПоУмолчанию) И ПолучитьФункциональнуюОпцию("ОграничиватьДоступНаУровнеЗаписей") Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
			|	Организации.Ссылка КАК Организация
			|ИЗ
			|	Справочник.Организации КАК Организации";
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Количество() = 1 И Выборка.Следующий() Тогда
				ЗначениеПоУмолчанию = Выборка.Организация;
				ХранилищеОбщихНастроек.Сохранить(ВРег("ОсновнаяОрганизация"),, ЗначениеПоУмолчанию,, ИмяПользователяИБ);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		// Ведется учет по единственной организации
		
		ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
			|	Организации.Ссылка КАК Организация
			|ИЗ
			|	Справочник.Организации КАК Организации";
		
		Если ОбщегоНазначенияКлиентСервер.РежимОтладки() Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ГДЕ НЕ Организации.ПометкаУдаления";
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			Если Выборка.Количество() = 1 Тогда
				
				Если Выборка.Следующий() Тогда
					ЗначениеПоУмолчанию = Выборка.Организация;
				КонецЕсли;
				
			Иначе
				
				// Значение функциональной опции не соответствует состоянию ИБ
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Заполнение организации по умолчанию'"), УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Константы.ИспользоватьНесколькоОрганизаций,,
					НСтр("ru = 'Исправлено некорректное значение константы ""Использовать несколько организаций""'"));
					
				УстановитьПривилегированныйРежим(Истина);
				Константы.ИспользоватьНесколькоОрганизаций.Установить(Истина);
				УстановитьПривилегированныйРежим(Ложь);
				
			КонецЕсли;
			
		ИначеЕсли ПолучитьФункциональнуюОпцию("ОграничиватьДоступНаУровнеЗаписей") И КоличествоОрганизаций() > 0 Тогда
			
			// Пользователю недоступна единственная организация.
			ВызватьИсключение НСтр("ru = 'Доступ к данным по организации ограничен. Обратитесь к администратору.'");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЗначениеПоУмолчанию;
	
КонецФункции

// Возвращает количество элементов справочника Организации.
// Не учитывает предопределенные и помеченные на удаление элементы.
//
// Возвращаемое значение:
//     Число - количество организаций
//
Функция КоличествоОрганизаций() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Количество = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.Предопределенный";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Количество = Выборка.Количество;
	КонецЕсли;
	
	Возврат Количество;
	
КонецФункции

// Проверяет наличие хотя бы одной организации при ведении однофирменного учета.
//
Процедура ПроверитьНаличиеОрганизацииПриОднофирменномУчете(Организация) Экспорт
	
	Если ИспользуетсяНесколькоОрганизаций() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		
		ТекстСообщения = НСтр("ru = 'Заполните реквизиты организации'") + Символы.ПС;
		
		Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
			
			ПутьКРазделу = НСтр("ru = '(раздел Главное - Реквизиты организации)'");
			
		Иначе
			
			ПутьКРазделу = НСтр("ru = '(раздел Главное - Организации)'");
			
		КонецЕсли;
		
		ТекстСообщения = ТекстСообщения + ПутьКРазделу;
		
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает КПП организации на указанную дату.
//
// Параметры:
//     Организация - СправочникСсылка.Организация - Организация.
//     ДатаСведений - Дата - Дата, на которую нужно получить КПП организации.
//
// Возвращаемое значение:
//     Строка - КПП.
//
Функция КППНаДату(Организация, ДатаСведений) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация)
		ИЛИ ТипЗнч(Организация) <> Тип("СправочникСсылка.Организации") Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаСведений) Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "КПП");
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Организация", Организация);
	Запрос.Параметры.Вставить("ДатаСведений", ДатаСведений);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(ИсторияРегистраций.Период) КАК Период,
	|	ИсторияРегистраций.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
	|ПОМЕСТИТЬ ДатаРегистрации
	|ИЗ
	|	РегистрСведений.ИсторияРегистрацийВНалоговомОргане КАК ИсторияРегистраций
	|ГДЕ
	|	ИсторияРегистраций.СтруктурнаяЕдиница = &Организация
	|	И ИсторияРегистраций.Период <= &ДатаСведений
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсторияРегистраций.СтруктурнаяЕдиница
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтруктурнаяЕдиница,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ИсторияРегистраций.РегистрацияВНалоговомОргане.КПП, """") КАК КПП
	|ИЗ
	|	ДатаРегистрации КАК ДатаРегистрации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияРегистрацийВНалоговомОргане КАК ИсторияРегистраций
	|		ПО ДатаРегистрации.СтруктурнаяЕдиница = ИсторияРегистраций.СтруктурнаяЕдиница
	|			И ДатаРегистрации.Период = ИсторияРегистраций.Период";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КПП;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Функция возвращает массив для отбора по организации в запросах.
//
// Параметры:
//   Организация      – СправочникСсылка.Организации - Организация, выбранная в настройках
//   ПравоНаИзменение - Булево
//     - Истина - если после выполнения запроса данные бухгалтерии предполагается менять
//                и нужно проверить, что у пользователя есть право на изменение;
//     - Ложь   - если данные бухгалтерии только отображаются пользователю на чтение,
//                и нужно проверить что у него есть соответствующее право.
//   
// Возвращаемое значение:
//   Массив
//
Функция ДоступныеОрганизацииДляОтбора(Организация, ПравоНаИзменение = Ложь) Экспорт
	
	Результат = Новый Массив;
	
	ДоступныеОрганизации = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(ПравоНаИзменение);
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		
		Результат = ДоступныеОрганизации;
		
	ИначеЕсли ДоступныеОрганизации.Найти(Организация) <> Неопределено Тогда
		
		Результат = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Организация);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Процедура - Устанавливает КодОКОПФ и НаименованиеОКОПФ по сокращенному наименованию и типу организации
//
// Параметры:
//  Объект	 - ДанныеФормыСтруктура, СправочникОбъект.Организации - объект, где нужно установить ОКОПФ 
//
Процедура СформироватьОКОПФ(Объект) Экспорт
	
	Если Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		
		Объект.КодОКОПФ          = "50102";
		Объект.НаименованиеОКОПФ = НаименованиеОКОПФ(Объект.КодОКОПФ);
		
	ИначеЕсли Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо
		И НЕ Объект.ОбособленноеПодразделение Тогда
	
		Если СтрНайти(Объект.НаименованиеСокращенное, "ООО") Тогда
			Объект.КодОКОПФ	= "12300";
		ИначеЕсли СтрНайти(Объект.НаименованиеСокращенное, "ОАО") Тогда
			Объект.КодОКОПФ	= "12247";
		ИначеЕсли СтрНайти(Объект.НаименованиеСокращенное, "ПАО") Тогда
			Объект.КодОКОПФ	= "12247";
		ИначеЕсли СтрНайти(Объект.НаименованиеСокращенное, "ЗАО") Тогда
			Объект.КодОКОПФ	= "12267";
		ИначеЕсли СтрНайти(Объект.НаименованиеСокращенное, "АО") Тогда
			Объект.КодОКОПФ	= "12267";
		КонецЕсли;
		
		Объект.НаименованиеОКОПФ	= НаименованиеОКОПФ(Объект.КодОКОПФ);
		
	КонецЕсли;
	
КонецПроцедуры

// Функция - Возвращает наименование ОКОПФ по коду
//
// Параметры:
//  КодОКОПФ - Строка - код ОКОПФ
// 
// Возвращаемое значение:
//  Строка - наименование ОКОПФ
//
Функция НаименованиеОКОПФ(КодОКОПФ) Экспорт

	ОКОПФ = ОбщегоНазначенияБПВызовСервера.ПолучитьКлассификатор("ОКОПФ");

	Возврат ОКОПФ.Получить(КодОКОПФ);

КонецФункции

// Процедура - Устанавливает КодОКФС и НаименованиеОКФС
//
// Параметры:
//  Объект	 - ДанныеФормыСтруктура, СправочникОбъект.Организации - объект, где нужно установить ОКФС 
//
Процедура СформироватьОКФС(Объект) Экспорт
	
	Объект.КодОКФС	= "16";
	Объект.НаименованиеОКФС	= НаименованиеОКФС(Объект.КодОКФС);
	
КонецПроцедуры

// Функция - Возвращает наименование ОКФС по коду
//
// Параметры:
//  КодОКФС - Строка - код ОКФС
// 
// Возвращаемое значение:
//  Строка - наименование ОКФС
//
Функция НаименованиеОКФС(КодОКФС) Экспорт

	ОКФС = ОбщегоНазначенияБПВызовСервера.ПолучитьКлассификатор("ОКФС");

	Возврат ОКФС.Получить(КодОКФС);

КонецФункции

// Возвращает таблицу классификатора ОКВЭД2.
//
// Параметры:
//  ТолькоДоступныеДляВыбора - Булево - В таблицу будут включены только те строки, которые можно выбрать для вида деятельности организации.
// 
// Возвращаемое значение:
//  Таблица - Таблица классификатора ОКВЭД2.
//
Функция КлассификаторОКВЭД2(ТолькоДоступныеДляВыбора = Ложь) Экспорт
	
	КлассификаторОКВЭД2 = НовыйТаблицаДляПоискаОКВЭД();
	// Если выбираются только доступные для выбора,
	// то добавлять отдельную колонку "ДоступенДляВыбора" не имеет смысла,
	// т.к. все строки в результате будут доступны для выбора.
	Если НЕ ТолькоДоступныеДляВыбора Тогда
		КлассификаторОКВЭД2.Колонки.Добавить("ДоступенДляВыбора", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Макет = ПолучитьМакет("ОКВЭД2");
	
	ТекущаяОбласть = Макет.Области.Найти("Классификатор");
	
	Если НЕ ТекущаяОбласть = Неопределено Тогда
		
		Для НомерСтр = ТекущаяОбласть.Верх По ТекущаяОбласть.Низ Цикл
			
			КодПоказателя = СокрП(Макет.Область(НомерСтр, 1).Текст);
			Название      = СокрП(Макет.Область(НомерСтр, 2).Текст);
			
			Если КодПоказателя = "###" Тогда
				Прервать;
			ИначеЕсли ПустаяСтрока(КодПоказателя) Тогда
				Продолжить;
			Иначе
				
				ДоступенДляВыбора = КодОКВЭД2ДоступенДляВыбора(КодПоказателя);
				Если ТолькоДоступныеДляВыбора
					И НЕ ДоступенДляВыбора Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = КлассификаторОКВЭД2.Добавить();
				НоваяСтрока.Код                 = КодПоказателя;
				НоваяСтрока.Наименование        = Название;
				НоваяСтрока.ПредставлениеПоиска = ВРЕГ(КодПоказателя + " " + Название);
				Если НЕ ТолькоДоступныеДляВыбора Тогда
					НоваяСтрока.ДоступенДляВыбора = ДоступенДляВыбора;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат КлассификаторОКВЭД2;
	
КонецФункции

// Возвращает пустую таблицу для поиска в классификаторе ОКВЭД2.
//
Функция НовыйТаблицаДляПоискаОКВЭД() Экспорт
	
	Схема = Справочники.Организации.ПолучитьМакет("ОтборОКВЭД");
	
	ТаблицаДляОтбораОКВЭД = Новый ТаблицаЗначений();
	
	Для Каждого Поле Из Схема.НаборыДанных.ОКВЭД.Поля Цикл
		ТаблицаДляОтбораОКВЭД.Колонки.Добавить(Поле.Поле, Поле.ТипЗначения);
	КонецЦикла;
	
	Возврат ТаблицаДляОтбораОКВЭД;
	
КонецФункции

// Возвращает таблицу ОКВЭД2 с наложенным фильтром по СтрокаПоиска.
// Строка классификатора ОКВЭД включается в результат, если содержит все слова из СтрокаПоиска.
// 
// Параметры:
//  СтрокаПоиска         - Строка - Фильтр для отбора строк классификатора ОКВЭД2.
//  СписокВыбранныхКодов - СписокЗначений - Список, который содержит значения выбранных кодов ОКВЭД.
//  КлассификаторОКВЭД   - ТаблицаЗначений - Таблица классификатора ОКВЭД2. Структуру см. в НовыйТаблицаДляПоискаОКВЭД().
// 
// Возвращаемое значение:
//  Таблица - Таблица классификатора ОКВЭД2 с наложенным отбором по СтрокаПоиска с колонками:
//    - Код          - Строка - Код из классификатора ОКВЭД2
//    - Наименование - Строка - Наименование из классификатора ОКВЭД2
//    - Выбран       - Булево - Истина, если код содержится в СписокВыбранныхКодов.
//
Функция НайтиВКлассификатореОКВЭД2(СтрокаПоиска, СписокВыбранныхКодов, КлассификаторОКВЭД) Экспорт
	
	СхемаКомпоновки = Справочники.Организации.ПолучитьМакет("ОтборОКВЭД");
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновки.НастройкиПоУмолчанию);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ВыбранныеОКВЭД", СписокВыбранныхКодов);
	
	Отбор = КомпоновщикНастроек.Настройки.Отбор;
	Слова = СтрРазделить(ВРег(СтрЗаменить(СтрокаПоиска, """", "")), " ", Ложь);
	Для Каждого Слово ИЗ Слова Цикл
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(Отбор, "ПредставлениеПоиска", СокрЛП(Слово), ВидСравненияКомпоновкиДанных.Содержит);
	КонецЦикла;
	
	НастройкиДляКомпоновкиМакета = КомпоновщикНастроек.ПолучитьНастройки();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновки, НастройкиДляКомпоновкиМакета, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ВнешниеНаборы = Новый Структура("ТаблицаОКВЭД", КлассификаторОКВЭД);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборы);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	РезультатЗапроса = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Возврат РезультатЗапроса;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаСписка" ИЛИ ВидФормы = "ФормаВыбора" Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Параметры.Свойство("ЗначениеКопирования") И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		
		ВыбраннаяФорма = "ФормаОрганизации";
		
	ИначеЕсли Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		
		Если Параметры.Свойство("Назначение") И Параметры.Назначение = "ДляОтчетности" Тогда
			// Эти формы предназначены только для записанного элемента справочника.
			// Формы не предназначены для обособленных подразделений.
			
			Если Параметры.Свойство("ПоискИННОтвет") Тогда
				// Если передаются данные ЕГР, то опредяеляем форму по этим данным.
				Реквизиты = Новый Структура;
				Реквизиты.Вставить("ЮридическоеФизическоеЛицо", Параметры.ПоискИННОтвет.КраткиеДанные.ЮридическоеФизическоеЛицо);
				Реквизиты.Вставить("ОбособленноеПодразделение", Ложь);
			Иначе
				// Иначе определяем форму по данным ключа.
				Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
					Параметры.Ключ,
					"ЮридическоеФизическоеЛицо, ОбособленноеПодразделение");
					
			КонецЕсли;
			
			Если Реквизиты.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
				ВыбраннаяФорма = "РеквизитыПредпринимателяДляОтчетности";
			ИначеЕсли Реквизиты.ОбособленноеПодразделение = Ложь Тогда
				ВыбраннаяФорма = "РеквизитыОрганизацииДляОтчетности";
			Иначе // в т.ч. свойства коллекции Реквизиты == Неопределено
				ВыбраннаяФорма = "ФормаОрганизации";
			КонецЕсли;
		Иначе
			
			ВыбраннаяФорма = "ФормаОрганизации";
			
		КонецЕсли;
		
	Иначе
		
		// Новая организация
		ВыбраннаяФорма = "ФормаВыбораСистемыНалогообложения";
		
		Если ОбщегоНазначенияБП.ДоступенПростойИнтерфейс() И ПолучитьФункциональнуюОпцию("ИнтерфейсТаксиПростой") Тогда
			Параметры.Вставить("РежимПростогоИнтерфейса");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает двоичные данные картинки присоединенного файла к организации
//
// Параметры:
//  Организация - Ссылка на организацию, к которой присоединена картинка
//  ИмяРеквизита - Имя реквизита, который ссылается на нужную картинку
Функция ДвоичныеДанныеКартинкиОрганизации(Организация, ИмяРеквизита) Экспорт
	
	ДвоичныеДанныеКартинки = Неопределено;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		ПрисоединенныйФайл = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, ИмяРеквизита);
		Если ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
			ДанныеКартинки = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ПрисоединенныйФайл);
			ДвоичныеДанныеКартинки = ПолучитьИзВременногоХранилища(ДанныеКартинки.СсылкаНаДвоичныеДанныеФайла);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДвоичныеДанныеКартинки;
	
КонецФункции

Функция ФамилияИмяОтчествоПредпринимателя(Организация, Период) Экспорт
	
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ЮридическоеФизическоеЛицо");
	
	Если РеквизитыОрганизации.ЮридическоеФизическоеЛицо <> Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		Возврат "";
	КонецЕсли;
	
	НаименованияОрганизции = Справочники.Организации.НаименованияНаДату(Организация, Период);
	
	Возврат НаименованияОрганизции.ФИО.Представление;
	
КонецФункции

Функция ПолучитьПараметрыФормыВыбораДляКода(НазваниеМакета, ТекущийПериод) Экспорт
	
	Классификатор = Новый ТаблицаЗначений;
	
	Классификатор.Колонки.Добавить("Код");
	Классификатор.Колонки.Добавить("Наименование");
	Классификатор.Индексы.Добавить("Код");
	
	Макет	= ПолучитьМакет(НазваниеМакета);
	
	ТекущаяОбласть = Макет.Области.Найти("Классификатор");
	
	Если НЕ ТекущаяОбласть = Неопределено Тогда
		
		Для НомерСтр = ТекущаяОбласть.Верх По ТекущаяОбласть.Низ Цикл
			
			КодПоказателя	= СокрП(Макет.Область(НомерСтр, 1).Текст);
			Название		= СокрП(Макет.Область(НомерСтр, 2).Текст);
			
			Если КодПоказателя = "###" Тогда
				Прервать;
			ИначеЕсли ПустаяСтрока(КодПоказателя) Тогда
				Продолжить;
			Иначе
				НоваяСтрока = Классификатор.Добавить();
				НоваяСтрока.Код				= КодПоказателя;
				НоваяСтрока.Наименование	= Название;
			КонецЕсли;	
				
		КонецЦикла;
		
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("СписокКодов",	Классификатор);
	
	Возврат Параметры;
	
КонецФункции

Функция ИспользуемыеВидыОрганизаций() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВидыОрганизаций = Новый Структура();
	ВидыОрганизаций.Вставить("ЮридическоеЛицо", Ложь);
	ВидыОрганизаций.Вставить("ФизическоеЛицо",  Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(ВидыОрганизаций.ЮридическоеЛицо), ЛОЖЬ) КАК ЮридическоеЛицо,
	|	ЕСТЬNULL(МАКСИМУМ(ВидыОрганизаций.ФизическоеЛицо), ЛОЖЬ) КАК ФизическоеЛицо
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ВЫБОР
	|			КОГДА Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ЮридическоеЛицо,
	|		ВЫБОР
	|			КОГДА Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ФизическоеЛицо
	|	ИЗ
	|		Справочник.Организации КАК Организации) КАК ВидыОрганизаций";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ВидыОрганизаций, Выборка);
	КонецЕсли;
	
	Возврат ВидыОрганизаций;
	
КонецФункции

Процедура ОбновитьИспользуемыеВидыОрганизаций(ТребуетсяСоздатьПоставляемыеВидыНалогов = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВидыОрганизаций = ИспользуемыеВидыОрганизаций();
	
	ЕстьИзменения = Ложь;

	Если Константы.ВестиУчетИндивидуальногоПредпринимателя.Получить() <> ВидыОрганизаций.ФизическоеЛицо Тогда
		Константы.ВестиУчетИндивидуальногоПредпринимателя.Установить(ВидыОрганизаций.ФизическоеЛицо);
		ЕстьИзменения = Истина;
	КонецЕсли;
	
	Если Константы.ВестиУчетЮридическогоЛица.Получить() <> ВидыОрганизаций.ЮридическоеЛицо Тогда
		Константы.ВестиУчетЮридическогоЛица.Установить(ВидыОрганизаций.ЮридическоеЛицо);
		ЕстьИзменения = Истина;
	КонецЕсли;
	
	Если ТребуетсяСоздатьПоставляемыеВидыНалогов И ЕстьИзменения Тогда
		Справочники.ВидыНалоговИПлатежейВБюджет.СоздатьПоставляемыеЭлементы();
	КонецЕсли;
	
КонецПроцедуры

Функция ТаблицаВыбораРеквизитовДляПодстановки() Экспорт
	
	Макет = Справочники.Организации.ПолучитьМакет("РеквизитыДляПодстановки");
	
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(Макет.ПолучитьТекст());
	
	Возврат СериализаторXDTO.ПрочитатьXML(Чтение);
	
КонецФункции

Процедура ДополнитьДанныеЗаполненияПриОднофирменномУчете(ДанныеЗаполнения, ИмяРеквизитаОрганизация = "Организация") Экспорт
	
	Если ИспользуетсяНесколькоОрганизаций() Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеЗаполнения = Неопределено Тогда
		ДанныеЗаполнения = Новый Структура;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ДанныеЗаполнения.Свойство(ИмяРеквизитаОрганизация) Тогда
		ОрганизацияПоУмолчанию = ОрганизацияПоУмолчанию();
		ПроверитьНаличиеОрганизацииПриОднофирменномУчете(ОрганизацияПоУмолчанию);
		ДанныеЗаполнения.Вставить(ИмяРеквизитаОрганизация, ОрганизацияПоУмолчанию);
	КонецЕсли;
	
КонецПроцедуры

Процедура РазобратьАдрес(ОбъектXDTO, Знач Значение, ТекстОшибки)
	
	Значение = СтрЗаменить(Значение, "Индекс",         "Почтовый индекс");
	Значение = СтрЗаменить(Значение, "НаселенныйПункт","Населенный пункт");
	ДопустимыеТипы = "Почтовый индекс, Страна, Регион, Район, Населенный пункт, Город, Улица, Дом, Корпус, Квартира";
	
	Для Индекс=1 По СтрЧислоСтрок(Значение) Цикл
		ТекСтрока = СтрПолучитьСтроку(Значение, Индекс);
		Тип = Сред(ТекСтрока, 1, СтрНайти(ТекСтрока, "=") - 1);
		Если СтрНайти(ДопустимыеТипы, Тип) > 0 Тогда
			АдресноеПоле = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Адрес.АдресноеПоле", "4.02");
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(АдресноеПоле, "Тип", Тип, Истина, ТекстОшибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(АдресноеПоле, "Значение", Сред(ТекСтрока,Найти(ТекСтрока, "=") + 1), Истина, ТекстОшибки);
			ОбъектXDTO.АдресноеПоле.Добавить(АдресноеПоле);
		КонецЕсли;
	КонецЦикла
	
КонецПроцедуры

Функция ВыгрузитьРеквизитыОрганизацииВXMLФайл(Организация)
	
	БанковскийСчет = Неопределено;
	Если Организация.ОсновнойБанковскийСчет.Пустая() Тогда
		БанковскиеСчетаОрганизации = Справочники.БанковскиеСчета.БанковскиеСчетаОрганизации(Организация,
			ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
		Если БанковскиеСчетаОрганизации.Количество() = 1 Тогда
			БанковскийСчет = БанковскиеСчетаОрганизации[0].Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	РеквизитыОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Организация, ,БанковскийСчет);
	
	Если НЕ ЗначениеЗаполнено(РеквизитыОрганизации.ИНН) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстОшибки = "";
	ВерсияСхемыCML = "4.02";
	Результат = Неопределено;
	
	Попытка
		
		КонтрагентXDTO = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Контрагент", ВерсияСхемыCML);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(КонтрагентXDTO, "ИД", РеквизитыОрганизации.ИНН + "_"
			+ РеквизитыОрганизации.КПП, Истина, ТекстОшибки);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(КонтрагентXDTO, "Наименование",
			РеквизитыОрганизации.СокращенноеНаименование, Истина, ТекстОшибки);
		
		ЭтоЮрЛицо = СтрДлина(РеквизитыОрганизации.ИНН) = 10;
		
		Если ЭтоЮрЛицо Тогда
			ЮрФизЛицоXDTO = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("РеквизитыЮрЛица", ВерсияСхемыCML);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(
				ЮрФизЛицоXDTO, "ОфициальноеНаименование", РеквизитыОрганизации.ПолноеНаименование, Истина, ТекстОшибки);
			Если СтрДлина(РеквизитыОрганизации.КПП) = 9 Тогда
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ЮрФизЛицоXDTO, "КПП", РеквизитыОрганизации.КПП, , ТекстОшибки);
			Иначе
				ТекстОшибки = НСтр("ru='Ошибка при формировании карточки реквизитов: длина КПП не равна девяти знакам.'");
			КонецЕсли;
			
			Если РеквизитыОрганизации.Свойство("РуководительФИО") Тогда
				РуководительXDTO = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Контрагент", ВерсияСхемыCML);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(РуководительXDTO, "ИД",
					РеквизитыОрганизации.РуководительФИО.Представление, Истина, ТекстОшибки);
				ФизЛицоРуководительXDTO = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Контрагент.ФизЛицо", ВерсияСхемыCML);
				
				ФИОРуководителя = "";
				Если ЗначениеЗаполнено(РеквизитыОрганизации.РуководительФИО.Фамилия) Тогда
					ФИОРуководителя = РеквизитыОрганизации.РуководительФИО.Фамилия + " ";
				КонецЕсли;
				Если ЗначениеЗаполнено(РеквизитыОрганизации.РуководительФИО.Имя) Тогда
					ФИОРуководителя = ФИОРуководителя + РеквизитыОрганизации.РуководительФИО.Имя + " ";
				КонецЕсли;
				Если ЗначениеЗаполнено(РеквизитыОрганизации.РуководительФИО.Отчество) Тогда
					ФИОРуководителя = ФИОРуководителя + РеквизитыОрганизации.РуководительФИО.Отчество;
				КонецЕсли;
				
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(
					ФизЛицоРуководительXDTO, "ПолноеНаименование", ФИОРуководителя, Истина, ТекстОшибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(
					ФизЛицоРуководительXDTO, "Должность", РеквизитыОрганизации.ДолжностьРуководителяПредставление, Истина, ТекстОшибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(
					РуководительXDTO, "ФизЛицо", ФизЛицоРуководительXDTO, Истина, ТекстОшибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(
					ЮрФизЛицоXDTO, "Руководитель", РуководительXDTO, Истина, ТекстОшибки);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РеквизитыОрганизации.ЮридическийАдрес) Тогда
				АдресXDTO = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Адрес", ВерсияСхемыCML);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(АдресXDTO, "Представление", РеквизитыОрганизации.ЮридическийАдрес,
					Истина, ТекстОшибки);
				Если РеквизитыОрганизации.Свойство("ЗначенияПолейЮридическийАдрес") Тогда
					Если СтрНайти(РеквизитыОрганизации.ЗначенияПолейЮридическийАдрес, "http://www.v8.1c.ru/ssl/contactinfo") > 0 Тогда
						ЗначенияПолейЮридическийАдрес = УправлениеКонтактнойИнформацией.ПредыдущийФорматКонтактнойИнформацииXML(
							РеквизитыОрганизации.ЗначенияПолейЮридическийАдрес);
						РазобратьАдрес(АдресXDTO, ЗначенияПолейЮридическийАдрес, ТекстОшибки);
					Иначе
						РазобратьАдрес(АдресXDTO, РеквизитыОрганизации.ЗначенияПолейЮридическийАдрес, ТекстОшибки);
					КонецЕсли;
				КонецЕсли;
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ЮрФизЛицоXDTO, "ЮридическийАдрес", АдресXDTO, Истина, ТекстОшибки);
			КонецЕсли;
			
			ИмяСвойства = "ЮрЛицо";
			
		Иначе
			ЮрФизЛицоXDTO = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("РеквизитыФизЛица", ВерсияСхемыCML);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ЮрФизЛицоXDTO, "ПолноеНаименование",
				РеквизитыОрганизации.ПолноеНаименование, Истина, ТекстОшибки);
			
			Если ЗначениеЗаполнено(РеквизитыОрганизации.ЮридическийАдрес) Тогда
				АдресXDTO = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Адрес", ВерсияСхемыCML);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(АдресXDTO, "Представление", РеквизитыОрганизации.ЮридическийАдрес,
					Истина, ТекстОшибки);
				Если РеквизитыОрганизации.Свойство("ЗначенияПолейЮридическийАдрес") Тогда
					Если СтрНайти(РеквизитыОрганизации.ЗначенияПолейЮридическийАдрес, "http://www.v8.1c.ru/ssl/contactinfo") > 0 Тогда
						ЗначенияПолейАдресРегистрации = УправлениеКонтактнойИнформацией.ПредыдущийФорматКонтактнойИнформацииXML(
							РеквизитыОрганизации.ЗначенияПолейЮридическийАдрес);
						РазобратьАдрес(АдресXDTO, ЗначенияПолейАдресРегистрации, ТекстОшибки);
					Иначе
						РазобратьАдрес(АдресXDTO, РеквизитыОрганизации.ЗначенияПолейЮридическийАдрес, ТекстОшибки);
					КонецЕсли;
				КонецЕсли;
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ЮрФизЛицоXDTO, "АдресРегистрации", АдресXDTO, Истина, ТекстОшибки);
			КонецЕсли;
			
			Если РеквизитыОрганизации.Свойство("СвидетельствоДатаВыдачи")
				И РеквизитыОрганизации.Свойство("СвидетельствоСерияНомер") Тогда
				СвидетельствоXDTO = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("РеквизитыФизЛица.Свидетельство",
					ВерсияСхемыCML);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(
					СвидетельствоXDTO, "Номер", РеквизитыОрганизации.СвидетельствоСерияНомер, Истина, ТекстОшибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(
					СвидетельствоXDTO, "ДатаВыдачи", РеквизитыОрганизации.СвидетельствоДатаВыдачи, Истина, ТекстОшибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(
					ЮрФизЛицоXDTO, "Свидетельство", СвидетельствоXDTO, Истина, ТекстОшибки);
			КонецЕсли;
			ИмяСвойства = "ФизЛицо";
		КонецЕсли;
		
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ЮрФизЛицоXDTO, "ИНН" , РеквизитыОрганизации.ИНН, Истина, ТекстОшибки);
		Если СтрДлина(РеквизитыОрганизации.КодПоОКПО) = 8 ИЛИ СтрДлина(РеквизитыОрганизации.КодПоОКПО) = 10 Тогда
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ЮрФизЛицоXDTO, "ОКПО", РеквизитыОрганизации.КодПоОКПО, , ТекстОшибки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РеквизитыОрганизации.ФактическийАдрес)Тогда
			АдресXDTO = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Адрес", ВерсияСхемыCML);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(АдресXDTO, "Представление", РеквизитыОрганизации.ФактическийАдрес,
				Истина, ТекстОшибки);
			Если РеквизитыОрганизации.Свойство("ЗначенияПолейФактическийАдрес") Тогда
				Если СтрНайти(РеквизитыОрганизации.ЗначенияПолейФактическийАдрес, "http://www.v8.1c.ru/ssl/contactinfo") > 0 Тогда
					ЗначенияПолейФактическийАдрес = УправлениеКонтактнойИнформацией.ПредыдущийФорматКонтактнойИнформацииXML(
						РеквизитыОрганизации.ЗначенияПолейФактическийАдрес);
					РазобратьАдрес(АдресXDTO, ЗначенияПолейФактическийАдрес, ТекстОшибки);
				Иначе
					РазобратьАдрес(АдресXDTO, РеквизитыОрганизации.ЗначенияПолейФактическийАдрес, ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(КонтрагентXDTO, "Адрес", АдресXDTO, Истина, ТекстОшибки);
		КонецЕсли;
		
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(КонтрагентXDTO, ИмяСвойства, ЮрФизЛицоXDTO, Истина, ТекстОшибки);
		
		Если РеквизитыОрганизации.Свойство("Банк") И ЗначениеЗаполнено(РеквизитыОрганизации.Банк) Тогда
			РасчетныеСчетаXDTO = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Контрагент.РасчетныеСчета", ВерсияСхемыCML);
			РасчетныйСчетXDTO = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("РасчетныйСчет", ВерсияСхемыCML);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(
				РасчетныйСчетXDTO, "НомерСчета", РеквизитыОрганизации.НомерСчета, Истина, ТекстОшибки);
			БанкXDTO = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Банк", ВерсияСхемыCML);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(БанкXDTO, "БИК", РеквизитыОрганизации.БИК, Истина, ТекстОшибки);
			Если ЗначениеЗаполнено(РеквизитыОрганизации.КоррСчет) Тогда
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(
					БанкXDTO, "СчетКорреспондентский", РеквизитыОрганизации.КоррСчет, Истина, ТекстОшибки);
			КонецЕсли;
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(БанкXDTO, "Наименование", Строка(РеквизитыОрганизации.Банк),
				Истина, ТекстОшибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(РасчетныйСчетXDTO, "Банк",БанкXDTO, Истина, ТекстОшибки);
			РасчетныеСчетаXDTO.РасчетныйСчет.Добавить(РасчетныйСчетXDTO);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(
				КонтрагентXDTO, "РасчетныеСчета", РасчетныеСчетаXDTO, Истина, ТекстОшибки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РеквизитыОрганизации.Телефоны) ИЛИ ЗначениеЗаполнено(РеквизитыОрганизации.Email) Тогда
			КонтактнаяИнформацияXDTO = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("КонтактнаяИнформация", ВерсияСхемыCML);
			КонтактыXDTO = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Контрагент.Контакты", ВерсияСхемыCML);
			Если ЗначениеЗаполнено(РеквизитыОрганизации.Телефоны) Тогда
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(КонтактнаяИнформацияXDTO, "Тип", "Телефон рабочий", Истина, ТекстОшибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(КонтактнаяИнформацияXDTO, "Значение",
					РеквизитыОрганизации.Телефоны, Истина, ТекстОшибки);
				КонтактыXDTO.Контакт.Добавить(КонтактнаяИнформацияXDTO);
			КонецЕсли;
			
			КонтактнаяИнформацияXDTO = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("КонтактнаяИнформация", ВерсияСхемыCML);
			Если ЗначениеЗаполнено(РеквизитыОрганизации.Email) Тогда
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(КонтактнаяИнформацияXDTO, "Тип", "Почта", Истина, ТекстОшибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(КонтактнаяИнформацияXDTO, "Значение",
					РеквизитыОрганизации.Email, Истина, ТекстОшибки);
				КонтактыXDTO.Контакт.Добавить(КонтактнаяИнформацияXDTO);
			КонецЕсли;
			
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(КонтрагентXDTO, "Контакты", КонтактыXDTO, Истина, ТекстОшибки);
		КонецЕсли;
		
		КонтрагентXDTO.Проверить();
		
		Если ТекстОшибки = "" Тогда
			ИмяФайла = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("xml");
			НоваяЗаписьXML = Новый ЗаписьXML;
			НоваяЗаписьXML.ОткрытьФайл(ИмяФайла, "UTF-8");
			НоваяЗаписьXML.ЗаписатьОбъявлениеXML();
			ФабрикаXDTO.ЗаписатьXML(НоваяЗаписьXML, КонтрагентXDTO, , , , НазначениеТипаXML.Явное);
			НоваяЗаписьXML.Закрыть();
			ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
			УдалитьФайлы(ИмяФайла);
			
			АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанные, Новый УникальныйИдентификатор);
			ОписаниеФайла = Новый Структура;
			ШаблонИмениФайла = Нстр("ru='Реквизиты организации %1.xml'");
			НаименованиеОрганизации = СтрЗаменить(РеквизитыОрганизации.Представление, """", "");
			ОписаниеФайла.Вставить("Представление", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениФайла,
				НаименованиеОрганизации));
			ОписаниеФайла.Вставить("АдресВоВременномХранилище", АдресХранилища);
			Результат = ОписаниеФайла;
			
		Иначе
			ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ТекстОшибки);
			ЭлектронноеВзаимодействиеБПВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
				НСтр("ru = 'Формирование карточки организации'"),
				ТекстОшибки,
				ТекстОшибки);
		КонецЕсли;
		
	Исключение
		
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронноеВзаимодействиеБПВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
			НСтр("ru = 'Формирование карточки организации'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			ТекстСообщения);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Формирует пакеты электронных документов стандарта CML 4.02
// 
// Параметры:
//  СведенияОбОрганизациях - Массив - массив сведений об организациях, см БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице()
// 
// Возвращаемое значение:
//  Массив - содержит структуры со свойствами:
//    * Представление - Строка - наименование карточки организации
//    * АдресВоВременномХранилище - Строка - адрес карточки организации XML во временном хранилище
//
Функция СформироватьКарточкиОрганизацииВXML(МассивОбъектов) Экспорт
	
	ФайлыКОтправке = Новый Массив;
	
	Для Каждого Организация Из МассивОбъектов Цикл
		СериализованнаяКарточка = ВыгрузитьРеквизитыОрганизацииВXMLФайл(Организация);
		Если СериализованнаяКарточка <> Неопределено Тогда
			ФайлыКОтправке.Добавить(СериализованнаяКарточка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ФайлыКОтправке;
	
КонецФункции

#Область Печать

// Процедура формирования макета печати
//
Функция СформироватьПомощникРаботыФаксимильнойПечати(Организация, ОбъектыПечати, ИмяМакета)
	
	ТабличныйДокумент	= Новый ТабличныйДокумент;
	Макет				= УправлениеПечатью.МакетПечатнойФормы("Справочник.Организации." + ИмяМакета);
	
	Если Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда 
		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ПоляКЗаполнениюЮр"));
	Иначе
		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ПоляКЗаполнениюИП"));
	КонецЕсли;
	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Линия"));
	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Схема"));
	
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 1, ОбъектыПечати, Организация);
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;

КонецФункции // СформироватьПомощникРаботыФаксимильнойПечати()

// Процедура формирования макета печати
//
Функция СформироватьРеквизитыОрганизации(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.Организации." + ИмяМакета);
	
	ПервыйДокумент = Истина;
	
	Для каждого Организация Из МассивОбъектов Цикл
	
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ЮЛ = Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		ФЛ = Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		
		БанковскийСчет = Неопределено;
		Если Организация.ОсновнойБанковскийСчет.Пустая() Тогда
			БанковскиеСчетаОрганизации = Справочники.БанковскиеСчета.БанковскиеСчетаОрганизации(Организация,
				ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
			Если БанковскиеСчетаОрганизации.Количество() = 1 Тогда
				БанковскийСчет = БанковскиеСчетаОрганизации[0].Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(
			Организация, ОбщегоНазначения.ТекущаяДатаПользователя(), БанковскийСчет);
		
		Разделитель = Макет.ПолучитьОбласть("Разделитель");
		
		Область = Макет.ПолучитьОбласть("Наименование");
		Область.Параметры.НаименованиеДляПечатныхФорм = СведенияОбОрганизации.НаименованиеДляПечатныхФорм;
		ТабличныйДокумент.Вывести(Область);
		
		Если ЗначениеЗаполнено(СведенияОбОрганизации.ИНН) Тогда
			Область = Макет.ПолучитьОбласть("ИНН");
			Область.Параметры.ИНН = СведенияОбОрганизации.ИНН;
			ТабличныйДокумент.Вывести(Область);
		КонецЕсли;
		
		Если ЮЛ И ЗначениеЗаполнено(СведенияОбОрганизации.КПП) Тогда
			Область = Макет.ПолучитьОбласть("КПП");
			Область.Параметры.КПП = СведенияОбОрганизации.КПП;
			ТабличныйДокумент.Вывести(Область);
		КонецЕсли;
		
		Если ЮЛ И ЗначениеЗаполнено(СведенияОбОрганизации.ОГРН) Тогда
			Область = Макет.ПолучитьОбласть("ОГРН");
			Область.Параметры.ОГРН = СведенияОбОрганизации.ОГРН;
			ТабличныйДокумент.Вывести(Область);
		КонецЕсли;
		
		Если ФЛ И ЗначениеЗаполнено(СведенияОбОрганизации.ОГРН) Тогда
			Область = Макет.ПолучитьОбласть("ОГРНИП");
			Область.Параметры.ОГРНИП = СведенияОбОрганизации.ОГРН;
			ТабличныйДокумент.Вывести(Область);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СведенияОбОрганизации.КодПоОКПО) Тогда
			Область = Макет.ПолучитьОбласть("ОКПО");
			Область.Параметры.КодПоОКПО = СведенияОбОрганизации.КодПоОКПО;
			ТабличныйДокумент.Вывести(Область);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СведенияОбОрганизации.НомерСчета) 
			И ЗначениеЗаполнено(СведенияОбОрганизации.БИК) 
			И ЗначениеЗаполнено(СведенияОбОрганизации.КоррСчет) 
			И ЗначениеЗаполнено(СведенияОбОрганизации.Банк) Тогда
			Область = Макет.ПолучитьОбласть("РасчетныйСчет");
			Область.Параметры.НомерСчета = СведенияОбОрганизации.НомерСчета;
			Область.Параметры.БИК = СведенияОбОрганизации.БИК;
			Область.Параметры.КоррСчет = СведенияОбОрганизации.КоррСчет;
			Область.Параметры.Банк = СведенияОбОрганизации.Банк;
			ТабличныйДокумент.Вывести(Область);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СведенияОбОрганизации.ЮридическийАдрес) 
			ИЛИ ЗначениеЗаполнено(СведенияОбОрганизации.Телефоны) Тогда
			ТабличныйДокумент.Вывести(Разделитель);
		КонецЕсли;
		
		Если ЮЛ И ЗначениеЗаполнено(СведенияОбОрганизации.ЮридическийАдрес) Тогда
			Область = Макет.ПолучитьОбласть("ЮридическийАдрес");
			Область.Параметры.ЮридическийАдрес = СведенияОбОрганизации.ЮридическийАдрес;
			ТабличныйДокумент.Вывести(Область);
		КонецЕсли;
			
		Если ФЛ И ЗначениеЗаполнено(СведенияОбОрганизации.ЮридическийАдрес) Тогда
			Область = Макет.ПолучитьОбласть("АдресИП");
			Область.Параметры.АдресИП = СведенияОбОрганизации.ЮридическийАдрес;
			ТабличныйДокумент.Вывести(Область);
		КонецЕсли;
			
		Если ЗначениеЗаполнено(СведенияОбОрганизации.Телефоны) Тогда
			Область = Макет.ПолучитьОбласть("Телефон");
			Область.Параметры.Телефон = СведенияОбОрганизации.Телефоны;
			ТабличныйДокумент.Вывести(Область);
		КонецЕсли;
		
		Если ФЛ И ЗначениеЗаполнено(СведенияОбОрганизации.СвидетельствоСерияНомер) И ЗначениеЗаполнено(СведенияОбОрганизации.СвидетельствоДатаВыдачи) Тогда
			Область = Макет.ПолучитьОбласть("Свидетельство");
			Область.Параметры.СвидетельствоСерияНомер = СведенияОбОрганизации.СвидетельствоСерияНомер;
			Область.Параметры.СвидетельствоДатаВыдачи = Формат(СведенияОбОрганизации.СвидетельствоДатаВыдачи, "ДЛФ=D");
			ТабличныйДокумент.Вывести(Область);
		КонецЕсли;
		
		Если ЮЛ Тогда
			
			ОтветственныеЛица = ОтветственныеЛицаБП.ОтветственныеЛица(Организация, '20200101');
			ДолжностьРуководителя = ОтветственныеЛица.РуководительДолжностьПредставление;
			ФИОРуководителя = СокрЛП(ОтветственныеЛица.РуководительФИО.Фамилия) + " " + 
				СокрЛП(ОтветственныеЛица.РуководительФИО.Имя) + " " + 
				СокрЛП(ОтветственныеЛица.РуководительФИО.Отчество);
			
			Если ЗначениеЗаполнено(ДолжностьРуководителя) И ЗначениеЗаполнено(ФИОРуководителя) Тогда
				Область = Макет.ПолучитьОбласть("Руководитель");
				Область.Параметры.ДолжностьРуководителя = ДолжностьРуководителя;
				Область.Параметры.ФИОРуководителя = ФИОРуководителя;
				ТабличныйДокумент.Вывести(Область);
			КонецЕсли;
			
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Организация);
		
	КонецЦикла;
	
	ТабличныйДокумент.ПолеСверху = 20;
	ТабличныйДокумент.ПолеСнизу = 20;
	ТабличныйДокумент.ПолеСлева = 20;
	ТабличныйДокумент.ПолеСправа = 20;
	
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Организация_КарточкаОрганизации";
	
	Возврат ТабличныйДокумент;

КонецФункции

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов,
				 ПараметрыПечати,
				 КоллекцияПечатныхФорм,
				 ОбъектыПечати,
				 ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "НапечататьПомощникРаботыФаксимильнойПечати") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"НапечататьПомощникРаботыФаксимильнойПечати", 
			НСтр("ru='Как быстро и просто создать факсимильную подпись и печать?'"), 
			СформироватьПомощникРаботыФаксимильнойПечати(МассивОбъектов[0], ОбъектыПечати, "ПомощникРаботыФаксимильнойПечати")
		);
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Реквизиты") Тогда
		
		СведенияОбОрганизациях = Новый Массив;
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"Реквизиты", 
			НСтр("ru='Реквизиты организации'"),
			СформироватьРеквизитыОрганизации(МассивОбъектов, ОбъектыПечати, "Реквизиты"));
		ПараметрыВывода.Вставить("ФормироватьЭД", Истина);
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПриказВступленииВДолжностьРуководителя") Тогда
		
		СведенияОбОрганизациях = Новый Массив;
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"ПриказВступленииВДолжностьРуководителя", 
			НСтр("ru='Приказ о вступлении в должность руководителя'"),
			Обработки.РегистрацияОрганизации.СформироватьПриказОВступленииВДолжностьРуководителя(МассивОбъектов, ОбъектыПечати, "ПриказОВступленииВДолжностьРуководителя"));
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Реквизиты организации
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Реквизиты";
	КомандаПечати.Представление = НСтр("ru = 'Реквизиты'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеквизитовОрганизаций";
	КомандаПечати.СписокФорм    = "ФормаОрганизации,ФормаСписка";
	КомандаПечати.Порядок       = 1;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСервисРегистрации") Тогда
		
		// Приказ о вступлении в должность руководителя
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "ПриказВступленииВДолжностьРуководителя";
		КомандаПечати.Представление = НСтр("ru = 'Приказ о вступлении в должность руководителя'");
		КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
		КомандаПечати.СписокФорм    = "ФормаОрганизации,ФормаСписка";
		КомандаПечати.Порядок       = 10;
		УправлениеПечатью.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, "ЮридическоеФизическоеЛицо",
			Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список команд отправки по электронной почте.
// 
// Параметры:
//   КомандыОтправки - ТаблицаЗначений - состав полей см. в функции ОтправкаПочтовыхСообщений.КомандыОтправки
//
Процедура ДобавитьКомандыОтправки(КомандыОтправки) Экспорт
	
	КомандаОтправки = КомандыОтправки.Добавить();
	КомандаОтправки.Идентификатор = "Реквизиты";
	КомандаОтправки.Представление = НСтр("ru='Реквизиты'");
	КомандаОтправки.Порядок       = 10;
	
КонецПроцедуры

Функция ОсновнойВидОрганизации() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОсновнойВидОрганизации = Константы.ОсновнойВидОрганизации.Получить();
	
	Если Не ЗначениеЗаполнено(ОсновнойВидОрганизации) Тогда
		Если ПолучитьФункциональнуюОпцию("ПредпринимательВСервисе") Тогда
			ОсновнойВидОрганизации = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		Иначе
			ОсновнойВидОрганизации = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОсновнойВидОрганизации;
	
КонецФункции

Функция КодОКВЭД2ДоступенДляВыбора(Код)
	
	КоличествоЦифрВКоде = СтрДлина(СтрЗаменить(Код, ".", ""));
	Возврат КоличествоЦифрВКоде >= 4;
	
КонецФункции

#КонецОбласти

#Область БСП

// Возвращает список реквизитов, которые не нужно редактировать
// с помощью обработки группового изменения объектов
//
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	МассивРеквизитов = Новый Массив();
	МассивРеквизитов.Добавить("УдалитьЮрФизЛицо");
	МассивРеквизитов.Добавить("УдалитьКодИФНС");
	МассивРеквизитов.Добавить("УдалитьТерриториальныеУсловияПФР");
	МассивРеквизитов.Добавить("УдалитьРайонныйКоэффициентРФ");
	Возврат МассивРеквизитов;
	
КонецФункции

Процедура ОбновитьПредопределенныеВидыКонтактнойИнформацииОрганизаций() Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроверкиАдресаРФ = Новый Структура;
	ПараметрыПроверкиАдресаРФ.Вставить("АдресТолькоРоссийский", Истина);
	ПараметрыПроверкиАдресаРФ.Вставить("ПроверятьКорректность", Ложь);
	ПараметрыПроверкиАдресаРФ.Вставить("СкрыватьНеактуальныеАдреса", Ложь);
	ПараметрыПроверкиАдресаРФ.Вставить("ВключатьСтрануВПредставление", Ложь);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
						Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Ложь;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Истина;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 1;
	ПараметрыВида.РазрешитьВводНесколькихЗначений      = Ложь;
	ПараметрыВида.ЗапретитьРедактированиеПользователем = Истина;
	ЗаполнитьЗначенияСвойств(ПараметрыВида.НастройкиПроверки, ПараметрыПроверкиАдресаРФ);
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
						Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Ложь;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Истина;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 2;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
	ПараметрыВида.ЗапретитьРедактированиеПользователем = Истина;
	ЗаполнитьЗначенияСвойств(ПараметрыВида.НастройкиПроверки, ПараметрыПроверкиАдресаРФ);
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
						Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 3;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
	ПараметрыВида.ЗапретитьРедактированиеПользователем = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
						Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.УчредительныйАдресИностраннойОрганизации;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 4;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
	ПараметрыВида.ЗапретитьРедактированиеПользователем = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
						Перечисления.ТипыКонтактнойИнформации.Телефон);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 5;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
						Перечисления.ТипыКонтактнойИнформации.Факс);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ФаксОрганизации;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 6;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
	ПараметрыВида.ЗапретитьРедактированиеПользователем = Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
						Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.EmailОрганизации;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 7;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
	ПараметрыВида.ЗапретитьРедактированиеПользователем = Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
						Перечисления.ТипыКонтактнойИнформации.Телефон);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ТелефонПоЮридическомуАдресуОрганизации;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 8;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
	ПараметрыВида.ЗапретитьРедактированиеПользователем = Истина;
	ПараметрыВида.Используется                      = Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
						Перечисления.ТипыКонтактнойИнформации.Другое);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 9;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
	ПараметрыВида.ЗапретитьРедактированиеПользователем = Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
КонецПроцедуры

Процедура ЗаполнитьКонстантуИспользоватьНесколькоОрганизаций() Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") =
			ПолучитьФункциональнуюОпцию("НеИспользоватьНесколькоОрганизаций") Тогда
		// Опции должны иметь противоположные значения.
		// Если это не так, то значит в ИБ раньше не было этих опций - инициализируем их значения.
		Константы.ИспользоватьНесколькоОрганизаций.Установить(КоличествоОрганизаций() > 1);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновления

Процедура ОчиститьКодНалоговогоОрганаПолучателя() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Организации = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Организация Из Организации Цикл
		
		ОбъектОрганизаци = Организация.Ссылка.ПолучитьОбъект();
		
		Если ОбъектОрганизаци.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо И ЗначениеЗаполнено(ОбъектОрганизаци.КодНалоговогоОрганаПолучателя) Тогда
			
			ОбъектОрганизаци.КодНалоговогоОрганаПолучателя = "";
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектОрганизаци);
			
		ИначеЕсли ЗначениеЗаполнено(ОбъектОрганизаци.КодНалоговогоОрганаПолучателя) И  НЕ ОбъектОрганизаци.КрупнейшийНалогоплательщик Тогда
			
			ОбъектОрганизаци.КрупнейшийНалогоплательщик = Истина;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектОрганизаци);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьНаименованиеПлательщикаПриПеречисленииВБюджет() Экспорт
	
	// В версии 3.0.28.7 и ранее при редактировании организации в форме элемента поле НаименованиеПлательщикаПриПеречисленииВБюджет
	// могло быть ошибочно заполнено:
	// Объект.НаименованиеПлательщикаПриПеречисленииВБюджет	= Объект.НаименованиеСокращенное;
	
	// Это поле следует оставить по умолчанию пустым, для того, чтобы в случае изменения правил уплаты в бюджет 
	// достаточно было изменить алгоритм составления наименования, но не данные.
	// См. ПлатежиВБюджетКлиентСервер.НаименованиеПлательщикаИндивидуальногоПредпринимателя
	
	// В то же время, когда поле пустое, то в платежку может выводиться не сокращенное,
	// а полное наименование.
	// Чтобы в таких случаях поведение не изменилось (сохранилось сокращенное наименование),
	// следует учесть ВариантНаименованияДляПечатныхФорм.
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка,
	|	Организации.ВариантНаименованияДляПечатныхФорм КАК ВариантНаименования,
	|	ВЫРАЗИТЬ(Организации.НаименованиеСокращенное КАК СТРОКА(160)) КАК НаименованиеСокращенное,
	|	ВЫРАЗИТЬ(Организации.НаименованиеПолное КАК СТРОКА(160)) КАК НаименованиеПолное,
	|	ВЫРАЗИТЬ(Организации.НаименованиеПлательщикаПриПеречисленииВБюджет КАК СТРОКА(160)) КАК НаименованиеВБюджет
	|ПОМЕСТИТЬ Организации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.НаименованиеПлательщикаПриПеречисленииВБюджет <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Организации КАК Организации
	|ГДЕ
	|	Организации.ВариантНаименования <> ЗНАЧЕНИЕ(Перечисление.ВариантыНаименованияДляПечатныхФорм.ПолноеНаименование)
	|	И Организации.НаименованиеСокращенное = Организации.НаименованиеВБюджет
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Организации.Ссылка
	|ИЗ
	|	Организации КАК Организации
	|ГДЕ
	|	Организации.ВариантНаименования = ЗНАЧЕНИЕ(Перечисление.ВариантыНаименованияДляПечатныхФорм.ПолноеНаименование)
	|	И Организации.НаименованиеПолное = Организации.НаименованиеВБюджет";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.НаименованиеПлательщикаПриПеречисленииВБюджет = "";
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерезаполнитьКонстантуИспользоватьНесколькоОрганизаций() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Константы.ИспользоватьНесколькоОрганизаций.Установить(КоличествоОрганизаций() > 1);
	
КонецПроцедуры

Процедура ЗаполнитьИспользуемыеВидыОрганизаций() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	ВидыОрганизаций = ИспользуемыеВидыОрганизаций();
	
	Константы.ВестиУчетИндивидуальногоПредпринимателя.Установить(ВидыОрганизаций.ФизическоеЛицо);
	Константы.ВестиУчетЮридическогоЛица.Установить(ВидыОрганизаций.ЮридическоеЛицо);
	
КонецПроцедуры

Процедура ЗаполнитьДатуРегистрацииИП() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка,
	|	Организации.СвидетельствоДатаВыдачи
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|	И Организации.ДатаРегистрации = ДАТАВРЕМЯ(1, 1, 1)
	|	И Организации.СвидетельствоДатаВыдачи <> ДАТАВРЕМЯ(1, 1, 1)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.ДатаРегистрации = Выборка.СвидетельствоДатаВыдачи;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПризнакИспользованияТрудаРаботниковИП() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка,
	|	ВЫБОР
	|		КОГДА Организации.РегистрационныйНомерПФР = """"
	|				И Организации.КодОрганаПФР = """"
	|				И Организации.РегистрационныйНомерТФОМС = """"
	|				И Организации.РегистрационныйНомерФСС = """"
	|				И Организации.КодПодчиненностиФСС = """"
	|				И (ВЫРАЗИТЬ(Организации.НаименованиеТерриториальногоОрганаФСС КАК СТРОКА(1))) = """"
	|				И (ВЫРАЗИТЬ(Организации.НаименованиеТерриториальногоОрганаПФР КАК СТРОКА(1))) = """"
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ИПИспользуетТрудНаемныхРаботников
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ИПИспользуетТрудНаемныхРаботников Тогда
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Объект.ИПИспользуетТрудНаемныхРаботников = Истина;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПереписатьКодПодчиненностиФССДляИП() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка,
	|	Организации.УдалитьИПКодПодчиненностиФСС,
	|	Организации.КодПодчиненностиФСС
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.УдалитьИПКодПодчиненностиФСС) И НЕ ЗначениеЗаполнено(Выборка.КодПодчиненностиФСС) Тогда
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Объект.КодПодчиненностиФСС = Выборка.УдалитьИПКодПодчиненностиФСС;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПеренестиФайлыОрганизацииВПрисоединенныеФайлы() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Файлы.ВладелецФайла КАК ВладелецФайла
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла ССЫЛКА Справочник.Организации
	|	И Файлы.ПометкаУдаления = ЛОЖЬ";
	
	ВыборкаОрганизации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизации.Следующий() Цикл
		НачатьТранзакцию();
		
		СконвертированныеФайлы = СконвертироватьФайлыВПрисоединенные(ВыборкаОрганизации.ВладелецФайла);
		НеобходимоЗаписыватьОрганизацию = Ложь;
		
		ОрганизацияОбъект = ВыборкаОрганизации.ВладелецФайла.ПолучитьОбъект();
		
		Если СконвертированныеФайлы <> Неопределено Тогда
			
			Если ЗначениеЗаполнено(ОрганизацияОбъект.УдалитьФайлЛоготип)
				И СконвертированныеФайлы.Получить(ОрганизацияОбъект.УдалитьФайлЛоготип) <> Неопределено Тогда
				ОрганизацияОбъект.ФайлЛоготип = СконвертированныеФайлы.Получить(ОрганизацияОбъект.УдалитьФайлЛоготип);
				ОрганизацияОбъект.УдалитьФайлЛоготип = Неопределено;
				НеобходимоЗаписыватьОрганизацию = Истина;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОрганизацияОбъект.УдалитьФайлФаксимильнаяПечать)
				И СконвертированныеФайлы.Получить(ОрганизацияОбъект.УдалитьФайлФаксимильнаяПечать) <> Неопределено Тогда
				ОрганизацияОбъект.ФайлФаксимильнаяПечать = СконвертированныеФайлы.Получить(ОрганизацияОбъект.УдалитьФайлФаксимильнаяПечать);
				ОрганизацияОбъект.УдалитьФайлФаксимильнаяПечать = Неопределено;
				НеобходимоЗаписыватьОрганизацию = Истина;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОрганизацияОбъект.УдалитьФайлПечать)
				И СконвертированныеФайлы.Получить(ОрганизацияОбъект.УдалитьФайлПечать) <> Неопределено Тогда
				ОрганизацияОбъект.ФайлПечать = СконвертированныеФайлы.Получить(ОрганизацияОбъект.УдалитьФайлПечать);
				ОрганизацияОбъект.УдалитьФайлПечать = Неопределено;
				НеобходимоЗаписыватьОрганизацию = Истина;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОрганизацияОбъект.УдалитьФайлПодписьРуководителя)
				И СконвертированныеФайлы.Получить(ОрганизацияОбъект.УдалитьФайлПодписьРуководителя) <> Неопределено Тогда
				ОрганизацияОбъект.ФайлПодписьРуководителя = СконвертированныеФайлы.Получить(ОрганизацияОбъект.УдалитьФайлПодписьРуководителя);
				ОрганизацияОбъект.УдалитьФайлПодписьРуководителя = Неопределено;
				НеобходимоЗаписыватьОрганизацию = Истина;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОрганизацияОбъект.УдалитьФайлПодписьГлавногоБухгалтера)
				И СконвертированныеФайлы.Получить(ОрганизацияОбъект.УдалитьФайлПодписьГлавногоБухгалтера) <> Неопределено Тогда
				ОрганизацияОбъект.ФайлПодписьГлавногоБухгалтера = СконвертированныеФайлы.Получить(ОрганизацияОбъект.УдалитьФайлПодписьГлавногоБухгалтера);
				ОрганизацияОбъект.УдалитьФайлПодписьГлавногоБухгалтера = Неопределено;
				НеобходимоЗаписыватьОрганизацию = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НеобходимоЗаписыватьОрганизацию Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОрганизацияОбъект, Истина);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьУдаленныеФайлыОрганизации() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.УдалитьФайлЛоготип <> Значение(Справочник.Файлы.ПустаяСсылка)
	|	ИЛИ Организации.УдалитьФайлФаксимильнаяПечать <> Значение(Справочник.Файлы.ПустаяСсылка)
	|	ИЛИ Организации.УдалитьФайлПечать <> Значение(Справочник.Файлы.ПустаяСсылка)
	|	ИЛИ Организации.УдалитьФайлПодписьРуководителя <> Значение(Справочник.Файлы.ПустаяСсылка)
	|	ИЛИ Организации.УдалитьФайлПодписьГлавногоБухгалтера <> Значение(Справочник.Файлы.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОрганизацияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ОрганизацияОбъект.УдалитьФайлЛоготип            = Неопределено;
		ОрганизацияОбъект.УдалитьФайлФаксимильнаяПечать = Неопределено;
		ОрганизацияОбъект.УдалитьФайлПечать             = Неопределено;
		ОрганизацияОбъект.УдалитьФайлПодписьРуководителя       = Неопределено;
		ОрганизацияОбъект.УдалитьФайлПодписьГлавногоБухгалтера = Неопределено;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОрганизацияОбъект, Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьНаименованияОКВЭД2() Экспорт
	
	ТаблицаИзменений = ОбщегоНазначения.ПрочитатьXMLВТаблицу(ПолучитьМакет("ОКВЭД2ИзмененияНаименований").ПолучитьТекст()).Данные;
	
	ИзмененныеКоды = ТаблицаИзменений.ВыгрузитьКолонку("Код");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИзмененныеКоды", ИзмененныеКоды);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка,
	|	Организации.КодОКВЭД2 КАК КодОКВЭД2,
	|	Организации.НаименованиеОКВЭД2 КАК НаименованиеОКВЭД2
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.КодОКВЭД2 В(&ИзмененныеКоды)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаименованиеОКВЭД2 = СокрЛП(Выборка.НаименованиеОКВЭД2);
		
		СтруктураОтбора = Новый Структура("Код", СокрЛП(Выборка.КодОКВЭД2));
		Изменения = ТаблицаИзменений.НайтиСтроки(СтруктураОтбора);
		
		Для каждого Изменение Из Изменения Цикл
			Если НаименованиеОКВЭД2 = Изменение.СтароеНаименование Тогда
				НаименованиеОКВЭД2 = Изменение.НовоеНаименование;
			КонецЕсли;
		КонецЦикла;
		
		Если НаименованиеОКВЭД2 <> СокрЛП(Выборка.НаименованиеОКВЭД2) Тогда
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Объект.НаименованиеОКВЭД2 = НаименованиеОКВЭД2;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура из общего модуля ПрисоединенныеФайлы
// Отличие в том, что она возвращает соответствие замененных файлов
Функция СконвертироватьФайлыВПрисоединенные(Знач ВладелецФайлов, ИмяСправочника = Неопределено)
	
	СоответствиеФайлов = Новый Соответствие;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МодульРаботаСФайламиСлужебныйВызовСервера = ОбщегоНазначения.ОбщийМодуль("РаботаСФайламиСлужебныйВызовСервера");
	МодульРаботаСФайламиСлужебный = ОбщегоНазначения.ОбщийМодуль("РаботаСФайламиСлужебный");
	
	ЗаголовокОшибки = НСтр("ru = 'Ошибка при конвертации присоединенных файлов подсистемы Работа с файлами
	                             |в присоединенные файлы подсистемы Присоединенные файлы.'");
	
	ИмяСправочника = ПрисоединенныеФайлыСлужебный.ИмяСправочникаХраненияФайлов(
		ВладелецФайлов, ИмяСправочника, ЗаголовокОшибки);
		
	УстановитьПривилегированныйРежим(Истина);
	
	ФайлыИсточник = МодульРаботаСФайламиСлужебныйВызовСервера.ПолучитьВсеПодчиненныеФайлы(ВладелецФайлов);
	
	МенеджерПрисоединенныхФайлов = Справочники[ИмяСправочника];
	
	НачатьТранзакцию();
	
	Попытка
		
		Для Каждого ФайлИсточник Из ФайлыИсточник Цикл
			ФайлИсточникОбъект = ФайлИсточник.ПолучитьОбъект();
			ТекущаяВерсияОбъект = ФайлИсточникОбъект.ТекущаяВерсия.ПолучитьОбъект();
			
			СсылкаНового = МенеджерПрисоединенныхФайлов.ПолучитьСсылку();
			ПрисоединенныйФайл = МенеджерПрисоединенныхФайлов.СоздатьЭлемент();
			ПрисоединенныйФайл.УстановитьСсылкуНового(СсылкаНового);
			
			ПрисоединенныйФайл.ВладелецФайла                = ВладелецФайлов;
			ПрисоединенныйФайл.Наименование                 = ФайлИсточникОбъект.Наименование;
			ПрисоединенныйФайл.Автор                        = ФайлИсточникОбъект.Автор;
			ПрисоединенныйФайл.ДатаМодификацииУниверсальная = ТекущаяВерсияОбъект.ДатаМодификацииУниверсальная;
			ПрисоединенныйФайл.ДатаСоздания                 = ФайлИсточникОбъект.ДатаСоздания;
			
			ПрисоединенныйФайл.Зашифрован                   = ФайлИсточникОбъект.Зашифрован;
			ПрисоединенныйФайл.Изменил                      = ТекущаяВерсияОбъект.Автор;
			ПрисоединенныйФайл.Описание                     = ФайлИсточникОбъект.Описание;
			ПрисоединенныйФайл.ПодписанЭП                  = ФайлИсточникОбъект.ПодписанЭП;
			ПрисоединенныйФайл.Размер                       = ТекущаяВерсияОбъект.Размер;
			
			ПрисоединенныйФайл.Расширение                   = ТекущаяВерсияОбъект.Расширение;
			ПрисоединенныйФайл.Редактирует                  = ФайлИсточникОбъект.Редактирует;
			ПрисоединенныйФайл.ТекстХранилище               = ФайлИсточникОбъект.ТекстХранилище;
			ПрисоединенныйФайл.ТипХраненияФайла             = ТекущаяВерсияОбъект.ТипХраненияФайла;
			ПрисоединенныйФайл.ПометкаУдаления              = ФайлИсточникОбъект.ПометкаУдаления;
			
			// Если файл хранится на томе - делается ссылка на существующий файл.
			ПрисоединенныйФайл.Том                          = ТекущаяВерсияОбъект.Том;
			ПрисоединенныйФайл.ПутьКФайлу                   = ТекущаяВерсияОбъект.ПутьКФайлу;
			
			Для Каждого СертификатШифрованияСтрока Из ФайлИсточникОбъект.СертификатыШифрования Цикл
				НоваяСтрока = ПрисоединенныйФайл.СертификатыШифрования.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СертификатШифрованияСтрока);
			КонецЦикла;
			
			Для Каждого ЭПСтрока Из ТекущаяВерсияОбъект.ЭлектронныеПодписи Цикл
				НоваяСтрока = ПрисоединенныйФайл.ЭлектронныеПодписи.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭПСтрока);
			КонецЦикла;
			
			ПрисоединенныйФайл.Заполнить(Неопределено);
			ПрисоединенныйФайл.Записать();
			
			СоответствиеФайлов.Вставить(ФайлИсточникОбъект.Ссылка, ПрисоединенныйФайл.Ссылка);
			
			Если ПрисоединенныйФайл.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
				ХранилищеФайла = МодульРаботаСФайламиСлужебныйВызовСервера.ПолучитьХранилищеФайлаИзИнформационнойБазы(ТекущаяВерсияОбъект.Ссылка);
				ДвоичныеДанные = ХранилищеФайла.Получить();
				
				МенеджерЗаписи = РегистрыСведений.ПрисоединенныеФайлы.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.ПрисоединенныйФайл = СсылкаНового;
				МенеджерЗаписи.Прочитать();
				МенеджерЗаписи.ПрисоединенныйФайл = СсылкаНового;
				МенеджерЗаписи.ХранимыйФайл = Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9));
				МенеджерЗаписи.Записать();
			КонецЕсли;
			
			ТекущаяВерсияОбъект.ПометкаУдаления = Истина;
			ФайлИсточникОбъект.ПометкаУдаления = Истина;
			
			// Удаление ссылок на том в старом файле, что бы при удалении, файлы остались на месте.
			Если ТекущаяВерсияОбъект.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
				ТекущаяВерсияОбъект.ПутьКФайлу = "";
				ТекущаяВерсияОбъект.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
				ФайлИсточникОбъект.ТекущаяВерсияПутьКФайлу = "";
				ФайлИсточникОбъект.ТекущаяВерсияТом = "";
				МодульРаботаСФайламиСлужебный.ПометитьНаУдалениеВерсииФайла(ФайлИсточникОбъект.Ссылка, ТекущаяВерсияОбъект.Ссылка);
			КонецЕсли;
			
			ТекущаяВерсияОбъект.ДополнительныеСвойства.Вставить("КонвертацияФайлов", Истина);
			ТекущаяВерсияОбъект.Записать();
			
			ФайлИсточникОбъект.ДополнительныеСвойства.Вставить("КонвертацияФайлов", Истина);
			ФайлИсточникОбъект.Записать();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
		Возврат СоответствиеФайлов;
		
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОтменитьТранзакцию();
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	КонецПопытки;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает наименование организации на указанную дату.
//
// Параметры:
//     Организация - СправочникСсылка.Организация - Организация.
//     ДатаСведений - Дата - Дата, на которую нужно получить КПП организации.
//
// Возвращаемое значение:
//     Структура - СокращенноеНаименование, ПолноеНаименование, НаименованиеДляПечатныхФорм, ФИО.
//
Функция НаименованияНаДату(Организация, ДатаСведений) Экспорт
	
	НаименованияОрганизации = Новый Структура();
	НаименованияОрганизации.Вставить("СокращенноеНаименование", "");
	НаименованияОрганизации.Вставить("ПолноеНаименование", "");
	НаименованияОрганизации.Вставить("НаименованиеДляПечатныхФорм", "");
	НаименованияОрганизации.Вставить("ФИО", Новый Структура("Фамилия, Имя, Отчество, Представление", "", "", "", ""));
	
	Если НЕ ЗначениеЗаполнено(Организация)
		ИЛИ ТипЗнч(Организация) <> Тип("СправочникСсылка.Организации") Тогда
		Возврат НаименованияОрганизации;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаСведений) Тогда
		Запрос = Новый Запрос();
		Запрос.Параметры.Вставить("Организация", Организация);
		Запрос.Параметры.Вставить("ДатаСведений", ДатаСведений);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	МАКСИМУМ(ИсторияНаименованийОрганизаций.Период) КАК Период,
		|	ИсторияНаименованийОрганизаций.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ЗначенияНаименований
		|ИЗ
		|	Справочник.Организации.ИсторияНаименований КАК ИсторияНаименованийОрганизаций
		|ГДЕ
		|	ИсторияНаименованийОрганизаций.Ссылка = &Организация
		|	И ИсторияНаименованийОрганизаций.Период <= &ДатаСведений
		|
		|СГРУППИРОВАТЬ ПО
		|	ИсторияНаименованийОрганизаций.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсторияНаименованийОрганизаций.Ссылка.ВариантНаименованияДляПечатныхФорм КАК ВариантНаименованияДляПечатныхФорм,
		|	ИсторияНаименованийОрганизаций.НаименованиеСокращенное КАК НаименованиеСокращенное,
		|	ИсторияНаименованийОрганизаций.НаименованиеПолное КАК НаименованиеПолное,
		|	ИсторияНаименованийОрганизаций.ФамилияИП,
		|	ИсторияНаименованийОрганизаций.ИмяИП,
		|	ИсторияНаименованийОрганизаций.ОтчествоИП
		|ИЗ
		|	ЗначенияНаименований КАК ЗначенияНаименований
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации.ИсторияНаименований КАК ИсторияНаименованийОрганизаций
		|		ПО ЗначенияНаименований.Ссылка = ИсторияНаименованийОрганизаций.Ссылка
		|			И ЗначенияНаименований.Период = ИсторияНаименованийОрганизаций.Период";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			НаименованияОрганизации.СокращенноеНаименование     = Выборка.НаименованиеСокращенное;
			НаименованияОрганизации.ПолноеНаименование          = Выборка.НаименованиеПолное;
			НаименованияОрганизации.НаименованиеДляПечатныхФорм = ?(Выборка.ВариантНаименованияДляПечатныхФорм = Перечисления.ВариантыНаименованияДляПечатныхФорм.ПолноеНаименование,
																		Выборка.НаименованиеПолное, Выборка.НаименованиеСокращенное);
			НаименованияОрганизации.ФИО.Фамилия  = Выборка.ФамилияИП;
			НаименованияОрганизации.ФИО.Имя      = Выборка.ИмяИП;
			НаименованияОрганизации.ФИО.Отчество = Выборка.ОтчествоИП;
			НаименованияОрганизации.ФИО.Представление = СокрЛП(СокрЛП(Выборка.ФамилияИП) + " " + СокрЛП(Выборка.ИмяИП) + " " + СокрЛП(Выборка.ОтчествоИП));
			Возврат НаименованияОрганизации;
		КонецЕсли;
	КонецЕсли;
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "Наименование, ВариантНаименованияДляПечатныхФорм, НаименованиеСокращенное, НаименованиеПолное, 
																				|ФамилияИП, ИмяИП, ОтчествоИП");
	НаименованияОрганизации.СокращенноеНаименование     = ЗначенияРеквизитов.НаименованиеСокращенное;
	НаименованияОрганизации.ПолноеНаименование          = ЗначенияРеквизитов.НаименованиеПолное;
	НаименованияОрганизации.НаименованиеДляПечатныхФорм = ?(ЗначенияРеквизитов.ВариантНаименованияДляПечатныхФорм = Перечисления.ВариантыНаименованияДляПечатныхФорм.ПолноеНаименование, 
																ЗначенияРеквизитов.НаименованиеПолное, ЗначенияРеквизитов.НаименованиеСокращенное);
	НаименованияОрганизации.ФИО.Фамилия       = ЗначенияРеквизитов.ФамилияИП;
	НаименованияОрганизации.ФИО.Имя           = ЗначенияРеквизитов.ИмяИП;
	НаименованияОрганизации.ФИО.Отчество      = ЗначенияРеквизитов.ОтчествоИП;
	НаименованияОрганизации.ФИО.Представление = СокрЛП(СокрЛП(ЗначенияРеквизитов.ФамилияИП) + " " + СокрЛП(ЗначенияРеквизитов.ИмяИП) + " " + СокрЛП(ЗначенияРеквизитов.ОтчествоИП));
	
	Возврат НаименованияОрганизации;
	
КонецФункции

Процедура УстановитьАктуальноеЗначениеИсторииНаименований(НаименованиеСокращенное, НаименованиеПолное, ИсторияНаименований) Экспорт
	
	КоличествоЗаписей = ИсторияНаименований.Количество();
	
	Если КоличествоЗаписей > 0 Тогда
		
		ИсторияНаименований.Сортировать("Период");
		АктуальнаяЗаписьИстории = ИсторияНаименований[КоличествоЗаписей - 1];
		АктуальнаяЗаписьИстории.НаименованиеСокращенное = НаименованиеСокращенное;
		АктуальнаяЗаписьИстории.НаименованиеПолное = НаименованиеПолное;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьПробелыИНН() Экспорт

	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка,
	|	Организации.ИНН КАК ИНН
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)";
	
	ВыборкаРезультата = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаРезультата.Следующий() Цикл
		Если СтрДлина(ВыборкаРезультата.ИНН) > 10 Тогда
			Объект = ВыборкаРезультата.Ссылка.ПолучитьОбъект();
			Объект.ИНН = СокрП(ВыборкаРезультата.ИНН);
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает дату начала ведения учета в ИБ по дате ввода остатков или дате первого проведенного документа
//
// Параметры:
// Организация - СправочникСсылка.Организация
//
// Возвращаемое значение:
// Дата или Неопределено, если учет по организации не велся
//
Функция ДатаНачалаВеденияУчета(Организация) Экспорт
	
	ОдинДень = 86400;
	
	ДатаВводаНачальныхОстатков = РегистрыСведений.ДатыВводаНачальныхОстатков.ДатаВводаНачальныхОстатков(Организация);
	Если ЗначениеЗаполнено(ДатаВводаНачальныхОстатков) Тогда
		Возврат НачалоДня(ДатаВводаНачальныхОстатков + ОдинДень);
	КонецЕсли;
	
	ДатаПервогоПроведенногоДокумента = ЖурналыДокументов.ЖурналОпераций.ДатаПервогоПроведенногоДокумента(Организация);
	Если ДатаПервогоПроведенногоДокумента <> Неопределено Тогда
		Возврат НачалоДня(ДатаПервогоПроведенногоДокумента);
	КонецЕсли;
	
КонецФункции

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет код территории по классификатору ОКТМО или ОКАТО, на которой зарегистрирована организация.
//
// Параметры:
//  Организация	 - СправочникСсылка.Организации
//  ТипКода		 - Строка - "ОКТМО" или "ОКАТО"
//               - Дата - с даты применения ОКТМО будет возвращен код по ОКТМО, в остальных случаях - код по ОКАТО
// 
// Возвращаемое значение:
//  Строка - код территории
//
Функция КодТерриторииМестаРегистрации(Организация, ТипКода = "ОКТМО") Экспорт
	
	РегистрацияВНалоговомОргане = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "РегистрацияВНалоговомОргане");
	
	Возврат Справочники.РегистрацииВНалоговомОргане.КодТерритории(РегистрацияВНалоговомОргане, ТипКода);
	
КонецФункции

// Возвращает наименование по умолчанию, присваиваемое при программногом 
// создании организации без заполнения реквизитов.
//
// Возвращаемое значение:
//     Строка - Наименование по умолчанию.
Функция НаименованиеПоУмолчанию() Экспорт
	
	Возврат НСтр("ru='Наша организация'", Метаданные.ОсновнойЯзык.КодЯзыка);
	
КонецФункции

// Создает элемент справочника "Организации" и связанные с ним данные.
//
// Параметры:
//     Параметры - Структура - Параметры создания организации.
//     АдресХранилища - Строка - Адрес временного хранилища, в которое
//                               будет помещена ссылка на созданную
//                               организацию.
//
Процедура СоздатьОрганизацию(Параметры, АдресХранилища) Экспорт
	
	ВидОрганизации           = Параметры.ВидОрганизации;
	ИНН                      = Параметры.ИНН;
	Реквизиты                = Параметры.Реквизиты;
	СистемаНалогообложения   = Параметры.СистемаНалогообложения;
	ПлательщикЕНВД           = Параметры.ПлательщикЕНВД;
	ПрименяетсяУСНПатент     = Параметры.ПрименяетсяУСНПатент;
	ПлательщикТорговогоСбора = Параметры.ПлательщикТорговогоСбора;
	
	ЗаполнитьРеквизиты = ЗначениеЗаполнено(Реквизиты) И НЕ ЗначениеЗаполнено(Реквизиты.ОписаниеОшибки);
	
	НачатьТранзакцию();
	
	Организация = Справочники.Организации.СоздатьЭлемент();
	
	Если НЕ ЗаполнитьРеквизиты Тогда // Создание по виду организации
		
		Организация.ЮридическоеФизическоеЛицо = ?(ВидОрганизации = "ИндивидуальныйПредприниматель",
			Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо,
			Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
		
		Организация.Наименование = Справочники.Организации.НаименованиеПоУмолчанию();
		
		Если ЗначениеЗаполнено(ИНН) Тогда
			Организация.ИНН = ИНН;
		КонецЕсли;
		
		Организация.Записать();
		
	Иначе // Создание по реквизитам
		
		ЗаполнитьЗначенияСвойств(Организация, Реквизиты);
		
		Организация.Записать();
		
		ЭтоИндивидуальныйПредприниматель = 
			Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;		
		
		Если ЭтоИндивидуальныйПредприниматель Тогда
			
			// Физическое лицо.
			ИндивидуальныйПредприниматель = ОтветственныеЛицаБП.ПолучитьСоздатьФизЛицо(Реквизиты);
			Организация.ИндивидуальныйПредприниматель = ИндивидуальныйПредприниматель;
			
			Если ЗначениеЗаполнено(Реквизиты.Фамилия)
				ИЛИ ЗначениеЗаполнено(Реквизиты.Фамилия) Тогда
				Организация.ФамилияИП  = Реквизиты.Фамилия;
				Организация.ИмяИП      = Реквизиты.Имя;
				Организация.ОтчествоИП = Реквизиты.Отчество;
				
				Организация.НаименованиеСокращенное = ОрганизацииФормыКлиентСервер.СокращенноеНаименованиеИндивидульногоПредпринимателя(
														Реквизиты.Фамилия, Реквизиты.Имя, Реквизиты.Отчество);
				Организация.НаименованиеПолное      = ОрганизацииФормыКлиентСервер.ПолноеНаименованиеИндивидульногоПредпринимателя(
														Реквизиты.Фамилия, Реквизиты.Имя, Реквизиты.Отчество);
				Организация.Наименование            = ОрганизацииФормыКлиентСервер.НаименованиеИндивидульногоПредпринимателя(
														Реквизиты.Фамилия, Реквизиты.Имя, Реквизиты.Отчество);
			КонецЕсли;
			
			Если Реквизиты.Свойство("СвидетельствоОРегистрации") И ЗначениеЗаполнено(Реквизиты.СвидетельствоОРегистрации) Тогда
				
				Организация.СвидетельствоСерияНомер = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 №%2'"), 
					Реквизиты.СвидетельствоОРегистрации.Серия, Реквизиты.СвидетельствоОРегистрации.Номер);
				Организация.СвидетельствоДатаВыдачи = Реквизиты.СвидетельствоОРегистрации.Дата;
				
			КонецЕсли;
			
			Если Реквизиты.Свойство("КодСтраныГражданства")	И ЗначениеЗаполнено(Реквизиты.КодСтраныГражданства) Тогда
				
				ДанныеСтраныМира = Справочники.СтраныМира.ДанныеСтраныМира(Реквизиты.КодСтраныГражданства);
				Если ЗначениеЗаполнено(ДанныеСтраныМира.Ссылка) Тогда
					Страна = ДанныеСтраныМира.Ссылка;
				ИначеЕсли ЗначениеЗаполнено(ДанныеСтраныМира.Наименование) И Справочники.СтраныМира.ЕстьПравоДобавления() Тогда
					СтранаМира = Справочники.СтраныМира.СоздатьЭлемент();
					СтранаМира.Заполнить(ДанныеСтраныМира);
					СтранаМира.Записать();
					Страна = СтранаМира.Ссылка;
				КонецЕсли;
				
				// Гражданство физического лица.
				НаборЗаписей = РегистрыСведений.ГражданствоФизическихЛиц.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ФизическоеЛицо.Установить(ИндивидуальныйПредприниматель);
				НаборЗаписей.Прочитать();
				Если НаборЗаписей.Количество() = 0 Тогда
					СтрокаНабораЗаписей = НаборЗаписей.Добавить();
					СтрокаНабораЗаписей.Период         = ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведений();
					СтрокаНабораЗаписей.ФизическоеЛицо = ИндивидуальныйПредприниматель;
					СтрокаНабораЗаписей.Страна         = Страна;
					НаборЗаписей.Записать();
				КонецЕсли;
				
			КонецЕсли;
						
		КонецЕсли;
		
		Если Реквизиты.Свойство("ЮридическийАдрес")	И ЗначениеЗаполнено(Реквизиты.ЮридическийАдрес) Тогда
			
			ЗначенияПолейАдреса = Реквизиты.ЮридическийАдрес.КонтактнаяИнформация;
			
			УправлениеКонтактнойИнформациейБП.ЗаполнитьКонтактнуюИнформациюОбъекта(Организация,
				Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации,
				ЗначенияПолейАдреса);
				
			УправлениеКонтактнойИнформациейБП.ЗаполнитьКонтактнуюИнформациюОбъекта(Организация,
				Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации,
				ЗначенияПолейАдреса);
				
			УправлениеКонтактнойИнформациейБП.ЗаполнитьКонтактнуюИнформациюОбъекта(Организация,
				Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации,
				ЗначенияПолейАдреса);
							
			// Код территориального органа Росстата (заполняется по адресу организации).
			КодРегиона = УправлениеКонтактнойИнформациейБП.КодРегионаПоАдресу(ЗначенияПолейАдреса);
			
			Если ЗначениеЗаполнено(КодРегиона) Тогда
				СписокОтделений = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ОтделенияРосстатаРегиона(Формат(КодРегиона, "ЧЦ=2; ЧН=; ЧВН="));
				Если СписокОтделений.Количество() = 1 Тогда
					Организация.КодОрганаФСГС = СписокОтделений[0].КодТОГС;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Реквизиты.Свойство("Телефон") И ЗначениеЗаполнено(Реквизиты.Телефон) Тогда
			
			ЗначенияПолейТелефона = Реквизиты.Телефон.КонтактнаяИнформация;
			
			УправлениеКонтактнойИнформациейБП.ЗаполнитьКонтактнуюИнформациюОбъекта(Организация,
				Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации,
				ЗначенияПолейТелефона);
			
		КонецЕсли;
		
		Если Реквизиты.Свойство("КодОКВЭД") И ЗначениеЗаполнено(Реквизиты.КодОКВЭД) Тогда
			
			Если Реквизиты.ЭтоОКВЭД2 Тогда
				Организация.КодОКВЭД2         = Реквизиты.КодОКВЭД;
				Организация.НаименованиеОКВЭД = ОрганизацииФормыКлиентСервер.ПрочитатьОКВЭД2(Реквизиты.КодОКВЭД);
			Иначе
				Организация.КодОКВЭД          = Реквизиты.КодОКВЭД;
				Организация.НаименованиеОКВЭД = ОбщегоНазначенияБПВызовСервера.ПолучитьКлассификатор("ОКВЭД").Получить(Реквизиты.КодОКВЭД);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Реквизиты.Свойство("ПравоваяФорма") И ЗначениеЗаполнено(Реквизиты.ПравоваяФорма) Тогда
			
			ТаблицаПодстановки = Справочники.Организации.ТаблицаВыбораРеквизитовДляПодстановки();
			СтрокаПодстановки = ТаблицаПодстановки.Найти(ВРЕГ(Реквизиты.ПравоваяФорма), "ПравоваяФорма");
			Если СтрокаПодстановки <> Неопределено Тогда
				Организация.КодОКОПФ = СтрокаПодстановки.КодОКОПФ;
				Организация.НаименованиеОКОПФ = ОбщегоНазначенияБПВызовСервера.ПолучитьКлассификатор("ОКОПФ").Получить(СтрокаПодстановки.КодОКОПФ);
				Организация.КодОКФС  = СтрокаПодстановки.КодОКФС;
				Организация.НаименованиеОКФС = ОбщегоНазначенияБПВызовСервера.ПолучитьКлассификатор("ОКФС").Получить(СтрокаПодстановки.КодОКФС)
			Иначе
				ПараметрыОКОПФ = Справочники.Организации.ПолучитьПараметрыФормыВыбораДляКода("ОКОПФ", ТекущаяДатаСеанса());
				ЗначениеОКОПФ = ПараметрыОКОПФ.СписокКодов.Найти(Реквизиты.ПравоваяФорма, "Наименование");
				Если ЗначениеОКОПФ <> Неопределено Тогда
					Организация.КодОКОПФ          = ЗначениеОКОПФ.Код;
					Организация.НаименованиеОКОПФ = ЗначениеОКОПФ.Наименование;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
				
		// Руководитель.
		Если Реквизиты.Свойство("Руководитель") И ЗначениеЗаполнено(Реквизиты.Руководитель) Тогда
		
			РуководительФизЛицо = ОтветственныеЛицаБП.ПолучитьСоздатьФизЛицо(Реквизиты.Руководитель);
			
			Если ЗначениеЗаполнено(РуководительФизЛицо) Тогда
				
				РуководительДолжность = ОтветственныеЛицаБП.ПолучитьСоздатьДолжность(Реквизиты.Руководитель.Должность);
				
				НаборЗаписей = РегистрыСведений.ОтветственныеЛицаОрганизаций.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.СтруктурнаяЕдиница.Установить(Организация.Ссылка);
				НаборЗаписей.Отбор.ОтветственноеЛицо.Установить(Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
				НаборЗаписей.Прочитать();
				Запись = НаборЗаписей.Добавить();
				Запись.Период             = Дата("19800101");
				Запись.СтруктурнаяЕдиница = Организация.Ссылка;
				Запись.ОтветственноеЛицо  = Перечисления.ОтветственныеЛицаОрганизаций.Руководитель;
				Запись.ФизическоеЛицо     = РуководительФизЛицо;
				Запись.Должность          = РуководительДолжность;
				НаборЗаписей.Записать();
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Регистрация в налоговом органе.
		РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.СоздатьЭлемент();
		
		Если Реквизиты.Свойство("РегистрацияВНалоговомОргане") И ЗначениеЗаполнено(Реквизиты.РегистрацияВНалоговомОргане) Тогда
			ЗаполнитьЗначенияСвойств(РегистрацияВНалоговомОргане, Реквизиты.РегистрацияВНалоговомОргане);
		КонецЕсли;
		
		РегистрацияВНалоговомОргане.Владелец = Организация.Ссылка;
		
		Если НЕ ЭтоИндивидуальныйПредприниматель Тогда
			РегистрацияВНалоговомОргане.КПП = Реквизиты.КПП;
		КонецЕсли;
		
		// Подбор кода ИФНС, ОКТМО и ОКАТО по адресу организации.
		Если Реквизиты.Свойство("ЮридическийАдрес")	
			И ЗначениеЗаполнено(Реквизиты.ЮридическийАдрес) 
			И ЗначениеЗаполнено(Реквизиты.ЮридическийАдрес.КонтактнаяИнформация) Тогда
			
			СведенияОНалоговомОрганеПоАдресу = АдресныйКлассификаторБП.КодыАдреса(ЗначенияПолейАдреса, "Сервис1С");
			
			КодНалоговогоОрганаПоАдресу = ?(ЭтоИндивидуальныйПредприниматель, Формат(СведенияОНалоговомОрганеПоАдресу.КодИФНСФЛ, "ЧЦ=4; ЧДЦ=; ЧВН=; ЧГ=0"),
																			Формат(СведенияОНалоговомОрганеПоАдресу.КодИФНСЮЛ, "ЧЦ=4; ЧДЦ=; ЧВН=; ЧГ=0"));
			
			Если ЗначениеЗаполнено(КодНалоговогоОрганаПоАдресу) Тогда
				
				КодНалоговогоОргана = КодНалоговогоОрганаПоАдресу;
				
				РегистрацияВНалоговомОргане.Код        = КодНалоговогоОргана;
				РегистрацияВНалоговомОргане.КодПоОКТМО = Формат(СведенияОНалоговомОрганеПоАдресу.ОКТМО, "ЧДЦ=; ЧГ=0");
				РегистрацияВНалоговомОргане.КодПоОКАТО = Формат(СведенияОНалоговомОрганеПоАдресу.OKATO, "ЧДЦ=; ЧГ=0");
				
			КонецЕсли;
			
		КонецЕсли;
		
		РеквизитыНалоговогоОргана = ДанныеГосударственныхОрганов.РеквизитыНалоговогоОрганаПоКоду(РегистрацияВНалоговомОргане.Код);
		РегистрацияВНалоговомОргане.КодРегиона = Лев(РегистрацияВНалоговомОргане.Код, 2);	
		
		Если НЕ ЗначениеЗаполнено(РеквизитыНалоговогоОргана.ОписаниеОшибки) Тогда			
		
			РегистрацияВНалоговомОргане.Наименование     = РеквизитыНалоговогоОргана.Наименование;
			РегистрацияВНалоговомОргане.НаименованиеИФНС = РеквизитыНалоговогоОргана.ПолноеНаименование;
			
			// Платежные реквизиты налогового органа.
			ДанныеГосударственныхОрганов.ОбновитьДанныеГосударственногоОргана(РеквизитыНалоговогоОргана);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РегистрацияВНалоговомОргане.Владелец)
		   И ЗначениеЗаполнено(РегистрацияВНалоговомОргане.Код)
		   И ЗначениеЗаполнено(РегистрацияВНалоговомОргане.Наименование)
		   И ЗначениеЗаполнено(РегистрацияВНалоговомОргане.НаименованиеИФНС)
		   И (ЗначениеЗаполнено(РегистрацияВНалоговомОргане.КПП) ИЛИ ЭтоИндивидуальныйПредприниматель) Тогда
		
			РегистрацияВНалоговомОргане.Записать();
			
			Организация.РегистрацияВНалоговомОргане  = РегистрацияВНалоговомОргане.Ссылка;
			Организация.КодНалоговогоОргана          = РегистрацияВНалоговомОргане.Код;
			Организация.НаименованиеНалоговогоОргана = РегистрацияВНалоговомОргане.Наименование;
			
			// История регистраций в налоговом органе.
			НаборЗаписей = РегистрыСведений.ИсторияРегистрацийВНалоговомОргане.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.СтруктурнаяЕдиница.Установить(Организация.Ссылка);
			НаборЗаписей.Прочитать();
			СтрокаНабораЗаписей = НаборЗаписей.Добавить();
			СтрокаНабораЗаписей.Период                      = РегистрыСведений.ИсторияРегистрацийВНалоговомОргане.ДатаОтсчетаПериодическихСведений();
			СтрокаНабораЗаписей.СтруктурнаяЕдиница          = Организация.Ссылка;
			СтрокаНабораЗаписей.РегистрацияВНалоговомОргане = РегистрацияВНалоговомОргане.Ссылка;
			НаборЗаписей.Записать();

		КонецЕсли;
		
		Если Реквизиты.Свойство("РегистрацияВПенсионномФонде") И ЗначениеЗаполнено(Реквизиты.РегистрацияВПенсионномФонде) Тогда
			
			Организация.КодОрганаПФР                          = Реквизиты.РегистрацияВПенсионномФонде.КодОрганаПФР;
			Организация.НаименованиеТерриториальногоОрганаПФР = Реквизиты.РегистрацияВПенсионномФонде.НаименованиеОрганаПФР;
			
			Если ЭтоИндивидуальныйПредприниматель Тогда
				Организация.ИПРегистрационныйНомерПФР = Реквизиты.РегистрацияВПенсионномФонде.РегистрационныйНомерПФР;	
			Иначе
				Организация.РегистрационныйНомерПФР = Реквизиты.РегистрацияВПенсионномФонде.РегистрационныйНомерПФР;
			КонецЕсли;
			
			РеквизитыОтделенияПФР = ДанныеГосударственныхОрганов.РеквизитыОтделенияПФРПоКоду(Лев(Организация.КодОрганаПФР, 3));
			
			Если НЕ ЗначениеЗаполнено(РеквизитыОтделенияПФР.ОписаниеОшибки) Тогда
				ДанныеГосударственныхОрганов.ОбновитьДанныеГосударственногоОргана(РеквизитыОтделенияПФР);
			КонецЕсли;
			
			// История регистраций в органе ПФР.
			НаборЗаписей = РегистрыСведений.ИсторияРегистрацийВОрганеПФР.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Установить(Организация.Ссылка);
			НаборЗаписей.Прочитать();
			СтрокаНабораЗаписей = НаборЗаписей.Добавить();
			СтрокаНабораЗаписей.Период                  = ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведений();
			СтрокаНабораЗаписей.Организация             = Организация.Ссылка;
			СтрокаНабораЗаписей.РегистрационныйНомерПФР = Реквизиты.РегистрацияВПенсионномФонде.РегистрационныйНомерПФР;
			НаборЗаписей.Записать();
			
		КонецЕсли;
		
		Если Реквизиты.Свойство("РегистрацияВФСС") И ЗначениеЗаполнено(Реквизиты.РегистрацияВФСС) Тогда
			
			Если НЕ ЗначениеЗаполнено(Реквизиты.РегистрацияВФСС.КодПодчиненности) Тогда
				СимволПричиныРегистрации = ?(ЭтоИндивидуальныйПредприниматель, "3", "1");
				Организация.КодПодчиненностиФСС = Реквизиты.РегистрацияВФСС.КодОрганаФСС + СимволПричиныРегистрации;
			Иначе
				Организация.КодПодчиненностиФСС = Реквизиты.РегистрацияВФСС.КодПодчиненности;
			КонецЕсли;
			
			Организация.НаименованиеТерриториальногоОрганаФСС = Реквизиты.РегистрацияВФСС.НаименованиеОрганаФСС;
			
			Если ЭтоИндивидуальныйПредприниматель Тогда
				Организация.ИПРегистрационныйНомерФСС = Реквизиты.РегистрацияВФСС.РегистрационныйНомерФСС;
			Иначе
				Организация.РегистрационныйНомерФСС = Реквизиты.РегистрацияВФСС.РегистрационныйНомерФСС;
			КонецЕсли;
			
			РеквизитыОтделенияФСС = ДанныеГосударственныхОрганов.РеквизитыОтделенияФССПоКоду(Организация.КодПодчиненностиФСС);
	
			Если НЕ ЗначениеЗаполнено(РеквизитыОтделенияФСС.ОписаниеОшибки) Тогда
				ДанныеГосударственныхОрганов.ОбновитьДанныеГосударственногоОргана(РеквизитыОтделенияФСС);
			КонецЕсли;
	
		КонецЕсли;
		
		Организация.Записать();
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СистемаНалогообложения) Тогда
		
		// Учетная политика.
		ДанныеЗаполнения = РегистрыСведений.НастройкиСистемыНалогообложения.СтруктураУчетнойПолитики(ВидОрганизации, СистемаНалогообложения, ПлательщикЕНВД, ПрименяетсяУСНПатент);
		ДанныеЗаполнения.Вставить("Организация",              Организация.Ссылка);
		ДанныеЗаполнения.Вставить("ПлательщикТорговогоСбора", ПлательщикТорговогоСбора);
		
		НастройкиУчета.УстановкаПараметровУчетнойПолитикиПоУмолчанию(ДанныеЗаполнения, Истина);
		
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	ПоместитьВоВременноеХранилище(Организация.Ссылка, АдресХранилища);
	
КонецПроцедуры

Процедура ЗаполнитьКонтактнуюИнформациюИФИОПредпринимателя() Экспорт
	
	// Заполняем сведения о контактной информации и ФИО организации - индивидуального предпринимателя
	// по данным физического лица
	
	ВидыКонтактнойИнформацииФизлиц = Новый Массив;
	ВидыКонтактнойИнформацииФизлиц.Добавить(Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица);
	ВидыКонтактнойИнформацииФизлиц.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица);
	
	СоответствиеКонтактнойИнформации = Новый Соответствие;
	
	МассивСоответствий = Новый Массив();
	МассивСоответствий.Добавить(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	МассивСоответствий.Добавить(Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
	МассивСоответствий.Добавить(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации);
	СоответствиеКонтактнойИнформации.Вставить(Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица, МассивСоответствий);
	
	МассивСоответствий = Новый Массив();
	МассивСоответствий.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
	СоответствиеКонтактнойИнформации.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица, МассивСоответствий);
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка,
	|	Организации.ИндивидуальныйПредприниматель
	|ПОМЕСТИТЬ Организации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации.КонтактнаяИнформация КАК ОрганизацииКонтактнаяИнформация
	|		ПО (ОрганизацииКонтактнаяИнформация.Ссылка = Организации.Ссылка)
	|ГДЕ
	|	Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|
	|СГРУППИРОВАТЬ ПО
	|	Организации.Ссылка,
	|	Организации.ИндивидуальныйПредприниматель
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ОрганизацииКонтактнаяИнформация.Ссылка) = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Организации.Ссылка,
	|	Организации.ИндивидуальныйПредприниматель
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|	И Организации.ФамилияИП = """"
	|	И Организации.ИмяИП = """"
	|	И Организации.ОтчествоИП = """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Организации.Ссылка,
	|	Организации.ИндивидуальныйПредприниматель
	|ИЗ
	|	Организации КАК Организации";
	
	ТаблицаОрганизаций = Запрос.Выполнить().Выгрузить();
	Если ТаблицаОрганизаций.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КонтактнаяИнформацияФизлиц = УправлениеКонтактнойИнформациейБП.КонтактнаяИнформацияОбъектовНаДату(
									ТаблицаОрганизаций.ВыгрузитьКолонку("ИндивидуальныйПредприниматель"), , ВидыКонтактнойИнформацииФизлиц);
	
	Для Каждого СтрокаТаблицыОрганизаций ИЗ ТаблицаОрганизаций Цикл
		
		ОрганизацияОбъект = СтрокаТаблицыОрганизаций.Ссылка.ПолучитьОбъект();
		Если ОрганизацияОбъект.КонтактнаяИнформация.Количество() = 0 Тогда
			
			КонтактнаяИнформацияФизлица = КонтактнаяИнформацияФизлиц.НайтиСтроки(Новый Структура("Объект", СтрокаТаблицыОрганизаций.ИндивидуальныйПредприниматель));
			Если КонтактнаяИнформацияФизлица.Количество() > 0 Тогда
				Для Каждого СтрокаКонтактнойИнформацииФизлица Из КонтактнаяИнформацияФизлица Цикл
					
					ВидыДляОрганизации = СоответствиеКонтактнойИнформации.Получить(СтрокаКонтактнойИнформацииФизлица.Вид);
					Если ВидыДляОрганизации <> Неопределено Тогда
						
						Для Каждого ВидДляОрганизации ИЗ ВидыДляОрганизации Цикл
							
							ЗначенияПолей = СтрокаКонтактнойИнформацииФизлица.ЗначенияПолей;
							Если НЕ УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(ЗначенияПолей) Тогда
								ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтрокаКонтактнойИнформацииФизлица.ЗначенияПолей, СтрокаКонтактнойИнформацииФизлица.Представление, ВидДляОрганизации);
							КонецЕсли;
							
							УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(
										ОрганизацияОбъект,
										ЗначенияПолей,
										ВидДляОрганизации,
										СтрокаКонтактнойИнформацииФизлица.Тип);
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОрганизацияОбъект.ФамилияИП = "" И ОрганизацияОбъект.ИмяИП = "" И ОрганизацияОбъект.ОтчествоИП = "" Тогда
			// Не заполнено ФИО индивидуального предпринимателя
			ОтборИсторииФИОИП = Новый Структура("ФизическоеЛицо", СтрокаТаблицыОрганизаций.ИндивидуальныйПредприниматель);
			ФИОФизлица = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(, ОтборИсторииФИОИП);
			Если ФИОФизлица.Количество() > 0 Тогда
				ОрганизацияОбъект.ФамилияИП = ФИОФизлица[0].Фамилия;
				ОрганизацияОбъект.ИмяИП = ФИОФизлица[0].Имя;
				ОрганизацияОбъект.ОтчествоИП = ФИОФизлица[0].Отчество;
			КонецЕсли;
			
			// Заполняем ФИО в истории наименований
			Для Каждого ЗаписьИстории Из ОрганизацияОбъект.ИсторияНаименований Цикл
				Если ЗаписьИстории.ФамилияИП = "" И ЗаписьИстории.ИмяИП = "" И ЗаписьИстории.ОтчествоИП = "" Тогда
					ФИОФизлица = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(ЗаписьИстории.Период, ОтборИсторииФИОИП);
					Если ФИОФизлица.Количество() > 0 Тогда
						ЗаписьИсторииФизлица = ФИОФизлица[0];
						Если ЗаписьИсторииФизлица.Период > ЗаписьИстории.Период Тогда
							// История в ФИО физ.лиц начинается позже, чем история в "Истории наименований"
							// Поэтому берем срез первых на дату истории физ.лица
							ФИОФизлица = РегистрыСведений.ФИОФизическихЛиц.СрезПервых(ЗаписьИстории.Период, ОтборИсторииФИОИП);
							Если ФИОФизлица.Количество() > 0 Тогда
								ЗаписьИсторииФизлица = ФИОФизлица[0];
							КонецЕсли;
						КонецЕсли;
						Если ФИОФизлица.Количество() > 0 Тогда
							ЗаписьИстории.ФамилияИП  = ЗаписьИсторииФизлица.Фамилия;
							ЗаписьИстории.ИмяИП      = ЗаписьИсторииФизлица.Имя;
							ЗаписьИстории.ОтчествоИП = ЗаписьИсторииФизлица.Отчество;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОрганизацияОбъект);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура устанавливает признак наличия обособленных подразделений
//
Процедура УстановитьПризнакЕстьОбособленныеПодразделения() Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПодразделениям") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Организации.Ссылка КАК Организация
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	НЕ Организации.ЕстьОбособленныеПодразделения";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ОрганизацияОбъект = Выборка.Организация.ПолучитьОбъект();
			ОрганизацияОбъект.ЕстьОбособленныеПодразделения = Истина;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОрганизацияОбъект);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает код по ОКТМО организации на указанную дату.
//
// Параметры:
//     Организация - СправочникСсылка.Организация - Организация.
//     ДатаСведений - Дата - Дата, на которую нужно получить код по ОКТМО организации.
//
// Возвращаемое значение:
//     Строка - код по ОКТМО.
//
Функция КодПоОКТМОНаДату(Организация, ДатаСведений = '20991231') Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация)
		ИЛИ ТипЗнч(Организация) <> Тип("СправочникСсылка.Организации") Тогда
		Возврат "";
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Организация",  Организация);
	Запрос.Параметры.Вставить("ДатаСведений", ДатаСведений);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИсторияРегистраций.РегистрацияВНалоговомОргане.КодПоОКТМО КАК КодПоОКТМО
	|ИЗ
	|	РегистрСведений.ИсторияРегистрацийВНалоговомОргане.СрезПоследних(&ДатаСведений, СтруктурнаяЕдиница = &Организация) КАК ИсторияРегистраций";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат "";
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.КодПоОКТМО;
	КонецЕсли;
	
КонецФункции

Функция ФизическоеЛицо(Фамилия, Имя, Отчество = "", ИНН = "") Экспорт
	
	Если ПустаяСтрока(Фамилия) Или ПустаяСтрока(Имя) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ФИО = СокрЛП(СокрЛП(Фамилия)+" "+СокрЛП(Имя)+" "+СокрЛП(Отчество));
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("ИНН", ИНН);
	Запрос.Параметры.Вставить("ФИО", ФИО);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка,
	|	1 КАК Приоритет
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.ИНН = &ИНН
	|	И ФизическиеЛица.ИНН <> """"
	|	И НЕ ФизическиеЛица.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка,
	|	2
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.ФИО = &ФИО
	|	И НЕ ФизическиеЛица.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПрикрепленныйФайлПоИмени(Ссылка, ИмяФайла) Экспорт
	
	ПрикрепленныеФайлы = ПрикрепленныеФайлыПоИмени(Ссылка, Новый Структура("ИмяФайла", ИмяФайла));
	Если ЗначениеЗаполнено(ПрикрепленныеФайлы) Тогда
		Возврат ПрикрепленныеФайлы.ИмяФайла;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПрикрепленныеФайлыПоИмени(Ссылка, ИменаФайлов) Экспорт
	
	Файлы = Новый Массив;
	ПрисоединенныеФайлы.ПолучитьПрикрепленныеФайлыКОбъекту(Ссылка, Файлы);
	
	МассивИмен = Новый Массив;
	Для Каждого КлючИЗначение Из ИменаФайлов Цикл
		МассивИмен.Добавить(КлючИЗначение.Значение);
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("ПрисоединенныеФайлы", Файлы);
	Запрос.Параметры.Вставить("МассивИмен", МассивИмен);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОрганизацииПрисоединенныеФайлы.Ссылка,
	|	ОрганизацииПрисоединенныеФайлы.Наименование
	|ИЗ
	|	Справочник.ОрганизацииПрисоединенныеФайлы КАК ОрганизацииПрисоединенныеФайлы
	|ГДЕ
	|	ОрганизацииПрисоединенныеФайлы.Ссылка В(&ПрисоединенныеФайлы)
	|	И ОрганизацииПрисоединенныеФайлы.Наименование В(&МассивИмен)
	|	И НЕ ОрганизацииПрисоединенныеФайлы.ПометкаУдаления";
	
	ТаблицаПоименованныхСсылок = Запрос.Выполнить().Выгрузить();
	ТаблицаПоименованныхСсылок.Индексы.Добавить("Наименование");
	
	ПрикрепленныеФайлы = Новый Структура;
	Для Каждого КлючИЗначение Из ИменаФайлов Цикл
		НайденнаяСтрока = ТаблицаПоименованныхСсылок.Найти(КлючИЗначение.Значение, "Наименование");
		Если НайденнаяСтрока <> Неопределено Тогда
			ПрикрепленныеФайлы.Вставить(КлючИЗначение.Ключ, НайденнаяСтрока.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПрикрепленныеФайлы;
	
КонецФункции

Функция НайтиПоИНН(ИНН) Экспорт
	
	Если ПустаяСтрока(ИНН) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("ИНН", ИНН);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ИНН = &ИНН
	|	И НЕ Организации.ОбособленноеПодразделение
	|	И НЕ Организации.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
