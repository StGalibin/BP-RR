#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура ЗаполнитьТребованиямиНормативныхДокументов() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		// Предопределенные элементы не следует создавать в подчиненных узлах РИБ
 		Возврат;
	КонецЕсли;

	ПредопределенныеПравила = ПредопределенныеПравила();
	Если ПредопределенныеПравила = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗагруженныеЗадачи = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗадачиКалендаряБухгалтера.Код КАК Идентификатор,
	|	ЗадачиКалендаряБухгалтера.Наименование,
	|	ЗадачиКалендаряБухгалтера.Ссылка,
	|	ЗадачиКалендаряБухгалтера.НаименованиеПолное,
	|	ЗадачиКалендаряБухгалтера.РеквизитДопУпорядочивания
	|ПОМЕСТИТЬ ЗадачиБухгалтера
	|ИЗ
	|	Справочник.ЗадачиБухгалтера КАК ЗадачиКалендаряБухгалтера
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиКалендаряБухгалтера.Идентификатор КАК Идентификатор,
	|	ЗадачиКалендаряБухгалтера.Наименование КАК Наименование,
	|	ЗадачиКалендаряБухгалтера.Ссылка КАК Ссылка,
	|	ЗадачиКалендаряБухгалтера.НаименованиеПолное,
	|	ЗадачиКалендаряБухгалтера.РеквизитДопУпорядочивания
	|ИЗ
	|	ЗадачиБухгалтера КАК ЗадачиКалендаряБухгалтера
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиКалендаряБухгалтера.Ссылка КАК Задача,
	|	Требования.Код КАК ИдентификаторТребования,
	|	Требования.Ссылка КАК Требование,
	|	Требования.ДатаИзменения
	|ИЗ
	|	ЗадачиБухгалтера КАК ЗадачиКалендаряБухгалтера
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК Требования
	|		ПО ЗадачиКалендаряБухгалтера.Ссылка = Требования.Владелец";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ЗагруженныеРанееЗадачи = РезультатЗапроса[1].Выгрузить();
	ЗагруженныеРанееЗадачи.Индексы.Добавить("Идентификатор");
	ЗагруженныеРанееТребования = РезультатЗапроса[2].Выгрузить();
	ЗагруженныеРанееЗадачи.Индексы.Добавить("Идентификатор");
	ЗагруженныеРанееТребования.Индексы.Добавить("Задача,ИдентификаторТребования");
	
	Для Каждого НаборТребований Из ПредопределенныеПравила Цикл // Набор описывает требования к выполнению бухгалтером какой-то задачи, например "НДС"
		
		// Синхронизируем справочник ЗадачиБухгалтера
		Выборка = ЗагруженныеРанееЗадачи.НайтиСтроки(Новый Структура("Идентификатор", НаборТребований.Идентификатор));
		
		Если Выборка.Количество() = 0 Тогда
			Объект = Справочники.ЗадачиБухгалтера.СоздатьЭлемент();
			Объект.Код                       = НаборТребований.Идентификатор;
			Объект.Наименование              = НаборТребований.Представление;
			Объект.НаименованиеПолное        = НаборТребований.НаименованиеПолное;
			Объект.РеквизитДопУпорядочивания = НаборТребований.Порядок;
			Объект.Записать();
			Задача = Объект.Ссылка;
		Иначе
			ЗагруженнаяРанееЗадача = Выборка[0];
			Задача = ЗагруженнаяРанееЗадача.Ссылка;
			Если ЗагруженнаяРанееЗадача.Наименование <> НаборТребований.Представление 
				Или ЗагруженнаяРанееЗадача.НаименованиеПолное <> НаборТребований.НаименованиеПолное
				Или ЗагруженнаяРанееЗадача.РеквизитДопУпорядочивания <> НаборТребований.Порядок Тогда
				
				Объект = ЗагруженнаяРанееЗадача.Ссылка.ПолучитьОбъект();
				Объект.Наименование              = НаборТребований.Представление;
				Объект.НаименованиеПолное        = НаборТребований.НаименованиеПолное;
				Объект.РеквизитДопУпорядочивания = НаборТребований.Порядок;
				Объект.Записать();
				
			КонецЕсли;
		КонецЕсли;
		
		// Синхронизируем справочник ПравилаПредставленияОтчетовУплатыНалогов
		
		Для Каждого ОписаниеТребования Из НаборТребований.Требования Цикл
			
			Отбор = Новый Структура;
			Отбор.Вставить("Задача",                  Задача);
			Отбор.Вставить("ИдентификаторТребования", ОписаниеТребования.Идентификатор);
			Выборка = ЗагруженныеРанееТребования.НайтиСтроки(Отбор);
			
			Объект = Неопределено;
			Если Выборка.Количество() = 0 Тогда
				Объект = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.СоздатьЭлемент();
				Объект.Владелец      = Задача;
				Объект.Код           = ОписаниеТребования.Идентификатор;
			Иначе
				ЗагруженноеРанееТребование = Выборка[0];
				Если ЗагруженноеРанееТребование.ДатаИзменения < ОписаниеТребования.ДатаИзменения Тогда
					Объект = ЗагруженноеРанееТребование.Требование.ПолучитьОбъект();
				КонецЕсли;
			КонецЕсли;
			
			Если Объект = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Объект.РеквизитДопУпорядочивания = ОписаниеТребования.Порядок;
			ЗаполнитьЗначенияСвойств(Объект, ОписаниеТребования, , "Условия");
			
			Объект.Условия.Очистить();
			Для Каждого Условие Из ОписаниеТребования.Условия Цикл
				Объект.Условия.Добавить().Условие = Условие;
			КонецЦикла;
			
			Объект.Записать();
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТребованияНормативныхДокументовXML() Экспорт
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку();
	Запись.ЗаписатьОбъявлениеXML();
	
	ПространствоИмен = Метаданные.ПакетыXDTO.ПравилаПредставленияОтчетовУплатыНалогов.ПространствоИмен;
	ТипПравила    = ФабрикаXDTO.Тип(ПространствоИмен, "ПравилаПредставленияОтчетовУплатыНалогов");
	ТипЗадача     = ФабрикаXDTO.Тип(ПространствоИмен, "Задача");
	ТипТребование = ФабрикаXDTO.Тип(ПространствоИмен, "Требование");
	ТипУсловие    = ФабрикаXDTO.Тип(ПространствоИмен, "Условие");
	
	Правила = ФабрикаXDTO.Создать(ТипПравила);
	Правила.ВерсияФормата = "3.0.1.3";
	
	ПредыдущаяВерсияПравил = ПредопределенныеПравила();
	
	ВыборкаЗадачи = Справочники.ЗадачиБухгалтера.Выбрать(,,,"РеквизитДопУпорядочивания");
	Пока ВыборкаЗадачи.Следующий() Цикл
		
		Если ВыборкаЗадачи.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		
		Задача = ФабрикаXDTO.Создать(ТипЗадача);
		Задача.Идентификатор      = ВыборкаЗадачи.Код;
		Задача.Представление      = ВыборкаЗадачи.Наименование;
		
		Задача.НаименованиеПолное = ВыборкаЗадачи.НаименованиеПолное;
		Задача.Порядок            = ВыборкаЗадачи.РеквизитДопУпорядочивания;
		
		ВыборкаТребования = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.Выбрать(,ВыборкаЗадачи.Ссылка,,"РеквизитДопУпорядочивания");
		Пока ВыборкаТребования.Следующий() Цикл
			
			Если ВыборкаТребования.ПометкаУдаления Тогда
				Продолжить;
			КонецЕсли;
			
			Требование = ФабрикаXDTO.Создать(ТипТребование);
			Требование.Идентификатор = ВыборкаТребования.Код;
			Требование.Порядок       = ВыборкаТребования.РеквизитДопУпорядочивания;
			ЗаполнитьЗначенияСвойств(Требование, ВыборкаТребования);
			
			Для Каждого ВыборкаУсловия Из ВыборкаТребования.Условия Цикл 
				
				Если ЗначениеЗаполнено(ВыборкаУсловия.Условие) Тогда
					Требование.Условие.Добавить(ВыборкаУсловия.Условие);
				КонецЕсли;
				
			КонецЦикла;
			
			// Если какие-либо параметры требования отличаются от предыдущей версии,
			// то обновим номер версии
			Если ВерсияТребованияОтличается(ПредыдущаяВерсияПравил, ВыборкаЗадачи.Код, Требование) Тогда
				Требование.ДатаИзменения = НачалоДня(ТекущаяДатаСеанса());
			КонецЕсли;
			
			Задача.Требование.Добавить(Требование);
			
		КонецЦикла;
		
		Правила.Задача.Добавить(Задача);
		
	КонецЦикла;
	
	
	ФабрикаXDTO.ЗаписатьXML(
		Запись, 
		Правила,
		"ПравилаПредставленияОтчетовУплатыНалогов",
		ПространствоИмен,
		,
		НазначениеТипаXML.Явное);
	
	Возврат Запись.Закрыть();
	
КонецФункции

Функция ПредставлениеЗадачи(Задача) Экспорт
	
	Представление = СокрЛП(Задача);
	Представление = ВРег(Лев(Представление, 1)) + Сред(Представление, 2);
	
	Возврат Представление;
	
КонецФункции

#КонецОбласти

#Область ПрикладныеПравила

Функция МожноВыполнятьСверку(ПараметрыКоманды) Экспорт
	
	ЗадачиРосприроднадзора = ЗадачиРосприроднадзора();
	Если ЗадачиРосприроднадзора.Найти(ПараметрыКоманды.ИдентификаторЗадачи) <> Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ПараметрыКоманды.Действие = Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога
		ИЛИ ПараметрыКоманды.Действие = Перечисления.ВидыДействийКалендаряБухгалтера.Отчет
			И ПараметрыКоманды.ИдентификаторЗадачи <> "БухгалтерскаяОтчетность"
			И ПараметрыКоманды.ИдентификаторЗадачи <> "СведенияОСреднесписочнойЧисленности"
			И ПараметрыКоманды.ИдентификаторЗадачи <> "СтатистическаяОтчетность";
	
КонецФункции

Функция ЗадачиРосприроднадзора() Экспорт
	
	ЗадачиРосприроднадзора = Новый Массив;
	ЗадачиРосприроднадзора.Добавить("ПлатаЗаНегативноеВоздействиеНаОкружающуюСреду");
	ЗадачиРосприроднадзора.Добавить("ЭкологическийСбор");
	ЗадачиРосприроднадзора.Добавить("Росприроднадзор");
	
	Возврат Новый ФиксированныйМассив(ЗадачиРосприроднадзора);
	
КонецФункции

Процедура ПродлитьСрокНапоминанияПроверитьПереченьФормСтатистики(Правила)
	
	// Оптимальный срок напоминания определен по формам МП (микро) и 1-ИП.
	// Может оказаться, что
	// - предприятию не надо сдавать эти формы, но следует сдать другие, с более поздним сроком
	// - на момент обновления данных о требованиях нормативных документов оптимальный срок уже истек.
	// В этом случае напоминания имеет смысл показывать и дальше - вплоть до крайнего срока,
	// позже которого точно не успеем предоставить никакую из форм отчетности за этот год.
	//
	// Поэтому, если оптимальный срок, указанный в правилах, уже истек,
	// то продлим его до текущей даты, но не позднее, чем крайний срок.
	
	КрайнийСрокНапоминания = '2017-04-01'; // можно еще успеть предоставить ТЗВ-МП
	
	Сегодня = НачалоДня(ТекущаяДатаСеанса());
	
	Если Сегодня > КрайнийСрокНапоминания Тогда
		// уже совсем поздно
		Возврат;
	КонецЕсли;
	
	ОписаниеЗадачи = Правила.Найти("СтатистическаяОтчетность", "Идентификатор");
	Если ОписаниеЗадачи = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИменаТребований = Новый Массив;
	ИменаТребований.Добавить("ПроверитьПереченьФормФизлица");
	ИменаТребований.Добавить("ПроверитьПереченьФормЮрлица");
	
	Для Каждого ИмяТребования Из ИменаТребований Цикл
		
		Требование = ОписаниеЗадачи.Требования.Найти(ИмяТребования, "Идентификатор");
		Если Требование = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОптимальнаяДата = ДобавитьМесяц('2016-12-31', Требование.СрокМесяцев) + Требование.СрокДней * 24 * 60 * 60;
		
		Если ОптимальнаяДата >= Сегодня Тогда
			// успеваем напомнить вовремя, не надо продлять срок
			Продолжить;
		КонецЕсли;
		
		Требование.СрокМесяцев   = Месяц(Сегодня) - 1;
		Требование.СрокДней      = День(Сегодня);
		Требование.ДатаИзменения = Сегодня; // если продляли срок напоминания, то продленный срок должен остаться и после того, когда пройдет крайний срок
		
	КонецЦикла;
	
КонецПроцедуры


#Область ОбработчикиОбновления

Процедура Удалить2013_1ИП() Экспорт
	
	// Задача 2013_1ИП удалена в версии 3.0.42
	// Вместо нее добавлена новая задача - "2013_1ИПсвед"
	
	ЗаполнитьТребованиямиНормативныхДокументов();
	
	Правило = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.НайтиПоКоду("2013_1ИП");
	Если НЕ ЗначениеЗаполнено(Правило) ИЛИ Правило.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Правило.ПолучитьОбъект().УстановитьПометкуУдаления(Истина, Истина);
	
	// После выполнения этого обработчика общих данных,
	// нужно обработать разделенные данные - см. УдалитьНастройки2013_1ИП
	
КонецПроцедуры

Процедура УдалитьНастройки2013_1ИП() Экспорт
	
	// Задача 2013_1ИП удалена в версии 3.0.42
	// Вместо нее добавлена новая задача - "2013_1ИПсвед"
	
	// Пользователь мог выполнить настройки для задачи 2013_1ИП.
	// В таком случае их нужно перенести на новые правила.
	
	// Этот обработчик следует вызывать после Удалить2013_1ИП()
	// (строго говоря - после ЗаполнитьТребованиямиНормативныхДокументов())
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КодСтарогоПравила", "2013_1ИП");
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НалогиОтчеты.Организация
	|ИЗ
	|	РегистрСведений.НалогиОтчеты КАК НалогиОтчеты
	|ГДЕ
	|	НалогиОтчеты.НалогОтчет.Код = &КодСтарогоПравила";
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	// Вместо этих задач нужно создать настройки для нового - появившегося в 3.0.42 - правила
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИмяПравила", "2013_1ИПсвед");
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Правила.Ссылка КАК Правило
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов.Условия КАК Правила
	|ГДЕ
	|	Правила.Условие = ЗНАЧЕНИЕ(Перечисление.УсловияПримененияТребованийЗаконодательства.ПравилоВыбраноПользователем)
	|	И Правила.Ссылка.Код =(&ИмяПравила)";
	НовыеПравила = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Правило");
	
	Если НовыеПравила.Количество() = 0 Тогда
		// Ничего не сможем создать
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Для Каждого НовоеПравило Из НовыеПравила Цикл
			НоваяНастройка = РегистрыСведений.НалогиОтчеты.СоздатьМенеджерЗаписи();
			НоваяНастройка.Организация = Выборка.Организация;
			НоваяНастройка.НалогОтчет  = НовоеПравило;
			НоваяНастройка.Записать();
		КонецЦикла;
		
		СтараяНастройка = РегистрыСведений.НалогиОтчеты.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(СтараяНастройка, Выборка);
		СтараяНастройка.Удалить();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьСверкаНДС() Экспорт
	
	// Задача СверкаНДС удалена в версии 3.0.43
	// Вместо нее добавлено правило СверкаНДС в задаче НДС
	
	ЗаполнитьТребованиямиНормативныхДокументов();
	
	Задача = Справочники.ЗадачиБухгалтера.НайтиПоКоду("СверкаНДС");
	Если НЕ ЗначениеЗаполнено(Задача) ИЛИ Задача.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Задача.ПолучитьОбъект().УстановитьПометкуУдаления(Истина, Истина);
	
	// После выполнения этого обработчика общих данных,
	// нужно обработать разделенные данные - см. УдалитьНастройкиСверкаНДС
	
КонецПроцедуры

Процедура УдалитьНастройкиСверкаНДС() Экспорт
	
	// Задача СверкаНДС удалена в версии 3.0.43
	// Вместо нее добавлено правило СверкаНДС в задаче НДС
	
	// Пользователь мог выполнить настройки для задачи СверкаНДС.
	// В таком случае их нужно удалить
	
	// Этот обработчик следует вызывать после УдалитьСверкаНДС()
	// (строго говоря - после ЗаполнитьТребованиямиНормативныхДокументов())
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИмяЗадачи", "СверкаНДС");
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Ссылка
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК ПравилаПредставленияОтчетовУплатыНалогов
	|ГДЕ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Владелец.Код = &ИмяЗадачи";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Выборка.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина, Истина);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КодСтарогоПравила", "СверкаНДС");
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НалогиОтчеты.Организация
	|ИЗ
	|	РегистрСведений.НалогиОтчеты КАК НалогиОтчеты
	|ГДЕ
	|	НалогиОтчеты.НалогОтчет.Код = &КодСтарогоПравила";
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтараяНастройка = РегистрыСведений.НалогиОтчеты.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(СтараяНастройка, Выборка);
		СтараяНастройка.Удалить();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьВносыИПСдоходов() Экспорт
	
	// Задача СтраховыеВзносыСДоходов_Предприниматель удалена в версии 3.0.43
	// Она объединена с задачей СтраховыеВзносы_Предприниматель
	
	ЗаполнитьТребованиямиНормативныхДокументов();
	
	Задача = Справочники.ЗадачиБухгалтера.НайтиПоКоду("СтраховыеВзносыСДоходов_Предприниматель");
	Если НЕ ЗначениеЗаполнено(Задача) ИЛИ Задача.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Задача.ПолучитьОбъект().УстановитьПометкуУдаления(Истина, Истина);
	
	// После выполнения этого обработчика общих данных,
	// нужно обработать разделенные данные - см. УдалитьНастройкиСверкаНДС
	
КонецПроцедуры

Процедура УдалитьНастройкиВносыИПСдоходов() Экспорт
	
	// Задача СтраховыеВзносы_Предприниматель удалена в версии 3.0.43
	// Она объединена с задачей СтраховыеВзносы_Предприниматель
	
	// Пользователь мог выполнить настройки для задачи СтраховыеВзносы_Предприниматель.
	// В таком случае их нужно удалить
	
	// Этот обработчик следует вызывать после УдалитьВносыИПСдоходов()
	// (строго говоря - после ЗаполнитьТребованиямиНормативныхДокументов())
	
	Задача = Справочники.ЗадачиБухгалтера.НайтиПоКоду("СтраховыеВзносыСДоходов_Предприниматель");
	Если НЕ ЗначениеЗаполнено(Задача) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Задача", Задача);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Ссылка
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК ПравилаПредставленияОтчетовУплатыНалогов
	|ГДЕ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Владелец = &Задача";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Выборка.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина, Истина);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КодСтарогоПравила", "2013_Уплата");
	Запрос.УстановитьПараметр("Задача",            Задача);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НалогиОтчеты.Организация
	|ИЗ
	|	РегистрСведений.НалогиОтчеты КАК НалогиОтчеты
	|ГДЕ
	|	ВЫБОР
	|			КОГДА НалогиОтчеты.НалогОтчет ССЫЛКА Справочник.ПравилаПредставленияОтчетовУплатыНалогов
	|				ТОГДА НалогиОтчеты.НалогОтчет.Код = &КодСтарогоПравила
	|						И НалогиОтчеты.НалогОтчет.Владелец = &Задача
	|			ИНАЧЕ НалогиОтчеты.НалогОтчет = &Задача
	|		КОНЕЦ";
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтараяНастройка = РегистрыСведений.НалогиОтчеты.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(СтараяНастройка, Выборка);
		СтараяНастройка.Удалить();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВключитьПлатаЗаНегативноеВоздействиеНаОкружающуюСреду() Экспорт
	
	// Для задач Росприроднадзора настройки выполняются в разрезе отдельных правил.
	// Федеральным законом от 21.07.2014 N 219-ФЗ изменен срок внесения платы за негативное воздействие на окружающую среду.
	// В соответствии с этим добавлено новое правило 2015_ПлатаЗаНегативноеВоздействиеУплата.
	// Пользователям, которые настроили выполнение задач Росприроднадзора нужно включить новое правило.
	
	// Новое правило добавлено в версии 3.0.43.44.
	// Обработчик включения правила выполняется в следующей версии - 3.0.43.45 - чтобы выполнить его точно после того,
	// как новое правило создано в информационной базе.
	
	КодЗадачи = "Росприроднадзор";
	ЗадачаРосприроднадзор = Справочники.ЗадачиБухгалтера.НайтиПоКоду(КодЗадачи);
	Если Не ЗначениеЗаполнено(ЗадачаРосприроднадзор) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗадачаРосприроднадзор", ЗадачаРосприроднадзор);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НалогиОтчеты.Организация
	|ИЗ
	|	РегистрСведений.НалогиОтчеты КАК НалогиОтчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК Правила
	|		ПО НалогиОтчеты.НалогОтчет = Правила.Ссылка
	|ГДЕ
	|	Правила.Владелец = &ЗадачаРосприроднадзор";
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НовоеПравило = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.НайтиПоКоду(
		"2015_ПлатаЗаНегативноеВоздействиеУплата",
		,
		,
		ЗадачаРосприроднадзор);
		
	Если Не ЗначениеЗаполнено(НовоеПравило) Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.НалогиОтчеты.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.НалогОтчет.Установить(НовоеПравило);
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяНастройка = НаборЗаписей.Добавить();
		НоваяНастройка.Организация = Выборка.Организация;
		НоваяНастройка.НалогОтчет  = НовоеПравило;
		
	КонецЦикла;
	
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Истина);
	
КонецПроцедуры

// До 2015 года существовала задача по внесению платы за негативное воздействие на окружающую среду
// ("ПлатаЗаНегативноеВоздействиеНаОкружающуюСреду").

// В 2015 году изменились нормативные документы, связанные с этой платой, и действовал переходный период.
// На время переходного периода все задачи, связанные с Росприроднадзором, были объединены в единую задачу "Росприроднадзор".

// С 2016 года действует новый порядок внесения платы за негативное воздействие на окружающую среду. 
// Кроме того, появилась обязанность вносить экологический сбор за товары, подлежащие утилизации.

// Поэтому правила по НВОС и экологическому сбору выделены в отдельные задачи в версии 3.0.44.184.
// В связи с этим:
// - если задача ПлатаЗаНегативноеВоздействиеНаОкружающуюСреду не была удалена ранее, то она останется с пометкой на удаление.
//   Пометку следует снять
// - пользователям, у которых ранее было включено старое правило по НВОС,
//   включим взамен него новые годовые правила по НВОС.
//   Правило про ежеквартальную плату не включаем, так как большинство предприятий, вносящих плату, делают это ежегодно.

// Соответствующие обработчики выполняются в версии, следующей за изменением правил, чтобы выполнить их заведомо после того,
// как обновлены правила.

Процедура ВключитьПлатаЗаНегативноеВоздействиеНаОкружающуюСреду2016ОбщиеДанные() Экспорт
	
	Справочники.ЗадачиБухгалтера.ЗаполнитьТребованиямиНормативныхДокументов();
	
	// Задача ПлатаЗаНегативноеВоздействиеНаОкружающуюСреду удалена в версии 3.0.38.
	// Позже, в версии 3.0.44 она восстановлена.
	// Но если между 3.0.38 и 3.0.44 не выполнялось удаление помеченных,
	// то задача не будет отображаться в списке настроек.
	// Поэтому следует снять пометку удаления.
	
	Задача = Справочники.ЗадачиБухгалтера.НайтиПоКоду("ПлатаЗаНегативноеВоздействиеНаОкружающуюСреду");
	Если Не ЗначениеЗаполнено(Задача) Или Не Задача.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Задача.ПолучитьОбъект().УстановитьПометкуУдаления(Ложь, Ложь);
	
	// После выполнения этого обработчика общих данных,
	// нужно обработать разделенные данные - см. ВключитьПлатаЗаНегативноеВоздействиеНаОкружающуюСреду2016РазделенныеДанные
	
КонецПроцедуры

Процедура ВключитьПлатаЗаНегативноеВоздействиеНаОкружающуюСреду2016РазделенныеДанные() Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КодЗадачи",  "Росприроднадзор");
	Запрос.УстановитьПараметр("КодПравила", "2015_ПлатаЗаНегативноеВоздействиеУплата");
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НалогиОтчеты.Организация
	|ИЗ
	|	РегистрСведений.НалогиОтчеты КАК НалогиОтчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК Правила
	|		ПО НалогиОтчеты.НалогОтчет = Правила.Ссылка
	|ГДЕ
	|	Правила.Владелец.Код = &КодЗадачи
	|	И Правила.Код = &КодПравила";
	РезультатПотребныеНастройки = Запрос.Выполнить();
	Если РезультатПотребныеНастройки.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НовыеПравила = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КодЗадачи", "ПлатаЗаНегативноеВоздействиеНаОкружающуюСреду");
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК ПравилаПредставленияОтчетовУплатыНалогов
	|ГДЕ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Владелец.Код = &КодЗадачи
	|	И ПравилаПредставленияОтчетовУплатыНалогов.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
	|	И НЕ ПравилаПредставленияОтчетовУплатыНалогов.ПометкаУдаления";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НовыеПравила.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Для Каждого НовоеПравило Из НовыеПравила Цикл
	
		НаборЗаписей = РегистрыСведений.НалогиОтчеты.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.НалогОтчет.Установить(НовоеПравило);
	
		Выборка = РезультатПотребныеНастройки.Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяНастройка = НаборЗаписей.Добавить();
			НоваяНастройка.Организация = Выборка.Организация;
			НоваяНастройка.НалогОтчет  = НовоеПравило;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Истина);
		
	КонецЦикла;
	
КонецПроцедуры

// С отчетности за январь 2017 года форма статистики Приложение №3 к П-1 не применяется.
// Вместо нее применяется П (услуги) - месячная.
// По итогам 2016 года единоразово предоставляется Приложение к форме 11 / N 11 (краткая).
// Приложение предоставляют те же, кто и основную форму.
//
Процедура ВключитьФормыСтатистики2017() Экспорт

	// Правила, относящиеся к новым формам статистики, добавлены в версии 3.0.47.19.
	// Обработчик включения правил выполняется в следующей версии - 3.0.47.20 - чтобы выполнить его точно после того,
	// как новое правило создано в информационной базе.
	
	ИзмененияТребований = Новый ТаблицаЗначений;
	ОписаниеТипаИмяПравила = ОбщегоНазначения.ОписаниеТипаСтрока(Метаданные.Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ДлинаКода);
	ИзмененияТребований.Колонки.Добавить("ИмяСтарогоПравила", ОписаниеТипаИмяПравила);
	ИзмененияТребований.Колонки.Добавить("ИмяНовогоПравила",  ОписаниеТипаИмяПравила);
	
	Изменение = ИзмененияТребований.Добавить();
	Изменение.ИмяСтарогоПравила = "2013_П1_3";
	Изменение.ИмяНовогоПравила  = "2017_ПУслугиМесячная";
	
	Изменение = ИзмененияТребований.Добавить();
	Изменение.ИмяСтарогоПравила = "2013_11";
	Изменение.ИмяНовогоПравила  = "2016_11Приложение";
	
	Изменение = ИзмененияТребований.Добавить();
	Изменение.ИмяСтарогоПравила = "2013_11Краткая";
	Изменение.ИмяНовогоПравила  = "2016_11КраткаяПриложение";
	
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ИменаНовыхПравил  = ИзмененияТребований.ВыгрузитьКолонку("ИмяНовогоПравила");
	ИменаСтарыхПравил = ИзмененияТребований.ВыгрузитьКолонку("ИмяСтарогоПравила");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИменаСтарыхПравил", ИменаСтарыхПравил);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗадачиБухгалтера.Ссылка
	|ПОМЕСТИТЬ ЗадачаСтатистическаяОтчетность
	|ИЗ
	|	Справочник.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|ГДЕ
	|	ЗадачиБухгалтера.Код = ""СтатистическаяОтчетность""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НалогиОтчеты.Организация КАК Организация,
	|	Правила.Код КАК ИмяПравила
	|ПОМЕСТИТЬ НастройкиПрошлыхЛет
	|ИЗ
	|	РегистрСведений.НалогиОтчеты КАК НалогиОтчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК Правила
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗадачаСтатистическаяОтчетность КАК ЗадачаСтатистическаяОтчетность
	|			ПО Правила.Владелец = ЗадачаСтатистическаяОтчетность.Ссылка
	|		ПО НалогиОтчеты.НалогОтчет = Правила.Ссылка
	|ГДЕ
	|	Правила.Код В(&ИменаСтарыхПравил)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВыполненныеНастройки.Организация
	|ИЗ
	|	НастройкиПрошлыхЛет КАК ВыполненныеНастройки";
	Если Запрос.Выполнить().Пустой() Тогда
		// Никому не нужны эти формы
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИменаНовыхПравил", ИменаНовыхПравил);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Правила.Код КАК ИмяПравила,
	|	Правила.Ссылка КАК Правило
	|ПОМЕСТИТЬ НовыеПравила
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК Правила
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗадачаСтатистическаяОтчетность КАК ЗадачаСтатистическаяОтчетность
	|		ПО Правила.Владелец = ЗадачаСтатистическаяОтчетность.Ссылка
	|ГДЕ
	|	Правила.Код В(&ИменаНовыхПравил)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИмяПравила
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	НалогиОтчеты.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.НалогиОтчеты КАК НалогиОтчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НовыеПравила КАК НовыеПравила
	|		ПО НалогиОтчеты.НалогОтчет = НовыеПравила.Правило";
	Если Не Запрос.Выполнить().Пустой() Тогда
		// Настройки уже выполнены, повторно автоматически менять их не следует
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИзмененияТребований",  ИзмененияТребований);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.ИмяНовогоПравила КАК ИмяНовогоПравила,
	|	Таблица.ИмяСтарогоПравила КАК ИмяСтарогоПравила
	|ПОМЕСТИТЬ ИзмененияТребований
	|ИЗ
	|	&ИзмененияТребований КАК Таблица
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИмяСтарогоПравила
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиПрошлыхЛет.Организация КАК Организация,
	|	НовыеПравила.Правило КАК Правило
	|ИЗ
	|	НастройкиПрошлыхЛет КАК НастройкиПрошлыхЛет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИзмененияТребований КАК ИзмененияТребований
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ НовыеПравила КАК НовыеПравила
	|			ПО ИзмененияТребований.ИмяНовогоПравила = НовыеПравила.ИмяПравила
	|		ПО НастройкиПрошлыхЛет.ИмяПравила = ИзмененияТребований.ИмяСтарогоПравила";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.НалогиОтчеты.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
		НаборЗаписей.Отбор.НалогОтчет.Установить(Выборка.Правило);
		
		НоваяНастройка = НаборЗаписей.Добавить();
		НоваяНастройка.Организация = Выборка.Организация;
		НоваяНастройка.НалогОтчет  = Выборка.Правило;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Истина);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает реквизиты справочника, которые образуют естественный ключ
//  для элементов справочника.
//
// Возвращаемое значение: Массив(Строка) - массив имен реквизитов, образующих
//  естественный ключ.
//
Функция ПоляЕстественногоКлюча() Экспорт
	
	Результат = Новый Массив();
	
	Результат.Добавить("Код");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЧтениеФайла // Чтение файла с требованиями нормативных документов

Функция НовыйОписаниеТребования()
	
	ОписаниеСправочника = Метаданные.Справочники.ПравилаПредставленияОтчетовУплатыНалогов;
	ОписаниеРеквизитов  = ОписаниеСправочника.Реквизиты;
	ТипИдентификатора   = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(ОписаниеСправочника.ДлинаКода));
	ТипНаименования     = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(ОписаниеСправочника.ДлинаНаименования));
	
	Требования = Новый ТаблицаЗначений;
	Требования.Колонки.Добавить("Идентификатор",                 ТипИдентификатора); // Строковой идентификатор требования (уникален в пределах задачи)
	Требования.Колонки.Добавить("Наименование",                  ТипНаименования);
	Требования.Колонки.Добавить("Порядок",                       Новый ОписаниеТипов("Число"));
	Требования.Колонки.Добавить("ДатаИзменения",                 ОписаниеРеквизитов.ДатаИзменения.Тип);
	Требования.Колонки.Добавить("ЕстьИнформацияНаИТС",           ОписаниеРеквизитов.ЕстьИнформацияНаИТС.Тип);
	// Условия, в которых следует применять это требование
	Требования.Колонки.Добавить("НачалоДействия",                ОписаниеРеквизитов.НачалоДействия.Тип); // Дата, начиная с которой применяются требования, которые предусматривают это требование
	Требования.Колонки.Добавить("КонецДействия",                 ОписаниеРеквизитов.КонецДействия.Тип); // Дата, по которую применяются требования, которые предусматривают это требование
	Требования.Колонки.Добавить("Условия",                       Новый ОписаниеТипов("Массив")); // Условия, при выполнении которых применяется требование. Выбираются из классификатора КлассификаторУсловий()
	// Способ выполнения требования
	Требования.Колонки.Добавить("Описание",                      ОписаниеРеквизитов.Описание.Тип); // Особая часть представления для пользователя
	Требования.Колонки.Добавить("Действие",                      ОписаниеРеквизитов.Действие.Тип); // Отчет, УплатаНалога
	Требования.Колонки.Добавить("ФинансовыйПериод",              ОписаниеРеквизитов.ФинансовыйПериод.Тип); // Налоговый период (для задач, не связанных с налогами - отчетный период)
	Требования.Колонки.Добавить("Периодичность",                 ОписаниеРеквизитов.Периодичность.Тип); // Периодичность выполнения действия в рамках отчетного периода
	Требования.Колонки.Добавить("ОграничениеПериода",            ОписаниеРеквизитов.ОграничениеПериода.Тип); // Периоды (в рамках финансового), в которые действие не следует выполнять
	Требования.Колонки.Добавить("СрокМесяцев",                   ОписаниеРеквизитов.СрокМесяцев.Тип); // Срок выполнения действия после окончания периода, к которому оно относится.
	Требования.Колонки.Добавить("СрокДней",                      ОписаниеРеквизитов.СрокДней.Тип); // Срок выполнения действия после окончания периода, к которому оно относится. 
	Требования.Колонки.Добавить("ПеренестиНаРабочийДень",        ОписаниеРеквизитов.ПеренестиНаРабочийДень.Тип);
	
	Требования.Колонки.Добавить("БазовыйПериод",                 ОписаниеРеквизитов.БазовыйПериод.Тип);
	Требования.Колонки.Добавить("ОтставаниеБазовогоПериода",     ОписаниеРеквизитов.ОтставаниеБазовогоПериода.Тип);
	
	Требования.Индексы.Добавить("Идентификатор");
	
	Возврат Требования;
	
КонецФункции

Функция ПредопределенныеПравила()
	
	Макет = Справочники.ЗадачиБухгалтера.ПолучитьМакет("ТребованияНормативныхДокументов");
	
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(Макет.ПолучитьТекст());
	Объект = ФабрикаXDTO.ПрочитатьXML(Чтение);
	
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(Объект.ВерсияФормата, "3.0.2.0") >= 0 Тогда
		Возврат Неопределено; // Неподдерживаемая версия правил
	КонецЕсли;
	
	ДлинаНаименования   = Метаданные.Справочники.ЗадачиБухгалтера.ДлинаНаименования;
	ДлинаИдентификатора = Метаданные.Справочники.ЗадачиБухгалтера.ДлинаКода;
	
	Правила = Новый ТаблицаЗначений;
	Правила.Колонки.Добавить("Идентификатор",      Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(ДлинаИдентификатора)));
	Правила.Колонки.Добавить("Представление",      Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(ДлинаНаименования)));
	Правила.Колонки.Добавить("НаименованиеПолное", Новый ОписаниеТипов("Строка"));
	Правила.Колонки.Добавить("Порядок",            Новый ОписаниеТипов("Число"));
	Правила.Колонки.Добавить("Требования",         Новый ОписаниеТипов("ТаблицаЗначений"));
	Правила.Индексы.Добавить("Идентификатор");
	
	// Читаем тело файла правил
	Для Каждого Задача Из Объект.Задача Цикл
		
		НаборПравил = Правила.Добавить();
		ЗаполнитьЗначенияСвойств(НаборПравил, Задача);
		
		НаборПравил.Требования    = НовыйОписаниеТребования();
		
		Для Каждого Требование Из Задача.Требование Цикл
			
			НовоеТребование = НаборПравил.Требования.Добавить();
			ЗаполнитьЗначенияСвойств(НовоеТребование, Требование);
			
			Для Каждого Условие Из Требование.Условие Цикл
				
				НовоеТребование.Условия.Добавить(Условие);
				
			КонецЦикла;
				
		КонецЦикла;
				
	КонецЦикла;
	
	ПродлитьСрокНапоминанияПроверитьПереченьФормСтатистики(Правила);
	
	Возврат Правила;
	
КонецФункции

#КонецОбласти

// Требование - ЗначениеXDTO
Функция ВерсияТребованияОтличается(ПредыдущаяВерсияПравил, ИдентификаторЗадачи, Требование)
	
	Если ПредыдущаяВерсияПравил = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПредыдущаяВерсияНабораТребований = ПредыдущаяВерсияПравил.Найти(ИдентификаторЗадачи, "Идентификатор");
	Если ПредыдущаяВерсияНабораТребований = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПредыдущаяВерсияТребования = ПредыдущаяВерсияНабораТребований.Требования.Найти(Требование.Идентификатор, "Идентификатор");
	Если ПредыдущаяВерсияТребования = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Сравним версии требований
	// Требование - ЗначениеXDTO, ПредыдущаяВерсияТребования - строка таблицы значений
	// Для сравнения версий приведем их к одинаковому формату хранения
	
	НоваяВерсияЗначенияПолей      = Новый Массив;
	ПредыдущаяВерсияЗначенияПолей = Новый Массив;
	
	Поля = ПредыдущаяВерсияНабораТребований.Требования.Колонки;
	Для Каждого ОписаниеПоля Из Поля Цикл
		
		ПредыдущаяВерсияЗначениеПоля = ПредыдущаяВерсияТребования[ОписаниеПоля.Имя];
		
		Если ОписаниеПоля.Имя = "Условия" Тогда
			
			// В XDTO это СписокXDTO. И он отличается именем.
			ЗначенияСписка = Новый Массив;
			Для ИндексЭлемента = 0 По Требование.Условие.Количество() - 1 Цикл
				ЗначенияСписка.Добавить(Требование.Условие.Получить(ИндексЭлемента));
			КонецЦикла;
			НоваяВерсияЗначениеПоля = ЗначенияСписка;
			
		Иначе
			НоваяВерсияЗначениеПоля = Требование[ОписаниеПоля.Имя];
		КонецЕсли;
		
		НоваяВерсияЗначенияПолей.Добавить(НоваяВерсияЗначениеПоля);
		ПредыдущаяВерсияЗначенияПолей.Добавить(ПредыдущаяВерсияЗначениеПоля);
		
	КонецЦикла;
	
	Возврат Не ОбщегоНазначения.ДанныеСовпадают(НоваяВерсияЗначенияПолей, ПредыдущаяВерсияЗначенияПолей);
	
КонецФункции

#КонецОбласти	

#КонецЕсли
