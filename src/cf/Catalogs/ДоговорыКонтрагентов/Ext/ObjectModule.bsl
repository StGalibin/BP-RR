
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)
	
	Если НЕ ЭтоГруппа Тогда
		ФайлДоговора = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается перед записью элемента справочника.
//
Процедура ПередЗаписью(Отказ)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтоГруппа Тогда
		ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		Валютный      = (ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета);
		ОплатаВВалюте = (ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета) И НЕ РасчетыВУсловныхЕдиницах;
		
		Если ПустаяСтрока(Наименование) Тогда
			Наименование = ПечатьДоговоровКлиентСервер.РеквизитыДоговораСтрокой(Номер, Дата);
			Если ПустаяСтрока(Наименование) Тогда
				Наименование = ПечатьДоговоровКлиентСервер.НаименованиеПоУмолчаниюБезРеквизитов();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

	ВыполнитьПроверкуКлючевыхРеквизитов(Отказ);

КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	Если ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	// Если учет по договорам не ведется, 
	// то первый созданный договор устанавливаем основным
	// Это требуется для ручных документов расчетов, 
	// программного создания договоров в обработке Клиент-банка
	// В формах, где не скрыт учет по договорам (Операция, 
	// ввод начальных остатков по прочим дебиторам и кредиторам и т.д.)
	Если НЕ ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам") Тогда
		ОсновнойДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		// Найдем основной договор данного вида в данной организации
		Если Не РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(ОсновнойДоговор, Владелец, Организация, ВидДоговора) Тогда
			// Если основной договор не найден, тогда установим этот договор как основной
			РаботаСДоговорамиКонтрагентовБП.УстановитьОсновнойДоговорКонтрагента(ЭтотОбъект.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	КешОбработкиЗаполнения = Неопределено;
	
	Справочники.ДоговорыКонтрагентов.УстановитьДоступныеВидыДоговора(ДанныеЗаполнения);

	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ЗаполнениеДокументов.ЗаполнитьПоСтруктуре(ЭтотОбъект, ДанныеЗаполнения);
		
		// При групповом создании договоров (например, при загрузке из клиент-банка)
		// может быть передана структура для кеширования в ней данных, используемых в нескольких договорах.
		Если ДанныеЗаполнения.Свойство("КешОбработкиЗаполнения") Тогда
			КешОбработкиЗаполнения = ДанныеЗаполнения.КешОбработкиЗаполнения;
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЭтоГруппа Тогда
		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
		КонецЕсли;
		Если ЗначениеЗаполнено(Организация) Тогда
			Организация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Организация);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
			ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
		КонецЕсли;
		
		ПредъявляетНДС = НЕ УчетНДС.КонтрагентРезидентТаможенногоСоюза(Владелец);
		
		Справочники.ДоговорыКонтрагентов.ЗаполнитьРуководителяОрганизации(ЭтотОбъект, КешОбработкиЗаполнения);
		Справочники.ДоговорыКонтрагентов.ЗаполнитьРуководителяКонтрагента(ЭтотОбъект);
		
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если ЗначениеЗаполнено(Дата) И ЗначениеЗаполнено(СрокДействия)
		И Дата > СрокДействия Тогда
	
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Корректность",
			НСтр("ru = 'Срок действия до'"), , , 
			НСтр("ru = 'Срок действия договора должен быть больше или равен дате договора.'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "СрокДействия", "Объект", Отказ);
		
	КонецЕсли;
	
	ЭтоПлатежныйАгент = (НЕ ЭтоГруппа И ПлатежныйАгент);
	
	Если НЕ ЭтоПлатежныйАгент Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ПризнакАгента");
	КонецЕсли;
	
	Если ЭтоПлатежныйАгент 
		И (ПризнакАгента = ПредопределенноеЗначение("Перечисление.ПризнакиАгента.БанковскийПлатежныйАгент") 
			ИЛИ (ПризнакАгента = ПредопределенноеЗначение("Перечисление.ПризнакиАгента.БанковскийПлатежныйСубагент")))
		И ЗначениеЗаполнено(ИННОператораПеревода) Тогда
		РезультатПроверки = ИдентификационныеНомераНалогоплательщиков.ПроверитьСоответствиеТребованиямИНН(ИННОператораПеревода, Истина);
		Если НЕ РезультатПроверки.СоответствуетТребованиям Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Корректность","ИНН оператора перевода",,,РезультатПроверки.ОписаниеОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ИННОператораПеревода", "Объект", Отказ);
		КонецЕсли;
	КонецЕсли; 
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
КонецПроцедуры

// Очищаем ссылку на договор из регистра сведений "Основные договоры контрагентов"
Процедура ПередУдалением(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ОсновныеДоговорыКонтрагента.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	НаборЗаписей.Отбор.ВидДоговора.Установить(ВидДоговора);
	НаборЗаписей.Отбор.Контрагент.Установить(Владелец);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запись = НаборЗаписей[0];
	Если Запись.Договор = Ссылка Тогда
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВыполнитьПроверкуКлючевыхРеквизитов(Отказ)

	Если ЭтоНовый() тогда
		//В случае нового договора не производить проверку
		Возврат;
	КонецЕсли;

	// Получим значения реквизитов договора из информационной базы
	РеквизитыДоговораИзИБ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, 
		"ПометкаУдаления, Владелец, ВалютаВзаиморасчетов, ВидДоговора, 
		|Организация, РасчетыВУсловныхЕдиницах, УчетАгентскогоНДС, ПредъявляетНДС");

	Если ПометкаУдаления <> РеквизитыДоговораИзИБ.ПометкаУдаления тогда
		//В случае установки или снятия пометки удаления не производить проверку
		Возврат;
	КонецЕсли;

	// Проверим, можно ли изменять реквизиты договора.

	УстановитьПривилегированныйРежим(Истина);

	Если ЭтоГруппа Тогда

		// Для группы владельца менять нельзя
		Если Владелец <> РеквизитыДоговораИзИБ.Владелец Тогда
			ТекстСообщения = НСтр("ru = 'Нельзя изменять контрагента для группы договоров.'"); 
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Корректность", 
								НСтр("ru = 'Контрагент'"), , , ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Владелец", "Объект", Отказ);
		КонецЕсли;

	Иначе

		// Для элемента нужно получить документы, в которых использован договор:
		ЕстьПроведенныеДокументыПоДоговору = Ложь;
		ЕстьОформленныеДокументыПоДоговору = Ложь;
		
		НеобходимаПроверка = ОпределитьНеобходимостьПроверки(РеквизитыДоговораИзИБ, 
			ЕстьПроведенныеДокументыПоДоговору, ЕстьОформленныеДокументыПоДоговору);
		
		Если НеобходимаПроверка Тогда

			// Проверим возможность смены владельца для договора
			Если ЕстьОформленныеДокументыПоДоговору = Истина Тогда
				ТекстСообщения = НСтр("ru = 'Существуют документы, оформленные по договору %1.'"); 
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Наименование);
				СообщитьОНекорректномРеквизите("Владелец", НСтр("ru = 'Контрагент'"), ТекстСообщения, Отказ);
			КонецЕсли;

			Если ЕстьПроведенныеДокументыПоДоговору Тогда
				СписокРеквизитов = Новый Структура("ВалютаВзаиморасчетов, ВидДоговора, Организация, УчетАгентскогоНДС, ПредъявляетНДС", 
							НСтр("ru = 'Валюта расчетов'"), 
							НСтр("ru = 'Вид договора'"), 
							НСтр("ru = 'Организация'"), 
							НСтр("ru = 'Налоговый агент'"),
							НСтр("ru = 'Предъявляет НДС'"));
				ТекстСообщения = НСтр("ru = 'Существуют документы, проведенные по договору %1.
					|Реквизит %2 не может быть изменен.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Наименование);
				Для Каждого КлючИЗначение Из СписокРеквизитов Цикл
					СообщитьОНекорректномРеквизите(КлючИЗначение.Ключ, КлючИЗначение.Значение, ТекстСообщения, Отказ);
				КонецЦикла;
				
				// Реквизит РасчетыВУсловныхЕдиницах не выведен на форму,
				// Вместо него используется реквизит формы для требуемого отображения.
				// Обработаем сообщение об изменении РасчетыВУсловныхЕдиницах отдельно.
				Если ЭтотОбъект.РасчетыВУсловныхЕдиницах <> Ссылка.РасчетыВУсловныхЕдиницах Тогда
					ТекстСообщения = НСтр("ru = 'Существуют документы, проведенные по договору %1.
						|Реквизит %2 не может быть изменен.'");
						
					СинонимРеквизита = "Оплата в рублях";
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Наименование, СинонимРеквизита);
					ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Корректность", 
						СинонимРеквизита, , , ТекстСообщения);
						
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения,
						, 
						"ОплатаВРублях", 
						,
						Отказ);
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

Функция ОпределитьНеобходимостьПроверки(РеквизитыДоговораИзИБ, ЕстьПроведенныеДокументыПоДоговору, ЕстьОформленныеДокументыПоДоговору)

	ЕстьПроведенныеДокументыПоДоговору = Ложь;
	ЕстьОформленныеДокументыПоДоговору = Ложь;

	ПроверятьПризнакПредъявляетНДС = ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком
		ИЛИ ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером
		ИЛИ ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку
		ИЛИ ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
		
	Если Владелец <> РеквизитыДоговораИзИБ.Владелец
		ИЛИ ВалютаВзаиморасчетов <> РеквизитыДоговораИзИБ.ВалютаВзаиморасчетов 
		ИЛИ ВидДоговора <> РеквизитыДоговораИзИБ.ВидДоговора
		ИЛИ Организация <> РеквизитыДоговораИзИБ.Организация
		ИЛИ РасчетыВУсловныхЕдиницах <> РеквизитыДоговораИзИБ.РасчетыВУсловныхЕдиницах 
		ИЛИ УчетАгентскогоНДС <> РеквизитыДоговораИзИБ.УчетАгентскогоНДС
		ИЛИ ПроверятьПризнакПредъявляетНДС 
		И ПредъявляетНДС <> РеквизитыДоговораИзИБ.ПредъявляетНДС Тогда

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Договор", Ссылка);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументыПоДоговоруКонтрагента.Ссылка КАК ДокументПоДоговору
		|ИЗ
		|	КритерийОтбора.ДокументыПоДоговоруКонтрагента(&Договор) КАК ДокументыПоДоговоруКонтрагента";
		
		МассивДокументов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ДокументПоДоговору");
		
		Если МассивДокументов.Количество() > 0 Тогда
		
			МассивНеПроведенныхДокументов = ОбщегоНазначения.ПроверитьПроведенностьДокументов(МассивДокументов);
			
			ЕстьОформленныеДокументыПоДоговору = Истина;
			ЕстьПроведенныеДокументыПоДоговору = (МассивНеПроведенныхДокументов.Количество() < МассивДокументов.Количество());
			
		КонецЕсли;
			
		Возврат Истина;

	Иначе

		// Проверку запускать не надо, ключевые реквизиты не менялись
		Возврат Ложь;

	КонецЕсли;

КонецФункции

Процедура СообщитьОНекорректномРеквизите(ИмяРеквизита, СинонимРеквизита, ШаблонСообщения, Отказ)

	Если ЭтотОбъект[ИмяРеквизита] <> Ссылка[ИмяРеквизита] Тогда
		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%2", СинонимРеквизита);
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Корректность", 
			СинонимРеквизита, , , ТекстСообщения);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, ИмяРеквизита, "Объект", Отказ);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецЕсли

