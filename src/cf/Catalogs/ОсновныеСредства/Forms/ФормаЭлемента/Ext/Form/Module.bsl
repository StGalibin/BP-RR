#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.Печать
	
	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ВыполнитьИнициализацию();
		ЗаполнитьОписания();
		ФормироватьНаименованиеПолноеАвтоматически = Истина;
	КонецЕсли;

	УправлениеФормой(ЭтаФорма);
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	ИсключаемыеВиды = Новый Массив;
	ИсключаемыеВиды.Добавить(Справочники.ВидыКонтактнойИнформации.АдресМестонахожденияОсновныеСредства);
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, "ГруппаКонтактнаяИнформация",, ИсключаемыеВиды);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	Если Перечисления.ГруппыОС.ТранспортныеСредства = Объект.ГруппаОС Тогда 
		Элементы.Автотранспорт.Доступность = Истина;
	Иначе
		Объект.Автотранспорт = Ложь;
		Элементы.Автотранспорт.Доступность = Ложь;
	КонецЕсли;
	
	СпрОбъект = ДанныеФормыВЗначение(Объект, Тип("СправочникОбъект.ОсновныеСредства"));
	Если СпрОбъект.ЭтоНовый() Тогда
		Объект.ТипОС = Перечисления.ТипыОС.ОбъектОС;
	КонецЕсли;
	
	ЗаполнитьПолеНаименованияКода("Код", "ОКВЭД");
	ЗаполнитьПолеНаименованияКода("КодПо", "ОКОФ");
	ЗаполнитьПолеНаименованияКода("ШифрПо", "ЕНАОФ");
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтаФорма,
		"БП.Справочник.ОсновныеСредства",
		"ФормаЭлемента",
		НСтр("ru='Новости: Основное средство'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ИзмененаИнформацияОС" И Параметр = Параметры.Ключ Тогда
		
		ОбновитьСведения();
		
	ИначеЕсли ИмяСобытия = "ВыборАмортизационнойГруппыОС" И Источник = ЭтаФорма.УникальныйИдентификатор Тогда
	
		ОбработатьВыборКодаПоОКОФ(Параметр);
		
	КонецЕсли;

	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;

	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ВыполнитьИнициализацию();
	
	ЗаполнитьОписания();
	
	ЭтоУСН = УчетнаяПолитика.ПрименяетсяУСН(Организация, ДатаСведений);
	ЭтоРасходыУСН = ЭтоУСН И НЕ УчетнаяПолитика.ПрименяетсяУСНДоходы(Организация, ДатаСведений);
	
	УстановитьФлагФормироватьНаименованиеПолноеАвтоматически(ЭтаФорма);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	// Обработчик подсистемы "Контактная информация"
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, Отказ);

	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрОповещения = Новый Структура("Ссылка", Объект.Ссылка);
	
	Оповестить("ИзмененОбъектОС", ПараметрОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтаФорма, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаСведенийПриИзменении(Элемент)

	ОбновитьСведения();

КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)

	СформироватьНаименованиеПолноеАвтоматически();

КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеПриИзменении(Элемент)

	УстановитьФлагФормироватьНаименованиеПолноеАвтоматически(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ГруппаОСПриИзменении(Элемент)
	
	Если ПредопределенноеЗначение("Перечисление.ГруппыОС.ТранспортныеСредства") = Объект.ГруппаОС Тогда 
		Элементы.Автотранспорт.Доступность = Истина;
	Иначе
		Объект.Автотранспорт = Ложь;
		Элементы.Автотранспорт.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаОСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ГруппыОС.КапитальныеВложенияВАрендованноеИмущество") Тогда 
		СтандартнаяОбработка = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КодПоОКОФПриИзменении(Элемент)
	
	ЗаполнитьПолеНаименованияКода("КодПо", "ОКОФ");
	
	Если Не ЗначениеЗаполнено(Объект.АмортизационнаяГруппа) Тогда
		Объект.АмортизационнаяГруппа = КодПоОКОФПриИзмененииНаСервере(Объект.КодПоОКОФ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КодПоОКОФНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("КодПоОКОФ", 			Объект.КодПоОКОФ);
	ПараметрыОткрытия.Вставить("АмортизационнаяГруппа", Объект.АмортизационнаяГруппа);

	ОткрытьФорму("Справочник.ОсновныеСредства.Форма.ФормаВыбораАмортизационнойГруппы", ПараметрыОткрытия, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ШифрПоЕНАОФПриИзменении(Элемент)
	
	ЗаполнитьПолеНаименованияКода("ШифрПо", "ЕНАОФ");
	
КонецПроцедуры

&НаКлиенте
Процедура ОКВЭДКодПриИзменении(Элемент)
	
	ЗаполнитьПолеНаименованияКода("Код", "ОКВЭД");
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументПринятияКУчетуБУПредставлениеНажатие(Элемент, СтандартнаяОбработка)

	ДокументПринятияКУчетуБУНажатие(Элемент, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ДокументСнятияСУчетаБУПредставлениеНажатие(Элемент, СтандартнаяОбработка)

	ДокументСнятияСУчетаБУНажатие(Элемент, СтандартнаяОбработка);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтаФорма,
		Команда
	);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ВыполнитьИнициализацию()

	Если ИнициализацияВыполнена Тогда
		Возврат;
	КонецЕсли;

	ИнициализацияВыполнена = Истина;

	ДатаСведений = ОбщегоНазначения.ТекущаяДатаПользователя();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОписания()

	ВидСубконтоОС = Новый Массив();
	ВидСубконтоОС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);

	// Выборка из регистра сведений "Состояния ОС организаций"
	Запрос = Новый Запрос();
	ДатаВремяНаКонецДня = Новый Граница(КонецДня(ДатаСведений), ВидГраницы.Включая);
	Запрос.УстановитьПараметр("ДатаСведений", 	  ДатаВремяНаКонецДня);
	Запрос.УстановитьПараметр("ОсновноеСредство", Объект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&ДатаСведений, ОсновноеСредство = &ОсновноеСредство) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|";
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Организация = РезультатЗапроса.Выгрузить()[0].Организация;
		ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрОрганизацияФункциональныхОпцийФормы(
			ЭтаФорма,
			Организация,
			ДатаСведений);
	Иначе
		Организация = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;

	// Данные для заполнения закладки "Бухгалтерский учет"
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОсновноеСредство", Объект.Ссылка);
	Запрос.УстановитьПараметр("ДатаСведений",     Новый Граница(КонецДня(ДатаСведений), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация",      Организация);
	Запрос.УстановитьПараметр("ВидСубконтоОС",    ВидСубконтоОС);

	Запрос.Текст =
	"////////////////////////////////////////////////////////////////////////////////
	|// 0 - ПервоначальныеСведенияОСБухгалтерскийУчет
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.СпособПоступления КАК СпособПоступленияБУ,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.Контрагент КАК Контрагент,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПорядокПогашенияСтоимости КАК ПорядокПогашенияСтоимостиБУ,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.СпособНачисленияАмортизации КАК СпособНачисленияАмортизацииБУ,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимостьБУ,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПараметрВыработки КАК ПараметрВыработкиБУ,
	|	ПРЕДСТАВЛЕНИЕ(ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПараметрВыработки.ЕдиницаИзмерения) КАК ЕдиницаПараметраВыработкиБУ
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&ДатаСведений, ОсновноеСредство = &ОсновноеСредство) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|// 1 - МестонахождениеОСБухгалтерскийУчет
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.МОЛ КАК МОЛБУ,
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение КАК ПодразделениеБУ
	|ИЗ
	|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	|			&ДатаСведений,
	|			Организация = &Организация
	|				И ОсновноеСредство = &ОсновноеСредство) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|// 2 - ПараметрыАмортизацииОСБухгалтерскийУчет
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования КАК СрокИспользованияБУ,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРабот КАК ОбъемРаботБУ,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентАмортизации КАК ПроцентГодовойАмортизацииБУ,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентУскорения КАК КоэффициентУскоренияБУ
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|			&ДатаСведений,
	|			Организация = &Организация
	|				И ОсновноеСредство = &ОсновноеСредство) КАК ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|// 3 - ГрафикиАмортизацииОСБухгалтерскийУчет
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ГрафикиАмортизацииОСБухгалтерскийУчетСрезПоследних.ГрафикАмортизации КАК ГодовойГрафикБУ
	|ИЗ
	|	РегистрСведений.ГрафикиАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|			&ДатаСведений,
	|			Организация = &Организация
	|				И ОсновноеСредство = &ОсновноеСредство) КАК ГрафикиАмортизацииОСБухгалтерскийУчетСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|// 4 - СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.СпособыОтраженияРасходовПоАмортизации КАК СпособОтраженияРасходовПоАмортизацииБУ
	|ИЗ
	|	РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|			&ДатаСведений,
	|			Организация = &Организация
	|				И ОсновноеСредство = &ОсновноеСредство) КАК СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|//	5 - СчетаБухгалтерскогоУчетаОС
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетаБухгалтерскогоУчетаОССрезПоследних.СчетУчета КАК СчетУчетаБУ,
	|	СчетаБухгалтерскогоУчетаОССрезПоследних.СчетНачисленияАмортизации КАК СчетНачисленияАмортизацииБУ
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|			&ДатаСведений,
	|			Организация = &Организация
	|				И ОсновноеСредство = &ОсновноеСредство) КАК СчетаБухгалтерскогоУчетаОССрезПоследних";

	МассивРезультатов = Запрос.ВыполнитьПакет();
	СчетУчетаБУ                 = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	СчетНачисленияАмортизацииБУ = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	
	ОсновноеСредствоВБухгалтерскомУчетеНеОтражалось = МассивРезультатов[0].Пустой();
	
	Для Каждого РезультатЗапроса Из МассивРезультатов Цикл
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ЭтаФорма, Выборка);
		КонецЕсли;
	КонецЦикла;
	
	// Стоимостные показатели
	Если ЗначениеЗаполнено(СчетУчетаБУ) Тогда
		
		Запрос.УстановитьПараметр("СчетУчетаБУ", СчетУчетаБУ);
		Запрос.УстановитьПараметр("СчетНачисленияАмортизацииБУ", СчетНачисленияАмортизацииБУ);
		
		ТекстЗапросаСтоимость = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ХозрасчетныйОстаткиСтоимость.СуммаОстатокДт КАК ТекущаяСтоимостьБУ,
		|	ХозрасчетныйОстаткиСтоимость.СуммаНУОстатокДт КАК ТекущаяСтоимостьНУ
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&ДатаСведений,
		|			Счет = &СчетУчетаБУ,
		|			&ВидСубконтоОС,
		|			Организация = &Организация
		|				И Субконто1 = &ОсновноеСредство) КАК ХозрасчетныйОстаткиСтоимость";
		
		ТекстЗапросаАмортизация = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ХозрасчетныйОстаткиАмортизация.СуммаОстатокКт КАК ТекАмортизацияБУ,
		|	ХозрасчетныйОстаткиАмортизация.СуммаОстатокДт КАК ТекИзносБУ,
		|	ХозрасчетныйОстаткиАмортизация.СуммаНУОстатокКт КАК ТекАмортизацияНУ
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&ДатаСведений,
		|			Счет = &СчетНачисленияАмортизацииБУ,
		|			&ВидСубконтоОС,
		|			Организация = &Организация
		|				И Субконто1 = &ОсновноеСредство) КАК ХозрасчетныйОстаткиАмортизация";
		
		Запрос.Текст = ТекстЗапросаСтоимость;
		Если ЗначениеЗаполнено(СчетНачисленияАмортизацииБУ) Тогда
			Запрос.Текст = Запрос.Текст 
				+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета()
				+ ТекстЗапросаАмортизация;
		КонецЕсли;
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		Для Каждого РезультатЗапроса Из МассивРезультатов Цикл
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Следующий() Тогда
				ЗаполнитьЗначенияСвойств(ЭтаФорма, Выборка);
			КонецЕсли;
		КонецЦикла;
	
	КонецЕсли;

	РасшифровкаСрокаПолезногоИспользованияБУ = 
		УправлениеВнеоборотнымиАктивамиКлиентСервер.РасшифровкаСрокаПолезногоИспользования(СрокИспользованияБУ);

	УчетОС.ПолучитьДокументБухСостоянияОС(
		Объект.Ссылка,
		Организация,
		Перечисления.СостоянияОС.ПринятоКУчету,
		ДокументПринятияКУчетуБУ,
		ПринятоКУчетуБУ);
		
	УчетОС.ПолучитьДокументБухСостоянияОС(
		Объект.Ссылка,
		Организация,
		Перечисления.СостоянияОС.СнятоСУчета,
		ДокументСнятияСУчетаБУ,
		СнятоСУчетаБУ);

	УСН = УчетнаяПолитика.ПрименяетсяУСН(Организация, ДатаСведений);

	Если НЕ УСН Тогда

		// Данные для заполнения закладки "Налоговый учет".
		// Стоимостные показатели текущей стоимости и амортизации по НУ заполнены вместе с БУ.
		Запрос.Текст =
		"////////////////////////////////////////////////////////////////////////////////
		|// 0 - ПервоначальныеСведенияОСНалоговыйУчет
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.МетодНачисленияАмортизации КАК МетодНачисленияАмортизацииНУ,
		|	ЕСТЬNULL(ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ПервоначальнаяСтоимостьНУ, 0) КАК ПервоначальнаяСтоимостьНУ,
		|	ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ПорядокВключенияСтоимостиВСоставРасходов КАК ПорядокВключенияСтоимостиВСоставРасходовНУ
		|ИЗ
		|	РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчет.СрезПоследних(
		|			&ДатаСведений,
		|			Организация = &Организация
		|				И ОсновноеСредство = &ОсновноеСредство) КАК ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|// 1 - ПараметрыАмортизацииОСНалоговыйУчет
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних.СрокПолезногоИспользования КАК СрокИспользованияНУ
		|ИЗ
		|	РегистрСведений.ПараметрыАмортизацииОСНалоговыйУчет.СрезПоследних(
		|			&ДатаСведений,
		|			Организация = &Организация
		|				И ОсновноеСредство = &ОсновноеСредство) КАК ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|// 2 - НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчет
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчетСрезПоследних.СпециальныйКоэффициент, 0) КАК СпецКоэффициентНУ
		|ИЗ
		|	РегистрСведений.НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчет.СрезПоследних(
		|			&ДатаСведений,
		|			Организация = &Организация
		|				И ОсновноеСредство = &ОсновноеСредство) КАК НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчетСрезПоследних";

		МассивРезультатов = Запрос.ВыполнитьПакет();

		ОсновноеСредствоВНалоговомУчетеНеОтражалось = МассивРезультатов[0].Пустой();
		
		Для Каждого РезультатЗапроса Из МассивРезультатов Цикл
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Следующий() Тогда
				ЗаполнитьЗначенияСвойств(ЭтаФорма, Выборка);
			КонецЕсли;
		КонецЦикла;
		
		РасшифровкаСрокаПолезногоИспользованияНУ = 
			УправлениеВнеоборотнымиАктивамиКлиентСервер.РасшифровкаСрокаПолезногоИспользования(СрокИспользованияНУ);

		ПринятоКУчетуНУ = ПринятоКУчетуБУ;
		СнятоСУчетаНУ = СнятоСУчетаБУ;

	Иначе

		// Данные для заполнения закладки "Сведения НУ (УСН)"
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ОсновноеСредство", Объект.Ссылка);
		Запрос.УстановитьПараметр("ДатаСведений", Новый Граница(КонецДня(ДатаСведений), ВидГраницы.Включая));
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ПервоначальнаяСтоимостьУСН, 0) КАК ПервоначальнаяСтоимостьУСН,
		|	ЕСТЬNULL(ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.СрокПолезногоИспользования, 0) КАК СрокИспользованияУСН,
		|	ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ДатаПриобретения КАК ДатаПриобретения,
		|	ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ПорядокВключенияСтоимостиВСоставРасходовУСН КАК ПорядокВключенияСтоимостиВСоставРасходовУСН
		|ИЗ
		|	РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчетУСН.СрезПоследних(
		|		&ДатаСведений,
		|		Организация = &Организация
		|			И ОсновноеСредство = &ОсновноеСредство) КАК ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних
		|";

		РезультатЗапроса = Запрос.Выполнить();
		ОсновноеСредствоВНалоговомУчетеУСННеОтражалось = РезультатЗапроса.Пустой();
		Если Не РезультатЗапроса.Пустой() Тогда
			ЗаполнитьЗначенияСвойств(ЭтаФорма, РезультатЗапроса.Выгрузить()[0]);
		КонецЕсли;

		РасшифровкаСрокаПолезногоИспользованияУСН = 
			УправлениеВнеоборотнымиАктивамиКлиентСервер.РасшифровкаСрокаПолезногоИспользования(СрокИспользованияУСН);

		ПринятоКУчетуУСН = ПринятоКУчетуБУ;
		СнятоСУчетаУСН = СнятоСУчетаБУ;

	КонецЕсли;

	ЗаполнитьТекстПроДокументы();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТекстПроДокументы()

	Если ДокументПринятияКУчетуБУ = Неопределено Тогда
		ДокументПринятияКУчетуБУПредставление = НСтр("ru = 'Ввести документ принятия к учету'");
		ПринятоКУчетуБУ = '00010101';
		ПринятоКУчетуНУ = '00010101';
		ПринятоКУчетуУСН = '00010101';
	Иначе
		ДокументПринятияКУчетуБУПредставление = Строка(ДокументПринятияКУчетуБУ);
		ИмяТипаДокументаПринятияКУчету = ДокументПринятияКУчетуБУ.Метаданные().Имя;
	КонецЕсли;

	ДокументПринятияКУчетуНУПредставление = ДокументПринятияКУчетуБУПредставление;
	ДокументПринятияКУчетуУСНПредставление = ДокументПринятияКУчетуБУПредставление;
	
	Если ДокументСнятияСУчетаБУ = Неопределено Тогда
		ДокументСнятияСУчетаБУПредставление = НСтр("ru = 'Ввести документ списания'");
		СнятоСУчетаБУ = '00010101';
		СнятоСУчетаНУ = '00010101';
		СнятоСУчетаУСН = '00010101';
	Иначе
		ДокументСнятияСУчетаБУПредставление = Строка(ДокументСнятияСУчетаБУ);
		ИмяТипаДокументаСнятияСУчета = ДокументСнятияСУчетаБУ.Метаданные().Имя;
	КонецЕсли;
	
	ДокументСнятияСУчетаНУПредставление = ДокументСнятияСУчетаБУПредставление;
	ДокументСнятияСУчетаУСНПредставление = ДокументСнятияСУчетаБУПредставление;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	ЭтоУСН = Форма.ЭтоУСН;

	ПользовательУправляетСчетамиУчета = СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета();
	
	Элементы.ДатаСведений.Видимость = ПользовательУправляетСчетамиУчета;
	Элементы.ТипОС.Видимость = ПользовательУправляетСчетамиУчета;
	Элементы.Автотранспорт.Видимость = ПользовательУправляетСчетамиУчета;
	Элементы.ОКОФ.Видимость = ПользовательУправляетСчетамиУчета;
	Элементы.АмортизационнаяГруппа.Видимость = ПользовательУправляетСчетамиУчета;
	Элементы.ЕНАОФ.Видимость = ПользовательУправляетСчетамиУчета;
	
	Если ПользовательУправляетСчетамиУчета Тогда
		Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	Иначе
		Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	КонецЕсли;
	
	Если НЕ ПользовательУправляетСчетамиУчета Тогда
		Возврат;
	КонецЕсли;
	
	// Закладка "Сведения БУ"
	
	Элементы.ГруппаОтражениеВБУ.Видимость = НЕ Форма.ОсновноеСредствоВБухгалтерскомУчетеНеОтражалось;
	Элементы.ГруппаВБУНеОтражалось.Видимость = Форма.ОсновноеСредствоВБухгалтерскомУчетеНеОтражалось;

	ПоступлениеПоДоговоруЛизинга = 
		Форма.СпособПоступленияБУ = ПредопределенноеЗначение("Перечисление.СпособыПоступленияАктивов.ПоДоговоруЛизинга");
	
	Элементы.Контрагент.Видимость = ПоступлениеПоДоговоруЛизинга;
	Элементы.ДоговорКонтрагента.Видимость = ПоступлениеПоДоговоруЛизинга;
	
	// Закладка "Амортизация БУ"
	
	Элементы.ГруппаАмортизацияБУ.Видимость = НЕ Форма.ОсновноеСредствоВБухгалтерскомУчетеНеОтражалось;
	
	СтоимостьНеПогашается = Форма.ПорядокПогашенияСтоимостиБУ 
		= ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.СтоимостьНеПогашается");
	НачислениеАмортизации = Форма.ПорядокПогашенияСтоимостиБУ 
		= ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации");
	НачислениеИзноса = Форма.ПорядокПогашенияСтоимостиБУ 
		= ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзноса");
	НачислениеИзносаПоЕНАОФ = Форма.ПорядокПогашенияСтоимостиБУ 
		= ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ");
	СписаниеПриПринятииКУчету = Форма.ПорядокПогашенияСтоимостиБУ 
		= ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету");
	ПорядокПогашенияСтоимостиОСНеУказан = Форма.ПорядокПогашенияСтоимостиБУ 
		= ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.ПустаяСсылка");
		
	Линейный = Форма.СпособНачисленияАмортизацииБУ 
		= ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.Линейный");
	ПоЕНАОФ = Форма.СпособНачисленияАмортизацииБУ 
		= ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ПоЕНАОФ");
	ПоЕНАОФНа1000кмПробега = Форма.СпособНачисленияАмортизацииБУ 
		= ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега");
	ПоСуммеЧиселЛетИспользования = Форма.СпособНачисленияАмортизацииБУ 
		= ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования");
	ПропорциональноОбъемуПродукции = Форма.СпособНачисленияАмортизацииБУ 
		= ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции");
	УменьшаемогоОстатка = Форма.СпособНачисленияАмортизацииБУ 
		= ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка");
	СпособНачисленияАмортизацииБУНеУказан = Форма.СпособНачисленияАмортизацииБУ 
		= ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ПустаяСсылка");
		
	Элементы.СчетНачисленияАмортизацииБУ.Видимость = НачислениеАмортизации;
	Элементы.ТекАмортизацияБУ.Видимость = НачислениеАмортизации;
	Элементы.СпособОтраженияРасходовПоАмортизацииБУ.Видимость = НачислениеАмортизации;
	Элементы.СпособНачисленияАмортизацииБУ.Видимость = НачислениеАмортизации;
	Элементы.ГруппаСрокИспользованияБУ.Видимость = НачислениеАмортизации И НЕ СпособНачисленияАмортизацииБУНеУказан;
	Элементы.КоэффициентУскоренияБУ.Видимость = НачислениеАмортизации И УменьшаемогоОстатка;
	Элементы.ГруппаПроцентГодовойАмортизацииБУ.Видимость = НачислениеАмортизации И (ПоЕНАОФ ИЛИ ПоЕНАОФНа1000кмПробега);
	Элементы.ГодовойГрафикБУ.Видимость = НачислениеАмортизации 
		И (Линейный ИЛИ УменьшаемогоОстатка ИЛИ ПоСуммеЧиселЛетИспользования ИЛИ ПоЕНАОФ);
	Элементы.ПараметрВыработкиБУ.Видимость = НачислениеАмортизации И (ПропорциональноОбъемуПродукции ИЛИ ПоЕНАОФНа1000кмПробега);
	Элементы.ГруппаОбъемРаботБУ.Видимость = НачислениеАмортизации И (ПропорциональноОбъемуПродукции ИЛИ ПоЕНАОФНа1000кмПробега);
	
	Элементы.СчетНачисленияИзноса.Видимость = НачислениеИзноса ИЛИ НачислениеИзносаПоЕНАОФ;
	Элементы.ТекИзносБУ.Видимость = НачислениеИзноса ИЛИ НачислениеИзносаПоЕНАОФ;
	
	Элементы.ДекорацияСписаниеПриПринятииКУчетуБУ.Видимость = СписаниеПриПринятииКУчету;
	Элементы.ДекорацияСтоимостьНеПогашаетсяБУ.Видимость = СтоимостьНеПогашается;
	Элементы.ДекорацияПорядокПогашенияСтоимостиБУНеУказан.Видимость = ПорядокПогашенияСтоимостиОСНеУказан;
	
	// Закладка "Сведения НУ"
	
	Элементы.ГруппаСведенияНУ.Видимость = НЕ ЭтоУСН;
	Если Не ЭтоУСН Тогда
		Элементы.ГруппаОтражениеВНУ.Видимость = НЕ Форма.ОсновноеСредствоВНалоговомУчетеНеОтражалось;
		Элементы.ГруппаВНУНеОтражалось.Видимость = Форма.ОсновноеСредствоВНалоговомУчетеНеОтражалось;
	КонецЕсли;
	
	// Закладка "Амортизация НУ"
	
	Элементы.ГруппаАмортизацияНУ.Видимость = НЕ ЭтоУСН И НЕ Форма.ОсновноеСредствоВНалоговомУчетеНеОтражалось;
	Если Не ЭтоУСН Тогда
		НачислениеАмортизации = Форма.ПорядокВключенияСтоимостиВСоставРасходовНУ 
			= ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации");
		ВключениеВРасходыПриПринятииКУчету = Форма.ПорядокВключенияСтоимостиВСоставРасходовНУ 
			= ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету");
		СтоимостьНеВключаетсяВРасходы = Форма.ПорядокВключенияСтоимостиВСоставРасходовНУ 
			= ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы");
			
		Элементы.ГруппаНачислениеАмортизацииНУ.Видимость = НачислениеАмортизации;
		Элементы.ДекорацияВключениеВРасходыПриПринятииКУчету.Видимость = ВключениеВРасходыПриПринятииКУчету;
		Элементы.ДекорацияСтоимостьНеВключаетсяВРасходы.Видимость = СтоимостьНеВключаетсяВРасходы;
	КонецЕсли;
	
	// Закладка "Сведения НУ (УСН)"
	
	ЭтоРасходыУСН = Форма.ЭтоРасходыУСН;
	
	Элементы.ГруппаСведенияУСН.Видимость = ЭтоРасходыУСН;
	Если ЭтоРасходыУСН Тогда
		Элементы.ГруппаОтражениеВУСН.Видимость = НЕ Форма.ОсновноеСредствоВНалоговомУчетеУСННеОтражалось;
		Элементы.ГруппаВУСННеОтражалось.Видимость = Форма.ОсновноеСредствоВНалоговомУчетеУСННеОтражалось;
		
		Элементы.ПорядокВключенияСтоимостиВСоставРасходовУСН.Видимость = Форма.ДатаСведений >= '20060101';
	КонецЕсли;
	
КонецПроцедуры

// Процедура проверяет, совпадало ли ранее полное наименование с наименованием,
// и присваивает соответствующее значение переменной мФормироватьНаименованиеПолноеАвтоматически.
//
// Параметры:
//  Нет.
//
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФлагФормироватьНаименованиеПолноеАвтоматически(Форма)

	Если ПустаяСтрока(Форма.Объект.НаименованиеПолное)
	 ИЛИ Форма.Объект.НаименованиеПолное = Форма.Объект.Наименование Тогда
		Форма.ФормироватьНаименованиеПолноеАвтоматически = Истина;
	Иначе
		Форма.ФормироватьНаименованиеПолноеАвтоматически = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПолеНаименованияКода(Префикс, ИмяКлассификатора)

	Классификатор = Объект[Префикс + ИмяКлассификатора];
	ЭтаФорма[ИмяКлассификатора+"Наименование"] = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Классификатор, "Наименование");

КонецПроцедуры

&НаСервере
Процедура ОбновитьСведения()
	
	ЭтоУСН = УчетнаяПолитика.ПрименяетсяУСН(Организация, ДатаСведений);
	ЭтоРасходыУСН = ЭтоУСН И НЕ УчетнаяПолитика.ПрименяетсяУСНДоходы(Организация, ДатаСведений);

	ЗаполнитьОписания();
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

// Процедура проверяет, необходимо ли формировать полное наименование автоматически или нет,
// и, если необходимо, формирует его.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура СформироватьНаименованиеПолноеАвтоматически()

	Если ФормироватьНаименованиеПолноеАвтоматически Тогда
		Объект.НаименованиеПолное = Объект.Наименование;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДокументПринятияКУчетуБУНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Если Параметры.Ключ.Пустая() Тогда
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Ввод документа принятия к учету возможен только после записи.
			|Данные будут записаны.'");
		Оповещение = Новый ОписаниеОповещения("ВопросВводПринятияКУчетуПослеЗаписиЗавершение", ЭтотОбъект);
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ОткрытьФормуПринятиеКУчетуОС();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросВводПринятияКУчетуПослеЗаписиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Если Записать() Тогда // Записать новый объект, чтобы его можно было поместить в документ
			ОткрытьФормуПринятиеКУчетуОС();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПринятиеКУчетуОС()

	ПараметрыОткрытия = Новый Структура;
	Если ДокументПринятияКУчетуБУ = Неопределено Тогда
		ПараметрыОткрытия.Вставить("Основание", Объект.Ссылка);
		ОткрытьФорму("Документ.ПринятиеКУчетуОС.ФормаОбъекта", ПараметрыОткрытия, ЭтаФорма);
	Иначе
		ПараметрыОткрытия.Вставить("Ключ", ДокументПринятияКУчетуБУ);
		ОткрытьФорму("Документ." + ИмяТипаДокументаПринятияКУчету + ".ФормаОбъекта", ПараметрыОткрытия, ЭтаФорма);
	КонецЕсли;

	ОбновитьСведения();

КонецПроцедуры

&НаКлиенте
Процедура ДокументСнятияСУчетаБУНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Если Параметры.Ключ.Пустая() Тогда
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Ввод документа снятия с учета возможен только после записи.
			|Данные будут записаны.'");
			
		Оповещение = Новый ОписаниеОповещения("ВопросВводСнятиеСУчетаОСПослеЗаписиЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ОткрытьФормуСписаниеОС();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросВводСнятиеСУчетаОСПослеЗаписиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Если Записать() Тогда
			ОткрытьФормуСписаниеОС();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСписаниеОС()

	ПараметрыФормы = Новый Структура;
	Если ДокументСнятияСУчетаБУ = Неопределено Тогда
		ПараметрыФормы.Вставить("Основание", Объект.Ссылка);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ПодразделениеОрганизации", ПодразделениеБУ);
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", СтруктураПараметров);
		ОткрытьФорму("Документ.СписаниеОС.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	Иначе
		ПараметрыФормы.Вставить("Ключ", ДокументСнятияСУчетаБУ);
		ОткрытьФорму("Документ." + ИмяТипаДокументаСнятияСУчета +".ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	КонецЕсли;

	ОбновитьСведения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборКодаПоОКОФ(ВыбранноеЗначение)

	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;

	СтарыйОКОФ 					= Объект.КодПоОКОФ;
	СтараяАмортизационнаяГруппа = Объект.АмортизационнаяГруппа;
	
	КодОКОФ 				= ВыбранноеЗначение.ОКОФ;
	АмортизационнаяГруппа 	= ВыбранноеЗначение.АмортизационнаяГруппа;
	
	Объект.КодПоОКОФ = КодОКОФ;
	Объект.АмортизационнаяГруппа = АмортизационнаяГруппа;
	
	Модифицированность = Модифицированность
		ИЛИ СтарыйОКОФ <> КодОКОФ
		ИЛИ СтараяАмортизационнаяГруппа <> АмортизационнаяГруппа;
		
	ЗаполнитьПолеНаименованияКода("КодПо", "ОКОФ");

КонецПроцедуры

&НаСервереБезКонтекста
Функция КодПоОКОФПриИзмененииНаСервере(КодПоОКОФ)
	
	Возврат РегистрыСведений.АмортизационныеГруппыОКОФ.ПолучитьАмортизационнуюГруппу(КодПоОКОФ);
	
КонецФункции

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств(Команда)

	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма, Объект.Ссылка);

КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()

	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма, РеквизитФормыВЗначение("Объект"));

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.КонтактнаяИнформация

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент,, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.Очистка(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	УправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда.Имя);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат)
	УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтактнаяИнформация

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	ОписаниеКоманды = УправлениеПечатьюКлиентПовтИсп.ОписаниеКомандыПечати(Команда.Имя, ЭтаФорма.Команды.Найти("АдресКомандПечатиВоВременномХранилище").Действие);
	ОписаниеКоманды.Вставить("ДатаСведений", КонецДня(ДатаСведений));
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(ОписаниеКоманды, ЭтаФорма, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#КонецОбласти